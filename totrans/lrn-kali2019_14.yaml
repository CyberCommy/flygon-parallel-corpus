- en: Network Penetration Testing - Post-Connection Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gaining access to a system or network is definitely not the end of performing
    scanning and further exploitation. Once you've gained entry to a secure environment,
    such as a target organization, this is where you'll need to divide and conquer
    other internal systems. However, the techniques involved in performing internal
    scanning are similar to those mentioned in earlier chapters ([Chapter 6](a7554e9e-076d-45b8-b0fa-3b02ac270e24.xhtml),
    *Active Information Gathering*). Here, new techniques will be introduced for scanning,
    exploitation, privilege escalation, and performing lateral movements on a network.
    To elaborate further, you will learn how to perform **Man-in-the-Middle** (**MITM**)
    attacks using various techniques and tools and see how to gather sensitive information
    such as users' credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Gathering information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MITM attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session hijacking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic Host Configuration Protocol** (**DHCP**) attacks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting LLMNR and NetBIOS-NS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Proxy Auto-Discovery** (**WPAD**) protocol attacks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elevating privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lateral movement tactics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell tradecraft
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching a VLAN hopping attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali Linux: [www.kali.org](http://www.kali.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MITMf: [https://github.com/byt3bl33d3r/MITMf](https://github.com/byt3bl33d3r/MITMf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Autoscan: [https://sourceforge.net/projects/autoscan/files/AutoScan/autoscan-network%201.42/](https://sourceforge.net/projects/autoscan/files/AutoScan/autoscan-network%201.42/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wireshark: [www.wireshark.org](http://www.wireshark.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CentOS/Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gathering information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the early parts of this book, we discussed in depth the importance of
    gathering information about a target using both passive and active techniques
    and tools in Kali Linux. However, when you've compromised a system via exploitation,
    it isn't the end of the penetration test. Rather, it's the point from which you
    will continue onward to exploit different systems on the organization's network,
    create multiple back doors, and gain the highest privileges on various victim
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to perform network scanning using the following
    tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Netdiscover
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AutoScan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zenmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at each of these in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning using Netdiscover
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Netdiscover** is simply a scanner that leverages the **Address Resolution
    Protocol** (**ARP**) to discover connected clients on a network segment. ARP operates
    between the data link layer (layer 2) and the network layer (layer 3) of the OSI
    reference model. Devices use ARP to resolve IP addresses to MAC addresses for
    local communication.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform an internal network scan with Netdiscover, observe the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Netdiscover will begin to display all active devices, displaying their IP addresses,
    MAC addresses, the vendors of their **network interface cards** (**NICs**), and
    their hostnames, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc1d780e-ccd2-4f3f-b054-141c3499e331.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To perform a passive scan and use the sniffer mode of Netdiscover, use the
    `-p` parameter. The following is an example of enabling passive mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Since passive mode means patiently waiting to detect an ARP message on the
    wire, populating the table may be time-consuming as you have to wait for devices
    to communicate. The following is a screenshot indicating that passive mode is
    enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7cc7af6c-a717-4d04-b6a4-9300c0e0c4f2.png)'
  prefs: []
  type: TYPE_IMG
- en: During a penetration test, always remember to use simple tools to get the job
    done. Sometimes, using a complex tool may put you in a situation that means you'll
    be stuck for some time. As you will have noticed, the tools that we have been
    using aren't too difficult to use in order to complete a given task.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how to perform passive scanning using Netdiscover
    on Kali Linux. Next, we will learn how to perform network scanning using the AutoScan
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning using AutoScan-Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AutoScan-Network tool is able to scan and profile devices on a local network
    segment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, observe the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download AutoScan-Network from the following URL: [https://sourceforge.net/projects/autoscan/files/AutoScan/autoscan-network%201.42/](https://sourceforge.net/projects/autoscan/files/AutoScan/autoscan-network%201.42/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the version as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/876033dc-c556-4e9e-9ba0-7353041478a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the file has been successfully downloaded onto your Kali Linux machine,
    open the Terminal and execute `tar -xzvf autoscan-network-1.42-Linux-x86-Install.tar.gz`
    to extract the content. The following are the descriptions used in the `tar` utility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-x`: Used to extract files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-z`: Filters the compressed file through gzip'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`: Provides a verbose output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-f`: Specifies the file or device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, use `./autoscan-network-1.42-Linux-x86-Install` to install the tool,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12910d23-e509-4579-844d-6cff03b3e1f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that AutoScan-Network has been installed on Kali Linux, it's time to open
    the application. In the Kali Linux desktop environment, click on Applications
    | AutoScan-Network to open the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Network Wizard will open; click **Forward** to begin the setup of AutoScan-Network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, set the name of your network and click **Forward**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The wizard will ask for the location of the network; leave it as the default
    setting (localhost) and click **Forward**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your network adapter. If you are using a LAN adapter (`eth0`), leave
    it as the default and click **Forward**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Forward** on the Summary window to confirm your configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AutoScan-Network will begin to automatically scan your local network and attempt
    to perform fingerprinting of any services found on each device, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7b2484b-3f08-4036-9d79-1f067b97bddf.png)'
  prefs: []
  type: TYPE_IMG
- en: Once completed, AutoScan-Network will display all the IP addresses, hostnames,
    and services it was able to detect on your local network.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover the essential techniques required to perform
    scanning using Zenmap.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning using Zenmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zenmap is the GUI version of Nmap. It provides the same capabilities and features
    as its command-line version. To open Zenmap, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Applications | Information Gathering | Zenmap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the application is open, you''ll be presented with the following user
    interface, allowing you to specify a target or range and the type of scan to perform
    (profile), as well as allowing you to create and execute customized scans:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/82b6b411-f956-4c4a-a9be-b3e5c517e07e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once a scan is complete, Zenmap will populate the following information within
    the tab: Nmap Output, Ports/Hosts, Topology, and Host Details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e90e1d3-439d-45d2-ab7b-96a63d4b6dd1.png)'
  prefs: []
  type: TYPE_IMG
- en: In our exercises, we have been performing a Quick scan on the `10.10.10.0/24`
    network and have been able to determine active systems and any open ports.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have acquired the skills needed to perform a quick scan
    using Zenmap. In the next section, we will learn more about MITM attacks.
  prefs: []
  type: TYPE_NORMAL
- en: MITM attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An **MITM** attack is simply when the attacker sits between the victim and
    the rest of their network, intercepting and capturing network packets. The following
    is an illustration displaying an attacker (`192.168.1.5`) who is connected to
    the same segment as the victim (`192.168.1.10`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/015f7cb4-54a1-4aeb-a9bc-d188d6d9095f.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, the attacker machine will not be able to intercept and capture any
    traffic between **PC1** and the default gateway (`192.168.1.1`). However, an attacker
    can perform **ARP poisoning** between the victim and the gateway. ARP poisoning
    is when an attacker sends a **gratuitous ARP response** to a device telling it
    to update its IP-to-MAC mapping. The attacker machine will send gratuitous ARP
    messages to the victim, telling the victim's machine that the gateway has changed
    to `192.168.1.1 - CC:CC:CC:CC:CC:CC`, and to the gateway, telling it that **PC1**
    has changed to `192.168.1.10 - CC:CC:CC:CC:CC:CC`.
  prefs: []
  type: TYPE_NORMAL
- en: This would have the effect of all packets exchanged between **PC1** and the
    router being passed through the attacker machine, which sniffs those packets for
    sensitive information, such as routing updates, running services, user credentials,
    and browsing history.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we'll take a look at various tools and techniques
    for performing a successful MITM attack on an internal network.
  prefs: []
  type: TYPE_NORMAL
- en: ARPspoof
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the first tools we will look at is ARPspoof. ARPspoof is used to send
    fake ARP messages to a victim''s machine, tricking it into sending its traffic
    to the attacker''s machine or another gateway on the network. Since we have an
    idea of how ARP poisoning and spoofing works, we can jump right into the practice
    of using this tool. We use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In our lab, I''m performing an MITM attack between a victim machine (`10.10.10.15`)
    and a gateway (`10.10.10.1`), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b8f2560-87b8-4051-b9a0-630e9c35a30a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'ARPspoof will begin sending **gratuitous ARP** messages to both devices continuously.
    Using *Ctrl* + *C* will stop the ARP poisoning attack, and ARPspoof will perform
    a clean-up action to restore a working state between the victim and gateway, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2d3675c-f02a-48f4-a950-3465a6a7427b.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the clean-up has ended successfully, both the PC (`10.10.10.15`) and gateway
    (`10.10.10.1`) will communicate on the network as originally intended.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this section, you are now able to perform an MITM attack using
    ARPspoof. In the next section, you will learn about MITMf and its features.
  prefs: []
  type: TYPE_NORMAL
- en: MITMf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MITMf is an all-in-one tool for performing various types of MITM attacks and
    techniques on a victim''s internal network. The features of MITMf include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: The capturing of NTLM v1/v2, POP, IMAP, SMTP, Telnet, FTP, Kerberos, and SNMP
    credentials. These credentials will allow you to access users' accounts, systems/devices,
    file shares, and other network resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of Responder to perform LLMNR, NBT-NS, and MDNS poisoning attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get started with MITMf, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the dependencies packages in Kali Linux using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once completed, install `virtualenvwrapper`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you''ll need to update the source in the `virtualenvwrapper.sh` script.
    Firstly, execute the `updatedb` command to create an updated database of all the
    file locations in the local filesystem. Once completed, use the `locate virtualenvwrapper.sh`
    command to get the file path. Then, execute the `source` command followed by the
    file path, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4def36d9-0436-4cf4-9a9b-1efd78d50d4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a virtual environment using the `mkvirtualenv MITMf -p /usr/bin/python2.7`
    command and download the MITMf repository, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/80c17ae0-0b98-497f-9d93-8c180e044b97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the repository has been downloaded, change directory and clone the sub-modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the dependencies using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the help menu, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You have now set up MITMf on your Kali Linux machine. Next, let's take a deep
    dive into learning about the use cases of MITMf.
  prefs: []
  type: TYPE_NORMAL
- en: Use cases of MITMf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the various use cases of MITMf:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that all attacks should only be performed in a lab environment
    and only on networks for which you have obtained legal permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can bypass HTTPS with MITMf:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`-i`: Specifies the interface to execute MITMf against'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--spoof`: Tells MITMf to fake an identity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--arp`: Performs redirection of traffic via ARP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--hsts`: Loads the sslstrip plugin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--dns`: Loads a proxy to modify DNS queries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--gateway`: Specifies the gateway'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--target`: Specifies the target'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can perform an ARP poisoning attack between the gateway (`10.10.10.1`)
    and the entire subnet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can perform ARP poisoning between the victim and the gateway (`10.10.10.1`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can perform DNS spoofing while performing an ARP poisoning attack on a
    subnet and gateway (`10.10.10.1`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can perform LLMNR/NBTNS/MDNS spoofing using MITMf:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can perform a DHCP spoofing attack:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This attack is useful during the post-exploitation phase.
  prefs: []
  type: TYPE_NORMAL
- en: The IP addressing scheme and subnet information is taken from the config file.
  prefs: []
  type: TYPE_NORMAL
- en: 'An HTML iframe can be injected using MITMf:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'A JavaScript script can be injected:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can perform ARP poisoning with the WPAD protocol as a rogue proxy server
    using the `responder` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an additional list of parameters that can be incorporated:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Screen Capture**: This allows MITMf to use HTML5 canvas to get an accurate
    image of the client''s web browser using the `--screen` command. Additionally,
    you can capture screenshots using a time interval with the `--interval seconds`
    command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keylogger**: The `--jskeylogger` command injects a JavaScript keylogger into
    the victim''s web pages to capture keystrokes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please keep in mind that to view additional parameters for the MITMf tool, you
    can execute the `python mitmf.py --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this section, you now have the skill set required to perform
    various types of attacks using MITMf. In the next section, we will cover session
    hijacking attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Session hijacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will perform session hijacking on a target machine on our
    network. To perform this attack, we will combine a few other techniques to ensure
    that it's successful. Whenever a user visits a website, the web server sends a
    cookie to the web browser. The cookie is used to monitor the user's activities
    and provide a better user experience by tracking items in a shopping cart, maintaining
    persistent login while browsing other areas of a website, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Session hijacking allows an attacker or penetration tester to capture and take
    over (hijack) another user's sessions while the victim is logged into a website.
    Session hijacking allows the penetration tester to capture the session token/key,
    which is then used to gain unauthorized access to information and resources on
    a system. For example, capturing the session of a user who is logged into their
    online banking portal can allow the attacker to access the victim's user account
    without having to enter the victim's user credentials, as they can simply provide
    the cookie data to the website/online portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we begin, we will be using the following topology in our lab network
    to complete our exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1eed32ba-0333-4fc8-8f0e-853a81c5c8bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To ensure that you complete this exercise successfully, use the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up an MITM attack using **Ettercap-Graphical** with Kali Linux. To perform
    this task, navigate to Applications | 09 – Sniffing & Spoofing | ettercap-graphical
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd6e6b03-d096-4a37-9189-76536f24a6ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once Ettercap has opened, click on Sniff | Unified sniffing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac42ad1d-6e95-4cd1-9a15-d6b5ce2191f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A small popup will appear. Select your **Network interface:** **eth0** and
    click **OK**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ddaa88ff-71af-4eca-a610-00f255571e1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scan for all host devices on your network by navigating to Hosts | Scan for
    hosts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dbc7923e-36ac-4dbd-865b-9a7f6c03cc08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the scan has been completed, click on Hosts | Hosts list to view a list
    of targets on your network. Select your target and click on **Add to Target 1**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/99bdad5c-1a3c-4446-9f75-6ca0db075585.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the target has been added successfully, enable ARP poisoning on Ettercap
    by navigating to Mitm | ARP poisoning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/232c440a-def6-4d93-b784-4b485b49dfae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A pop-up window will appear. Select **Sniff remote connections.** and click
    on **OK**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/367bf062-7527-42d3-96d9-3d2f1adde364.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on Start | Start sniffing to enable the MITM attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b35fb21-4e12-4997-b43d-53a768911536.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we are going to use the **Hamster** tool to help us manipulate the data.
    To open Hamster, navigate to Applications | 09 – Sniffing & Spoofing | hamster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e987849-1294-4108-b92b-8a89d0a0b32c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Hamster** will open a command-line interface on a new Terminal window and
    provide the URL, `http://127.0.0.1:1234`, which is used to view the session information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/701f0c22-a9db-429e-9b98-986a5e761c38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will use **Ferret** to capture the session cookies between the victim
    and the data''s destination. By default, Kali Linux does not have Ferret installed;
    also, Ferret is a 32-bit tool. To install Ferret on Kali Linux, use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation has completed successfully, navigate to Applications
    | 09 – Sniffing & Spoofing | ferret:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37986d1e-7e74-4044-8f7b-a2485043098b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use the `ferret -i eth0` command to capture cookies on the Ethernet interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d9f2ce6-0cf2-4901-a445-fd2aff2f9c69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the web browser on Kali Linux and enter `http://127.0.0.1:1234` to access
    the **Hamster** proxy interface. Click on **adapters**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/34ae3843-b9a7-4504-9ae4-412f9edd40fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the `eth0` adapter and click **Submit Query**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/507c9079-0ff6-457a-af30-45abff613640.png)'
  prefs: []
  type: TYPE_IMG
- en: Go to the victim's machine and, using the web browser, enter the IP address
    of **Metasploitable**. Next, click on **Damn Vulnerable Web Application** (**DVWA**).
    Then, log in using the username (`admin`), and the password (`password`), to generate
    some traffic between the victim machine and another system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On your Kali Linux machine, refresh the Hamster web page. You should now see
    the victim''s IP address appear. Click on the victim''s IP address to get more
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8759207a-45f9-422f-9f63-b535b570afec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on any of the URLs on the left-hand column will provide an image of
    what the victim might have seen on their web browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e3a8a754-aa8d-49ca-a679-c4c88878cd2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view a list of cookie/session details, open a new tab on your web browser
    and enter the URL shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/84ae6cf7-2797-4a93-ac4a-e278d46a2a72.png)'
  prefs: []
  type: TYPE_IMG
- en: We were able to capture the session cookies for the transactions between the
    victim's machine and the web server. Having completed this exercise, you are now
    able to perform cookie stealing/session hijacking attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have completed this exercise, you have the skills required to perform
    a session hijacking attack on any network. In the next section, we will cover
    **Dynamic Host Configuration Protocol** (**DHCP**) attacks.
  prefs: []
  type: TYPE_NORMAL
- en: DHCP attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many networks, there are hundreds, and even thousands, of end devices such
    as desktops, laptops, and smart devices that require network connectivity to access
    resources on the corporate network. However, each device requires an address on
    the network for sending and receiving messages (packets), a path to access resources
    outside the local network (default gateway), an identifier to determine the logical
    network segmentation (subnet mask), and someone who can resolve hostnames to IP
    addresses on a network (DNS server).
  prefs: []
  type: TYPE_NORMAL
- en: 'Network administrators must ensure that the following four components are configured
    on all end devices:'
  prefs: []
  type: TYPE_NORMAL
- en: IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subnet mask
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of a DHCP server allows IT professionals to efficiently distribute IP
    configurations automatically to end devices on their network very quickly. To
    further understand the importance of DHCP on a network, when a client is connected
    to a network (wired or wireless), the client machine broadcasts a **DHCP Discover**
    packet on the network in search of a DHCP server to provide IP configurations.
    When a DHCP server receives the discover packet, it responds with a **DHCP Offer**
    packet. This packet contains available IP settings, which the client can use on
    the network. After the client receives and checks the offer from the server, the
    client responds with **DHCP Request**, which is used to inform the server that
    the IP information will be used. Lastly, the DHCP server provides an acknowledgment
    and confirmation by sending a **DHCP ACK** packet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram outlines the DHCP process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/705aa3a4-6d57-426f-8dd7-40e70a641f1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Since a DHCP server typically provides the default gateway information to client
    devices, if the DHCP server were to provide another path to the internet, let's
    say through an attacker machine, the client (victim) machine would accept the
    new path and forward their packet accordingly. Additionally, changing the DNS
    server configurations on a client machine to forward all DNS queries to a fake
    DNS server can result in the loading of phishing web pages on a victim's browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will create a rogue DHCP server to redirect victims'' traffic
    on the network. To get started, we will use the Metasploit framework to create
    our rogue DHCP server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the PostgreSQL database and Metasploit by using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Metasploit contains a module that allows us to enable a DHCP server. Use the
    commands as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38c6a458-8dac-497c-a88f-286c8fa41b6a.png)'
  prefs: []
  type: TYPE_IMG
- en: The `show options` command will display a description of parameters that are
    both optional and required prior to executing this module in Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will set the start and end IP addresses, the network broadcast address,
    the network mask (subnet mask), the DNS server, the default gateway (default router)
    and the IP address of the rogue DHCP server. The following screenshot demonstrates
    how to set the values for each parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5fb3556-b3f3-4a15-9929-bd171e3aac95.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you''re finished, use the `show options` command to verify that the values
    are set correctly for each parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/afd623b3-af16-477b-a499-5c2e941f2ed5.png)'
  prefs: []
  type: TYPE_IMG
- en: When you're ready to launch/execute the module, type `run` and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following snippet is from a Windows 10 machine in our penetration lab.
    Looking closely, you can see that the IP configurations are within the parameters
    we had previously configured on our rogue DHCP server in Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c67743a-3915-476e-88a3-87da4009e2da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, the following is the Wireshark capture of the DHCP messages during
    the launch of the rogue DHCP server on the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d082a93-c082-4f0e-9220-9537c47087bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Looking closely at the screenshot, we can see the **DHCP Discover** packet sent
    from the Windows 10 machine looking for a DHCP server on the network. Eventually,
    our rogue DHCP server was able to respond to the client with a **DHCP Offer**
    packet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows the content of the **DHCP Offer** packet that was sent
    to the victim, the Windows 10 machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a61193c8-6baf-4c28-b02b-6404c0aeb02c.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the client-assignable IP address (`10.10.10.101`), the default gateway
    (`10.10.10.16`), the client's MAC address, the type of DHCP message (`Offer`),
    the DHCP server's IP address (`10.10.10.16`), the subnet mask, and the DNS server
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: '**DHCP Request** is sent from the client to the DHCP server (rogue) to confirm
    the IP configurations received from the **DHCP Offer** message. Lastly, the DHCP
    server (rogue) sends a **DHCP ACK** packet to acknowledge that the client is going
    to use the information provided.'
  prefs: []
  type: TYPE_NORMAL
- en: You now have the skills to launch a DHCP attack on a target network using Metasploit.
    In the next section, we will cover **Link-Local Multicast Name Resolution** (**LLMNR**)
    and NetBIOS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting LLMNR and NetBIOS-NS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many organizations, as a penetration tester, you will encounter a lot of
    Windows Server machines that serve the role of **domain controller** (**DC**).
    A DC is simply a Windows server machine running Active Directory Domain Services
    and is used to manage all the devices within the organization. **Active Directory**
    (**AD**) is used by IT professionals to manage components such as computers and
    users on a network. Additionally, IT professionals can use **Group Policy Objects**
    (**GPOs**) in AD to assign privileges to end devices and users, thereby creating
    restrictions to prevent unauthorized activities and actions on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Within a Windows environment, both the **NetBIOS-NS** and **LLMNR** protocols
    are present. **NetBIOS-NS** means **Network Basic Input/Output System name service**.
    NetBIOS-NS is commonly used to resolve hostnames on local networks. NetBIOS has
    been around for quite a long time and is outdated. However, it is still being
    used to communicate with older, legacy systems.
  prefs: []
  type: TYPE_NORMAL
- en: Today, the LLMNR protocol is commonly used on networks where a **Domain Name
    Server** (**DNS**) server is not present or available. Similar to NetBIOS-NS,
    LLMNR is also used to resolve hostnames on a network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Kali Linux, we can take advantage of the security vulnerabilities in
    these protocols. In this scenario, we will attempt to perform an MITM attack on
    our lab network. This design contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows Server 2016 with Active Directory Domain Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new domain named `pentestlab.local`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 machine acting as a client in the domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux as the attacker machine using Responder to perform LLMNR poisoning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this exercise, we will be using the following topology to perform our attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89dfe802-ef5b-44d4-a28e-f90baeef1b0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Ensure that you have installed Windows Server 2016 in your lab. If you haven't
    done so already, please read [Chapter 3](487e7dee-83ee-47a8-955e-04958ea4dae4.xhtml),
    *Setting Up Kali - Part 2,* which contains the guidelines for installing Windows
    as a virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up Active Directory in Windows Server 2016, please use the following
    URL: [https://blogs.technet.microsoft.com/canitpro/2017/02/22/step-by-step-setting-up-active-directory-in-windows-server-2016/](https://blogs.technet.microsoft.com/canitpro/2017/02/22/step-by-step-setting-up-active-directory-in-windows-server-2016/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To join the `pentestlab.local` domain using a Windows 10 machine, please refer
    to the following URL for instructions: [https://helpdeskgeek.com/how-to/windows-join-domain/](https://helpdeskgeek.com/how-to/windows-join-domain/).
    Additionally, on your Windows 10 machine, you will need to set the DNS Server
    as the IP address of the Windows Server 2016 machine before joining the domain.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the lab is ready, let's head over to our Kali Linux machine. We will use
    Responder to perform our MITM attack to capture various protocol messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started in terms of exploiting LLMNR and NetBIOS, observe the following
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `locate` utility, we will discover the location of `Responder.py`,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/18b21eb6-8af4-40df-a889-3df4ad239942.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change your current working directory to `/usr/share/responder`. Next, enable
    Responder to listen in on traffic on the network, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3fd8e538-a762-4930-a514-ed9102bea5f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use the following parameters in Responder:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`-I`**, to specify the listening interface'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r`, to enable responses for NetBIOS queries on the network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`, to enable NetBIOS replies for domain suffix queries on the network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-w`, to enable the WPAD rogue proxy server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By default, Responder performs poisoning attacks on victims. Whenever the client
    attempts to access a resource on the network, such as file share, the user''s
    credentials are sent over the wire, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/084c7f4f-9e5e-4b9e-a6b0-d1c7e333ca0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are able to identify the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The client's IP address
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The domain name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The victim's username (bob)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The victim's password in the form of an NTLMv2 hash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hashing algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fact that the user was attempting to access a **Server Message Block** (**SMB**)
    file share on the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the hash and save it into a text file on your desktop. I have saved my
    hash on my desktop in a file named `Hash.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Responder saves hashes in the `/usr/share/responder/logs` directory
    using the victim's IP address as part of the naming convention for the text file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can use **Hashcat** to perform offline password cracking of the NTLMv2
    hash to recover the plaintext password of the user. Use the following syntax to
    perform password cracking with Hashcat:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Remember that performing password cracking can be a time-consuming task. Additionally,
    ensure that the wordlist list/directory file contains a large number of entries
    to increase the possibility of success.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `-m` parameter to specify a mode in Hashcat. A mode is used to tell
    Hashcat the type of hash. Mode `5600` is used for **Network Protocol – NetNTLMv2**.
    Additionally, to discover other modes, use the `hashcat --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the SecLists wordlist, please refer to the following URL: [https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists).'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, you can use **John the Ripper** to perform password cracking on
    the hashes you have captured using Responder.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have completed this section, you are now able to exploit the weaknesses
    in LLMNR. In the next section, we will demonstrate how to exploit WPAD vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: WPAD protocol attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within a corporate network, system administrators usually allow employees to
    access the internet through a proxy server. The proxy server usually improves
    performance and security, and monitors web traffic entering and leaving the corporate
    network. WPAD is a technique that is used on client machines to discover the URL
    of a configuration file via DHCP discovery methods. Once a client machine discovers
    a file, it is downloaded on the client machine and executed. The script will determine
    the proxy for the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to use Responder on Kali Linux to capture a
    victim''s user credentials. Before we begin, the following topology will be used
    in this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7842e6c-9ab1-4437-bf96-745ea27cd2cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the following steps, we will be able to easily exploit WPAD in a Windows
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: The lab configurations are the same as those in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that the Windows 10 client machine has joined the domain hosted by Windows
    Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your Kali Linux machine, change your working directory to the Responder location
    using the `cd /usr/share/responder` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the `python Responder.py -I eth0 -wFb` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b44e207a-13fe-43ed-8d1d-674f21064db2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The switches used in the snippet provide the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-I`: Specifies the interface to use'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-w`: Enables the WPAD rogue proxy server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-F`: Forces NTLM authentication on `wpad.dat` file retrieve'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-b`: Is used to return basic HTTP authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When the victim attempts to browse or access any local resources on the network,
    the following login window will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/788a6864-c93e-496e-a35b-f05218461830.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the victim enters their user credentials, Responder will display them in
    plaintext, as shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please note that the user account used in this example is one that I have set
    myself in my personal lab domain for educational purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as a reminder, all logs generated and data captured by Responder are stored
    in the `/usr/share/responder/logs` directory. Now, you are able to capture employees''
    user credentials by exploiting WPAD on a corporate network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e5797d4-710b-409e-a820-d5f78a2af58b.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will learn about Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wireshark is one of the best network protocol analyzers and sniffers in the
    industry. Its capabilities are extensive and provide in-depth results and analysis
    on network packets. For every conversation or transaction that happens on a network,
    Wireshark is able to provide a breakdown of the composition of each packet.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin by taking an overview of the functions of Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: Basic overview of Wireshark and how to use it in MITM attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wireshark is already pre-installed on your Kali Linux operating system. To
    get started, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Applications | 09 – Sniffing & Spoofing | wireshark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once Wireshark is open, you''ll be presented with the user interface as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf37db63-389b-4968-a742-e798e2d554c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Wireshark will provide a list of all network interfaces and display a live summary
    graph of live network traffic passing through each network adapter. Double-clicking
    an interface will immediately start a live capture on the network interface card.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling a capture on your local system will only display traffic flowing between
    your attacker machine and the remainder of the network. This means that Wireshark
    will only be able to intercept/sniff network traffic that is inbound to, and outbound
    from, your computer. That's not so handy, is it?
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at creating a mirror of all network traffic from a network
    switch and sending it to our attacker machine.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a SPAN port
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SPAN allows a switch to create a copy of traffic on one or more ports and send
    the same copy out of another port. This configuration is usually done when a network
    security administrator wants to connect a protocol analyzer (sniffer) or an **intrusion
    detection system** (**IDS**) to the network to monitor for any security threats:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa41550a-4b36-4874-9498-b9b44f314703.png)'
  prefs: []
  type: TYPE_IMG
- en: In the diagram, the attacker machine (running Wireshark) is connected to the
    Fast Ethernet 0/1 interface on a **Cisco IOS 2960** **switch**, while the other
    devices are connected to the same network segment. Let's say we would like to
    get a copy of all traffic flowing between the Fast Ethernet 0/2, Fast Ethernet
    0/3, and Fast Ethernet 0/4 ports.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform this task of configuring a SPAN port on a Cisco IOS switch, use
    the following guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the following command to send the output to Fast Ethernet 0/1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the configurations, use the `show monitor` command on the switch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e46e174-9a7e-4fa6-a115-bbfa2d2e2bc5.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows us that the source ports (used for monitoring network traffic)
    and destination ports are configured properly. Once we have enabled Wireshark
    on our attacker machine to start capturing on our local interface, `eth0`, all
    network packets will be shown live on the Wireshark user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this section, you are now able to configure a SPAN port on
    a Cisco IOS switch. In the next section, we will dive into configuring Wireshark
    to sniff network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a monitor (sniffer) interface on Wireshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure a monitoring (sniffer) interface on Wireshark, observe the following
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Capture | Options to display all network interfaces on the local machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae0917ee-9347-47b0-b226-c9e6a4761ed7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the appropriate network interface, select Enable promiscuous mode on
    all interfaces, and then click Start to begin capturing network packets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c630fee5-a4f6-46f4-bc06-4bf2c8b4be03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Packet List** pane will begin to populate network packets as transactions
    take place on the network. Clicking on a packet will display all its details and
    fields within the following **Packet Details** pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af5558ed-bc66-4b5f-8e1c-a5d2c73511f5.png)'
  prefs: []
  type: TYPE_IMG
- en: As packets are being populated on the interface, the experience may be a bit
    overwhelming. In the following sub-sections, we will take a practical approach
    in performing HTTP analysis and other types of analysis to ascertain some important
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this section, you are now able to use Wireshark as a sniffer
    on a network. In the next section, we will demonstrate how to perform traffic
    analysis in order to gather sensitive information using Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing Wireshark packet captures to find the goods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following exercise, we''ll be using capture from **The Honeynet Project**
    ([www.honeynet.org](http://www.honeynet.org)) to help us understand packet analysis.
    To perform the parsing of Wireshark packets, observe the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.honeynet.org/node/1220](https://www.honeynet.org/node/1220)
    and download the `conference.pcapng` file. Additionally, the following URL, [https://honeynet.org/sites/default/files/conference.pcapng.gz](https://honeynet.org/sites/default/files/conference.pcapng.gz),
    is a direct download link to the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once downloaded, open the `conference.pcapng` file using Wireshark; you should
    have the following view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/afc0e862-89c0-4de9-859a-0f7a923a6cdf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A helpful feature of Wireshark is to auto-resolve IP addresses to hostnames
    via DNS, resolve MAC addresses to vendor names, and resolve port numbers to services
    and protocols. To enable this feature, go to Edit | Preferences | Name Resolution.
    Ensure the following options are checked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e42f6ef-95f8-4c75-8a10-5788899c8227.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click OK to confirm and save the configuration. Back on the main user interface,
    you''ll notice that all the public IP addresses are now resolved to their public
    hostnames:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4ae894dd-0d03-477b-a3ec-e28b7b069912.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What makes Wireshark such a powerful tool is its display and capture filters.
    To see all traffic originating from a source IP address, use the `ip.src == <ip
    address>` filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d049a841-2892-4e6d-a706-532e5849ee78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To display all traffic for a specific destination address, we can use the `ip.dst
    == <ip address>` filter. However, we can combine filters to view traffic from
    a specific source to a destination using the `(ip.src == <ip address>) && (ip.dst
    == <ip address>)` filter. In the following screenshot, we are using a filter to
    view all traffic originating from `172.16.254.128` going to Google''s DNS server
    `8.8.8.8`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42722bca-24e6-4c64-b77d-7244da1f3719.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When combining filters, you''ll need to use logic operations to get the task
    done. The following is a short list of various operators for combining filters
    in Wireshark:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b64167ac-358e-4638-a06e-1b9f6d51add7.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Ge` operator is used to indicate **greater than or equal to**, while the
    `Le` operator is used to indicate **less than or equal to**.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Wireshark display filters, please visit [https://wiki.wireshark.org/DisplayFilters](https://wiki.wireshark.org/DisplayFilters).
  prefs: []
  type: TYPE_NORMAL
- en: Memorizing display filters can be very challenging for anyone. However, Wireshark
    has made it simple to create custom filters quite easily using the right-click
    options on the user interface. Let's now try a few exercises to help you become
    more familiar with display filters.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with creating display filters in Wireshark, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, right-click on the source IP address on packet 1, and then click on
    **Apply as Filter** | **Selected** to immediately create and apply the filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aca92aa8-80a7-44f5-a214-503e926d9a38.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have a filter showing all traffic originating from the `172.16.254.128`
    address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in the Destination column, right-click on `8.8.8.8` or `google-public-dns-a.google.com`,
    click on **Apply as Filter**, and then select the option **...and Selected**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de821ab1-ad5b-48a9-8973-7ad5140adf2c.png)'
  prefs: []
  type: TYPE_IMG
- en: This will create the effect of displaying only traffic originating from `172.16.254.128`
    going to Google's DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: The **Apply as Filter** option will immediately apply the display filter on
    Wireshark. However, **Prepare as Filter** provides the same options but does not
    immediately apply the display filter. Rather, it allows you to continue building
    the filter syntax and apply it afterward.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view all conversations between devices on the network, click on **Statistics**
    | **Conversations**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f5f37362-8c54-4227-b8cc-52f135858a86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Conversations window will open, providing multiple tabs with various details
    such as Ethernet, IPv4, IPv6, TCP, and UDP sessions between devices, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3fa99eb-394f-490f-b7df-601a994c1d5a.png)'
  prefs: []
  type: TYPE_IMG
- en: You'll be able to determine which devices were communicating and transferring
    packets for a given time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wireshark allows us to easily view all the files that are downloaded and uploaded
    over the network. To perform this task, click on **File** | **Export Objects**
    | **HTTP**. The HTTP export window will open, displaying Packet, Hostname (source),
    Content Type, Size, and Filename details. To export a file to your desktop, select
    a packet on the interface and click on **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f9df10d-b5f2-468b-b303-a369581efa68.png)'
  prefs: []
  type: TYPE_IMG
- en: To export all the files from a Wireshark capture, use the **Save All** option.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reassemble and view all the messages for a single conversation between two
    devices, right-click on a packet and select **Follow** | **TCP Stream**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f139b3f2-a670-447d-a029-63b2d1ffc4de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Wireshark will gather all the packets for this stream, reassemble them, and
    present you with the dialog of messages exchanged between the two devices, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8528ead3-f63d-49c0-a07a-c3dd59a9c2c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a screenshot of a Telnet conversation between a client and
    a Linux server. Telnet is an **unsecure** protocol, and all communication between
    the Telnet client and Telnet server is sent across the network in plaintext. The
    following screenshot shows how Wireshark reassembles all the packets for a single
    conversation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ea8187a-0a9f-41ca-9d22-ea443dbc9219.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the user credentials used to log in to the server, the server **message
    of the day** (**MOTD**) banner, and all other transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed this section, you now have the skill set required to create
    custom display filters in Wireshark. In the next section, we will learn about
    escalating privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Escalating privileges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obtaining a user's credentials to access a system is only part of the gaining-access
    phase in penetration testing. However, remember that not all user accounts have
    **root** or **administrator** privileges. Therefore, remotely accessing a system
    with a non-root or standard user account will prevent you from executing certain
    applications and performing administrative tasks on the victim's system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Escalating privileges can be executed using a variety of techniques, including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining information from the SAM file on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data from the `passwd` file on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting weak permissions on running processes on a system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining sensitive information found on stored network file shares
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing the hash value of a user's password while they are communicating with
    another device on the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The information found in the SAM and passwd files contains the usernames and
    hash values of the users' passwords. Using password cracking techniques, you'll
    be able to retrieve the plaintext passwords of user accounts, which can then be
    used to gain access to devices. Obtaining an administrator or root account will
    provide unrestricted access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Having access to a system with a standard user account means we can execute
    a local privilege escalation exploit to gain administrator or root-level access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exploit-DB ([https://www.exploit-db.com/](https://www.exploit-db.com/)) provides
    a large repository of exploits for many purposes; use the search feature on the
    Exploit-DB website to discover privilege escalation exploits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e89a7d7-35cc-48b9-8cb6-18ab63449897.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the previous chapters, we demonstrated techniques using Metasploit to successfully
    exploit a target and gain access. The **Meterpreter** component provides the `getsystem`
    command, which attempts to escalate privileges on the target system as shown in
    the following screenshot. Look closely: you will see that we are able to acquire
    `nt authority\system` privileges on the victim. This is the highest level of access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4632f435-c683-478d-bf6e-9e5507cc0676.png)'
  prefs: []
  type: TYPE_IMG
- en: Within our Meterpreter shell, we can verify our level of access by using the
    `shell` command to get the Windows Command Prompt of our victim's machine. Once
    the Windows shell is obtained, we can now execute Windows-based commands such
    as `whoami` to verify our level of privilege on the victim's machine.
  prefs: []
  type: TYPE_NORMAL
- en: Always ensure that you perform extensive research about a target's vulnerability
    by checking Exploit-DB ([www.exploit-db.com](http://www.exploit-db.com)) and the
    Common Vulnerabilities and Exposures ([https://cve.mitre.org/](https://cve.mitre.org/))
    database for exploits to assist you in gaining access and escalating user privileges.
    In the next section, we will dive into lateral movement.
  prefs: []
  type: TYPE_NORMAL
- en: Lateral movement tactics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lateral movement allows an attacker to pivot all attacks through a compromised
    machine to other subnets within an organization. Let's imagine you're conducting
    a penetration test on a client's network. Their organization contains multiple
    subnets but they haven't informed you about the number of networks that actually
    exist. So, you start to scan the network to look for live hosts and vulnerabilities,
    and to discover the topology.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ve discovered and mapped the entire `10.10.10.0/24` network and you begin
    to exploit as many machines as possible. However, during your exploitation phase,
    you notice something interesting on a particular victim machine, and, on the Meterpreter
    shell, you execute the `ipconfig` command to view the IP configurations on the
    victim''s machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e442c01d-4d50-4445-b5f5-916ca37ee78e.png)'
  prefs: []
  type: TYPE_IMG
- en: In our scenario, `Interface 11` is connected to the same subnet as our attacker
    machine, and `Interface 18` is on another network. In some situations, if you
    attempt to access another subnet, a router or firewall may be configured to restrict
    access between different subnets for security purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get past security appliances and network access controls, the technique
    of **lateral movement** (pivoting) should be used. As the attacker, we can attempt
    to compromise a machine that is connected and is trusted on other subnets within
    the organization. Once we''ve set up pivoting or lateral movement, all our attacks
    will be sent through the victim machine and forwarded to the new target network,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac8f85bd-b20b-4685-9251-0c8f59b45560.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To perform lateral movement using Metasploit, observe the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `arp` command on Meterpreter will display the ARP cache. In the following
    screenshot, there are two different networks connected to our victim:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1785c20-b25d-4969-b5a2-1e98fd89d4a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To enable lateral movement, execute the `run post/multi/manage/autoroute` command
    within Meterpreter, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0098d4f9-d6fb-491d-99f5-c1622d05ffb2.png)'
  prefs: []
  type: TYPE_IMG
- en: This will add a route to the additional networks and allow your attacker machine
    to send all its attacks to the victim machine (`10.10.10.23`) and forward them
    to the `10.10.11.0/24` network.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test lateral movement (pivoting), we can attempt to perform a NetBIOS scan
    on the `10.10.11.0/24` network from our attacker machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb1ddc8e-9afa-4c48-9bc9-b926fcb80922.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following results prove that our attacker machine is able to perform scans
    and attacks on another subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6b72db3-be18-457f-b3a5-d656cb91d5c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, performing a TCP port scan on a target has proven fruitful since
    all attacks are sent through the `10.10.10.23` machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dfeeee96-449b-4629-941b-6b24def7a7af.png)'
  prefs: []
  type: TYPE_IMG
- en: We can then target the new subnet.
  prefs: []
  type: TYPE_NORMAL
- en: During a penetration test, we may be tasked with discovering hidden or remote
    networks. For each system you have gained access to, be sure to check the ARP
    cache on the victim's machine and attempt to perform lateral movement throughout
    the network.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a look at using PowerShell to disable Windows
    Defender.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell tradecraft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell is a command-line scripting language that is built on .NET. An IT
    professional can use PowerShell to automate many tasks and manage their operating
    systems better. Windows, Linux, and macOS all support PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will dive into learning how to remove Windows Defender
    virus definitions using PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: Removing Windows Defender virus definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On all modern versions of Microsoft Windows, Microsoft has included **Windows
    Defender** as the native anti-malware protection. There are many home users and
    organizations that utilize Windows Defender as their preferred anti-malware solution
    on end devices. As a penetration tester, being undetected during a penetration
    test is very important as your actions are designed to simulate a real-world attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following PowerShell script will remove all virus definitions from Windows
    Defender:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding script being successfully
    executed on a Windows 10 machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8780f8af-a73f-474d-a22b-9a1c6201315c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, take a look at the Windows Defender version information; we can
    see that all definitions have been removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4bb8d48c-d2aa-4803-901b-79519a0f6571.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There may be cases where Windows Defender is re-enabled on a machine. Using
    the following script will add the `C:\` path to the Windows Defender exclusion
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot demonstrates how to execute the script successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/313b6e31-26d8-4c91-9608-7edaa7c392e9.png)'
  prefs: []
  type: TYPE_IMG
- en: This technique will allow us to execute malicious code on the `C:` drive of
    the victim's Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned how to remove virus definitions from Windows Defender,
    we will now cover how to disable Windows **Antimalware Scan Interface** (**AMSI**).
  prefs: []
  type: TYPE_NORMAL
- en: Disabling Windows Antimalware Scan Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microsoft has included its AMSI in recent versions of Windows to prevent any
    sort of malicious code from being executed on a local system. If you''re compromising
    a Windows operating system, executing PowerShell scripts can be very helpful,
    but AMSI will prevent any malicious actions. To disable AMSI, execute the following
    PowerShell script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the successful execution of the script on a
    Windows 10 operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a51a46a-4c8b-4c4b-bf92-9fa263c44631.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, you can run almost any malicious code on your victim's Windows
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section assumed that you have already compromised a Windows operating
    system on a corporate network. In the next section, we will briefly discuss a
    common vulnerability that is overlooked by many network administrators in the
    IT industry: VLAN hopping.'
  prefs: []
  type: TYPE_NORMAL
- en: Launching a VLAN hopping attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Organizations usually implement **virtual local area networks** (**VLANs**)
    to segment and improve the performance of their network infrastructure while improving
    security. When configuring VLANs, there are two main ports that we are concerned
    with: the access port and the trunk port.'
  prefs: []
  type: TYPE_NORMAL
- en: Access ports are those that are configured to connect the end device to the
    switch. These ports only allow one data VLAN and an additional voice VLAN. When
    configuring an access port, the VLAN ID is usually statically configured as an
    access port on a switch.
  prefs: []
  type: TYPE_NORMAL
- en: For multiple VLANs to communicate over a network, trunk ports need to be configured
    between switches. Trunk ports allow multiple VLANs to pass traffic simultaneously.
    Trunk ports are configured between switches and are configured between a switch
    and a router to implement inter-VLAN routing, which allows one VLAN to communicate
    with another VLAN.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many times when IT professionals do not configure networking devices
    properly. A penetration tester can exploit this vulnerability and attempt to perform
    a VLAN hopping attack. Once successful, the attacker machine will be able to access
    all available VLANs and perform MITM attacks. The following diagram shows an attacker
    who has successfully enabled an unauthorized trunk:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fbe4f6dd-78bb-4cb1-978a-74e14f34abeb.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yersinia** on Kali Linux allows an attacker to perform various types of layer
    2 attacks on a network to take advantage of security misconfigurations and weaknesses.
    To open yersinia, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The graphical user interface will appear on your desktop. To launch a VLAN
    hopping attack, execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Launch attack** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new window will appear. Click the **DTP** tab and select the **enabling trunking**
    radio button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28339c2b-c036-43f3-9bae-769d61fad6f8.png)'
  prefs: []
  type: TYPE_IMG
- en: When you're ready, click OK to begin performing a **VLAN hopping** attack on
    the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Having completed this section, you are now able to perform VLAN hopping attacks
    using Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the course of this chapter, you have learned about internal network scanning,
    MITM attacks, packet analysis, privilege escalation, lateral movement using Meterpreter,
    disabling Windows Defender using PowerShell, and VLAN hopping.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the skills required to perform internal network scanning using
    tools such as AutoScan-Network, Zenmap, and Netdiscover. Additionally, you are
    now able to capture packets and perform packet analysis using Wireshark to view
    victims' traffic as it flows through the target network. Furthermore, you know
    how to successfully execute post-connection attacks such as lateral movement (pivoting),
    as well as how to disable Windows Defender virus protection on a victim's system
    using PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this chapter will prove to be helpful and informative in your studies
    and career. In [Chapter 12](8a08d9ef-f463-4c14-a924-9c7cde69767f.xhtml), *Network
    Penetration Testing - Detection and Security*, you will learn about detecting
    ARP poisoning attacks and suspicious activities and look at some remediation techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some questions based on the topics we have covered in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What tool can be used to access multiple VLANs on a misconfigured switch?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command within Meterpreter can be used to escalate privileges?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of ARP?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since Telnet is an insecure protocol, what other remote access protocol should
    be used to prevent an attacker from seeing data during transmission?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On a Windows operating system, how can you determine your current user privileges
    and the name of the user account?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Lateral movement techniques**: [https://attack.mitre.org/tactics/TA0008/](https://attack.mitre.org/tactics/TA0008/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wireshark documents**: [https://www.wireshark.org/docs/](https://www.wireshark.org/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
