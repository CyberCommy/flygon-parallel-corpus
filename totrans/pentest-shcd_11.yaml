- en: Real-World Scenarios – Part 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we go with our final practical part of this book. It takes a different
    approach, focusing on the **structured exception handling** (**SEH**) based buffer
    overflow, and is also based on the HTTP header, but using the GET request.
  prefs: []
  type: TYPE_NORMAL
- en: Easy File Sharing Web Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our target here will be the Easy File Sharing Web Server 7.2\. You can find
    the exploit at [https://www.exploit-db.com/exploits/39008/](https://www.exploit-db.com/exploits/39008/),
    and you can download the vulnerable application from [https://www.exploit-db.com/apps/60f3ff1f3cd34dec80fba130ea481f31-efssetup.exe](https://www.exploit-db.com/apps/60f3ff1f3cd34dec80fba130ea481f31-efssetup.exe).
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the application; if you did this in the previous lab, then
    we have to turn off the web server in Sync Breeze Enterprise because we need port
    `80`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Sync Breeze Enterprise and navigate to Tools | Advanced Options... | Server,
    and make sure that Enable Web Server on Port is disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00384.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save to save the changes and close it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Easy File Sharing Web Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00385.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Try it!. When the application opens, click on Start in the top-left
    corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00386.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Fuzzing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our parameter is the `GET` parameter; look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00387.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The `/` after `GET` is our parameter; let''s build our fuzzing code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And on our victim machine, start the Immunity Debugger as the administrator
    and attach to `fsws`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00388.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s start with a fuzzing value of `1000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00389.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Nothing happened; let''s increase it to `3000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, once again run the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00390.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Once again, it''s the same; let''s try `5000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, once again, run the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00391.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, scroll down in the stack window; you will see that we managed to overflow
    the SEH and nSEH:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00392.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'We can confirm that by navigating to View | SEH chain or (*Alt* + *S*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00393.gif)'
  prefs: []
  type: TYPE_IMG
- en: Controlling SEH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s try to get the offset of the SEH by creating the pattern by using
    Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The exploit should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Close the Immunity Debugger, and re-run Easy File Sharing Web Server. Run the
    Immunity Debugger as an administrator and attach it to `fsws`, then run the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application crashed; let''s use `mona` to perform some analysis on our
    pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00394.gif)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00395.gif)'
  prefs: []
  type: TYPE_IMG
- en: So the offset of the nSEH should be after `4061`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s confirm that by restarting the application and the Immunity Debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00396.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Hit *Shift* + *F9* to bypass the exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00397.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Get the SEH chain (*Alt* + *S*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00398.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look for the address `04AD6FAC` in the stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00399.gif)'
  prefs: []
  type: TYPE_IMG
- en: Our Bs are in the next SEH, and our Cs are in the SEH. Now, we have control
    over SEH for this application.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting shellcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, this is what the **shellcode** looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00400.gif)'
  prefs: []
  type: TYPE_IMG
- en: What we need now is to set **nSEH** for a short jump operation, `\xeb\x10`,
    and set **SEH** with an address to the `pop`, `pop`, and `ret` operations. Let's
    try to find one using `mona`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, set the log file location in the Immunity Debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, extract the SEH details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00401.gif)'
  prefs: []
  type: TYPE_IMG
- en: We need an address without any bad characters, so open the log file from `c:\logs\fsws\seh.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s select one, but remember to avoid any bad characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is our address for SEH `0x1001a1bf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it is time to generate and bind TCP shellcode on port `4321`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the structure of our exploit should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00402.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at our final exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the application and start it again. Then, run the exploit and run `nc`
    on port `4321`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00403.gif)'
  prefs: []
  type: TYPE_IMG
- en: It works fine!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we did a real scenario on something new, which is SEH-based
    buffer overflow, and looked at how to get control over SEH and exploit it.
  prefs: []
  type: TYPE_NORMAL
- en: What we have done in this book so far is to just scratch the surface of this
    type of attack, and you should practice this more because this is not the end.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about security mechanisms in systems and how
    to make your code safer.
  prefs: []
  type: TYPE_NORMAL
