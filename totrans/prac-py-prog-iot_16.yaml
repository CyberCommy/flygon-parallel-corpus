- en: IoT Visualization and Automation Platforms
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at alternative approaches to structuring
    a Python program that interfaces with electronics. This included an event loop
    approach, two thread-based approaches showing the use of callbacks and a publisher-subscriber
    model, and an asynchronous I/O approach.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be discussing IoT and automation platforms that you
    can use with your Raspberry Pi. The terms *IoT platform* and a*utomation platform*
    are very broad concepts, so for the purpose of this chapter, what I mean by these
    terms is any software service – cloud-based or locally installable – that provides
    you with a ready-made ecosystem to create powerful, flexible, and fun IoT-based
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Our primary focus will be on the **If-This-Then-That** (**IFTTT**) automation
    platform, which I suspect many of you will have some familiarity with, and the
    ThingSpeak platform for data visualization. I have chosen these two services because
    they both offer a free pricing tier and allow us to create and explore simple
    demonstrations and examples that you can build upon. However, besides these, I'll
    also discuss a few other IoT and automation platforms that I have experience with
    that will allow you to build even more powerful IoT solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Triggering an IFTTTApplet from your Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actioning your Raspberry Pi from an IFTTT Applet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing data with the ThingSpeak platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other IoT and automation platforms for further exploration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To perform the exercises in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi 4 Model B
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspbian OS Buster (with a desktop and recommended software)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python version 3.5 at a minimum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These requirements are what the code examples in this book are based on. It's
    reasonable to expect that the code examples should work without modification on
    a Raspberry Pi 3 Model B or a different version of Raspbian OS, as long as your
    Python version is 3.5 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: You will find this chapter's source code in the `chapter13` folder in this book's
    GitHub repository, which is available here: [https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT](https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to execute the following commands in a Terminal to set up a virtual
    environment and install the Python libraries required for the code in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following dependencies will be installed from `requirements.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PiGPIO**: The PiGPIO GPIO library ([https://pypi.org/project/pigpio](https://pypi.org/project/pigpio))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Paho MQTT library**:[https://pypi.org/project/paho-mqtt](https://pypi.org/project/paho-mqtt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Requests HTTP library**: [https://pypi.org/project/requests](https://pypi.org/project/requests)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The PiGPIO-based DHT library**: [https://pypi.org/project/pigpio-dht](https://pypi.org/project/pigpio-dht)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The electronic components we will need for this chapter''s exercises are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 1 x DHT11 (lower accuracy) or a DHT22 (higher accuracy) temperature and humidity
    sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 x red LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resistors:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 x 200Ω resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 x 10kΩ resistor (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering an IFTTT Applet from your Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of you may already be familiar with the **If-This-Than-That** (**IFTTT**)
    web service ([ifttt.com](https://ifttt.com)), where you can create simple workflow
    automation chains called *Applets.* An Applet responds to changes in one web service
    (the *This),* which then triggers an action on another web service (the *That).*
  prefs: []
  type: TYPE_NORMAL
- en: Here are some common examples of Applet configurations (called *Recipes):*
  prefs: []
  type: TYPE_NORMAL
- en: Send yourself an email whenever a particular Twitter hashtag is published.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn a smart light bulb on or off at a certain time of the day.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open your internet-connected garage door using your phone's GPS when you are
    approaching your house.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log how long you spend in the office in a spreadsheet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '...and thousands upon thousands of other examples!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we will learn in this section and the next, our Raspberry Pi can assume the
    role of both the *This* or the *That,* to either trigger an Applet or perform
    an action in response to a triggered Applet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a visual representation of what we will cover in this section;
    that is, making our Raspberry Pi assume the *This* role in an IFTTT workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4303aaf0-acc8-4520-89a8-3d9784ccfd72.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Raspberry Pi assuming the *This* role in an IFTTT Applet workflow
  prefs: []
  type: TYPE_NORMAL
- en: Our forthcoming Python example will monitor the current temperature (the *This),*
    and at a specific temperature will request a special IFTTT Webhook URL. This URL
    request triggers our Applet, which then sends out an email (the *That).* We will
    discuss Webhooks in greater detail shortly when we build our first IFTTT Applet.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to create and test our example circuit, which we will do next.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the temperature monitoring circuit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, we will be reusing the DHT11/DHT22 temperature circuit we created
    in [Chapter 9](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml), *Measuring Temperature,
    Humidity, and Light Levels*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what we need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Build the circuit illustrated in *Figure 9.2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the data pin to GPIO 24 (in [Chapter 9](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml), *Measuring
    Temperature, Humidity, and Light Levels*, we used GPIO 21, but we will use GPIO
    21 for a LED later in this chapter).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have built your circuit, we can continue and build our first IFTTT
    Applet.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring an IFTTT Applet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create our IFTTT Applet, there are many steps that we need to follow. Many
    of these steps are simple and generic, irrespective of the type of Applet you
    are creating. While we will step through these generic steps, we won't go into
    them in great detail, as I am sure you will be more than capable of understanding
    what is going on during the process. Instead, what we will focus on is the unique
    steps and sections of IFTTT that relate to integrating our Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the [https://ifttt.com/](https://ifttt.com/) free pricing tier
    limits the number of Applet that you can have active at once. At the time of writing,
    the maximum was three active Applets. We will be creating four Applets in this
    and the next chapter combined, so you will need to archive at least one Applet
    on IFTTT as you work through the next chapter in order to stay on the IFTTT free
    pricing tier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps we need to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into or create your IFTTT account. If you do not already have an IFTTT account,
    please visit [ifttt.com/join](https://ifttt.com/join) and follow the on-screen
    instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are performing these steps on the IFTTT website, [ifttt.com](https://ifttt.com).
    The process to follow for the IFTTT phone and tablet apps will be different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once logged into IFTTT, click on your profile avatar icon (shown highlighted
    with a square in the following screenshot) to reveal a menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/aca6a0a4-f02a-409d-9068-981bfae1cdec.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Profile avatar icon
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click the Create option in the profile menu, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/18671e75-d293-46b0-a70a-75bd2ce5ee9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Profile menu
  prefs: []
  type: TYPE_NORMAL
- en: 'The next page you will be presented with will be the Create your own page.
    Here, click the + icon between the words If and This:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cce74029-b626-47db-8ec3-84e62a9d75d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – The Create your own page – part 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will be asked to Choose a service. The service we need to choose to
    integrate with our Raspberry Pi is called the WebHook service, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f1863ed6-d765-4f21-a827-94f71cfc1e2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – The Choose a service page
  prefs: []
  type: TYPE_NORMAL
- en: Once you have found and identified the Webhook service, click on the Webhooks icon
    to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next page you will be presented with will be the Choose a trigger page,
    as shown in the following screenshot. Here, click on the Receive a web request
    option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e029b47f-c7ee-4e05-afc5-88ad678d28d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – The Choose trigger page
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will be presented with the Complete trigger fields page, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a291b7c9-1176-4712-ae9a-7c7afdea76a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – The Complete trigger fields page
  prefs: []
  type: TYPE_NORMAL
- en: The Event Name field is of importance for our Raspberry Pi integration. In the
    Python code that we will cover shortly, we must ensure that the event name that's
    used by the code matches what we type into this page. For our example, we are
    naming our event RPITemperature.
  prefs: []
  type: TYPE_NORMAL
- en: After entering RPITemperature into the Event Name box, click the Create trigger
    button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Webhooks's Event Name is its unique identifier (for your IFTTT account). If
    you are creating many Webhooks, then you will need to use a different Event Name
    to distinguish between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will be presented with the Create Your Own page once more. This time,
    you''ll see that the *This* is now the Webhook icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/07bdc6ca-6d2d-41d5-9e1b-4b8994cd02c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – The Create your own page – part 2
  prefs: []
  type: TYPE_NORMAL
- en: We are now halfway through configuring our IFTTT Applet. Now that we have configured
    our Webhook trigger, we need to configure our action, which will be to send an
    email. After creating the emailing action, we will revisit the Webhook trigger
    and discover the URL and parameters that are used to trigger this Webhook event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on the + icon between the words Then and That. You will see the
    Choose action service page. On this page, search for Email and click on the Email
    icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/14538a8c-4390-4199-b5dd-9f73f088bd69.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – The Choose action service page
  prefs: []
  type: TYPE_NORMAL
- en: 'When you see the Choose action page shown in the following screenshot, select
    the Send me an email option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/799fbea2-585f-403b-a4a5-2cda1e63da1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – The Choose action page
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will be presented with the Complete action fields page. Please fill
    in the Subject and Body text fields, as shown in the following screenshot. You
    will find an example email that was produced by this action later in this chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/57b62fb0-15af-476e-8523-0fa8d854dd08.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – The Complete action fields page
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, you will notice that some of the text is surrounded
    by gray boxes; for example, Value1 and OccuredAt. These are known as *ingredients* and
    are replaced dynamically when the Applet is triggered. As we will see shortly
    in code, we will be replacing the Value1, Value2, and Value3 ingredients with
    the current temperature, humidity, and a message, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: When you have filled in the Subject and Body text fields, click the Create action
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, click on the Finish button on the Review and finish page, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/602b06fa-867c-4d9f-a717-da370163fbf1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – The Review and finish page
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You've just created an IFTTT Applet that sends an email when
    we trigger it using our Raspberry Pi. But how do we do that? That's what we will
    learn about in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering an IFTTT Webhook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have created our IFTTT Applet, we need to take a few more steps
    to learn how to trigger our Webhook. These steps boil down to knowing where to
    navigate to within IFTTT to discover your unique Webhook URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps we need to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to navigate to the Webhooks page. There are a couple of ways
    we can do this, and I''ll leave it up to you which route you take:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate your web browser to the Webhook services URL; that is, [ifttt.com/maker_webhook](https://ifttt.com/maker_webhooks).
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alternatively, the navigation steps to take to get to this web page are as
    follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the profile avatar icon (as shown previously in *Figure 13.2*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the menu that appears, choose the My Services item (refer to *Figure 13.3*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the page that appears, find and click on the Webhooks item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Irrespective of the path you take, you will see the page shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/390f2005-f5f8-47c4-aaa7-b1482c3c38a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – The Webhooks page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Documentation button located in the top-right corner of the page.
    You will be presented with the Webhook documentation page shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/92fa1db0-2d3f-4e77-b4cf-0c0649f71b8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – The Webhook documentation pagePlease note that in the preceding
    example page, I have filled in the {Event} and JSON Body fields so that they can
    be referenced during our discussion. Your fields will be initially empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'This page holds the key pieces of information that we need in order to integrate
    this Webhook trigger with our Raspberry Pi. Here are the key parts of this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Your key**: This is your account''s Webhook API key and forms part of your
    unique Webhook URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GET or POST request URL**: Your unique Webhook URL. The unique combination
    of your API key and Event Name is what associates the URL with a triggerable IFTTT
    event. To integrate with our Raspberry Pi, this is the URL we need to construct
    and request. We''ll cover this shortly in code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event name**: The name of the event you want to trigger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON body**: Each triggerable Webhook can contain a maximum of three data
    parameters presented in JSON format, and they must be named value1, value2, and
    value3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cURL command-line example**: Run this example in a Terminal to trigger the
    RPITemperature event (and you will receive an email).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Test It button**: Clicking this button will trigger the RPITemperature
    event (and you will receive an email).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have created our IFTTT Applet and discovered where to find the Webhook
    URL and how it is constructed, we can now delve into the Python code that will
    trigger our IFTTT Applet.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering an IFTTT Applet in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're about to explore a simple application based around the DHT 11/DHT 22 circuits
    and code we first saw in [Chapter 9](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml),
    *Measuring Temperature, Humidity, and Light Levels*. You can find this code in
    the `chapter13/ifttt_dht_trigger_email.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This code will monitor the temperature using a DHT 11 or DHT 22 sensor, and
    if a pre-configured high or low threshold is breached, the code will invoke your
    IFTTT Webhook URL, which will then send you an email, similar to the one shown
    in the following screenshot. This corresponds to the email subject and body text
    you configured in the previous section, in *step 13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fb5055c7-3127-4f1a-87a2-3a4b5b73c826.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Example IFTTT email
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can run our sample application code, there are a few configuration
    steps we need to perform. Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `chapter13/ifttt_dht_trigger_email.py` file for editing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the following segment of code indicated by lines (1) and (2). Confirm
    that your DHT sensor is connected to the appropriate GPIO pin and that the correct
    DHT11 or DHT22 instance is being used based on the sensor that you have:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, locate the following segments of code, indicated by lines (3), (4), and
    (5), and update the `USE_DEGREES_CELSIUS`, `HIGH_TEMP_TRIGGER`, and `LOW_TEMP_TRIGGER` variables
    to values that make sense in your location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Your IFTTT Applet will be triggered and send an email when the temperature reaches `HIGH_TEMP_TRIGGER` degrees
    or drops to `LOW_TEMP_TRIGGER` degrees. The reason for high and low temperature
    triggers is to create a small temperature buffer to prevent the code triggering
    multiple emails if the temperature were to oscillate above and below a single
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, locate the following section of code starting at line (6) and update
    the details shown – specifically your IFTTT API key, which we identified in the
    previous section in *step 2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s all our configuration done. You''ll notice line (7), which is where
    we construct the IFTTT Webhook URL using our API key and event name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The remaining code in the file polls the DHT11 or DHT22 sensor, compares the
    reading to the `HIGH_TEMP_TRIGGER` and `HIGH_TEMP_TRIGGER` values, and if the
    temperature has been breached, constructs a `requests` object and calls the IFTTT
    Webhook URL to trigger your Applet. We will not cover that code here since it
    should be self-explanatory based on your previous experience with the DHT11/DHT22
    sensors and the Python `requests` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our code configured, it''s time to run the program in a Terminal. You
    will receive an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Our example here also shows the IFTTT Applet being triggered when the temperature
    goes above 20 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: This now completes our IFTTT example using our Raspberry Pi in the *This* role
    to trigger an IFTTT Applet. The basic process we covered illustrates how easy
    this is to achieve! We sent an email, but you can follow the same overall process
    to create other IFTTT recipes that trigger other actions, such as turning on smart
    lights and appliances, adding rows to Google spreadsheets, and creating a Facebook
    post. You might like to check out [https://ifttt.com/discover](https://ifttt.com/discover)
    for a host of ideas and possibilities. Remember that from our perspective and
    our learning, it's a *Webhook* trigger we can use from our Raspberry Pi to action
    ideas like these. Have fun!
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at the opposite scenario to see how we can action our Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Actioning your Raspberry Pi from an IFTTT Applet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous section taught us how to trigger an IFTTT Applet from our Raspberry
    Pi. In this section, we will learn how to action our Raspberry Pi from an IFTTT
    Applet.
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we will create an IFTTT Applet that will trigger when an email
    is received. We'll use the subject of this email to control an LED that is connected
    to a GPIO pin.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using an IFTTT Webhook service, as we did previously, only this
    time the Webhook service will be installed on the *That* side of our Applet and
    will request a URL that we specify. This basic idea is illustrated in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/518422de-c428-4537-a648-6b1f34f80280.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – Raspberry Pi assuming the *That* role in an IFTTT Applet
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at two possible methods we can use with the IFTTT Webhook service
    to request a URL that can then be seen by our Raspberry Pi's Python code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Method 1 – using the dweet.io service as an intermediary**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One method to integrate the IFTTT with our Raspberry Pi is to use the dweet.io
    service. We covered dweet.io, along with Python examples, in [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml),
    *Getting Started with Python and IoT*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In brief, here is how we will use dweet.io alongside IFTTT and our Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: In our IFTTT Webhook, we'll use a dweet.io URL to publish a dweet (containing
    an instruction to turn the LED on, off, or make it blink).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our Raspberry Pi will run Python code to retrieve the dweet published by the
    IFTTT Webhook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our code will then control the LED based on the command specified in the dweet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is the method we will use for our example. The advantage of this method
    is that we do not need to worry about configuring firewalls and port forwarding
    rules on your router. Plus, it means we can run the example in environments –
    for example, at work – where router configurations may not be practical or even
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: The code that we will be using for this dweet.io-based integration can be found
    in the `chapter13/dweet_led.py` file, which is an exact copy of the `chapter02/dweet_led.py` file
    from [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml), *Getting Started
    with Python and IoT*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Method 2 – creating a Flask-RESTful service**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use this method, we would need to create a RESTful service, similar to what
    we did in [Chapter 3](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml), *Networking
    with RESTful APIs and Web Socket Services Using Flask* (the code that can be found
    in `chapter02/flask_api_server.py`, which changes the brightness of a LED (rather
    than setting it to on/off/blinking), would be a great starting point).
  prefs: []
  type: TYPE_NORMAL
- en: We would also need to expose our Raspberry Pi to the public internet, which
    would require us to open a port and create a port forwarding rule in our local
    firewall or router. Then, together with our public IP (or domain name), we could
    construct a URL and use this directly with the IFTTT Webhook service.
  prefs: []
  type: TYPE_NORMAL
- en: For prototyping ideas and creating demos, a simple alternative to opening up
    firewalls and creating port forwarding rules could be to use a service such as
    Local Tunnels ([localtunnel.github.io/www](https://localtunnel.github.io/www/))
    or ngrok ([ngrok.com](https://ngrok.com/)), which can help you expose a device
    to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Since this method requires configuration and setup on your end that is beyond
    what we can practically do as part of this chapter, we will stick with the dweet.io
    approach shown in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create a circuit that we can use with our second IFTTT Applet,
    which we will build shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the LED circuit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our forthcoming example will require an LED, as well as a series resistor connected
    to a GPIO pin (GPIO 21, for our example). I'm confident that, given the number
    of times we've built LED circuits already in this book, you could wire this up
    on your own with no problems! (And in case you do need a reminder, see *Figure
    2.7 *in [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml), *Getting Started
    with Python and IoT.*)
  prefs: []
  type: TYPE_NORMAL
- en: Keep the DHT 11/DHT 22 circuit you created for our first IFTTT Applet example
    because we will reuse this circuit again later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: When you have your circuit ready, we will continue and run our sample program.
  prefs: []
  type: TYPE_NORMAL
- en: Running the IFTTT and LED Python program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will run our program and obtain a unique thing name and
    URL for use with the dweet.io service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the code that can be found in the `chapter13/dweet_led.py` file in a Terminal.
    You will receive an output similar to the following (your *thing name* and therefore
    your URLs will be different):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As we mentioned previously, `chapter13/dweet_led.py` is an exact copy of the
    same program we discussed in [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml),
    *Getting Started with Python and IoT*. If you need more context around how this
    program works, please revisit that chapter and the code discussion contained therein.
  prefs: []
  type: TYPE_NORMAL
- en: Keep your Terminal open with the program running as we will need to copy one
    of the URLs in the next section. We'll also need the program running to test our
    upcoming integration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will create another IFTTT Applet to integrate with this program via
    dweet.io.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the IFTTT Applet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are about to create another IFTTT Applet. The overall process is very similar
    to the one we followed for the Applet we created previously, except our Raspberry
    Pi (via Webhook integration) will be at the *That* end of the Applet, as shown
    in *Figure 13.16.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps we need to follow to create our next Applet. I''ve left
    out many of the common screenshots this time around due to their similarity with
    our previous IFTTT Applet creation process:'
  prefs: []
  type: TYPE_NORMAL
- en: Once logged into IFTTT, click on your profile avatar icon and select Create
    from the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the If + This Then Than page, press the + icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Choose a service page, search for and select the Email service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Choose trigger page, select Send IFTTT an email tagged (make sure it's
    the option with the word in it *tagged).*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the next page, enter LED as the Tag input and click the Create trigger button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9872195c-9014-4066-82d4-be7c02ba6851.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – The Complete trigger fields page
  prefs: []
  type: TYPE_NORMAL
- en: On the If <email icon> This Then + Than page, press the + icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Choose action service page, search for and select the Webhooks service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, on the Choose action page, select Make a web request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next page you''ll come across is called Complete action fields. This is
    where we''ll use the dweet URL that our program printed to the Terminal in the
    previous section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/25679560-23f0-4fd6-a3ac-186c87fd8f50.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.18 – The Complete action fields page
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the sub-steps you need to follow to complete the fields on this page:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the On URL from your Terminal (for example, `https://dweet.io/dweet/for/749b5e60?state=on`
    – noting that your *thing name* will be different).
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste this URL into the IFTTT URL field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the URL field, delete the word on (so the URL is now https://dweet.io/dweet/for/749b5e60?state=).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Add ingredient button (under the URL field) and choose Subject (so
    that the URL is now https://dweet.io/dweet/for/749b5e60?state={{Subject}}).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The other fields can be left as their default values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Create action button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6c62931d-4dd8-4985-b603-25fccede7dfe.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – The Complete action fields page
  prefs: []
  type: TYPE_NORMAL
- en: Finally, on the Review and finish page, click the Finish button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Well done! We've now created our second Applet. Next, we will use this Applet
    to control our LED by sending an email instructing the LED to turn on, off, or
    blink.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the LED from an email
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have created our Applet to control our LED using an email, it's
    time to test out the integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to create the email:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the program in the `chapter13/dweet_led.py` file is still running
    in your Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your favorite email program and create a new email.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `trigger@applet.ifttt.com` as the email's To address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When sending a trigger email to IFTTT, it must come from the same email address
    that you use with IFTTT (you can visit [https://ifttt.com/settings](https://ifttt.com/settings) to
    check your email address).
  prefs: []
  type: TYPE_NORMAL
- en: 'As the subject, use one of the following to control the LED:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`#LED On`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#LED Off`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#LED Blink`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IFTTT strips off the #LED tag, so our `dweet_led.py` program only receives
    the text On, Off, or Blink. The leading space is stripped off in our Python code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example email that will make the LED blink:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/052d8aed-d735-4e38-8e56-1d389ac4afd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 13.20 – Trigger email example
  prefs: []
  type: TYPE_NORMAL
- en: Send the email.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait a moment and the LED will change state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we've learned how to control our LED via email using IFTTT, let's quickly
    cover a few troubleshooting tips.
  prefs: []
  type: TYPE_NORMAL
- en: IFTTT troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your IFTTT Applets do not appear to be triggering and actioning, here are
    a few troubleshooting avenues for you to explore and try:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `dweet_led.py`, try the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn on debug logging; for example, `logger.setLevel(logging.DEBUG)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the dweet retrieval method located near the end of the source file. If
    you are using `stream_dweets_forever()`, try `poll_dweets_forever()` instead,
    since it is more resilient to transient connectivity issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the IFTTT website, you can inspect the activity log for any Applet by doing
    the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating to the My Services option under the profile menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting a service (for example, Webhooks)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting the Applet you want to inspect
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking the Settings button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking the View activity button and/or trying the Check now button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also check the following IFTTT resources:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Common errors and troubleshooting tips*, available at [https://help.ifttt.com/hc/en-us/articles/115010194547-Common-errors-and-troubleshooting-tips](https://help.ifttt.com/hc/en-us/articles/115010194547-Common-errors-and-troubleshooting-tips)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Troubleshooting Applets & Services*, available at [https://help.ifttt.com/hc/en-us/categories/115001569887-Troubleshooting-Applets-Services](https://help.ifttt.com/hc/en-us/categories/115001569887-Troubleshooting-Applets-Services).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IFTTT also has a *Best Practices* page available at [https://help.ifttt.com/hc/en-us/categories/115001569787-Best-Practices](https://help.ifttt.com/hc/en-us/categories/115001569787-Best-Practices) where
    you can learn more about the platform.
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed in the *Triggering an IFTTT Applet from your Raspberry Pi* section,
    for IFTTT *triggers,* you can adopt the same overall process we just covered for
    actioning your Raspberry Pi from any IFTTT recipe. Again, check out [https://ifttt.com/discover](https://ifttt.com/discover)
    for some ideas, and this time, remember that from our perspective, we use a *Webhook*
    action in our IFTTT recipes to control our Raspberry Pi. Here's an example – use
    Google Assistant to voice control your Raspberry Pi! Oh, wait a moment – we'll
    be doing this in the next chapter, [Chapter 14](fe8f7330-0472-437e-ab91-9b920d9edb98.xhtml),
    *Tying It All Together – An IoT Christmas Tree*!
  prefs: []
  type: TYPE_NORMAL
- en: We've now explored how to integrate our Raspberry Pi with IFTTT in two ways
    – as the *This* role to trigger an Applet and in the *That* role, whereby we can
    action our Raspberry Pi from a triggered Applet. Next, we will look at a way to
    create an IoT dashboard that we can use to visualize data.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with the ThingSpeak platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have just learned how to create simple automation using the IFTTT platform.
    In this section, we will integrate with the ThingSpeak platform to visually display
    temperature and humidity data that we'll collect using our DHT 11 or DHT 22 sensors.
    We will be using the DHT 11/DHT 22 circuit we created earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: ThingSpeak ([thingspeak.com](https://thingspeak.com)) is a data visualization,
    aggregation, and analysis platform. We will be focusing on the data visualization
    aspect, and specifically on how to integrate our Raspberry Pi into this platform.
  prefs: []
  type: TYPE_NORMAL
- en: I've chosen ThingSpeak for our example in this section for a couple of reasons
    – it's simple and easy to set up and integrate with, and for simple data visualizations
    like the ones we will be doing, it's free. There are many other visualization
    platforms available, and they all have their own unique features, pricing structures,
    and complexities. I've included a few suggestions in the *Other IoT and automation
    platforms for further exploration* section for you to explore.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to explore the aggregation and analysis features in more depth,
    you can find many quality examples, tutorials, and documentation by just searching
    for ThingSpeak. As a suggestion, start your investigation at [https://au.mathworks.com/help/thingspeak](https://au.mathworks.com/help/thingspeak).
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of the dashboard we will be creating can be seen in the following
    screenshot. Notice the Channel Settings and API Keys items shown in the Tab bar
    – we will be referring to these tabs shortly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/305142c2-ad8f-41e8-862f-11f3a9a9361f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – The ThingSpeak channel dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Our first stop before we can integrate our Raspberry Pi and send data to ThingSpeak
    is to configure the platform for our integration.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the ThinkSpeak platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configuring ThinkSpeak is relatively simple – in fact, it''s one of the most
    straightforward platforms in its class I have come across. Here are the steps
    that we need to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you will need to create a ThingSpeak account for yourself. Visit their
    website, [thingspeak.com](https://thingspeak.com), and click on the Sign Up button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have created your ThinkSpeak account and logged into the platform,
    you should land on the My Channels page; that is, [https://thingspeak.com/channels](https://thingspeak.com/channels).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the ThingSpeak ecosystem, a *channel* is a virtual place where we store our
    data, dashboards, and visualizations. It's analogous to a workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create a new channel by clicking on the New Channel button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d34b6031-bbfc-4569-bcbb-f8f95f37d3ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.22 – ThingSpeak channel configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'On the New Channel page, enter the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: Name: `Environmental Data` (or any name of your choice)
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Field1: `temperature`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Field2: `humidity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can leave all the other fields as their default values.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to review or change your channel settings later, they can be found
    on the Channel Settings tab, as shown previously in *Figure 13.19.*
  prefs: []
  type: TYPE_NORMAL
- en: Once you have filled in the fields, scroll to the bottom of the page and click
    the Save Channel button. You will be presented with a page similar to the one
    pictured in *Figure 13.19*, except it will be blank with no data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To add the two gauges seen in *Figure 13.19*, to this page, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Press the Add Widgets button.
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Gauge icon and press Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Configure widget parameters dialog, type in a name for the gauge (for
    example, `temperature`) and select the appropriate field number (Field1 for temperature,
    Field2 for humidity, respectively).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can adjust and experiment with the other parameters as you desire to set
    max/min ranges, coloring, and other display properties for your gauge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the process for the second gauge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't worry if the gauges (or charts) display Field value unavailable. This
    is correct since we have not sent any temperature or humidity data to ThingSpeak
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to obtain an API key and channel ID, which we will need in
    order to configure our forthcoming Python code. Click on to the API Keys tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/71b5fdb4-937a-4b6a-8dc4-fc7b4f0bf64e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – The API Keys tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the information we need to collect for our Python program:'
  prefs: []
  type: TYPE_NORMAL
- en: Write API Key (because we will be *writing* data to the platform)
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Channel ID (this is listed on all ThinkSpeak pages, near the top)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have created and configured a simple ThinkSpeak channel and collected
    our API key and Channel ID, we can move onto our Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and running the ThinkSpeak Python program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have provided two sample programs that integrate with ThinkSpeak. They are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chapter13/thingspeak_dht_mqtt.py`: An example that uses MQTT to send data
    into a ThinkSpeak channel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chapter13/thingspeak_dht_http.py`: An example that uses the Python requests
    library to make RESTful API calls that send data to a ThinkSpeak channel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The core concepts of these two programs were discussed in earlier chapters.
    For your reference, they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MQTT**: We discussed the Paho-MQTT library in [Chapter 4](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml),
    *Networking with MQTT, Python, and the Mosquitto MQTT Broker*. A key difference
    for this chapter is that we are using the Paho-MQTT *simplifying client wrapper* to
    publish MQTT messages instead of a full life cycle example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We covered RESTful APIs and the requests library in [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml),
    *Getting Started with Python and IoT.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code related to the DHT 11/DHT 22 temperature and humidity sensor was covered
    in [Chapter 9](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml), *Measuring Temperature,
    Humidity, and Light Levels*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s configure these programs, run them, and see the data appear in ThingSpeak.
    We''ll walk through the example code provided in `chapter13/thingspeak_dht_mqtt.py`;
    however, the overall process will be the same for `chapter13/thingspeak_dht_http.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `chapter13/thingspeak_dht_mqtt.py` file for editing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Near the top of the file, identify the following code starting at line (1)
    and confirm your DHT sensor is connected to the correct GPIO pin and that the
    correct sensor instance is enabled in code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, identify the following code segment starting at line (2) and update it
    with your ThingSpeak write API key, Channel ID, and time zone. Note that `CHANNEL_ID` is
    only used in the MQTT integration (so it does not appear in the `thingspeak_dht_http.py` file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Save your file and run the program. You should receive an output similar to
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Within seconds, you should see your data appear on your ThingSpeak dashboard!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! With that, you have created a ThingSpeak dashboard to visualize data
    that's been collected by your Raspberry Pi. Visualizing data is a frequent requirement
    for many monitoring IoT projects, whether it be simple indicator displays such
    as gauges or producing historic graphs to visualize trends. How you approach visualization
    for your data all depends on your requirements; however, the one thing that's
    common to all these requirements is that there are many ready-to-go services such
    as ThingSpeak to help you achieve this as an alternative to custom coding dashboard
    and visualization applications yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Now, I will conclude this chapter with a brief discussion of other popular IoT
    platforms that you may like to explore and use in your future projects.
  prefs: []
  type: TYPE_NORMAL
- en: Other IoT and automation platforms for further exploration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have seen IFTTT and ThingSpeak in action, as well
    as how to integrate them with our Raspberry Pi. We saw how to use IFTTT to create
    simple workflows and how we can visualize data with ThingSpeak – two very different
    ideas, but nonetheless, they are both IoT platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Both these platforms are immensely powerful and offer a wide range of features
    and possibilities beyond what we can cover in a single chapter, so I do encourage
    you to seek out their documentation and examples to advance your learning.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other IoT platforms, applications, and frameworks that are available.
    This section will provide a short, curated list based on my experience. They all
    fit in nicely with this book's Python- and Raspberry Pi-based themes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Zapier**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've already seen IFFF in action. IFTTT is more consumer-focused in terms of
    the services that it supports, plus as we have seen, we are limited to a single
    *This* trigger and a single *That* action.
  prefs: []
  type: TYPE_NORMAL
- en: Zappier is very similar in principle to IFTTT, but with a more business-orientated
    focus, including a range of services and integrations not available with IFTTT
    (there will be services and integrations that are unique to IFTTT also). Furthermore,
    Zapier is also capable of much more complex workflows for triggering events and
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: You will find it relatively simple to reimplement our two IFTTT examples from
    this chapter in Zappier.
  prefs: []
  type: TYPE_NORMAL
- en: Website: [https://zapier.com](https://zapier.com).
  prefs: []
  type: TYPE_NORMAL
- en: '**IFTTT platform**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we used IFTTT as an end user and performed our integrations
    using Webhooks. If you are a business wishing to create gadgets you want to expose
    as first-class IFTTT services, then you should check out the IFTTT platform.
  prefs: []
  type: TYPE_NORMAL
- en: Website: [https://platform.ifttt.com](https://platform.ifttt.com).
  prefs: []
  type: TYPE_NORMAL
- en: '**ThingsBoard IoT platform**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ThingsBoard is an open source IoT platform that you can download and host on
    your Raspberry Pi. On the surface, it will allow you to build dashboards and data
    visualizations, just as we did in ThingSpeak. Compared to ThingSpeak, you will
    find that ThingsBoard has a steeper learning curve when it comes to creating your
    first dashboard; however, you will also find that it offers a more extensive set
    of widgets and customization options. Plus, unlike ThingSpeak, which can only
    consume data, ThingsBoard allows you to embed controls into a dashboard that lets
    you interact with your Raspberry Pi using MQTT.
  prefs: []
  type: TYPE_NORMAL
- en: From experience, working your way through the ThingsBoard documentation and
    tutorials (many are available as videos) is a must if you want to learn how to
    use this platform since on your first visit to its UI, it's not immediately obvious
    what you need to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few specific resources from their website:'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi installation instructions: [https://thingsboard.io/docs/user-guide/install/rpi](https://thingsboard.io/docs/user-guide/install/rpi)
    (don't worry if it says Raspberry Pi 3; it will still work on a 4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started guide: [https://thingsboard.io/docs/getting-started-guides/helloworld](https://thingsboard.io/docs/getting-started-guides/helloworld)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While there are no Python-specific examples in the getting started guide, there
    are Mosquito MQTT examples and cURL examples that demonstrate the RESTful API.
    A suggestion would be to use the two ThingSpeak code examples presented in this
    chapter as a starting point and adopt them to use the ThingBoard-specific MQTT
    and/or RESTful APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Website: [https://thingsboard.io](https://thingsboard.io).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Home Assistant**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Home Assistant is a pure Python home automation suite. Out of the box, Home
    Assistant can connect with a wide range of internet-enabled devices such as lights,
    doors, fridges, and coffee machines – to mention only a few.
  prefs: []
  type: TYPE_NORMAL
- en: Home Assistant gets a mention here, not only because it is built with Python,
    but because it allows us to integrate directly with the host Raspberry Pi's GPIO
    pins, as well as with a remote Raspberry Pi's GPIO pins using PiGPIO's remote
    GPIO feature. Plus, there are MQTT and RESTful API integration options available.
  prefs: []
  type: TYPE_NORMAL
- en: While simple in concept and end user operation, there is a highish learning
    curve (and a fair amount of experimentation needed) when it comes to configuring
    Home Assistant since most of the integrations are performed by manually editing
    **YAML Ain't Markup Language** (**YAML**) files directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In relation to GPIO integrations, I have selected some resources from their
    website to get you started. I recommend reading the glossary first as it will
    help you better understand the Home Assistant terminology and therefore help you
    better understand other parts of the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation: There are a variety of ways that Home Assistant can be installed.
    For testing the platform and building a GPIO integration, I suggest the "Virtual
    Environment" option, documented at [https://www.home-assistant.io/docs/installation/virtualenv](https://www.home-assistant.io/docs/installation/virtualenv).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glossary: [https://www.home-assistant.io/docs/glossary](https://www.home-assistant.io/docs/glossary).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available Raspberry Pi integrations: [https://www.home-assistant.io/integrations/#search/Raspberry%20Pi](https://www.home-assistant.io/integrations/#search/Raspberry%20Pi).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Website: [https://www.home-assistant.io](https://www.home-assistant.io).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Web Services (AWS)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another suggestion is Amazon Web Services, specifically two services – IoT Core
    and Elastic Beanstalk. These options will provide you with immense flexibility
    and a near-endless number of options when it comes to creating IoT applications.
    IoT Core is Amazon's IoT platform where you can create dashboards, workflows,
    and integrations, while Elastic Beanstalk is their cloud platform where you can
    host your own programs – including Python – in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Web Services is an advanced development platform, so you will need to
    invest weeks into learning how it works and how to build and deploy applications
    using it, but I can promise you that you will learn a lot during the process!
    Plus, their documentation and tutorials are very high quality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon IoT Core: [https://aws.amazon.com/iot-core](https://aws.amazon.com/iot-core).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Elastic Beanstalk: [https://aws.amazon.com/elasticbeanstalk](https://aws.amazon.com/elasticbeanstalk).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Microsoft Azure, IBM Watson, and Google Cloud**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, I do want to mention these other IT giants, who all offer their own
    cloud and IoT platforms. My suggestion regarding AWS is purely due to my more
    in-depth experience with this platform. The comparative platforms offered by Microsoft,
    IBM, and Google are also high quality and backed with excellent documentation
    and tutorials, so if your personal preference is with one of these providers,
    you are still in good hands.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored and learned how to use our Raspberry Pi with both
    the IFTTT and ThinkSpeak IoT platforms. We created two IFTTT examples where our
    Raspberry Pi performed the *This* role in an IFTTT Applet to start an IFTTT workflow.
    We also saw how to use our Raspberry Pi in the *That* role so that it can be actioned
    by an IFTTT Applet. Next, we covered an example of how to integrate with the ThinkSpeak
    IoT platform to visualize temperature and humidity data collected by our Raspberry
    Pi. Finally, we discussed other IoT platform options that you may like to investigate
    and experiment with.
  prefs: []
  type: TYPE_NORMAL
- en: We certainly only covered the basics of what is possible with visualization
    and automation platforms in this chapter. I encourage you to seek our further
    IFTTT examples and ideas you can experiment with, and also explore the other platforms
    that we mentioned. And remember, while every platform will be different and have
    its own integration considerations, the commonly accepted standards to achieve
    integration boil down to RESTful APIs and MQTT, both of which you now have experience
    with!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover a comprehensive end-to-end example to pull
    together many of the concepts and examples that we have covered throughout this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we conclude this chapter, here is a list of questions for you to test your
    knowledge regarding this chapter''s material. You will find the answers in the
    *Assessments* section of the *Appendix*:'
  prefs: []
  type: TYPE_NORMAL
- en: With our first IFTTT Applet, where we monitored the temperature, why did we
    use a different high and low temperature value to trigger our Applet and send
    an email?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What was the advantage of using an intermediary service such as dweet.io with
    our IFTTT Webhook service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some of the core differences between IFTTT and Zapier?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you control your Raspberry Pi from a ThingSpeak dashboard?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In relation to data, what is the limitation of the IFTTT Webhook service when
    used as an action (that is, on the *That* side of an applet)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You want to prototype the switching on and off of an over-the-counter smart
    light bulb based on a Raspberry Pi's GPIO pin state. What platforms could you
    use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
