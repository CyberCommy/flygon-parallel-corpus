- en: Creating a Page That Saves Text to Disk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how you can make a page, save stuff from the
    page to a hard drive, and then read it back.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application to save text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you''ll have made a little application like the
    one shown in *Figure 22.1.1*. For Save Location, you can enter something like
    `c:\data\samp.txt`, to save a text file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bca2652-b28c-46c6-957f-5451a8de7827.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.1: A user interface similar to the one you will build for the application
    in this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can enter some text, such as `This is some sample text to be saved.`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f5ba83e-f5f5-40e0-9631-b96dec31986f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.2: The Save Location with some sample text entered in the application'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click on the Save Text button. This brings up Notepad to confirm that it''s
    been saved, as shown in *Figure 22.1.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8df345bb-1bed-484c-b185-1881279d4248.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.3: The sample text is saved, and it brings up Notepad'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want, you can also open the text back in the page. So, click Open and
    then it''s saved in the page, as shown in *Figure 22.1.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93c8eca2-bdad-45b1-8635-bcde33a785c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.4: The sample text is saved in the page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Further, if you didn''t specify your path, obviously that will result in an
    error, as shown in *Figure 22.1.5*. In this case, it displays the Empty path name
    is not legal. message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e9068a4-269a-4456-b84f-25788226adae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.5: Error message displayed when no Save Location is entered'
  prefs: []
  type: TYPE_NORMAL
- en: So, that's the objective here. Keep this example in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's create a project. Go to File | New | Web Site... Then, from the View
    menu, go to Solution Explorer, and click on Default.aspx.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the user interface for your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you have to build your user interface, so you will need a text box in
    the HTML page, where you can input the path. For this, go to Toolbox, grab a `TextBox`
    control, and drop it below the line that begins with `<form id=...`. Enter the
    words `Save Path` at the beginning of this line, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you''ll have a button that basically acts to open the saved file in the
    web page, so change the text in the button to say to `Open In Page`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this context, it just means reading the simple text back into the page.
    Now go into the Design view to see the user interface thus far, as shown in *Figure
    22.1.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0902147a-9d3e-427d-b336-efe8b484e6ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.6: The user interface thus far'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you also need a place to enter the text to be saved. So, grab another
    `TextBox` control, and enter `Text To Be Saved` at the beginning of this line,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Delete the two `<div>` linesâ€”you won't need them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add a `Save` button. So, we''ll have an Open in Page button and
    a Save button. Now, drag in a button from Toolbox, and place it above `Button1`.
    (The layout is up to you, of course.) Change the text as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The complete HTML file for this project is shown in the following code block.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you go into the Design view, a simple interface is displayed, as shown
    in *Figure 22.1.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca8fb556-a65f-4b34-8ffd-9e06c78c9c91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.7: The complete simple user interface'
  prefs: []
  type: TYPE_NORMAL
- en: If you like, you can drag on a corner of the `Text To Be Saved` box and enlarge
    it so that you have a bigger place to save your text. So now you have a place
    to save, a Save button, Open In page, and `sampLabel`. That's sufficient for our
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Starting to code the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, double-click on the Save button. This takes us into `Default.aspx.cs`.
    Delete the `Page_Load` block. The relevant portion of the starting code for this
    project should look like *Figure 22.1.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7045f371-8c1f-4d2f-bb72-6f642d29b1a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.8: The starting code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for the Save button code, you have to add a namespace. First, near the
    top of the file under `using System`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Catching an exception
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s make use of this. Now, because it''s possible that someone didn''t enter
    something in the box, an error message could be generated and you want to catch
    it. So, beneath the open curly brace under the line that begins with `protected
    void Button2_Click...`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `sampLabel.Text` line is used to display the message from the
    exception that is generated and caught.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a StreamWriter class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will use a `StreamWriter` class. This class gets low-level access
    to hard drives, and so on, so you''ve got to make sure that it''s within a `using`
    statement. You need to be able to create it, use it, and dispose off it completely.
    So, enter the following between a set of curly braces below `try`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To initialize this class, the argument to be passed in is `TextBox1.Text`. So
    this is the one that will write to the file. To confirm, you can go to the Source
    view in `Default.aspx`, and verify that `Save Path` is `TextBox1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to actually write to the file, enter the following between a set of curly
    braces under the previous statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, `sw` is a stream writer, `sw.write` is a method that it has, a function,
    and then you'll take that `TextBox2` stuff and write it. So, from `TextBox1`,
    you get the path, and from `TextBox2`, you take the text out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you right-click on `StreamWriter` and select Go To Definition, the
    result looks like the screen shown in *Figure 22.1.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf09ebf0-980c-4af4-bc76-7d1a736d4e54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.9: The definition of StreamWriter'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the very bottom, you can see that it''s got `Dispose`, and you can see near
    the top that `StreamWriter` inherits from `TextWriter`. Next, if you select Go
    To Definition of `TextWriter`, you can see that there''s `IDisposable`, as shown
    in *Figure 22.1.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/365b2228-935e-4e45-838b-44fba67b044c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.10: The definition of TextWriter'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you right click on `IDisposable` and select Go To Definition, there''s `Dispose`,
    as shown in *Figure 22.1.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbed9c01-f577-4edb-a553-9a165e702e89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.11: The definition of IDisposable'
  prefs: []
  type: TYPE_NORMAL
- en: If you expand `public interface IDisposable`, it displays the comment, Performs
    application-defined tasks associated with freeing, releasing or resetting unmanaged
    resources; in other words, these are low-level resources, so stick to not using
    this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you want to confirm that it saves to the file, so enter the following
    under `using System.IO;`, near the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This line will open Notepad after everything has been saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, below the closed curly brace under `sampLabel.Text = ex.Message;`, enter
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, `TextBox1.Text` just feeds back the text that you enter in the box.
  prefs: []
  type: TYPE_NORMAL
- en: For the next stage, go back into `Default.aspx`. In the Design view, double-click
    on the Open In Page button. This will again take you into `Default.aspx.cs`. The
    next code that you write will be performed on the `Open` button. So it's very
    similar in logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, beneath the open curly brace, under the line that begins with `protected
    void Button1_Click...`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Again, you use `try` and then `catch`, because errors could be generated when
    you try to open. Display the same text on the label. Basically, take the `try`/`catch`
    block from above and copy it and paste it down below. It's exactly the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a StreamReader class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, however, you''ll enter the following between the set of curly braces under
    this `try` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Again, `StreamReader` is a classâ€”it needs a stream. A *stream* is like a channel
    of communication between two places.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to display the text, enter the following between a set of curly braces
    below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, `ReadToEnd` is a function available inside the `StreamReader` class, and
    it reads all of the characters from the current position to the end of the stream.
    This is sufficient for our purposes. So this is the code.
  prefs: []
  type: TYPE_NORMAL
- en: You've created the simple interface that you can see in the Design view, as
    shown previously in *Figure 22.1.7*.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, crank it up in in your browser. At the top, you have Save Path. First,
    imagine that no path is entered in the box and you click on the Save button. As
    you can see in *Figure 22.1.12*, it opens Notepad; so, that portion works. However,
    it displays the message Empty path name is not legal. But that's a useful thing,
    correct?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fcffef9-b077-4385-a2fc-09483837f82e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.12: With no path specified, an error message is displayed and a
    blank Notepad opens'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s specify a legal path, say `c:\data\temp.txt`. Then, enter `Big
    Project` in the Text To Be Saved box. Click on the Save button. Big Project is
    opened and the file is called temp, as shown in *Figure 22.1.13*. So, it''s been
    saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bcb9a05c-1fb0-4a6f-a66d-32262c0bdd57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.13: With a legal path specified, Notepad opens showing the text
    from the Text To Be Saved box'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want, you can confirm that it will open in the page, so click on Open
    In Page, and it also now says Big Project in the page, as shown in *Figure 22.1.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b645c218-d68e-49d0-a040-f617a4bef7c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1.14: The text is also opened in the page'
  prefs: []
  type: TYPE_NORMAL
- en: So, it's working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To review, go back into `Default.aspx.cs`. Because you are working with input/output
    resources, you have to make sure that you have I/O (`using System.IO;`); also,
    because you are dealing with low-level disk writing and reading, make sure that
    you enclose `StreamWriter` and `StreamReader` within `using`, so that you can
    get them, use them, and dispose off them properly. Lastly, because it's common
    to generate an exception, for example when the path cannot be found or similar,
    also, use `try` and `catch` with a message shown to the user to make the application
    look professional. Remember, this will run because we're running the page from
    our local computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to make a page and then save stuff from the
    page to a hard drive and read it back. You created a simple user interface, created
    the code to catch an exception, and created the `StreamWriter` and `StreamReader`
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use the Upload feature in ASP.NET.
  prefs: []
  type: TYPE_NORMAL
