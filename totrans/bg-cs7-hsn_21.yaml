- en: Using LINQ to Operate on Tables from SQL Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use LINQ together with SQL and SQL Server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Changing the data in the ExperimentValues table
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be working with the database table that we created in the previous
    chapter called `ExperimentValues`, as shown in *Figure 21.6.1*:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af7483e3-85ce-4d88-9e4b-b5f558bc4805.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.6.1: The ExperimentValues table from chapter 20'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the table has an `Id` field (PK, primary key integer, and not
    null) and then `XValues (decimal, (18, 3)`, which means 18 units wide with 3 decimal
    places and then 15 units to the left for 18 units altogether. You can make this
    `null` if you want. Likewise, with `YValues, (decimal, (18, 3)`; so, 3 places
    to the right of the decimal, and 15 units to the left for 18 units altogether.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Now make sure that you have data in there. So, right-click on `dbo.ExperimentValues`
    and select View Data. You should see the data that we entered in the previous
    chapter. Of course, you can always change it. To make things easier, let''s change
    the values to those shown in *Figure 21.6.2*:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0ecdcfe-09f3-4fd1-a485-cf7f7dd35f1f.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.6.2: The new data for the ExperimentValues table'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: If you want, you can reload it to see that it's saved. So that's our simple
    database table.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Summarizing the fields
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will reach into it and summarize the fields. You will find the sum of
    the `X` values and the sum of the `Y` values using LINQ. First, go into <html>
    and place a button below the line that begins with `<form id= ....`. Go to Toolbox
    (*Ctrl* + *Alt* + *X*), grab a `Button` control, and drag it in there. Change
    the text on the button to say Sum Fields. Of course, several other operations
    can be performed. This is just one operation: summation.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Close Toolbox and switch to the Design view. Double-click on the Sum Fields
    button. This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. The
    relevant portion of the starting code for this project should look like *Figure
    21.6.3*:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6540bf85-5f28-45fb-9087-4753daf880e7.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.6.3: The starting code section for this project'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Adding the namespaces
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, near the top of the file under `using System`, enter the following lines,
    all of which are necessary:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Building the connection string
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next stage will be to make a connection string, so within a set of curly
    braces below the line that begins with `protected void Button1_Click...`, start
    by entering `string connString =`, followed by the `@` symbol to make it a verbatim
    string, and then you put the `""` symbols. Now to get the connection string, do
    the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Click on View in the menu bar, and select SQL Server Object Explorer.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `People` database, and select Properties.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Properties pane, double-click on Connection String to select it with
    its long description.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then right-click on the long description and copy it.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the description between a set of `""` symbols.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The connection string line should then look like the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can now close the SQL Server Object Explorer and Properties panes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Making the SQL connection
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, we will proceed as usual. So, enter the following line:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Notice, as you type this, you see that `SqlClient` in the `using System.Data.SqlClient;`
    line at the top of the file becomes active. It changes to black. This means that
    the SQL connection is stored there, and if you hover your mouse over it, it also
    tells you that this is the case: class System.Data.SqlClient.SqlConnection'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next stage, enter the following between a set of curly braces below
    this line:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Between the parentheses that follow `SqlCommand()`, you put the text that defines
    the command directly into the constructor as an argument. Remember, you already
    have `ExperimentValues`. The `*` symbol means select all of the columns. So, you
    need the command text and then the connection.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Making an adapter
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you will make an adapter. So, enter the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, `SqlDataAdapter` is something that exists between the actual database
    and us. It's a way of adapting the information from here to there, so to speak.
    To initialize it, you can pass in a specific SQL command. So, in our case we will
    pass in `(command)`. You can add the comment, `//make adapter`, following this
    line.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Making a data table
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you''ll make a data table, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Again, notice that, once you type `DataTable`, the `using System.Data;` namespace
    at the top of the file becomes active. So, if hover your mouse over `DataTable`,
    it says class System.Data.DataTable. This is where it's stored. So, it's stored
    at the `Data` namespace.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Populating the table with data
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we need to fill this table with some information. So, enter the following
    next:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, you type the name of the adapter, and then the dataset to be filled.
    So, with these three lines, first you make an adapter and get information using
    a SQL command, and then you make a data table. Then you use the adapter to fill
    that table. Now we can make use of it as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, we can take that data table and make it enumerable so that we can go
    through it. Note that we''re throwing a Lambda expression in there using `=>`;
    `<decimal>` is the data type, and then, if you hover your mouse over the parentheses
    after `<decimal>()`, the tooltip says (`DataColumn column`): Provides strongly-typed
    access to each of the columns values in the specified row. So, insert a 1 between
    the parentheses.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following for the `summedYValues` variable, and note that we
    put a 2 between the parentheses:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you have entered all of that, then you can display the sum of the `x`
    and `y` values, so enter the following lines next:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Displaying the summed values
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding lines, note that the first line does not need a `<br>` tag,
    but the next line does. Also, the first line just needs `=`, while the next line
    needs `+=` to append.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember, the idea is to sum the fields, so open your browser and click on
    the Sum Fields button:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3259b843-4776-4386-a4ca-53cb1b6f2276.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.6.4: The initial results of running our program'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that the Sum of Y values is 50.000, and the Sum of X values is
    10.000\. You can confirm that this is working as expected by opening the SQL Server
    Object Explorer pane, right-clicking on the `ExperimentValues` table, and adding
    up the values, as seen in *Figure 21.6.5*:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a699f26-0334-4448-ba0e-7081be08fe93.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.6.5: Add the values in the X and Y columns'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: The XValues column adds up to 10.000, and the YValues column adds up to 50.000\.
    Both of these sums check with the results of the program run.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Close the `ExperimentValues` table window and the SQL Object Explorer pane.
    This is working as expected again.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Adding comments
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now add this comment above the connection string line:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Whenever you deal with low-level resources, apply a `using` block. Add the
    following comment above the line that begins with `using (SqlConnection conn...`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Remember, the purpose is to make it, use it, and dispose off it properly so
    that there are no memory leaks remaining. Do that whenever you're dealing with
    hard drive access, for example.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following comment above the line that begins with `SqlCommand command
    =...`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, add the following comment above the line that begins with `sqlDataAdapter
    adapter...` to emphasize the purpose of the adapter:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Also, add this comment at the very end of the line:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, for `DataTable dt...`, add this comment:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The adapter is the mechanism that allows us to fill the table, so add the following
    comment at the end of the `adapter.Fill(dt);` line:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, add the following comment above line 30:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, add the following comment above line 33:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the following line, notice that the field here is `decimal`, because that''s
    how we made it in SQL Server, and 1 simply means the first field and the index
    is 1\. However, recall that this really means the second column because there
    are three columns:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行中，请注意这里的字段是`decimal`，因为这是我们在SQL Server中创建的，1只是表示第一个字段，索引为1。然而，请记住，这实际上意味着第二列，因为有三列：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As can be seen in *Figure 21.6.6*, Id is really index 0, XValues is index 1,
    and YValues is index 2\. This is why we use 1 and 2 here, because there are three
    columns where the second column is at index 1:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图21.6.6*所示，Id实际上是索引0，XValues是索引1，YValues是索引2。这就是为什么我们在这里使用1和2，因为有三列，其中第二列位于索引1：
- en: '![](img/a74c7f3f-19ba-46a5-a6e0-6e4b887e35c0.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a74c7f3f-19ba-46a5-a6e0-6e4b887e35c0.png)'
- en: 'Figure 21.6.6: Id is index 0, XValues is index 1, and YValues is index 2'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.6.6：Id是索引0，XValues是索引1，YValues是索引2
- en: Chapter review
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的`Default.aspx.cs`文件的完整版本，包括注释，如下面的代码块所示。
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to use LINQ together with SQL and SQL Server.
    You changed the data in the `ExperimentValues` table, wrote code to summarize
    the fields using LINQ, added namespaces, built the connection string, made the
    SQL connection, made the adapter, made the data table, populated the table with
    data, displayed the summed values, ran the program, and finally added comments.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何将LINQ与SQL和SQL Server一起使用。您更改了`ExperimentValues`表中的数据，编写了使用LINQ对字段进行汇总的代码，添加了命名空间，构建了连接字符串，建立了SQL连接，创建了适配器，创建了数据表，填充了数据表，显示了汇总值，运行了程序，并最终添加了注释。
- en: In the next chapter, you will learn how to make a page, save stuff from the
    page to a hard drive, and then read it back.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何制作一个页面，将页面上的内容保存到硬盘上，然后再读取它。
