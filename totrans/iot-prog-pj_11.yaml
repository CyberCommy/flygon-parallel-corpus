- en: Creating a Doorbell Button Using Bluetooth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will turn our focus to Bluetooth. Bluetooth is a wireless
    technology used in the exchange of data over short distances. It operates in the
    2.4 to 2.485 GHz frequency band, and generally has a range of up to 10 meters.
  prefs: []
  type: TYPE_NORMAL
- en: We will be utilizing the Blue Dot app on Android for the projects in this chapter,
    in which we will build a simple Bluetooth doorbell, before building a more advanced
    one that accepts secret swiping gestures.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Blue Dot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is an RGB LED?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading our button state using Bluetooth and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a Bluetooth-enabled doorbell using our Raspberry
    Pi and an Android phone or tablet. We will use an app on our Android phone or
    tablet, called Blue Dot, which is designed to work with Raspberry Pi projects.
  prefs: []
  type: TYPE_NORMAL
- en: We will start off by looking at RGB LEDs, wherein we will write a small program
    to cycle through these three colors. We will then create an alarm using a RGB
    LED and an active buzzer. We will test out the alarm with Python code.
  prefs: []
  type: TYPE_NORMAL
- en: We will write Python code to read button information from Blue Dot. We will
    then incorporate the code from both the alarm and Blue Dot to create a Bluetooth
    doorbell system.
  prefs: []
  type: TYPE_NORMAL
- en: The projects in this chapter should take a morning or afternoon to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is required to complete this project:'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 330 Ohm resistors (3 of them)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RGB LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active buzzer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android phone or tablet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Blue Dot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Blue Dot is an Android app available in the Google Play Store. It works as
    a Bluetooth remote for the Raspberry Pi. When loaded into your Android phone or
    tablet, it is basically a big blue dot that you press to send a signal to the
    Raspberry Pi. The following is a picture of the Blue Dot app loaded onto a tablet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cd63e306-d53d-4de9-b93e-d4dd48adb03e.png)'
  prefs: []
  type: TYPE_IMG
- en: It may be used as a Bluetooth joystick of sorts, as positional, slider, and
    rotational data may be sent from the app to your Raspberry Pi, depending on how
    you interact with the dot on the screen. We will add some of this functionality
    to our doorbell application by creating custom rings based on how the Blue Dot
    is pressed. To install Blue Dot on your Android phone or tablet, visit the Google
    Play Store and search for Blue Dot.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the bluedot library on the Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the `bluedot` library on the Raspberry Pi, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up a Terminal app
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Press *Enter* to install the library
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pairing Blue Dot with your Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to make use of the Blue Dot app, you must pair it to your Raspberry
    Pi. To do that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the top-right corner of the Raspbian desktop client, click on the Bluetooth
    symbol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ea7c6ad0-ba64-4e00-a079-5f13c8a6e92f.png)'
  prefs: []
  type: TYPE_IMG
- en: If Bluetooth is not on, click on the Bluetooth icon and select Turn on Bluetooth
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Make Discoverable option from the Bluetooth drop-down menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your Android phone or tablet, go to the Bluetooth settings (this may be in
    different places depending on the particular OS on the phone or tablet)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should be able to see the Raspberry Pi in the Available Devices list
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on it to pair your device to the Raspberry Pi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should get a message on the Raspberry Pi, reading something like `Device
    'Galaxy Tab E' has requested a pairing. Do you accept the request?`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK to accept
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may get a `connection failed` message. I was able to ignore this message
    and still have the Blue Dot app work with my Raspberry Pi, so don't worry too
    much
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the Blue Dot app onto your Android phone or tablet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a list with the Raspberry Pi as an item
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Raspberry Pi item to connect the Blue Dot application to the Raspberry
    Pi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To test our connection, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny by following Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `bluest-test.py` and run it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should get a message in the Thonny shell, reading Server started, followed
    by the Bluetooth address of the Raspberry Pi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should then get a message reading `Waiting for connection`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your Blue Dot app disconnected from the Raspberry Pi, connect it again by
    selecting the Raspberry Pi item in the list
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the Blue Dot app is connected to the Raspberry Pi, you will get the message
    `Client connected`, followed by the Bluetooth address of your phone or tablet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the big Blue Dot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Thonny shell should now print the following message: `Thank you for pressing
    the Blue Dot!`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wiring up our circuit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a doorbell circuit using an active buzzer and an RGB LED. Since
    we have not discussed RGB LEDs before, we will take a quick look at this amazing
    little electronic component. We then write a simple test program, using our Raspberry
    Pi, that will light up the RGB LED and sound the active buzzer.
  prefs: []
  type: TYPE_NORMAL
- en: What is an RGB LED?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An RGB LED is really just three LEDs in one unit: a red one, a green one, and
    a blue one. Almost any color may be achieved by applying electric current at varying
    power levels across the selection of input pins. The following is a diagram of
    such an LED:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bab49a3e-0a0e-40e3-88f5-1ac80a3ed730.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see there are red, green, and blue pins, plus a negative pin (-)
    . When an RGB LED has a negative pin (-), it is said to have a common cathode.
    Some RGB LEDs have a common positive pin (+), and, as such, are referred to as
    having a common anode. For our circuit, we will use an RGB LED with a common cathode.
    Both the common cathode and common anode have the longest pins of the RGB LED,
    and are identified by this characteristic.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our RGB LED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now build a circuit with which we can test our RGB LED. The following
    is a wiring diagram of our circuit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/361e3f94-6df6-439c-8bd9-633b15fd5b39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To build the circuit as shown in the diagram, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a breadboard, insert the RGB LED into the breadboard, such that the common
    cathode is inserted into the second slot from the left
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a 330 Ohm resistor to the red, green, and blue pins across the central
    gap on the breadboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a female-to-male jumper wire from GPIO pin 17 to the first slot on the
    left of the breadboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a female-to-male jumper wire from GPIO GND to the cathode pin of the
    RGB LED (the second from the left)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a female-to-male jumper wire from GPIO pin 27 to the third slot on the
    left of the breadboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a female-to-male jumper wire from GPIO pin 22 to the fourth slot on
    the left of the breadboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `RGB-LED-test.py` and run it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the RGB LED light up in red for 2 seconds. The RGB LED should
    then light up green for 2 seconds, before turning blue for 2 seconds. It will
    then turn off for 2 seconds, before starting the sequence again.
  prefs: []
  type: TYPE_NORMAL
- en: In the code, we start off by importing `RGBLED` from the GPIO Zero library.
    We then set up a variable, called `led`, by assigning it the pin numbers for the
    red, green, and blue colors of the RGB LED. From there, we simply turn on each
    color using the `led.color` property. It's easy to see that assigning a value
    of `1, 0, 0` to the `led.color` property turns on the red LED and turns off the
    green and blue LEDs. The `led.off` method turns off the RGB LED.
  prefs: []
  type: TYPE_NORMAL
- en: Try experimenting with different values for `led.color`. You may even put in
    a value that is less than `1` to vary the intensity of the color (the range is
    any value between `0` and `1`). If you look closely, you may be able to see the
    different LEDs lighting up inside the RGB LED.
  prefs: []
  type: TYPE_NORMAL
- en: Completing our doorbell circuit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s add an active buzzer to our circuit to complete the construction
    of our doorbell system. The following is the diagram for our doorbell circuit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f9a0218c-a5dd-465a-8d20-96247a7807d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To build the circuit, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Using our existing circuit, insert an active buzzer into the opposite end of
    the breadboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a female-to-male jumper wire from GPIO pin 26 to the positive pin of
    the active buzzer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a female-to-male jumper wire from GPIO GND to the negative pin of the
    active buzzer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `DoorbellAlarm.py` and run it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should hear the buzzer go off five times, as well as see the RGB LED go
    through its light sequence the same number of times
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s take a look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off by importing the libraries that we need, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we create our class with the `DoorbellAlarm` classname, before
    setting initial values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The class initialization sets the number of times that the alarm sequence will
    play, using the `num_of_times` class variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `light_show` method simply flashes each color in the RGB LED in sequence for
    `0.1` seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `play_sequence` method turns the buzzer on and off for the number of times
    set when the `DoorbellAlarm` class is initialized. It also runs through the RGB
    LED `light_show` function every time the buzzer is sounded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We test out our code by instantiating the `DoorbellAlarm` class with a value
    of `5`, and assigning it to the `doorbell_alarm` variable. We then play the sequence
    by calling the `play_sequence` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Reading our button state using Bluetooth and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, we are able to interact with the Blue Dot app in more
    ways than just a simple button press. The Blue Dot app can interpret where on
    the button a user presses, as well as detect double presses and swipes. In the
    following code, we will read from the Blue Dot app using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Reading button information using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Do the following :'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `BlueDotButton.py` and run it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may have to connect the Blue Dot app to your Raspberry Pi each time you
    run this program (simply select it from the list in the Blue Dot app). Try pressing
    the Blue Dot in the middle, on the top, on the left, and so on. You should see
    messages in the shell that tell you where you've pressed. Now try swiping and
    double-pressing. The messages in the shell should indicate these gestures as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what have we done here? Let''s take a look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off by importing the libraries that we need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We obviously need `BlueDot`, and we also need `pause`. We use `pause` to pause
    the program and wait for a signal from the Blue Dot app. Since we are using the
    `when_pressed`, `when_swiped`, and `when_double_swiped` events, we need to pause
    and wait (as opposed to other methods, such as `wait_for_press`). I believe using
    `when`-instead of `wait`-type events makes the code a little cleaner.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the heart of our program is the instantiation of a `BlueDot` object and
    its related call back definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Please note that these callback definitions have to be put after the methods
    they are referring to, or you will get an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The methods themselves are pretty straightforward. The following is the `swiped`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We define this method with a variable called `swipe` inside the method signature.
    Note that we do not have to use `self` inside the method signature, as we are
    not using class variables inside our methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a Bluetooth doorbell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know how to read button information from Blue Dot, we can build
    a Bluetooth doorbell button. We will rewrite our `DoorbellAlarm` class, and use
    a simple button press from Blue Dot to activate the alarm, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `DoorbellAlarmAdvanced.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our new class, `DoorbellAlarmAdvanced`, is a modified version of the `DoorbellAlarm`
    class. What we have done is basically add a new class property that we call `delay`.
    This class property will be used to change the delay time between buzzer rings.
    As you can see in the code, the two methods modified for the change are `__init__`
    and `play_sequence`**.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the changes in place for our alarm, let''s create a simple
    doorbell program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `SimpleDoorbell.py` and run it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the Blue Dot app to the Raspberry Pi, if it is not already connected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the big blue dot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should hear five rings, each lasting one second, from the buzzer in one-second
    intervals. You will also see that the RGB LED went through a short light show.
    As you can see, the code is pretty straightforward. We import our new `DoorbellAlarmAdvanced`
    class, and then call the `play_sequence` method after we initialize the class
    with the `doorbell_alarm` variable in the `pressed` method.
  prefs: []
  type: TYPE_NORMAL
- en: The changes we made in creating the `DoorbellAlarmAdvanced` class are utilized
    in our code to allow us to set the delay time between rings.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a secret Bluetooth doorbell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wouldn''t it be nice to know who is at the door before we answer it? We can
    take advantage of the swiping capabilities of the Blue Dot app. To create a secret
    Bluetooth doorbell (the secret being the way in which we interact with the doorbell,
    not a secret location for the doorbell), do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `SecretDoorbell.py` and run it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the Blue Dot app to the Raspberry Pi, if it is not already connected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Swipe in the up direction on the Blue Dot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should hear five short rings, as well as seeing the RGB LED light show.
    Try swiping in the down, left, and right directions. You should get a different
    ring sequence each time.
  prefs: []
  type: TYPE_NORMAL
- en: So, what did we do here? Basically, we attached a callback to the `when_swiped`
    event, and through `if` statements, we created new `DoorbellAlarmAdvanced` objects
    with varying initial values.
  prefs: []
  type: TYPE_NORMAL
- en: With this project we can now know who is at the door, as we can assign various
    swipe gestures to our different friends.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a Bluetooth doorbell application using the Raspberry
    Pi and the Blue Dot Android app. We started out by learning a little bit about
    RGB LEDs, before incorporating one in an alarm circuit with an active buzzer.
  prefs: []
  type: TYPE_NORMAL
- en: With the Blue Dot app, we learned how to connect a Bluetooth button to our Raspberry
    Pi. We also learned how to use some of the Blue Dot gestures, and created a doorbell
    application with various ring durations.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](83535d5b-9fec-4d63-a0d2-ba03d1e69d56.xhtml), *Enhancing Our
    IoT Doorbell*, we will extend the functionality of our doorbell, and have a text
    message sent whenever someone presses the button.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does an RGB LED differ from a regular LED?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? The Blue Dot app is found in the Google Play store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a common anode?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? The three colors inside the RGB LED are red, green, and yellow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you pair the Blue Dot application with the Raspberry Pi?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Bluetooth is a communication technology built for extremely long
    distances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between `DoorbellAlarm` and `DoorbellAlarmAdvanced`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? The GPIO Zero library contains a class named `RGBLED`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? The Blue Dot app may be used to record swipe gestures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `SimpleDoorbell` and `SecretDoorbell` classes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To find out more about the Blue Dot Android app, visit the documentation page
    at [https://bluedot.readthedocs.io](https://bluedot.readthedocs.io).
  prefs: []
  type: TYPE_NORMAL
