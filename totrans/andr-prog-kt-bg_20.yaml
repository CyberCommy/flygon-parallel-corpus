- en: Chapter 20. Drawing Graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This entire chapter will be about the Android `Canvas` class and some related
    classes, such as `Paint`, `Color`, and `Bitmap`. When combined, these classes
    bring great power when it comes to drawing on the screen. Sometimes, the default
    UI provided by the Android API isn't what we need. If we want to make a drawing
    app, draw graphs, or perhaps make a game, we need to take control of every pixel
    that the Android device has to offer.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Gain an understanding of the `Canvas` class and some related classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a `Canvas`-based demo app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look at the Android coordinate system so that we know where to do our drawing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about drawing and manipulating bitmap graphics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a bitmap graphics-based demo app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's get drawing!
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Canvas class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Canvas` class is part of the `android.graphics` package. In the next two
    chapters, we will be using all the following `import` statements from the `android.graphics`
    package and one more from the now familiar `View` package. They give us access
    to some powerful drawing functions from the Android API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First, let's talk about `Bitmap`, `Canvas`, and `ImageView`, as highlighted
    in the previous code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started drawing with Bitmap, Canvas, and ImageView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Android is designed to run all types of mobile apps, we can't immediately
    start typing our drawing code and expect it to work. We need to do a bit of preparation
    (that is, more coding) to consider the specific device that our app is running
    on. It is true that some of this preparation can be slightly counterintuitive,
    but we will go through this one step at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Canvas and Bitmap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on how you use the `Canvas` class, the term can be slightly misleading.
    While the `Canvas` class *is* the class that you draw your graphics to, such as
    a painting canvas, you still need a **surface** to transpose the canvas on.
  prefs: []
  type: TYPE_NORMAL
- en: The surface, in this case (and in our first two demo apps), will be from the
    `Bitmap` class.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that a bitmap is a type of image and Android has a `Bitmap` class. The
    `Bitmap` class can be used to draw bitmap images to the screen but, as we will
    see, it also has other uses as well. When talking about bitmap images and the
    `Bitmap` class I will try and be as clear as possible, so the distinction is as
    clear as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can think of the process as follows: we get a `Canvas` object and a `Bitmap`
    object, and then set the `Bitmap` object as the part of the `Canvas` object to
    draw on.'
  prefs: []
  type: TYPE_NORMAL
- en: This is slightly counterintuitive if you take the word "canvas" in its literal
    sense, but once it is all set up, we can forget about it and concentrate on the
    graphics that we want to draw.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Canvas` class supplies the *ability* to draw. It has all the functions
    for doing things such as drawing shapes, text, lines, and image files (such as
    other bitmaps), and even supports plotting individual pixels.
  prefs: []
  type: TYPE_NORMAL
- en: The `Bitmap` class is used by the `Canvas` class and is the surface that gets
    drawn on. You can think of the `Bitmap` instance as being inside a picture frame
    on the `Canvas` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Paint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to `Canvas` and `Bitmap`, we will be using the `Paint` class. This
    is much easier to understand; `Paint` is the class that is used to configure specific
    properties, such as the color that we will draw on the `Bitmap` instance (within
    the `Canvas` instance).
  prefs: []
  type: TYPE_NORMAL
- en: There is, however, still another piece of the puzzle before we can start drawing
    things.
  prefs: []
  type: TYPE_NORMAL
- en: ImageView and Activity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ImageView` class is the class that the `Activity` class will use to display
    output to the user. The reason for this third layer of abstraction is that, as
    we have seen throughout the book, the `Activity` class needs to pass a `View`
    reference to the `setContentView` function to display something to the user. Throughout
    the book, this has been a layout that we created in the visual designer or in
    XML code.
  prefs: []
  type: TYPE_NORMAL
- en: This time, however, we don't want a UI – instead, we want to draw lines, pixels,
    images, and shapes.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple classes that inherit from `View` that enable all different
    types of apps to be made, and they will all be compatible with the `Activity`
    class, which is the foundation of all regular Android apps (including drawing
    apps and games).
  prefs: []
  type: TYPE_NORMAL
- en: It is, therefore, necessary to associate the `Bitmap` class that gets drawn
    on (through its association with `Canvas`) with the `ImageView` class, once the
    drawing is done. The last step will be to tell the `Activity` class that our `ImageView`
    represents the content for the user to see by passing it to `setContentView`.
  prefs: []
  type: TYPE_NORMAL
- en: Canvas, Bitmap, Paint, and ImageView – a quick summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the theory of the code structure that we need to set up doesn't appear simple,
    then you will breathe a sigh of relief when you see the relatively simple code
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a quick summary of what we''ve covered so far:'
  prefs: []
  type: TYPE_NORMAL
- en: Every app needs an `Activity` class to interact with the user and the underlying
    operating system. Therefore, we must conform to the required hierarchy if we want
    to succeed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use the `ImageView` class, which inherits from the `View` class. The
    `View` class is what `Activity` needs to display our app to the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Canvas` class supplies the *ability* to draw lines, pixels, and other graphics.
    It has all the functions for doing things, such as drawing shapes, text, lines,
    and image files, and even supports plotting individual pixels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Bitmap` class will be associated with the `Canvas` class, and it is the
    surface that gets drawn on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Canvas` class uses the `Paint` class to configure details, such as the
    color that is drawn.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, once the `Bitmap` instance has been drawn on, we must associate it
    with the `ImageView` class, which, in turn, is set as the view for the `Activity`
    instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result will be that what we draw on the `Bitmap` instance in the `Canvas`
    instance will be displayed to the user through the `ImageView` instance via the
    call to `setContentView`. Phew!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It doesn't matter if this isn't 100% clear. It is not you that isn't seeing
    things clearly – it simply isn't a clear relationship. Writing the code and using
    the techniques over and over will cause things to become clearer. Take a look
    at the code, perform the demo apps in this chapter and the next, and then re-read
    this section.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how to set up this relationship in code – don't worry about
    typing the code; we will just study it first.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Canvas class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at the code and the different stages that are required to
    get drawing, then we can quickly move on to drawing something, for real, with
    the `Canvas` demo app.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the instances of the required classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is to turn the classes that we need into usable instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we declare all the instances that we require. We can''t initialize the
    instances right away, but we can make sure that we initialize them before they
    are used, so we use `lateinit` in the same way we did in the Animation demo app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The previous code declares references of the `ImageView`, `Bitmap`, `Canvas`,
    and `Paint` types. They are named `myImageView`, `myBlankBitmap`, `myCanvas`,
    and `myPaint`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to initialize our new objects before using them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the following comment in the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is where we will configure our color and draw our graphics. Additionally,
    notice at the top of the code that we declare and initialize two `Int` variables,
    called `widthInPixels` and `heightInPixels`. When we code the `Canvas` demo app,
    I will go into greater detail about some of those lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to draw; all we need to do is assign the `ImageView` instance
    to the `Activity` via the `setContentView` function.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Activity content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, before we can see our drawing, we tell Android to use our `ImageView`
    instance, called `myImageView`, as the content to display to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you have already seen in every app so far, the `setContentView` function
    is part of the `Activity` class, and this time we pass in `myImageView` as an
    argument, instead of an XML layout as we have been doing throughout the book.
    That's it – all we have to learn now is how to actually draw on the `Bitmap` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Before we do some drawing, it will be useful to start a real project. We will
    copy and paste the code that we have just discussed, one step at a time, into
    the correct place, and then actually see something drawn on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's do some drawing.
  prefs: []
  type: TYPE_NORMAL
- en: The Canvas Demo app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, create a new project to explore the topic of drawing with `Canvas`. We
    will reuse what we have learned and, this time, we will also draw to the `Bitmap`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project and call it `Canvas Demo`, and make sure that you choose
    the **Empty Activity** template option.
  prefs: []
  type: TYPE_NORMAL
- en: In this app, we will make a change that we have not seen before. We will be
    using the vanilla version of the `Activity` class. Therefore, `MainActivity` will
    inherit from `Activity` instead of `AppCompatActivity`, as has been the case previously.
    We are doing this because we are not using a layout from an XML file, and so we
    have no need for the backward compatibility features of `AppCompatActivity` as
    we did in all the previous projects.
  prefs: []
  type: TYPE_NORMAL
- en: You should edit the class declaration as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You will also need to add the following import statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete code for this app can be found in the download bundle in the `Chapter20/Canvas
    Demo` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the Canvas demo app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, delete all the contents of the `onCreate` function, except the declaration/signature,
    call to super.onCreate, and the opening and closing curly braces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can add the following highlighted code after the class declaration,
    but before the `onCreate` function. This is what the code will look like after
    this step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice in Android Studio that the four new classes are underlined in red. This
    is because we need to add the appropriate `import` statements. You could copy
    them from the first page of this chapter, but it will be much quicker to place
    the mouse cursor on each error in turn, and then hold the *ALT* key and tap the
    *Enter* key. If prompted from the pop-up options, select **Import class**.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have done this for `ImageView`, `Bitmap`, `Canvas`, and `Paint`, all
    the errors will be gone, and the relevant `import` statements will have been added
    to the top of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have declared instances of the required classes, we can initialize
    them. Add the following code to the `onCreate` function after the call to `super.onCreate…`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This preceding code is the same as the code that we saw when we were discussing
    `Canvas` in theory. However, it is worth exploring the `Bitmap` class initialization
    a little more as it is not straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Bitmap initialization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Bitmaps, more typically in graphics-based apps and games, are used to represent
    objects, such as different brushes to paint with, a player character, backgrounds,
    game objects, and more. Here, we are simply using it to draw on. In the next project,
    we will use bitmaps to represent the subject of our drawing and not just the surface
    to draw on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function that requires explaining is the `createBitmap` function. The parameters
    from left to right are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Width (in pixels)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Height (in pixels)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bitmap configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Bitmap` instances can be configured in several different ways; the `ARGB_8888`
    configuration means that each pixel is represented by four bytes of memory.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of bitmap formats that Android can use. This one is perfect
    for a good range of color and will ensure that the bitmaps we use and the color
    that we request will be drawn as intended. There are higher and lower configurations,
    but `ARGB_8888` is a good fit for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can do the actual drawing.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing on the screen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following highlighted code after the initialization of `myPaint` and
    inside the closing curly brace of the `onCreate` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '`myCanvas.drawColor` to fill the screen with color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `myPaint.textSize` property defines the size of the text that will be drawn
    next
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `myPaint.color` property determines what color any future drawing will be
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `myCanvas.drawText` function actually draws the text to the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we analyze the arguments passed into `drawText`, we can see that the text
    will say "Hello World!", and that it will be drawn 100 pixels from the left and
    100 pixels from the top of our `Bitmap` instance (`myBitmap`).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we use the `color` property again to change the color that will be used
    for drawing. Finally, we use the `drawCircle` function to draw a circle that is
    400 pixels from the left, and 100 pixels from the top. The circle will have a
    radius of 100 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: I have refrained from explaining the `Color.argb` function until now.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining Color.argb
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `Color` class, unsurprisingly, helps us to manipulate and represent color.
    The `argb` function returns a color that is constructed using the **a**lpha (for
    opacity and transparency), **r**ed, **g**reen, **b**lue model. This model uses
    values ranging from 0 (no color) to 255 (full color) for each element. It is important
    to note – although, it might seem obvious – that the mixed colors are intensities
    of different colored light, and the results are quite different to what happens
    when we mix paint, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To devise an ARGB value and explore this model further, take a look at this
    handy website: [https://www.rapidtables.com/web/color/RGB_Color.html](https://www.rapidtables.com/web/color/RGB_Color.html).
    The website helps you to pick the RGB values; you can then experiment with the
    alpha values.'
  prefs: []
  type: TYPE_NORMAL
- en: The values used to clear the drawing surface were `255`, `0`, `0`, and `255`.
    These values mean full opacity (that is, solid color), no red, no green, and full
    blue. This makes a blue color.
  prefs: []
  type: TYPE_NORMAL
- en: The next call to the `argb` function is in the first call to `setColor`, where
    we are setting the required color for the text. The `255`, `255`, `255`, and `255`
    values mean full opacity, full red, full green, and full blue. When you combine
    light with these values, you will get white.
  prefs: []
  type: TYPE_NORMAL
- en: The final call to `argb` is in the final call to `setColor`, where we are setting
    the color to draw the circle; `255`, `21`, `207`, and `62` makes a sun-yellow
    color.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step that we need to perform before we can run the code is to add
    the call to the `setContentView` function, which places our `ImageView` instance
    (`myImageView`) as the view to be set as the content for this app. Here are the
    final lines of code for after the code that we have already added, but before
    the closing curly brace of `onCreate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we tell the `Activity` class to use `myImageView` by calling `setContentView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates what the Canvas demo app looks like when
    you run it. We can see an 800 by 800-pixel drawing. In the next chapter, we will
    use more advanced techniques to utilize the entire screen, and we will also learn
    about threads to make the graphics move in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Explaining Color.argb](img/B12806_C20_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It will help you to understand the result of the coordinates that we use in
    our `Canvas` drawing functions if you know more about the Android coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: The Android coordinate system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you will see, drawing a bitmap graphic is trivial. However, the coordinate
    system that we use to draw our graphics on requires a brief explanation.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting and drawing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we draw a bitmap graphic on the screen, we pass in the coordinates that
    we want to draw the object to. The available coordinates of a given Android device
    depend upon the resolution of its screen.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the Google Pixel phone has a screen resolution of 1,920 pixels
    (across) by 1,080 pixels (down) when held in landscape orientation.
  prefs: []
  type: TYPE_NORMAL
- en: The numbering system of these coordinates starts in the top left-hand corner
    at 0,0, and proceeds downward and to the right until the bottom-right corner is
    pixel 1919, 1079\. The apparent 1-pixel disparity between 1,920/1,919 and 1,080/1,079
    is because the numbering starts at 0\.
  prefs: []
  type: TYPE_NORMAL
- en: So, when we draw a bitmap graphic or anything else on the screen (such as `Canvas`
    circles and rectangles), we must specify an *x*, *y* coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, a bitmap graphic (or `Canvas` shape), of course, comprises many
    pixels. So, which pixel of a given bitmap graphic is drawn at the *x*, *y* screen
    coordinate that we will be specifying?
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is the top-left pixel of the bitmap graphic. Take a look at the
    next diagram, which should clarify the screen coordinates using the Google Pixel
    phone as an example. As a graphical means for explaining the Android coordinate
    drawing system, I will use a cute spaceship graphic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting and drawing](img/B12806_C20_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Furthermore, the coordinates are relative to what you draw on. So, in the `Canvas`
    demo that we just coded and in the next demo, the coordinates are relative to
    the `Bitmap` object (`myBitmap`). In the next chapter, we will use the entire
    screen, and the previous diagram will be a more accurate representation of what
    is happening.
  prefs: []
  type: TYPE_NORMAL
- en: Let's do some more drawing – this time with bitmap graphics (and the `Bitmap`
    class again). We will use the same starting code as we have seen in this app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating bitmap graphics with the Bitmap class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's examine a bit of theory before we dive into the code and consider exactly
    how we are going to draw images to the screen. To draw a bitmap graphic, we will
    use the `drawBitmap` function of the `Canvas` class.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will need to add a bitmap graphic to the project in the `res/drawable`
    folder – we will do this in reality in the Bitmap demo app later. For now, assume
    that the graphics file/bitmap has a name of `myImage.png`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will declare an object of the `Bitmap` type in the same way that we
    did for the `Bitmap` object that we used for our background in the previous demo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will need to initialize the `myBitmap` instance using our preferred
    image file, which we previously added to the project''s `drawable` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `decodeResource` function of the `BitmapFactory` class is used to initialize
    `myBitmap`. It takes two parameters; the first is the `resources` property that
    is made available by the `Activity` class. This function, as the name suggests,
    gives access to the project resources, and the second parameter, `R.drawable.myImage`,
    points to the `myImage.png` file in the `drawable` folder. The `Bitmap` (`myBitmap`)
    instance is now ready to be drawn by the `Canvas` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now draw the bitmap graphic via the `Bitmap` instance with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what the spaceship graphic from the previous section looks like when
    drawn on the screen (just for reference when we talk about rotating bitmaps):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating bitmap graphics with the Bitmap class](img/B12806_C20_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Manipulating bitmaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quite often, however, we need to draw bitmaps in a rotated or otherwise altered
    state. It is quite easy to use Photoshop, or whatever your favorite image editing
    software happens to be and create more bitmaps from the original bitmap to face
    other directions. Then, when we come to draw our bitmap, we can simply decide
    which way and draw the appropriate pre-loaded bitmap.
  prefs: []
  type: TYPE_NORMAL
- en: However, I think it will be much more interesting and instructive if we work
    with just the one single source image and learn about the class that Android provides
    to manipulate images with our Kotlin code. You will then be able to add rotating
    and inverting graphics to your app developer's toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: What is a bitmap?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A bitmap is called a bitmap because that is exactly what it is: a *map of bits*.
    While there are many bitmap formats that use different ranges and values to represent
    colors and transparency, they all amount to the same thing. They are a grid or
    map of values and each value represents the color of a single pixel.'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, to rotate, scale, or invert a bitmap, we must perform the appropriate
    mathematical calculation on each pixel or bit of the image, grid, or map of the
    bitmap. The calculations are not terribly complicated, but they are not especially
    simple either. If you took math to the end of high school, you will probably understand
    the math without too much difficulty.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, understanding the math isn't enough. We will also need to devise
    efficient code as well as understand the bitmap format, and then modify our code
    for each format; this is not trivial. Fortunately (as we have come to expect),
    the Android API has done it all for us – meet the `Matrix` class.
  prefs: []
  type: TYPE_NORMAL
- en: The Matrix class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The class is named `Matrix` because it uses the mathematical concept and rules
    to perform calculations on a series of values known as matrices – the plural of
    matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Android `Matrix` class has nothing to do with the movie series of the same
    name. However, the author advises that all aspiring app developers take the **red**
    pill.
  prefs: []
  type: TYPE_NORMAL
- en: You might be familiar with matrices, but don't worry if you're not, because
    the `Matrix` class hides all the complexity away. Furthermore, the `Matrix` class
    not only allows us to perform calculations on a series of values, but it also
    has some pre-prepared calculations that enable us to do things such as rotate
    a point around another point by a specific number of degrees. We get all this
    without knowing anything about trigonometry.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are intrigued by how the math works behind the scenes of the `Matrix`
    class and want an absolute beginner''s guide to the mathematics of rotating game
    objects, then look at this series of Android tutorials on my website, which ends
    with a flyable and rotatable spaceship. These tutorials are in Java, but should
    be quite straightforward to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/](http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/](http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://gamecodeschool.com/android/2d-rotation-and-heading-demo/](http://gamecodeschool.com/android/2d-rotation-and-heading-demo/)'
  prefs: []
  type: TYPE_NORMAL
- en: This book will stick to using the Android `Matrix` class, but we will do slightly
    more advanced math when we create a particle system in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Inverting a bitmap to face the opposite direction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we need to create an instance of the `Matrix` class. The following line
    of code does so in a familiar way by calling the default constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you don't need to add any of this code to a project right now; it
    will all be shown again shortly with much more context. I just thought it would
    be easier to see all the `Matrix`-related code on its own beforehand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use one of the many neat functions of the `Matrix` class. The `preScale`
    function takes two parameters; one for the horizontal change and one for the vertical
    change. Take a look at the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: What the `preScale` function will do is loop through every pixel position and
    multiply all the horizontal coordinates by `-1`, and all the vertical coordinates
    by `1`.
  prefs: []
  type: TYPE_NORMAL
- en: The effect of these calculations is that all the vertical coordinates will remain
    the same, because if you multiply by one, then the number doesn't change. However,
    when you multiply by minus one, the horizontal position of the pixel will be inverted.
    For example, horizontal positions 0, 1, 2, 3, and 4 will become 0, -1, -2, -3,
    and -4.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this stage, we have created a matrix that can perform the necessary calculations
    on a bitmap. We haven''t actually done anything to the bitmap yet. To use the
    `Matrix` instance, we call the `createBitmap` function of the `Bitmap` class,
    as in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code assumes that `myBitmapLeft` is already initialized along
    with `myBitmapRight`. The parameters to the `createBitmap` function are explained
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`myBitmapRight` is a `Bitmap` object that has already been created and scaled
    and has the image (facing to the right) loaded into it. This is the image that
    will be used as the source for creating the new `Bitmap` instance. The source
    `Bitmap` object will not be altered at all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0, 0` is the horizontal and vertical starting position that we want the new
    `Bitmap` instance to be mapped to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `50, 25` parameters are values that set the size that the bitmap is scaled
    to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next parameter is our pre-prepared `Matrix` instance, `matrix`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final parameter, `true`, instructs the `createBitmap` function that filtering
    is required to correctly handle the creation of the `Bitmap` type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is what `myBitmapLeft` will look like when drawn to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inverting a bitmap to face the opposite direction](img/B12806_C20_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also create the bitmap facing up and down using a rotation matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the bitmap to face up and down
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s take a look at rotating a `Bitmap` instance and then we can build the
    demo app. We already have an instance of the `Matrix` class, so all we have to
    do is call the `preRotate` function to create a matrix that is capable of rotating
    every pixel by a specified number of degrees in the single argument to `preRotate`.
    Take a look at the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How simple was that? The `matrix` instance is now ready to rotate any series
    of numbers (map of bits) we pass to it, anti-clockwise (`-`), by `90` degrees.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line of code has the same parameters as the previous call to
    `createBitmap` that we dissected, except that the new `Bitmap` instance is assigned
    to `myBitmapUp`, and the effect of `matrix` is to perform the rotate instead of
    the `preScale` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what `myBitmapUp` will look like when drawn:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rotating the bitmap to face up and down](img/B12806_C20_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also use the same technique, but with a different value, in the argument
    to `preRotate` to face the bitmap downward. Let's get on with the demo app to
    see all this stuff in action.
  prefs: []
  type: TYPE_NORMAL
- en: The Bitmap manipulation demo app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have studied the theory, let's draw and spin some bitmaps. First,
    create a new project and call it `Bitmap manipulation`. Choose the **Empty Activity**
    option with all the other settings as they have been throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Bob graphic to the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right-click and select **Copy** to copy the `bob.png` graphics file from the
    download bundle in the `Chapter20/Bitmap Manipulation/drawable` folder. Bob, represented
    by `bob.png`, is a simple, static video game character.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Android Studio, locate the `app/res/drawable` folder in the project explorer
    window and paste the `bob.png` image file into it. The following screenshot makes
    it clear where this folder is located and what it will look like with the `bob.png`
    image in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Bob graphic to the project](img/B12806_C20_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the `drawable` folder and select **Paste** to add the `bob.png`
    file to the project. Click on **OK** twice to confirm the default options for
    importing the file into the project.
  prefs: []
  type: TYPE_NORMAL
- en: In this app, we will make the same change that we did in the previous app. We
    will be using the vanilla version of the `Activity` class. Therefore, `MainActivity`
    will inherit from `Activity` instead of `AppCompatActivity`, as has been the case
    previously. We are doing this because, again, we are not using a layout from an
    XML file, and so we have no need for the backward compatibility features of `AppCompatActivity`
    as we did in all the previous projects.
  prefs: []
  type: TYPE_NORMAL
- en: You should edit the class declaration as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You will also need to add the following import statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following required properties to the `MainActivity` class, after the
    class declaration and before the `onCreate` function, ready to do some drawing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following imports after the package declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can initialize all the instances in `onCreate`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add calls to three functions that we will write soon and set our new
    drawing as the view for the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the `drawRotatedBitmap` function, which performs the bitmap manipulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The previous code uses a loop to iterate through 360 degrees, 30 degrees at
    a time. The value (at each pass through the loop) is used in the `Matrix` instance
    to rotate the image of Bob, and he is then drawn to the screen using the `drawBitmap`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the final two functions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `drawEnlargedBitmap` function uses the `createScaledBitmap` function, enlarging
    the bitmap graphic to 300 by 400 pixels. The `drawBitmap` function then draws
    it to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The `drawShrunkenBitmap` function uses the exact same technique, except that
    it scales and then draws a 50 x 75 pixel image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, run the app to see Bob grow, shrink, and then spin around through
    360 degrees at 30-degree intervals, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Bob graphic to the project](img/B12806_C20_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The only thing missing from our drawing repertoire is the ability to watch all
    this activity as it happens. We will fix this gap in our knowledge next.
  prefs: []
  type: TYPE_NORMAL
- en: Frequently asked question
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q 1) I know how to do all this drawing, but why can't I see anything move?
  prefs: []
  type: TYPE_NORMAL
- en: A) To see things move, you need to be able to regulate when each part of the
    drawing occurs. You need to use animation techniques. This is not trivial, but
    it is not beyond the grasp of a determined beginner, either. We will study the
    required topics in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to draw custom shapes, text, and bitmaps. Now that
    we know how to draw and manipulate both primitive shapes, text, and bitmaps, we
    can take things up a level.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start our next multi-chapter app, which is a kid's-style
    drawing app that comes to life at the tap of a button.
  prefs: []
  type: TYPE_NORMAL
