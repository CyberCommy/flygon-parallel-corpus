- en: Chapter 7. Applying ECSS to Your Website or Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this Chapter we are going to cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Applying ECSS to logic modules
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying ECSS to visual modules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organising modules, their components and naming files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with generated content from a CMS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ECSS and global styles
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ECSS is a good match for complex web applications. First up, let's consider
    how we might apply ECSS around the logic of a large application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Applying ECSS to logic modules
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typically, in a web application, some programming language (e.g. JavaScript/TypeScript/Ruby/whatever),
    will be generating *a thing*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: It's often practical and desirable to use the file name of that thing as the
    name of the module (or component of a module). Therefore, if a file is called
    `Header.js` and generates the container for the header, any component parts of
    that header could be named accordingly. For example, in ECSS parlance, a company
    registration number might get `sw-Header_Reg` as its selector. By extension, a
    search box component inside the header might have a selector like `sw-HeaderSearch_Input`
    (the input box created by the `HeaderSearch.js` file).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: An example
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's consider a more concrete example. Suppose we are authoring a JavaScript
    client-side application and we have a component called `ShoppingCartLines.js`.
    Its task is to render out the lines within a shopping cart and it in turn displays
    within a module called `ShoppingCart.js`. The `ShoppingCart` module renders out
    anything to do with the shopping cart itself. Straight forward enough so far.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Now let's complicate our imagined scenario a little by suggesting that our shopping
    cart will work within a modal view in some scenarios and as part of the page,
    in normal document flow, in others.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'In this instance, we have a wider module: `ShoppingCart` and a component that
    typically lives within the module called `ShoppingCartLines`. Each of those will
    have their own child nodes. The module and component have two possible views:
    in a modal and in the page. Let''s also imagine that the switch of contexts would
    be handled by the application logic.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Our constant is the module itself and we can use a namespace to provide context
    for it. When applying ECSS around application logic it makes sense to always use
    the full name of the application module or component as the module section of
    the ECSS style selector. This has the benefit of making all HTML classes in the
    DOM self descriptive as to their origin and purpose.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When naming the class for the outermost container of a module or component,
    no child extension should be added to the class/selector. Only the child parts
    of a module or component should get the node extension.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, so, at this point, our selectors could be named like this in the style
    sheets:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This way our module and component have their two contexts isolated by a namespace
    switch. We are free to style each as we see fit with no potential leakage of styles
    from one to the other. This is the exact kind of scenario that typically becomes
    fraught when components and modules share HTML classes in the interest of abstraction
    and re-use.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Let's consider a twist on this scenario. Let's suppose we don't switch contexts
    with application logic. Instead, we have a switch of styles with media queries.
    We have a modal implementation at smaller viewports and the page style, in normal
    document flow, at larger viewports.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: In this instance, we could have a single namespace e.g. `sc-ShoppingCart` (I'm
    using `sc-` to designate the context is `ShoppingCart`) and use media queries
    in the CSS to provide visual changes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Child nodes of a module or component
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned previously, a module or component will have its own child node
    elements. These selectors should be named with a child extension. For example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Each child gets the namespace and component (or module) name of its parent.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Full details on the ECSS naming convention are in [Chapter 5](ch05.html "Chapter 5. File
    Organisation and Naming Conventions"), *File Organisation and Naming Conventions*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: So, at this point we now have an understanding of how we might name our selectors
    when applying ECSS around application modules and logic. We will look now at how
    we might name selectors and apply ECSS around purely visual modules. However,
    first a brief but important tangent on using type selectors.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: A note on type selectors
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When authoring CSS, there are occasions when it can be tempting to use type
    selectors. Usually this is when there are HTML5 text-level elements, such as `<i>`,
    `<b>`, `<em>` or `<span>`. For example, suppose we have a sentence with a couple
    of words that need to be bold. Then temptation would be to do this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![A note on type selectors](img/Warning-image-1.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And use these selectors to apply styles to the contents of that `b` tag:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![A note on type selectors](img/Warning-image-1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There are a couple of problems here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: We have created a dependency on certain markup structure (it must be a child
    node and be a `b` tag).
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Due to point 1, we have created a selector that is more specific than it needs
    to be. This makes any future overrides more difficult to reason about and perform.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While it may seem overly verbose, this is how that scenario should be handled:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And this CSS:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each element has its own selector and rule. Neither depends upon the other.
    Neither rule requires particular markup to be applied.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each rule applied to an element should be as opinionated about its own appearance
    as possible. For example, it you have an element that contains two text nodes
    it seems logical to apply the font size and line height to the wrapping element
    so the two text nodes will inherit from it. However, this prevents that text node
    being moved to another location and rendering consistently. Instead, apply the
    color, font-size and line-height to each node, even if they are initially very
    similar (perhaps at the outset only the colour differs). It will seem counter-intuitive
    at first but protects against possible deviations in the future (being moved in
    the DOM, styles diverging etc).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Applying ECSS to visual modules
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Visual* components refers to areas of markup that are not necessarily generated
    by a particular piece of application logic.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: You can still break areas into logical **visual** areas and apply ECSS to them.
    This is the approach employed on the [http://ecss.io](http://ecss.io)  website.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: There are no hard and fast rules. As an example, we might break a design into
    visual areas for Structure, Menu, Footer, Navigation, Quick Jump Menu, Hero Image
    etc.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'And in this case, our selectors look like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'However, we might just as easily do this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Or even like this if it''s the module:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: None of those approaches is wrong or right. As long as child nodes/selectors
    follow the same naming convention, the styles will be isolated to the particular
    area.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The reality is that on smaller sites, you could use pretty much any class-naming
    approach you like and the dangers of collision would be minimal. However, as soon
    as projects start to grow the benefits of namespacing and a strict naming convention
    will start to pay you back handsomely. Just make a decision, and apply that choice
    consistently.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Organising modules, their components, and naming files
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, I think it will be useful to consider a more detailed example
    module structure. It's similar to the structure in which I'm used to employing
    ECSS. It's a little more involved than our prior examples and gives another subtly
    different variation on how files could be organised and selectors named. As ever,
    from our CSS point of view our aim is isolation, consistency and solid developer
    ergonomics. Let's take a look.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have a module. Its job is to load the sidebar area of our site.
    The directory structure might initially look like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In terms of the example markup structure this module should produce, we would
    expect something like this initially:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 就示例标记结构而言，我们期望这个模块应该产生类似这样的东西：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The CSS that styles this initial element should live inside the `css` folder
    like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 样式化此初始元素的CSS应该放在`css`文件夹中，就像这样：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, suppose we have a component inside the `SidebarModule` that creates a
    header for the `SidebarModule`. We might name the component with a file called
    `Header.js` and store it inside the components sub-folder of our `SidebarModule`
    like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们在`SidebarModule`内有一个组件，它为`SidebarModule`创建一个标题。我们可能会将组件命名为一个名为`Header.js`的文件，并将其存储在`SidebarModule`的`components`子文件夹中，就像这样：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With that in place, the `Header.js` might render markup like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，`Header.js`可能会呈现如下标记：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note how the `Header` component, due to being within the context of the `SidebarModule`
    carries the `sb-` micro-namespace to designate its parentage. And the nodes created
    by this new component are named according to the logic that creates them.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`Header`组件，由于在`SidebarModule`的上下文中，携带`sb-`微命名空间来指定其父级。并且由这个新组件创建的节点根据创建它们的逻辑进行命名。
- en: 'In terms of the general conventions to follow:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 就一般约定而言：
- en: Components should carry the micro-namespace of the originating logic. If you
    are creating a component that sits within a module, it should carry a/the namespace
    of the originating module (possible namespaces for a module are defined in `css-namespaces.json`).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 组件应携带原始逻辑的微命名空间。如果您正在创建一个位于模块内的组件，它应携带原始模块的命名空间（模块的可能命名空间在`css-namespaces.json`中定义）。
- en: HTML classes/CSS selectors should be named according to the file name/components
    that generated them. For example, if we created another component inside our module
    called `HeaderLink.js` which renders its markup inside a child of the `Header.js`
    component, then the markup it generates and the applicable CSS selectors should
    match this file name.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: HTML类/CSS选择器应根据生成它们的文件名/组件进行命名。例如，如果我们在我们的模块内创建了另一个名为`HeaderLink.js`的组件，它将在`Header.js`组件的子级内呈现其标记，那么它生成的标记和适用的CSS选择器应与此文件名匹配。
- en: 'For example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In terms of the folder structure, it would now look like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 就文件夹结构而言，现在看起来是这样的：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice how there is a 1:1 correlation between component logic (the `*.js` file)
    and the associated styles (the `*.css` files) – both sit within a `components`
    sub-folder. Although both logic and styles don't share the same immediate parent
    folder, they both live within the same module folder, making removal of the entire
    module simple if needed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意组件逻辑（`*.js`文件）和相关样式（`*.css`文件）之间存在一对一的对应关系-两者都位于`components`子文件夹中。尽管逻辑和样式不共享相同的直接父文件夹，但它们都位于同一个模块文件夹中，如果需要，可以轻松删除整个模块。
- en: Nodes within a component
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件内的节点
- en: 'To recap. Used in this way, the ECSS naming convention of nodes within a component
    should always be:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 总之。以这种方式使用，组件内节点的ECSS命名约定应始终是：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`ns` : The micro-namespace (always lower-case)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ns`：微命名空间（始终小写）'
- en: '`-Component`: The Component name (always upper camel-case)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-Component`：组件名称（始终使用大驼峰命名法）'
- en: '`_Node`: The child node of a component (always upper camel-case preceded by
    an underscore)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_Node`：组件的子节点（始终大驼峰，前面有下划线）'
- en: '`-variant`: The optional variant of a node (always lower-case and preceded
    by a hyphen)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-variant`：节点的可选变体（始终小写，并在连字符之前）'
- en: Variants
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变体
- en: 'Note that the `-variant` part of a node within a component is optional and
    should only be used to denote subtle variations on otherwise identical items.
    For example, multiple headers that are identical apart from a differing background
    image might be rendered like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，组件内节点的`-variant`部分是可选的，只应用于表示细微差异的项目。例如，除了不同的背景图像之外完全相同的多个标题可能会呈现如下：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Remember, we discussed the use of variant selectors a little more in [Chapter
    5](ch05.html "Chapter 5. File Organisation and Naming Conventions"), *File Organisation
    and Naming Conventions*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们在[第5章](ch05.html "第5章。文件组织和命名约定")中更详细地讨论了变体选择器，*文件组织和命名约定*。
- en: Working with generated content from a CMS
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从CMS生成的内容中工作
- en: It's probable that if you use ECSS with any sort of content management system
    (Wordpress, Ghost, Drupal et al) you will encounter a situation where it's not
    possible to add a class to every element. For example, in a Wordpress page or
    post, it would be unrealistic to expect users entering content to remember the
    right class to add to each paragraph tag. In these situations, I think pragmatism
    has to win out.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，如果您使用ECSS与任何类型的内容管理系统（Wordpress、Ghost、Drupal等），您将遇到一种情况，即不可能向每个元素添加类。例如，在Wordpress页面或帖子中，期望用户输入内容并记住要添加到每个段落标记的正确类是不现实的。在这些情况下，我认为务实必须取胜。
- en: 'Set a ECSS class to the enclosing element and (grudgingly) accept that all
    the nested elements will be set with a type selector. Here''s some example markup:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为封闭元素设置一个ECSS类，并（勉强）接受所有嵌套元素都将使用类型选择器进行设置。以下是一些示例标记：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here is how you might author the CSS to handle selecting those elements:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可能编写的CSS来处理选择这些元素的方式：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: I'm not crazy about that. We're nesting selectors, tying our styles to elements,
    basically everything we normally want to avoid with ECSS. However, I'm being honest.
    The reality is that this is likely going to be the best compromise we can manage.
    Where it is possible to add a class to elements we absolutely should. However,
    there will be situations where this simply isn't possible and no amount of Ivory
    Tower idealism will help in those situations. Remember *Pin Cing Do*!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我对此并不疯狂。我们正在嵌套选择器，将我们的样式与元素绑定，基本上是我们通常希望避免的ECSS。但是，我很诚实。现实情况是，这可能是我们能够做出的最好妥协。在可能向元素添加类的情况下，我们绝对应该这样做。但是，会有一些情况下这根本不可能，任何象牙塔的理想主义都无法在这些情况下帮助。记住*平青哥*！
- en: ECSS and global styles
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECSS和全局样式
- en: Whilst the Lion's share of CSS in a web application can be described as module
    based, there is an inevitable amount of global CSS we need to deal with. From
    an ECSS perspective we should keep this global CSS as minimal as possible. Typically,
    besides any requisite *reset* styles, there will be a default font-size, font-family
    and perhaps some default colours. These are styles that are usually applied to
    type selectors. Unless you have classes on the root HTML element of body for example.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然网页应用中大部分的CSS可以描述为基于模块的，但我们需要处理的全局CSS也是不可避免的。从ECSS的角度来看，我们应该尽量保持全局CSS的最小化。通常，除了任何必需的*重置*样式之外，还会有默认的字体大小、字体系列，也许还有一些默认的颜色。这些样式通常应用于类型选择器。除非你在根HTML元素或者body上有类。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are looking for a base set of reset styles for a web application you
    may find my *App Reset* CSS useful. You can find it on GitHub here: [https://github.com/benfrain/app-reset](https://github.com/benfrain/app-reset) 
    or install via NPM with `npm install app-reset`.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找一个网页应用的基本重置样式集，你可能会发现我的*App Reset* CSS很有用。你可以在GitHub上找到它：[https://github.com/benfrain/app-reset](https://github.com/benfrain/app-reset)，或者通过NPM安装`npm
    install app-reset`。
- en: There may also be some global structure needed. For example, if you have a common
    structure throughout your application (header, footer, sidebar etc), you may want
    to create some selectors to reflect this. In the past I have used a `.st-` or
    `.sw-` micro-namespace to define *Structure* or *Site Wide* but you can use whatever
    is most apt for you. However, my advice would be that there really shouldn't be
    many of these selectors as these typically relate to very broad areas that all
    the modules of an application should live within.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还需要一些全局结构。例如，如果你的应用程序中有一个常见的结构（头部、页脚、侧边栏等），你可能希望创建一些选择器来反映这一点。过去，我曾经使用`.st-`或`.sw-`微命名空间来定义*结构*或*站点范围*，但你可以使用最适合你的任何东西。然而，我的建议是，这些选择器实际上不应该有很多，因为这些通常涉及到应用程序的所有模块应该存在的非常广泛的领域。
- en: In terms of organising global CSS I currently favour a folder in the root of
    any project called `globalCSS`. In that folder would be any variables, mixins,
    global image assets, any font or icon-font files, a basic CSS reset file and any
    global CSS needed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织全局CSS方面，我目前更倾向于在任何项目的根目录下创建一个名为`globalCSS`的文件夹。在那个文件夹里会有任何变量、混合、全局图像资源、任何字体或图标字体文件，一个基本的CSS重置文件和任何需要的全局CSS。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We've looked at the two principal ways you might apply ECSS in this chapter.
    We've also considered a possible folder structure for a complete and more complicated
    module. I'm hopeful that by this point, you'll have a fair idea of how you might
    apply ECSS in your projects.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看过了你可能在项目中应用ECSS的两种主要方式。我们还考虑了一个完整和更复杂的模块可能的文件夹结构。我希望到这一点，你已经对如何在你的项目中应用ECSS有了一个大致的想法。
- en: Hand-in-hand with the architectural approach of implementing CSS is the practice
    of actually authoring your style sheets. You know, how the code actually looks
    in the editor. The code samples throughout this book have been demonstrating this
    syntax but it's time now to delve into it in more detail.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与实施CSS的架构方法相辅相成的是实际编写样式表的实践。你知道，在编辑器中代码实际上是什么样子的。本书中的代码示例一直在演示这种语法，但现在是时候更详细地深入研究了。
- en: How to best author style sheets to put all this ECSS malarkey into practice
    is what we will look at in the next chapter.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如何最好地编写样式表来实践所有这些ECSS的花哨东西，这将是我们在下一章中要讨论的内容。
