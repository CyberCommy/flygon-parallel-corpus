- en: 2\. Kubernetes on Azure (AKS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing and maintaining Kubernetes clusters correctly and securely is difficult.
    Thankfully, all the major cloud providers, such as Azure, AWS, and Google Cloud
    Platform (GCP), facilitate installing and maintaining clusters. In this chapter,
    you will navigate through the Azure portal, launch your own cluster, and run a
    sample application. All of this will be accomplished from your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Azure free account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating the Azure portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching your first cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting your first application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start by looking at the different ways to create an AKS cluster, and then
    run our sample application.
  prefs: []
  type: TYPE_NORMAL
- en: Different ways to deploy an AKS cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This chapter will introduce the graphical way to deploy your AKS cluster. There
    are, however, multiple ways to create your AKS cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using the portal**: The portal gives you a graphical way of deploying your
    cluster through a wizard. This is a great way to deploy your first cluster. For
    multiple deployments or automated deployments, one of the following methods is
    recommended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using the Azure CLI**: The Azure **command-line interface** (**CLI**) is
    a cross-platform CLI for managing Azure resources. This allows you to script your
    cluster deployment, which can be integrated into other scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Azure PowerShell**: Azure PowerShell is a set of PowerShell commands
    for managing Azure resources directly from PowerShell. It can also be used to
    create Kubernetes clusters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using ARM templates**: **Azure Resource Manager** (**ARM**) templates are
    an Azure-native **infrastructure-as-code** (**IaC**) language. They allow you
    to declaratively deploy your cluster. This allows you to create a template that
    can be reused by multiple teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using Terraform for Azure**: Terraform is an open-source IaC tool developed
    by HashiCorp. The tool is very popular in the open-source community to deploy
    cloud resources, including AKS. Like ARM templates, Terraform also uses declarative
    templates for your cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will be creating our cluster using the Azure portal. If
    you are interested in deploying a cluster using either the CLI, ARM, or Terraform,
    the Azure documentation contains steps on how to use these tools to create your
    clusters at [https://docs.microsoft.com/azure/aks](https://docs.microsoft.com/azure/aks).
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the Azure portal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start our initial cluster deployment using the Azure portal. The Azure
    portal is a web-based management console. It allows you to build, manage, and
    monitor all your Azure deployments worldwide through a single console.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To follow along with the examples in this book, you need an Azure account. If
    you do not have an Azure account, you can create a free account by following the
    steps at [azure.microsoft.com/free](http://azure.microsoft.com/free). If you plan
    to run this in an existing subscription, you will need owner rights to the subscription
    and the ability to create service principals in **Azure Active Directory** (**Azure
    AD**).
  prefs: []
  type: TYPE_NORMAL
- en: All the examples in this book have been verified with a free trial account.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to jump straight in by creating our **Azure Kubernetes Service**
    (**AKS**) cluster. By doing so, we are also going to familiarize ourselves with
    the Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first AKS cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter the `aks` keyword in the search bar at the top of the Azure portal. Click
    on **Kubernetes services** under the **Services** category in the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking for Kubernetes services in the Services category by searching for
    aks in the search bar at the top.](image/Figure_2.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Searching for AKS with the search bar'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This will take you to the AKS blade in the portal. As you might have expected,
    you don''t have any clusters yet. Go ahead and create a new cluster by hitting
    the **+ Add** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting the Add button in the topleft, within the AKS blade, to start the
    cluster creation process.](image/Figure_2.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Clicking on the "+ Add" button to start the cluster creation process'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are a lot of options to configure when creating your AKS cluster. For
    your first cluster, we recommend sticking with the defaults from the portal, and
    following our naming guidelines during this example. The following settings were
    tested by us to work reliably with a free account.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will take you through the creation wizard to create your first AKS cluster.
    The first step here is to create a new resource group. Hit the **Create new**
    button, give your resource a name, and hit **OK**. If you want to follow the examples
    in this book, please give the resource group the name `rg-handsonaks`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Process showing how to create a new resource group in the AKS blade. Step
    1 is selecting the Create New link, step 2 is entering in the name of the resource
    group (rg-handsonaks in this case), and step 3 is selecting OK.](image/Figure_2.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: Creating a new resource group'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Next up, we''ll provide our cluster details. Give your cluster a name â€“ if
    you want to follow the examples in the book, please call it `handsonaks`. The
    region we will use in the book is `(US) West US 2`, but you could use any other
    region of choice close to your location. We will use Kubernetes version `1.15.7`,
    but don''t worry if that version is not available for you. Kubernetes and AKS
    evolve very quickly, and new versions are introduced often. Next, you''ll need
    to provide a DNS name prefix. This does not have to be unique since Azure will
    append this with random characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Entering the cluster details,such as the Kubernetes cluster name, region,
    Kubernetes version, and DNS name prefix.](image/Figure_2.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Providing the cluster details'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Next, we will need to change the node size and node count. To optimize our free
    budget for our sample cluster, we will use a **virtual machine** (**VM**) with
    one core without premium storage and deploy a two-node cluster. If you are not
    using the free trial, you could choose a more powerful VM size, although this
    is not required for the labs in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit the **Change size** button below the machine size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Change size option to select a smaller machine.](image/Figure_2.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: Clicking on the ''Change size'' option to select a smaller machine'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Remove the filter that looks for premium storage and look for **D1_v2**. Then
    change the slider for **Node count** to **2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![After navigating to the change size option, remove the filter that looks
    for premium storage and select the D1_v2 machine type.](image/Figure_2.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Selecting D1_v2 as the machine size'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This should make your cluster size look similar to that shown in *Figure 2.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the slider to change node count to 2 nodes. Also, node size was successfully
    changed to D1 v2.](image/Figure_2.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Updated Node size and Node count'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Your free account has a four-core limit that will be violated if we go with
    the defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final view of the first blade should look like *Figure 2.8*. There are
    a number of other configuration options that we will not change for our demo cluster.
    Since we are ready, hit the **Review + create** button now to do a final review
    and create your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The basic tab within the first blade showing the cluster details for creating
    the cluster configuration.](image/Figure_2.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: Setting the cluster configuration'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'On the final view, Azure will validate the configuration that was applied to
    your first cluster. If the validation passed, click on **Create**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Azure portal providing the final validation of your cluster configuration
    and displaying all the cluster details before you hit the create button at the
    bottom left to create the cluster.](image/Figure_2.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: The final validation of your cluster configuration'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Deploying your cluster should take roughly 15 minutes. Once the deployment
    is complete, you can check the deployment details as shown in *Figure 2.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The microsoft.aks overview window showing the deployment details after the
    cluster is successfully deployed.](image/Figure_2.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Deployment details once the cluster is successfully deployed'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you get a quota limitation error, as shown in *Figure 2.11*, check the settings
    and try again. Make sure that you selected the **D1_v2** node size and only two
    nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The overview window showing the error details and the error summary. Here,
    the error message says: The resource operation completed with terminal provisioning
    state ''Failed''.](image/Figure_2.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: Retrying with a smaller cluster size due to a quota limit error'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To move to the next section, in which we'll have a quick look at our cluster,
    hit the **Go to resource** button, which will take you to the AKS blade in the
    portal.
  prefs: []
  type: TYPE_NORMAL
- en: A quick overview of your cluster in the Azure portal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you hit the **Go to resource** button in the previous section, you should
    now see the overview of your cluster in the Azure portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Overview tab of the AKS blade in the Azure portal displaying the details
    of the cluster deployed. In the left-hand pane, there are useful blades such as
    Overview, Node pools, Upgrade, and Insights.](image/Figure_2.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: The AKS blade in the Azure portal'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This is a quick overview of your cluster. It provides the name, the location,
    and the API server address. The left-hand navigation menu provides different options
    to control and manage your cluster. Let's walk through a couple of interesting
    options the portal offers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first interesting option is the **Node pools** option. In the node pools
    view, you scale your existing node pool (meaning the nodes or servers in your
    cluster) either up or down by adding or removing nodes; you can add a new node
    pool, potentially with a different server size, and you can also upgrade your
    node pools individually. In *FigureÂ 2.13*, you can see the **Add node pool** option
    at the top left, and the options to **Scale** or **Upgrade** in the menu on the
    right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Node Pools blade shows you howto add node pools and provides a drop-down
    menu to scale and upgrade existing ones.](image/Figure_2.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: Adding, scaling, and upgrading node pools'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The second interesting blade is the **Upgrade** blade. Here, you can instruct
    AKS to upgrade the management plane to a newer version. Typically, in a Kubernetes
    upgrade, you first upgrade the master plane, and then the individual node pools
    separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Upgrade blade has the option to upgrade the Kubernetes version of the
    API server.](image/Figure_2.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: Upgrading the Kubernetes version of the API sever using the Upgrade
    blade'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The final interesting place to investigate is **Insights**. The **Insights**
    option provides you with monitoring of your cluster infrastructure and the workloads
    running on your cluster. Since our cluster is brand new, there isn''t a lot of
    data to investigate. We will return here later in *Chapter 7*, Monitoring the
    AKS cluster and the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Insights blade shows your cluster utilization. This will be explored
    in detail in Chapter 7, Monitoring the AKS cluster and the application.](image/Figure_2.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: Displaying cluster utilization using the Insights blade'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This concludes our quick overview of the cluster and some of the interesting
    configuration options in the Azure portal. In the next section, we'll connect
    to our AKS cluster using Cloud Shell and then launch a demo application on top
    of our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing your cluster using Azure Cloud Shell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the deployment is completed successfully, find the small Cloud Shell icon
    near the search bar, as highlighted in *Figure 2.16*, and click it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the Azure Cloud Shell by clicking the Cloud Shell icon at the top,
    next to the search bar.](image/Figure_2.16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: Clicking the Cloud Shell icon to open Azure Cloud Shell'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The portal will ask you to select either PowerShell or Bash as your default
    shell experience. As we will be working with mainly Linux workloads, please select
    **Bash**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting the Bash option to follow the examples in this book.](image/Figure_2.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.17: Selecting the Bash option'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If this is the first time you have launched Cloud Shell, you will be asked to
    create a storage account; confirm and create it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might get an error message that contains a mount storage error. If that
    error occurs, please restart your Cloud Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example showing a warning message saying "Failed to mount the Azure file
    share. Your cloud drive won''t be available". This can be solved by selecting
    the restart button on the top of Cloud Shell.](image/Figure_2.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.18: Hitting the restart button on getting a mount storage error'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click on the power button. It should restart, and you should see something
    similar to *Figure 2.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Cloud Shell launches successfully after we restart Bash by selecting
    the power button.](image/Figure_2.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.19: Launching Cloud Shell successfully'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can pull the splitter/divider up or down to see more or less of the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The divider for the Cloud Shell window is indicated by three dots that can
    be used to make the Cloud Shell larger or smaller.](image/Figure_2.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.20: Using the divider to make the Cloud Shell larger or smaller'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The command-line tool that is used to interface with Kubernetes clusters is
    called `kubectl`. The benefit of using Azure Cloud Shell is that this tool, along
    with many others, comes preinstalled and is regularly maintained. `kubectl` uses
    a configuration file stored in `~/.kube/config` to store credentials to access
    your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is some discussion in the Kubernetes community around the correct pronunciation
    of `kubectl`. The common way to pronounce it is either kube-c-t-l, kube-control
    or kube-cuddle.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the required credentials to access your cluster, you need to type the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that you have access, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like *Figure 2.21*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output displaying the node details such asnode name, status, role, age, and
    version.](image/Figure_2.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.21: Output of the kubectl get nodes command'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This command has verified that we can connect to our AKS cluster. In the next
    section, we'll go ahead and launch our first application.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your first demo application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You are all connected. We are now going to launch our first application. In
    Cloud Shell, there are two options to edit code. You can do this either via command-line
    tools such as `vi` or `nano` or you can use a graphical code editor by typing
    the `code` command. We will be using the graphical editor in our examples but
    feel free to use the tool you feel most comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this book, all the code examples are hosted on a GitHub
    repository. You can clone this repository to your Cloud Shell and work with the
    code examples directly. To clone the GitHub repo into your Cloud Shell, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To access the code examples for this chapter, navigate into the directory of
    the code examples and go to the `Chapter02` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We will use the code directly there for now. At this point in the book, we will
    not focus on what is in the `YAML` files just yet. The goal of this chapter is
    to launch a cluster and deploy an application on top of it. In the following chapters,
    we will dive into how they are built and how you could create your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create an application based on the definition in the `azure-vote.yaml`
    file. To open that file in Cloud Shell, you can type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the code example for your convenience:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can make changes to files in the Cloud Shell code editor. If you''ve made
    changes, you can save them by clicking on the **...** icon in the right-hand corner,
    and then **Save** to save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code editor in the browser. Hit the three dots to save the file.](image/Figure_2.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.22: Hitting [...] to save the file'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The file should be saved. You can check this with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Note:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Hitting the *Tab* button expands the file name in Linux. In the preceding scenario,
    if you hit `Tab` after typing `az`, it should expand to `azure-vote.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s launch the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You should quickly see the output shown in *Figure 2.23* that tells you which
    resources have been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output of the kubectl create command displaying that the azure-vote-back
    and azure-vote-front deploymentsand the azure-vote-back and azure-vote-front serviceshave
    been created.](image/Figure_2.23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.23: Output of the kubectl create command'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can check the progress by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you typed this quickly, you might have seen that a certain pod was still
    in the `ContainerCreating` process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the progress of the pods within the cluster using the kubectl get
    pods -w command.](image/Figure_2.24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.24: Output of the kubectl get pods command'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Typing `kubectl` can become tedious. You can use the `alias` command to make
    your life easier. You can use `k` instead of `kubectl` as the alias with the following
    command: `alias k=kubectl`. After running the preceding command, you can just
    use `k get pods`. For instructional purposes in this book, we will continue to
    use the full `kubectl` command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit the up arrow key and press *Enter* until the status of all pods is `Running`.
    Setting up all the pods takes some time and you can follow their status using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To stop following the status of the pods (when they are all in a running state),
    you can press *Ctrl* + *C* (*command* + *C* on Mac).
  prefs: []
  type: TYPE_NORMAL
- en: In order to access our application publicly, we need to wait for one more thing.
    Now we want to know the public IP of the load balancer so that we can access it.
    If you remember from *Chapter 1, Introduction to Docker and Kubernetes*, a service
    in Kubernetes will create an Azure load balancer. This load balancer will get
    a public IP in our application so we can access it publicly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following command to get the public IP of the load balancer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'At first, the external IP might show `pending`. Wait for the public IP to appear
    and then press *Ctrl* + *C* (*command* + *C* on Mac) to exit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output of kubectl get service --watch. You can see the service IP change
    from pending to the actual IP address.](image/Figure_2.25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.25: Change in the service IP from pending to the actual IP address'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note the external IP address, and type it in a browser. You should see the
    output shown in *Figure 2.26*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The application is launched which contains three buttons(cats, dogs, and
    reset) along with the counts for cats and dogs at the bottom. On clicking cats
    and dogs the count goes up, and reset can be used to set the count to zero.](image/Figure_2.26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.26: The actual application you just launched'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Click on **Cats** or **Dogs** and watch the count go up.
  prefs: []
  type: TYPE_NORMAL
- en: You have now launched your own cluster and your first Kubernetes application.
    Note that Kubernetes took care of tasks such as connecting the front end and the
    back end, and exposing it to the outside world, as well as providing storage for
    the services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before moving on to the next chapter, we will clean up our deployment. Since
    we created everything from a file, we can also delete everything by pointing Kubernetes
    to that file. Type `kubectl delete -f azure-vote.yaml` and watch all your objects
    get deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output of the kubectl delete -f azure-vote.yaml command verifying that the
    deployments and services have beenremoved.](image/Figure_2.27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.27: Cleaning up the deployment'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this section, we have connected to our AKS cluster using Cloud Shell, successfully
    launched and connected to a demo application, and finally, cleaned up the resources
    that were created.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having completed this chapter, you are able to access and navigate the Azure
    portal to perform all the functions required to deploy an AKS cluster. You used
    the free trial on Azure to your advantage to learn the ins and outs of AKS and
    other Azure services. You launched your own AKS cluster with the ability to customize
    configurations if required using the Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: You also used Azure Cloud Shell without installing anything on your computer.
    This is important for all the upcoming sections, where you will be doing more
    than launching simple applications. Finally, you launched a publicly accessible
    service. The skeleton of this application is the same as for the complex applications
    that you will be launching in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take an in-depth look at different deployment options
    to deploy applications onto AKS.
  prefs: []
  type: TYPE_NORMAL
