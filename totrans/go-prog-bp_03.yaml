- en: Chapter 3. Three Ways to Implement Profile Pictures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。实现个人资料图片的三种方法
- en: So far, our chat application has made use of the OAuth2 protocol to allow users
    to sign in to our application so that we know who is saying what. In this chapter,
    we are going to add profile pictures to make the chatting experience more engaging.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的聊天应用程序已经使用了OAuth2协议，允许用户登录到我们的应用程序，以便我们知道谁在说什么。在本章中，我们将添加个人资料图片，使聊天体验更加引人入胜。
- en: 'We will look at the following ways to add pictures or avatars alongside the
    messages in our application:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究以下几种方法来在我们的应用程序中的消息旁边添加图片或头像：
- en: Using the avatar picture provided by the authentication server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用认证服务器提供的头像图片
- en: Using the [Gravatar.com](http://Gravatar.com) web service to look up a picture
    by the user's e-mail address
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[Gravatar.com](http://Gravatar.com)网络服务通过用户的电子邮件地址查找图片
- en: Allowing the user to upload their own picture and host it themselves
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户上传自己的图片并自行托管
- en: The first two options allow us to delegate the hosting of pictures to a third
    party—either an authentication service or [Gravatar.com](http://Gravatar.com)
    —which is great because it reduces the cost of hosting our application (in terms
    of storage costs and bandwidth, since the user's browsers will actually download
    the pictures from the servers of the authenticating service, not ours). The third
    option requires us to host pictures ourselves at a location that is web accessible.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个选项允许我们将图片的托管委托给第三方——要么是认证服务，要么是[Gravatar.com](http://Gravatar.com)——这很棒，因为它减少了我们应用程序的托管成本（存储成本和带宽成本，因为用户的浏览器实际上会从认证服务的服务器上下载图片，而不是我们自己的服务器）。第三个选项要求我们在可以通过web访问的位置托管图片。
- en: These options aren't mutually exclusive; you will most likely use some combination
    of them in a real-world production application. Towards the end of the chapter,
    we will see how the flexible design that emerges allows us to try each implementation
    in turn, until we find an appropriate avatar.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项并不是互斥的；在真实的生产应用程序中，您很可能会使用它们的某种组合。在本章结束时，我们将看到灵活的设计使我们能够依次尝试每种实现，直到找到合适的头像。
- en: We are going to be agile with our design throughout this chapter, doing the
    minimum work needed to accomplish each milestone. This means that at the end of
    each section, we will have working implementations that are demonstrable in the
    browser. This also means that we will refactor code as and when we need to and
    discuss the rationale behind the decisions we make as we go.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将灵活设计，尽量做到每个里程碑所需的最低工作量。这意味着在每个部分结束时，我们将拥有在浏览器中可演示的工作实现。这也意味着我们将根据需要重构代码，并讨论我们做出的决定背后的原因。
- en: 'Specifically, in this chapter, you will learn the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，您将学到以下内容：
- en: What are good practices to get additional information from authentication services,
    even when there are no standards in place
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使没有标准，也有哪些获取认证服务的额外信息的良好实践
- en: When it is appropriate to build abstractions into our code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时适合将抽象构建到我们的代码中
- en: How Go's zero-initialization pattern can save time and memory
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go的零初始化模式如何节省时间和内存
- en: How reusing an interface allows us to work with collections and individual objects
    in the same way as the existing interface did
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何重用接口使我们能够以与现有接口相同的方式处理集合和单个对象
- en: How to use the [Gravatar.com](http://Gravatar.com) web service
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用[Gravatar.com](http://Gravatar.com)网络服务
- en: How to do MD5 hashing in Go
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Go中进行MD5哈希
- en: How to upload files over HTTP and store them on a server
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过HTTP上传文件并将其存储在服务器上
- en: How to serve static files through a Go web server
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过Go web服务器提供静态文件
- en: How to use unit tests to guide the refactoring of code
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用单元测试指导代码重构
- en: How and when to abstract functionality from `struct` types into interfaces
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时以及如何将`struct`类型的功能抽象为接口
- en: Avatars from the authentication server
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证服务器的头像
- en: It turns out that most authentication servers already have images for their
    users, and they make them available through the protected user resource that we
    already know how to access in order to get our users' names. To use this avatar
    picture, we need to get the URL from the provider, store it in the cookie for
    our user, and send it through a web socket so that every client can render the
    picture alongside the corresponding message.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，大多数认证服务器已经为其用户准备了图片，并通过我们已经知道如何访问的受保护用户资源使其可用。要使用这个头像图片，我们需要从提供者那里获取URL，将其存储在我们用户的cookie中，并通过web套接字发送，以便每个客户端可以在相应的消息旁边呈现图片。
- en: Getting the avatar URL
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取头像URL
- en: The schema for user or profile resources is not part of the OAuth2 spec, which
    means that each provider is responsible for deciding how to represent that data.
    Indeed, providers do things differently, for example, the avatar URL in a GitHub
    user resource is stored in a field called `avatar_url` , whereas in Google, the
    same field is called `picture` . Facebook goes even further by nesting the avatar
    URL value in a `url` field inside an object called `picture` . Luckily, Gomniauth
    abstracts this for us; its `GetUser` call on a provider standardizes the interface
    to get common fields.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用户或个人资料资源的架构不是OAuth2规范的一部分，这意味着每个提供者都负责决定如何表示这些数据。事实上，提供者的做法各不相同，例如，GitHub用户资源中的头像URL存储在名为`avatar_url`的字段中，而在Google中，相同的字段称为`picture`。Facebook甚至通过在名为`picture`的对象内嵌套头像URL值的`url`字段来进一步进行。幸运的是，Gomniauth为我们抽象了这一点；它在提供者上的`GetUser`调用标准化了获取常见字段的接口。
- en: 'In order to make use of the avatar URL field, we need to go back and store
    its information in our cookie. In `auth.go` , look inside the `callback` action
    switch case and update the code that creates the `authCookieValue` object as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用头像URL字段，我们需要回去并将其信息存储在我们的cookie中。在`auth.go`中，查看`callback`操作开关情况，并更新创建`authCookieValue`对象的代码如下：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `AvatarURL` method called in the preceding code will return the appropriate
    URL value which we then store in the `avatar_url` field which will be stored in
    the cookie.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中调用的`AvatarURL`方法将返回适当的URL值，然后我们将其存储在`avatar_url`字段中，该字段将存储在cookie中。
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Gomniauth defines a `User` type of interface and each provider implements their
    own version. The generic `map[string]interface{}` data returned from the authentication
    server is stored inside each object, and the method calls access the appropriate
    value using the right field name for that provider. This approach—describing the
    way information is accessed without being strict about implementation details—is
    a great use of interfaces in Go.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Gomniauth定义了一个接口类型的`User`，每个提供者都实现了自己的版本。从认证服务器返回的通用`map[string]interface{}`数据存储在每个对象内，方法调用使用适当的字段名访问相应的值。这种方法描述了访问信息的方式，而不严格关注实现细节，是Go中接口的一个很好的用法。
- en: Transmitting the avatar URL
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输头像URL
- en: 'We need to update our `message` type so that it can also carry with it the
    avatar URL. In `message.go` , add the `AvatarURL` string field:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新我们的`message`类型，以便它也可以携带头像URL。在`message.go`中，添加`AvatarURL`字符串字段：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So far, we have not actually assigned a value to `AvatarURL` like we do for
    the `Name` field, so we must update our `read` method in `client.go` :'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们实际上还没有为`AvatarURL`分配一个值，就像我们为`Name`字段所做的那样，因此我们必须更新`client.go`中的`read`方法：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: All we have done here is we took the value from the `userData` field that represents
    what we put into the cookie and assigned it to the appropriate field in `message`
    if the value was present in the map. We will now take the additional step of checking
    whether the value is present because we cannot guarantee that the authentication
    service will provide a value for this field. And since it could be `nil` , it
    might cause a panic to assign it to a `string` type if it's actually missing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的一切就是从`userData`字段中取出代表我们放入cookie的值，并将其分配给`message`中的适当字段，如果该值在映射中存在的话。我们现在将进一步检查该值是否存在，因为我们不能保证认证服务将为此字段提供一个值。并且由于它可能是`nil`，如果它实际上缺失，将其分配给`string`类型可能会导致恐慌。
- en: Adding the avatar to the user interface
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将头像添加到用户界面
- en: 'Now that our JavaScript client gets an avatar URL value via the socket, we
    can use it to display the image alongside the messages. We do this by updating
    the `socket.onmessage` code in `chat.html` :'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的JavaScript客户端通过套接字获取了一个头像URL值，我们可以使用它来在消息旁边显示图像。我们通过更新`chat.html`中的`socket.onmessage`代码来实现这一点：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When we receive a message, we will insert an `img` tag with the source set to
    the `AvatarURL` field from the message. We will use jQuery's `css` method to force
    a width of `50` pixels. This protects us from massive pictures spoiling our interface
    and allows us to align the image to the middle of the surrounding text.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们收到一条消息时，我们将插入一个`img`标签，其中源设置为消息的`AvatarURL`字段。我们将使用jQuery的`css`方法强制宽度为`50`像素。这可以防止大图片破坏我们的界面，并允许我们将图像对齐到周围文本的中间。
- en: If we build and run our application having logged in with a previous version,
    you will find that the `auth` cookie that doesn't contain the avatar URL is still
    there. We are not asked to sign in again (since we are already logged in), and
    the code that adds the `avatar_url` field never gets a chance to run. We could
    delete our cookie and refresh the page, but we would have to keep doing so whenever
    we make changes during development. Let's solve this problem properly by adding
    a logout feature.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用先前版本登录后构建和运行我们的应用程序，你会发现不包含头像URL的`auth` cookie仍然存在。我们不会被要求重新登录（因为我们已经登录了），添加`avatar_url`字段的代码也永远不会运行。我们可以删除cookie并刷新页面，但是在开发过程中每次进行更改时都需要这样做。让我们通过添加注销功能来正确解决这个问题。
- en: Logging out
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注销
- en: 'The simplest way to log a user out is to get rid of the `auth` cookie and redirect
    the user to the chat page, which will in turn cause a redirect to the login page
    since we just removed the cookie. We do this by adding a new `HandleFunc` call
    to `main.go` :'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注销用户的最简单方法是删除`auth` cookie并将用户重定向到聊天页面，这将导致重定向到登录页面，因为我们刚刚删除了cookie。我们通过在`main.go`中添加一个新的`HandleFunc`调用来实现这一点：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding handler function uses `http.SetCookie` to update the cookie setting
    `MaxAge` to `-1` , which indicates that it should be deleted immediately by the
    browser. Not all browsers are forced to delete the cookie, which is why we also
    provide a new `Value` setting of an empty string, thus removing the user data
    that would previously have been stored.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的处理函数使用`http.SetCookie`来更新`MaxAge`设置为`-1`的cookie设置，这表示它应该立即被浏览器删除。并非所有浏览器都被强制删除cookie，这就是为什么我们还提供了一个新的`Value`设置为空字符串的设置，从而删除以前存储的用户数据。
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'As an additional assignment, you can bulletproof your app a little by updating
    the first line in `ServeHTTP` for your `authHandler` in `auth.go` to make it cope
    with the empty-value case as well as the missing-cookie case:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的任务，你可以通过更新`auth.go`中`authHandler`的`ServeHTTP`的第一行来使其适应空值情况以及缺少cookie的情况，从而使你的应用程序更加健壮：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Instead of ignoring the return of `r.Cookie` , we keep a reference to the returned
    cookie (if there was actually one) and also add an additional check to see whether
    the `Value` string of the cookie is empty or not.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忽略`r.Cookie`的返回，我们保留返回的cookie的引用（如果实际上有的话），并添加额外的检查，看看cookie的`Value`字符串是否为空。
- en: 'Before we continue, let''s add a `Sign Out` link to make it even easier to
    get rid of the cookie, and also to allow our users to log out. In `chat.html`
    , update the `chatbox` form to insert a simple HTML link to the new `/logout`
    handler:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们添加一个“登出”链接，以便更轻松地删除cookie，并允许我们的用户注销。在`chat.html`中，更新`chatbox`表单，插入一个简单的HTML链接到新的`/logout`处理程序：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now build and run the application and open a browser to `localhost:8080/chat`
    :'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建并运行应用程序，并在浏览器中打开`localhost:8080/chat`：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Log out if you need to and log back in. When you click on **Send** , you will
    see your avatar picture appear next to your messages.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，注销并重新登录。当您点击**发送**时，您将看到您的头像图片出现在您的消息旁边。
- en: '![Logging out](img/Image00007.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![注销](img/Image00007.jpg)'
- en: Making things prettier
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使事情更美观
- en: 'Our application is starting to look a little ugly, and it''s time to do something
    about it. In the previous chapter, we implemented the Bootstrap library into our
    login page, and we are now going to extend its use to our chat page. We will make
    three changes in `chat.html` : include Bootstrap and tweak the CSS styles for
    our page, change the markup for our form, and tweak how we render messages on
    the page.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序开始看起来有点丑陋，是时候做点什么了。在上一章中，我们将Bootstrap库引入了我们的登录页面，现在我们将扩展其用途到我们的聊天页面。我们将在`chat.html`中进行三处更改：包括Bootstrap并调整页面的CSS样式，更改我们表单的标记，并调整我们在页面上呈现消息的方式。
- en: 'First, let''s update the `style` tag at the top of the page and insert a `link`
    tag above it to include Bootstrap:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们更新页面顶部的`style`标签，并在其上插入一个`link`标签以包含Bootstrap：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, let''s replace the markup at the top of the `body` tag (before the `script`
    tags) with the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们用以下代码替换`body`标签顶部的标记（在`script`标签之前）：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This markup follows Bootstrap standards of applying appropriate classes to various
    items, for example, the `form-control` class neatly formats elements within `form`
    (you can check out the Bootstrap documentation for more information on what these
    classes do).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标记遵循Bootstrap标准，将适当的类应用于各种项目，例如，`form-control`类可以整洁地格式化`form`中的元素（您可以查看Bootstrap文档，了解这些类的更多信息）。
- en: 'Finally, let''s update our `socket.onmessage` JavaScript code to put the sender''s
    name as the `title` attribute for our image. This makes our app display the image
    when you hover the mouse over it rather than displaying it next to every message:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们更新我们的`socket.onmessage` JavaScript代码，将发送者的名称作为我们图像的`title`属性。这样，当您将鼠标悬停在图像上时，我们的应用程序将显示图像，而不是在每条消息旁边显示它：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Build and run the application and refresh your browser to see whether a new
    design appears:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用程序，刷新浏览器，看看是否出现新的设计：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding command shows the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令显示以下输出：
- en: '![Making things prettier](img/Image00008.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![使事情更美观](img/Image00008.jpg)'
- en: With relatively few changes to the code, we have dramatically improved the look
    and feel of our application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对代码进行相对较少的更改，我们大大改善了应用程序的外观和感觉。
- en: Implementing Gravatar
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Gravatar
- en: Gravatar is a web service that allows users to upload a single profile picture
    and associate it with their e-mail address to make it available from any website.
    Developers, like us, can access those images for our application, just by performing
    a `GET` operation on a specific API endpoint. In this section, we will see how
    to implement Gravatar rather than use the picture provided by the authentication
    service.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Gravatar是一个网络服务，允许用户上传单个个人资料图片，并将其与其电子邮件地址关联，以便从任何网站获取。像我们这样的开发人员可以通过在特定API端点上执行`GET`操作来访问这些图像，用于我们的应用程序。在本节中，我们将看到如何实现Gravatar，而不是使用认证服务提供的图片。
- en: Abstracting the avatar URL process
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象化头像URL过程
- en: Since we have three different ways of obtaining the avatar URL in our application,
    we have reached the point where it would be sensible to learn how to abstract
    the functionality in order to cleanly implement the options. Abstraction refers
    to a process in which we separate the idea of something from its specific implementation.
    `http.Handler` is a great example of how a handler will be used along with its
    ins and outs, without being specific about what action is taken by each handler.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序有三种不同的获取头像URL的方式，我们已经达到了一个合理的学习如何将功能抽象化以清晰地实现这些选项的点。抽象化是指我们将某物的概念与其具体实现分离的过程。`http.Handler`是一个很好的例子，它展示了如何使用处理程序以及其细节，而不具体说明每个处理程序采取的操作。
- en: 'In Go, we start to describe our idea of getting an avatar URL by defining an
    interface. Let''s create a new file called `avatar.go` and insert the following
    code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，我们开始通过定义一个接口来描述获取头像URL的想法。让我们创建一个名为`avatar.go`的新文件，并插入以下代码：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `Avatar` interface describes the `GetAvatarURL` method that a type must
    satisfy in order to be able to get avatar URLs. We took the client as an argument
    so that we know for which user to return the URL. The method returns two arguments:
    a string (which will be the URL if things go well) and an error in case something
    goes wrong.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`Avatar`接口描述了一个类型必须满足的`GetAvatarURL`方法，以便能够获取头像URL。我们将客户端作为参数，以便知道为哪个用户返回URL。该方法返回两个参数：一个字符串（如果一切顺利，将是URL），以及一个错误，以防出现问题。'
- en: One of the things that could go wrong is simply that one of the specific implementations
    of `Avatar` is unable to get the URL. In that case, `GetAvatarURL` will return
    the `ErrNoAvatarURL` error as the second argument. The `ErrNoAvatarURL` error
    therefore becomes a part of the interface; it's one of the possible returns from
    the method and something that users of our code should probably explicitly handle.
    We mention this in the comments part of the code for the method, which is the
    only way to communicate such design decisions in Go.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可能出错的一件事是`Avatar`的特定实现之一无法获取URL。在这种情况下，`GetAvatarURL`将作为第二个参数返回`ErrNoAvatarURL`错误。因此，`ErrNoAvatarURL`错误成为接口的一部分；它是该方法可能返回的一个可能值，也是我们代码的用户可能需要明确处理的内容。我们在方法的注释部分提到了这一点，这是在Go中传达这种设计决策的唯一方式。
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Because the error is initialized immediately using `errors.New` and stored in
    the `ErrNoAvatarURL` variable, only one of these objects will ever be created;
    passing the pointer of the error as a return is very inexpensive. This is unlike
    Java's checked exceptions—which serve a similar purpose—where expensive exception
    objects are created and used as part of the control flow.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因为错误是立即使用`errors.New`初始化并存储在`ErrNoAvatarURL`变量中的，所以只会创建一个这样的对象；将错误的指针作为返回传递是非常廉价的。这与Java的检查异常不同，后者用作控制流的一部分时会创建并使用昂贵的异常对象。
- en: The authentication service and avatar's implementation
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证服务和头像的实现
- en: 'The first implementation of `Avatar` we write will replace the existing functionality
    where we hardcoded the avatar URL obtained from the authentication service. Let''s
    use a **Test-driven Development** ( **TDD** ) approach so we can be sure our code
    works without having to manually test it. Let''s create a new file called `avatar_test.go`
    in the `chat` folder:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的第一个`Avatar`实现将替换现有的功能，其中我们硬编码了从认证服务获取的头像URL。让我们使用**测试驱动开发**（**TDD**）的方法，这样我们就可以确保我们的代码可以正常工作，而不必手动测试。让我们在`chat`文件夹中创建一个名为`avatar_test.go`的新文件：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This test file contains a test for our as-of-yet nonexistent `AuthAvatar` type's
    `GetAvatarURL` method. First, it uses a client with no user data and ensures that
    the `ErrNoAvatarURL` error is returned. After setting a suitable value, our test
    calls the method again—this time to assert that it returns the correct value.
    However, building this code fails because the `AuthAvatar` type doesn't exist,
    so we'll declare `authAvatar` next.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试文件包含了我们尚不存在的`AuthAvatar`类型的`GetAvatarURL`方法的测试。首先，它使用一个没有用户数据的客户端，并确保返回`ErrNoAvatarURL`错误。在设置合适的值之后，我们的测试再次调用该方法，这次是为了断言它返回正确的值。然而，构建这段代码失败了，因为`AuthAvatar`类型不存在，所以我们将接下来声明`authAvatar`。
- en: Before we write our implementation, it's worth noticing that we only declare
    the `authAvatar` variable as the `AuthAvatar` type, but never actually assign
    anything to it so its value remains `nil` . This is not a mistake; we are actually
    making use of Go's zero-initialization (or default initialization) capabilities.
    Since there is no state needed for our object (we will pass `client` as an argument),
    there is no need to waste time and memory on initializing an instance of it. In
    Go, it is acceptable to call a method on a `nil` object, provided that the method
    doesn't try to access a field. When we actually come to writing our implementation,
    we will look at a way in which we can ensure this is the case.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写我们的实现之前，值得注意的是，我们只声明了`authAvatar`变量作为`AuthAvatar`类型，但实际上从未给它赋值，所以它的值保持为`nil`。这不是一个错误；我们实际上正在利用Go的零初始化（或默认初始化）能力。由于我们的对象不需要状态（我们将`client`作为参数传递），因此没有必要在初始化一个实例上浪费时间和内存。在Go中，可以在`nil`对象上调用方法，前提是该方法不会尝试访问字段。当我们实际编写我们的实现时，我们将考虑一种方法，以确保这种情况成立。
- en: 'Let''s head back over to `avatar.go` and make our test pass. Add the following
    code to the bottom of the file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`avatar.go`，让我们的测试通过。在文件底部添加以下代码：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we define our `AuthAvatar` type as an empty struct and define the implementation
    of the `GetAvatarURL` method. We also create a handy variable called `UseAuthAvatar`
    that has the `AuthAvatar` type but which remains of `nil` value. We can later
    assign the `UseAuthAvatar` variable to any field looking for an `Avatar` interface
    type.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将我们的`AuthAvatar`类型定义为空结构，并定义`GetAvatarURL`方法的实现。我们还创建了一个方便的变量`UseAuthAvatar`，它具有`AuthAvatar`类型，但其值保持为`nil`。我们以后可以将`UseAuthAvatar`变量分配给任何寻找`Avatar`接口类型的字段。
- en: Normally, the receiver of a method (the type defined in parentheses before the
    name) will be assigned to a variable so that it can be accessed in the body of
    the method. Since, in our case, we assume the object can have `nil` value, we
    can use an underscore to tell Go to throw away the reference. This serves as an
    added reminder to ourselves that we should avoid using it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，方法的接收器（在名称之前括号中定义的类型）将被分配给一个变量，以便在方法体中访问它。由于在我们的情况下，我们假设对象可以具有`nil`值，我们可以使用下划线告诉Go丢弃引用。这也作为一个额外的提醒，告诉我们自己应该避免使用它。
- en: 'The body of our implementation is otherwise relatively simple: we are safely
    looking for the value of `avatar_url` and ensuring it is a string before returning
    it. If anything fails along the way, we return the `ErrNoAvatarURL` error as defined
    in the interface.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实现主体在其他方面相对简单：我们安全地寻找`avatar_url`的值，并确保它是一个字符串，然后将其返回。如果沿途出现任何问题，我们将返回接口中定义的`ErrNoAvatarURL`错误。
- en: 'Let''s run the tests by opening a terminal and then navigating to the `chat`
    folder and typing the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过打开终端并导航到`chat`文件夹，然后输入以下内容来运行测试：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: All being well, our tests will pass and we will have successfully created our
    first `Avatar` implementation.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们的测试将通过，我们将成功创建我们的第一个`Avatar`实现。
- en: Using an implementation
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用一个实现
- en: When we use an implementation, we could refer to either the helper variables
    directly or create our own instance of the interface whenever we need the functionality.
    However, this would defeat the very object of the abstraction. Instead, we use
    the `Avatar` interface type to indicate where we need the capability.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用一个实现时，我们可以直接引用辅助变量，或者在需要功能时创建自己的接口实例。然而，这样做会违背抽象的初衷。相反，我们使用`Avatar`接口类型来指示我们需要的功能的位置。
- en: 'For our chat application, we will have a single way to obtain an avatar URL
    per chat room. So let''s update the `room` type so it can hold an `Avatar` object.
    In `room.go` , add the following field definition to the type `room struct` :'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的聊天应用程序，我们将有一种方法来获取每个聊天室的头像URL。所以让我们更新`room`类型，使其可以保存一个`Avatar`对象。在`room.go`中，向`room
    struct`类型的字段定义中添加以下内容：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Update the `newRoom` function so we can pass in an `Avatar` implementation
    for use; we will just assign this implementation to the new field when we create
    our `room` instance:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`newRoom`函数，以便我们可以传入一个`Avatar`实现来使用；当我们创建我们的`room`实例时，我们将简单地将这个实现分配给新字段：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Building the project now will highlight the fact that the call to `newRoom`
    in `main.go` is broken because we have not provided an `Avatar` argument; let''s
    update it by passing in our handy `UseAuthAvatar` variable as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建项目将突出显示`main.go`中对`newRoom`的调用是错误的，因为我们没有提供`Avatar`参数；让我们通过传入我们方便的`UseAuthAvatar`变量来更新它：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We didn't have to create an instance of `AuthAvatar` , so no memory was allocated.
    In our case, this doesn't result in great savings (since we only have one room
    for our whole application), but imagine the size of the potential savings if our
    application has thousands of rooms. The way we named the `UseAuthAvatar` variable
    means that the preceding code is very easy to read and it also makes our intention
    obvious.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必创建`AuthAvatar`的实例，因此没有分配内存。在我们的情况下，这并不会带来很大的节省（因为我们的整个应用程序只有一个房间），但是想象一下，如果我们的应用程序有成千上万个房间，潜在的节省规模是多么庞大。我们命名`UseAuthAvatar`变量的方式意味着前面的代码非常容易阅读，也使我们的意图明显。
- en: Tip
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Thinking about code readability is important when designing interfaces. Consider
    a method that takes a Boolean input—just passing in true or false hides the real
    meaning if you don''t know the argument names. Consider defining a couple of helper
    constants as in the following short example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计接口时考虑代码的可读性是很重要的。考虑一个接受布尔输入的方法——如果你不知道参数名称，只传递true或false会隐藏真正的含义。考虑定义一些辅助常量，如以下简短示例中所示：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Think about which of the following calls to `move` are easier to understand:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下以下对`move`的调用哪一个更容易理解：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'All that is left now is to change `client` to use our new `Avatar` interface.
    In `client.go` , update the `read` method as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在剩下的就是将`client`更改为使用我们的新`Avatar`接口。在`client.go`中，更新`read`方法如下：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we are asking the `avatar` instance on `room` to get the avatar URL for
    us instead of extracting it from `userData` ourselves.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们要求`room`上的`avatar`实例为我们获取头像URL，而不是从`userData`中提取它。
- en: When you build and run the application, you will notice that (although we have
    refactored things a little) the behavior and user experience hasn't changed at
    all. This is because we told our room to use the `AuthAvatar` implementation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建和运行应用程序时，您会注意到（尽管我们稍微重构了一些东西），行为和用户体验根本没有改变。这是因为我们告诉我们的房间使用`AuthAvatar`实现。
- en: Now let's add another implementation to the room.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们向房间添加另一个实现。
- en: Gravatar implementation
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gravatar实现
- en: 'The Gravatar implementation in `Avitar` will do the same job as the `AuthAvatar`
    implementation, except it will generate a URL for a profile picture hosted on
    [Gravatar.com](http://Gravatar.com) . Let''s start by adding a test to our `avatar_test.go`
    file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`Avitar`中的Gravatar实现将执行与`AuthAvatar`实现相同的工作，只是它将生成托管在[Gravatar.com](http://Gravatar.com)上的个人资料图片的URL。让我们首先在`avatar_test.go`文件中添加一个测试：'
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Gravatar uses a hash of the e-mail address to generate a unique ID for each
    profile picture, so we set up a client and ensure `userData` contains an e-mail
    address. Next, we call the same `GetAvatarURL` method, but this time on an object
    that has the `GravatarAvatar` type. We then assert that a correct URL was returned.
    We already know this is the appropriate URL for the specified e-mail address because
    it is listed as an example in the Gravatar documentation—a great strategy to ensure
    our code is doing what it should be.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Gravatar使用电子邮件地址的哈希来生成每个个人资料图片的唯一ID，因此我们设置一个客户端，并确保`userData`包含一个电子邮件地址。接下来，我们调用相同的`GetAvatarURL`方法，但这次是在具有`GravatarAvatar`类型的对象上。然后我们断言返回了正确的URL。我们已经知道这是指定电子邮件地址的适当URL，因为它在Gravatar文档中作为示例列出了，这是确保我们的代码正在执行应该执行的工作的一个很好的策略。
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Recall that all the source code for this book is available on GitHub. You can
    save time on building the preceding core by copying and pasting bits and pieces
    from [https://github.com/matryer/goblueprints](https://github.com/matryer/goblueprints)
    . Hardcoding things such as the base URL is not usually a good idea; we have hardcoded
    throughout the book to make the code snippets easier to read and more obvious,
    but you are welcome to extract them as you go along if you like.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，本书的所有源代码都可以在GitHub上找到。您可以通过从[https://github.com/matryer/goblueprints](https://github.com/matryer/goblueprints)复制和粘贴片段来节省构建前述核心的时间。通常硬编码诸如基本URL之类的东西并不是一个好主意；我们在整本书中都进行了硬编码，以使代码片段更容易阅读和更明显，但是如果您愿意，您可以在进行过程中提取它们。
- en: 'Running these tests (with `go test` ) obviously causes errors because we haven''t
    defined our types yet. Let''s head back to `avatar.go` and add the following code
    while being sure to import the `io` package:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些测试（使用`go test`）显然会导致错误，因为我们还没有定义我们的类型。让我们回到`avatar.go`，并在确保导入`io`包的情况下添加以下代码：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We used the same pattern as we did for `AuthAvatar` : we have an empty struct,
    a helpful `UseGravatar` variable, and the `GetAvatarURL` method implementation
    itself. In this method, we follow Gravatar''s guidelines to generate an MD5 hash
    from the e-mail address (after we ensured it was lowercase) and append it to the
    hardcoded base URL.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了与`AuthAvatar`相同的模式：一个空的结构体，一个有用的`UseGravatar`变量，以及`GetAvatarURL`方法的实现本身。在这个方法中，我们遵循Gravatar的指南，从电子邮件地址生成MD5哈希（在确保它是小写之后），并将其附加到硬编码的基本URL上。
- en: It is very easy to achieve hashing in Go, thanks to the hard work put in by
    the writers of the Go standard library. The `crypto` package has an impressive
    array of cryptography and hashing capabilities—all very easy to use. In our case,
    we create a new `md5` hasher; because the hasher implements the `io.Writer` interface,
    we can use `io.WriteString` to write a string of bytes to it. Calling `Sum` returns
    the current hash for the bytes written.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中很容易实现哈希处理，这要归功于Go标准库的作者们的辛勤工作。`crypto`包具有令人印象深刻的密码学和哈希处理能力——所有这些都非常容易使用。在我们的情况下，我们创建一个新的`md5`哈希处理器；因为哈希处理器实现了`io.Writer`接口，我们可以使用`io.WriteString`向其中写入一串字节。调用`Sum`返回已写入字节的当前哈希值。
- en: Tip
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You might have noticed that we end up hashing the e-mail address every time
    we need the avatar URL. This is pretty inefficient, especially at scale, but we
    should prioritize getting stuff done over optimization. If we need to, we can
    always come back later and change the way this works.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，每次需要头像URL时，我们都会对电子邮件地址进行哈希处理。这在规模上是相当低效的，但我们应该优先考虑完成工作而不是优化。如果需要，我们随时可以回来改变这种工作方式。
- en: 'Running the tests now shows us that our code is working, but we haven''t yet
    included an e-mail address in the `auth` cookie. We do this by locating the code
    where we assign to the `authCookieValue` object in `auth.go` and updating it to
    grab the `Email` value from Gomniauth:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行测试会显示我们的代码正在工作，但我们还没有在`auth` cookie中包含电子邮件地址。我们通过定位在`auth.go`中为`authCookieValue`对象分配值的代码，并更新它以从Gomniauth获取`Email`值来实现这一点：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The final thing we must do is tell our room to use the Gravatar implementation
    instead of the `AuthAvatar` implementation. We do this by calling `newRoom` in
    `main.go` and making the following change:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做的最后一件事是告诉我们的房间使用Gravatar实现而不是`AuthAvatar`实现。我们通过在`main.go`中调用`newRoom`并进行以下更改来实现这一点：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Build and run the chat program once again and head to the browser. Remember,
    since we have changed the information stored in the cookie, we must sign out and
    sign back in again in order to see our changes take effect.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建和运行聊天程序，然后转到浏览器。请记住，由于我们已更改cookie中存储的信息，我们必须注销并重新登录，以便看到我们的更改生效。
- en: Assuming you have a different image for your Gravatar account, you will notice
    that the system is now pulling the image from Gravatar instead of the authentication
    provider. Using your browser's inspector or debug tool will show you that the
    `src` attribute of the `img` tag has indeed changed.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的Gravatar帐户有不同的图像，您会注意到系统现在从Gravatar而不是认证提供程序中获取图像。使用浏览器的检查器或调试工具将显示`img`标签的`src`属性确实已更改。
- en: '![Gravatar implementation](img/Image00009.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![Gravatar implementation](img/Image00009.jpg)'
- en: If you don't have a Gravatar account, you'll likely see a default placeholder
    image in place of your profile picture.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Gravatar帐户，您可能会看到一个默认的占位图像代替您的个人资料图片。
- en: Uploading an avatar picture
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传头像图片
- en: In the third and final approach of uploading a picture, we will look at how
    to allow users to upload an image from their local hard drive to use as their
    profile picture when chatting. We will need a way to associate a file with a particular
    user to ensure that we associate the right picture with the corresponding messages.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上传图片的第三种方法中，我们将看看如何允许用户从本地硬盘上传图像，以便在聊天时用作他们的个人资料图片。我们需要一种方法来将文件与特定用户关联起来，以确保我们将正确的图片与相应的消息关联起来。
- en: User identification
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户识别
- en: In order to uniquely identify our users, we are going to copy Gravatar's approach
    by hashing their e-mail address and using the resulting string as an identifier.
    We will store the user ID in the cookie along with the rest of the user-specific
    data. This will actually have the added benefit of removing from `GravatarAuth`
    the inefficiency associated with continuous hashing.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了唯一标识我们的用户，我们将复制Gravatar的方法，通过对他们的电子邮件地址进行哈希处理，并使用结果字符串作为标识符。我们将用户ID与其他用户特定数据一起存储在cookie中。这实际上还有一个额外的好处，就是从`GravatarAuth`中删除了与持续哈希处理相关的低效。
- en: 'In `auth.go` , replace the code that creates the `authCookieValue` object with
    the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在`auth.go`中，用以下代码替换创建`authCookieValue`对象的代码：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here we have hashed the e-mail address and stored the resulting value in the
    `userid` field at the point at which the user logs in. Henceforth, we can use
    this value in our Gravatar code instead of hashing the e-mail address for every
    message. To do this, first we update the test by removing the following line from
    `avatar_test.go` :'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户登录时，我们对电子邮件地址进行了哈希处理，并将结果值存储在`userid`字段中。从此时起，我们可以在我们的Gravatar代码中使用这个值，而不是为每条消息对电子邮件地址进行哈希处理。为了做到这一点，首先我们通过从`avatar_test.go`中删除以下行来更新测试：
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We then replace the preceding line with this line:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后用这行替换前面的行：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We no longer need to set the `email` field since it is not used; instead, we
    just have to set an appropriate value to the new `userid` field. However, if you
    run `go test` in a terminal, you will see this test fail.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再需要设置`email`字段，因为它没有被使用；相反，我们只需要为新的`userid`字段设置一个合适的值。但是，如果您在终端中运行`go test`，您会看到这个测试失败。
- en: 'To make the test pass, in `avatar.go` , update the `GetAvatarURL` method for
    the `GravatarAuth` type:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使测试通过，在`avatar.go`中，更新`GravatarAuth`类型的`GetAvatarURL`方法：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This won't change the behavior, but it allows us to make an unexpected optimization,
    which is a great example of why you shouldn't optimize code too early—the inefficiencies
    that you spot early on may not last long enough to warrant the effort required
    to fix them.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会改变行为，但它允许我们进行意外的优化，这是一个很好的例子，说明为什么不应该过早优化代码——你早期发现的低效可能不值得修复所需的努力。
- en: An upload form
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个上传表单
- en: 'If our users are to upload a file as their avatar, they need a way to browse
    their local hard drive and submit the file to the server. We facilitate this by
    adding a new template-driven page. In the `chat/templates` folder, create a file
    called `upload.html` :'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的用户要上传文件作为他们的头像，他们需要一种方法来浏览本地硬盘并将文件提交到服务器。我们通过添加一个新的基于模板的页面来实现这一点。在`chat/templates`文件夹中，创建一个名为`upload.html`的文件：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We used Bootstrap again to make our page look nice and also to make it fit in
    with the other pages. However, the key point to note here is the HTML form that
    will provide the user interface necessary for uploading files. The action points
    to `/uploader` , the handler for which we have yet to implement, and the `enctype`
    attribute must be `multipart/form-data` so the browser can transmit binary data
    over HTTP. Then, there is an `input` element of the type `file` , which will contain
    the reference to the file we want to upload. Notice also that we have included
    the `userid` value from the `UserData` map as a hidden input—this will tell us
    which user is uploading a file. It is important that the `name` attributes are
    correct, as this is how we will refer to the data when we implement our handler
    on the server.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用Bootstrap使我们的页面看起来漂亮，并且使其与其他页面相匹配。但是，这里需要注意的关键点是HTML表单，它将为上传文件提供必要的用户界面。操作指向
    `/uploader`，我们尚未实现的处理程序，`enctype` 属性必须是 `multipart/form-data`，以便浏览器可以通过HTTP传输二进制数据。然后，有一个
    `file` 类型的 `input` 元素，它将包含我们要上传的文件的引用。还要注意，我们已将 `UserData` 映射中的 `userid` 值作为隐藏输入包含在内
    —— 这将告诉我们哪个用户正在上传文件。重要的是 `name` 属性是正确的，因为这是我们在服务器上实现处理程序时将引用数据的方式。
- en: 'Let''s now map the new template to the `/upload` path in `main.go` :'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将新模板映射到 `main.go` 中的 `/upload` 路径：
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Handling the upload
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理上传
- en: When the user clicks on **Upload** after selecting a file, the browser will
    send the data for the file as well as the user ID to `/uploader` , but right now,
    that data doesn't actually go anywhere. We will implement a new `HandlerFunc`
    that is capable of receiving the file, reading the bytes that are streamed through
    the connection, and saving it as a new file on the server. In the `chat` folder,
    let's create a new folder called `avatars` —this is where we will save the avatar
    image files.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在选择文件后点击 **上传** 时，浏览器将发送文件的数据以及用户ID到 `/uploader`，但是现在，这些数据实际上并没有去任何地方。我们将实现一个新的
    `HandlerFunc`，能够接收文件，读取通过连接流传输的字节，并将其保存为服务器上的新文件。在 `chat` 文件夹中，让我们创建一个名为 `avatars`
    的新文件夹 —— 这是我们将保存头像图像文件的地方。
- en: 'Next, create a new file called `upload.go` and insert the following code—make
    sure to add the appropriate package name and imports (which are `ioutils` , `net/http`
    , `io` , and `path` ):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `upload.go` 的新文件，并插入以下代码 —— 确保添加适当的包名和导入（即 `ioutils`，`net/http`，`io`
    和 `path`）。
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here, first `uploaderHandler` uses the `FormValue` method on `http.Request`
    to get the user ID that we placed in the hidden input in our HTML form. Then it
    gets an `io.Reader` type capable of reading the uploaded bytes by calling `req.FormFile`
    , which returns three arguments. The first argument represents the file itself
    with the `multipart.File` interface type, which is also an `io.Reader` . The second
    is a `multipart.FileHeader` object that contains metadata about the file, such
    as the filename. And finally, the third argument is an error that we hope will
    have a `nil` value.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，首先 `uploaderHandler` 使用 `http.Request` 上的 `FormValue` 方法来获取我们在HTML表单中隐藏输入中放置的用户ID。然后通过调用
    `req.FormFile` 获取一个能够读取上传字节的 `io.Reader` 类型，它返回三个参数。第一个参数表示文件本身，具有 `multipart.File`
    接口类型，也是一个 `io.Reader`。第二个是一个包含有关文件的元数据的 `multipart.FileHeader` 对象，例如文件名。最后，第三个参数是一个我们希望具有
    `nil` 值的错误。
- en: What do we mean when we say that the `multipart.File` interface type is also
    an `io.Reader` ? Well, a quick glance at the documentation at [http://golang.org/pkg/mime/multipart/#File](http://golang.org/pkg/mime/multipart/#File)
    makes it clear that the type is actually just a wrapper interface for a few other
    more general interfaces. This means that a `multipart.File` type can be passed
    to methods that require `io.Reader` , since any object that implements `multipart.File`
    must therefore implement `io.Reader` .
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们说 `multipart.File` 接口类型也是 `io.Reader` 时，我们是什么意思呢？嗯，快速浏览一下 [http://golang.org/pkg/mime/multipart/#File](http://golang.org/pkg/mime/multipart/#File)
    上的文档，就会清楚地看到该类型实际上只是一些其他更一般接口的包装接口。这意味着 `multipart.File` 类型可以传递给需要 `io.Reader`
    的方法，因为任何实现 `multipart.File` 的对象必须实现 `io.Reader`。
- en: Tip
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Embedding standard library interfaces to describe new concepts is a great way
    to make sure your code works in as many contexts as possible. Similarly, you should
    try to write code that uses the simplest interface type you can find, ideally
    from the standard library. For example, if you wrote a method that needed to read
    the contents of a file, you could ask the user to provide an argument of the type
    `multipart.File` . However, if you ask for `io.Reader` instead, your code will
    become significantly more flexible because any type that has the appropriate `Read`
    method can be passed in, which includes user-defined types too.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入标准库接口来描述新概念是确保代码在尽可能多的上下文中工作的好方法。同样，您应该尝试编写使用尽可能简单的接口类型的代码，理想情况下是来自标准库。例如，如果您编写了一个需要读取文件内容的方法，您可以要求用户提供
    `multipart.File` 类型的参数。但是，如果您要求使用 `io.Reader`，您的代码将变得更加灵活，因为任何具有适当的 `Read` 方法的类型都可以传递进来，这也包括用户定义的类型。
- en: The `ioutil.ReadAll` method will just keep reading from the specified `io.Reader`
    until all of the bytes have been received, so this is where we actually receive
    the stream of bytes from the client. We then use `path.Join` and `path.Ext` to
    build a new filename using `userid` , and copy the extension from the original
    filename that we can get from `multipart.FileHeader` .
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`ioutil.ReadAll` 方法将继续从指定的 `io.Reader` 读取，直到接收到所有字节，因此这是我们实际从客户端接收字节流的地方。然后我们使用
    `path.Join` 和 `path.Ext` 来使用 `userid` 构建一个新的文件名，并从 `multipart.FileHeader` 中获取原始文件名的扩展名。'
- en: We then use the `ioutil.WriteFile` method to create a new file in the `avatars`
    folder. We use `userid` in the filename to associate the image with the correct
    user, much in the same way as Gravatar does. The `0777` value specifies that the
    new file we create has full file permissions, which is a good default setting
    if you're not sure what other permissions should be set.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: If an error occurs at any stage, our code will write it out to the response,
    which will help us debug it, or it will write **Successful** if everything went
    well.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to map this new handler function to `/uploader` , we need to head
    back to `main.go` and add the following line to `func main` :'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now build and run the application and remember to log out and log back in again
    to give our code a chance to upload the `auth` cookie.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Open `http://localhost:8080/upload` and click on **Choose File** , then select
    a file from your hard drive and click on **Upload** . Navigate to your `chat/avatars`
    folder and you will notice that the file was indeed uploaded and renamed to the
    value of your `userid` field.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Serving the images
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a place to keep our users'' avatar images on the server, we
    need a way to make them accessible to the browser. We do this by using the `net/http`
    package''s built-in file server. In `main.go` , add the following code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This is actually a single line of code that has been broken up to improve readability.
    The `http.Handle` call should feel familiar: we are specifying that we want to
    map the `/avatars/` path with the specified handler—this is where things get interesting.
    Both `http.StripPrefix` and `http.FileServer` return `Handler` , and they make
    use of the decorator pattern we learned about in the previous chapter. The `StripPrefix`
    function takes `Handler` in, modifies the path by removing the specified prefix,
    and passes functionality onto an inner handler. In our case, the inner handler
    is an `http.FileServer` handler that will simply serve static files, provide index
    listings, and generate the `404 Not Found` error if it cannot find the file. The
    `http.Dir` function allows us to specify which folder we want to expose publicly.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: If we didn't strip the `/avatars/` prefix from the requests with `http.StripPrefix`
    , the file server would look for another folder called `avatars` inside the actual
    `avatars` folder, that is, `/avatars/avatars/filename` instead of `/avatars/filename`
    .
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Let's build the program and run it before opening `http://localhost:8080/avatars/`
    in a browser. You'll notice that the file server has generated a listing of the
    files inside our `avatars` folder. Clicking on a file will either download the
    file, or in the case of an image, simply display it. If you haven't done so already,
    go to `http://localhost:8080/upload` and upload a picture, then head back to the
    listing page and click on it to see it in the browser.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: The Avatar implementation for local files
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final piece to making filesystem avatars work is to write an implementation
    of our `Avatar` interface that generates URLs that point to the filesystem endpoint
    we created in the last section.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a test function to our `avatar_test.go` file:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This test is similar to, but slightly more involved than, the `GravatarAvatar`
    test because we are also creating a test file in our `avatars` folder and deleting
    it afterwards.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `defer` keyword is a great way to ensure the code runs regardless of what
    happens in the rest of the function. Even if our test code panics, the deferred
    functions will still be called.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the test is simple: we set a `userid` field in `client.userData`
    and call `GetAvatarURL` to ensure we get back the right value. Of course, running
    this test will fail, so let''s go and add the following code to make it pass in
    `avatar.go` :'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As we see here, to generate the correct URL, we simply get the `userid` value
    and build the final string by adding the appropriate segments together. You may
    have noticed that we have hardcoded the file extension to `.jpg` , which means
    that the initial version of our chat application will only support JPEGs.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Supporting only JPEGs might seem like a half-baked solution, but following Agile
    methodologies, this is perfectly fine; after all, custom JPEG profile pictures
    are better than no custom profile pictures at all.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see our new code in action by updating `main.go` to use our new `Avatar`
    implementation:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Now build and run the application as usual and go to `http://localhost:8080/upload`
    and use a web form to upload a JPEG image to use as your profile picture. To make
    sure it's working correctly, choose a unique image that isn't your Gravatar picture
    or the image from the authentication service. Once you see the successful message
    after clicking on **Upload** , go to `http://localhost:8080/chat` and post a message.
    You will notice that the application has indeed used the profile picture that
    you uploaded.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: To change your profile picture, go back to the `/upload` page and upload a different
    picture, then jump back to the `/chat` page and post more messages.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Supporting different file types
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To support different file types, we have to make our `GetAvatarURL` method for
    the `FileSystemAvatar` type a little smarter.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Instead of just blindly building the string, we will use the very useful `ioutil.ReadDir`
    method to get a listing of the files. The listing also includes directories, so
    we will use the `IsDir` method to determine whether we should skip it or not.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: We will then check to see whether each file starts with the `userid` field (remember
    that we named our files in this way) by a call to `path.Match` . If the filename
    matches the `userid` field, then we have found the file for that user and we return
    the path. If anything goes wrong or if we can't find the file, we return the `ErrNoAvatarURL`
    error as usual.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the appropriate method in `avatar.go` with the following code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Delete all the files in the `avatar` folder to prevent confusion and rebuild
    the program. This time upload an image of a different type and notice that our
    application has no difficulty handling it.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring and optimizing our code
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we look back at how our `Avatar` type is used, you will notice that every
    time someone sends a message, the application makes a call to `GetAvatarURL` .
    In our latest implementation, each time the method is called, we iterate over
    all the files in the `avatars` folder. For a particularly chatty user, this could
    mean that we end up iterating over and over again many times a minute. This is
    an obvious waste of resources and would, at some point very soon, become a scaling
    problem.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Instead of getting the avatar URL for every message, we will get it only once
    when the user first logs in and cache it in the `auth` cookie. Unfortunately,
    our `Avatar` interface type requires that we pass in a `client` object to the
    `GetAvatarURL` method and we do not have such an object at the point at which
    we are authenticating the user.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So did we make a mistake when we designed our `Avatar` interface? While this
    is a natural conclusion to come to, in fact we did the right thing. We designed
    the solution with the best information we had available at the time and therefore
    had a working chat application much sooner than if we'd tried to design for every
    possible future case. Software evolves and almost always changes during the development
    process and will definitely change throughout the lifetime of the code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Replacing concrete types with interfaces
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have concluded that our `GetAvatarURL` method depends on a type that is not
    available to us at the point we need it, so what would be a good alternative?
    We could pass each required field as a separate argument but this would make our
    interface brittle, since as soon as an `Avatar` implementation needs a new piece
    of information, we'd have to change the method signature. Instead, we will create
    a new type that will encapsulate the information our `Avatar` implementations
    need while conceptually remaining decoupled from our specific case.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'In `auth.go` , add the following code to the top of the page (underneath the
    `package` keyword of course):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Here, the `import` statement imported the `common` package from Gomniauth and
    at the same time gave it a specific name through which it will be accessed: `gomniauthcommon`
    . This isn''t entirely necessary since we have no package name conflicts. However,
    it makes the code easier to understand.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code snippet, we also defined a new interface type called
    `ChatUser` , which exposes the information needed in order for our `Avatar` implementations
    to generate the correct URLs. Then, we defined an actual implementation called
    `chatUser` (notice the lowercase starting letter) that implements the interface.
    It also makes use of a very interesting feature in Go: type embedding. We actually
    embedded the interface type `gomniauth/common.User` , which means that our `struct`
    implements the interface automatically.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that we only actually implemented one of the two required
    methods to satisfy our `ChatUser` interface. We got away with this because the
    Gomniauth `User` interface happens to define the same `AvatarURL` method. In practice,
    when we instantiate our `chatUser` struct—provided we set an appropriate value
    for the implied Gomniauth `User` field—our object implements both Gomniauth's
    `User` interface and our own `ChatUser` interface at the same time.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Changing interfaces in a test-driven way
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we can use our new type, we must update the `Avatar` interface and appropriate
    implementations to make use of it. As we will follow TDD practices, we are going
    to make these changes in our test file, see compiler errors when we try to build
    our code, and see failing tests once we fix those errors before finally making
    the tests pass.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `avatar_test.go` and replace `TestAuthAvatar` with the following code:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Tip
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will also need to import the `gomniauth/test` package as `gomniauthtest`
    like we did in the last section.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Using our new interface before we have defined it is a good way to check the
    sanity of our thinking, which is another advantage of practicing TDD. In this
    new test, we create `TestUser` provided by Gomniauth and embed it into a `chatUser`
    type. We then pass the new `chatUser` type into our `GetAvatarURL` calls and make
    the same assertions about output as we always have done.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gomniauth's `TestUser` type is interesting as it makes use of the `Testify`
    package's mocking capabilities. See [https://github.com/stretchr/testify](https://github.com/stretchr/testify)
    for more information.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: The `On` and `Return` methods allow us to tell `TestUser` what to do when specific
    methods are called. In the first case, we tell the `AvatarURL` method to return
    the error, and in the second case, we ask it to return the `testUrl` value, which
    simulates the two possible outcomes we are covering in this test.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Updating the `TestGravatarAvatar` and `TestFileSystemAvatar` tests is much simpler
    because they rely only on the `UniqueID` method, the value of which we can control
    directly.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the other two tests in `avatar_test.go` with the following code:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Of course, this test code won''t even compile because we are yet to update
    our `Avatar` interface. In `avatar.go` , update the `GetAvatarURL` signature in
    the `Avatar` interface type to take a `ChatUser` type rather than a `client` type:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Tip
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we are using the `ChatUser` interface (uppercase starting letter)
    rather than our internal `chatUser` implementation struct—after all, we want to
    be flexible about the types our `GetAvatarURL` methods accept.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Trying to build this will reveal that we now have broken implementations because
    all the `GetAvatarURL` methods are still asking for a `client` object.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Fixing existing implementations
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changing an interface like the one we have is a good way to automatically find
    the parts of our code that have been affected because they will cause compiler
    errors. Of course, if we were writing a package that other people would use, we
    would have to be far stricter towards changing the interfaces.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to update the three implementation signatures to satisfy the
    new interface and change the method bodies to make use of the new type. Replace
    the implementation for `FileSystemAvatar` with the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The key change here is that we no longer access the `userData` field on the
    client, and instead just call `UniqueID` directly on the `ChatUser` interface.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we update the `AuthAvatar` implementation with the following code:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Our new design is proving to be much simpler; it's always a good thing if we
    can reduce the amount of code needed. The preceding code makes a call to get the
    `AvatarURL` value, and provided it isn't empty (or `len(url) > 0` ), we return
    it; else, we return the `ErrNoAvatarURL` error instead.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, update the `GravatarAvatar` implementation:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Global variables versus fields
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So far, we have assigned the `Avatar` implementation to the `room` type, which
    enables us to use different avatars for different rooms. However, this has exposed
    an issue: when our users sign in, there is no concept of which room they are headed
    to so we cannot know which `Avatar` implementation to use. Because our application
    only supports a single room, we are going to look at another approach toward selecting
    implementations: the use of global variables.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'A global variable is simply a variable that is defined outside any type definition
    and is accessible from every part of the package (and from outside the package
    if it''s exported). For a simple configuration, such as which type of `Avatar`
    implementation to use, they are an easy and simple solution. Underneath the `import`
    statements in `main.go` , add the following line:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This defines `avatars` as a global variable that we can use when we need to
    get the avatar URL for a particular user.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Implementing our new design
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to change the code that calls `GetAvatarURL` for every message to just
    access the value that we put into the `userData` cache (via the `auth` cookie).
    Change the line where `msg.AvatarURL` is assigned, as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Find the code inside `loginHandler` in `auth.go` where we call `provider.GetUser`
    and replace it down to where we set the `authCookieValue` object with the following
    code:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Here, we created a new `chatUser` variable while setting the `User` field (which
    represents the embedded interface) to the `User` value returned from Gomniauth.
    We then saved the `userid` MD5 hash to the `uniqueID` field.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'The call to `avatars.GetAvatarURL` is where all of our hard work has paid off,
    as we now get the avatar URL for the user far earlier in the process. Update the
    `authCookieValue` line in `auth.go` to cache the avatar URL in the cookie and
    remove the e-mail address since it is no longer needed:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: However expensive the work that the `Avatar` implementation needs to do, like
    iterating over files on the filesystem, it is mitigated by the fact that the implementation
    only does so when the user first logs in, and not every time they send a message.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Tidying up and testing
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, we get to snip away some of the fat that has accumulated during our
    refactoring process.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we no longer store the `Avatar` implementation in `room` , let''s remove
    the field and all references to it from the type. In `room.go` , delete the `avatar
    Avatar` definition from the `room` struct and update the `newRoom` method:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Tip
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to use the compiler as your to-do list where possible, and follow the
    errors to find where you have impacted other code.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: In `main.go` , remove the parameter passed into the `newRoom` function call
    since we are using our global variable instead of this one.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: After this exercise, the end user experience remains unchanged. Usually, when
    refactoring the code, it is the internals that are modified while the public-facing
    interface remains stable and unchanged.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's usually a good idea to run tools such as `golint` and `go vet` against
    your code as well to make sure it follows good practices and doesn't contain any
    Go faux pas such as missing comments or badly named functions.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Combining all three implementations
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To close this chapter off with a bang, we will implement a mechanism in which
    each `Avatar` implementation takes a turn in trying to get the value. If the first
    implementation returns the `ErrNoAvatarURL` error, we will try the next and so
    on until we find a useable value.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'In `avatar.go` , underneath the `Avatar` type, add the following type definition:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `TryAvatars` type is simply a slice of `Avatar` objects; therefore, we
    will add the following `GetAvatarURL` method:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This means that `TryAvatars` is now a valid `Avatar` implementation and can
    be used in place of any specific implementation. In the preceding method, we iterated
    over the slice of `Avatar` objects in an order, calling `GetAvatarURL` for each
    one. If no error is returned, we return the URL; otherwise, we carry on looking.
    Finally, if we are unable to find a value, we just return `ErrNoAvatarURL` as
    per the interface design.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `avatars` global variable in `main.go` to use our new implementation:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Here we created a new instance of our `TryAvatars` slice type while putting
    the other `Avatar` implementations inside it. The order matters since it iterates
    over the objects in the order in which they appear in the slice. So, first our
    code will check to see whether the user has uploaded a picture; if they haven't,
    the code will check whether the authentication service has a picture for us to
    use. If both the approaches fail, a Gravatar URL will be generated, which in the
    worst case (for example, if the user hasn't added a Gravatar picture), will render
    a default placeholder image.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'To see our new functionality in action, perform the following steps:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and rerun the application:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Log out by visiting `http://localhost:8080/logout` .
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete all the pictures from the `avatars` folder.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log back in by navigating to `http://localhost:8080/chat` .
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send some messages and take note of your profile picture.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit `http://localhost:8080/upload` and upload a new profile picture.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log out again and log back in as before.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send some more messages and notice that your profile picture has updated.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added three different implementations of profile pictures
    to our chat application. First we asked the authentication service to provide
    a URL for us to use. We did this by using Gomniauth's abstraction of the user
    resource data, which we then included as part of the user interface every time
    a user would send a message. Using Go's zero (or default) initialization pattern,
    we were able to refer to different implementations of our `Avatar` interface without
    actually creating any instances.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: We stored data in a cookie for when the user would log in. Therefore, and also
    given the fact that cookies persist between builds of our code, we added a handy
    logout feature to help us validate our changes, which we also exposed to our users
    so that they could log out too. Other small changes to the code and the inclusion
    of Bootstrap on our chat page dramatically improved the look and feel of our application.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: We used MD5 hashing in Go to implement the [Gravatar.com](http://Gravatar.com)
    API by hashing the e-mail address that the authentication service provided. If
    the e-mail address is not known to Gravatar, they will deliver a nice default
    placeholder image for us, which means our user interface will never be broken
    due to missing images.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: We then built and completed an upload form and associated the server functionality
    that saved uploaded pictures in the `avatars` folder. We saw how to expose the
    saved uploaded pictures to users via the standard library's `http.FileServer`
    handler. As this introduced inefficiencies in our design by causing too much filesystem
    access, we refactored our solution with the help of our unit tests. By moving
    the `GetAvatarURL` call to the point at which users log in, rather than every
    time a message is sent, we made our code significantly more scalable.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Our special `ErrNoAvatarURL` error type was used as part of our interface design
    to allow us to inform the calling code when it was not possible to obtain an appropriate
    URL—this became particularly useful when we created our `Avatars` slice type.
    By implementing the `Avatar` interface on a slice of `Avatar` types, we were able
    to make a new implementation that took turns trying to get a valid URL from each
    of the different options available, starting with the filesystem, then the authentication
    service, and finally Gravatar. We achieved this with zero impact on how the user
    would interact with the interface. If an implementation returned `ErrNoAvatarURL`
    , we tried the next one.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Our chat application is ready to go live so we can invite our friends and have
    a real conversation. But first we need to choose a domain name to host it at,
    something we will look at in the next chapter.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
