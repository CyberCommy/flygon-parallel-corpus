- en: Writing Your First Application with React Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning about the State Hook in depth, we are now going to make use of
    it by creating a blog application from scratch. Throughout this chapter, we are
    going to learn how to structure React apps in a way that scales well, how to use
    multiple Hooks, where to store state, and how to solve common use cases with Hooks.
    At the end of this chapter, we are going to have a basic blog application, where
    we can log in, register, and create posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Structuring React projects in a scalable way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing static React components from a mock-up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing stateful components with Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found in the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter03](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter03).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the previously provided code examples. It is important that
    you write the code yourself in order to be able to learn and understand properly.
    However, if you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring React projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning about the principles of React, how to use the `useState` Hook,
    and how Hooks work internally, we are now going to make use of the real `useState` Hook
    in order to develop a blog application. First, we are going to create a new project,
    and structure the folders in a way that will allow us to scale the project later
    on. Then, we are going to define the components that we are going to need in order
    to cover the basic features of a blog application. Finally, we are going to use
    Hooks to introduce state to our application! Throughout this chapter, we are also
    going to learn about **JSX**, and new JavaScript features that have been introduced
    in **ES6**, up to **ES2018**.
  prefs: []
  type: TYPE_NORMAL
- en: Folder structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways that projects can be structured, and different structures
    can do well for different projects. Usually, we create a `src/` folder, and group
    our files there by features. Another popular way to structure projects is to group
    them by routes. For some projects, it might make sense to additionally separate
    by the kind of code, such as `src/api/` and `src/components/`. However, for our
    project, we are mainly going to focus on the **user interface** (**UI**). As a
    result, we are going to group our files by features in the `src/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good idea to start with a simple structure at first, and only nest more
    deeply when you actually need it. Do not spend too much time thinking about the
    file structure when starting a project, because usually, you do not know up front
    how files should be grouped.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We first have to think about which features we are going to implement in our
    blog application. At the bare minimum, we want to implement the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in/out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing a single post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have chosen the features, let's come up with an initial folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: Coming up with an initial structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From our previous functionalities, we can abstract a couple of feature groups:'
  prefs: []
  type: TYPE_NORMAL
- en: User (registering, log in/log out)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post (creating, viewing, listing)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We could now just keep it very simple, and create all of the components in
    the `src/` folder, without any nesting. However, since we already have quite a
    clear picture on the features that a blog application is going to need, we can
    come up with a simple folder structure now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/user/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/post/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After defining the folder structure, we can move on to the component structure.
  prefs: []
  type: TYPE_NORMAL
- en: Component structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea of components in React is to have each component deal with a single
    task or UI element. We should try to make components as fine-grained as possible,
    in order to be able to reuse code. If we find ourselves copying and pasting code
    from one component to another, it might be a good idea to create a new component,
    and reuse it in multiple other components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, when developing software, we start with a UI mock-up. For our blog
    application, a mock-up would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3ead741d-7e4f-402b-9dca-710eb2d8ced0.png)'
  prefs: []
  type: TYPE_IMG
- en: Initial mock-up of our blog application
  prefs: []
  type: TYPE_NORMAL
- en: When splitting components, we use the single responsibility principle, which
    states that every module should have responsibility over a single encapsulated
    part of the functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this mock-up, we can draw boxes around each component and subcomponent,
    and give them names. Keep in mind that each component should have exactly one
    responsibility. We start with the fundamental components that make up this app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/76bb8249-2b7f-4058-86dc-166e76f0844b.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining the fundamental components from our mock-up
  prefs: []
  type: TYPE_NORMAL
- en: We defined a `Logout` component for the logout feature, a `CreatePost` component,
    which contains the form to create a new post, and a `Post` component to display
    the actual posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have defined our fundamental components, we are going to look at
    which components logically belong together, thereby forming a group. To do so,
    we now define the container components, which we need in order to group the components
    together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dea42556-65fd-4997-b85f-f2a6ba394f71.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining the container components from our mock-up
  prefs: []
  type: TYPE_NORMAL
- en: We defined a `PostList` component in order to group posts together, then a `UserBar`
    component in order to deal with login/logout and registration. Finally, we defined
    an `App` component in order to group everything together, and define the structure
    of our app.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are done with structuring our React project, we can move on to implementing
    the static components.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing static components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start adding state via Hooks to our blog application, we are going
    to model the basic features of our application as static React components. Doing
    this means that we have to deal with the static view structure of our application.
  prefs: []
  type: TYPE_NORMAL
- en: It makes sense to deal with the static structure first, so as to avoid having
    to move dynamic code to different components later on. Furthermore, it is easier
    to deal only with **Hypertext Markup Language (HTML)** and CSS first—helping us
    to get started with projects quickly. Then, we can move on to implementing dynamic
    code and handling state.
  prefs: []
  type: TYPE_NORMAL
- en: Doing this step by step, instead of implementing everything at once, helps us
    to quickly get started with new projects without having to think about too much
    at once, and lets us avoid having to restructure projects later!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already learned how to set up a new React project. As we have learned,
    we can use the `create-react-app` tool to easily initialize a new project. We
    are going to do so now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we use `create-react-app` to initialize our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create folders for our features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create folder**: `src/user/`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create folder**: `src/post/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that our project structure is set up, we can start implementing components.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to start with the simplest feature in terms of static components:
    implementing user-related functionality. As we have seen from our mock-up, we
    are going to need four components here:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Login` component, which we are going to show when the user is not logged
    in yet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Register` component, which we are also going to show when the user is not
    logged in yet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Logout` component, which is going to be shown after the user is logged in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `UserBar` component, which will display the other components conditionally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to start by defining the first three components, which are all
    stand-alone components. Lastly, we will define the `UserBar` component, because
    it depends on the other components being defined.
  prefs: []
  type: TYPE_NORMAL
- en: The Login component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we define the `Login` component, where we show two fields: a Username
    field, and a Password field. Furthermore, we show a Login button:'
  prefs: []
  type: TYPE_NORMAL
- en: We start by creating a new file for our component: `src/user/Login.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the newly created `src/user/Login.js` file, we import `React`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our function component. For now, the `Login` component will
    not accept any props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return the two fields and the Login button, via JSX. We also define
    a `form` container element to wrap them in. To avoid a page refresh when the form
    is submitted, we have to define an `onSubmit` handler and call `e.preventDefault()`
    on the event object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using an anonymous function to define the `onSubmit` handler. Anonymous
    functions are defined as follows, if they do not have any arguments: `() => {
    ... }`, instead of `function () { ... }`. With arguments, we could write `(arg1,
    arg2) => { ... }`, instead of `function (arg1, arg2) { ... }`. We can omit the
    `()` brackets if we only have a single argument. Additionally, we can omit the `{}` brackets
    if we only have a single statement in our function, like this: `e => e.preventDefault()`.
  prefs: []
  type: TYPE_NORMAL
- en: Using semantic HTML elements such as `<form>` and `<label>` make your app easier
    to navigate for people using accessibility assistance software, such as screen
    readers. Furthermore, when using semantic HTML, keyboard shortcuts, such as submitting
    forms by pressing the return key, automatically work.
  prefs: []
  type: TYPE_NORMAL
- en: Our `Login` component is implemented, and is now ready to be tested.
  prefs: []
  type: TYPE_NORMAL
- en: Testing out our component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have defined our first component, let''s render it and see what
    it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we edit `src/App.js`, and remove all its contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we start by importing `React` and the `Login` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It is a good idea to group imports in blocks of code that belong together. In
    this case, we separate external imports, such as React, from local imports, such
    as our `Login` component, by adding an empty line in between. Doing so keeps our
    code readable, especially when we add more import statements later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we define the `App` component, and return the `Login` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If we are only returning a single component, we can omit the brackets in the
    `return` statement. Instead of writing `return (<Login />)`, we can simply write `return
    <Login />`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://localhost:3000` in your browser, and you should see the `Login`
    component being rendered. If you already had the page open in your browser, it
    should refresh automatically when you change the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/98b35abf-b0b4-4890-823f-2fbb0affbb34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first component of our blog application: logging in by username and password'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the static `Login` component renders fine in React. We can now
    move on to the `Logout` component.
  prefs: []
  type: TYPE_NORMAL
- en: The Logout component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we define the `Logout` component, which is going to display the currently
    logged in user, and a button to log out:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file: `src/user/Logout.js`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `React`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, our function is going to take a `user` prop, which we are going
    to use to display the currently logged-in user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here we use destructuring in order to extract the `user` key from the `props`
    object. React passes all component props, in a single object, as the first argument
    to a function. Using destructuring on the first argument is similar to doing `const
    { user } = this.props` in a class component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we return a text that shows the currently logged-in `user` and the
    Logout button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now replace the `Login` component with the `Logout` component in `src/App.js`,
    in order to see our newly defined component (do not forget to pass the `user` prop
    to it!):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `Logout` component is defined, and we can move on to the `Register`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: The Register component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The static `Register` component will be very similar to the `Login` component,
    with an additional field to repeat the password. You might get the idea to merge
    them into one component if they are so similar, and add a prop to toggle the Repeat
    password field. However, it is best to stick to the single responsibility principle,
    and to have each component deal with only one functionality. Later on, we are
    going to extend the static components with dynamic code, and then `Register` and
    `Login` will have vastly different code. As a result, we would need to split them
    up again later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, let''s start working on the code for the `Register` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by creating a new `src/user/Register.js` file, and copying the code
    from the `Login` component, as the static components are very similar, after all.
    Make sure to change the name of the component to `Register`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add the Repeat password field, right below the Password field code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we also change the value of the submit button to Register:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we can edit `src/App.js` in order to show our component, in a similar
    way to how we did with the `Login` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, our `Register` component looks very similar to the `Login` component.
  prefs: []
  type: TYPE_NORMAL
- en: The UserBar component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it is time to put our user-related components together into a `UserBar`
    component. Here we are going to conditionally show either the `Login` and `Register`
    components, or the `Logout` component, depending on whether the user is already
    logged in or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start implementing the `UserBar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create a new `src/user/UserBar.js` file, and import `React` as well
    as the three components that we defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define our function component, and a value for the `user`. For now,
    we just save it in a static variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we check whether the user is logged in or not. If the user is logged
    in, we display the `Logout` component, and pass the `user` value to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, we show the `Login` and `Register` components. Here, we can use
    `React.Fragment` instead of a `<div>` container element. This keeps our UI tree
    clean, as the components will simply be rendered side by side, instead of being
    wrapped in another element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we edit `src/App.js`, and now we show our `UserBar` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, it works! We now show both the `Login` and `Register` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8de0c0af-3059-426e-9428-5be16c081648.png)'
  prefs: []
  type: TYPE_IMG
- en: Our UserBar component, showing both the Login and Register components
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can edit the `src/user/UserBar.js` file, and set the `user` value
    to a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After doing so, our app now shows the `Logout` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/810249b7-c3e0-428f-a41e-72ef8e97006f.png)'
  prefs: []
  type: TYPE_IMG
- en: Our app showing the Logout component after defining the user value
  prefs: []
  type: TYPE_NORMAL
- en: Later on in this chapter, we are going to add Hooks to our application, so that
    we can log in and have the state change dynamically without having to edit the
    code!
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code for the user-related components can be found in the `Chapter03/chapter3_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` to install all dependencies, and `npm start` to start
    the application, then visit `http://localhost:3000` in your browser (if it did
    not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After implementing all the user-related components, we move on to implementing
    posts in our blog app. We are going to define the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Post` component to display a single post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `CreatePost` component for creating new posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `PostList` component to show multiple posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started implementing the post related components now.
  prefs: []
  type: TYPE_NORMAL
- en: The Post component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already thought about which elements a post has when creating the mock-up.
    A post should have a title, content, and an author (the user who wrote the post).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the `Post` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a new file: `src/post/Post.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we import `React`, and define our function component, accepting three
    props: `title`, `content`, and `author`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we render all props in a way that resembles the mock-up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As always, we can test our component by editing the `src/App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, the static `Post` component has been implemented, and we can move on to
    the `CreatePost` component.
  prefs: []
  type: TYPE_NORMAL
- en: The CreatePost component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we implement a form to allow for the creation of new posts. Here, we pass
    the `user` value as a prop to the component, as the author should always be the
    currently logged-in user. Then, we show the author, and provide an input field
    for the `title`, and a `<textarea>` element for the content of the blog post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the `CreatePost` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file: `src/post/CreatePost.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the following component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'As always, we can test our component by editing the `src/App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the `CreatePost` component renders fine. We can now move on to
    the `PostList` component.
  prefs: []
  type: TYPE_NORMAL
- en: The PostList component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After implementing the other post-related components, we can now implement
    the most important part of our blog app: the feed of blog posts. For now, the
    feed is simply going to show a list of blog posts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start implementing the `PostList` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by importing `React` and the `Post` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our `PostList` function component, accepting a `posts` array
    as a prop. If `posts` is not defined, we set it to an empty array, by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we render all `posts` by using the `.map` function and the spread syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If we are rendering a list of elements, we have to give each element a unique `key`
    prop. React uses this `key` prop to efficiently compute the difference of two
    lists, when the data has changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we use the `map` function, which applies a function to all the elements
    of an array. This is similar to using a `for` loop, and storing all the results,
    but it is much more concise, declarative, and easier to read! Alternatively, we
    could do the following instead of using the `map` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We then return the `<Post>` component for each post, and pass all the keys
    from the post object, `p`, to the component as props. We do this by using the
    spread syntax, which has the same effect as listing all the keys from the object
    manually as props, as follows: `<Post title={p.title} content={p.content} author={p.author}
    />`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the mock-up, we have a horizontal line after each blog post. We can implement
    this without an additional `<div>` container element, by using `React.Fragment`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `key` prop always has to be added to the uppermost parent element that is
    rendered within the `map` function. In this case, we had to move the `key` prop
    from the `Post` component to the `React.Fragment` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we test our component by editing the `src/App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can see that our app lists all the posts that we defined in the `posts`
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e96b9030-8422-4caa-9f22-df847b8557e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Showing multiple posts using the PostList component
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, listing multiple posts via the `PostList` component works fine.
    We can now move on to putting the app together.
  prefs: []
  type: TYPE_NORMAL
- en: Putting the app together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After implementing all components, in order to reproduce the mock-up, we now
    only have to put everything together in the `App` component. Then, we will have
    successfully reproduced the mock-up!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start modifying the `App` component, and putting our app together:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `src/App.js`, and remove all of the current code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we import `React`, `PostList`, `CreatePost`, and the `UserBar` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define some mock data for our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the `App` component, and return a `<div>` container element,
    where we set some padding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we insert the `UserBar` and `CreatePost` components, passing the `user` prop
    to the `CreatePost` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Please note that you should always prefer spacing via CSS, rather than using
    the `<br />` HTML tag. However, at the moment, we are focusing on the UI, rather
    than its style, so we simply use HTML whenever possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we display the `PostList` component, listing all `posts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the file, `http://localhost:3000` should automatically refresh,
    and we can now see the full UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/84ac3159-6797-4900-8367-b09b754b990f.png)'
  prefs: []
  type: TYPE_IMG
- en: Full implementation of our static blog app, according to the mock-up
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, all of the static components that we defined earlier are rendered
    together in one `App` component. Our app now looks just like the mock-up. Next,
    we can move on to making all of the components dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code for the static implementation of our blog app can be found
    in the `Chapter03/chapter3_2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` to install all dependencies and `npm start` to start
    the application, then visit `http://localhost:3000` in your browser (if it did
    not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing stateful components with Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have implemented the static structure of our application, we are
    going to add `useState` Hooks to it, in order to be able to handle state and dynamic
    interactions!
  prefs: []
  type: TYPE_NORMAL
- en: Adding Hooks for the users feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add Hooks for the users feature, we are going to have to replace the static `user` value
    with a State Hook. Then, we need to adjust the value when we log in, register
    and log out.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting UserBar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recall that when we created the `UserBar` component, we statically defined the `user` value.
    We are now going to replace this value with a State Hook!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start modifying the `UserBar` component to make it dynamic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/UserBar.js`, and import the `useState` Hook by adjusting the
    `React` import statement, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with a State Hook, using an empty user `''''` as the default value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we pass the `setUser` function to the `Login`, `Register`, and `Logout`
    components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `UserBar` component provides a `setUser` function, which can be used
    in the `Login`, `Register`, and `Logout` components to set or unset the `user`
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the Login and Register components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `Login` and `Register` components, we need to use the `setUser` function
    to set the value of `user` accordingly, when we log in or register.
  prefs: []
  type: TYPE_NORMAL
- en: Login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `Login` component, we just ignore the Password field for now, and only
    process the Username field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by modifying the `Login` component in order to make it dynamic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Login.js`, and import the `useState` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, adjust the function definition to accept the `setUser` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define a new State Hook for the value of the Username field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a handler function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we adjust the `input` field, in order to use the `username` value, and
    call the `handleUsername` function when the input changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to call the `setUser` function when the Login button is pressed,
    and thus the `form` is submitted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, we can disable the Login button when the `username` value is
    empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: And it works—we can now enter a username, press the Login button, and then our
    `UserBar` component will change its state, and show the `Logout` component!
  prefs: []
  type: TYPE_NORMAL
- en: Register
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For registration, we are additionally going to check whether the entered passwords
    are the same, and only then will we set the `user` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by modifying the `Register` component in order to make it dynamic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we do the same steps as we did for `Login`, in order to handle the `username`
    field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define two new State Hooks for the Password and Repeat password fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define two handler functions for them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: You might have noticed that we are always writing similar handler functions
    for `input` fields. Actually, this is the perfect use case for creating a custom
    Hook! We are going to learn how to do that in a future chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we assign the `value` and `onChange` handler functions to the `input`
    fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we check if the passwords match, and if they do not, we keep the button
    `disabled`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: And now we have successfully implemented a check on whether the passwords are
    equal, and we implemented registration!
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting Logout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is still one thing missing for the users feature—we cannot log out yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make the `Logout` component dynamic now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Logout.js`, and add the `setUser` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, adjust the `onSubmit` handler of `form` and set the user to `''''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: As we are not creating a new Hook here, we do not need to import the `useState` Hook
    from React. We can simply use the `setUser` function passed to the `Logout` component
    as a prop.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the `Logout` component sets the `user` value to `''` when we click on the
    Logout button.
  prefs: []
  type: TYPE_NORMAL
- en: Passing the user to CreatePost
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you might have noticed, the `CreatePost` component still uses the hardcoded
    username. To be able to access the `user` value there, we need to move the Hook
    from the `UserBar` component, to the `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s refactor the definition of the `user` State Hook now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/UserBar.js`, and cut/remove the Hook definition that is there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we edit the function definition, and accept these two values as props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we edit `src/App.js`, and import the `useState` Hook there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we remove the static `user` value definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we insert the `user` State Hook that we cut earlier into the `App` component
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can pass `user` and `setUser` as props to the `UserBar` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The `user` state is a global state, so we are going to need it in many components
    across the app. At the moment, this means that we need to pass down the `user` value
    and the `setUser`function to each component that needs it. In a future chapter,
    we are going to learn about React Context Hooks, which solve the problem of having
    to pass down props in such a way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we only show the `CreatePost` component when the user is logged in.
    To do this, we use a pattern, which allows us to show a component based on a condition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Now, the users feature is fully implemented—we can use the `Login` and `Register`
    components, and the `user` value also gets passed to the `CreatePost` component!
  prefs: []
  type: TYPE_NORMAL
- en: Adding Hooks for the posts feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After implementing the users feature, we are now going to implement the dynamic
    creation of posts. We do so by first adjusting the `App` component and then modifying
    the `CreatePost` component, in order to be able to insert new posts.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started by adjusting the App component.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the App component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know from the users feature, posts are also going to be global state,
    so we should define it in the `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the `posts` value as global state now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js`, and rename the current `posts` array to `defaultPosts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, define a new State Hook for the `posts` state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we pass the `posts` value and `setPosts` function as props to the `CreatePost`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `App` component provides the `posts` array, and a `setPosts` function
    to the `CreatePost` component. Let's move on to adjusting the CreatePost component.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the CreatePost component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we need to use the `setPosts` function in order to insert a new post,
    when we press the Create button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start modifying the `CreatePost` component in order to make it dynamic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/posts/CreatePost.js`, and import the `useState` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, adjust the function definition to accept the `posts` and `setPosts` props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define two new State Hooks—one for the `title` value, and one for
    the `content` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define two handler functions—one for the `input` field, and one for
    the `textarea`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'We also define a handler function for the Create button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, we first create a `newPost` object from the `input` field
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'In newer JavaScript versions, we can shorten the following object assignment: `{
    title: title }`, to `{ title }`, and it will have the same effect. So, instead
    of doing `{ title: title, contents: contents }`, we can simply do `{ title, contents
    }`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we set the new `posts` array by first adding `newPost` to the array,
    then using the spread syntax to list all of the existing `posts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add the `value` and handler functions to the `input` field and `textarea` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Usually in HTML, we put the value of `textarea` as its children. However, in
    React, `textarea` can be handled like any other `input` field, by using the `value` and `onChange` props.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we pass the `handleCreate` function to the `onSubmit` handler of the
    `form` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can log in and create a new post, and it will be inserted at the beginning
    of the feed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e09c94b6-d289-4cb9-98c5-38f8dec399c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Our first version of the blog app using Hooks, after inserting a new blog post
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, now our application is fully dynamic, and we can use all of its
    features!
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code for the dynamic implementation of our blog app with Hooks can
    be found in the `Chapter03/chapter3_3` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` to install all dependencies, and `npm start` to start
    the application, then visit `http://localhost:3000` in your browser (if it did
    not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we developed our own blog application from scratch! We started
    with a mock-up, then created static components to resemble it. Afterward, we implemented
    Hooks, to allow for dynamic behavior. Throughout the chapter, we learned how to
    deal with local and global states, using Hooks. Furthermore, we learned how to
    use multiple Hooks, and in which components to define Hooks and store state. We
    also learned how to solve common use cases, such as handling input fields with
    the use of Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about the `useReducer` Hook, which
    allows us to deal with certain state changes more easily. Furthermore, we are
    going to learn about the `useEffect` Hook, which allows us to run code with side
    effects.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the best practice for folder structures in React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which principle should we use when splitting up React components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the `map` function do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does destructuring work, and when do we use it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does the spread operator work, and when do we use it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we deal with input fields using React Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where should local State Hooks be defined?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is global state?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where should global State Hooks be defined?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following reading material:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official docs on *Thinking in React*: [https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling input fields with React: [https://reactjs.org/docs/forms.html](https://reactjs.org/docs/forms.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
