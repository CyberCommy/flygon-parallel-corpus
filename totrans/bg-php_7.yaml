- en: Chapter 7. Authentication and User Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we have gained a better understanding of the role the
    `database` class plays in the project, which is used every time the developer
    interacts with the database.
  prefs: []
  type: TYPE_NORMAL
- en: The only library that we used is called Whoops, which will show errors in a
    readable format. We also gained experience building default states, including
    `baseController` and `baseMethod`.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be focusing on the security aspect of the project,
    that is, authentication. We will be building login forms which interact with the
    database to verify the identity of the users. Finally, we will cover how to set
    up a password recovery mechanism in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Build the default views for their application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a password management and reset system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the CRUD for a module within the system application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting Up Paths and Inclusion of Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will continue to build features on top of the framework.
    The core framework system files are in place. This setup is used to build useful
    features on top of this.
  prefs: []
  type: TYPE_NORMAL
- en: We will build the authentication system and complete the application build.
    Authentication is required to prevent access to unauthorized users. This ensures
    only the users with a valid username and password can log in to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering authentication. Please note that the login
    username and password for all the examples used in this lesson is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Username: `demo`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Password: `demo`'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Paths and Creating the Absolute Paths to the Files Directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Relative paths are paths that are relative to the current folder path, for example,
    .`/css` points to a relative path one folder up and into a `css` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Absolute paths are the full path to a file or folder, such as `/user/projects/mvc/css.`
  prefs: []
  type: TYPE_NORMAL
- en: This is important as this will allow files to be included using an absolute
    path anywhere in the framework system. This is an adaption to existing code in
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This builds on the current concept and allows views to be organized into subfolders.
    Without this adaptation, it will not be possible to organize anything into subfolders
    and it will interfere with keeping a tidy organization of code.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to continue building the system without these changes, but it
    is always a good idea to make sure code is tidy and organized.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Layout Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Layout files are required so that any error can be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, layout files are required for the `header`, `footer`, and `navigation`.
    Once created, these file will provide elements that should be brought in across
    the application. This will include global elements.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Layout Files](graphics/7_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Errors are for validation, and this is to be covered in a further subsection
    and not to be confused with parse errors or similar from the errors seen previously.
    The errors these steps are concerned with are errors related to form validation
    where a user inputs the incorrect information into form fields.
  prefs: []
  type: TYPE_NORMAL
- en: Inclusion of Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrap is a HTML, CSS, and JavaScript library, and will be included for the
    purpose of this chapter to give a basic level of styling. It is useful for a developer
    as it can help them prototype and visualize how their application will look before
    the designer adds the design elements to an application.
  prefs: []
  type: TYPE_NORMAL
- en: In this project, Bootstrap will be included in the header as a **content delivery
    network** (**CDN**). A CDN takes resources that are very commonly found on the
    web and caches them to help boost performance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This can be easily confused with bootstrapping a framework.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap, the HTML, CSS, and JavaScript library, and the concept of bootstrapping
    are two different things that share a similar name.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more information on Bootstrap by visiting the following link:
    [https://getbootstrap.com/](https://getbootstrap.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Inclusion of Bootstrap and HTML Markup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of the section is to implement the general styling that we have
    implemented which shows the inclusion of bootstrap and the HTML markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inclusion of Bootstrap and HTML Markup](graphics/7_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'An issue that has not yet been addressed in paths. So far, we''ve been using
    relative paths for including files such as views in `system/View.php.` Let''s
    fix that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `webroot/index.php` and add these lines after line 9:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'These are constants that can be called anywhere in the framework. The first
    line defines a directory separator, for example, `/` or a `\` depending on the
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '`APPDIR` – points to the `app` folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SYSTEMDIR` – points to the `system` folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUBLICDIR` – points to the `webroot` folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ROOTDIR` – points to the `root` project path'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each one creates an absolute path to its endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s fix the `View` class. Open `system/View.php,` and on line 24, replace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This allows for views to include other views from parent or child folders with
    no issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a folder called `layouts` inside `app/views.` Create the following
    files inside `app/views/layouts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`errors.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`footer.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`header.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nav.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`errors.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open `errors.php` and enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This includes a Session helper, which we will create shortly.
  prefs: []
  type: TYPE_NORMAL
- en: The first `if` statement checks whether `$errors` exists, and if so, exit the
    loop and display an alert. The classes are `Bootstrap` classes (we will have this
    in `header.php`).
  prefs: []
  type: TYPE_NORMAL
- en: The next `if` statement checks for the existence of a session called `success,`
    and if it exists, displays its contents. This is used to provide feedback to the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `header.php` and enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This sets the HTML document and optionally uses a `$title,` should it exist.
    Also include Bootstrap CDN CSS and JavaScript, as well as jQuery and a custom
    style.css file located in `webroot/css/style.css` – create this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open `footer.php` and close the container `div` and the `body` and `html` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `nav.php` and enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a navigation component for Bootstrap. This is a clean way to bring in
    a responsive menu for our admin pages. Note the two-page links which are Admin
    and Users. We will also provide a logout link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open `app/views/404.php` and include the layout files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This brings in the header and shows the page content, and ends with the footer
    included.
  prefs: []
  type: TYPE_NORMAL
- en: Don't include the `nav` here. The 404 can be shown even when the user is not
    logged in.
  prefs: []
  type: TYPE_NORMAL
- en: This makes a very clean way of organizing common layouts into your views so
    that when you need to change a global element, the layout views are where they
    were stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the framework in the browser if it''s not already running. Run the following
    command from Terminal when on the root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You won''t notice anything different, but you will be redirected to a page
    that does not exist: `http://localhost:8000/example`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see a 404 page that includes the header and footer layouts. Look at
    the page source code – right-click and click on ''`view page source`''. You should
    see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These layouts will become more visible as we go further into this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have covered how to set up file paths correctly. We covered
    how to set up Bootstrap properly, and we finally set up views for errors and global
    elements like header, footer, navigation, and errors.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover how to add security to our application and
    setting up a password recovery.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Security to the Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be continuing to build features on top of the framework.
    The core framework system files are in place.
  prefs: []
  type: TYPE_NORMAL
- en: The objective of this section is to build features that will add security to
    the project. We will be covering various aspects that we need to maintain good
    security in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this subsection, we will be covering `helpers.`
  prefs: []
  type: TYPE_NORMAL
- en: We will be creating a `URL` `helper` and a `session` `helper` as well. These
    will be useful to authentication and indeed any other aspects of the system, but
    are not directly related to it.
  prefs: []
  type: TYPE_NORMAL
- en: The session helper is a `wrapper` for PHP sessions including a variety of methods
    useful to developers when dealing with sessions.
  prefs: []
  type: TYPE_NORMAL
- en: A `URL` `helper` is very similar in the sense that it is a useful method for
    dealing with URLs. However, in this book, it is much shorter and restricted to
    only a single method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `session` is a way to store temporary data, like if a user is logged in or
    not.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we will be building the authentication functionality. Authentication is
    a way to allow only people with the right credentials to access restricted sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will involve creating a database table and a Model:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user's table in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a user Model in app models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add insert, update delete methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we will create an admin Controller and import URL and `session` helpers
    as well as the `user` Model.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we will create the associated views.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The project will need a dashboard; this is like a home page for a project that
    requires a login and normally includes links to frequently visited content for
    the project. In this project, we just need to make sure that the dashboard has
    a file that exists so that it can be directed to it. You will be creating the
    dashboard view and including the layout file as well as header, footer, navigation,
    and errors. You will be adding HTML for the page structure.
  prefs: []
  type: TYPE_NORMAL
- en: Login
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The creation of the login pages also makes up part of this section.
  prefs: []
  type: TYPE_NORMAL
- en: In the login view, you will create a login form and also include the layout
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, they will create a login method to handle the login process:'
  prefs: []
  type: TYPE_NORMAL
- en: Part of the process is hashing the password using password hash and bcrypt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Get data method designed to return data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As well as creating views and the login method, we will create the `logout`
    method and also modify the config so that the home page, by default, will be the
    admin dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password Hashing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Password hashing uses bcrypt, the strongest algorithm available. Currently,
    the average computer would take 12 years to crack a password hash.
  prefs: []
  type: TYPE_NORMAL
- en: Part of the process is validating the data, checking if the username and passwords
    match what is stored in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Password hashing is creating a string from your password intended to be a one-way
    hash, and no user should be able to determine the original content of the hash.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Password hashing is not to be confused with encryption. The difference is that
    in password hashing, you can decrypt the hashed password to its original state.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Validation in PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll look at getting the following outcome.
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Validation in PHP](graphics/7_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section shows how to implement validation in PHP, although it will not
    work correctly yet as we are yet to create and supply the data source that forms
    the knowledge of the system.
  prefs: []
  type: TYPE_NORMAL
- en: To resolve this as part of the section, we will be manually creating a user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to implement validation in PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating Helpers:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can start building the authentication, we need two new helpers. In
    `app/Helpers,` create a new file called `Url.php` and enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This provides a single method called redirect that defaults to / when no parameters
    are passed. This is an easy way to redirect to another page of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the class after it''s been included into a page, use: `Url::redirect(''url/to/redirect/to'')`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To redirect to the home page, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Url::redirect()`'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need a way of using a session. Sessions are a way PHP can track data
    from page to page, which is perfect for our needs, such as being able to detect
    is a user is logged in or not by reading the session data.
  prefs: []
  type: TYPE_NORMAL
- en: We could use normal $_SESSION calls, but since we're using OOP, let's take advantage
    of that and build a session helper.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `Session.php` inside `app/Helpers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, set the namespace and class definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first method needed is to determine if a session has started. If it does
    update the `sessionStarted` parameter, it will set it to `false. This` will tell
    the `init` method to turn on sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, create a method called `set` which accepts two parameters, `$key` and
    `$value.` This is used to add a `$key` to a session and set the `$value` to the
    `$key:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a method called `pull` with one parameter. This will extract the
    `key` from the session and return it after removing it from the session, which
    is useful for one-time messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a get method. This will return a session from the provided key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, you want to see the contents of the session. Create a method called
    `display` that returns the `$_SESSION` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The last method is used to destroy the session key when the `$key` is provided,
    otherwise the entire session will be destroyed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The full class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to set sessions automatically when the application runs. We do
    this by adding `Session::init()` inside `app/Config.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This makes use of a `Use` Statement and includes a call to the `session's` `helper`
    class. Highlighting these OOP features may be beneficial at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Building Authentication:**'
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to start building the admin Controller and users Model, which
    will be the entry point for users to log in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new table in your database called users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ID is the `primary` key and will be set to auto increment, meaning each
    record will have a unique ID.
  prefs: []
  type: TYPE_NORMAL
- en: The `reset`_token will only be used when a reset password procedure is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the Model. Create a file called `User.php` inside `app\Models`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the namespace and import the base Model and set the class definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will be coming back to this model as we go along to add necessary methods
    as required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add methods for inserting, updating, and deleting records:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Creation of Admin Controller:**'
  prefs: []
  type: TYPE_NORMAL
- en: Now, create a new file in `app/Controllers` called `Admin.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will be the entry point for logging in and out of the admin dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Set the namespace and import the `baseController` and the `Session` and `URL`
    `helpers` as well as the `User` Model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the class definition and create a property called `$user.` Then, in the
    `__construct` method, initialize the `User` Model by calling `new User().`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This means to access any methods of the User Model, `$this->user` can be used.
  prefs: []
  type: TYPE_NORMAL
- en: The next method is `index()`. This will load the dashboard view as long as the
    user is logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that the user is logged in, an `if` statement is run to check for
    the existence of a session key called `logged_jn,` which is set only after logging
    in. If the user is not logged in, then redirect them to the `login` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user is logged in, then the `admin/index` view will be loaded. Create
    the view `app/views/admin/index.php` and the entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to create a `login` view. Create a folder called `auth` inside
    `app/views/admin` and create `login.php.`
  prefs: []
  type: TYPE_NORMAL
- en: First, include the `header` layout and then create a `div` with a caller of
    `wrapper` and `well`. The `well` class is a bootstrap class which gives a grey
    square styling. The `wrapper` class will be used to position the `div`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, include the `errors` layout to catch any errors or messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we'll create a form that will have a method of `post` to POST its contents
    to an `ACTION URL,` in this case, `/admin/login`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, create two inputs for the `username` and `password.` Make sure the input
    type for password is set to `password`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting the input type to `password` stops the password from being displayed
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: When the form is submitted, the named attributes of the inputs is how PHP will
    know what the data is.
  prefs: []
  type: TYPE_NORMAL
- en: A submit button is also required to submit the form. A good practice is to offer
    a reset option if the user cannot remember their login details. We will create
    a link that points the user to `/admin/reset`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, close the form and include the footer layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go back to the admin Controller and create a `login` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Put in a check that redirects the user if they are logged in. They should not
    be able to see the login page when they are already logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `login` method, create an empty `$errors` array and set the page
    `$title` and `load` a view calling `admin/auth/login,` passing the `$title` and
    `$errors` variables by using a `compact` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`compact()` makes it possible to use variables by simply entering their names
    without the `$:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This loads the `login` view and, upon pressing submit, won''t actually do anything.
    We''ll need to check for the form being submitted, but before doing that, we will
    need to add two methods to the `user` Model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`get_hash($username)` will select the `password` from the `users` table, where
    the `username` matches the one provided.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting `username = :username` creates a placeholder. Then, ['`:username' =>
    $username`] will use that placeholder so it knows what the value is going to be.
  prefs: []
  type: TYPE_NORMAL
- en: Then, check whether `$data[0]->password` is set and return it. Otherwise, return
    `null`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the same thing again for `get_data(),` only this time, return an array of
    data rather than a single column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now, inside our `login` method, we can check whether the form has been submitted
    by checking if the `$_POST` array contains an object called `submit.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, collect the form data and store them on local variables. Using `htmlspecialchars()`
    is a security measure, since it stops script tags from being able to be executed
    and renders them as plaintext.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, an `if` statement is run that calls `password_verify(),` which is a built-in
    function which returns `true` or `false`. The first parameter is the user-provided
    `$password,` and the second is the hashed password returned from the database
    by calling `$this->user->get_hash($username)`. As long as `password_verify` equals
    to `false,` the login check has failed.
  prefs: []
  type: TYPE_NORMAL
- en: Set an `$errors` variable to contain an `errors` message. Next, count the `$errors`
    and if it equals to `0,` this means there are no errors so get the user data from
    `$this->user->get_data($username).` Then, use the session helper to create a session
    key called `logged_in` with a value of `true,` and another session key with the
    user ID as its value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, redirect the user to the admin `index` page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The full method looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the framework if it''s not already running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Go to `http://localhost:8000/admin/login.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will see a login page. Pressing login will show an error message of '`Wrong
    username or password`' no matter what you enter, as there are currently no users
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create our login. We need a hashed password to store in the database.
    To create one in the `login` method, enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the `password` you want, in this case, `demo.` The second
    parameter is the type of `PASSWORD` function to use. Using the default `PASSWORD_
    BCRYPT` means PHP will use the strongest version possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you refresh the page, you will see a hash like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Copy this and insert a new record into the database client and leave the ID
    column blank. That will populate itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `username and email` and paste them into the `hash. F`or the password,
    enter a valid `datetime` for the `created at` section, such as 2017-12-04 23:04:00.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the record. Now, you will be able to set up the login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon logging in, you'll be redirected to `/admin.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to comment out or remove `echo password_hash('demo', PASSWORD_BCRYPT),`
    otherwise the hash will always be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: While we're at it, let's go ahead and add in the ability to log out. Logging
    out is a case of destroying the logged-in and `user_id` sessions. In the `Admin`
    Controller, create a new method called `logout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the method, destroy the session `object` and then redirect to the `login`
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now, go back to the application and click `logout` in the upper-right corner.
    You will be logged out and taken back to the `login` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, log back in. If you click on the `Admin` link, you will be taken to the
    default page. In this case, it would be better to load the admin as soon as you
    load the application. We can do this by setting the `Admin` Controller to be the
    default `app/Config.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you click on `Admin` (after reloading the page), you'll see the admin
    dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There was once a time where certain standards for password hashing were considered
    to be the highest level of internet security. But, like most technology, it is
    inevitably made available, and this weakens the effectiveness of its predecessors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Avoid the following hashing systems at all costs as they are not secure:'
  prefs: []
  type: TYPE_NORMAL
- en: MD5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shar 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shar 2 56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These password hashing functions are weak, and computers are now so powerful
    that it would take just seconds to break them.
  prefs: []
  type: TYPE_NORMAL
- en: It is advisable to comb through code when a developer is scoping out a new project
    to check for security flaws like the use of these.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned about the authentication process. We have seen how
    to make a login process. We have learned the process of password hashing. Now,
    we have experience in building, configuring, and routing functionality to a framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover the concept of password recovery wherein
    we will set up a functionality to reset the password in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Password Recovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section is all about setting up the ability to reset the password. Password
    resets are very crucial because there might be a case where users forget their
    passwords. We will now build a password recovery process, similar to the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Password Recovery](graphics/7_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generic password recovery example found on the web
  prefs: []
  type: TYPE_NORMAL
- en: We will create a method called reset in the admin Controller. This process loads
    up a view where the users will enter their email address to request an email.
    When this is processed, this will validate to make sure that the email address
    is valid and actually exists on the system.
  prefs: []
  type: TYPE_NORMAL
- en: This will check against the email, ensuring that it is in the right format,
    and will check that the email address provided exists in the database table named
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to a Third-Party Dependency PHP Mailer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Introduction to a Third-Party Dependency PHP Mailer](graphics/7_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Image from PHP Mailer: https://github.com/PHPMailer'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to add a third-party dependency by including PHP Mailer for sending
    out emails.
  prefs: []
  type: TYPE_NORMAL
- en: 'PHP Mailer works like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Provided that the validation had passed, we will then use PHP Mailer to send
    an email with a token. The token will later be received over email and entered
    into a hidden field as part of a form, fulfilling a requirement for the validation
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A token is simply a random string of letters and numbers. The idea is to generate
    something unique for that user to identify that the request is coming from them.
  prefs: []
  type: TYPE_NORMAL
- en: The next part of the process is to send an email to the user, and when the user
    clicks on this, create a method to process that request. This involves creating
    a change password method that accepts the token provided by the email, which then
    displays the view with the form inside it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the view, the token is resent in a hidden field. Additionally, users
    can enter a new password and confirm this password. When submitted, the Controller
    will process the data and validate it. This involves ensuring the token matches
    the user account and that the password is long enough and that both passwords
    match.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating this, when the update is put into practice, the users will be
    able to log in to the admin system automatically without having to re-enter their
    password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This saves users having to log in once they have reset their password. Technically,
    this is a user experience design update, although you can see here that UX changes
    are not just restricted to the designer realm.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP Mailer checks that the format is correct. In the case of an email, this
    will be expecting that the @ symbol is present. This is just one example of a
    validation check. PHP has methods built in so that it can determine that the correct
    format is a valid format.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Password Reset Mechanism for Our Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the authentication system, we need the ability to reset the password
    should we forget what it is. Here are the steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new method called `reset` in the `Admin` Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, check if the user is logged in and if they are, redirect them back to
    the admin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up an `errors` array and set the page title before loading a view called
    `reset:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a view called `reset.php` in `app/views/admin/auth` and enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The form will post to the same `url /admin/reset`. The only data we're collecting
    is the email address. The email address will be used to verify that the user exists
    before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: Now, go back to the reset method on the `Admin` Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, check if the form has been submitted with an `isset` and pass in the
    submit button name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, make sure that the email address is `isset,` otherwise default to `null.`
    Check that the email address is in the correct format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, check if the email address belongs to an existing user. To do this,
    create a new method in the user Model called `get_user_email($email)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This will return the email address if it exists, otherwise `null` will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding Controller, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This checks that the email address provided in the form does not match with
    the database, in which case a new error is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the validation check, there are no errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file; the method so far looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: At this point, among other things, an email needs to be sent.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A best practice is to not use PHP's built-in `mail(` `)` function and to use
    a library such as `phpmailer` ( [https://github.com/PHPMailer/](https://github.com/PHPMailer/)
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `composer.json` and `phpmailer` in the require list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and type `composer update` in Terminal. This will pull in `phpmailer,`
    making it available to our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the `Admin` Controller, import `phpmailer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, go to the `reset` method inside the following `if` statement. This is
    where we''ll resume:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to make a random token. For this, use `md5,` `uniqid,` and `rand`
    to make a random token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, set up a `data` and `where` array. The `$data` will specify the `reset_token`
    to have a value of `$token,` and the `$where` will be the email address. Pass
    them to the `update()` method of the user Model to update the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will store the `$token` against the users record in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Now, we set up the email to be sent by creating a new instance of `phpmailer`,
    and then setting who the email will come from. Change this as desired.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Pass the `$email` address that this is going to be sent to and set the mode
    to HTML by passing true to isHTML():'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the subject and the email body. We provide two bodies: a HTML one and a
    plaintext one. The plain text one is used in case the user''s email client cannot
    render HTML.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a link that points to `admin/change/password_token` when using `localhost:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's important to remember the URL `http://localhost:8000` will only work for
    your machine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, everything is set up. Send the email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a session to inform the user and redirect the admin/reset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The completed method looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks on the link in the email, we need to handle the request.
    To do this, create another method called `change_password` that accepts a parameter
    called `$token`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method takes the `$token,` passes it to a method in the `users` Model called
    `get_user_reset_token($token),` and returns the user object. If the token does
    not match the database, then null is returned.
  prefs: []
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The method looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `render` method passed the `$title`, `$token,` and `$errors` to the view.
  prefs: []
  type: TYPE_NORMAL
- en: Another view is needed. Create a view called `change_password.php` in `app/views/admin/auth:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The form has a hidden input called `$token.` Its value is the `$token` passed
    from the Controller, and this will be used to verify the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s also two inputs: a `password` and `confirm password.` These are used
    to collect the desired password.'
  prefs: []
  type: TYPE_NORMAL
- en: When the form is submitted and the form data is collected, a method called to
    `get_user_reset_token($token)` is made again to verify that the provided token
    is valid.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the passwords must match and be more than three characters in length.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there is no error, then update the user''s record in the database by passing
    to `$this->user->update` an array to clear out the `reset_token.` Hash the password
    using `password_hash(),` where the ID matches the user object and the token matches
    the provided token:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: After the update, log the user in and redirect them to the admin dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The full method looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This concludes the authentication sections. We can now log in, log out, and
    reset the password, should we forget it.
  prefs: []
  type: TYPE_NORMAL
- en: We have now come to the end of this section. Here, we learned how to build a
    password reset system and also gained further experience in using third-party
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to add CRUD functionality for user management.
  prefs: []
  type: TYPE_NORMAL
- en: Building CRUD for User Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CRUD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `users` section allows for the creation and management of users of the application
    built on top of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create the CRUD to enable:'
  prefs: []
  type: TYPE_NORMAL
- en: Creation of users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display of existing users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update of existing users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deletion of unwanted users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will be creating the different methods in the users Controller.
  prefs: []
  type: TYPE_NORMAL
- en: We will also be creating more methods in the users Model for the new queries
    that will be required to retrieve all users or to retrieve a specific user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Part of this process is to create a `construct` method, which allows us to secure
    all methods from unauthorized users. This means that to be able to access any
    method within the section, you must be logged in first. The `index` method lists
    all the users with options to edit and delete the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On delete, a confirmation will be presented first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to create an `add` view. In this view, there will be the form
    for the users of the application to create their record of a new user for the
    application. On submission of the form, the data will be collected and the validation
    process will start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will check that the data that is submitted is appropriate for its purpose
    and likely to be what is expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, there will be a check making sure that the username is more than
    three characters in length and does not already exist in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This process is the same for the email, and in the case of the email, it is
    making sure it is valid and does not exist already.
  prefs: []
  type: TYPE_NORMAL
- en: After the validation is passed, the user is created and a success message is
    recorded and visible to the user. The application user is then redirected to the
    users view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will then create an `update` method and `view,` which is much like the method
    and view for creating a user. The key difference is that the form is pre-populated
    with the user's details upon being loaded onto the page, and when the form is
    submitted, that particular user is updated rather than a new record being created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final method to be made is the `delete` method, which checks that the ID
    of the user is numeric and is not the same as the ID for the logged-in user so
    that they cannot delete themselves.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a case of the developer underestimating what a user might do. It is
    surprising what a user may do intentionally or unintentionally, and cases where
    they may delete themselves is easily done if the application takes no steps to
    prevent this.
  prefs: []
  type: TYPE_NORMAL
- en: After the record is deleted, a success message is created, and the user is redirected
    back to the user's page.
  prefs: []
  type: TYPE_NORMAL
- en: Building CRUD for User Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll look at having the following output displayed on our
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building CRUD for User Management](graphics/7_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When reading a user, know that in this table it is possible to control what
    is displayed. Not all information about that user needs to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will build our users section to `Create,` `Read,` `Update,`
    and `Delete` users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to build CRUD for user management:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need a few more queries. Open `app/Models/User.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Now, create a `Users` Controller in `app/Controllers.` Create `Users.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the namespace and import the helpers and `User` Model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Next, create a class property called `$user` and a `__construct` method. Then,
    check if the user is logged in, and if not, redirect them to the login page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new user instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Doing this check in a construct means all the methods of this class will be
    protected from unauthorized users.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create an `index` method. This will call `get_users()` and load a view
    and pass in the users object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: For the view, create `app/views/admin/users/index.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the layout files and create a table to display a list of users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Loop through all the user records. As a security measure, when printing data
    from a database, we''ll make use of `htmlentities().` This converts all tags into
    their HTML counterparts, meaning if any code had been injected into the database,
    it would simply be printed as text, making it useless:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Inside the loop, we have two action links for editing and deleting. Note that
    the user's ID is being passed to the end of the `href` value. This is to pass
    the ID to the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, we have an `Add User` button that points to `/users/add.` Let's create
    this. In your `Users` Controller, create a new method called `add():`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Now, create a view in `app/views/admin/users` called `add.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the layout files and set the page title. Next, create a form with a
    method set to `post`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need four inputs for `username`, `email`, `password,` and `confirm password`.
    Make sure each input has a name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sticky forms is useful in the event of errors.
  prefs: []
  type: TYPE_NORMAL
- en: Sticky forms are forms that retain their data in the event of an error. The
    inputs will still show the values entered into them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement sticky forms on the username and email, use a ternary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'This says if the `$_POST[''username'']` is set, then print it, otherwise print
    an empty string:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: When submitted, the form data will be posted to `/users/add`. This needs handling
    in the `add` method of the `Users` Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check for the form submission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, collect the form data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Then, start the validation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check that the `username` is more than 3 characters in length:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, check if the `$username` exists already in the database by passing `$username`
    to a `get_user_username($username)` method on the Model. If the results are the
    same as `$username,` then it already exists, so create an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: For email validation, check that the email is in a valid format by using `filter_var`
    and `FILTER_VALIDATE_EMAIL.` If this does not return true, create an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Like with the `username,` check if the `$email` exists in the database already:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'For the passwords, check that `$password` matches `$password_confirm` or creates
    an error. Otherwise, check that the password is more than 3 characters in length:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: If there are no errors, carry on and set a `$data array` containing the data
    to be inserted into the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note the password using a `password_hash()` function. This is using PHP's built-in
    password function that, by default, will use `bcrypt,` which at the time of writing
    is the most secure hashing technique.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the user by calling `$this->insert($data)` and set a message before
    redirecting back to /users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The full method looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: To edit users, the URL structure is `/users/edit/1.` The number at the end is
    the ID of the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a method called `edit($id)` that accepts a parameter called `$id.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, check that `$id` is a number, otherwise redirect back to `/users`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the user's data by calling `$this>user->get_user($id)` and pass in the ID
    to the `users` Model method. This will return a `user` object or `null` if the
    record is not found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the `$user` is equal to `null,` redirect to a `404` page. Otherwise, set
    up an `$errors` array, `$title,` and load the view, passing in user, errors, and
    title to `compact():`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a view in `app/views/admin/users` called `edit.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is almost identical to the `add.php` view. The main difference is in the
    username and email inputs. They are pre-populated with the user object:'
  prefs: []
  type: TYPE_NORMAL
- en: <input class="form-control" id="username" type="text" name="username" value="<?=$user->username;?>"
    required />
  prefs: []
  type: TYPE_NORMAL
- en: The `<?=$user->username;?>` is the user object in action using `->` after `$user.`
    You specify what column you want out of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s important that you do not pre-populate the password fields; they should
    only be filled in when the user wants to change the password. As such, put a message
    to inform the user that they should enter the password only if they want to change
    their existing password:'
  prefs: []
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When this is submitted, the `edit($id)` method will process the request.
  prefs: []
  type: TYPE_NORMAL
- en: Just like the `add()` method, check for the form submission, collect the form
    data, and perfect the form validation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This time, we won''t check if the username or email exists in the database,
    only that they are provided and are valid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, check that there are no errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `$data` array to update the user''s record. This time, only the username
    and email are provided:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'If the password has been updated, then add the password to the `$data` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'The where statement says where the ID matches `$id`. Run the `update()` and
    set a message and redirect to the users page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'The full `update` method looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The last step to complete the users Controller is adding the ability to delete
    users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like the edit, the URL structure will pass in an `$id` as part of the URL in
    the format of `/users/delete/2.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a method called `delete($id).`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check if the `$id` is numeric and check if the `$id` matches the session `$_SESSION['user_id'],`
    otherwise kill the page. You don't want to allow a user to delete their own record.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, get the user by calling `$this->user->get_user($id)` and check if the
    `$user` object is not equal to `null.` Otherwise, redirect to a `404` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a `$where` array that says where the `$id` matches the ID in the
    database. Note we do not use a `$data` array. In this case, we only pass a `$where`.
    This is because you cannot select columns, only a row, so the `$data` would be
    pointless.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, set a message and redirect back to `/users:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Go to `http://localhost:8000/users,` click on `Add User`, `and` fill in the
    form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, if you try to submit the form without any data, you will see the HTML
    client validation that comes from putting a required attribute on the inputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try filling in a user with the same username as one you've already created,
    and you'll see the server validation rules up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, fill in the form completely with new user details and you will be redirected
    to `/users` and see the new user, along with a confirmation message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Edit` next to the user you want to edit. You will then be presented
    with the edit form with the username and email filled in. Pressing submit will
    take you back to the users page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pressing `delete` will delete the user right away (providing the user is not
    you) with no confirmation. Let's fix that!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our requirement states that when the user presses `delete`, a confirmation window
    should be displayed. If OK is clicked, then the delete URL will be called, and
    if cancel is clicked, nothing will happen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `app/views/admin/users/index.php` and place this JavaScript before the
    `footer.php` code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: This defines a JavaScript function which accepts an ID and a `username.` When
    the `confirm()` passes a `window.location.href,` it will run, redirecting the
    page to the delete URL before passing in the ID `var` to the end of the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the loop where you see the delete link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: This calls `javascript:del(),` which triggers the confirmation popup and passes
    in the user's `ID` and `username`.
  prefs: []
  type: TYPE_NORMAL
- en: Save the file and run the page. When you click on delete, you will now see a
    confirmation prompt. Clicking OK will allow the delete to go ahead, while pressing
    cancel will stop the redirect from running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optional Activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add additional fields about a user, perhaps their address, age, hobbies, eye
    color, or anything of your, choosing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure these are processed in the `Method` and `Controller` and ensure that
    the database table is ready to accept them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that these are included in the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `index` view, the student can select information of their choosing to
    help identify the user in the table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this lesson, we have completed building functionality onto the framework,
    which allows for the management of users. We have performed the inclusion of Bootstrap
    to give some basic-level styling to our application. We have also implemented
    a password recovery mechanism in our application.
  prefs: []
  type: TYPE_NORMAL
- en: This completes the most basic requirements of the contacts application. However,
    all of this involves the ability to log in to an area containing the application,
    which is restricted without the correct username and password credentials. This
    is, at the moment, just an empty dashboard page. With everything in place, we
    can now move on to building the application to store the user's contacts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how to build a contacts management system
    on top of our current application which will include creating, reading, updating,
    deleting, and using a contact in the contacts application.
  prefs: []
  type: TYPE_NORMAL
