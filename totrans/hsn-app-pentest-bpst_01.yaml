- en: Configuring Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting an application penetration test, the system that will be used
    to attack the end application must be prepared. This involves configuring Burp
    Suite to become the interception proxy for various clients and traffic sources.
  prefs: []
  type: TYPE_NORMAL
- en: As with scoping for targets, it is important to reduce noise in the data we
    collect. We will use target whitelisting techniques, and work with the Burp Target
    feature to filter and reduce the clutter that testing modern applications can
    introduce.
  prefs: []
  type: TYPE_NORMAL
- en: Burp, or Burp Suite, is a graphical tool for testing web applications for security
    flaws. The tool is written in Java and was created by Dafydd Stuttard under the
    name of PortSwigger. Burp Suite is now actively developed by his company PortSwigger
    ...
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp can be downloaded for all the major operating systems from the PortSwigger
    website at [https://portswigger.net/burp](https://portswigger.net/burp). For Windows
    systems, both x64-bit and x32-bit installers are available. A standalone Java
    JAR file is also available in case you want to run Burp as a portable application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d369b4f-3a56-4e1a-a900-c2096169a0e7.png)'
  prefs: []
  type: TYPE_IMG
- en: When you start Burp Suite, you will be prompted to provide settings to set up
    your Burp project before you begin using the tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three options available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Temporary project: Select this if you want to use Burp for a quick inspection
    or a task that you do not need to save. You can get started immediately when you
    select this option and hit Next.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New project on disk: For a well-executed penetration test, it is very important
    to be able to record and retrieve logs of requests and responses that were part
    of the test. This option allows you to create a file on the disk that will store
    all the configuration data, requests, and responses, and proxy information that
    you set in Burp when you begin testing. A descriptive name can be provided to
    enable this file to be loaded in the future. A good rule of thumb is to create
    a name that provides information about the project itself. **ClientName-TypeOfTest-DDMMYYYY**
    is a good name to start with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open existing project: This option allows you to load any existing project
    files that have been created in the past using the New project on disk option.
    You can choose to pause the spider and scanner modules so that the project is
    loaded in a non-active state of attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on Next will take you to a page where you can choose any save configuration
    from before or continue using Burp defaults. You also get the option of disabling
    extensions when Burp starts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/419fa3bc-0e2c-43de-8f1a-8d8202611b33.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Start Burp to continue.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up proxy listeners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use Burp as a tool for application penetration testing, it must be set as
    a **Man in the Middle** (**MITM**) proxy. An MITM proxy sits in between a client
    and a server, and allows the user to tamper or drop messages passing through.
    In its simplest form, Burp Suite is an MITM proxy for HTTP(S) traffic.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/131b50dc-d01c-4237-93f0-2a4808483d02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, Burp will listen on port `8080` on the localhost IP of `127.0.0.1`.
    This can easily be changed, however, to an arbitrary free port on any IP address
    available on the system. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Proxy | Options tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Proxy Listeners, confirm that the Running checkbox is ticked in ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Managing multiple proxy listeners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Suite can provide multiple proxy listener interfaces if there is a requirement
    to do so. This simply means that Burp can start listeners on different ports and
    different IP addresses simultaneously, each with its own configurations and settings.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if a thick client application you are testing has multiple components,
    some of which can be configured to use a proxy, and some can't, or if its communication
    ports are hardcoded, or if traffic from a network-based browser or service needs
    to be captured, then multiple proxy listeners, each with their own configuration,
    can be created.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85c20b00-f3e3-4a70-b5f9-ab9950a521b4.png)'
  prefs: []
  type: TYPE_IMG
- en: You can disable a proxy listener simply by unchecking the checkbox next to the
    Interface name, if required. Next, we will understand the working of the non-proxy-aware
    clients.
  prefs: []
  type: TYPE_NORMAL
- en: Working with non-proxy-aware clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A non-proxy-aware client, in this context, is a client that makes HTTP requests
    but has no easy way to configure proxy options, or has no proxy support at all.
  prefs: []
  type: TYPE_NORMAL
- en: Common examples of non-proxy-aware clients are thick client applications or
    browser plugins that do not use the browser's proxy options. Burp's support for
    invisible proxying allows non-proxy-aware clients to connect directly to a proxy
    listener. This allows Burp to intercept and modify traffic based on target mappings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Architecturally, this works by setting up a local DNS entry for the remote
    target that the non-proxy-aware client communicates with. This DNS entry can be
    made in the local hosts file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The client ...
  prefs: []
  type: TYPE_NORMAL
- en: Creating target scopes in Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The target scope settings can be found under the Target | Scope tab. This allows
    you to configure in-scope targets for the penetration test that you are currently
    executing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding items to target scope allows you to affect the behavior of features
    throughout Burp. For example, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You can set display filters to show only the items in scope. This is available
    under Target | Site map and under Proxy | History, and is very useful when dealing
    with applications that use code from a lot of third parties.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Spider module is restricted to in-scope targets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can configure the proxy to intercept the requests and responses for only
    in-scope items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Professional version of Burp, you can even automatically initiate vulnerability
    scans of in-scope items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are essentially two ways of adding scope items. The first, and the recommended
    way, is to obtain targets from proxy history. For this to happen, the following
    approach is taken:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up your browser and Burp to talk to each other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn off interception mode in Burp and browse the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start with the home page and browse to every link; log in to authenticated areas
    and log out; submit every form; navigate to every single path that is listed in
    the `robots.txt`, and to every single link in the application's sitemap (if available);
    and, if applicable, access the application as different users (either with the
    same or different privilege levels).
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing this will populate the sitemap for the application as seen under the
    Target | Site map tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4666c1e3-f6fc-4993-8dfa-392077b9abe8.png)'
  prefs: []
  type: TYPE_IMG
- en: Once targets and URLs are populated in the Site map tab, you can right-click
    on any item and add that item to scope. This can be done both via the Target |
    Site map, or via the Proxy | History tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/274ba2e5-b518-4a6c-9be4-9de76b558302.png)'
  prefs: []
  type: TYPE_IMG
- en: The second method is to directly add items to the Target | Scope tab. Check
    the Use advanced scope control to enable the older interface for scope addition,
    which allows far more granular control over the scope entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example and create our scope for an imaginary penetration test.
    Let''s assume the application in scope is at `http://mutillidae-testing.cxm/`.
    Using the Target | Scope tab, we can add this and all future URLs from this application
    to the scope by setting the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Protocol: HTTP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Host or IP range: `mutillidae-testing.cxm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port: `^80$`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'File: `^*`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/97e09fac-9a38-4266-841c-ac8a04e8b631.png)'
  prefs: []
  type: TYPE_IMG
- en: This will add the application and any URLs on port `80` with the HTTP protocol
    to the scope.
  prefs: []
  type: TYPE_NORMAL
- en: You can also load a file containing a list of URLs that need to be in scope
    via the Load button on the Target | Scope page. This list must be URLs/targets
    separated by newlines. Large files may take time to load and Burp may appear frozen
    for a while, but will resume working when the file has been loaded and parsed.
  prefs: []
  type: TYPE_NORMAL
- en: Working with target exclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as we can add items to scope in Burp, we can also add items that need
    to be explicitly set out of scope. This, as is the case with in-scope items, can
    be added via two methods. The first is via the Proxy | History tab from the right-click
    context menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1db81071-a34b-42c8-8bb4-a3ff32520628.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second is from the Target scope tab in the Exclude from scope section.
    For example, if you want to exclude all sub-directories and files under `/javascript`,
    then the following options can be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Protocol: HTTP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Host or IP range: `mutillidae-testing.cxm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port: `^80$`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'File: `^/javascript/.*`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will exclude all URLs under the `/javascript/` directory on ...
  prefs: []
  type: TYPE_NORMAL
- en: Quick settings before beginning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section highlights five quick settings that can be enabled/set/configured
    before beginning a test to become productive immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enable server response interception**: By default, Burp is not configured
    to intercept server responses. This can, however, be enabled using the Intercept
    Server Responses options under Proxy | Options. Enable interception of responses
    when Request | Was modified and when Request | Was intercepted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d0909a19-a6b0-4649-8297-d618938a9bd0.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Enable the Unhide hidden form fields and select the Prominently highlight
    unhidden fields option**: This can be found under the Proxy | Options | Response
    Modification panel. This is very useful when browsing an application that stores
    or uses hidden HTML form fields to make application decisions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6b209fe4-053d-4925-b71b-ddfc2fdee4d8.png)'
  prefs: []
  type: TYPE_IMG
- en: The hidden field is visible on the page and highlighted very conspicuously,
    allowing you to edit the contents directly in the page if required.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0465181c-b202-406c-b2e3-d9b418416fe3.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Enable the Don''t send items to Proxy history or other Burp tools, if out
    of scope option**: This option can be found under Proxy | Options | Miscellaneous.
    When enabled, this option prevents Burp from sending out-of-scope requests and
    responses to the Proxy | History and other Burp tools, such as Scanner and Target.
    These requests and responses are sent and received, but not logged in any of Burp''s
    feature sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ca83f3f0-8650-4c7c-9543-fa39a5ce2196.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Set a keyboard shortcut to issue a Repeater request**: This is a very useful
    setting that can be enabled to avoid clicking the Go button using the mouse when
    working with the Repeater module of Burp. Burp already allows items to be sent
    to Repeater via the Proxy | History tab using *Ctrl* + *R*. Switching to the Repeater
    window can be achieved with *Ctrl* + *Shift* + *R*. Adding a shortcut to sending
    a request using Repeater completes the chain of keystrokes required to pick an
    item from Proxy | History, and sending it forward.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2ec6be3d-cb51-411a-a07b-d0afcba04527.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Schedule a Save state operation**: Burp has a task scheduler that can be
    invoked for certain tasks, such as resuming and pausing scans and spidering. You
    can reach the task scheduler from Project Options | Misc | Scheduled Tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One of the key operations that the task scheduler supports is the auto save
    state. Select Save state and click Next:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8ce2e613-f593-4534-bebd-4b820f36b77b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a file that will contain the save state and, if required, select the
    In-scope items only checkbox, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8621b22-0354-47d0-8197-ee9b216b01ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select when to start the task and the interval. During a busy engagement, saving
    every 30 minutes is a good interval to begin with:'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc7c726c-17fb-4146-b4e3-45c2a80aa62b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click finish to activate the Scheduled Task, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00dc92b7-f83c-4d4e-bb29-5f97ec77a325.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned to prepare the Burp Suite application. We configured
    Burp Suite to make it the interception proxy for various clients and traffic sources. In
    the next chapter, we will learn how to configure the client and set up mobile
    devices.
  prefs: []
  type: TYPE_NORMAL
