- en: Creating Forms with Redux Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controlled form with the local state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a form using Redux Form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing validation in a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms are a fundamental part of any web application, and in the following recipes,
    we are going to learn how to use forms with and without Redux Form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controlled form with the local state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we are going to create a simple Todo List to use a form using
    our local state.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to install the `uuid` package to generate random IDs,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create our controlled form by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, for the Todo List, we will create a new component called `Todo` into
    `src/components/Todo/index.jsx`. The skeleton we will use is shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that we need to add the component to our `src/routes.jsx`, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: File: src/routes.jsx
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go to `/todo` you will see the input, but you will probably notice that
    it is not possible to write anything on it, and this is because we are connecting
    our local state (`this.state.task`) to our input value, but we need an `onChange`
    function to update our state, as demonstrated in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can write anything in our input, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5f6a8fe8-212c-425e-9885-da4300381960.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To save the item written in our input, we need to add an `onSubmit` function
    in our `form` tag, where we need to update our local state to push the item to
    the `items` array. Also, we need to include our `List` component, where we are
    going to display all the items. The complete code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `List` component will be a functional component where we will render a
    list of items, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/List.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to add our CSS file, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/Todo.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Todo List will look as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c5026115-303f-4909-a8bc-410f3a67552b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, the only way to retrieve the values from input forms is by using
    the local state with an `onChange` function to update the value of the input.
    If you connect a state to the input value, but you don't add an `onChange` callback
    to update it, you won't be able to write anything, since the Virtual DOM is not
    being updated, and the only way to do so is by updating our local state.
  prefs: []
  type: TYPE_NORMAL
- en: Building a form using Redux Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Redux Form** is typically used for large forms or steps forms because it
    has a Redux state to keep the values through the entire form. Also, Redux Form
    is handy to validate the data and efficiently handle the submission.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to install Redux Form as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to make the same Todo List, but this time using
    Redux Form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''ve installed Redux Form, we need to do some modifications to the code
    of the last recipe to implement Redux Form. The first thing we need to do is to
    add a reducer for our forms. For this, we need to import a reducer from `redux-form`,
    and we can change the name of the variable to `formReducer` to be more explicit,
    and then add the reducer as a form into our `combineReducers`, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/reducers/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Normally, all the forms we create with Redux Form need their component, and
    so that means we need to create a component to handle our Todo Form. As we need
    to create a file called `TodoForm.jsx` into our `Todo` folder, the code of our
    component is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/TodoForm.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Redux Form contains many useful props to handle our data in the forms. I market
    the props we are going to use for this recipe (`addTask` is a prop passed from
    another component, so that one is not properly part of Redux Form), you can see
    the all the props by adding a console in your render method `console.log(this.props);`,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bb4aaf76-a242-46fc-8fab-9ada82003a37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s modify our `Todo` component to include the `TodoForm` component,
    and receive the data through our `addTask` method, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see, Redux Form is easy to implement:'
  prefs: []
  type: TYPE_NORMAL
- en: On the first step, we connected our Redux Form reducer to our store
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second step, we create our `TodoForm` component, where we render our
    form fields, connect our form reducer to the store, and where we send back the
    values to the `addTask` callback
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the last step, we render our `TodoForm` and send the `addTask` callback,
    which handles the task value to insert it into the local state
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the end, we are going to see the same result as the last recipe, but now
    using Redux Form, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/907eed37-f3bc-4e2f-af75-1d527358a1f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Implementing validation in a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last part of our Redux Form implementation is the validation. Using the
    previous recipe, let's add validation of the input task.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The validations are needed in any form, so let''s add some validations to our
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to modify our `TodoForm.jsx` and we need to create a `validate`
    function, where we need to validate if our task is not empty. We then need to
    create a `renderError` method to render our error message if we try to add an
    empty task, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/TodoForm.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create a `TodoForm.css` to add some styles to our error message,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Todo/TodoForm.css'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we try to add a new task without any value and press *Enter* to submit the
    form, we are going to see the view shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/09f9546b-3bcc-4ad2-9268-61b2dd935c15.png)'
  prefs: []
  type: TYPE_IMG
