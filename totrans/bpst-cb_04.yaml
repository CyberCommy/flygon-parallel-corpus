- en: Assessing Authentication Schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing for account enumeration and guessable accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for weak lock-out mechanisms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for bypassing authentication schemes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for browser cache weaknesses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the account provisioning process via REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the basic penetration testing of authentication schemes.
    *Authentication* is the act of verifying whether a person or object claim is true.
    Web penetration testers must make key assessments to determine the strength of
    a target application's authentication scheme. Such tests include launching attacks,
    to determine the presence of account enumeration and guessable accounts, the presence
    of weak lock-out mechanisms, whether the application scheme can be bypassed, whether
    the application contains browser-caching weaknesses, and whether accounts can
    be provisioned without authentication via a REST API call. You will learn how
    to use Burp to perform such tests.
  prefs: []
  type: TYPE_NORMAL
- en: Software tool requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the recipes in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Broken Web Applications (VM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Mutillidae link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GetBoo link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Firefox browser configured to allow Burp to proxy traffic ([https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for account enumeration and guessable accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By interacting with an authentication mechanism, a tester may find it possible
    to collect a set of valid usernames. Once the valid accounts are identified, it
    may be possible to brute-force passwords. This recipe explains how Burp Intruder
    can be used to collect a list of valid usernames.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perform username enumeration against a target application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure Burp and the OWASP BWA VM are running and that Burp is configured in
    the Firefox browser used to view the OWASP BWA applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the OWASP BWA Landing page, click the link to the GetBoo application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the **Log In** button, and at the login screen, attempt to log in with
    an account username of `admin` and a password of `aaaaa`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note the message returned is **The password is invalid**. From this information,
    we know admin is a valid account. Let's use Burp **Intruder** to find more accounts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Burp''s **Proxy** | **HTTP history** tab, find the failed login attempt
    message. View the **Response** | **Raw** tab to find the same overly verbose error
    message, **The password is invalid**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Flip back to the **Request** | **Raw** tab and right-click to send this request
    to **Intruder**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to Burp''s **Intruder** tab and leave the **Intruder** | **Target** tab
    settings as it is. Continue to the **Intruder** | **Positions** tab. Notice how
    Burp places payload markers around each parameter value found. However, we only
    need a payload marker around the password value. Click the **Clear § **button
    to remove the payload markers placed by Burp:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, highlight the name value of admin with your cursor and click the **Add
    §** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Continue to the **Intruder** | **Payloads** tab. Many testers use word lists
    to enumerate commonly used usernames within the payload marker placeholder. For
    this recipe, we will type in some common usernames, to create a custom payload
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Payload Options [Simple list]** section, type the string `user` and
    click the **Add** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a few more strings such as `john`, `tom`, `demo`, and, finally, `admin`
    to the payload-listing box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the **Intruder** | **Options** tab and scroll down to the **Grep – Match**
    section. Click the checkbox **Flag result** **items with responses matching these
    expressions**. Click the **Clear** button to remove the items currently in the
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click **Yes** to confirm you wish to clear the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the string `The password is invalid` within the textbox and click the
    **Add** button. Your **Grep – Match** section should look as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click the **Start attack** button located at the top of the **Options** page.
    A pop-up dialog box appears displaying the payloads defined, as well as the new
    column we added under the **Grep – Match** section. This pop-up window is the
    attack results table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The attack results table shows each request with the given payload resulted
    in a status code of **200** and that two of the payloads, **john** and **tom**,
    did not produce the message **The password is invalid** within the responses.
    Instead, those two payloads returned a message of **The user does not exist**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The result of this attack results table provide a username enumeration vulnerability
    based upon the overly verbose error message **The password is invalid**, which
    confirms the user account exists on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This means we are able to confirm that accounts already exist in the system
    for the users `user`, `demo`, and `admin`.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for weak lock-out mechanisms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Account lockout mechanisms should be present within an application to mitigate
    brute-force login attacks. Typically, applications set a threshold between three
    to five attempts. Many applications lock for a period of time before a re-attempt
    is allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testers must test all aspects of login protections, including challenge
    questions and response, if present.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Determine whether an application contains proper lock-out mechanisms in place.
    If they are not present, attempt to brute-force credentials against the login
    page to achieve unauthorized access to the application. Using the OWASP Mutillidae
    II application, attempt to log in five times with a valid username but an invalid
    password.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure Burp and the OWASP BWA VM are running and that Burp is configured in
    the Firefox browser used to view the OWASP BWA applications.
  prefs: []
  type: TYPE_NORMAL
- en: From the OWASP BWA Landing page, click the link to the OWASP Mutillidae II application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Firefox browser to the login screen of OWASP Mutillidae II. From the
    top menu, click **Login**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the login screen, attempt to login five times with username `admin` and
    the wrong password of `aaaaaa`. Notice the application does not react any differently
    during the five attempts. The application does not change the error message shown,
    and the admin account is not locked out. This means the login is probably susceptible
    to brute-force password-guessing attacks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's continue the testing, to brute-force the login page and gain unauthorized
    access to the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Proxy** | **HTTP history** tab, and look for the failed login attempts.
    Right-click one of the five requests and send it to **Intruder**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to Burp''s **Intruder** tab, and leave the **Intruder** | **Target** tab
    settings as it is. Continue to the **Intruder** | **Positions** tab and notice
    how Burp places payload markers around each parameter value found. However, we
    only need a payload marker around the password''s value. Click the **Clear § **button
    to remove the payload markers placed by Burp:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Then, highlight the password value of **aaaaaa** and click the **Add §** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue to the **Intruder** | **Payloads** tab.  Many testers use word lists
    to brute-force commonly used passwords within the payload marker placeholder.
    For this recipe, we will type in some common passwords to create our own unique
    list of payloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Payload Options [Simple list]** section, type the string `admin123`
    and click the **Add** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a few more strings, such as `adminpass`, `welcome1`, and, finally, `admin`
    to the payload-listing box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the **Intruder** | **Options** tab and scroll down to the **Grep – Extract**
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click the checkbox **Extract the following items from responses** and then click
    the **Add** button. A pop-up box appears, displaying the response of the unsuccessful
    login attempt you made with the `admin`/`aaaaaa` request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the search box at the bottom, search for the words `Not Logged In`. After
    finding the match, you must highlight the words **Not Logged In**, to assign the
    grep match correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you do not highlight the words properly, after you click **OK**, you will
    see **[INVALID]** inside the **Grep – Extract** box. If this happens, remove the
    entry by clicking the **Remove** button and try again by clicking the **Add**
    button, perform the search, and highlight the words.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you highlight the words properly, you should see the following in the **Grep
    – Extract** box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, click the **Start attack** button at the top right-hand side of the **Options**
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pop-up attack results table appears, displaying the request with the payloads
    you defined placed into the payload marker positions. Notice the attack table
    produced shows an extra column entitled **ReflectedXSSExecution**. This column
    is a result of the **Grep – Extract Option** set previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From this attack table, viewing the additional column, a tester can easily
    identify which request number successfully brute-forced the login screen. In this
    case, **Request 4**, using credentials of the username `admin` and the password
    `admin` logged us into the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select **Request 4** within the attack table, and view the **Response** | **Render**
    tab. You should see the message **Logged In Admin: admin (g0t r00t?)** on the
    top right-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Close the attack table by clicking the **X** in the top right-hand corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You successfully brute-forced the password of a valid account on the system,
    due to the application having a weak lock-out mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for bypassing authentication schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications may contain flaws, allowing unauthorized access by means of bypassing
    the authentication measures in place. Bypassing techniques include a **direct
    page request** (that is, forced browsing), **parameter modification**, **session
    ID prediction**, and **SQL Injection**.
  prefs: []
  type: TYPE_NORMAL
- en: For the purposes of this recipe, we will use parameter modification.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Add and edit parameters in an unauthenticated request to match a previously
    captured authenticated request. Replay the modified, unauthenticated request to
    gain access to the application through bypassing the login mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the Firefox browser to the home page of OWASP Mutillidae II, using the
    **Home** button from the top menu, on the left-hand side. Make sure you are *not
    logged into* the application. If you are logged in, select **Logout** from the
    menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In Burp, go to the **Proxy** | **HTTP history** tab and select the request
    you just made, browsing to the home page as unauthenticated. Right-click, and
    then select **Send to Repeater**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using this same request and location, right-click again, and then select **Send
    to Comparer** (request):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Return to the home page of your browser and click the **Login/Register** button.
    At the login page, log in with the username of `admin` and the password of `admin`.
    Click **Login**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you log in, go ahead and log out. Make sure you press the **Logout** button
    and are logged out of the admin account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Burp, go to the **Proxy** | **HTTP history** tab and select the request
    you just made, logging in as `admin`. Select `GET` request immediately following
    the `POST 302` redirect. Right-click and then select **Send to** **Repeater**
    (request):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00160.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using this same request and location, right-click again and **Send to Comparer **(request):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to Burp''s **Comparer** tab. Notice the two requests you sent are highlighted.
    Press the **Words** button on the bottom right-hand side, to compare the two requests
    at the same time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00162.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A dialog pop-up displays the two requests with color-coded highlights to draw
    your eyes to the differences. Note the changes in the **Referer** header and the
    additional name/value pair placed in the admin account cookie. Close the pop-up
    box with the **X** on the right-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Return to **Repeater**, which contains your first `GET` request you performed
    as unauthenticated. Prior to performing this attack, make sure you are completely
    logged out of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can verify you are logged out by clicking the **Go** button in **Repeater**
    associated to your unauthenticated request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00164.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now flip over to the **Repeater** tab, which contains your second `GET` request
    as authenticated user `admin`. Copy the values for **Referer** header and **Cookie**
    from the authenticated request. This attack is parameter modification for the
    purpose of bypassing authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00165.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Copy the highlighted headers (**Referer and Cookie**) from the authenticated
    `GET` request. You are going to paste those values into the unauthenticated `GET`
    request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the same headers in the unauthenticated `GET` request by highlighting
    and right-clicking, and select **Paste**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and select **Paste** in the **Repeater** | **Raw** tab of the first `GET`
    request you performed as unauthenticated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Go** button to send your modified `GET` request. Remember, this
    is the first `GET` request you performed as unauthenticated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that you are now logged in as admin in the **Response** | **Render**
    tab. We were able to bypass the authentication mechanism (that is, the log in
    page) by performing parameter manipulation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00166.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By replaying both the token found in the cookie and the referer value of the
    authenticated request into the unauthenticated request, we are able to bypass
    the authentication scheme and gain unauthorized access to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for browser cache weaknesses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Browser caching is provided for improved performance and better end-user experience.
    However, when sensitive data is typed into a browser by the user, such data can
    also be cached in the browser history. This cached data is visible by examining
    the browser's cache or simply by pressing the browser's *back* button.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the browser's back button, determine whether login credentials are cached,
    allowing for unauthorized access. Examine these steps in Burp, to understand the
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Log into the Mutillidae application as `admin` with the password `admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now log out of the application by clicking the **Logout** button from the top
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify you are logged out by noting the **Not Logged In** message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View these steps as messages in Burp''s **Proxy** | **History** as well. Note
    the logout performs a **302** redirect in an effort to not cache cookies or credentials
    in the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00167.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the Firefox browser, click the back button and notice that you are now
    logged in as admin even though you did not log in! This is possible because of
    cached credentials stored in the browser and the lack of any cache-control protections
    set in the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now refresh/reload the page in the browser, and you will see you are logged
    out again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Examine the steps within the **Proxy** | **HTTP history** tab. Review the steps
    you did through the browser against the messages captured in the **Proxy** | **HTTP
    history** table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request 1 in the following screenshot is unauthenticate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request 35 is the successful login (302) as ``admin``
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request 37 is the logout of the `admin` account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requests 38 and 39 are the refresh or reload of the browser page, logging us
    out again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is no request captured when you press the browser''s back button. This
    is because the back button action is contained in the browser. No message was
    sent through Burp to the web server to perform this action. This is an important
    distinction to note. Nonetheless, we found a vulnerability associated with weak
    browser-caching protection. In cases such as this, penetration testers will take
    a screenshot of the logged-in cached page, seen after clicking the back button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00168.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Testing the account provisioning process via the REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Account provisioning is the process of establishing and maintaining user accounts
    within an application. Provisioning capabilities are usually restricted to administrator
    accounts. Penetration testers must validate account-provisioning functions are
    done by users providing proper identification and authorization. A common venue
    for account provisioning is through **Representational State Transfer** (**REST**)
    API calls. Many times, developers may not put the same authorization checks in
    place for API calls that are used in the UI portion of an application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using REST API calls available in the OWASP Mutillidae II application, determine
    whether an unauthenticated API call can provision or modify users.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you are not logged into the application. If you are, click the **Logout**
    button from the top menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within Mutillidae, browse to the **User Lookup (SQL) Page** and select **OWASP
    2013** | **A1 Injection (SQL)** | **SQLi – Extract Data** | **User Info (SQL)**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00169.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Type `user` for **Name** and `user` for **Password**,and click **View Account
    Details***.* You should see the results shown in the next screenshot. This is
    the account we will test provisioning functions against, using REST calls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00170.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Through Spidering, Burp can find `/api` or `/rest` folders. Such folders are
    clues that an application is REST API enabled. A tester needs to determine which
    functions are available through these API calls.
  prefs: []
  type: TYPE_NORMAL
- en: For Mutillidae, the `/webservices/rest/` folder structure offers account provisioning
    through REST API calls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To go directly to this structure within Mutillidae, select **Web Services**
    | **REST** | **SQL Injection** | **User** **Account Management**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You are presented with a screen describing the supported REST calls and parameters
    required for each call:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to invoke one of the REST calls. Go to the **Proxy** | **HTTP history**
    table and select the latest request you sent from the menu, to get to the **User
    Account Management** page. Right-click and send this request to **Repeater**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00173.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In Burp''s **Repeater**, add the `?`, followed by a parameter name/value pair
    of `username=user` to the URL. The new URL should be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00174.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the **Go** button and notice we are able to retrieve data as an unauthenticated
    user! No authentication token is required to perform such actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00175.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's see what else we can do. Using the SQL Injection string given on the **User
    Account Management** page, let's attempt to dump the entire user table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Append the following value after `username=`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The new URL should be the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the **Go** button after making the change to the `username` parameter.
    Your request should look as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice we dumped all of the accounts in the database, displaying all usernames,
    passwords, and signatures:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00177.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Armed with this information, return to **Proxy** | **HTTP History**, select
    the request you made to see the **User** **Account Management** page, right-click,
    and send to **Repeater**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **Repeater**, modify the `GET` verb and replace it with `DELETE` within
    the **Raw** tab of the **Request**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Move to the **Params** tab, click the **Add** button, and add two `Body` type
    parameters: first, a username with the value set to `user`, and second, a password
    with the value set to `user`, and then click the **Go** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice we deleted the account! We were able to retrieve information and even
    modify (delete) rows within the database without ever showing an API key or authentication
    token!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: If you wish to re-create the user account, repeat the previous steps,
    replacing *delete *with *put*. A signature is optional. Click the **Go** button.
    The user account is re-created again.'
  prefs: []
  type: TYPE_NORMAL
