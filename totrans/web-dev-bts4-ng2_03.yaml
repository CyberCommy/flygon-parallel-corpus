- en: Chapter 3. Advanced Bootstrap Components and Customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we continue to discover the world of Bootstrap 4\. You will
    meet new components, and we will continue to demonstrate the use of Bootstrap
    4 by showcasing a project we started to build in the preceding chapter. At the
    end of the chapter, you will have a solid understanding of:'
  prefs: []
  type: TYPE_NORMAL
- en: How to display content with Jumbotron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How create a slideshow with Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How use typography in text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How create input, button, and list groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting attention with images and labels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using drop-down menus and tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to capture a customer's attention
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Welcome page presents core marketing messages to website users, and it
    needs to get extra attention from them. We can use two different components to
    make that happen. Let''s start with:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal, create folder `ecommerce` and move in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the content of the project from the folder `chapter_3/1.ecommerce-seed`
    into the new project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following script to install npm modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the TypeScript watcher and lite server with the next command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This script opens a web browser and navigates to the Welcome page of the project.
    Now, we are ready to start development.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying content with Jumbotron
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the **Jumbotron** component to draw significant attention to marketing
    messages. It is a lightweight component, styled with large text and dense padding.
    We need to show:'
  prefs: []
  type: TYPE_NORMAL
- en: The marketing message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The slogan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential information for customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open the `app.component.html` page, find the first container under Navbar and
    change its content to the Jumbotron component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Displaying content with Jumbotron](Image00038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can force Jumbotron to use the full width of the page with the help of the
    `jumbotron-fluid` class and `container` or the `container-fluid` class within.
  prefs: []
  type: TYPE_NORMAL
- en: I used standard HTML markup elements inside Jumbotron, but it might look better
    with a different style.
  prefs: []
  type: TYPE_NORMAL
- en: Typography
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding code, we used text elements without any classes, to see how
    Bootstrap renders them on the page. It uses the global default `font-size` of
    `16px` and `line-height1,5` . `Helvetica Neue, Helvetica, Arial, Sans Serf` are
    the default `font-family` in Bootstrap 4\. Every element has a `box-sizing` to
    avoid exceeding the width due to padding or borders. The paragraph element has
    a bottom margin of `1rem` . The body has a declared white `background-color` .
    Any page linked to Bootstrap 4 style sheets renders with those page-wide defaults.
  prefs: []
  type: TYPE_NORMAL
- en: Headings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All heading elements, `<h1>` through `<h6>` , have a weight of `500` and a `line-height`
    of `1,1` . Bootstrap's developers have removed `margin-top` from them, but added
    the `margine-bottom` of `0,5rem` for easy spacing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In cases when you need to display some inline text you can use the `h1` through
    `h6` classes to style elements that mimic headings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Headings](Image00039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sub-headings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you require the inclusion of a sub-heading or secondary text smaller than
    the original, you may use the `<small>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Sub-headings](Image00040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can show faded and smaller text with the help of the `text-muted` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Sub-headings](Image00041.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Display headings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the standard heading is not enough and you need to draw the user''s attention
    to something special, I recommend using the `display-*` classes. There are four
    different sizes, and that means you can render the `<h1>` element with four different
    styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Display headings](Image00042.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Lead
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can add the `lead` class to any paragraph to make it stand out from other
    text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Lead](Image00043.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s update the Jumbotron component to make it look better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Lead](Image00044.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The marketing message looks gorgeous, the slogan is in place, but we did not
    change the essential information for customers because there was no need.
  prefs: []
  type: TYPE_NORMAL
- en: Inline text elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is a set of different styles we can use as inline text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Inline text elements](Image00045.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Abbreviations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To mark any text as an abbreviation or acronym, we can use the `<abbr>` tag.
    It shows the standing out of other text and provides the expanded version when
    you hover over it with the help of the `title` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Abbreviations](Image00046.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The class `initialism` makes an abbreviation for a slightly smaller font size.
  prefs: []
  type: TYPE_NORMAL
- en: Blockquotes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can quote the content from another source within our document with the help
    of the `blockquote` tag and class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Blockquotes](Image00047.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Also, we can add the author at the bottom of the `blockquote` with nested `footer`
    and `cite` tags.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Blockquotes](Image00048.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Do you prefer blockquotes aligned to the right side? Let''s use the `blockquote-reverse`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Blockquotes](Image00049.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Address
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We use the `address` element to display customer contact information at the
    bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Address](Image00050.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_3/2.ecommerce-jumbotron` folder
  prefs: []
  type: TYPE_NORMAL
- en: Displaying content with a carousel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another component we can use to get customers' extra attention is the carousel.
    It helps us create elegant and interactive images or text slideshows. The carousel
    is a combination of different components, each of them playing a very specific
    role.
  prefs: []
  type: TYPE_NORMAL
- en: Carousel container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The container wraps all other content so the plugin JavaScript code can find
    it by the `carousel` and `slide` classes. It must have an `id` for the carousel
    controls and inner components to function properly. If you want the carousel to
    start an animation when the page loads, use the `data-ride="carousel"` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Carousel inner
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This container holds carousel items as scrollable content and marks them with
    the `carousel-inner` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Carousel item
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `carousel-item` class keeps the content of slides such as images, text,
    or a combination of them. You need to wrap text-based content with a `carousel-caption`
    container. The `active` class marks the item as initialized and without it the
    carousel won't be visible.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Carousel indicators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The carousel may have indicators to display and control the slideshow via a
    click or a tap to select a particular slide. Usually, it is an ordered list marked
    with a `carousel-indicators` class. Every item on the list must have the `data-target`
    property keeping the carousel container `id` . Because it''s an ordered list,
    you don''t need to sort it. If you need to alter the slide position around the
    current location use the  `data-slide` property to accept the keywords `prev`
    and `next` . Another option is to use the `data-slide-to` property to pass the
    index of the slide. Use the `active` class to mark the initial indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Carousel controls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use an alternative way to display slides via carousel control buttons.
    In this case, the two anchor elements play the role of the buttons. Add the `left`
    or the `right` classes to a particular button together with `carousel-control`
    . Use the carousel container `id` as a link in the `href` property. Set `prev`
    or `next` to the `data-slide` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![Carousel controls](Image00051.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s compare the final result and wireframe of the Welcome page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Carousel controls](Image00052.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The wireframe of the Welcome page
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, they look absolutely the same. Actually, we have finished with
    the Welcome page, and now it's time to move on to the Products page development.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_3/3.ecommerce-carousel` folder
  prefs: []
  type: TYPE_NORMAL
- en: Products page layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s have a look at a wireframe of the Products page and imagine splitting
    it into rows and columns as we did for the Welcome page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Products page layout](Image00053.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first row still contains our navigation header, but I put the other content
    into another single row. There are two columns with **Quick Shop** and **Categories**
    in one, and the grid includes a set of products in another one. Why have I split
    the Products page like that? The answer is pretty straightforward. Bootstrap always
    renders content by rows and then by columns inside them. On devices with a small
    layout, the header in the first row usually collapses into a hamburger menu. At
    the bottom, it displays the second row with **Quick Shop** , **Categories** and,
    below, the set of products aligned vertically.
  prefs: []
  type: TYPE_NORMAL
- en: I cloned the last project and cleaned the code but saved the navigation header
    and footer, because I don't want to mix the development of the Products page with
    the original one. Let's talk about the components in the first column.
  prefs: []
  type: TYPE_NORMAL
- en: Quick Shop component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This component is just a search input with a button. I don't implement business
    logic, but just design the page. This one is based on the Card element we explored
    in [Chapter 2](text00023.html#page "Chapter 2. Working with Bootstrap Components")
    ,  *Working with Bootstrap Components* . I would like to use the input group component,
    so let's see what it can do.
  prefs: []
  type: TYPE_NORMAL
- en: Input group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a group of form controls and text combined in one line. It was designed
    to extend form controls by adding text, buttons, or groups of buttons on either
    side of the input field and aligning them against each other. Creating an input
    group component is very easy. Just wrap the `input` with an element marked with
    the `input-group` class and append or prepend another one with an `input-group-addon`
    class. You can use the input group out of any form, but we need to mark the input
    element with the `form-control` class to have it width 100%.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the input group for textual input elements only.
  prefs: []
  type: TYPE_NORMAL
- en: Text addons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is an example of a text field with an appended addon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![Text addons](Image00054.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another example with a prepended addon is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![Text addons](Image00055.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And finally we can combine all of them together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![Text addons](Image00056.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sizing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two form sizing classes, `input-group-lg` and `input-group-sm` ,
    which  make an input group bigger or smaller than the standard one. You need to
    apply one to the element marked with `input-group` class, and the content within
    will automatically resize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![Sizing](Image00057.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Checkboxes and radio option addons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can use a checkbox or radio option instead of text addons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Checkboxes and radio option addons](Image00058.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Button addons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most familiar elements are buttons, and you can use them within the input
    group. Just add one extra level of complexity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![Button addons](Image00059.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drop-down menu addons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can use buttons to show drop-down menus. We will speak about drop-down menus
    a bit later in this chapter. The following code demonstrates the use of drop-down
    menus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![Drop-down menu addons](Image00060.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Segmented buttons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes it can be useful to split button and drop-down menus, so that the
    layout is available as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![Segmented buttons](Image00061.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we know how to use input groups, let''s create a **Quick Shop** component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![Segmented buttons](Image00062.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_3/4.ecommerce-input-group` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Categories component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Categories component lies under the **Quick Shop** . I would like to use
    the list group component to hold categories from which the customer can choose.
  prefs: []
  type: TYPE_NORMAL
- en: List group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This one is a flexible component for displaying an unordered list of elements,
    such as simple items or custom content, with ease. Just mark any unordered list
    element with the `list-group` class and every item with `list-group-item` to quickly
    create the **list group** component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![List group](Image00063.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Listing with tags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes we need to display a bit more information about every item such as
    counts, activities, and others. For that purpose we can add **tag** to each item
    and list group automatically to position it to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![Listing with tags](Image00064.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Linked list groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can quickly create a vertical menu with a linked list group component. This
    kind of list is based on the `div` tag instead of `ul` . The whole item of this
    list is an anchor element, and it can be:'
  prefs: []
  type: TYPE_NORMAL
- en: Clickable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hoverable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighted with the help of an `active` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabled with the aid of a class with the same name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![Linked list groups](Image00065.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Button list groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you prefer, use buttons instead of anchor elements, then you need to change
    the tag name of each item and add the `list-group-item-action` class into it.
    We can use `active` or `disabled` to make the item appear different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![Button list groups](Image00066.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the standard `btn` class in list groups is prohibited.
  prefs: []
  type: TYPE_NORMAL
- en: Contextual classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also style individual list items with contextual classes. Just add
    a contextual class suffix to the `list-group-item` class. The item with the `active`
    class displays as a darkened version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![Contextual classes](Image00067.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Custom content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, you can add HTML within every item of a list group component, and
    make it clickable with an anchor element. Bootstrap 4 provides the `list-group-item-heading`
    and `list-group-item-text` classes for heading and text content. Any item with
    the `active` class displays custom content as a darkened version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![Custom content](Image00068.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, it''s time to create our **Categories** component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '![Custom content](Image00069.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are finished with the first column, so let's go on to develop the second
    one, which contains the grid with a set of products.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_3/5.ecommerce-list-group` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a product grid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to display a set of products in a grid of rows and columns inside the
    second column.
  prefs: []
  type: TYPE_NORMAL
- en: Nested rows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can nest additional rows inside any column to create a more complex layout
    similar to the one we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We create as many columns as we need within one row and Bootstrap will display
    them properly, based on the viewport size:'
  prefs: []
  type: TYPE_NORMAL
- en: One column takes the whole size on an extra small viewport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two columns on a small viewport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three columns on large and bigger viewports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a similar way, we use the Card to display information and controls in the
    product component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '![Product component](Image00070.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's talk a bit about the elements we have used here.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_3/6.ecommerce-grid-in-grid` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To the extent that we use images in the Card element, I think it's a good idea
    to talk about images with responsive behavior and image shapes.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can make any image responsive with the `img-fluid` class. It applies the
    following to the picture and scales it with the parent element:'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the `max-width` property to `100%`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets the `height` property to `auto`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![Responsive images](Image00071.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Image shapes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In cases when you need to render images:'
  prefs: []
  type: TYPE_NORMAL
- en: With rounded corners, use the `img-rounded` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within a circle, use the `img-circle` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a thumbnail, use the `img-thumbnail` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image shapes](Image00072.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Image alignment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To align images horizontally, we can use either text alignment or helper float
    classes:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `text-*-center` classes on the parent of the picture to center it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `center-block` class on an image to center it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `pull-*-left` or `pull-*-right` classes to float the image to the left
    or right respectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '![Image alignment](Image00073.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I used the `table-border` class in the preceding code only to display borders.
  prefs: []
  type: TYPE_NORMAL
- en: Tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If I need to highlight some information in a text string, I will use a tag.
    To create a tag I need to apply the `tag` class together with a contextual `tag-*`
    to `span` the element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '![Tags](Image00074.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The tag uses the relative font size of the parent element so it always scales
    to match its size. If you need tag to looks like a badge use the `tag-pill` class
    to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![Tags](Image00075.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Button groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can group buttons together either horizontally or vertically with the **button
    group** component. Buttons are oriented horizontally by default. To create a button
    group use buttons with the `btn` class in a container with the `btn-group` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '![Button groups](Image00076.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sizing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two sizes to make the button group bigger or smaller than the standard
    size. Add either the `btn-group-lg` or `btn-group-sm` class to the button group
    to resize all buttons in the group at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '![Sizing](Image00077.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Button toolbars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can combine button groups into a **button toolbar** for more complex components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '![Button toolbars](Image00078.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Nesting drop-downs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can make a drop-down as a part of a button group by nesting it into another
    button group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '![Nesting drop-downs](Image00079.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, you can create a split drop-down menu component with a button group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '![Nesting drop-downs](Image00080.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Vertical button groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you need to orient a button group vertically, replace `btn-group` with the
    `btn-group-vertical` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '![Vertical button groups](Image00081.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The vertical button group doesn't support split drop-down menus.
  prefs: []
  type: TYPE_NORMAL
- en: Drop-down menus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We talk a lot about drop-down menus, so let's have a closer look at them. A
    drop-down menu is a toggle overlay for displaying a list of links. It is a combination
    of several components.
  prefs: []
  type: TYPE_NORMAL
- en: Drop-down containers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This one wraps all other elements. Usually, it is a `div` element with a `dropdown`
    class, or another one uses `position: relative` .'
  prefs: []
  type: TYPE_NORMAL
- en: Drop-down triggers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is any item that the user can click or tap to expand the drop-down. We
    need to mark it with a `dropdown-toggle` class and set the `data-toggle="dropdown"`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Drop-down menus with items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A drop-down menu itself is a combination of elements with `dropdown-item` classes,
    and the wrapper contains all of them marked with the `dropdown-menu` class. It
    is a list-less component. For menu items, you can use anchor or button elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '![Drop-down menus with items](Image00082.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Menu alignment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Drop-down menus are aligned to the left by default. If you need align one to
    the right, then you need to apply the `dropdown-menu-right` class to it. I have
    added the `text-xs-right` class to the parent element to align the whole component
    to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '![Menu alignment](Image00083.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Menu headers and dividers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A drop-down menu may have several header elements. You can add them with the
    help of heading elements and the `dropdown-header` classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '![Menu headers and dividers](Image00084.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Menu dividers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can segregate groups of menu items not only with headers but also with dividers.
    Use the `dropdown-divider` class to mark menu items as dividers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '![Menu dividers](Image00085.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Disabling menu items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If necessary we can disable menu items via the `disabled` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '![Disabling menu items](Image00086.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are new classes to build consistently styled and responsive tables. Because
    we need **table** to design the shopping cart component I would like to look at
    it now. It is an opt-in, so it''s very easy to transform any table to a Bootstrap
    table by adding a `table` class. As a result we have a basic table with horizontal
    dividers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '![Tables](Image00087.jpg)'
  prefs: []
  type: TYPE_IMG
- en: table-inverse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `table-inverse` class inverts the colors of a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '![table-inverse](Image00088.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Striped rows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can alter the background colors of rows with the `table-striped` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '![Striped rows](Image00089.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bordering tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you need a table with borders all around, use the `table-bordered` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '![Bordering tables](Image00090.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making rows hoverable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To achieve a *hover* effect while hovering the mouse over table rows, use the
    `table-hover` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '![Making rows hoverable](Image00091.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Table head options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two classes to change the `thead` element of `table` . Add the `thead-default`
    class to apply a slightly gray background color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '![Table head options](Image00092.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `thead-inverse` class inverts the text and background colors of `thead`
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '![Table head options](Image00093.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making table smaller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can halve the padding of a table to make it smaller with the `table-sm`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '![Making table smaller](Image00094.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Contextual classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are five contextual classes to apply to individual rows or cells: `table-active`
    , `table-success` , `table-info` , `table-warning` , and `table-danger` .'
  prefs: []
  type: TYPE_NORMAL
- en: Responsive tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Responsive tables support horizontal scrolling on small and extra small devices
    (under 768px). On devices bigger than small you won''t see any difference. Wrap
    a table with the `div` element with the `table-responsive` class to achieve this
    effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Reflowing tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is a `table-reflow` class to help make the contents of a table reflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '![Reflowing tables](Image00095.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shopping cart component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We haven''t yet touched on the last component on the wireframe of the Products
    page: the shopping cart. This is the union of the cart information and the dropdown
    contains a table of items the customer has added to the cart:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We display the cart information as button text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'I used an inversed, bordered table to print out a set of products the cusomer
    added to the cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'I combined everything we have learned and here is what the Products page looks
    like for now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shopping cart component](Image00096.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_3/7.ecommerce-dropdown` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered a lot in this chapter, and it's time to interrupt our journey,
    take a break, and recap it all.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap allowed us to capture our customer's attention with Jumbotron and
    carousel slideshow quite easily.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at the powerful responsive grid system included with Bootstrap
    and created a simple two-column layout. While we were doing this, we learned about
    the five different column class prefixes and also nested our grid. To adapt our
    design, we discovered some of the helper classes included with the framework to
    allow us to float, center, and hide elements.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we saw in detail how to use input, button, and list groups
    in our project. A simple but powerful component such as dropdowns and tables helped
    us to create our components quickly and more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](text00036.html#page "Chapter 4. Creating the Template") , *Creating
    the Template* , we're going to explore more Bootstrap fundamentals and continue
    to build the project we started to develop in this and the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, the readers will learn how to create a UI template using
    some built-in Angular 2 directives. Readers will become familiar with the template
    syntax. We will show you how to bind properties and events in an HTML page and
    transform displays using pipes.
  prefs: []
  type: TYPE_NORMAL
