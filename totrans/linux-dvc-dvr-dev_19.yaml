- en: PWM Drivers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Pulse Wide Modulation** (**PWM** ) operates like a switch that constantly
    cycles on and off. It is a hardware feature used to control servomotors, for voltage
    regulation, and so on. The most well-known applications of PWM are:'
  prefs: []
  type: TYPE_NORMAL
- en: Motor speed control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light dimming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Voltage regulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let us introduce PWM with a simple following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding figure describes a complete PWM cycle, introducing some terms
    we need to clarify prior to getting deeper into the kernel PWM framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ton` : This is the duration during which the signal is high.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Toff` : This is the duration during which the signal is low.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Period` : This is the duration of a complete PWM cycle. It represents the
    sum of `Ton` and `Toff` of the PWM signal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Duty cycle` : It is represented as a percentage of the time signal that remains
    on during the period of the PWM signal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different formulas are detailed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PWM period: ![](img/Image00039.gif)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Duty cycle: ![](img/Image00040.gif)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find details about PWM at [https://en.wikipedia.org/wiki/Pulse-width_modulation](https://en.wikipedia.org/wiki/Pulse-width_modulation)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'The Linux PWM framework has two interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Controller interface** : The one that exposes the PWM line. It is the PWM
    chip, that is, the producer.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Consumer interface** : The device consuming PWM lines exposed by the controller.
    Drivers of such devices use helper functions exported by the controller by means
    of a generic PWM framework.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Either the consumer or producer interface depends on the following header file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this chapter, we will deal with:'
  prefs: []
  type: TYPE_NORMAL
- en: PWM driver architecture and data structures, for both controller and consumer,
    along with a dummy driver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantiating PWM devices and controllers in the device tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting and consuming PWM devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using PWM from user space through sysfs interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PWM controller driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you need `struct gpio_chip` when writing GPIO-controller drivers and `struct
    irq_chip` when writing IRQ-controller drivers, a PWM controller is represented
    in the kernel as an instance of `struct pwm_chip` structure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00041.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PWM controller and devices
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the meaning of each elements in the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dev` : This represents the device associated with this chip.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ops` : This is a data structure providing callback functions this chip exposes
    to consumer drivers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Base` : This is the number of the first PWM controlled by this chip. If `chip->base
    < 0` then, the kernel will dynamically assign a base.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`can_sleep` : This should be set to `true` by the chip driver if `.config()`
    , `.enable()` , or `.disable()` operations of the ops field may sleep.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npwm` : This is the number of PWM channels (devices) this chip provide.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pwms` : This is an array of PWM devices of this chip, allocated by the framework,
    to consumer drivers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`of_xlate` : This is an optional callback to request a PWM device given a DT
    PWM specifier. If not defined, it will be set to `of_pwm_simple_xlate` by the
    PWM core, which will force `of_pwm_n_cells` to `2` as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`of_pwm_n_cells` : This is the number of cells expected in the DT for a PWM
    specifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PWM controller/chip adding and removal rely on two basic functions, `pwmchip_add()`
    and `pwmchip_remove()` . Each function should be given a filled in `struct pwm_chip`
    structure as an argument. Their respective prototypes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Unlike other framework removal functions that do not have return values, `pwmchip_remove()`
    has a return value. It returns `0` on success, or `-EBUSY` if the chip has a PWM
    line still in use (still requested).
  prefs: []
  type: TYPE_NORMAL
- en: Each PWM driver must implement some hooks through the `struct pwm_ops` field,
    which is used by the PWM core or the consumer interface in order to configure
    and make full use of its PWM channels. Some of them are optional.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us see what each element in the structure means:'
  prefs: []
  type: TYPE_NORMAL
- en: '`request` : This is an optional hook that, if provided, is executed during
    a PWM channel request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`free` : This is the same as request, ran during PWM freeing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config` : This is the PMW configuration hook. It configures duty cycles and
    period length for this PWM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set_polarity` : This hook configures the polarity of this PWM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Enable` : This enables the PWM line, starting output toggling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Disable` : This disables the PWM line, stopping output toggling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Apply` : This atomically applies a new PWM config. The state argument should
    be adjusted with the real hardware config.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_state` : This returns the current PWM state. This function is only called
    once per PWM device when the PWM chip is registered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Owner` : This is the module that owns this chip, usually `THIS_MODULE` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `probe` function of the PWM controller driver, it is good practice to
    retrieve DT resources, initialize hardware, fill a `struct pwm_chip` and its `struct
    pwm_ops` , and then, add the PWM chip with the `pwmchip_add` function.
  prefs: []
  type: TYPE_NORMAL
- en: Driver example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let us summarize things by writing a dummy driver for a PWM controller,
    which has three channels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: PWM controller binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While binding the PWM controller from within the DT, the most important property
    is `#pwm-cells` . It represents the number of cells used to represent a PWM device
    of this controller. If you remember, in the `struct pwm_chip` structure, the `of_xlate`
    hook is used to translate a given PWM specifier. If the hook has not been set,
    `pwm-cells` here must be set to 2, else, it should be set with the same value
    as `of_pwm_n_cells` . The following is an example of a PWM controller node in
    the DT, for an i.MX6 SoC.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, the node that corresponds to our fake-pwm driver looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: PWM consumer interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A consumer is the device that actually uses PWM channels. A PWM channel is
    represented in the kernel as an instance of `struct pwm_device` structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`Label` : This is the name of this PWM device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Flags` : This represents the flags associated with the PWM device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hwpw` : This is a relative index of the PWM device, local to the chip'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pwm` : This is a system global index of the PWM device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chip` : This is a PWM chip, the controller providing this PWM device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chip_data` : This is chip-private data associated with this PWM device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since kernel v4.7, the structure changed into:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`args` : This represents the board-dependent PWM arguments attached to this
    PWM device, which are usually retrieved from the PWM lookup table or device tree.
    PWM arguments represent the initial configuration that users want to use on this
    PWM device rather than the current PWM hardware state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state` : This represents the current PWM channel state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Over Linux evolutions, the PWM framework faced several changes. These changes
    concern the way one requests PWM devices from within the consumer side. We can
    split the consumer interface into two parts, or more precisely into two versions.
  prefs: []
  type: TYPE_NORMAL
- en: '**The legacy version** , where you use `pwm_request()` and `pwm_free()` in
    order to request a PWM device and free it after usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The new and recommended API** , using `pwm_get()` and `pwm_put()` functions.
    The former is given the consumer device along with the channel name as arguments
    to request the PWM device, and the second is given the PWM device to be freed
    as a parameter. Managed variants of these functions, `devm_pwm_get()` and `devm_pwm_put()`
    , also exist.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`pwm_request()` /`pwm_get()` and `pwm_free()` /`pwm_put()` cannot be called
    from an atomic context, since the PWM core make use of mutexes, which may sleep.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After being requested, a PWM has to be configured using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To start/stop toggling the PWM output, use `pwm_enable()` /`pwm_disable()` .
    Both functions take a pointer to a `struct pwm_device` as a parameter, and are
    all wrappers around hooks exposed by the controller through the `pwm_chip.pwm_ops`
    field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`pwm_enable()` returns `0` on success, or a negative error code on failure.
    A good example of a PWM consumer driver is `drivers/leds/leds-pwm.c` in the kernel
    source tree. The following is an example of consumer code, driving a PWM led:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: PWM clients binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PWM devices can be assigned to the consumer from:'
  prefs: []
  type: TYPE_NORMAL
- en: Device tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACPI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static lookup tables, in board `init` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book will only deal with DT binding, as it is the recommended method. When
    binding a PWM consumer (client) to its driver, you need to provide the phandle
    of the controller to which it is linked.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended you give the name `pwms` to PWM properties; since PWM devices
    are named resources, you can provide an optional property `pwm-names,` containing
    a list of strings to name each of the PWM devices listed in the `pwms` property.
    In case no `pwm-names` property is given, the name of the user node will be used
    as fallback.
  prefs: []
  type: TYPE_NORMAL
- en: Drivers for devices that use more than a single PWM device can use the `pwm-names`
    property to map the name of the PWM device requested by the `pwm_get()` call to
    an index into the list given by the `pwms` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example describes a PWM-based backlight device, which is an excerpt
    from the kernel documentation on PWM device binding (see *Documentation/devicetree/bindings/pwm/pwm.txt*
    ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The PWM-specifier typically encodes the chip-relative PWM number and the PWM
    period in nanoseconds. With the line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`0` corresponds to the PWM index relative to the controller, and `5000000`
    represents the period in nanoseconds. Note that in the preceding example, specifying
    the `pwm-names` is redundant because the name `backlight` would be used as a fallback
    anyway. Therefore, the driver would have to call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The PWM-specifier typically encodes the chip-relative PWM number and the PWM
    period in nanoseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Using PWMs with the sysfs interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The PWM core `sysfs` root path is `/sys/class/pwm/` . It is the user space
    way to manage PWM device. Each PWM controller/chip added to the system creates
    a `pwmchipN` directory entry under the `sysfs` root path, where `N` is the base
    of the PWM chip. The directory contains the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npwm` : This is a reads only file printing the number of PWM channels that
    this chip supports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Export` : This is a write-only file allowing to export a PWM channel for use
    with `sysfs` (this functionality is equivalent to GPIO sysfs interface)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Unexport` : Unexports a PWM channel from `sysfs` (write-only)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The PWM channels are numbered using an index from 0 to `pwm<n-1>` . These numbers
    are local to the chip. Each PWM channel exportation creates a `pwmX` directory
    in the `pwmchipN` , which is the same directory as the one containing the `export`
    file used. **X** is the number of the channel that was exported. Each channel
    directory contains the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Period` : This is a readable/writable file to get/set the total period of
    the PWM signal. Value is in nanoseconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duty_cycle` : This is a readable/writable file to get/set the duty cycle of
    the PWM signal. It represents the active time of the PWM signal. Value is in nanoseconds
    and must always be less than the period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Polarity` : This is a readable/writable file to use only if the chip of this
    PWM device supports polarity inversion. It is better to change the polarity only
    when this PWM is not enabled. Accepted values are string *normal* or *inversed*
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Enable` : This is a readable/writable file, to enable (start toggling)/disable
    (stop toggling) the PWM signal. Accepted values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '0: disabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1: enabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of using PWM from user space through the `sysfs`
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable PWM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Set PWM period:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Set PWM duty cycle: The value of the duty cycle must be less than the value
    of PWM period:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Disable PWM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The complete PWM framework API and sysfs description is available in the *Documentation/pwm.txt*
    file, in the kernel source tree.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, you are armed for any PWM controller, whether it
    is memory mapped, or externally sitting on a bus. The API described in this chapter
    will be sufficient to write as well as to enhance a controller driver as a consumer
    device driver. If you are not comfortable with the PWM kernel side yet, you can
    fully use the user space sysfs interface. That said, in the next chapter, we will
    discuss about regulators, which sometimes are driven by PWM. So, please hold on,
    we are almost done.
  prefs: []
  type: TYPE_NORMAL
