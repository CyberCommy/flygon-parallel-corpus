- en: '*Chapter 7*: DHCP Services on Linux'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll cover several topics that involve **Dynamic Host Control
    Protocol (DHCP**). As the name implies, DHCP is used to provide the basic information
    that a host needs to connect to the network and, in some cases, on where to find
    additional configuration, which makes it a key part of most infrastructures.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the basics of how this protocol works and then
    progress to building and finally troubleshooting DHCP services, specifically:'
  prefs: []
  type: TYPE_NORMAL
- en: How does DHCP work?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your DHCP services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring a DHCP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: How does DHCP work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by describing how DHCP actually works. We'll begin by looking at
    how the packets work in DHCP requests and responses – what information is requested
    by the client, what the server supplies, and how that works. We'll then move on
    to start a discussion on how DHCP options can help in many implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Basic DHCP operation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**DHCP** allows system administrators to centrally define device configurations
    on a server, so that when those devices start up, they can request those configuration
    parameters. This *central configuration* almost always includes the basic network
    parameters of IP address, subnet mask, default gateway, DNS server, and DNS domain
    name. What this means in most organizations is that in most cases, almost no devices
    get static IP addresses or other network definitions; all workstation network
    configurations are set by the DHCP server. As we explore the protocol more deeply,
    you''ll see other uses for DHCP that are often *bolted on* to these basic settings.'
  prefs: []
  type: TYPE_NORMAL
- en: The DHCP process starts when the client sends a broadcast **DISCOVER** packet
    out, essentially saying "Are there any DHCP servers out there? This is the kind
    of information that I am looking for." The DHCP server then replies with an **OFFER**
    packet, with all of the information. The client replies with a **REQUEST** packet,
    which seems oddly named – essentially, the client is sending the information it
    just got back from the server, just by way of confirmation. The server then sends
    the final **ACKNOWLEDGEMENT** packet back, again with the same information, confirming
    it once more.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is often called the **DORA** sequence (**Discover, Offer, Request, Acknowledgement**),
    and is usually depicted like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – The DHCP DORA sequence'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16336_07_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – The DHCP DORA sequence
  prefs: []
  type: TYPE_NORMAL
- en: 'Since these are all UDP packets, remember that UDP doesn''t have any session
    information built into the protocol, so what''s tying these four packets together
    into one "session"? For that, the initial Discover packet has a transaction ID
    that is matched in the three subsequent packets – a Wireshark trace shown below
    illustrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – DHCP DORA sequence shown in Wireshark'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16336_07_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – DHCP DORA sequence shown in Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The client doesn't actually have an address until the fourth packet, so the
    Discover and Request packets are from the MAC address of the client, with an IP
    of `0.0.0.0`, to the broadcast address of `255.255.255.255` (i.e., to the entire
    local network).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the basics of how DHCP works, we see that it is heavily
    dependent on broadcast addresses, which are limited to the local subnet. How can
    we use DHCP in a more practical setting, where the DHCP server is in a different
    subnet, or maybe even in a different city or country?
  prefs: []
  type: TYPE_NORMAL
- en: DHCP requests from other subnets (forwarders, relays, or helpers)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But wait, you may say – in many corporate networks, the servers are on their
    own subnet – separating servers and workstations is a pretty common practice.
    How does this DHCP sequence work in that case? The first three packets of the
    DORA sequence are sent to the broadcast address, so they can only reach other
    hosts on that same VLAN.
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the job done by putting a DHCP "Forwarder" or "Relay" process on a host
    in the client subnet. This process receives the local broadcasts, and then forwards
    them to the DHCP server as a unicast. When the server replies back (as a unicast
    to the forwarder host), the forwarder "converts" the packet back to the broadcast
    reply that the client is expecting. Almost always, this forwarder function is
    done on the router or switch IP address that''s on the client subnet – in other
    words, the interface that will end up being the client''s default gateway. This
    function doesn''t technically need to be on that interface, but it''s an interface
    that we know will be there, and the function is almost always available for us
    to use. Plus, if we use that as an unwritten convention, it makes it easier to
    find that command if we need to change it later! On a Cisco router or switch,
    this command looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, `10.10.10.10` is the IP of our DHCP server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In operation, this changes the simple broadcast operation that we have on most
    home networks to include a unicast "leg" to extend the protocol to the DHCP server,
    located on another subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – DHCP relay or forwarder operation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16336_07_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – DHCP relay or forwarder operation
  prefs: []
  type: TYPE_NORMAL
- en: How does this modify our DORA sequence? The short answer is that it doesn't
    really modify the DHCP content of any of the packets. What it does do is modify
    the upper layer "IP address" fields in the packets – the modified packets between
    the router and the server have "real" source and destination IP addresses. The
    packet contents that the client sees remain the same, however. If you delve into
    the DHCP packets, you'll see that with or without a relay in play, the DHCP client
    MAC address and the DHCP server IP address are actually included in the data fields
    of the Layer 7 DHCP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: We're now equipped to start configuring a DHCP server for basic workstation
    operation, but before we get to that, we'll want to consider what we need for
    special purpose devices such as iPhones, **Wireless Access Points** (**WAP**),
    or even **Pre eXecution Enviroment (PXE**) devices that can load their entire
    operating system from DHCP information.
  prefs: []
  type: TYPE_NORMAL
- en: DHCP options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The options that were sent in the DHCP Discover packet are essentially a list
    of the DHCP networking parameters that the client knows how to deal with. The
    server''s Offer packet will try to fill as much of this list as possible. The
    most commonly seen options requested (and configured at the server) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Subnet mask
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Router (default gateway)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS server list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS domain name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A more complete reference to DHCP options can be found on the IANA website,
    [https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml](https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml),
    or in the relevant RFC: [https://tools.ietf.org/html/rfc2132](https://tools.ietf.org/html/rfc2132).'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in many corporate networks, you may see other information being requested
    and supplied – often this is to support the bootup of **Voice over IP (VOIP**)
    phones. These options are usually vendor-specific, but for the most part, the
    list of information that the client device will request is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**What VLAN do I need to be on?**: This option is used less frequently on modern
    networks, in favor of just identifying the VOICE VLAN on the switches using **Link
    Layer Discovery Protocol (LLDP**). On a Cisco switch, this is as simple as adding
    the voice keyword to the VLAN definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What is the IP of the PBX that I''ll be connecting to?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What TFTP or HTTP server should I connect to in order to collect my hardware
    configuration?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the server has the information that's requested, it will then be supplied
    in the DHCP offer in the server's response packet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most often, you''ll see these as the following DHCP options, but if you are
    using a different phone handset vendor, of course, your mileage may vary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Table_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that Mitel and Shortel phones use the same DHCP option, but have slightly
    different syntax.
  prefs: []
  type: TYPE_NORMAL
- en: DHCP options are also sometimes used to tell WAP which IP to use to find their
    controller, to control the boot sequence of PXE stations, or any number of custom
    uses. In most cases, DHCP options are there to ensure that a remote device gets
    the information it needs to boot up from one central location without having to
    configure each device. If you need these options for your specific device, the
    details will be in the vendor's documentation (look for **DHCP Options**).
  prefs: []
  type: TYPE_NORMAL
- en: If you are troubleshooting a DHCP sequence, in particular, why the DHCP options
    aren't working the way you might expect, the DHCP options needed by any particular
    device will always be in that initial Discover packet, the first packet in the
    DORA sequence. Always start your investigation there, and you'll often find that
    the DHCP options being requested aren't the ones that are configured.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the basics of how DHCP works, how can we secure it against
    common attacks or operational problems?
  prefs: []
  type: TYPE_NORMAL
- en: Securing your DHCP services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The interesting thing about DHCP is that in almost all cases, securing the service
    is done on the network switches rather than on the DHCP server itself. For the
    most part, the DHCP server receives anonymous requests and then replies appropriately
    – there aren't a lot of opportunities to secure our service without adding a lot
    of complexity (using signatures and PKI, which we'll get to), or by maintaining
    a list of authorized MAC addresses (which adds a whole lot of complexity). Both
    of these approaches very much run counter to the whole point of having a DHCP
    service, which is to "automagically" do the network configuration of workstations,
    phones, and other network-attached devices without adding too much complexity
    or administrative overhead.
  prefs: []
  type: TYPE_NORMAL
- en: So how can we secure our service? Let's look at a few attack scenarios, and
    then add the most common defenses against them.
  prefs: []
  type: TYPE_NORMAL
- en: Rogue DHCP server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's look at the `192.168.1.0/24` or `192.168.0.0/24`, which almost
    always is *not* what we have configured at work. So as soon as this is connected
    to the network, workstations will start getting addresses on this subnet and will
    lose connectivity to the real corporate network.
  prefs: []
  type: TYPE_NORMAL
- en: How can we defend against this? The answer is on the network switches. What
    we do is, on each switch, we assess the topology and decide which ports we can
    trust to send us DHCP Offer packets – in other words, "which ports lead us to
    the DHCP server?" This is almost always the switch uplink, which is our link that
    leads to the servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that is identified on the switch, we enable what''s called **DHCP Snooping**,
    which instructs the switch to inspect DHCP packets. This is done VLAN-by-VLAN,
    and in most environments, we simply list all VLANS. Then we configure our uplink
    ports to be "trusted" to source DHCP packets. This is normally a very simple configuration
    change, which will look similar to this (Cisco configuration shown):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If a DHCP Offer packet is received on any port or IP address other than the
    ones we've configured as "trusted," by default, that port is shut down and an
    alert is sent (though you can configure them to just send the alert). The port
    is then in what's called an *error disable* state and will usually need a network
    administrator to chase down the root cause and fix it. This makes the logging
    and alerting process very important. You can skip ahead to [*Chapter 13*](B16336_13_Final_NM_ePub.xhtml#_idTextAnchor236),
    *Intrusion Prevention Systems on Linux*, if this is immediately important for
    your organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'For some switch vendors, we can trust the DHCP server IP rather than the uplink
    port. For instance, on an HP switch, we can still use the approach outlined above,
    but we''re also able to add a simpler configuration based on the IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In a larger network, this approach makes our configuration much simpler – there's
    no need to identify uplink ports that may be different from switch to switch;
    these two lines can simply be replicated to all workstation switches.
  prefs: []
  type: TYPE_NORMAL
- en: When we reach the server VLANs and data center switches, we are faced with the
    fact that our DHCP server is very likely a VM. This leaves us with two choices
    – either we configure DHCP trust on all uplinks that connect to our hypervisor
    servers, or on the server switches, we don't configure DHCP snooping or trust
    at all. Both are valid choices, and honestly, the second choice is what we see
    most often – in many cases, the network administrators can trust that the server
    switch is in a locked room or cabinet, and that becomes our security layer for
    DHCP services. This also means that the server and hypervisor administrators don't
    need to consider the physical network as much (or involve the network administrators
    at all in many cases) as they make changes on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: 'We did mention that the "accidental DHCP server" is by far the most common
    rogue DHCP server attack. But what about intentional DHCP server attacks; what
    do those attacks look like? The first situation is a DHCP server that adds a malicious
    host as the default gateway (usually itself). As packets are received, the malicious
    host will inspect that traffic for information that it wants to steal, eavesdrop
    on, or modify, and then forward it on to the legitimate router (the default gateway
    for that subnet):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Layer 3 MiTM attack using DHCP'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16336_07_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Layer 3 MiTM attack using DHCP
  prefs: []
  type: TYPE_NORMAL
- en: 'The other situation is that the malicious DHCP server gives the client all
    the correct information but adds an "extra" DHCP bit of information to the DHCP
    leases – DHCP option `252`. Option `252` is a text string, which points to a `http://<malicious
    server>/link/<filename.pac>`. The PAC file is specially formatted. The attacker
    will have built it to use their malicious proxy server for target websites, and
    to simply route web traffic normally for other sites. The intent of both of these
    **Machine in The Middle** (commonly shortened to **MiTM**) situations is to steal
    credentials – when you browse to a target website such as PayPal, Amazon, or your
    bank, the attacker will have a fake website ready to collect your user ID and
    password. This is commonly called a **WPAD Attack** (**Windows Proxy Auto Discovery**)
    because of its great success against windows clients who are, by default, configured
    to trust the DHCP server for their proxy settings. In most cases, the WPAD attack
    is preferred, since the attacker does not have to worry about decrypting HTTPS,
    SSH, or any other encrypted traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – WPAD attack – malicious DHCP server sets proxy server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16336_07_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – WPAD attack – malicious DHCP server sets proxy server
  prefs: []
  type: TYPE_NORMAL
- en: In both of these malicious DHCP server situations, our "DHCP trust" defense
    works very nicely.
  prefs: []
  type: TYPE_NORMAL
- en: Another defense against the WPAD attack specifically is to add a DNS entry to
    your DNS server for WPAD – `yourinternaldomain.com`. This can be helpful in that
    the WPAD attack can be combined with other attacks (specifically against any multicast
    DNS protocol such as LLMNR), but if there's a DNS entry for that hostname, then
    these attacks are nicely circumvented. In addition, logging all DNS requests for
    suspicious hostnames such as WPAD is an excellent practice for helping you to
    identify and help locate attacks as they occur.
  prefs: []
  type: TYPE_NORMAL
- en: But what about adding protection from attacks in the other direction – what
    about unauthorized clients?
  prefs: []
  type: TYPE_NORMAL
- en: Rogue DHCP client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The less common attack vector is a rogue DHCP client – a person who brings their
    server from home and plugs into an unused Ethernet port at work, or the attacker
    who plugs a tiny, purpose-built attack PC (often called a **pwnplug**) into an
    unused Ethernet port in the lobby or in any accessible location. Behind plants,
    printers, or other obstructions is a favorite location for these.
  prefs: []
  type: TYPE_NORMAL
- en: The old-school defense against this attack is to keep a database of all authorized
    MAC addresses in your company, and either set them up as authorized clients in
    DHCP, or set each of them up with a static DHCP reservation. Both of these are
    not ideal in a modern enterprise. First of all, this is a pretty significant administrative
    process. We're adding a manual inventory component to the server team's process.
    Since the DHCP server is normally a low-overhead server component, nobody is going
    to be thrilled with this. Secondly, if you take the "static reservations" approach,
    you'll need to add reservations for every VLAN, wireless SSID, or possible location
    that the client may need to connect to. Needless to say, most organizations are
    not fans of either of these approaches.
  prefs: []
  type: TYPE_NORMAL
- en: The newer method of keeping unauthorized clients is to use 802.1x authentication,
    where the client has to authenticate to the network before being allowed on. This
    involves the use of a *RADIUS Services for Linux* ([*Chapter 9*](B16336_09_Final_NM_ePub.xhtml#_idTextAnchor153))
    and *Certificate Services on Linux* ([*Chapter 8*](B16336_08_Final_NM_ePub.xhtml#_idTextAnchor133)).
    The certificates are used to enforce trust – the clients need to trust the RADIUS
    server and, more importantly, the RADIUS server needs to trust the connecting
    clients in order for the authentication to work securely. As you might expect,
    we'll cover this solution later in this book (in [*Chapter 8*](B16336_08_Final_NM_ePub.xhtml#_idTextAnchor133),
    *Certificate Services on Linux* and [*Chapter 9*](B16336_09_Final_NM_ePub.xhtml#_idTextAnchor153),
    *RADIUS Services for Linux*)
  prefs: []
  type: TYPE_NORMAL
- en: With all this theory done and internalized, let's get on with configuring our
    DHCP server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring a DHCP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll break the configuration tasks up into three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: The basic configuration of the DHCP server and scopes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static reservations for DHCP leases – for instance, for servers or printers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using DHCP logs for network intelligence and inventory checks or population
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Basic configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you would expect, we''ll start our journey with the `apt` command, installing
    the ISC DHCP server on our lab host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once installed, we can configure the basic server options. Set the lease times
    and anything that isn't scope-dependent – we'll configure central DNS servers
    for instance. Also, note that we're adding a ping check – before a lease is assigned,
    this host pings the candidate address to be sure that someone else doesn't have
    it statically assigned, for instance. This is a great check for avoiding duplicate
    IP addresses, which are not on by default. In our example the timeout on the ping
    is set to 2 seconds (the default is 1 second). Note that for some dhcpd servers,
    the `ping-check` parameter might be shortened to just `ping`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note also the lease-time variables. These govern how long the DHCP "lease"
    is valid for, and when the client will start requesting a lease renewal. These
    are important for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: For all that we strive to decouple IP addresses from various diagnostic tools,
    it's very helpful in incident response to more-or-less be able to depend on addresses
    not changing too much. For instance, if you are troubleshooting an issue, and
    identify a person's station IP address at the beginning of the issue, it's extremely
    helpful if you can depend on that not changing over the 3-4 subsequent days. This
    means you can do all address-based searches just once against all relevant logs,
    which is of huge help. For this reason, internal workstation DHCP leases are often
    set to account for up to 4-day long weekends or even up to 2-3 week vacation intervals,
    keeping DHCP leases active for those time periods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The exception, of course, is guest networks, and in particular, guest wireless
    networks. If you don't link guest addresses to their identity or their sponsor's
    identity, then a short lease time here can be helpful. Also, guest networks often
    see more "transient" users that come and go, so a short lease time protects you
    somewhat from exhausting the address pool. If you ever do incident response on
    an "anonymous guest" network with a short lease time, you'll most likely base
    your "pseudo identity" on MAC addresses rather than IP addresses (and block suspect
    hosts the same way).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The three lease-time variables available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`default-lease-time`: The duration of the lease if the client does not request
    a lease time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max-lease-time`: The longest lease the server is able to offer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min-lease-time`: Used to force a client to take a longer lease if they''ve
    requested one shorter than this interval'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In all cases, the client can start requesting lease renewals at the 50% point
    of the lease interval that is negotiated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s edit the main configuration for the DHCP server – `/etc/dhcp/dhcpd.conf`.
    Be sure to use `sudo` so that you have appropriate rights when you edit this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncomment the `authoritative` parameter a bit further down in this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of that file, add the details for your scope. Note that if you are
    deploying new subnets, try to avoid using `192168.0.0/24` or `192.168.1.0/24`
    – since these are used so often on home networks, using them at work can really
    mess up those remote folks. If they ever VPN in, they''ll have two different `192.168.1.0`
    networks to contend with – one or the other will likely not be reachable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is also where you'd put any other DHCP options, which we talked about earlier
    in this chapter – options in support of VOIP phones, PXE hosts, or wireless access
    points, for instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, restart your DHCP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Just for fun, if you want the clients to try to update the DNS server with
    their information, you can add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Let's now take our basic configuration and expand it to include static reservations
    – using DHCP to assign fixed IP addresses to printers or other network devices
    such as time clocks, IP cameras, door locks, or even servers.
  prefs: []
  type: TYPE_NORMAL
- en: Static reservations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a static definition to a host, we add a `host` section to our `dhcpd.conf`.
    In its most basic configuration, we assign a fixed IP address when we see a specific
    MAC address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In some cases where the workstation might roam – for instance, if a device
    is wireless and may appear in different networks at different times, we''ll want
    to assign other options but leave the IP address dynamic. In this case, we tell
    the device what DNS suffix to use, and how to register itself using dynamic DNS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, to add static definitions for a group of hosts, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've got DHCP configured and running, what tools do we have to help
    in troubleshooting if things go wrong? Let's start by looking at DHCP lease information
    and then dig into the logs for the `dhcpd` daemon.
  prefs: []
  type: TYPE_NORMAL
- en: Simple DHCP logging and troubleshooting in everyday use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To view the list of current DHCP leases, use the `dhcp-lease-list` command,
    which should give you a list as follows (note that the text is wrapped; this output
    is one line per device lease):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that this output already extracts the OUI from each MAC, so, for instance,
    you can use this command and its output to look for "oddball" NIC types. These
    should stand out immediately in your VOIP subnets or in subnets that are mostly
    mobile devices. Even in a standard data VLAN, odd device types based on the OUI
    can often be easily spotted. I see this all the time when a client has a standard
    phone type and spots an off-brand phone the first time they see the OUI extracts,
    or if they are a Windows shop and see an Apple computer they weren't expecting.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily "harvest" the lease information into the spreadsheet of your
    choice, so that you can then modify that listing to suit your needs, or what your
    inventory application needs for input. Or, if you just wanted to extract a MAC
    address to a hostname table, for instance, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In plain language, this translates to run the `dhcp-lease-list` command. Print
    the entire listing starting on line 3, remove repeating spaces, and then take
    columns 1 and 3, using a single space as a column delimiter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need more detailed information, or if you are investigating an incident
    in the past, you might need more or different data – for this, you need the logs.
    DHCP logs to `/var/log/dhcpd.log`, and the output is quite detailed. For instance,
    you can collect the entire DORA sequence for any particular MAC address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can take the next step and ask "Who had this IP address on this date?"
    We''ll collect the entire days'' worth of data, just in case multiple hosts might
    have used that address. To get the final address assignments, we only want the
    Acknowledgement (`DHCPACK`) packets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, narrowing things down further to collect the MAC addresses in play for
    that IP address on that day, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the tools to extract MAC addresses from both the lease table
    and the logs, you can use these methods in troubleshooting, updating your inventory,
    or looking for out-of-inventory or "unexpected" hosts on your network. We'll explore
    troubleshooting sequences further in this chapter's Q&A section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the discussion of DHCP wrapped up, you should now have the tools available
    to build a basic DHCP server for your organization, both for local subnets and
    remotes. You should also be able to implement basic security to prevent rogue
    DHCP servers from operating on your network. Basic data extraction from the active
    lease table and DHCP logging should be part of your organization's toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: In combination, this should cover the needs of most organizations in terms of
    installation, configuration, and troubleshooting, as well as using DHCP for both
    an inventory input and in incident response.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll continue to add core network services to our Linux
    host. The next step in our journey will be using **Public Key Infrastructure**
    (**PKI**) – using private and public certificate authorities and certificates
    to help secure our infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  prefs: []
  type: TYPE_NORMAL
- en: It's Monday, and a remote sales office has just called the Helpdesk saying they
    aren't getting DHCP addresses. How would you troubleshoot this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your engineering department has no network access, but you can still reach the
    subnet. How would you determine whether this is related to a rogue DHCP server,
    and if so, how would you find that rogue device?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more on the subject:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DHCP snooping and trust configuration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://isc.sans.edu/forums/diary/Layer+2+Network+Protections+against+Man+in+the+Middle+Attacks/7567/](https://isc.sans.edu/forums/diary/Layer+2+Network+Protections+against+Man+in+the+Middle+Attacks/7567/%20)'
  prefs: []
  type: TYPE_NORMAL
- en: 'WPAD attacks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://nakedsecurity.sophos.com/2016/05/25/when-domain-names-attack-the-wpad-name-collision-vulnerability/
  prefs: []
  type: TYPE_NORMAL
- en: https://us-cert.cisa.gov/ncas/alerts/TA16-144A
  prefs: []
  type: TYPE_NORMAL
- en: https://blogs.msdn.microsoft.com/ieinternals/2012/06/05/the-intranet-zone/
  prefs: []
  type: TYPE_NORMAL
- en: 'DHCP and DHCP option RFCs; also, the IANA reference on DHCP options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dynamic Host Configuration Protocol: https://tools.ietf.org/html/rfc2131'
  prefs: []
  type: TYPE_NORMAL
- en: 'DHCP Options and **Bootstrap Protocol** (**BOOTP**) Vendor Extensions: https://tools.ietf.org/html/rfc2132'
  prefs: []
  type: TYPE_NORMAL
- en: 'Vendor-Identifying Vendor Options for Dynamic Host Configuration Protocol version
    4 (DHCPv4): https://tools.ietf.org/html/rfc3925'
  prefs: []
  type: TYPE_NORMAL
- en: 'DHCP and BOOTP Parameters: https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml'
  prefs: []
  type: TYPE_NORMAL
