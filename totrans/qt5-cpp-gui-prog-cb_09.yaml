- en: Chapter 9. Developing a Web Application Using Qt Web Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Qt WebEngine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebView and web settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding Google Maps in your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling C++ functions from JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling JavaScript functions from C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt includes a module called **Qt WebEngine** that allows us to embed a web browser
    widget into our program and use it to display web pages or local HTML contents.
    Prior to version 5.6, Qt used another similar module called **Qt WebKit**, which
    is now deprecated and has since been replaced by the Chromium-based **web engine**
    module. Qt also allows communication between JavaScript and C++ code through the
    "web channel", which enables us to make use of this module in a much more effective
    fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Qt WebEngine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example project, we will explore the basic features of the web engine
    module in Qt and try building a simple working web browser. Since Qt 5.6, Qt's
    WebKit module has been deprecated and replaced by the WebEngine module, which
    is based on Google's Chromium engine. Note that when this chapter was written,
    WebEngine was still heavily under development and may be subject to changes in
    the near future.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s set up our web engine project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you are required to download and install Microsoft Visual Studio if
    you do not have it installed on your computer. This is because at the moment,
    Qt''s WebEngine module only works with the Visual C++ compiler and not others,
    such as MinGW or Clang. This might change in the future, but it all depends on
    whether Google wants to make their Chromium engine support other compilers or
    not. Meanwhile, you can download the latest Visual Studio from here: [https://www.visualstudio.com](https://www.visualstudio.com).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the same time, you may also need to make sure that the Qt you installed on
    your computer supports the Visual C++ compiler. You can add the **mvc2015** component
    to your Qt installation using Qt's maintenance tool. Also, make sure that you
    have installed the **Qt WebEngine** component in your Qt as well:![How to do it…](img/B02820_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are done with that, open up Qt Creator and create a new **Qt Widgets
    Application** project. This time, you must select a kit that uses the Visual C++
    compiler:![How to do it…](img/B02820_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, open up your project file (`.pro`) and add the following modules
    to your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Open up `mainwindow.ui` and remove the `menuBar`, `mainToolBar`, and `statusBar`
    objects, as we don't need those in this project:![How to do it…](img/B02820_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place two horizontal layouts on the canvas, then place a line edit widget and
    a push button for the layout at the top:![How to do it…](img/B02820_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, select the canvas and click on the **Lay Out Vertically** button
    located at the top of the editor:![How to do it…](img/B02820_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have clicked on the **Lay Out Vertically** button, the layouts will
    expand and follow the size of the main window. The line edit will also expand
    horizontally based on the width of the horizontal layout:![How to do it…](img/B02820_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add two buttons to the left side of the line edit. We'll use these two
    buttons to move back and forward between page histories. Then, add a Progress
    bar widget at the bottom of the main window so that we can find out whether the
    page has finished loading, or loading is still in progress. We don't have to worry
    about the horizontal layout in the middle at this point, as we'll be adding the
    web view to it later using C++ code, and the space will then be occupied:![How
    to do it…](img/B02820_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on one of the buttons and select **Go to slot…**, then select **clicked()**
    and click **OK**. A slot function will be automatically created for you in `mainwindow.h`
    and `mainwindow.cpp`. Repeat this step for all the other buttons as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, right-click on the line edit and select **Go to slot…**, then select
    **returnPressed()** and click **OK**. Another slot function will now be automatically
    created for you in `mainwindow.h` and `mainwindow.cpp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we are done with our UI design, let''s hop over to `mainwindow.h`.
    The first thing we need to do is to add the following header to `mainwindow.h`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, declare `loadUrl()` function under the class destructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add a custom slot function called `loading()` to `mainwindow.h`
    as we''ll be using it pretty soon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, declare a `QWebEngineView` object and call it `webview`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''re done with that, open up `mainwindow.cpp` and initiate the web
    engine view. Then, add it to the second horizontal layout and connect its `loadProgress()`
    signal to the `loading()` slot function we just added to `mainwindow.h`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we declare what will happen when the `loadUrl()` function is called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, call the `loadUrl()` function when the **Go** button is clicked or when
    the `Return/Enter` key is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As for the other two buttons, we''ll ask the web view to load the previous
    page or the next page if it is available in the history stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, change the value of the `progressBar` when the web page is being loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Build and run the program now and you will get a very basic but functional web
    browser!![How to do it…](img/B02820_09_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The old web view system was based on Apple's WebKit engine and only available
    in Qt 5.5 and its predecessor. Since 5.6, WebKit has been completely abandoned
    by Qt and replaced with Google's Chromium engine. The API has been completely
    changed and therefore all the code related to Qt WebKit will not work correctly
    once migrated to 5.6\. If you're new to Qt, it's recommended to skip WebKit and
    learn the WebEngine API since it is becoming the new standard in Qt. If you have
    used Qt's WebKit in the past, this web page teaches you how to port your old code
    over to WebEngine, [https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine](https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine).
  prefs: []
  type: TYPE_NORMAL
- en: In Step 16, we connected the `loadProgress()` signal that belongs to the web
    view widget to the `loading()` slot function. The signal will be called automatically
    when the web view is loading the web page you requested by calling `QWebEnginePage::load()`
    in Step 17\. You can also connect the `loadStarted()` and `loadFinished()` signals
    as well if you need to.
  prefs: []
  type: TYPE_NORMAL
- en: In Step 17, we used the `QUrl` class to convert the text obtained from the line
    edit to URL format. By default, the address we inserted will lead to the local
    path if we do not specify the URL scheme (`http`, `https`, `ftp`, and so on).
    We may not be able to load the page if, say, we gave it `packtpub.com` instead
    of `http://packtpub.com`. Therefore, we manually specify a URL scheme for it by
    calling `QUrl::setScheme()`. This will ensure the address is properly formatted
    before passing it to the web view.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re running Qt 5.6 or above and for some reason you need the WebKit
    module for your project (usually for maintaining an old project), you can obtain
    the module code from GitHub and build it by yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/qt/qtwebkit](https://github.com/qt/qtwebkit)'
  prefs: []
  type: TYPE_NORMAL
- en: WebView and web settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will dive deeper into the features available in Qt's WebEngine
    and explore the settings that we can use to customize our WebView. We will use
    the source files from the previous example and add more code to it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s explore some of the basic features of the Qt WebEngine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, open up `mainwindow.ui` and add a vertical layout under the progress
    bar. Then, add a **Plain Text Edit** widget (under the input widget category)
    and a Push button to the vertical layout. Change the display of the Push button
    to **Load HTML** and set the `plaintext` property of the plain text edit widget
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B02820_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, go to **File** | **New File or Project**. A window will then pop up and
    ask you to choose a file template. Select **Qt Resource File** under the **Qt**
    category and click on the **Choose…** button. Type in your desired filename and
    click **Next** followed by **Finish**.![How to do it…](img/B02820_09_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, open up the resource file we just created by right-clicking on it
    in the **Projects** pane and selecting the **Open in Editor** option. Once the
    file is opened by the editor, click on the **Add** button, followed by **Add Prefix**.
    Then, set the prefix as **/** and click **Add**, followed by **Add Files**. This
    time, the file browser window will appear and we will select the **tux.png** image
    file and click **Open**. We have now added the image file to our project, where
    it will be embedded into the executable file (`.exe`) once it's compiled:![How
    to do it…](img/B02820_09_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open up `mainwindow.h` and add the following headers to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, make sure the following functions and pointers have been declared in
    `mainwindow.h`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''re done with that, open up `mainwindow.cpp` and add the following
    code to the class constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MainWindow::loadUrl()` function still remains the same as the previous
    example, which sets the URL scheme to `http` before loading the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The same goes for the following functions, which also remain the same:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous example, we only had `MainWindow::loading()`, which sets the
    value of the progress bar when the web page is being loaded. This time, we also
    added both the `MainWindow::startLoading()` and `MainWindow::loaded()` slot functions,
    which will be called by the `loadStarted()` and `loadFinished()` signals. What
    these two functions do is basically show the progress bar when a page is starting
    to load, and hide the progress bar when the page has finished loading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we call `webview->loadHtml()` to convert the plain text to HTML content
    when the **Load HTML** button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Build and run the program now and you should see something like this:![How to
    do it…](img/B02820_09_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we used C++ to load an image file and set it as the WebView's
    default content (instead of a blank page). We could achieve the same result by
    loading a default HTML file with an image at startup.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the code in the class constructor has been commented out. You can remove
    the double slashes `//` and see the difference it makes—the JavaScript alert will
    no longer appear (since JavaScript is being disabled) and any images will no longer
    appear in your web view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing you can try is to change the font family from `QWebEngineSettings::SansSerifFont`
    to `QWebEngineSettings::SerifFont`. You will notice a slight difference in the
    font as it appears in the web view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/B02820_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By clicking the **Load HTML** button, we ask the WebView to treat the content
    of the plain text edit widget as HTML code and load it as an HTML page. You can
    use this to make a simple HTML editor powered by Qt!
  prefs: []
  type: TYPE_NORMAL
- en: Embedding Google Maps in your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will learn how to embed Google Maps in our project through
    Qt's WebEngine module. This example doesn't focus much on Qt and C++, but rather
    on the Google Maps API in HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a program that displays Google Maps by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, create a new **Qt Widgets Application** project and remove the status
    bar, menu bar, and tool bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, open up your project file (`.pro`) and add the following modules to your
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Next, open up `mainwindow.ui` and add a vertical layout to the canvas. Then,
    select the canvas and click the **Lay Out Vertically** button on top of the canvas.
    You will get something like this:![How to do it…](img/B02820_09_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, open up `mainwindow.cpp` and add the following headers to the top of
    the source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add the following code to the `MainWindow` constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Then, go to **File** | **New File or Project** and create a Qt resource file
    (`.qrc`). We will add an HTML file to our project called `map.html`:![How to do
    it…](img/B02820_09_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're done with that, open up `map.html` with your favorite text editor.
    It's not recommended to open an HTML file using Qt Creator, as it does not provide
    any color coding for HTML syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, we will start writing the HTML code by declaring the important
    tags, such as `<html>`, `<head>`, and `<body>`, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add a `<div>` tag to the body and set its ID as `map-canvas`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add the following code to the head of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following code, also to the head of the HTML document, right
    at the bottom of the code we inserted in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Once you're done with that, compile and run the project. You should see something
    similar to this:![How to do it…](img/B02820_09_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google allows you to embed Google Maps in a web page by using their JavaScript
    library called the Google Maps API. Through Qt's WebEngine module, we can embed
    Google Maps in our C++ project by loading a HTML file to our web view widget,
    which uses the Google Maps API. The only downside of this method is that we cannot
    load the map when there is no Internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: Google allows your website to call any Google API, many thousands of times per
    day. If you plan for heavier traffic, you should get a free API key from Google.
    Go to [https://console.developers.google.com](https://console.developers.google.com)
    to get a free key and replace the word `YOUR_KEY_HERE` in the JavaScript source
    path with the API key you obtained from Google.
  prefs: []
  type: TYPE_NORMAL
- en: We must define a `<div>` object, which serves as a container for the map. Then,
    when we initialize the map, we specify the ID of the `<div>` object so that the
    Google Maps API knows which HTML element to look for when embedding the map.
  prefs: []
  type: TYPE_NORMAL
- en: By default, we set the center of the map to the coordinates of New York and
    set the default zoom level to `6`. Then, we added an event listener that gets
    triggered when the zoom level of the map changes. Remove the double slashes `//`
    from the code to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we also added a marker to the map through JavaScript. The marker
    also has an event listener attached to it, which will trigger the `panTo()` function
    when the marker is clicked. What it does is basically pan the map view to the
    marker that has been clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Although we have added the drawing manager to the map (the icon buttons beside
    the **Map** and **Satellite** buttons), which allows users to draw any type of
    shape on top of the map, it's also possible to add the shapes manually using JavaScript,
    similar to how we added the marker in the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, you may have noticed that the headers are added to `mainwindow.cpp`
    instead of `mainwindow.h`. This is totally fine unless you are declaring class
    pointers in `mainwindow.h`; then you have to include those headers in it.
  prefs: []
  type: TYPE_NORMAL
- en: Calling C++ functions from JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how put our knowledge to use and create a functional
    login screen using Qt and MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn how to call C++ functions from JavaScript through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a **Qt Widgets Application** project and, once you''re done,
    open up the project file (`.pro`) and add the following modules to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Then, open up `mainwindow.ui` and delete the tool bar, menu bar, and status
    bar, as we don't need any of these in this example program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, add a vertical layout to the canvas, and then select the canvas
    and click on the **Lay Out Vertically** button on top of the canvas. Then, add
    a text label to the top of the vertical layout and set its text to **Hello!**.
    Also, make its font bigger by setting its `stylesheet` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B02820_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, go to **File** | **New File or Project** and create a resource file. Then,
    add an empty HTML file and all the JavaScript files, CSS files, font files, and
    so on belonging to jQuery, Boostrap, and Font Awesome to your project resources:![How
    to do it…](img/B02820_09_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, open up your HTML file, which in this case is called `test.html`.
    First, link all the necessary JavaScript and CSS files to the HTML source code,
    between the `<head>` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following JavaScript to the `<head>` element, wrapped between
    the `<script>` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following code to the `<body>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are done with that, let''s open up `mainwindow.h` and add the following
    public functions to the `MainWindow` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, open up `mainwindow.cpp` and add the following headers to the top
    of the source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following code to the `MainWindow` constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we will declare what happens when `changeQtText()` and `showLoginInfo()`
    are called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Let's compile and run the program now; you should see something similar to the
    following screenshot. If you click on the **Change Cpp Text** button, the word
    **Hello!** at the top will change to **Goodbye!** If you click on the **Login**
    button, a message box will appear and show you exactly what you typed in the **Username**
    and **Password** input fields:![How to do it…](img/B02820_09_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we used two JavaScript libraries, jQuery and Boostrap. We also
    used an iconic font package called **Font Awesome**. These third-party add-ons
    were used to make the HTML user interface more interesting and responsive to different
    screen resolutions. We also used jQuery to detect the document's ready status,
    as well as to obtain the values of the input fields. You can download jQuery from
    [https://jquery.com/download](https://jquery.com/download), Bootstrap from [http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download),
    and Font Awesome from [http://fontawesome.io](http://fontawesome.io).
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt''s WebEngine uses a mechanism called **Web Channel** that enables peer-to-peer
    communication between the C++ program and the HTML page. The WebEngine module
    provides a JavaScript library that makes the integration a lot easier. The JavaScript
    is embedded in your project''s resource by default, so you don''t need to import
    it into your project manually. You just have to include it in your HTML page by
    calling the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Once you have included `qwebchannel.js`, you can initialize the `QWebChannel`
    class and assign the Qt object we registered earlier in C++ to a JavaScript variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In C++, it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in JavaScript, it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You may be wondering what this line means:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Qt''s web engine uses the remote debugging method to check for JavaScript errors
    and other problems. The number `1234` defines the port number you want to use
    for remote debugging. Once you have enabled remote debugging, you can access the
    debugging page by opening up a Chromium-based web browser, such as Google Chrome
    (this will not work in Firefox and other browsers) and typing in `http://127.0.0.1:1234`.
    You will then see a page that look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/B02820_09_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first page will display all the HTML pages that are currently running in
    your program, which in this case is `test.html`. Click on the page link and it
    will take you to another page for inspection. You can use this to check for CSS
    errors, JavaScript errors, missing files, and so on. Note that you should disable
    remote debugging once your program is bug-free and ready for deployment. This
    is because remote debugging takes time to initiate and it will increase your program's
    startup time.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to call a C++ function from JavaScript, you must place the `Q_INVOKABLE`
    macro in front the function''s declaration; otherwise, it will not work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Calling JavaScript functions from C++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous example, we have learned how to call C++ functions from JavaScript
    through Qt''s Web Channel system. In this example, we will try to do the reverse:
    call JavaScript functions from C++ code.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can call JavaScript functions from C++ through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: As usual, create a new **Qt Widgets Application** project and add the `webengine`
    and `webenginewidgets` modules to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, open up `mainwindow.ui` and remove the tool bar, menu bar, and status
    bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, add a vertical layout and a horizontal layout to the canvas. Then,
    select the canvas and click **Lay Out Vertically**. Make sure the horizontal layout
    is located at the bottom of the vertical layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two push buttons to the horizontal layout; one is called **Change HTML Text**
    and the other one is called **Play UI Animation**. Right-click on one of the buttons
    and click **Go to slot…**. A window will now pop up and ask you to pick a signal.
    Select the **clicked()** option and click **OK**. Qt will automatically add a
    slot function to your source code. Repeat this step for the other button as well:![How
    to do it…](img/B02820_09_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, open up `mainwindow.h` and add the following headers to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, declare the class pointer of a `QWebEngineView` object called `webview`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, open up `mainwindow.cpp` and add the following code to the `MainWindow`
    constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, define what will happen when the `changeHtmlText` button and the `playUIAnimation`
    button are clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Once you're done with that, let's create a resource file for our project by
    going to **File** | **New File or Project**. Then, select **Qt Resource File**
    under the **Qt** category and click **Choose**. Then, insert your desired file
    name and click **Next**, followed by **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, add an empty HTML file and all the required add-ons (jQuery, Bootstrap,
    and Font Awesome) to our project resources. Also, add the `tux.png` image file
    to the resources file as well, as we'll be using it in a short while.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, open up the HTML file we just created and add it to the project
    resources, in our case, it''s called `test.html`. Then, add the following HTML
    code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following JavaScript code, which is wrapped within the `<script>` tags,
    to the `<head>` element of our HTML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, add the following code to the `<body>` element of our HTML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Build and run the program now; you should get a similar result to that shown
    in the following screenshot. When you click on the **Change HTML Text** button,
    the information text is located within the top panel. If you click on the **Play
    UI Animation** button, the penguin image alongside the two sets of widgets will
    appear one after the other, with different animations:![How to do it…](img/B02820_09_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example is similar to the previous one. Once we have included the Web Channel
    JavaScript library and initiated the `QWebChannel` class, we can call any of the
    JavaScript functions from C++ by calling `webview->page()->runJavascript("jsFunctionNameHere();")`.
    Don't forget to apply the web channel created in C++ to the WebView's page as
    well; otherwise, it will not be able to communicate with the `QWebChannel` class
    in your HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: By default, we change the CSS properties of the penguin image and set its opacity
    to `0`, width to `0%`, and height to `0%`. We also hide the two list groups by
    calling the jQuery function `hide()`. When the **Play UI Animation** button is
    clicked, we repeat the same steps again just in case the animations have been
    played before (the same button has been clicked before), then we hide them again
    in order for the animations to be replayed.
  prefs: []
  type: TYPE_NORMAL
- en: One powerful feature of jQuery is that you can define what happens after an
    animation is done, which allows us to play the animations in sequence. In this
    example, we started with the penguin image and interpolated its CSS properties
    to a targeted setting within a second (`1000` milliseconds). Once that's done,
    we start another animation, which makes the first list group slide from top to
    bottom in 1 second. After that, we run the third animation, which makes the second
    list group fade in from nowhere within 1.5 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: To replace the information text located in the top panel, we created a JavaScript
    function called `changeHtmlText()` and within the function itself, we got the
    HTML element by referring to its ID and calling `html()` to change its contents.
  prefs: []
  type: TYPE_NORMAL
