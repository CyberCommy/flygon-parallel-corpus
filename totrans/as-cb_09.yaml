- en: Chapter 9. Improving Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performance matters as it has an impact on the reviews your app gets on the
    Google Play Store. A five-star app is what we want! On a high-end device, your
    app might be running smoothly without any trouble, but on a user's low-end device,
    things might look a little bit different. It performs slowly or runs out of memory,
    resulting in the crashing of that app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Improving Performance](img/B04299_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, you will learn the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Memory profilers and performance tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here comes the bad app—performance improvements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overdraw issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can we detect whether there will be any performance issues with our app?
    What are the common problems in Android apps? And how can we fix these issues?
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to performance, a few problems that could occur are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Memory leaks**: Although Android comes with its own memory management system,
    memory leaks may occur.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Out of memory exceptions**: Your app could easily run out of memory, resulting
    in a crash of your app. For example, think of processing large images on low-end
    devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overdraw**: Overdraw is the phenomenon of a pixel on a view being drawn more
    than once. It can result in an unresponsive or laggy user interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the upcoming recipes, we will examine the problems listed here. The Android
    SDK and Android Studio come with some great tools to examine your app.
  prefs: []
  type: TYPE_NORMAL
- en: Memory profilers and performance tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your app could suffer from memory leaks or from allocating too much memory.
  prefs: []
  type: TYPE_NORMAL
- en: The **Garbage Collector** (**GC**), responsible for cleaning up anything we
    do not want to use any more, is a great helper, but unfortunately, it is not perfect.
    It can only remove objects that are recognized as unreachable. Objects that are
    not cleaned up just hang around taking up space. After a while, if more and more
    objects are created, an `OutOfMemoryError` could occur, as would be the case if
    a couple of large images are attempted to load, which is a commonly seen crash
    scenario for many Android apps.
  prefs: []
  type: TYPE_NORMAL
- en: Memory leaks are somewhat difficult to find. Luckily for us, Android Studio
    comes with a memory monitor. It gives you an overview of your app's memory usage
    and some clue about memory leaks.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using this **Memory monitor** to find out whether unwanted GC event
    patterns are causing performance issues. In addition to this, we will use **Allocation
    Tracker** to identify where in the code the problem might be.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, it would be great if you have completed any of the recipes
    from the previous chapters. If possible, it should be the recipe that consumes
    data (text and images) from the Internet, for example, the app from [Chapter 2](ch02.html
    "Chapter 2. Applications with a Cloud-based Backend"), *Applications with a Cloud-based
    Backend*. Of course, any other app will do, as we are going to examine tools that
    will inspect our app in order to improve it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's find out how well our app performs!
  prefs: []
  type: TYPE_NORMAL
- en: Start Android Studio and open the app of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run your app on a device (or use a virtual Genymotion device).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Memory monitor** is situated on the **Memory** tab, which you can find
    on the **Android** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If it is not shown, use the *Cmd* + *6* (for Windows: *Alt* + *6*) shortcut
    to make it appear.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run your app to see the memory monitor recording your app's memory usage. In
    the following example, I have run an app that loads 200 venues (containing text
    and images) from the FourSquare API. I request 200 more of them each time I press
    the button, resulting in the peaks shown in this graph. Give me more coffee shops
    in my neighborhood, please:![How to do it...](img/B04299_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app's memory usage is displayed in dark blue. The unallocated memory appears
    in light blue. The allocated memory will grow when your app starts performing
    until there is no more memory left, or it will drop when the GC has arrived and
    done its job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are common events, and eventually, you call the GC yourself by clicking
    on the **Initiate GC** icon (the button on the upper-left corner of the **Memory**
    tab) on the left-hand side of the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will only be suspicious if a lot of memory is allocated in a short period
    of time or if the GC events occur more often. Your app may have a memory leak.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the same way, you can monitor the CPU usage. You can find it on the **CPU**
    tab on the **Android** panel. If you notice very high peaks here, your app might
    be doing too much. In the following screenshot everything looks just fine:![How
    to do it...](img/B04299_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To learn more about memory issues, we can use another tool. From the **Tools**
    menu, choose **Android** and the **Android Device Monitor** option. This tool
    comes with a heap view, memory monitor, and allocation tracker, which are all
    tools that provide insight on the memory that your app uses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it is not selected yet, click on the **Dalvik Debug Monitor Server** (**DDMS**)
    button that appears on the top navigator bar. `DDMS` is a debugging tool that
    provides thread and heap information and a couple of other things.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Heap** tab. On the right-hand side of the window, select your running
    app that should appear right under the device name. If you do not see your app,
    you might need to rerun your app.![How to do it...](img/B04299_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Memory requests will be handled by allocating parts from a pool of memory, which
    is called a heap. At any given time, some parts of the heap are in use, while
    some are unused and therefore available for future allocations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Heap** tab can help you diagnose memory leaks by displaying how much memory
    the system has allocated for your app. Here, you can identify object types that
    get or stay allocated unexpectedly or unnecessarily. If the allocated memory keeps
    on increasing, then this is a strong indication that your app has a memory leak.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If heap updates are not enabled, check out the buttons on the **Devices** tab.
    Click on the **update Heap** button (second from the left-hand side of the screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: The heap output is displayed only after a GC event. On the heap tab, find the
    **Cause GC** button and click on it to force the GC to do its job. After this,
    the **heap** tab will look somewhat like this:![How to do it...](img/B04299_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A lot of information about the app's heap usage is displayed in the preceding
    screenshot. Click on any item in the table to get further information. The information
    shown here can help you identify which parts of your app are causing too many
    allocations. Perhaps, you need to reduce the number of allocations or release
    memory earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To better understand what the critical parts of your app are and what stack
    trace exactly is causing the issues, you can click on the **Allocation Tracker**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On that tab, click on the **Start Tracking** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interact with your app in some way by refreshing the list, going to a detail
    view or whatever it is that your app does and that you would like to measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Get allocations** button to update the list of allocations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a result of the operation that you have initiated for your app, you will
    see all the recent allocations listed here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To see the stack trace, click on any of the allocations. In the example shown
    next, we are investigating the loading of an image within a table row. The trace
    shows what type of object was allocated in which thread, and where.![How to do
    it...](img/B04299_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you like, you can play around a little bit to learn more about the Android
    device monitor. Now that you have seen some of the tools to measure results, let's
    have a closer look at how to deal with them and how we can avoid memory issues.
    See you at the next recipe!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both the **Android Device Monitor** and the memory tools that come with Android
    Studio have many more options that you could explore. These options will help
    you improve the quality and performance of your app. It will make you and your
    app users happy!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Applications with a Cloud-based Backend"),
    *Applications with a Cloud-based Backend*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improve Quality*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Beta Testing Your Apps"), *Beta Testing
    Your App*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here comes the bad app – performance improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the do's and don'ts for Android application development to avoid performance
    issues, even if they may not occur on your own device? Testing Android apps is
    hard because there are so many devices out there. It is better to be safe than
    sorry, so write your code carefully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some say that there are two basic rules to writing efficient code: don''t do
    the work that you don''t need to do (hence the DRY and YAGNI principles from [Chapter
    8](ch08.html "Chapter 8. Improving Quality"), *Improving Quality*) and do not
    allocate memory if you can avoid it. In addition to this, it is also interesting
    to know that there are various libraries available that will not just save you
    the time but also prove to be very efficient. Of course, reinventing the wheel
    could be error prone as well.'
  prefs: []
  type: TYPE_NORMAL
- en: Think of the `RetroFit` library, for example, that will make it much easier
    to write code to consume web services, or think of `Picasso`, an image loading
    library that will load an image from a URL with just one line of code without
    worrying too much about things such as threading, image sizing, transforming,
    or memory management.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, some good practices are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Optimize bitmap memory usage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release memory when hiding the user interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not use too many nested views in your layouts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not create unnecessary objects, classes, or inner classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use primitive types instead of objects where possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefer static methods over virtual methods if you do not need any of the members
    of an object. Static invocations will be faster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to avoid internal getters and setters, as direct field access is much faster
    in Android.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not use floating points if integers can do the trick.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you register a listener, then make sure you also unregister it. Register
    and unregister in the corresponding pairs of the activity lifecycle. Register,
    for example, in the `onCreate` method and unregister in the `onDestroy` method.
    Or, register in the `onResume` method and unregister in the `onPause` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide feedback to the user if an operation takes more time than a few seconds.
    Let the user know that your app is not dead but busy! Show that something is going
    on by showing a progress indicator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always measure. Use performance tools to find out how well your app is doing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Android Studio tip**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Are you looking for something? Press *Shift* two times and start typing what
    you''re searching for. Or, to display all the recent files, use the *Cmd* + *E*
    (for Windows: *Ctrl* + *E*) shortcut.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you just need to have Android Studio up and running and preferably
    a real device with Internet access.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a really bad application so we have something to fix. We will
    not optimize bitmap memory usage. We will use nested views a lot, do a couple
    of other really bad things, and for this recipe, we will display a list of the
    worst movies ever. Here comes the bad app:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Android Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name it `BadApp` and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Phone and Tablet** option and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Blank Activity** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the names as is and click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `activity_main.xml` layout and replace the content with a list view
    that has a nice background color within a relative layout that has another nice
    background color. We are doing this because we want to demonstrate the overview
    issue in the next recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new layout file and name it `adapter.xml`. Let''s have some nested
    views and lots of background colors. All for the bad app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `AndroidManifest.xml` file and add a permission for Internet access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new class and name it `BadMovie`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an adapter class and name it `MainAdapter`. We will be using a `ViewHolder`
    class, and we will create a separate thread to load each movie image from the
    Net:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainActivity` file, add a private member that will contain all the
    movies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the implementation to the `onCreate` method to add a couple of thousand
    bad movies, creating an adapter for them and telling the list view about it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now run your app. According to the users at **Internet Movie Database** (**IMDB**),
    these are the worst comedy movies ever. We have added the movies many times on
    purpose to create a huge list where each row uses a primitive way of loading thumbnails
    from the Internet as shown in the following screenshot:![How to do it...](img/B04299_09_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on the device you are testing your app on, you need to scroll for
    a while or maybe the error appears right away.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is what sooner or later appears in **LogCat**. Check the log after your
    app has crashed. Use the *Cmd* + *6* shortcut (for Windows: *Alt* +*6*) to display
    **LogCat**. It will show you something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is where it happens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Have a look at the Memory and CPU Monitor as well. Your device is having a hard
    time. This is how it looks if you scroll through the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot provides the **Memory** report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04299_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot provides the **CPU** report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04299_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Well, this is what you get if you want to load full-size images multiple times.
    Since we are displaying thumbs anyway, there is not need for that and your device
    cannot handle it. Let's fix that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are also having a threading issue as the wrong images may appear on the rows.
  prefs: []
  type: TYPE_NORMAL
- en: Although the best solution is to have a server return thumbnails instead of
    large images, we will not always be in the position to control that, in particular
    when dealing with third-party sources. So, one way to solve the memory issue is
    to set the `inSampleSize` property for `BitmapFactory Options` when loading the
    bitmap in the `MainAdapter` class, just like we did in the recipes of previous
    chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, it will be even more efficient to use the `Picasso` library here. `Picasso`
    is a popular image library that will simplify the process for us. Among other
    things, it will load an image from the Internet in a separate thread and will
    shrink it to the size of its container, here the image view in the adapter layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `build.gradle` file in the `app` folder and add the dependency for
    `Picasso`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and click on the **Sync now** link that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `MainAdapter` class and replace the thread (and anything within it)
    that loads the image with just one line. Use the *Alt* + *Enter* shortcut to add
    the `Picasso` import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That is it. `Picasso` will take care of downloading and resizing the images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run the app again and scroll through the list as much as you want. Both
    the memory and the threading problem have been solved. And the list view does
    scroll smoothly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will come to know what difference this makes if you have a look at both
    the **Memory** and the **CPU** tabs of the **Android** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot provides the **Memory** report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04299_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot provides the **CPU** report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04299_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We just fixed our app, which is now capable of displaying a huge list of bad
    movies. In the next recipe, we will check whether we have any overdraw issues
    with the app. On older or less powerful devices, these issues may occur.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Picasso` also has some other interesting features such as creating round images,
    rotated images, or displaying error or placeholder images automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: An alternative to `Picasso` is the `Universal Image Loader` library.
  prefs: []
  type: TYPE_NORMAL
- en: '`RetroFit` is a strongly recommended library for API communication. It is a
    REST client for Android and Java and it could save you a lot of time and headaches.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Android Studio tip**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Want to refactor your code? Use the shortcut *Ctrl* + *T* (for Windows: *Ctrl*
    + *Alt* + *Shift* + *T*) to see what options you have. You can, for example, rename
    a class or method or extract code from a method.'
  prefs: []
  type: TYPE_NORMAL
- en: Overdraw issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The interface of your app needs to render quickly, and interaction, such as
    scrolling through a list, for example, should run smoothly. In particular, older
    or low-end devices often have a hard time to do these things right. An unresponsive
    or slow UI can be the result, which is often caused by something that is called
    overdraw.
  prefs: []
  type: TYPE_NORMAL
- en: Overdraw is the phenomenon of a pixel on a view being drawn more than once.
    A colored background with a view on top of that has another background color is
    an example of overdraw (the pixel is drawn twice), but that's not really an issue.
    Too much overdraw, however, will have an impact on your app's performance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to have a real device and you need to complete the `The Bad` app
    from the previous recipe to demonstrate overdraw issues, but you can examine any
    other app as well if you like.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your device contains a couple of interesting developer options. One of them
    is the **Debug GPU overdraw** option which can be obtained by following next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On your device, open the **Settings** app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Developer options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the **Developer options** item is not available on your device, you need
    to go to **About device** first and click seven times on **Build number**. Once
    you're done, go back. A new option called **Developer options** now appears in
    the list.
  prefs: []
  type: TYPE_NORMAL
- en: Find the **Debug GPU overdraw** option and click on it:![How to do it...](img/B04299_09_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog that pops up, select the **Show overdraw** area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, your device looks a little bit like a 3D movie without the corresponding
    glasses, but what actually is being shown here is this: colors indicate the amounts
    of overdraw, where no color means no overdraw (a pixel is painted only once),
    blue shows an overdraw of 1, green an overdraw of 2, light red an overdraw of
    3, and dark red an overdraw of 4 times or even more.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A maximum overdraw of 2 times is acceptable, so let's concentrate on the red
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Run the app you would like to examine. For this recipe, I have chosen to examine
    the `The Bad` app from the previous recipe, shown as follows:![How to do it...](img/B04299_09_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yeah, that is pretty bad. Every view has its own background color, resulting
    in overdraw.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android is smart enough to reduce some overdraw cases, but for complex apps,
    you need to fix them yourself. When you look at the layout for both the activity
    and adapter from the previous recipe, this cannot be that difficult.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, open the `activity_main.xml` layout file. Remove the `background` property
    from the list view, since it is not being used anyway. Also, remove the background
    property from the `RelativeLayout` file, as I do not like orange any way, at least
    not for apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `background` property from the `main_text_genre`, `main_text_director`,
    and the `main_text_actors` text views. Also, remove the `background` property
    from their parent view, which is the last `TableRow` appearing within `TableLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you rerun the app, the app not only does the layout somewhat better, but
    you will also notice that there is less indication of overdraw.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s check whether we can make further improvements. Change `FrameLayout`
    at the root to `RelativeLayout`. Get rid of `TableLayout` and position the text
    views relatively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Run your app again. It is getting better and better, is it not?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To further improve your app, remove all `text` properties. They were only there
    to check whether we were doing the right thing using the `layout_toRightOf` and
    `layout_below` properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this recipe, we have further improved our bad app by optimizing its layout.
    Also, it is no longer ugly. Actually, it has become quite good.
  prefs: []
  type: TYPE_NORMAL
- en: What layout type to use?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using `RelativeLayout` is more effective than `LinearLayout` but unfortunately
    it is not so developer friendly if, for example, you want to move or remove a
    text view that another view is referring to using a relative property.
  prefs: []
  type: TYPE_NORMAL
- en: The `FrameLayout` is much less complex, but it does not have this problem, and
    it seems to perform as well as `RelativeLayout`.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand it is not intented to contain many child widgets. Please be
    aware that in the end what counts is the smallest number of nested layout views,
    so you should pick the container that suits your needs and performs best.
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! Our app runs smoothly on all devices. We do not expect any weird errors
    any more.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's ship it to our beta users to find out what they think of it. We will
    find out once we have completed the final chapter, where we will discuss *adhoc
    distribution*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are more interesting tools that you perhaps would like to examine in order
    to improve the quality and performance of your app.
  prefs: []
  type: TYPE_NORMAL
- en: We have mentioned `Espresso` before. `Robotium` is another Android test automation
    framework for UI testing purposes. You can find it at [http://robotium.com](http://robotium.com).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improving Quality*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Beta Testing Your Apps"), *Beta Testing
    Your App*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
