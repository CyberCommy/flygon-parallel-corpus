- en: The Serverless Landscape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Welcome to the first chapter of *Kubernetes for Serverless Applications*. In
    this chapter, we are going to be looking at and discussing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What do we mean by serverless and Functions as a Service?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What services are out there?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of Lambda by Amazon Web Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the serverless toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What problems can we solve using serverless and Functions as a Service?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I think it is important we start by addressing the elephant in the room, and
    that is the term serverless.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless and Functions as a Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you say serverless to someone, the first conclusion they jump to is that
    you are running your code without any servers.
  prefs: []
  type: TYPE_NORMAL
- en: This can be quite a valid conclusion if you are using one of the public cloud
    services we will be discussing later in this chapter. However, when it comes to
    running in your own environment, you can't avoid having to run on a server of
    some sort.
  prefs: []
  type: TYPE_NORMAL
- en: Before we discuss what we mean by serverless and Functions as a Service, we
    should discuss how we got here. As people who work with me will no doubt tell
    you, I like to use the *pets versus cattle* analogy a lot as this is quite an
    easy way to explain the differences in modern cloud infrastructures versus a more
    traditional approach.
  prefs: []
  type: TYPE_NORMAL
- en: Pets, cattle, chickens, insects, and snowflakes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I first came across the *pets versus cattle* analogy back in 2012 from a slide
    deck published by Randy Bias. The slide deck was used during a talk Randy Bias
    gave at the cloudscaling conference on architectures for open and scalable clouds.
    Towards the end of the talk, he introduced the concept of pets versus cattle,
    which Randy attributes to Bill Baker who at the time was an engineer at Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: The slide deck primarily talks about scaling out and not up; let's go into this
    in a little more detail and discuss some of the additions that have been made
    since the presentation was first given five years ago.
  prefs: []
  type: TYPE_NORMAL
- en: Randy's slide deck can be found at [https://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds](https://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds).
  prefs: []
  type: TYPE_NORMAL
- en: Pets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pets are typically what we, as system administrators, spend our time looking
    after. They are traditional bare metal servers or virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: We name each server as you would a pet. For example, `app-server01.domain.com`
    and `database-server01.domain.com`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When our pets are ill, you will take them to the vets. This is much like you,
    as a system administrator, would reboot a server, check logs, and replace the
    faulty components of a server to ensure that it is running healthily.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You pay close attention to your pets for years, much like a server. You monitor
    for issues, patch them, back them up, and ensure they are fully documented.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is nothing much wrong with running pets. However, you will find that the
    majority of your time is spent caring for them—this may be alright if you have
    a few dozen servers, but it does start to become unmanageable if you have a few
    hundred servers.
  prefs: []
  type: TYPE_NORMAL
- en: Cattle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cattle are more representative of the instance types you should be running in
    public clouds such as **Amazon Web Services** (**AWS**) or Microsoft Azure, where
    you have auto scaling enabled.
  prefs: []
  type: TYPE_NORMAL
- en: You have so many cattle in your herd you don't name them; instead they are given
    numbers and tagged so you can track them. In your instance cluster, you can also
    have too many to name so, like cattle, you give them numbers and tag them. For
    example, an instance could be called `ip123067099123.domain.com` and tagged as
    `app-server`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a member of your herd gets sick, you shoot it, and if your herd requires
    it you replace it. In much the same way, if an instance in your cluster starts
    to have issues it is automatically terminated and replaced with a replica.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You do not expect the cattle in your herd to live as long as a pet typically
    would, likewise you do not expect your instances to have an uptime measured in
    years.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your herd lives in a field and you watch it from afar, much like you don't monitor
    individual instances within your cluster; instead, you monitor the overall health
    of your cluster. If your cluster requires additional resources, you launch more
    instances and when you no longer require a resource, the instances are automatically
    terminated, returning you to your desired state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chickens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In 2015, Bernard Golden added to the pets versus cattle analogy by introducing
    chickens to the mix in a blog post titled *Cloud Computing: Pets, Cattle* and
    *Chickens?* Bernard suggested that chickens were a good term for describing containers
    alongside pets and cattle:'
  prefs: []
  type: TYPE_NORMAL
- en: Chickens are more efficient than cattle; you can fit a lot more of them into
    the same space your herd would use. In the same way, you can fit a lot more containers
    into your cluster as you can launch multiple containers per instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each chicken requires fewer resources than a member of your herd when it comes
    to feeding. Likewise, containers are less resource-intensive than instances, they
    take seconds to launch, and can be configured to consume less CPU and RAM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chickens have a much lower life expectancy than members of your herd. While
    cluster instances can have an uptime of a few hours to a few days, it is more
    than possible that a container will have a lifespan of minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunately, Bernard's original blog post is no longer available. However,
    The New Stack have republished a version of it. You can find the republished version
    at [https://thenewstack.io/pets-and-cattle-symbolize-servers-so-what-does-that-make-containers-chickens/](https://thenewstack.io/pets-and-cattle-symbolize-servers-so-what-does-that-make-containers-chickens/).
  prefs: []
  type: TYPE_NORMAL
- en: Insects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping in line with the animal theme, Eric Johnson wrote a blog post for RackSpace
    which introduced insects. This term was introduced to describe serverless and
    Functions as a Service.
  prefs: []
  type: TYPE_NORMAL
- en: Insects have a much lower life expectancy than chickens; in fact, some insects
    only have a lifespan of a few hours. This fits in with serverless and Functions
    as a Service as these have a lifespan of seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Later in this chapter, we will be looking at public cloud services from AWS
    and Microsoft Azure which are billed in milliseconds, rather than hours or minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Eric's blog post can be found at [https://blog.rackspace.com/pets-cattle-and-nowinsects/](https://blog.rackspace.com/pets-cattle-and-nowinsects/).
  prefs: []
  type: TYPE_NORMAL
- en: Snowflakes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Around the time Randy Bias gave his talk which mentioned pets versus cattle,
    Martin Fowler wrote a blog post titled *SnowflakeServer*. The post described every
    system administrator''s worst nightmare:'
  prefs: []
  type: TYPE_NORMAL
- en: Every snowflake is unique and impossible to reproduce. Just like that one server
    in the office that was built and not documented by that one guy who left several
    years ago.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snowflakes are delicate. Again, just like that one server—you dread it when
    you have to log in to it to diagnose a problem and you would never dream of rebooting
    it as it may never come back up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Martin's post is available at [https://martinfowler.com/bliki/SnowflakeServer.html](https://martinfowler.com/bliki/SnowflakeServer.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summing up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once I have explained pets, cattle, chickens, insects, and snowflakes, I sum
    up by saying:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Organizations who have **pets** are slowly moving their infrastructure to
    be more like **cattle**. Those who are already running their* *infrastructure
    as **cattle** are moving towards **chickens** to get the most out of their resources.
    Those running **chickens** are going to be looking at how much work is involved
    in moving their application to run as **insects** by completely decoupling their
    application into individually executable components."*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then finally I say this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"No one wants to or should be running **snowflakes***."'
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will be discussing insects, and I will assume that you know
    a little about the services and concepts that cover cattle and chickens.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless and insects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As already mentioned, using the word serverless gives the impression that servers
    will not be needed. Serverless is a term used to describe an execution model.
  prefs: []
  type: TYPE_NORMAL
- en: When executing this model you, as the end user, do not need to worry about which
    server your code is executed on as all of the decisions on placement, server management,
    and capacity are abstracted away from you—it does not mean that you literally
    do not need any servers.
  prefs: []
  type: TYPE_NORMAL
- en: Now there are some public cloud offerings which abstract so much of the management
    of servers away from the end user that it is possible to write an application
    which does not rely on any user-deployed services and that the cloud provider
    will manage the compute resources needed to execute your code.
  prefs: []
  type: TYPE_NORMAL
- en: Typically these services, which we will look at in the next section, are billed
    for the resources used to execute your code in per second increments.
  prefs: []
  type: TYPE_NORMAL
- en: So how does that explanation fits in with the insect analogy?
  prefs: []
  type: TYPE_NORMAL
- en: Let's say I have a website that allows users to upload photos. As soon as the
    photos are uploaded they are cropped, creating several different sizes which will
    be used to display as thumbnails and mobile-optimized versions on the site.
  prefs: []
  type: TYPE_NORMAL
- en: In the pets and cattle world, this would be handled by a server which is powered
    on 24/7 waiting for users to upload images. Now this server probably is not just
    performing this one function; however, there is a risk that if several users all
    decide to upload a dozen photos each, then this will cause load issues on the
    server where this function is being executed.
  prefs: []
  type: TYPE_NORMAL
- en: We could take the chickens approach, which has several containers running across
    several hosts to distribute the load. However, these containers would more than
    likely be running 24/7 as well; they will be watching for uploads to process.
    This approach could allow us to horizontally scale the number of containers out
    to deal with an influx of requests.
  prefs: []
  type: TYPE_NORMAL
- en: Using the insects approach, we would not have any services running at all. Instead,
    the function should be triggered by the upload process. Once triggered, the function
    will run, save the processed images, and then terminate. As the developer, you
    should not have to care how the service was called or where the service was executed,
    so long as you have your processed images at the end of it.
  prefs: []
  type: TYPE_NORMAL
- en: Public cloud offerings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we delve into the core subject of this book and start working with Kubernetes,
    we should have a look at the alternatives; after all, the services we are going
    to be covering in upcoming chapters are nearly all loosely based off these services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three main public cloud providers all provide a serverless service:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda from AWS ([https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Functions by Microsoft ([https://azure.microsoft.com/en-gb/services/functions/](https://azure.microsoft.com/en-gb/services/functions/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Functions from Google ([https://cloud.google.com/functions/](https://cloud.google.com/functions/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these services has the support of several different code frameworks.
    For the purposes of this book, we will not be looking at the code frameworks in
    too much detail as using these is a design decision which has to based on your
    code.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to be looking at two of these services, Lambda from AWS and Functions
    by Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first service we are going to look at is AWS Lambda by AWS. The tagline
    for the service is quite a simple one:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Run code without thinking about servers."'
  prefs: []
  type: TYPE_NORMAL
- en: Now those of you who have used AWS before might be thinking the tagline makes
    it sound a lot like the AWS Elastic Beanstalk service. This service inspects your
    code base and then deploys it in a highly scalable and redundant configuration.
    Typically, this is the first step for most people in moving from pets to cattle
    as it abstracts away the configuration of the AWS services which provide the scalability
    and high availability.
  prefs: []
  type: TYPE_NORMAL
- en: Before we work through launching a hello world example, which we will be doing
    for all of the services, we will need an AWS account and its command-line tools
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, you need an AWS account. If you don''t have an account, you can
    sign up for an account at [https://aws.amazon.com/](https://aws.amazon.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/490eef47-c9e6-4409-b7b3-7152208e8d41.png)'
  prefs: []
  type: TYPE_IMG
- en: While clicking on the Create a Free Account and then following the onscreen
    instructions will give you 12 months' free access to several services, you will
    still need to provide credit or debit card details and it is possible that you
    could incur costs.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the AWS free tier, please see [https://aws.amazon.com/free/](https://aws.amazon.com/free/).
    This page lets you know which instance sizes and services are covered by the 12
    months of free service, as well as letting you know about non-expiring offers
    on other services, which include AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have your AWS account, you should create a user using the AWS **Identity
    and Access Management** (**IAM**) service. This user can have administrator privileges
    and you should use that user to access both the AWS Console and the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details on creating an IAM user, see the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Getting started with IAM**: [http://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started.html](http://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IAM best practices**: [http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html](http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using your AWS root account to launch services and access the API is not recommended;
    if the credentials fall into the wrong hands you can lose all access to your account.
    Using an IAM rather than your root account, which you should also lock down using
    multi-factor authentication, means that you will always have access to your AWS
    account.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final prerequisite is that you need access to the AWS command-line client,
    where I will be using macOS, but the client is also available for Linux and Windows.
    For information on how to install and configure the AWS command-line client, please
    see:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing the AWS CLI**: [http://docs.aws.amazon.com/cli/latest/userguide/installing.html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuring the AWS CLI**: [http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When configuring the AWS CLI, make sure you configure the default region as
    the one you will be accessing in the AWS web console, as there is nothing more
    confusing than running a command using the CLI and then not seeing the results
    in the web console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, you can test that you can access AWS Lambda from the command-line
    client by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This should return an empty list of functions like the one shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d1ca6867-43ce-4be1-b4c7-fb09317425c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have an account set up, created, and logged in using a non-root
    user, and we have the AWS CLI installed and configured, we can look at launching
    our first serverless function.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the AWS Console, click on the Services menu in the top-left of the screen
    and select Lambda by either using the filter box or clicking on the service in
    the list. When you first go to the Lambda service page within the AWS Console,
    you will be presented with a welcome page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9af2ae92-b7f8-4e06-adb2-7b74b844b5cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the Create a function button will take us straight to the process
    of launching our first serverless function.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four steps to creating a function; the first thing we need to do
    is select a blueprint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6383ef38-2b49-4ed2-b030-e618b1dab251.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the basic hello world function, we are going to be using a pre-built template
    called `hello-world-python`; enter this into the filter and you should be presented
    with two results, one is for Python 2.7 and the second uses Python 3.6:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d849d4c8-bb1f-4ba1-961f-eca27f408e18.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting `hello-world-python` and then clicking Export will give you the option
    of downloading the code used in the function in the `lambda_function.py` file
    and the template which is used by Lambda during step 3\. This can be found in
    the `template.yaml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code itself, as you would imagine, is pretty basic. It does nothing other
    than return a value it is passed. If you are not following along, the contents
    of the `lambda_function.py` file are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `template.yaml` file contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the template file configures both the `Runtime`, which in our
    case is `python2.7`, and some sensible settings for the `MemorySize` and `Timeout`
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'To continue to step 2, click on the function name, which for us is `hello-world-python`,
    and you will be taken to the page where we can choose how the function is triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f5f90a24-fbc4-4ee3-b6b0-99be4319790c.png)'
  prefs: []
  type: TYPE_IMG
- en: We are not going to be using a trigger just yet and we will look at these in
    a little more detail in the next function we launch; so for now, click on Next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3 is where we configure our function. There is quite a bit of information
    to enter here, but luckily a lot of the detail we need to enter has been pre-populated
    from the template we looked at earlier, as you can see from the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5d6396f6-b222-44b7-95e6-018b1ee71c9f.png)The details we need to
    enter are as follows: anything with a ***** is required and the *information*
    in italics was pre-populated and can be left as-is.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list shows all of the form fields and what should be entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic information**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name***: `myFirstFunction`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: *A starter AWS Lambda function*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime**: *Python 2.7*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lambda function code**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code entry type**: This contains the code for the function, there is no need
    to edit this'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable encryption helpers**: Leave unticked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment variables**: Leave empty'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lambda function handler and role**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Handler***: *lambda_function.lambda_handler*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Role***: Leave *Create new role from template(s)* selected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Role name***: *myFirstFunctionRole*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Policy templates**: We do not need a policy template for this function, leave
    blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave the Tags and Advanced settings at the default values. Once the preceding
    information has been entered, click on the Next button to take us to step 4, which
    is the final step before our function is created.
  prefs: []
  type: TYPE_NORMAL
- en: Review the details on the page. If you are happy that everything has been entered
    correctly, click on the Create function button at the bottom of the page; if you
    need to change any information, click on the Previous button.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a few seconds, you will receive a message confirming that your function
    has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0f0cdf16-4af5-47f4-af8e-8ec797b71a31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, there is a Test button. Clicking this will allow
    you to invoke your function. Here you will be able to customize the values posted
    to the function. As you can see from the following screenshot, I have changed
    the values for `key1` and `key2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2b2ec257-f2e5-413d-b4e0-0ea12d245b26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have edited the input, clicking on Save and test will store your updated
    input and then invoke the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bf6ec9e2-39d9-4b2c-82b3-6d9d4180daa1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on Details in the Execution result message will show you both the
    results of the function being invoked and also the resources used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The report for the request with the `36b2103a-90bc-11e7-a32a-171ef5562e33`
    ID looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Duration: 0.26 ms`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Billed Duration: 100 ms`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Memory Size: 128 MB`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Max Memory Used: 19 MB`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, it took `0.26 ms` for the function to run and we were charged
    the minimum duration of `100 ms` for this. The function could consume up to `128
    MB` of RAM, but we only used `19 MB` during the execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning to the command line, running the following command again shows that
    our function is now listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/05a66f97-617a-4692-88b7-e7ebc8f62aac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also invoke our function from the command line by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the preceding command, the `aws lambda invoke` command
    requires several flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--invocation-type`: There are three types of invocation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RequestResponse`: This is the default option; it sends the request, which
    in our case is defined in the `--payload` section of the command. Once the request
    has been made, the client waits for a response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Event`: This sends the request and triggers an event. The client does not
    wait for a response and instead you receive an event ID back.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DryRun`: This calls the function, but never actually executes it—this is useful
    when testing that the details used to invoke the function actually have the correct
    permissions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--function-name`: This is the name of the function we want to invoke.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-type`: There is currently a single option here, `Tail`. This returns
    the result of the `--payload`, which is the data we want to send the function;
    typically this will be JSON.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outputfile.txt`: The final part of the command defines where we want to store
    the output of the command; in our case it is a file called `outputfile.txt` which
    is being stored in the current working directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When invoking the command from the command line, you should get something like
    the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/96133eac-6f74-456c-9e4c-a2b589b39a00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Returning to the AWS Console and remaining on the `myFirstFunction` page, click
    on Monitoring and you will be presented with some basic statistics about your
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7f872ac0-1026-4e5e-ac11-86d1c549ad0a.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding graphs, there are details on how many times
    your function has been invoked, how long it takes, and also if there are any errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on View logs in CloudWatch will open a new tab which lists the log
    streams for `myFirstFunction`. Clicking on the name of the log stream will then
    take you to a page which gives you the results for each time the function has
    been invoked both as testing in the AWS Console and also from the command-line
    client:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/afe2bb09-fee8-448b-a967-23c0bb79cae9.png)'
  prefs: []
  type: TYPE_IMG
- en: Both the Monitoring page and logs are extremely useful when it comes to debugging
    your Lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up, we are going to take a look at Microsoft''s serverless offering, Azure
    Functions. Microsoft describes this service as:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Azure Functions is a solution for easily running small pieces of code, or
    "functions," in the cloud. You can write just the code you need for the problem
    at hand, without worrying about a whole application or the infrastructure to run
    it."'
  prefs: []
  type: TYPE_NORMAL
- en: Like Lambda, there are several ways your Function can be invoked. In this quick
    walkthrough, we will be deploying a Function which is called using an HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need an Azure account to follow along with this example. If you don''t
    have an account, you can sign up for a free account at [https://azure.microsoft.com/](https://azure.microsoft.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aaae171e-6f5e-436d-a525-4295a6f8ca25.png)'
  prefs: []
  type: TYPE_IMG
- en: At the time of writing, Microsoft is crediting all new accounts with $200 to
    spend on Azure services, and like AWS, several services have a free tier.
  prefs: []
  type: TYPE_NORMAL
- en: While you are credited with $200, you will still need to provide credit card
    details for verification purposes. For more information on the services and limits
    in the free tier, please see [https://azure.microsoft.com/en-gb/free/pricing-offers/](https://azure.microsoft.com/en-gb/free/pricing-offers/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Function app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the work we are going to be doing to create our first Function app will
    be using the web-based control panel. Once you have your account, you should see
    something like the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/385debf1-c35f-4010-a79c-7b80a48a9a70.png)One thing you should note
    about the Microsoft Azure control panel is that it scrolls horizontally, so if
    you lose where you are on a page you can typically find your way back to where
    you need to by scrolling to the right.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding screenshot, there are quite a few options.
    To make a start creating your first Function, you should click on + New at the
    top of the left-hand side menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you will be taken to the Azure Marketplace. Click on Compute and
    then in the list of featured marketplace items you should see Function App. Click
    on this and you will be taken to a form which asks for some basic information
    about the Function you want to create:'
  prefs: []
  type: TYPE_NORMAL
- en: 'App name: Call this what you want; in my case I called it `russ-test-version`.
    This has to be a unique name and, if your desired App name has already been used
    by another user, you will receive a message that your chosen App name is not available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subscription: Choose the Azure subscription you would like your Function to
    be launched in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resource Group: This will be automatically populated as you type in the App
    name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hosting Plan: Leave this at the default option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Location: Choose the region which is closest to you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Storage: This will automatically be populated based on the App name you give,
    for our purpose leave Create New selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pin to dashboard: Tick this as it will allow us to quickly find our Function
    once it has been created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are not following along in your account, my completed form looks like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1e5b5baf-6ff7-407a-b73a-274b3d3f9b6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have filled out the form, click on the Create button at the bottom
    of the form and you will be taken back to your Dashboard. You will receive a notification
    that your Function is being deployed as you can see from the box at the right-hand
    side in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7b63fff0-90ee-4180-90ce-27e105345252.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the square in the Dashboard or on the notification in the top menu
    (the bell icon with the 1 on it) will take you to an Overview page; here you can
    view the status of the deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f0457e45-0048-4299-b1c0-41d1d882b679.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once deployed, you should have an empty Function app ready for you to deploy
    your code into:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/74c2fe59-1540-45cd-a50a-5495c6cc2b05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To deploy some test code, you need to click on the + icon next to Functions
    in the left-hand side menu; this will take you to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b3aeb6d1-3b24-4424-936b-54eaa633c4bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With Webhook + API and CSharp selected, click on Create this function; this
    will add the following code to your Function app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This code simply reads in the variable `name`, which it has passed via the URL
    and then prints back to the user as `Hello <name>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can test this by clicking on the Run button at the top of the page. This
    will execute our Function as well as giving you the output and logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/53a57b86-99be-44f4-8d83-650bbfdfff5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The logs for the test run look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also view more information on your Function app by clicking on Monitor
    in the inner left-hand side menu. As you can see from the following screenshot,
    we have details on how many times your Function has been called, as well as the
    status of each execution and the duration for each invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/17005c7d-9339-4778-9427-4b1d9abc22f5.png)For more detailed information
    on the invocation of your Function app, you can enable Azure Application Insights,
    and for more information on this service, please see [https://azure.microsoft.com/en-gb/services/application-insights/](https://azure.microsoft.com/en-gb/services/application-insights/).'
  prefs: []
  type: TYPE_NORMAL
- en: Being able to test within the safety of the Azure Dashboard is all well and
    good, but how do you directly access your Function app?
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on HttpTriggerCSharp1, which will take you back to your code,
    above the code block you will have a button which says Get function URL, and clicking
    on this will pop up an overlay box with a URL in it. Copy this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a96cb806-1592-4675-9a54-4bc2b686e4b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For me, the URL was:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://russ-test-function.azurewebsites.net/api/HttpTriggerCSharp1?code=2kIZUVH8biwHjM3qzNYqwwaP6O6gPxSTHuybdNZaD36cq3HptD5OUw==`'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding URL will no longer work as the Function has been removed; it has
    been provided for illustration purposes only, and you should replace it with your
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: To interact with URLs on the command line, I am going to be using HTTPie, which
    is a command-line HTTP client. For more detail on HTTPie, see the project's homepage
    at [https://httpie.org/](https://httpie.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Call that URL on the command line using HTTPie with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aef3a83d-dab4-475f-90db-e4af340aa111.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from what is returned, our Function app has returned the HttpStatusCode
    BadRequest message. This is because we are not passing the `name` variable. To
    do this, we need to update our command to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you would expect, this returns the correct message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0c2d6785-a9f2-416e-97e5-0fd4ad62f7f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also enter the URL in your browser and see the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/22f9d26d-137f-4e5c-a743-6677c6e52752.png)'
  prefs: []
  type: TYPE_IMG
- en: The serverless toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we finish this chapter, we are going to take a look at the serverless
    toolkit. This is an application that aims to provide a consistent experience when
    it comes to deploying your serverless functions across different cloud providers.
    You can find the service's homepage at [https://serverless.com/.](https://serverless.com/)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the home page, it supports both AWS and Microsoft Azure,
    as well as the Google Cloud Platforms and IBM OpenWhisk. You will also notice
    that there is a Sign Up button; click on this and follow the onscreen prompts
    to create your account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once signed up, you will receive some very simple instructions on how to install
    the tool and also deploy your first application; let''s follow these now. First
    of all, we need to install the command-line tool by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The installation will take a few minutes, and once it is installed you should
    be able to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will confirm the version that was installed by the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f8a53f70-7d32-454b-9f85-a1af8a3a2a77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the command-line tool is installed and we have confirmed that we can
    get the version number without any errors, we need to log in. To do this, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will open a browser window and take you to a login page where
    you will need to select which account you wish to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0a3f479e-2f81-4efa-b354-2b639b5048c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot, it knows I last logged into serverless
    using my GitHub account, so clicking this will generate a Verification Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9617b99a-c9b2-42ed-b3fd-e19630b3cd2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Pasting the code into your Terminal at the prompt and pressing *Enter* on your
    keyboard will then log you in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/98f434e4-34a5-4944-86b8-bb0e3fc183d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we are logged in, we can create our first project, which is going to
    be another `hello-world` application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch our `hello-world` function in AWS, we must first create a folder
    to hold the artifacts created by the serverless toolkit and change to it; I created
    mine on my `Desktop` using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To generate the files needed to launch our `hello-world` application, we need
    to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/95eebe4f-7ae4-44cb-a4fa-9fbbee44bb72.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Opening `serverless.yml` in my editor, I can see the following (I have removed
    the comments):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'I updated the service to be `russ-test-serverless-hello-world`; you should
    choose something unique as well. Once I had saved my updated `serverless.yml`
    file, I ran:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This, as you may have already guessed, deployed the `hello-world` application
    to AWS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/28247467-6cf2-4ed2-8c4d-44ae1e7e48f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Access the endpoint URL using HTTPie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns the following JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Entering the endpoint URL in your browser, (in my case as I am using Safari)
    shows you the RAW output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9d4a4322-f408-4266-8db3-7f331506ad90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Going to the URL mentioned at the very end of the `serverless deploy` command
    gives you an overview of the function you have deployed to Lambda using serverless:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c4b72966-2f3f-4a82-8996-cedbb2196a46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the AWS Console by going to [https://console.aws.amazon.com/](https://console.aws.amazon.com/),
    select Lambda from the Services menu, and then change to the region your function
    was launching in; this should show you your function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/def45ba0-8167-4302-aea8-fbcdfcd45caf.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, you might scratch your head thinking, *How was it launched in
    my account? I didn't provide any credentials!* The serverless tool is designed
    to use the same credentials as the AWS CLI we installed before we launched our
    first Lambda function—these can be found at `~/.aws/credentials` on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove the function, simply run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: And this will remove everything in your AWS account that the serverless toolkit
    has created.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on how to use the serverless toolkit to launch an Azure
    Function, please see the quick-start guide which can be found at [https://serverless.com/framework/docs/providers/azure/guide/quick-start/](https://serverless.com/framework/docs/providers/azure/guide/quick-start/).
  prefs: []
  type: TYPE_NORMAL
- en: Problems solved by serverless and Functions as a Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though we have only been launching the most basic applications so far,
    I hope you are starting to see how using serverless could help with the development
    of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you have a JavaScript application which is being hosted in an object
    store such as Amazon's S3 service. Your application could be written in, say,
    React ([https://facebook.github.io/react/](https://facebook.github.io/react/))
    or Angular ([https://angular.io/](https://angular.io/)), and both of these technologies
    allow you to load external data using JSON. This data can be requested and delivered
    using a serverless function—combining these technologies allows you to create
    an application that not only has no single point of failure, but also, when using
    public cloud offerings, is a true *you only pay for what you use* application.
  prefs: []
  type: TYPE_NORMAL
- en: As the serverless function is being executed and then is immediately terminated,
    you should not have to worry about where or how it is executed, just that it is.
    This means that your application, in theory, should be scalable and also more
    fault-tolerant than a more traditional server-based application.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if something goes wrong when one of your functions is called, for
    instance, if it crashes or there are resource issues and you know that when your
    function is next called it will be being launched afresh, you don't need to worry
    about your code being executed on a server which is having issues.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have taken a very quick look at what is meant by serverless,
    and we have launched and interacted with serverless functions in AWS and also
    Microsoft Azure as well as used a third-party tool, which just happens to be called
    serverless, to create a serverless function in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: You will have noticed that so far we haven't mentioned Kubernetes at all, which
    you may be thinking for a book entitled *Kubernetes for Serverless Applications*
    is a little strange. Don't worry though; in the next chapter we will be looking
    at Kubernetes in more detail and all will become clear.
  prefs: []
  type: TYPE_NORMAL
