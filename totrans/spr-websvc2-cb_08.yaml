- en: Chapter 8. Securing SOAP Web-Services using WSS4J Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating a Web-Service call using a username token with a plain/digest
    password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating a Web-Service call using Spring security to authenticate a username
    token with a plain/digest password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing SOAP messages using a digital signature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating a Web-Service call using an X509 certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting/decrypting SOAP Messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, the usage of SUN''s implementation **(XWSS)**: OASIS
    **Web-Services Security** **(WS-Security** or **WSS)** specification in Spring-WS
    (that uses `XwsSecurityInterceptor` to perform security operations) is explained.
    In this chapter, Spring-WS''s support for Apache''s implementation (WSS4J) of
    OASIS WS-Security specification will be explained. Even though both of these implementation
    of WS-Security are capable of performing the required security operations (authentication,
    signing messages, and encryption/decryption), WSS4J performs faster than XWSS.'
  prefs: []
  type: TYPE_NORMAL
- en: Spring-WS supports WSS4J using `Wss4jSecurityInterceptor`, which is an `EndpointInterceptor`
    that performs security operations on request messages before calling the `Endpoint`.
  prefs: []
  type: TYPE_NORMAL
- en: 'While XWSS uses the external configuration policy file, WSS4J (and `Wss4jSecurityInterceptor`
    accordingly) requires no external configuration file and is entirely configurable
    by properties. The **validation** (receiver-side) and **securement** (sender-side)
    actions applied by this interceptor are specified through `validationActions`
    and `securementActions` properties. Multiple actions can be set as space-separated
    strings. Here is an example configuration on the receiver side (server-side in
    this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `validationActions` is an operations list made up of space-separated strings.
    When a sender sends a message, the `validationActions` (on receiver-side) will
    be executed.
  prefs: []
  type: TYPE_NORMAL
- en: The `securementActions` is an operations list made of space-separated strings.
    These actions will be executed when the sender sends a message to a receiver.
  prefs: []
  type: TYPE_NORMAL
- en: '**Validation actions:** `UsernameToken, Timestamp, Encrypt, signature`, and
    `NoSecurity`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Securement actions:** `UsernameToken, UsernameTokenSignature, Timestamp,
    Encrypt, Signature`, and `NoSecurity`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order of the actions is important and is applied by the `Wss4jSecurityInterceptor`.
    This interceptor will return a fault message if the incoming SOAP message `securementActions`
    (in sender-side) was sent in a different way than the one configured by `validationActions`
    (in receiver-side).
  prefs: []
  type: TYPE_NORMAL
- en: 'For the operations, such as encryption/decryption or signatures, WSS4J needs
    to read data from a key store ( `store.jks`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Security concepts such as authentication, signatures, decryption, and encryption
    were already detailed in the previous chapter. In this chapter, we will discuss
    how to implement these features using WSS4J.
  prefs: []
  type: TYPE_NORMAL
- en: For simplification, for most of the recipes in this chapter, use the projects
    in *How to integrate test using Spring-JUnit support*, [Chapter 3](ch03.html "Chapter 3. Testing
    and Monitoring Web-Services"), *Testing and Monitoring Web-Services*, to set up
    a server and to send and receive messages by the client. However, in the last
    recipe, projects from [Chapter 2](ch02.html "Chapter 2. Building Clients for SOAP
    Web-Services"), *Creating Web-Service client for WS-Addressing endpoint*, are
    used for the server and client side.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating a Web-Service call using a username token with a plain/digest
    password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication simply means to check whether callers of a service are who they
    claim to be. One way of checking the authentication of a caller is to check its
    password (if we consider a username as a person, the password is similar to the
    signature of the person). Spring-WS uses `Wss4jSecurityInterceptor` to send/receive
    the username token with the password along with SOAP messages, and to compare
    it (in the receiver-side) with what is set as a pre-defined username/password
    in the property format. This property setting of the Interceptor force tells the
    sender of messages that a username token with the password should be included
    in the sender messages, and in the receiver side, the receiver expects to receive
    this username token with a password for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Transmitting a plain password makes a SOAP message unsecure. `Wss4jSecurityInterceptor`
    provides configuration properties (in the property format) to include the digest
    of the password along with sender message. On the receiver's side, the digested
    password included in the incoming message will be compared with the digested password,
    calculated from what is set in the property format.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe presents how to authenticate a Web-Service call using the username
    token. Here, the client acts as a sender and the server acts as the receiver.
    This recipe contains two cases. In the first case, the password will be transmitted
    in plain text format. In the second case, by changing the property, the password
    will be transmitted in digest format.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we have the following two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-8.1` (for a server-side Web-Service), with the following
    Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-8.1-Client` (for client-side), with the following Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to implement authentication using a plain username token
    with a plain-text password:'
  prefs: []
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` in the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `UsernameToken`, and configure
    the `callbackHandler` `(....wss4j.callback.SimplePasswordValidationCallbackHandler)`
    within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` in the client-side application context (
    `applicationContext.xml`), set the `securement` action to `UsernameToken`, and
    set the `username, password`, and `password type` (in `text` format here).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-8.1:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-8.1-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the client side (note the `UsernameToken` with the plain
    password tags that is highlighted within the `Header` of the SOAP''s `Envelope)`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow these steps to implement authentication using the username token with
    the digest password:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the client-side application context ( `applicationContext.xml`) to set
    the password's type to the digest format (note that no change in the server side
    is required).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-8.1:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-8.1-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the client-side output (note the UsernameToken with the digest password
    tags that is highlighted within the Header of the SOAP''s Envelope):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-8.1` project is a server-side Web-Service that requires
    its client to send a SOAP envelope that contains a username with a password.
  prefs: []
  type: TYPE_NORMAL
- en: The `Liverestaurant_R-8.1-Client` project is a client-side test project that
    sends SOAP envelopes to the server that contains a username token with a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the server side, `Wss4jSecurityInterceptor` forces the server for a username
    token validation for all the incoming messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The interceptor uses a `validationCallbackHandler` ( `SimplePasswordValidationCallbackHandler`)
    to compare the incoming message's username/password with the included username/password
    (admin/password).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side, `wss4jSecurityInterceptor` includes the username ( `admin/password`)
    token in all outgoing messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, authenticate using a plain username token, since the client includes
    a plain password `(<property name="securementPasswordType" value="PasswordText"/>)`
    in the ongoing messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'However, in the second case, authenticate using the digest username token,
    since the password digest `(<property name="securementPasswordType" value="PasswordDigest">)`
    is included in the username token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the server compares an incoming SOAP message digest password with
    the calculated digested password set inside `spring-ws-servlet.xml`. In this way,
    the communication will be more secure by comparison with the first case on which
    the password was transmitted in plain text.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Authenticating a Web-Service call using Spring security, to authenticate a
    username token with a plain/digest password*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Authenticating a Web-Service call using an X509 certificate*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating a Web-Service call using Spring security to authenticate a username
    token with a plain/digest password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we have the authentication task using the username token with the digest/plain
    password, as we did in the first recipe of this chapter. The only difference here
    is that the Spring security framework is used for authentication (SpringPlainTextPasswordValidationCallbackHandler
    and `SpringDigestPasswordValidationCallbackHandler)`. Since the Spring security
    framework is beyond the scope of this book, it is not described here. However,
    you can read more about it in the *Spring security reference* documentation, available
    at the following website: [http://www.springsource.org/security](http://www.springsource.org/security).'
  prefs: []
  type: TYPE_NORMAL
- en: Just like the first recipe of this chapter, this recipe also contains two cases.
    In the first case, the password will be transmitted in a plain-text format. In
    the second case, by changing the configuration, the password will be transmitted
    in a digest format.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we have the following two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-8.2` (for a server-side Web-Service), with the following
    Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-8.2-Client` (for client-side), with the following Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to implement the authentication of a Web-Service call, using
    Spring security to authenticate a username token with a plain-text password:'
  prefs: []
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` in the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `UsernameToken`, and configure
    the `validationCallbackHandler` `(....wss4j.callback.SpringPlainTextPasswordValidationCallbackHandler)`
    within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` in the client-side application context (
    `applicationContext.xml`), set securement action to `UsernameToken`, and set the
    username, password, and password type `(text` format here).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-8.2:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-8.2-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the client side (note the UsernameToken with the digest
    password tags that is highlighted within the Header of the SOAP''s Envelop):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow these steps to implement the authentication of a Web-Service call using
    Spring security to authenticate a username token with a digested password:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify `Wss4jSecurityInterceptor` in the server-side application context ( `spring-ws-servlet.xml`)
    and configure the `validationCallbackHandler` `(....ws.soap.security.wss4j.callback.SpringDigestPasswordValidationCallbackHandler)`
    within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify `Wss4jSecurityInterceptor` in the client-side application context ( `applicationContext.xml`)
    to set the password type (digest format here).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-8.2:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-8.2-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the client side (note the UsernameToken with the digest
    password tags that is highlighted within Header of the SOAP''s Envelop):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `Liverestaurant_R-8.2` project, security for client and server is almost
    the same as `Liverestaurant_R-8.1` (as shown in the first recipe of this chapter),
    except for the validation of the username token on the server side. A Spring security
    class is responsible for validating the username and the password, by comparison
    with the incoming message's username/password with the fetch data from a DAO layer
    (instead of hardcoding the username/password in `spring-ws-servlet.xml)`. In addition,
    other data related to the successfully authenticated user can be fetched from
    the DAO layer and returned for authorization to check some account data.
  prefs: []
  type: TYPE_NORMAL
- en: In the first case, the `CallbackHandler SpringPlainTextPasswordValidationCallbackHandler`
    uses an `authenticationManager`, which uses `DaoAuthenticationProvider`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This provider calls a customized user information service ( `MyUserDetailService.java`)
    that gets a username from the provider and internally fetches all the information
    for that user from a DAO layer (for example, password, roles, is expired, and
    so on). This service finally returns the populated data in the `UserDetails` type
    class ( `MyUserDetails.java`). Now, if the `UserDetails` data matches the incoming
    message''s username/password, it returns a response; otherwise, it returns a SOAP
    fault message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the second case, however, the `CallbackHandler` is `SpringDigestPasswordValidationCallbackHandler`,
    which compares the digest password included in the SOAP incoming message with
    the digested password that is fetched from the DAO layer (note that the DAO layer
    could fetch data from different data-sources, such as the database, LDAP, XML
    file, and so on):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Same as the first recipe in this chapter, setting`<property name="securementPasswordType"
    value="PasswordText">` to `PasswordDigest` in the client application context causes
    the password to be transmitted into a digested format.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Authenticating a Web-Service call, using a username token with a plain/digest
    password*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Authenticating a Web-Service call using an X509 certificate*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing SOAP messages using a digital signature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of a signature in the security term is to verify whether a received
    message is altered. Signature covers two main tasks in WS-Security, namely, signing
    and verifying signatures of messages. All concepts involved in a message signature
    are detailed in the previous chapter, in the *Securing SOAP messages using digital
    signature* recipe. In this recipe, signing and verification of a signature using
    WSS4J is presented.
  prefs: []
  type: TYPE_NORMAL
- en: Spring-WS's `Wss4jSecurityInterceptor` is capable of signing and verification
    of signatures based on the WS-Security standard.
  prefs: []
  type: TYPE_NORMAL
- en: Setting this interceptor's `securementActions` property to `Signature` causes
    the sender to sign outgoing messages. To encrypt the signature token, the sender's
    private key is required. Properties of a key store are needed to be configured
    in the application context file. The alias and the password of the private key
    (inside key store) for use are specified by the `securementUsername` and `securementPassword`
    properties. The `securementSignatureCrypto` should specify the key store containing
    the private key.
  prefs: []
  type: TYPE_NORMAL
- en: Setting `validationActions` to `value="Signature`" causes the receiver of the
    message to expect and validate the incoming message signatures (as described at
    beginning). The `validationSignatureCrypto` bean should specify the key store
    that contains the public key certificates (trusted certificate) of the sender.
  prefs: []
  type: TYPE_NORMAL
- en: '`org.springframework.ws.soap.security.wss4j.support.CryptoFactoryBean` from
    the `wss4j` package can extract the key store data (such as the certificate and
    other key store information ), and this data could be used for authentication.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, the client store private key is used for encryption of the client's
    signature of a message. On the server-side, the client's public key certificate,
    included in the server key store (within a trusted certificate entry), will be
    used for decryption of the message signature token. Then the server does the verification
    of the signature (as described in the beginning). Key store used in [Chapter 7](ch07.html
    "Chapter 7. Securing SOAP Web-Services using XWSS Library"), in the recipe *Preparing
    pair and symmetric Key stores*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we have the following two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-8.3` (for a server-side Web-Service), with the following
    Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-8.3-Client` (for the client-side), with the following Maven
    dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` in the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `Signature`, and set the
    property `validationSignatureCrypto` to `CryptoFactoryBean` (configure the server-side
    key store location and its password) within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` in the client-side application context (
    `applicationContext.xml`), set the securement action to `Signature`, and set the
    property `securementSignatureCrypto` to `CryptoFactoryBean` (configure the client-side
    key store location and its password) within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-8.3:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-8.3-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the client side (please note highlighted text):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security configuration on the server side requires the client to include a binary
    signature token in the message. Settings in the client-side configuration file
    include the signature token in the outgoing messages. A client uses its own private
    key, included in client-side key store, to encrypt the signature of a message
    (calculated based on the message's content). On the server-side, the client certificate
    from the server-side (trusted certificate) key store is used for decrypting of
    a signature token. Then the verification of the signature from the binary signature
    token (as described at the beginning of this recipe) will be done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting `validationActions` to `Signature` on the server-side causes it to
    expect a signature from the client configuration, and setting the key store causes
    the client-side public-key certificate (trusted certificate) in the server-side
    key store to be used for the decryption of the signature. Then the server does
    a verification of the signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`The code statement <property name="securementActions" value="Signature" />`,
    and setting the key store on the client-side configuration causes the client to
    send the encrypted signature (using the client''s private key with the alias `client`,
    and the client encrypts a hash (signature) generated from the message) and is
    sent along with the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Authenticating a Web-Service call using an X509 certificate*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Securing SOAP Web-Services using XWSS Library"),*Securing
    SOAP Web Services using XWSS Library:*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Preparing pair and symmetric Key stores*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating a Web-Service call using an X509 certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this chapter, how to use a username token for authentication of an
    incoming message is presented. The client's certificate, which came along with
    an incoming message, could be used to authenticate as an alternative for the username's
    token for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure that all incoming SOAP messages carry a client's certificate, the
    configuration file on the sender's side should sign and the receiver should require
    signatures on all messages. In other words, the client should sign the message,
    and include the X509 certificate in the outgoing message, and the server, first
    compares the incoming certificate with the trusted certificate, which is embedded
    within server key store, and then it goes into the steps to verify the signature
    of the incoming message.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we have the following two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-8.4` (for a server-side Web-Service), with the following
    Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-8.4-Client` (for the client-side), with the following Maven
    dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` on the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `Signature`, and set the
    property `validationSignatureCrypto` to `CryptoFactoryBean` (configure the server-side
    key store location and its password) within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` in the client-side application context (
    `applicationContext.xml`), set the securement action to `Signature`, set a property
    ( `securementSignatureKeyIdentifier`) to include a binary `X509` token, and set
    the property `securementSignatureCrypto` to `CryptoFactoryBean` (configure the
    client-side key store location and its password) within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the output of the client side (please note highlighted text):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Signing and verification of signature is the same as the *Securing SOAP messages
    using a digital signature* recipe from this chapter. The difference is the following
    part of the configuration to generate a `BinarySecurityToken` element containing
    the X509 certificate, and to include it in the outgoing message on the sender''s
    side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Embedding the client certificate in the caller message while signing the message
    causes the server to validate this certificate with the one included in the key
    store (trusted certificate entry). This validation confirms whether the caller
    is the person he/she claims to be.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Securing Soap messages using a digital signature*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Securing SOAP Web-Services using XWSS Library"),*Securing
    SOAP Web Services using XWSS Library:*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Preparing pair and symmetric Key stores*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting/decrypting SOAP messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concepts of encryption and decryption of SOAP messages are the same as described
    in *Encrypting/Decrypting of SOAP Messages* from [Chapter 7](ch07.html "Chapter 7. Securing
    SOAP Web-Services using XWSS Library"). Spring-WS's `Wss4jSecurityInterceptor`
    provides decryption of the incoming SOAP messages by including the setting property
    `validationActions` to `Encrypt` on the receiver's-side (server-side here). On
    the sender's side (the client side here), setting the property `securementActions`
    causes the sender to `encrypt` outgoing messages.
  prefs: []
  type: TYPE_NORMAL
- en: '`Wss4jSecurityInterceptor` needs to access the key store for encryption/decryption.
    In the case of using a symmetric key, `Key storeCallbackHandler` is responsible
    for accessing (by setting the properties of `location` and `password)` and reading
    from a symmetric key store, and passing it to the interceptor. However, in the
    case of using a private/public key pair store, `CryptoFactoryBean` will do the
    same job.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, in the first case, a symmetric key, which is shared by the client
    and server, is used for encryption on the client-side and decryption on the server-side.
    Then, in the second case, the server public key certificate in the client-side
    key store (trusted certificate) is used for data encryption and the server private
    key in the server-side key store is used for decryption.
  prefs: []
  type: TYPE_NORMAL
- en: In the first two cases, the whole payload is used in Encryption/Decryption.
    By setting one property, it is possible to Encrypt/Decrypt part of the payload.
    In the third case, only part of the payload is set as the target of Encryption/Decryption.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we have the following two projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-8.5` (for a server-side Web-Service), with the following
    Maven dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-8.5-Client` (for the client-side), with the following Maven
    dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spring-ws-security-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-ws-test-2.0.0.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-expression-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to implement encryption/decryption using a symmetric key:'
  prefs: []
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` on the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `Encrypt`, and configure
    `Key storeCallbackHandler` to read from the symmetric key store (configure the
    server-side symmetric key store location and its password) within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` on the client-side application context (
    `applicationContext.xml`), set the securement action to `Encrypt`, and configure
    the `Key storeCallbackHandler` to read from the symmetric key store (configure
    the client-side symmetric key store location and its password) within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-8.5:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-8.5-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the client side (note highlighted text):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Follow these steps to implement encryption, using a server-trusted certificate
    on the client-side key store (in `clientStore.jsk)`, and decryption on the server-side
    private key (in `serverStore.jks):`
  prefs: []
  type: TYPE_NORMAL
- en: Register `Wss4jSecurityInterceptor` on the server-side application context (
    `spring-ws-servlet.xml`), set the validation action to `Encrypt`, and set the
    property `validationSignatureCrypto` to `CryptoFactoryBean` (configure the server-side
    key store location and its password) within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the `Wss4jSecurityInterceptor` in the client-side application context
    ( `applicationContext.xml`), set the securement action to `Encrypt`, and set `securementSignatureCrypto`
    to `CryptoFactoryBean` (configure the client-side key store location and its password)
    within this interceptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the output of the server side (note highlighted text):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow these steps to implement encryption/decryption on the payload:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify case 2, set the property `securementEncryptionParts` to a specific part
    of the payload in `Wss4jSecurityInterceptor` on the server side/client side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-8.5:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-8.5-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the client side (note highlighted text):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first case, the client and the server both share the symmetric key. The
    client encrypts the entire payload using a symmetric key, and sends it to the
    server. On the server side, the same key will be used to decrypt the payload.
  prefs: []
  type: TYPE_NORMAL
- en: However, in the second and third cases, the client-side server certificate,
    embedded in the client store, is used for encryption of the payload, and on the
    server side, the private key of the server store will be used for decryption.
    The difference between the second and the third case is that the second case encrypts/decrypts
    the whole payload, but in the third case, only part of the payload will be the
    target of encryption/decryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first case, the setting `validationActions` to `Encrypt` on server-side
    causes the server to decrypt the incoming messages using a symmetric key. The
    interceptor uses the `ValidationCallbackHandler` for decryption, using a symmetric
    key store, set in the `location` property. The property `type` sets the store
    type of the key, and `password` sets the key store password of the symmetric key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: On the client-side, the setting property `securementActions` to `Encrypt` causes
    the client to encrypt all outgoing messages. Encryption is customized by setting
    `securementEncryptionKeyIdentifier` to `EmbeddedKeyName`. When the `EmbeddedKeyName`
    type is chosen, the secret key to encryption is mandatory. The symmetric key alias
    (symmetric here) is set by the `securementEncryptionUser`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `ds:KeyName` element in the SOAP header takes the value of
    the `securementEncryptionUser` property. `securementEncryptionEmbeddedKeyName`
    could be used to indicate a different value. The `securementEncryptionKeyTransportAlgorithm`
    property defines which algorithm to use to encrypt the generated symmetric key.
    `securementCallbackHandler` is provided with `Key storeCallbackHandler`, which
    points to the appropriate key store, that is, a symmetric key store, as described
    in the server-side configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the second and the third case, the `validationDecryptionCrypto`, configured
    on the server side is almost the same as the first case for decrypting data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client-side, setting `value="Encrypt`" of `securementActions` causes
    the client to encrypt all outgoing messages. `securementEncryptionCrypto` is for
    setting the key store location and the password. `SecurementEncryptionUser` is
    for setting the alias of the server certificate to reside on the client key store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The difference between *case 2* and *3* is that the following the configuration
    setting on the client-side/server-side configuration causes only a part of the
    payload to be encrypted/decrypted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Securing SOAP messages using a digital signature*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),*Building
    Clients for SOAP Web-Services*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating Web-Service client for WS-Addressing endpoint*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Securing SOAP Web-Services using XWSS Library"),*Securing
    SOAP Web Services using XWSS Library*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Preparing* a *pair and symmetric key stores*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
