- en: Chapter 12. Scalability and Modularity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll cover the most well-known CSS methodologies in the process
    of creating modular and scalable code. This is a very interesting subject because
    there are a lot of methodologies. Each has its pros and cons. In this chapter,
    we will get a basic knowledge about them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building scalable and modular code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS methodologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMACSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BEM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OOCSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to choose the right methodology?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building scalable and modular code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of building good code is unique to each developer. But how can you
    build easily scalable CSS code? Additionally, this code needs to be modular.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important thing in methodologies is the naming convention. You can
    use a proper methodology for your project, but you can use it in the wrong way
    and append bad class names. Have you ever seen projects that have classes with
    a name and definition similar to this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the class name is created to make padding with value `0`, but
    finally it has a value not equal to `0`. This can be an example of a bad naming
    convention. There can be more examples of badly used names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The second important thing in methodologies is the structure of classes/elements
    in document and nesting levels. Some sources say that the maximum nesting levels
    shouldn't be greater than five, while others say three. For the sake of readability,
    code should have a fully flat structure (with one level).
  prefs: []
  type: TYPE_NORMAL
- en: Let's check the popular CSS methodologies and learn their best features.
  prefs: []
  type: TYPE_NORMAL
- en: CSS methodologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS methodologies are built to make the process of building code more predictable
    and more organized. The most well-known methodologies are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalable and Modular Architecture for CSS** (**SMACSS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object Oriented CSS** (**OOCSS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block Element Modifier** (**BEM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these methodologies has different features. Let's check what these popular
    methodologies can offer.
  prefs: []
  type: TYPE_NORMAL
- en: SMACSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SMACSS was created by Jonathan Snook. It''s more of a framework than a methodology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![SMACSS](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For the official website of the project, visit [https://smacss.com/](https://smacss.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'SMACSS is based on the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Base rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Module rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Theme rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Base rules are related elements:'
  prefs: []
  type: TYPE_NORMAL
- en: header (`h1`-`h6`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: links (`a`, `a:hover`, `a:active`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: forms (`form`, `input`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these rules are related to HTML elements and should not require the !`important`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: Layout rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Layout rules are related to the main blocks in the structure, such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: '`header`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`footer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`side` `menu`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`article`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These elements are described with IDs as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Module rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Module rules are related to components or blocks on the website. Let''s take
    an example fragment of a previously created structure for a blog post. Here, we
    will have a better overview of how to use the SMACSS modules in this specific
    case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Module rules](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To describe it in CSS, we will need to use selectors based on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build an HTML for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create selectors based on module rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It's pretty easy and obvious how to create all of this.
  prefs: []
  type: TYPE_NORMAL
- en: State rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'State rules are related to elements'' states. There are a bunch of possible
    state rules classes. Here''s a list of possible rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`is-collapsed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is-error`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is-active`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is-tab-active`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The easiest way to describe state rules is an example with a simple navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To describe an element in a menu which is currently active, you can use the
    class `is-active`. This convention is easy to read and gives you the opportunity
    for the right class names.
  prefs: []
  type: TYPE_NORMAL
- en: Theme rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Theme rules are related to specific views. For example, you created a page
    with an element:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: All we know in the beginning is that `.alert` is a window and needs to stick
    to the browser like a lightbox window.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS (in `alert.css`) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to add a specific theme for this `.alert` (in `theme.css`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As we can see in `alert.css`, we keep the definition of static elements that
    won't be changed in `theme.css`. Theme rules kept in `theme.css` are theming our
    component; in this case, it is an `alert` window.
  prefs: []
  type: TYPE_NORMAL
- en: Summary of SMACSS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SMACSS is a really good methodology due to the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It has base rules that gather definitions of main elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has state rules that describe the states of elements with the `is-` convention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses IDs for main elements in CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OOCSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OOCSS is a project or methodology started by Nicole Sullivan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OOCSS](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Visit the official website of the project at [http://oocss.org/](http://oocss.org/)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main principles of OOCSS are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Separate structure and skin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separate container and content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What does it mean? Let's try to dig a little bit deeper.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that it is better to describe an element that is nested in another
    element with a separate class than nested in a container. When you create a code
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You shouldn''t base your CSS on selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'But rather on small change in markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And then describe it in CSS with selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: It gives you the possibility to move the class `.product-name` to any element
    in the HTML structure and the visual features will be changed too, as described.
    This gives you more flexibility and reusable code.
  prefs: []
  type: TYPE_NORMAL
- en: Using OOCSS in our sample
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s try to use OOCSS in our sample code to describe the blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In your CSS, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary of OOCSS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s summarize OOCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: You can reuse classes anywhere in your HTML and you don't need to think about
    which module it was described in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The methodology is very mature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block Element Modifier (BEM)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next methodology is built by Yandex. In the BEM methodology, every element
    is described with a class. Nesting isn''t needed because of the flat CSS structure.
    The naming convention is based on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Block Element Modifier (BEM)](img/00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Visit the official website of the project at [https://en.bem.info/](https://en.bem.info/)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Using BEM in our sample
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s try to use BEM in our sample code to describe the blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in your CSS, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using BEM in SASS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It shouldn''t be hard to build BEM code in SASS. Let''s try to describe the
    code from the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How to use modifier?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The preceding code example is based on blocks and elements from the BEM methodology.
    How can we add `M` with its modifier? When can we use it? Let''s imagine that
    we have two articles: one article with an image on the left and a second with
    an image on the right-hand side of the block. With the BEM methodology, we can
    use a modifier. Let''s take the previous CSS code and append the modifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the modifier is defined as `imgleft` and is added to the block
    using two dashes. The modifier can help you to avoid creating new code for the
    new block. It can work like a decorator implemented in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Which methodology should you use?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a very good question. For sure, you need to use the methodology that
    works for you. But which one is suitable? The best CSS methodology is the one
    that can be easily debugged. When is it? For sure, when you don't need to dig,
    for example, 10 rules for one element. The best readability in CSS can be achieved
    when the rule is strictly related to the elements on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe your own methodology?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes! If you want to create something new and best for your project, create your
    own methodology. However, do not reinvent the wheel and do not try to rename the
    well-known methodologies to build your own. A deep understanding of these three
    methodologies can be the key for you to create a small, unnamed mash-up that fits
    your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Choosing the proper methodology for your code/project should be easier now.
    In this chapter, we acquainted ourselves with CSS methodologies and tried to define
    their approaches. The most important thing is to understand them and know how
    to apply them to your code. It can be useful in the process of debugging some
    other code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on CSS code optimization. We will use `Gulp.js`
    to prepare your code for testing and final optimized projects.
  prefs: []
  type: TYPE_NORMAL
