- en: Chapter 12. Scalability and Modularity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。可扩展性和模块化
- en: In this chapter, we'll cover the most well-known CSS methodologies in the process
    of creating modular and scalable code. This is a very interesting subject because
    there are a lot of methodologies. Each has its pros and cons. In this chapter,
    we will get a basic knowledge about them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍在创建模块化和可扩展代码的过程中最知名的CSS方法论。这是一个非常有趣的主题，因为有很多方法论。每种方法论都有其优缺点。在本章中，我们将对它们有一个基本的了解。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Building scalable and modular code
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建可扩展和模块化的代码
- en: CSS methodologies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS方法论
- en: SMACSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMACSS
- en: BEM
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BEM
- en: OOCSS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OOCSS
- en: How to choose the right methodology?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何选择正确的方法论？
- en: Building scalable and modular code
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建可扩展和模块化的代码
- en: The process of building good code is unique to each developer. But how can you
    build easily scalable CSS code? Additionally, this code needs to be modular.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 构建良好代码的过程对每个开发者来说都是独特的。但是你如何构建易扩展的CSS代码？此外，这段代码需要是模块化的。
- en: 'The most important thing in methodologies is the naming convention. You can
    use a proper methodology for your project, but you can use it in the wrong way
    and append bad class names. Have you ever seen projects that have classes with
    a name and definition similar to this one:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 方法论中最重要的是命名约定。你可以为你的项目使用适当的方法论，但你也可以错误地使用它并附加不良的类名。你是否曾经见过类似这样的项目，其中类名和定义类似于这样的：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, the class name is created to make padding with value `0`, but
    finally it has a value not equal to `0`. This can be an example of a bad naming
    convention. There can be more examples of badly used names:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，类名被创建为使用值`0`进行填充，但最终它的值不等于`0`。这可以是一个不良的命名约定的例子。还有更多不良使用名称的例子：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The second important thing in methodologies is the structure of classes/elements
    in document and nesting levels. Some sources say that the maximum nesting levels
    shouldn't be greater than five, while others say three. For the sake of readability,
    code should have a fully flat structure (with one level).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 方法论中的第二个重要事项是文档中类/元素的结构和嵌套级别。一些来源说，最大嵌套级别不应大于五，而其他人说三。为了可读性，代码应该具有完全平坦的结构（只有一级）。
- en: Let's check the popular CSS methodologies and learn their best features.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看流行的CSS方法论，学习它们的最佳特点。
- en: CSS methodologies
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS方法论
- en: 'CSS methodologies are built to make the process of building code more predictable
    and more organized. The most well-known methodologies are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: CSS方法论的目的是使构建代码的过程更可预测和更有组织。最知名的方法论如下：
- en: '**Scalable and Modular Architecture for CSS** (**SMACSS**)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展和模块化的CSS架构**（**SMACSS**）'
- en: '**Object Oriented CSS** (**OOCSS**)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向对象的CSS**（**OOCSS**）'
- en: '**Block Element Modifier** (**BEM**)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**块元素修饰符**（**BEM**）'
- en: Each of these methodologies has different features. Let's check what these popular
    methodologies can offer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每种方法论都有不同的特点。让我们看看这些流行的方法论能提供什么。
- en: SMACSS
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SMACSS
- en: 'SMACSS was created by Jonathan Snook. It''s more of a framework than a methodology:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: SMACSS是由Jonathan Snook创建的。它更像是一个框架而不是一个方法论：
- en: '![SMACSS](img/00153.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![SMACSS](img/00153.jpeg)'
- en: For the official website of the project, visit [https://smacss.com/](https://smacss.com/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有关该项目的官方网站，请访问[https://smacss.com/](https://smacss.com/)。
- en: 'SMACSS is based on the following rules:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SMACSS基于以下规则：
- en: Base rules
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本规则
- en: Layout rules
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局规则
- en: Module rules
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块规则
- en: State rules
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态规则
- en: Theme rules
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主题规则
- en: Base rules
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本规则
- en: 'Base rules are related elements:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 基本规则与相关元素：
- en: header (`h1`-`h6`)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题（`h1`-`h6`）
- en: links (`a`, `a:hover`, `a:active`)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接（`a`，`a:hover`，`a:active`）
- en: forms (`form`, `input`)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单（`form`，`input`）
- en: All of these rules are related to HTML elements and should not require the !`important`
    statement.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些规则都与HTML元素相关，不应该需要`!important`语句。
- en: Layout rules
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布局规则
- en: 'Layout rules are related to the main blocks in the structure, such as these:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 布局规则与结构中的主要块相关，例如这些：
- en: '`header`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`header`'
- en: '`footer`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`footer`'
- en: '`content`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content`'
- en: '`side` `menu`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`side` `menu`'
- en: '`article`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`article`'
- en: 'These elements are described with IDs as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元素的描述如下：
- en: 'CSS:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Module rules
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块规则
- en: 'Module rules are related to components or blocks on the website. Let''s take
    an example fragment of a previously created structure for a blog post. Here, we
    will have a better overview of how to use the SMACSS modules in this specific
    case:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 模块规则与网站上的组件或块相关。让我们以先前为博客文章创建的结构的一个示例片段为例。在这里，我们将更好地了解如何在这种特定情况下使用SMACSS模块：
- en: '![Module rules](img/00154.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![模块规则](img/00154.jpeg)'
- en: 'To describe it in CSS, we will need to use selectors based on the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要在CSS中描述它，我们需要使用基于以下内容的选择器：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s build an HTML for it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为其构建一个HTML：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s create selectors based on module rules:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们基于模块规则创建选择器：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It's pretty easy and obvious how to create all of this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 创建所有这些是相当容易和明显的。
- en: State rules
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态规则
- en: 'State rules are related to elements'' states. There are a bunch of possible
    state rules classes. Here''s a list of possible rules:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 状态规则与元素的状态相关。有许多可能的状态规则类。以下是可能的规则列表：
- en: '`is-collapsed`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is-collapsed`'
- en: '`is-error`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is-error`'
- en: '`is-active`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is-active`'
- en: '`is-tab-active`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is-tab-active`'
- en: 'The easiest way to describe state rules is an example with a simple navigation:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 描述状态规则最简单的方法是通过一个简单的导航示例：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To describe an element in a menu which is currently active, you can use the
    class `is-active`. This convention is easy to read and gives you the opportunity
    for the right class names.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要描述当前活动的菜单中的元素，可以使用类`is-active`。这种约定易于阅读，并为你提供了正确的类名的机会。
- en: Theme rules
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主题规则
- en: 'Theme rules are related to specific views. For example, you created a page
    with an element:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 主题规则与特定视图相关。例如，你创建了一个带有元素的页面：
- en: 'The HTML is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: HTML如下：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: All we know in the beginning is that `.alert` is a window and needs to stick
    to the browser like a lightbox window.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初所知道的是`.alert`是一个窗口，需要粘在浏览器上，就像一个灯箱窗口一样。
- en: 'The CSS (in `alert.css`) is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: CSS（在`alert.css`中）如下：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we need to add a specific theme for this `.alert` (in `theme.css`):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为这个`.alert`（在`theme.css`中）添加一个特定的主题：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As we can see in `alert.css`, we keep the definition of static elements that
    won't be changed in `theme.css`. Theme rules kept in `theme.css` are theming our
    component; in this case, it is an `alert` window.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Summary of SMACSS
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SMACSS is a really good methodology due to the following reasons:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: It has base rules that gather definitions of main elements
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has state rules that describe the states of elements with the `is-` convention
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses IDs for main elements in CSS
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OOCSS
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OOCSS is a project or methodology started by Nicole Sullivan:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![OOCSS](img/00155.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: Visit the official website of the project at [http://oocss.org/](http://oocss.org/)
    for more information.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'The main principles of OOCSS are as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Separate structure and skin
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separate container and content
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What does it mean? Let's try to dig a little bit deeper.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that it is better to describe an element that is nested in another
    element with a separate class than nested in a container. When you create a code
    like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You shouldn''t base your CSS on selectors:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'But rather on small change in markup:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And then describe it in CSS with selectors:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It gives you the possibility to move the class `.product-name` to any element
    in the HTML structure and the visual features will be changed too, as described.
    This gives you more flexibility and reusable code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Using OOCSS in our sample
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s try to use OOCSS in our sample code to describe the blog post:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In your CSS, it will look like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary of OOCSS
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s summarize OOCSS:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: You can reuse classes anywhere in your HTML and you don't need to think about
    which module it was described in
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The methodology is very mature
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block Element Modifier (BEM)
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next methodology is built by Yandex. In the BEM methodology, every element
    is described with a class. Nesting isn''t needed because of the flat CSS structure.
    The naming convention is based on:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![Block Element Modifier (BEM)](img/00156.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: Visit the official website of the project at [https://en.bem.info/](https://en.bem.info/)
    for more information.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Using BEM in our sample
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s try to use BEM in our sample code to describe the blog post:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now in your CSS, it will look like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using BEM in SASS
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It shouldn''t be hard to build BEM code in SASS. Let''s try to describe the
    code from the previous code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How to use modifier?
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The preceding code example is based on blocks and elements from the BEM methodology.
    How can we add `M` with its modifier? When can we use it? Let''s imagine that
    we have two articles: one article with an image on the left and a second with
    an image on the right-hand side of the block. With the BEM methodology, we can
    use a modifier. Let''s take the previous CSS code and append the modifier:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As we can see, the modifier is defined as `imgleft` and is added to the block
    using two dashes. The modifier can help you to avoid creating new code for the
    new block. It can work like a decorator implemented in CSS.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Which methodology should you use?
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a very good question. For sure, you need to use the methodology that
    works for you. But which one is suitable? The best CSS methodology is the one
    that can be easily debugged. When is it? For sure, when you don't need to dig,
    for example, 10 rules for one element. The best readability in CSS can be achieved
    when the rule is strictly related to the elements on the page.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Maybe your own methodology?
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes! If you want to create something new and best for your project, create your
    own methodology. However, do not reinvent the wheel and do not try to rename the
    well-known methodologies to build your own. A deep understanding of these three
    methodologies can be the key for you to create a small, unnamed mash-up that fits
    your requirements.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Choosing the proper methodology for your code/project should be easier now.
    In this chapter, we acquainted ourselves with CSS methodologies and tried to define
    their approaches. The most important thing is to understand them and know how
    to apply them to your code. It can be useful in the process of debugging some
    other code.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该更容易选择适合您的代码/项目的正确方法论了。在本章中，我们熟悉了CSS方法论，并试图定义它们的方法。最重要的是要理解它们，并知道如何将它们应用到您的代码中。这在调试其他代码的过程中可能会有用。
- en: In the next chapter, we will focus on CSS code optimization. We will use `Gulp.js`
    to prepare your code for testing and final optimized projects.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于CSS代码优化。我们将使用`Gulp.js`来准备您的代码进行测试和最终优化项目。
