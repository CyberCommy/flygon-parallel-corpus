- en: Working with Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Suite is a widely used web application penetration testing tool based on
    Java architecture, which is available in both free and paid versions. It can be
    used on multiple platforms such as Windows, Linux, and macOS. Burp Suite is used
    to identify vulnerabilities and to verify web application attack vectors. It has
    a wealth of features and is a very popular, comprehensive tool, with many books
    written about it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about Burp Suite and the various editions that
    exist. We will highlight the differences between the editions and how you can
    obtain a trial license for the professional version, which is used for the demos
    within the chapter. You will prepare your environment so that the demos can be
    replicated in your own lab. Finally, we will examine the tools that Burp Suite
    has to offer and look at how these are used by penetration testers. You will gain
    a good understanding of the tools by using practical examples that are easy to
    follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Burp Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nuts and bolts of Burp Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the examples and instructions in this chapter, please
    check that you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2019.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Suite Professional (v1.7.37 at the time of writing)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Open Web Application Security Project** *(***OWASP**) **Broken Web Applications** (**BWA**)
    project version 1.2.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploitable 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Suite is similar to an interception proxy. While performing penetration
    tests on a targeted web application, Burp Suite can be configured so that all
    traffic is routed through its proxy server. This makes Burp Suite act as a man-in-the-middle
    attack by capturing and analyzing each web request to and from the web application.
    This enables the penetration tester to leverage features such as pausing, manipulating,
    and replaying requests in order to discover potential injection points in the
    target web application. These injection points can be defined manually or via
    automated fuzzing techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzing or fuzz testing is a software technique that consists of discovering
    implementation bugs using malformed or semi-malformed packets in an automated
    fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Burp Suite is currently available in three editions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Community**: This is the free version, which is shipped by default with Kali
    Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Professional**: This is a paid edition, which, at the time of writing, costs
    $399 per user per year.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise**:This edition is meant for enterprises. According to PortSwigger''s
    website ([https://portswigger.net/](https://portswigger.net/)), it has a starting
    price of $3,999.00 per year at the time of writing. This edition is not within
    the scope of this book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, we will be using the Professional Edition. PortSwigger offers
    a free trial of Burp Suite Professional. All you need to do is request a trial
    license by providing a valid company name and company email address.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between the Community Edition and the Professional Edition boils
    down to the features. The Community Edition has limitations on the Intruder functionality
    by force-throttling threads. The Community Edition does not include any scanning
    functionality or any built-in payloads. You can, of course, load your own payloads
    into the Community Edition. Plugins that require the Professional Edition will
    not work in the Community Edition. The Community Edition only allows you to create
    temporary projects, so you will not be able to save your project to disk. The
    Community Edition includes only the essential manual tools*, *whereas the Professional
    Edition contains the essential and advanced manual tools.
  prefs: []
  type: TYPE_NORMAL
- en: For a full list of differences between the different editions, you can visit [https://portswigger.net/burp](https://portswigger.net/burp),
    which will explain the differences and display the current prices of each edition.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to test the features of Burp Suite, we need to prepare our environment.
    There are many web applications that are vulnerable by design. These are created
    specifically for learning purposes, and they are great. As you master your skills
    in Burp Suite, I encourage you to look at various vulnerable web applications
    that are created and released. A good resource to find both online and offline
    versions of vulnerable web application software is OWASP.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP maintains a **Vulnerable Web Applications Directory Project**, which can
    be found at [https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project#tab=Main](https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project#tab=Main).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Burp Suite Professional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin penetration testing, we need to have Burp Suite installed. By
    default, Kali Linux 2019.1 ships with the Community Edition of Burp Suite. In
    this book, we will be using a free trial of the Professional Edition.
  prefs: []
  type: TYPE_NORMAL
- en: Please take note that, at the time of writing, the latest stable version is
    v1.7.37\. If you use any beta version, the interface will look different to what
    you see in the screenshots printed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a walk through the steps needed to obtain a trial license for Burp
    Suite Professional:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://portswigger.net/requestfreetrial/pro](https://portswigger.net/requestfreetrial/pro).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete your details as required by the form. Take note that you need to enter
    a company email address, so personal email addresses from Gmail, Outlook, and
    others will not work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will receive an email with login details, which you will use to log in
    to the download portal. Once you have logged into your account, you can proceed
    to download the license file. I am using the plain `jar` file, as I can run this
    self-contained application without the need to install it, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03b21896-2e71-4108-a20a-f9d780df68eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Download options for Burp Suite Professional'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have downloaded the file, you can launch Burp Suite Professional using
    the `java -jar [filename]` command from a Kali Linux Terminal window. During the
    first launch, it will ask you to provide the license key and proceed to activate
    the license.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to configure the amount of memory allocated to Burp Suite, you can
    use the `-Xmx` command switch, for example, `java -jar -Xmx2048m [filename]`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up OWASP BWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The BWA project creates a virtual machine that consists of a number of applications
    that have known vulnerabilities. The project was created for those who are interested
    in learning the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The security of web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various manual testing techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various automated testing techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use tools to perform source code analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the impact of web attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to test web application firewalls and similar tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The direct link for the OWASP BWA project is [https://www.owasp.org/index.php/OWASP_Juice_Shop_Project](http://sourceforge.net/projects/owaspbwa/files/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have downloaded the BWA virtual machine, you will need to extract
    it using a program such as 7-Zip. The BWA files shown in the following figure are
    virtual machine files, which can be imported into VMware Workstation or VirtualBox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/345c5828-2317-48f3-9b83-6ba02880933f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: BWA extracted files'
  prefs: []
  type: TYPE_NORMAL
- en: 'Importing the files into VMware Workstation is straightforward. All you need
    to do is open or import the `.vmx` file. For VirtualBox, we will need to do some
    additional steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open VirtualBox and create a new virtual machine. Define a name for the virtual
    machine, and then select the operating system type as Linux Ubuntu (32-bit).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Continue with the wizard, but when it comes to the hard drive components, instead
    of creating a new hard drive, select Use an existing virtual hard disk file. Here,
    you will select the BWA virtual hard disk (`OWASP Broken Web Apps-cl1.vmdk`),
    as per the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0cfa1d99-4a5a-49ee-82bb-2b2bd3f4f708.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Importing the BWA virtual hard disk'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create to create the virtual machine. You can tweak the processing
    power and memory as you please, but the defaults should suffice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you are using either the host only or **network**** address translation**
    (**NAT**) networking configurations for this virtual machine. Do not directly
    expose it to the public internet, as the virtual machine is vulnerable by design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the virtual machine starts up, it will provide you with the IP address
    that can be used to access it, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/674865e2-02c7-4f27-85c9-da0014710a0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: BWA virtual machine information'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have BWA started, you will notice that it provides you with information
    on how to access it via a web browser and via SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Burp Suite relies on using the proxy tool for all of its functions, you
    will need to configure your browser to use the proxy. In Kali Linux 2019.1, Firefox
    **Extended Support Release** (**ESR**) is included by default. It is straightforward
    to configure the proxy settings of the browser, but having to change the proxy
    settings manually every time can be frustrating.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firefox ESR has a few proxy management add-ons. I personally like to use FoxyProxy
    ([https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/](https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/)*)*,
    as it provides the functionality to define multiple proxies and change them by
    using a switch from the add-on button in Firefox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58c5d51c-b25e-4eaf-a46e-a0d1fe65ba4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: FoxyProxy with multiple proxies configured'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new proxy is as simple as clicking on Options and adding in a new proxy.
    In the next section, we will cover adding a proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring and configuring Burp Suite components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Suite has a wide range of tools to help penetration testers throughout
    the whole web application testing process. These tools enable penetration testers
    to map the environment, carry out vulnerability scans, and exploit vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Burp Suite has a simple graphical interface that holds the two rows of tabs
    and various panels (*Figure 6*)*.* The first row of tabs (**1**) are the tools
    that are currently installed. The second row of tabs are sub components of the
    main tool (**2**), and, within that sub component, you have various panels (**3**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebb064e7-0ad0-4c33-a143-26c71c7aa1d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Burp Suite''s interface'
  prefs: []
  type: TYPE_NORMAL
- en: The example in *Figure 6* shows that the main tool of Target is selected, and
    the sub component of Site map is selected. Within that sub component, there are
    multiple panels, such as Contents and Issues*.*
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now work with the various tools within Burp Suite and use them in attacks
    against the OWASP BWA project we deployed in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you start Burp Suite Professional, create a new project on disk (*Figure
    7*) so that you can always refer back to the results. You can use the Burp Suite
    defaults for the configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6d0213a-e045-4775-85a1-2334dee90a63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Burp Suite''s new project'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our project started, we can dive into the tools and learn how
    to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the centerpiece of Burp Suite, allowing you to create an intercepting
    proxy that functions between your browser and the target web application. You
    can intercept, inspect, and modify all requests and answers using this tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the proxy options, you need to visit the Proxy tool and select
    the Options tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5ed3fed-c1a8-423b-9924-09c713e5ba58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Proxy Listeners options within the Proxy tool'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Proxy Listeners section is where you define the proxy details. The default
    configuration will suffice for the activities we will perform. An additional configuration
    item that is worth enabling is under the Response Modification section of the proxy
    options. This setting is titled Unhide hidden form fields, as seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d29e89ed-76b7-42b3-bd5c-dbee69e72bb3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Enabling Unhide hidden form fields'
  prefs: []
  type: TYPE_NORMAL
- en: Hidden HTML forms are a common mechanism for the superficial, unchanged transmission
    of data via the client. The field is not displayed on screen if it's flagged as
    hidden. The name and value of the field are, however, stored in the form and will
    be returned to the application when the user submits the form. Burp Proxy can
    be used to intercept the application submitting the form and change the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring this in Firefox ESR can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Firefox ESR and navigate to Preferences:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5dc860f4-72ed-479e-b7da-9e7c13d600fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Navigating to the Firefox preferences'
  prefs: []
  type: TYPE_NORMAL
- en: A quicker way to navigate to the preferences is to navigate to the `about:preferences`URL within
    Firefox ESR.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are inside the preferences, search for `proxy` and click on the `Settings`
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once inside the proxy settings, you can define the Burp Suite proxy as per
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bff46924-7b6e-4c60-bed0-efd2f9d00632.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Defining the Burp Suite proxy within Firefox ESR'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section, we mentioned that this method can become frustrating,
    as sometimes, you will need to browse without using the Burp Suite proxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the Burp Suite proxy in an add-on, such as FoxyProxy, all that
    is required is for us to define the proxy settings (*Figure 12*) and, once the
    configuration is saved, you will be able to switch between the proxy settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8b57545-1c8f-4ce4-98ca-52dfd05d9b1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: Adding the Burp Suite proxy to FoxyProxy'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the proxy set up and configured, let's move onto the next tool,
    where we will define the target and perform activities such as mapping out the
    site.
  prefs: []
  type: TYPE_NORMAL
- en: Because the proxy in Burp Suite works as an intercepting proxy, you must forward
    requests when you browse to a URL. If you do not forward the request, the URL
    will not load in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Target
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tool provides detailed information on the content and workflow of your
    target application. It assists you in leading the testing process. Within this
    tool, the target site can be mapped out (manually or by using the integrated crawler),
    and the scope can be modified after the applications are mapped.
  prefs: []
  type: TYPE_NORMAL
- en: We will define our target as the main IP address of the BWA virtual machine.
    For example, as per the screenshot in the previous section, my BWA virtual machine
    has an IP address of `192.168.34.152`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The target can be defined using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Target tool and select Scope**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add under the Target Scope section, and input the IP address of your
    BWA virtual machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Burp Suite will prompt you to log out-of-scope items. In this case, we do not
    want to log them, so select Yes so that Burp Suite does not send out-of-scope
    items to the other tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3a4a35b-403f-4432-b3c8-dff478c7beb4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Defining the target in Burp Suite'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have defined the target scope as the BWA virtual machine IP address,
    open Firefox and navigate to the URL of the BWA virtual machine, for example,
    `http://192.168.34.152`. You will notice that, without forwarding the request
    in the Proxy tool (*Figure 14*), the web page will not load:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/585a7d74-5a84-4b8d-9a98-a9f9fd28c19f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Forwarding requests using the Proxy tool'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have forwarded the request, the BWA main page will load. Within the
    Target tool under Site map (*Figure 15*), you will now have a full site map of
    the target web application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/381d6ef9-9a7f-459b-a47e-bb17ea0cfc2a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15: Site map populated based on the target defined'
  prefs: []
  type: TYPE_NORMAL
- en: A hierarchical representation of the content is contained in the left-hand tree
    view, with URLs divided into domains, directories, files, and parameterized requests.
    To see more details, you can expand interesting branches. If you select one or
    more pieces of the tree, all items in the children's branches in the right-hand
    view will show the relevant details. The right-hand view contains details of the
    content of the branches selected from the tree view and any issues identified
    with the branch.
  prefs: []
  type: TYPE_NORMAL
- en: Scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tool is available in the Professional Edition of Burp Suite. It provides
    advanced web vulnerability scanning functionality, with automatic crawling capabilities
    to discover content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Leveraging the scanner functionality is as simple as right-clicking on a branch
    that you want to scan and selecting either the active or passive scanning function as
    shown in *Figure 16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e2694e2-826e-4ea1-8e37-fda914102d24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16: Initiating the scanner functionality'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of scans that can be performed, active and passive. The
    following details the difference between the two:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Passive scan**: This type of scan simply analyzes and detects vulnerabilities
    in the contents of existing requests and responses. Using this scan, you will
    be able to limit the amount of noise toward the web application. This type of
    scan is able to detect a number of vulnerabilities, since many can be detected
    using passive techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active scan**:This type of scan submits a number of customized requests and
    analyzes the results in search of vulnerabilities. Active scanning can identify
    a broader range of vulnerabilities and is essential to conduct a full application
    test. Keep in mind that this scan will result in a lot more noise sent toward
    the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows the output of the issues detected by the scanner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8363eac-a9c7-4d8d-90a9-10aebef0705e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17: Issues detected by an active scan'
  prefs: []
  type: TYPE_NORMAL
- en: 'Opening the issue provides more information about the issue, including the
    host affected, the path, severity, and confidence levels as shown in *Figure 18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/055d4adc-c0b8-4356-9b35-c66227f7811e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18: Issue details'
  prefs: []
  type: TYPE_NORMAL
- en: Each result of the scan contains detailed advice, often with customized information
    relevant to the particular vulnerability and a suitable remediation write-up.
    Each result will also include the complete requests and responses on which the
    issue was reported, with the relevant parts highlighted. These requests can be
    transmitted to other Burp tools as usual to check for problems or perform further
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Repeater
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is used for the manual manipulation and reissuing of HTTP requests. Once
    these manual requests are sent, you are able to analyze the responses. You can
    send requests to Repeater from anywhere within Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform a login manipulation using Repeater:'
  prefs: []
  type: TYPE_NORMAL
- en: Turn off the Burp Suite proxy Firefox ESR, navigate to the BWA main page, and
    then click on OWASP Mutillidae II.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the left-hand navigation, select OWASP 2007 | OWASP 2007 A6 – Improper Error
    Handling | Login (*Figure 19*)*. *This will take you to a login page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8319c52e-8579-4b03-b6fe-6e835f1aba5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19: OWASP A6 – Improper Error Handling'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the Burp Suite Proxy interception. Once enabled, try to log in using
    any random credentials. On the Proxy tool within Burp Suite, you will see the
    login request being intercepted. Right-click on the request and select Send to
    Repeater*. *In my example, you will see that I used a random `username` of `testing`
    and a `password` of `test-user` as shown in *Figure 20*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0b11f045-7262-4f38-91d6-0aad792c27ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20: The login request intercepted with the Burp Suite proxy tool'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Repeater** tool and, on the left-hand side, you will have the
    intercepted login request. Click on Go and observe the results. Notice that the
    Loggin-In-User field is empty, as shown in the following screenshot. If you click
    on the Render tab, you will see that no user has been logged in. This tells us
    that the random `username` we have used does not exist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9633629c-8072-4719-92e4-f2397f8d4f84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21: Using Repeater to replay HTTP requests'
  prefs: []
  type: TYPE_NORMAL
- en: From here on, we can modify any of the parameters in the initial request. You
    can try various `username` and `password` and observe the results. For demonstration
    purposes, we will use a common SQL injection technique (SQL injections will be
    covered in more detail in [Chapter 8](87538d7e-15a4-4a41-86bd-68b9e6686e09.xhtml)*,
    Attacking Web Applications).*
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `username=` field, remove the random username you have initially used
    and put in the `'' or 1=1 --` SQL injection command.Click on Go and observe the
    output (*Figure 22*)*.* Notice that the `Set-Cookie` parameter is now set to `username=admin`
    and Logged-In-User is set to `admin`. This tells us that by using the username
    of `'' or 1=1 --` and any password, we are able to perform a SQL injection attack
    and log in as an admin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46981b64-3da2-4f62-8bf5-7083083edc9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22: Performing a SQL injection attack query using Repeater'
  prefs: []
  type: TYPE_NORMAL
- en: If you use the Render tab, you will see that the logged in user is `admin`.
  prefs: []
  type: TYPE_NORMAL
- en: Repeater offers a lot of functionality when it comes to manipulating requests
    and testing how various requests will be handled by the web application.
  prefs: []
  type: TYPE_NORMAL
- en: Intruder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This allows for the powerful automation of customized attacks against web applications.
    It enables you to configure various payload, payloads options, and attack options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use Intruder to find hidden web pages in Multillidae:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigating to the BWA main page app, select OWAP Multillidae II. Ensure that
    you have Burp Proxy set to the intercept mode. Click on the Login/Register link
    at the top of the page. Find the intercepted request, right-click on it, and select
    Send to Intruder as shown in *Figure 23*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b127258-8bde-4166-9f27-3d513545bb5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23: Sending the intercepted request to Intruder'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Intruder tab. Intruder automatically marks payload positions.
    In our case, we are interested in the `POST` message. Click on Clear §*, *which
    will clear all automatically placed positions. Double-click on `login.php` on
    the `POST` request and click on *Add §* as shown in *Figure 24**. *We will use
    the Sniper attack type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bbf064de-6bb6-4620-9f43-57fd580b6a02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24: Defining the payload position'
  prefs: []
  type: TYPE_NORMAL
- en: The Sniper attack type allows you to specify one payload to be tried with each
    input field you select. If you want to brute force a single input field with a
    list of possible options, then it really is useful.
  prefs: []
  type: TYPE_NORMAL
- en: The Battering ram attack attempts a wordlist simultaneously across all chosen
    input fields. This is very useful when you think the credentials might have the
    same username and password.
  prefs: []
  type: TYPE_NORMAL
- en: The **Pitchfork** attack makes use of an additional wordlist. This will enable
    it to use one wordlist for the username and the second wordlist for the password.
    Pitchfork matches the first word on the username wordlist to the first word of
    the password wordlist, therefore it does not provide wide coverage.
  prefs: []
  type: TYPE_NORMAL
- en: The Cluster bomb attack is the most comprehensive attack, it is also the most
    time-consuming. This attack tries every combination of the username wordlist with
    every combination of the password wordlist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Payloads, and the Payload typewe will use is a Simple list. In Payload
    Options, we will define some well-known hidden pages, such as `admin.php`*,* `secret.php`*, *`_admin.php`*,*
    and `_private.php`. Once the payload options have been defined (*Figure 25*),
    the attack can be started using the Start attackbutton:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a2f64042-9f2c-4712-a2a5-f693bd4be20f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25: Defining the payload options'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the attack begins, a new window will appear with the results as shown
    in *Figure 26*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51ec255b-5136-41f8-aedd-0244c3c45b09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26: The Intruder attack results'
  prefs: []
  type: TYPE_NORMAL
- en: From the results, we can gather that all the results returned the same status
    code. These are all accessible, and we can confirm this by viewing the Response
    tab and the Render option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Intruder can be used to brute force a login process using defined words or
    a wordlist. Performing a simple cluster bomb attack can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to Multillidae using a random `username` and `password`. When the request
    is intercepted, send it to Intruder as shown in *Figure 27*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b5f70218-80fb-4851-9cda-cd96e5647639.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27: Sending the login request to Intruder'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Intruder tool, define the attack type as Cluster bomb and define the
    payload positions as the `username` and `password` that you have used. In the
    following example, I have used a `username` of `testing` and `password` of `test` as
    shown in *Figure 28*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45835954-aa1f-4167-84fa-0df6959ef8d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 28: Defining the payload positions in a Cluster bomb attack.'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Payloads tab and define `username` and `password` for each payload
    set using a simple list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Payload Options tab, and take note of the options under Request
    engine. Here, you have the ability to control the attack, such as tweaking the
    pauses between the retries and throttling. This enables you to blend in the brute
    force attempts with normal traffic, ultimately avoiding the risk of raising a
    flag for excessive invalid login attempts. Once you have reviewed the settings,
    switch back to the Payloads tab and start the attack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the attack has completed, you will see that the valid credentials returned
    an HTTP 302 request. We can confirm this with the Render tab, which shows the
    logged in user of `admin`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ad098c0-3a35-4e66-9c7d-89383be33454.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29: Valid credentials found using Intruder'
  prefs: []
  type: TYPE_NORMAL
- en: Intruder has a wealth of features that can be used in your penetration tests.
  prefs: []
  type: TYPE_NORMAL
- en: Sequencer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This enables the analysis of the quality of randomness in the target application's
    important data items. These items can be session tokens, password reset tokens,
    and more. This type of data is unpredictable, and flaws can be discovered that
    can lead to a vulnerability being discovered.
  prefs: []
  type: TYPE_NORMAL
- en: A common attack is known as a **session fixation** attack. This is an attack
    that allows an attacker to retrieve a valid user session. The attack looks at
    limitations in the way in which the vulnerable web application manages the session
    IDs. Either the web application does not assign a new session ID, or the randomness
    of the session IDs are weak. This enables an attacker to use the existing session
    ID of an existing user.
  prefs: []
  type: TYPE_NORMAL
- en: The way that Sequencer works is based on the hypothesis that the tokens are
    produced randomly. As Sequencer performs tests, the probability of certain characteristics
    that could occur is calculated. A significance level is defined and, if the probability
    of these characteristics falls under this level, then the tokens are marked as
    non-random.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform a test using the **Damn Vulnerable Web Application** (**DVWA**),
    which is installed by default in Metasploitable 2:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you have modified your target scope to the IP address of your Metasploitable
    2 virtual machine. Once you have modified the scope and set your proxy to intercept
    traffic, navigate to the IP address of the virtual machine using the standard
    HTTP protocol. Click on the DVWA link. Take note of the two requests that you
    would have intercepted. The first is the HTTP GET request as shown in *Figure
    30*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81d32db7-3718-49ed-ba66-ded50cbb8d04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 30: DVWA GET request'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second request is what sets a unique cookie and **Personal Home Page**
    (**PHP**) session ID, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/165c5db2-335b-4deb-9e80-26ac5db09cae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 31: PHP Session ID and Cookie set by the DVWA'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will perform a test using Sequencer on the cookie that was set on our system.
    Right-click on the first GET request and select the Send to Sequencer option.
    The Sequencer tab will light up and you should select this. Under the Token Location
    Within Response section, select the PHPSESSID= value as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6ddd2e3-440b-45c2-bf1e-ef2ca5525a82.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 32: Define the token location'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Start live capturebutton and let it run for a couple of seconds.
    Once you have more than 200 requests captured, you can pause or stop the capture
    and select Analyze now. Observe the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8825d9a0-4d7e-4d00-a87d-3f264800406c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 33: The results from Sequencer'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we can see that the overall result is excellent. Based on the
    number of requests we have captured, the session tokens generated by the web application
    is strong.
  prefs: []
  type: TYPE_NORMAL
- en: Decoder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This can be used for performing various types of encoding or decoding of application
    data. Various parts of data can be transformed into code, such as Base64, hex,
    and binary.
  prefs: []
  type: TYPE_NORMAL
- en: Using Decoder is very straightforward. You can encode or decode text into various
    outputs. For example, in *Figure 34, *a simple clear text string can be encoded
    into Base64.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ed64db5-4776-49a6-ba1b-6d56c95c3fe9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 34: Using Decoder to encode clear text into Base64'
  prefs: []
  type: TYPE_NORMAL
- en: In a penetration test, you might find that a web application discloses information
    that you could decode into readable text. Alternatively, you might need to leverage
    an exploit that you need to encode into HTML or URL and forward that code back
    to the web application to obtain a response.
  prefs: []
  type: TYPE_NORMAL
- en: Comparer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is handy when you need to look at visual differences between two items
    of data; for example, when you are looking at the responses between valid and
    invalid user credentials or checking whether session tokens are random.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we worked on the Sequencer tool, we discussed session fixation attacks.
    Let''s perform a test in Mutillidae using the Comparer tool and see what can be
    discovered. Here, we will not use the **Sequencer **tool, as we will perform a
    simple test:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you have defined your target as the OWASP BWA virtual machine and
    set your proxy to Intercept. Once you have configured the target, navigate to
    the main page of the BWA application using the HTTP protocol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Mutillidae II link, and forward the incercepted request. Next, click
    on the Login/Registerlink, and ensure that the request is forwarded. Then, log
    in using the `username` of `admin` and `password` of `admin`. Once you are logged
    in, go to the *HTTP history *tab of the Proxy tool. Find the two requests, which
    are the GET and POST requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the GET request, which was captured when we clicked on the *Login/Register *link.
    Right-click on the request and select Send to Comparer, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d4f39e5-2df8-4b94-8f77-e843643b5c96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 35: Sending the relevant requests to Comparer'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat *Step 3* for the POST request, which shows the successful login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Comparer tab and ensure that you select the two different requests
    to compare as shown in *Figure 36*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/931239e3-6343-491c-a6ff-585d2e693093.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 36: Select the requests to compare'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Words button and observe the results, as shown in the following
    figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78b4fddf-384a-4033-976c-244ac03f54b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 37: The results of the compared requests'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that PHPSESSID is the same for both requests. This means that the web
    application does not generate unique session IDs, since the ID is the same for
    authenticated and non-authenticated requests. Therefore, the web application is
    vulnerable to session fixation attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Extender
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you have the ability to extend Burp Suite's functionality by using extensions
    from the BApp Store or by using third-party code. These extensions enable you
    to customize the functionality of the program, such as **user interface** (**UI**)
    changes and adding custom scanner checks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Extender tool, we can add in additional extensions using the BApp
    Store. For example, adding in the Software Vulnerability Scanner, as shown in
    the following figure, extends the built-in vulnerability scanner functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7daadc65-167d-4972-9360-b288764588df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 38: Using the BApp Store to add in extensions'
  prefs: []
  type: TYPE_NORMAL
- en: Some extensions are detailed as Pro extension, which means that they will only
    work with Burp Suite Professional. Under the Extensions tab, you have the ability
    to load extensions that are not listed in the store.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about Burp Suite and its various editions.
    You have worked through setting up your environment and learned how to prepare
    your lab by leveraging vulnerable web applications that are freely available on
    the internet. You have gained a good understanding of the various tools that exist
    within Burp Suite, and how to use them by making use of practical examples in
    your own lab environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [Chapter 8](87538d7e-15a4-4a41-86bd-68b9e6686e09.xhtml),
    *Attacking Web Applications,* we will look at the various vulnerabilities that
    exist within web applications and understand how and why they exist. We will use
    various tools, including Burp Suite, to perform various attacks on vulnerable
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the centerpiece of Burp Suite?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When is it appropriate to use a passive scan?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Repeater used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What attack method is the most comprehensive within the Intruder tool?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you extend the functionality of Burp Suite?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
