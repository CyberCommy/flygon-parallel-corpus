- en: Chapter 8. Running 3T on GlassFish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will deploy our 3T application on the GlassFish 4 server.
    A successful deployment will require several new configuration files as well as
    updates to existing files. You will already be familiar with some of these files
    from the testing configuration defined in [Chapter 5](ch05.html "Chapter 5. Testing
    the DAO Layer with Spring and JUnit"), *Testing the DAO Layer with Spring and
    JUnit*, but a few new files specific to GlassFish will be introduced.
  prefs: []
  type: TYPE_NORMAL
- en: We will also be configuring the GlassFish server to run independent of the NetBeans
    IDE. Enterprise environments will usually have many GlassFish server instances
    running on different hosts. Understanding basic GlassFish configuration is an
    important skill and we will cover connection pool configuration in detail.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter you will be able to see dynamic HTTP responses based
    on the URLs you have mapped so carefully in [Chapter 7](ch07.html "Chapter 7. The
    Web Request Handling Layer"), *The Web Request Handling Layer*.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the 3T web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The web application configuration requires several new files that will need
    to be added to the `WEB-INF` directory, as shown in the following screenshot.
    Create these files now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the 3T web application](img/5457OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the `beans.xml` file was created by NetBeans but is not required for
    our configuration. Let's now look at each of these files in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring applicationContext.xml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `applicationContext.xml` file configures the Spring container and is very
    similar to the `testingContext.xml` file we created in [Chapter 5](ch05.html "Chapter 5. Testing
    the DAO Layer with Spring and JUnit"), *Testing the DAO Layer with Spring and
    JUnit*. The contents of the file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This file is used by Spring to initialize and configure the JPA `EntityManagerFactory`
    and `TransactionManager` DAO and Service layer objects. Comparing the `applicationContext.xml`
    file with the `testingContext.xml` file identifies the key differences between
    a simple Java container and a Java EE container provided by an enterprise application
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: The data source is retrieved via **JNDI** (**Java Naming and Directory Interface**)
    from the GlassFish application server and is not created or managed by Spring
    in the `applicationContext.xml` file. The JNDI configuration setting in the `persistence.xml`
    file is defined later in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The load time weaver is specific to GlassFish.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transaction manager is **JTA**-based (**Java Transaction API**) and is provided
    by the GlassFish server. It is not created or managed by Spring. The `<tx:jta-transaction-manager
    />` and `<tx:annotation-driven />` definitions are all that is required to configure
    transactional behavior within the Spring container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should be familiar with the remaining configuration properties. Note that
    component scanning is performed against both the `dao` and `service` packages
    to ensure the auto-wiring of Spring beans in these classes.
  prefs: []
  type: TYPE_NORMAL
- en: When the `applicationContext.xml` file is loaded by the Spring container, the
    MVC configuration classes defined in [Chapter 7](ch07.html "Chapter 7. The Web
    Request Handling Layer"), *The Web Request Handling Layer*, are automatically
    discovered by classpath scanning and are loaded to configure the web application
    components.
  prefs: []
  type: TYPE_NORMAL
- en: The web.xml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `web.xml` web application deployment descriptor file represents the configuration
    of a Java web application. It is used to configure the servlet container and map
    URLs to each configured servlet. Each Java web application must have a `web.xml`
    in the `WEB-INF` directory of the web application root.
  prefs: []
  type: TYPE_NORMAL
- en: 'The 3T web application requires the following `web.xml` definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Some key points are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `context-param` element defining the `contextConfigLocation` value is optional
    if the Spring configuration file is named `applicationContext.xml` (this is the
    expected default filename if not supplied). However, we always include this property
    for completeness. It defines the location of the main Spring configuration file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The listener with class `org.springframework.web.context.ContextLoaderListener`
    is used by Spring to initialize loading of the application context. It is the
    entry point to boot the Spring container and attempts to load the `contextConfigLocation`
    file. An exception is thrown if the file cannot be resolved or is invalid.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `session-config` properties define the session timeout (30 minutes of inactivity)
    and the session cookie name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `welcome-file-list` identifies the file that will be served by GlassFish,
    if not specified explicitly in the URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The glassfish-web.xml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `glassfish-web.xml` file configures GlassFish with additional web application
    properties specific to the GlassFish server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `context-root` property identifies the web application''s server path for
    deployment. We will deploy the 3T application to the context root of the server.
    This means that 3T request handlers can be accessed directly from the root of
    the web application as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/ttt/company/findAll.json`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changing the `context-root` property to `/mylocation`, for example, will require
    a URL of the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/mylocation/ttt/company/findAll.json`'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Maven pom.xml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may have changed various `pom.xml` settings when experimenting with dependencies
    and plugins in the previous chapters. It is important to now revisit this file
    and confirm that the properties are correct for building and deploying the project.
    You should have the following basic `pom.xml` configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Several of these dependencies were added during the reverse engineering process,
    as was the `<repository>` definition for EclipseLink. There are only a few changes
    required:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add the MySQL connector**: The most recent version should be used for the
    `mysql-connector-java` dependency. The MySQL connector is not provided by GlassFish
    and will be copied to the application server in a section later in this chapter.
    The scope is set to `provided` so as not to include this JAR when building the
    WAR file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Turn off the Surefire testing plugin**: Your deployments will be much faster
    if you turn off testing during the build process. Change the `maven-surefire-plugin`
    entry `skipTests` to `true`. This will skip the testing phase when building and
    deploying the project locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building enterprise applications is usually performed on a dedicated build server
    that executes test cases and reports on the success or failure of the build process.
    Disabling the test phase should only be done on developer machines to speed the
    build and deployment process. Developers will not appreciate waiting for 30 minutes
    to execute the testing suite every time they change a class. The testing phase
    should never be disabled for execution on the build server.
  prefs: []
  type: TYPE_NORMAL
- en: Adding eclipselink.target-server to the persistence.xml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `persistence.xml` file requires the inclusion of the `eclipselink.target-server`
    property to fully enable transactional behavior. The `persistence.xml` file located
    at `src/main/resources/META-INF` should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Without this addition, transactions will not be available in your application.
    The `eclipselink.logging.level` may also be changed to increase or decrease logging
    output as desired.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the logback.xml file to your resources directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `logback.xml` file should be added to `src/main/resources/` in order to
    enable logging into your application. The contents of this file will be the same
    as the testing `logback.xml` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the GlassFish server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The GlassFish 4 server bundled with NetBeans is automatically configured the
    first time you run the project. This means any required resources are set up dynamically
    based on the current state of the project. All such properties are copied to the
    `glassfish-resources.xml` file in the `setup` directory, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the GlassFish server](img/5457OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `glassfish-resources.xml` file was modified during the database reverse
    engineering process to include the database connection pool and JDBC resources
    required by JPA. As a result, the contents of this file define the required GlassFish
    connection pool details.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that this file is used by NetBeans to dynamically
    configure the GlassFish server assigned to the project. In a real-world situation,
    the GlassFish server is configured by administrators and deploying a web application
    is done either from the command line or through the GlassFish administration console.
    You will not be deploying your application through NetBeans in a normal enterprise
    environment and it is hence very useful to have a fundamental understanding of
    how GlassFish is configured from first principals. This section is dedicated to
    configuring the GlassFish server connection pool for use with 3T. Although this
    is not strictly required to run 3T on NetBeans, we strongly recommend you take
    the time to configure your GlassFish server fully via the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: This will ensure you understand what is required to configure a GlassFish server
    on a different physical server for running the 3T application.
  prefs: []
  type: TYPE_NORMAL
- en: The first step in configuring your GlassFish server is to perform a **Clean
    and Build**:![Configuring the GlassFish server](img/5457OS_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the build is complete, navigate to `target/lib` as shown in the following
    screenshot to view the JAR files required by your project:![Configuring the GlassFish
    server](img/5457OS_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a file explorer window (Windows Explorer or OS X Finder) to navigate to
    this directory and copy the `mysql-connector-java-5.1.26.jar` file to your GlassFish
    domain `libs` directory, as shown in the following screenshot:![Configuring the
    GlassFish server](img/5457OS_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Renaming the setup directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `setup` directory, located at `src/main/`, contains the `glassfish-resources.xml`
    file and should be renamed to ensure NetBeans does not dynamically configure GlassFish
    with these properties. We suggest renaming the directory to `setup-original`.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the GlassFish server in NetBeans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to the **Services** tab; by right-clicking on the **GlassFish Server
    4.0** node, select **Start** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the GlassFish server in NetBeans](img/5457OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see server output at the bottom of the NetBeans IDE and the GlassFish
    Server 4.0 node reload. You can now right-click on the **GlassFish Server 4.0**
    node and select **View Domain Admin Console**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the GlassFish server in NetBeans](img/5457OS_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will start your default browser and load the **Domain Admin Console**.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the JDBC connection pool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will use the GlassFish admin console to configure the JDBC connection
    pool and JDBC resource required by the 3T application.
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Resources** node and navigate to the **JDBC Connection Pools** tab:![Configuring
    the JDBC connection pool](img/5457OS_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may see a connection pool named `mysql_task_time_tracker_rootPool` or something
    similar, as shown in the preceding screenshot. This was created by NetBeans during
    a previous run using the properties specified in the `glassfish-resources.xml`
    file. The remaining section may be skipped if you wish to continue using this
    connection pool. We recommend you delete this entry and continue to follow these
    steps to understand how to configure a GlassFish connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New** button and enter the following details before clicking
    on the **Next** button:![Configuring the JDBC connection pool](img/5457OS_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next screen looks daunting but only a few entries are required. Scroll all
    the way down until you can view the **Additional Properties** section:![Configuring
    the JDBC connection pool](img/5457OS_08_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are many properties here! Thankfully only a few are required unless you
    are familiar with MySQL database administration. You may safely delete all the
    listed properties to keep the configuration simple, and then enter the following
    properties that correspond to the original `glassfish-resources.xml` file:![Configuring
    the JDBC connection pool](img/5457OS_08_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The basic fields that are required are **URL**, **User**, and **Password**.
    Saving these settings will return you to the **JDBC Connection Pools** screen:![Configuring
    the JDBC connection pool](img/5457OS_08_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **3TPool** name to open the settings again and click on the **Ping**
    button to test the connection. You should now see the following result:![Configuring
    the JDBC connection pool](img/5457OS_08_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the JDBC resource
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final step is to create a **JDBC Resource**. Click on this node to display
    the configured resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the JDBC resource](img/5457OS_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **New…** button and enter the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the JDBC resource](img/5457OS_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **JNDI Name** must be the same as the `<jta-data-source>` property defined
    in the `persistence.xml` file and is hence set to `jdbc/tasktimetracker`. Click
    on the **OK** button to save the resource configuration. The refreshed node should
    now show the newly created resource.
  prefs: []
  type: TYPE_NORMAL
- en: You have now finished configuring the GlassFish JDBC settings.
  prefs: []
  type: TYPE_NORMAL
- en: Running 3T
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we recommend you stop GlassFish and restart NetBeans to ensure all changes
    made previously are up-to-date in the IDE. The final step is to run the 3T application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running 3T](img/5457OS_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This should result in considerable output culminating in deployment of the
    3T application to the GlassFish server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running 3T](img/5457OS_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the final **WARNING** in the **GlassFish Server 4.0** output can be
    ignored; this is a known issue when deploying an application to the root context
    from within NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final action by NetBeans will be to open your default browser to the welcome
    page displayed in [Chapter 1](ch01.html "Chapter 1. Preparing Your Development
    Environment"), *Preparing Your Development Environment*. You should note that
    the URL in the browser will now be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of the original:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/task-time-tracker`'
  prefs: []
  type: TYPE_NORMAL
- en: This is due to the `<context-root>/</context-root>` property in `glassfish-web.xml`,
    which defines the root of the web application path. The 3T web application is
    now deployed to the context root and no prefix is required to reach the deployed
    3T application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now try to load a mapped URL such as `/ttt/company/findAll.json`. Enter
    this in the browser as shown and hit the *Enter* key. You should see the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running 3T](img/5457OS_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This message is coming from the `UserInSessionInterceptor` we implemented in
    the last chapter. The session check fails as we are not currently logged on, returning
    the preceding JSON message to the browser. The `logger.info` message in the class
    should also be visible in the GlassFish output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running 3T](img/5457OS_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can now try a logon action with parameters as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running 3T](img/5457OS_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This result may surprise you. The request URL is mapped to the `SecurityHandler.logon`
    method, which is defined with `method = RequestMethod.POST` in the `@RequestMapping`
    annotation. This restricts access to this method to `POST` requests only, while
    the URL-encoded parameters submitted by the browser is a `GET` request. The GlassFish
    405 HTTP status message is the result. In [Chapter 10](ch10.html "Chapter 10. Logging
    On and Maintaining Users"), *Logging On and Maintaining Users*, we will be implementing
    the logon process using the appropriate `POST` request.
  prefs: []
  type: TYPE_NORMAL
- en: You should note that all handler URLs will be accessed by AJAX calls from the
    Ext JS 4 application, which will be developed in subsequent chapters. You will
    never see these URLs in the browser as shown previously.
  prefs: []
  type: TYPE_NORMAL
- en: Managing GlassFish without NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting and stopping GlassFish in NetBeans is easy and convenient. However,
    in enterprise environments the stop/start process will be managed by scripts wrapping
    the `asadmin` utility. A full description of the utility can be found in the *GlassFish
    User Administration Guide* at [https://glassfish.java.net/docs/4.0/administration-guide.pdf](https://glassfish.java.net/docs/4.0/administration-guide.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: The `asadmin` utility is used to perform administrative tasks for the GlassFish
    server from the command line or from a script. You can use this utility instead
    of the GlassFish administration console interface we used earlier in this chapter.
    Almost every action that can be performed in the administration console has an
    equivalent command that can be executed with `asadmin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `asadmin` utility is found in the `{as-install}/bin` directory. Commands
    should be run from within this directory if the full path to `asadmin` is not
    provided. To start the domain, you can execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `domain1` argument represents the name of the domain to start. Executing
    this command from the Windows command prompt will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing GlassFish without NetBeans](img/5457OS_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Stopping a running GlassFish domain is just as simple. Use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing GlassFish without NetBeans](img/5457OS_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will continue to start and stop GlassFish within NetBeans but will revisit
    `asadmin` in [Chapter 13](ch13.html "Chapter 13. Moving Your Application to Production"),
    *Moving Your Application to Production*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has focused on the steps required to configure the 3T web application
    for deployment to the GlassFish 4 server. The Spring configuration files were
    defined and the `web.xml` file configured to load the Spring container on startup.
    You were guided through the GlassFish connection pool configuration process and
    the 3T web application was deployed to the context root of the GlassFish 4 server.
  prefs: []
  type: TYPE_NORMAL
- en: This is a pivotal point in our enterprise application development process. We
    have now fully covered the realm of the Java developer, building a functional
    backend system that will serve dynamic requests for any JSON client. [Chapter
    9](ch09.html "Chapter 9. Getting Started with Ext JS 4"), *Getting Started with
    Ext JS 4*, will introduce the powerful Ext JS 4 framework and begin our frontend
    development journey.
  prefs: []
  type: TYPE_NORMAL
