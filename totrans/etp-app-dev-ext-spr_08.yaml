- en: Chapter 8. Running 3T on GlassFish
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。在GlassFish上运行3T
- en: In this chapter we will deploy our 3T application on the GlassFish 4 server.
    A successful deployment will require several new configuration files as well as
    updates to existing files. You will already be familiar with some of these files
    from the testing configuration defined in [Chapter 5](ch05.html "Chapter 5. Testing
    the DAO Layer with Spring and JUnit"), *Testing the DAO Layer with Spring and
    JUnit*, but a few new files specific to GlassFish will be introduced.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在GlassFish 4服务器上部署我们的3T应用程序。成功的部署将需要几个新的配置文件，以及对现有文件的更新。您可能已经熟悉一些来自[第5章](ch05.html
    "第5章。使用Spring和JUnit测试DAO层")中定义的测试配置文件，但还会介绍一些特定于GlassFish的新文件。
- en: We will also be configuring the GlassFish server to run independent of the NetBeans
    IDE. Enterprise environments will usually have many GlassFish server instances
    running on different hosts. Understanding basic GlassFish configuration is an
    important skill and we will cover connection pool configuration in detail.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将配置GlassFish服务器，使其能够独立于NetBeans IDE运行。企业环境通常会有许多在不同主机上运行的GlassFish服务器实例。了解基本的GlassFish配置是一项重要的技能，我们将详细介绍连接池配置。
- en: At the end of this chapter you will be able to see dynamic HTTP responses based
    on the URLs you have mapped so carefully in [Chapter 7](ch07.html "Chapter 7. The
    Web Request Handling Layer"), *The Web Request Handling Layer*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的结尾，您将能够看到基于您在《第7章》中精心映射的URL的动态HTTP响应，*Web请求处理层*。
- en: Configuring the 3T web application
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置3T Web应用程序
- en: 'The web application configuration requires several new files that will need
    to be added to the `WEB-INF` directory, as shown in the following screenshot.
    Create these files now:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序配置需要几个新文件，需要将这些文件添加到`WEB-INF`目录中，如下截图所示。现在创建这些文件：
- en: '![Configuring the 3T web application](img/5457OS_08_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![配置3T Web应用程序](img/5457OS_08_01.jpg)'
- en: Note that the `beans.xml` file was created by NetBeans but is not required for
    our configuration. Let's now look at each of these files in detail.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`beans.xml`文件是由NetBeans创建的，但不是我们配置所必需的。现在让我们详细查看这些文件。
- en: The Spring applicationContext.xml file
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring applicationContext.xml文件
- en: 'The `applicationContext.xml` file configures the Spring container and is very
    similar to the `testingContext.xml` file we created in [Chapter 5](ch05.html "Chapter 5. Testing
    the DAO Layer with Spring and JUnit"), *Testing the DAO Layer with Spring and
    JUnit*. The contents of the file are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`applicationContext.xml`文件配置Spring容器，与我们在[第5章](ch05.html "第5章。使用Spring和JUnit测试DAO层")中创建的`testingContext.xml`文件非常相似。文件的内容如下：'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This file is used by Spring to initialize and configure the JPA `EntityManagerFactory`
    and `TransactionManager` DAO and Service layer objects. Comparing the `applicationContext.xml`
    file with the `testingContext.xml` file identifies the key differences between
    a simple Java container and a Java EE container provided by an enterprise application
    server:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件用于Spring初始化和配置JPA `EntityManagerFactory`和`TransactionManager` DAO和Service层对象。将`applicationContext.xml`文件与`testingContext.xml`文件进行比较，可以确定简单Java容器和企业应用服务器提供的Java
    EE容器之间的关键差异：
- en: The data source is retrieved via **JNDI** (**Java Naming and Directory Interface**)
    from the GlassFish application server and is not created or managed by Spring
    in the `applicationContext.xml` file. The JNDI configuration setting in the `persistence.xml`
    file is defined later in this chapter.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据源通过**JNDI**（**Java命名和目录接口**）从GlassFish应用服务器中检索，并且不是由Spring在`applicationContext.xml`文件中创建或管理。`persistence.xml`文件中的JNDI配置设置在本章后面定义。
- en: The load time weaver is specific to GlassFish.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载时间织入器是特定于GlassFish的。
- en: The transaction manager is **JTA**-based (**Java Transaction API**) and is provided
    by the GlassFish server. It is not created or managed by Spring. The `<tx:jta-transaction-manager
    />` and `<tx:annotation-driven />` definitions are all that is required to configure
    transactional behavior within the Spring container.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务管理器是基于**JTA**（**Java事务API**）的，并由GlassFish服务器提供。它不是由Spring创建或管理的。`<tx:jta-transaction-manager
    />`和`<tx:annotation-driven />`定义是配置Spring容器内的事务行为所需的全部内容。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should be familiar with the remaining configuration properties. Note that
    component scanning is performed against both the `dao` and `service` packages
    to ensure the auto-wiring of Spring beans in these classes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该熟悉剩余的配置属性。请注意，组件扫描针对`dao`和`service`包执行，以确保在这些类中自动装配Spring bean。
- en: When the `applicationContext.xml` file is loaded by the Spring container, the
    MVC configuration classes defined in [Chapter 7](ch07.html "Chapter 7. The Web
    Request Handling Layer"), *The Web Request Handling Layer*, are automatically
    discovered by classpath scanning and are loaded to configure the web application
    components.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当Spring容器加载`applicationContext.xml`文件时，[第7章](ch07.html "第7章。Web请求处理层")中定义的MVC配置类会通过类路径扫描自动发现，并加载以配置Web应用程序组件。
- en: The web.xml file
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: web.xml文件
- en: The `web.xml` web application deployment descriptor file represents the configuration
    of a Java web application. It is used to configure the servlet container and map
    URLs to each configured servlet. Each Java web application must have a `web.xml`
    in the `WEB-INF` directory of the web application root.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`web.xml` Web应用程序部署描述符文件代表Java Web应用程序的配置。它用于配置Servlet容器并将URL映射到每个配置的Servlet。每个Java
    Web应用程序在Web应用程序根目录的`WEB-INF`目录中必须有一个`web.xml`。'
- en: 'The 3T web application requires the following `web.xml` definition:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 3T Web应用程序需要以下`web.xml`定义：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Some key points are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关键点：
- en: The `context-param` element defining the `contextConfigLocation` value is optional
    if the Spring configuration file is named `applicationContext.xml` (this is the
    expected default filename if not supplied). However, we always include this property
    for completeness. It defines the location of the main Spring configuration file.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义`contextConfigLocation`值的`context-param`元素是可选的，如果Spring配置文件命名为`applicationContext.xml`（如果未提供，则这是预期的默认文件名）。但是，为了完整起见，我们总是包括此属性。它定义了主Spring配置文件的位置。
- en: The listener with class `org.springframework.web.context.ContextLoaderListener`
    is used by Spring to initialize loading of the application context. It is the
    entry point to boot the Spring container and attempts to load the `contextConfigLocation`
    file. An exception is thrown if the file cannot be resolved or is invalid.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类`org.springframework.web.context.ContextLoaderListener`的监听器由Spring用于初始化加载应用程序上下文。这是启动Spring容器的入口点，并尝试加载`contextConfigLocation`文件。如果无法解析或无效，则会抛出异常。
- en: The `session-config` properties define the session timeout (30 minutes of inactivity)
    and the session cookie name.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session-config`属性定义会话超时（30分钟的不活动时间）和会话cookie名称。'
- en: The `welcome-file-list` identifies the file that will be served by GlassFish,
    if not specified explicitly in the URL.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`welcome-file-list`标识GlassFish将提供的文件，如果在URL中未明确指定。'
- en: The glassfish-web.xml file
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: glassfish-web.xml文件
- en: 'The `glassfish-web.xml` file configures GlassFish with additional web application
    properties specific to the GlassFish server:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`glassfish-web.xml`文件配置GlassFish与GlassFish服务器特定的其他Web应用程序属性：'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `context-root` property identifies the web application''s server path for
    deployment. We will deploy the 3T application to the context root of the server.
    This means that 3T request handlers can be accessed directly from the root of
    the web application as in the following example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`context-root`属性标识部署的Web应用程序的服务器路径。我们将3T应用程序部署到服务器的上下文根。这意味着3T请求处理程序可以直接从Web应用程序的根目录访问，如下例所示：'
- en: '`/ttt/company/findAll.json`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`/ttt/company/findAll.json`'
- en: 'Changing the `context-root` property to `/mylocation`, for example, will require
    a URL of the following format:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将`context-root`属性更改为`/mylocation`，例如，将需要以下格式的URL：
- en: '`/mylocation/ttt/company/findAll.json`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`/mylocation/ttt/company/findAll.json`'
- en: Configuring the Maven pom.xml file
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Maven的pom.xml文件
- en: 'You may have changed various `pom.xml` settings when experimenting with dependencies
    and plugins in the previous chapters. It is important to now revisit this file
    and confirm that the properties are correct for building and deploying the project.
    You should have the following basic `pom.xml` configuration:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中尝试依赖项和插件时，可能已更改了各种`pom.xml`设置。现在重访此文件并确认构建和部署项目的属性是否正确非常重要。您应该具有以下基本的`pom.xml`配置：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Several of these dependencies were added during the reverse engineering process,
    as was the `<repository>` definition for EclipseLink. There are only a few changes
    required:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在反向工程过程中添加了几个依赖项，还添加了EclipseLink的`<repository>`定义。只需要进行一些更改：
- en: '**Add the MySQL connector**: The most recent version should be used for the
    `mysql-connector-java` dependency. The MySQL connector is not provided by GlassFish
    and will be copied to the application server in a section later in this chapter.
    The scope is set to `provided` so as not to include this JAR when building the
    WAR file.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加MySQL连接器**：应使用最新版本的`mysql-connector-java`依赖项。GlassFish不提供MySQL连接器，并且将在本章后面的某个部分中将其复制到应用程序服务器中。范围设置为`provided`，以便在构建WAR文件时不包括此JAR。'
- en: '**Turn off the Surefire testing plugin**: Your deployments will be much faster
    if you turn off testing during the build process. Change the `maven-surefire-plugin`
    entry `skipTests` to `true`. This will skip the testing phase when building and
    deploying the project locally.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关闭Surefire测试插件**：如果在构建过程中关闭测试，您的部署速度将会更快。将`maven-surefire-plugin`条目的`skipTests`更改为`true`。这将在本地构建和部署项目时跳过测试阶段。'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Building enterprise applications is usually performed on a dedicated build server
    that executes test cases and reports on the success or failure of the build process.
    Disabling the test phase should only be done on developer machines to speed the
    build and deployment process. Developers will not appreciate waiting for 30 minutes
    to execute the testing suite every time they change a class. The testing phase
    should never be disabled for execution on the build server.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 构建企业应用程序通常在专用的构建服务器上执行，该服务器执行测试用例并报告构建过程的成功或失败。禁用测试阶段应该只在开发人员的机器上进行，以加快构建和部署过程。开发人员不希望在每次更改类时等待30分钟来执行测试套件。测试阶段不应该在构建服务器上被禁用执行。
- en: Adding eclipselink.target-server to the persistence.xml file
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将eclipselink.target-server添加到persistence.xml文件
- en: 'The `persistence.xml` file requires the inclusion of the `eclipselink.target-server`
    property to fully enable transactional behavior. The `persistence.xml` file located
    at `src/main/resources/META-INF` should look like the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`persistence.xml`文件需要包含`eclipselink.target-server`属性才能完全启用事务行为。位于`src/main/resources/META-INF`的`persistence.xml`文件应如下所示：'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Without this addition, transactions will not be available in your application.
    The `eclipselink.logging.level` may also be changed to increase or decrease logging
    output as desired.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有此添加，您的应用程序将无法使用事务。`eclipselink.logging.level`也可以更改以根据需要增加或减少日志输出。
- en: Adding the logback.xml file to your resources directory
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将logback.xml文件添加到资源目录
- en: 'The `logback.xml` file should be added to `src/main/resources/` in order to
    enable logging into your application. The contents of this file will be the same
    as the testing `logback.xml` file as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`logback.xml`文件应该添加到`src/main/resources/`中，以便启用应用程序的日志记录。该文件的内容与测试`logback.xml`文件相同，如下所示：'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Configuring the GlassFish server
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置GlassFish服务器
- en: 'The GlassFish 4 server bundled with NetBeans is automatically configured the
    first time you run the project. This means any required resources are set up dynamically
    based on the current state of the project. All such properties are copied to the
    `glassfish-resources.xml` file in the `setup` directory, as shown in the following
    screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the GlassFish server](img/5457OS_08_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: The `glassfish-resources.xml` file was modified during the database reverse
    engineering process to include the database connection pool and JDBC resources
    required by JPA. As a result, the contents of this file define the required GlassFish
    connection pool details.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that this file is used by NetBeans to dynamically
    configure the GlassFish server assigned to the project. In a real-world situation,
    the GlassFish server is configured by administrators and deploying a web application
    is done either from the command line or through the GlassFish administration console.
    You will not be deploying your application through NetBeans in a normal enterprise
    environment and it is hence very useful to have a fundamental understanding of
    how GlassFish is configured from first principals. This section is dedicated to
    configuring the GlassFish server connection pool for use with 3T. Although this
    is not strictly required to run 3T on NetBeans, we strongly recommend you take
    the time to configure your GlassFish server fully via the following steps.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: This will ensure you understand what is required to configure a GlassFish server
    on a different physical server for running the 3T application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: The first step in configuring your GlassFish server is to perform a **Clean
    and Build**:![Configuring the GlassFish server](img/5457OS_08_03.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the build is complete, navigate to `target/lib` as shown in the following
    screenshot to view the JAR files required by your project:![Configuring the GlassFish
    server](img/5457OS_08_04.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a file explorer window (Windows Explorer or OS X Finder) to navigate to
    this directory and copy the `mysql-connector-java-5.1.26.jar` file to your GlassFish
    domain `libs` directory, as shown in the following screenshot:![Configuring the
    GlassFish server](img/5457OS_08_05.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Renaming the setup directory
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `setup` directory, located at `src/main/`, contains the `glassfish-resources.xml`
    file and should be renamed to ensure NetBeans does not dynamically configure GlassFish
    with these properties. We suggest renaming the directory to `setup-original`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Starting the GlassFish server in NetBeans
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to the **Services** tab; by right-clicking on the **GlassFish Server
    4.0** node, select **Start** as shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the GlassFish server in NetBeans](img/5457OS_08_06.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'You should see server output at the bottom of the NetBeans IDE and the GlassFish
    Server 4.0 node reload. You can now right-click on the **GlassFish Server 4.0**
    node and select **View Domain Admin Console**:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the GlassFish server in NetBeans](img/5457OS_08_07.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: This will start your default browser and load the **Domain Admin Console**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the JDBC connection pool
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will use the GlassFish admin console to configure the JDBC connection
    pool and JDBC resource required by the 3T application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Resources** node and navigate to the **JDBC Connection Pools** tab:![Configuring
    the JDBC connection pool](img/5457OS_08_08.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may see a connection pool named `mysql_task_time_tracker_rootPool` or something
    similar, as shown in the preceding screenshot. This was created by NetBeans during
    a previous run using the properties specified in the `glassfish-resources.xml`
    file. The remaining section may be skipped if you wish to continue using this
    connection pool. We recommend you delete this entry and continue to follow these
    steps to understand how to configure a GlassFish connection pool.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New** button and enter the following details before clicking
    on the **Next** button:![Configuring the JDBC connection pool](img/5457OS_08_09.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next screen looks daunting but only a few entries are required. Scroll all
    the way down until you can view the **Additional Properties** section:![Configuring
    the JDBC connection pool](img/5457OS_08_10.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are many properties here! Thankfully only a few are required unless you
    are familiar with MySQL database administration. You may safely delete all the
    listed properties to keep the configuration simple, and then enter the following
    properties that correspond to the original `glassfish-resources.xml` file:![Configuring
    the JDBC connection pool](img/5457OS_08_11.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The basic fields that are required are **URL**, **User**, and **Password**.
    Saving these settings will return you to the **JDBC Connection Pools** screen:![Configuring
    the JDBC connection pool](img/5457OS_08_12.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **3TPool** name to open the settings again and click on the **Ping**
    button to test the connection. You should now see the following result:![Configuring
    the JDBC connection pool](img/5457OS_08_13.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the JDBC resource
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final step is to create a **JDBC Resource**. Click on this node to display
    the configured resources:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the JDBC resource](img/5457OS_08_14.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **New…** button and enter the following details:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the JDBC resource](img/5457OS_08_15.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: The **JNDI Name** must be the same as the `<jta-data-source>` property defined
    in the `persistence.xml` file and is hence set to `jdbc/tasktimetracker`. Click
    on the **OK** button to save the resource configuration. The refreshed node should
    now show the newly created resource.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: You have now finished configuring the GlassFish JDBC settings.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Running 3T
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we recommend you stop GlassFish and restart NetBeans to ensure all changes
    made previously are up-to-date in the IDE. The final step is to run the 3T application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![Running 3T](img/5457OS_08_16.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'This should result in considerable output culminating in deployment of the
    3T application to the GlassFish server:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![Running 3T](img/5457OS_08_17.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Note that the final **WARNING** in the **GlassFish Server 4.0** output can be
    ignored; this is a known issue when deploying an application to the root context
    from within NetBeans.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'The final action by NetBeans will be to open your default browser to the welcome
    page displayed in [Chapter 1](ch01.html "Chapter 1. Preparing Your Development
    Environment"), *Preparing Your Development Environment*. You should note that
    the URL in the browser will now be:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of the original:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/task-time-tracker`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: This is due to the `<context-root>/</context-root>` property in `glassfish-web.xml`,
    which defines the root of the web application path. The 3T web application is
    now deployed to the context root and no prefix is required to reach the deployed
    3T application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now try to load a mapped URL such as `/ttt/company/findAll.json`. Enter
    this in the browser as shown and hit the *Enter* key. You should see the following
    result:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![Running 3T](img/5457OS_08_18.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: 'This message is coming from the `UserInSessionInterceptor` we implemented in
    the last chapter. The session check fails as we are not currently logged on, returning
    the preceding JSON message to the browser. The `logger.info` message in the class
    should also be visible in the GlassFish output:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![Running 3T](img/5457OS_08_20.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: 'You can now try a logon action with parameters as shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![Running 3T](img/5457OS_08_19.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: This result may surprise you. The request URL is mapped to the `SecurityHandler.logon`
    method, which is defined with `method = RequestMethod.POST` in the `@RequestMapping`
    annotation. This restricts access to this method to `POST` requests only, while
    the URL-encoded parameters submitted by the browser is a `GET` request. The GlassFish
    405 HTTP status message is the result. In [Chapter 10](ch10.html "Chapter 10. Logging
    On and Maintaining Users"), *Logging On and Maintaining Users*, we will be implementing
    the logon process using the appropriate `POST` request.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: You should note that all handler URLs will be accessed by AJAX calls from the
    Ext JS 4 application, which will be developed in subsequent chapters. You will
    never see these URLs in the browser as shown previously.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Managing GlassFish without NetBeans
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting and stopping GlassFish in NetBeans is easy and convenient. However,
    in enterprise environments the stop/start process will be managed by scripts wrapping
    the `asadmin` utility. A full description of the utility can be found in the *GlassFish
    User Administration Guide* at [https://glassfish.java.net/docs/4.0/administration-guide.pdf](https://glassfish.java.net/docs/4.0/administration-guide.pdf).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: The `asadmin` utility is used to perform administrative tasks for the GlassFish
    server from the command line or from a script. You can use this utility instead
    of the GlassFish administration console interface we used earlier in this chapter.
    Almost every action that can be performed in the administration console has an
    equivalent command that can be executed with `asadmin`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'The `asadmin` utility is found in the `{as-install}/bin` directory. Commands
    should be run from within this directory if the full path to `asadmin` is not
    provided. To start the domain, you can execute the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `domain1` argument represents the name of the domain to start. Executing
    this command from the Windows command prompt will result in the following output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing GlassFish without NetBeans](img/5457OS_08_21.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: 'Stopping a running GlassFish domain is just as simple. Use the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will result in the following output:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing GlassFish without NetBeans](img/5457OS_08_22.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: We will continue to start and stop GlassFish within NetBeans but will revisit
    `asadmin` in [Chapter 13](ch13.html "Chapter 13. Moving Your Application to Production"),
    *Moving Your Application to Production*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has focused on the steps required to configure the 3T web application
    for deployment to the GlassFish 4 server. The Spring configuration files were
    defined and the `web.xml` file configured to load the Spring container on startup.
    You were guided through the GlassFish connection pool configuration process and
    the 3T web application was deployed to the context root of the GlassFish 4 server.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: This is a pivotal point in our enterprise application development process. We
    have now fully covered the realm of the Java developer, building a functional
    backend system that will serve dynamic requests for any JSON client. [Chapter
    9](ch09.html "Chapter 9. Getting Started with Ext JS 4"), *Getting Started with
    Ext JS 4*, will introduce the powerful Ext JS 4 framework and begin our frontend
    development journey.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
