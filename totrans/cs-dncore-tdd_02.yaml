- en: Getting Started with .NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Microsoft released the first version of .NET Framework, a platform for
    creating, running, and deploying services and applications, it was a game changer
    and a revolution in the Microsoft development community. Several cutting-edge
    applications were developed with the initial version of the framework and then
    several versions were released afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: .NET Framework has thrived and matured over the years with support for multiple
    programming languages and the inclusion of several features to make programming
    on the platform easy and worthwhile. But as robust and appealing the framework
    is, there is the limitation of restricting the development and deployment of applications
    to Microsoft-only operating system variants.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create a cloud-optimized, cross-platform implementation of .NET
    Framework for developers to solve the limitations of .NET Framework, Microsoft
    started the development of a .NET Core platform using the .NET Framework. With
    the introduction of Version 1.0 of .NET Core in 2016, application development
    on the .NET platform took on a new dimension, as .NET developers could now build
    applications that worked on Windows, Linux, macOS, and cloud, embedded, and IoT
    devices with ease. .NET Core is compatible with .NET Framework, Xamarin, and Mono
    through the .NET Standard.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will introduce the super cool new cross-platform capabilities
    of .NET Core and C# 7\. We will be learning as we create an ASP.NET MVC application
    on Ubuntu Linux with TDD. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: .NET Core framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of a .NET Core application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tour of Microsoft's Visual Studio Code Editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A look at the new features of C# 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ASP.NET MVC Core application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET Core framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**.NET Core** is a cross-platform open source development framework that runs
    on Windows, Linux, and macOS and cross architecture with support for x86, x64,
    and ARM. .NET Core was forked from .NET Framework, which technically makes it
    a subset of the latter, though streamlined line, and modular. .NET Core is a development
    platform that gives you great flexibility in developing and deploying applications.
    The new platform frees you from hassles usually experienced during application
    deployment. Thus, you don''t have to worry about managing versions of application
    runtime on deployment servers.'
  prefs: []
  type: TYPE_NORMAL
- en: Currently, in Version 2.0.7, .NET Core includes the .NET runtime with great
    performance and many features. Microsoft claims it's the fastest version of .NET
    platform. It has more APIs and more project templates have been added, such as
    those for developing ReactJS and AngularJS applications that run on .NET Core.
    Also, Version 2.0.7 has a set of command-line tools that enables you to build
    and run command-line applications with ease on the different platforms, as well
    as simplified packaging and support for Visual Studio for Macintosh. A big by-product
    of .NET Core is the cross-platform modular web framework, ASP.NET Core, which
    is a total redesign of ASP.NET and runs on .NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: .NET Framework is robust and contains several libraries for use in application
    development. However, some of the framework's components and libraries can couple
    with the Windows operating system. For example the `System.Drawing` library depends
    on Windows GDI, which is why .NET Framework cannot be considered cross-platform
    even though it has different implementations.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make .NET Core truly cross-platform, components such as Windows
    Forms and **Windows Presentation Foundation** (**WPF**) that have strong dependence
    on the Windows OS have been removed from the platform. ASP.NET Web Forms and **Windows
    Communication Foundation** (**WCF**) have also been removed and replaced with
    ASP.NET Core MVC and ASP.NET Core Web API. Additionally, **Entity Framework **(**EF**)
    has been streamlined to make it cross-platform and named Entity Framework Core.
  prefs: []
  type: TYPE_NORMAL
- en: Also, because of the dependency that .NET Framework has on the Windows OS, Microsoft
    could not open the code base. However, .NET Core is fully open source, hosted
    on GitHub, and has a thriving developer community, constantly working on new features
    and extending the scope of the platform.
  prefs: []
  type: TYPE_NORMAL
- en: .NET Standard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**.NET Standard** is a Microsoft-maintained set of specifications and standards
    that all .NET platforms must adhere to and implement. It formally specifies the
    APIs that are meant to be implemented by all variants of the .NET platform. There
    are currently three development platforms on the .NET platform—.NET Core, .NET
    Framework, and Xamarin. The .NET platform is needed to provide uniformity, and
    consistency, and makes it easier to share codes and reuse libraries on the three
    variants of .NET platform.'
  prefs: []
  type: TYPE_NORMAL
- en: .NET platform provides the definition of a set of uniform Base Class Libraries
    APIs to be implemented by all .NET platforms, to allow developers to easily develop
    applications and reusable libraries across the .NET platforms. Currently in Version
    2.0.7, .NET Standard provides new APIs that were not implemented in Version 1.0
    of .NET Core but are now implemented in Version 2.0\. More than 20,000 APIs have
    been added to the runtime components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, .NET Standard is a target framework, which means that you can
    develop your application to target a specific version of .NET Standard, allowing
    the application to run on any .NET platform that implements the standard, and
    you can easily share codes, libraries, and binaries among the different .NET platforms.
    When building your application to target .NET Standard, you should know that higher
    versions of .NET Standard have more APIs available for use but are not implemented
    by many platforms. It is always recommended that you target a lower version of
    the standard, which will guarantee that it''s implemented by many platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79979ff9-3e9a-489c-ab1d-65ae71a535f1.png)'
  prefs: []
  type: TYPE_IMG
- en: .NET Core components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '.NET Core, being a general-purpose application-development platform, is made
    up of **CoreCLR**, **CoreFX**, **SDK and CLI tools**, **application host**, and
    **dotnet application launcher**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa1eaeb2-5f73-4cc8-8f01-bfb2c3b84a79.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The CoreCLR, also known as .NET Core Runtime, is at the heart of the .NET Core
    and is a cross-platform implementation of the CLR; the original .NET Framework
    CLR has been refactored to produce the CoreCLR. The CoreCLR, which is the Common
    Language Runtime, manages usage and references to objects, communication and interactions
    of objects written in different programming languages supported in, and performs
    garbage collection by releasing objects from memory when they are no longer in
    use. The CoreCLR comprises of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Garbage collector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Just in Time** (**JIT**) compiler'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native interop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base .NET types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CoreFX is a set of framework or foundational libraries of the .NET Core and
    it provides primitive datatypes, filesystems, application composition types, consoles,
    and basic utilities. The CoreFX contains a streamlined library of classes.
  prefs: []
  type: TYPE_NORMAL
- en: .NET Core SDK contains a set of tools including **command-line interface** (**CLI**)
    tools and compilers for the different languages supported, used for building applications
    and libraries to run on .NET Core. The SDK tools and language compilers provide
    functionalities to make coding easier and faster by giving developers easy access
    to language components supported by CoreFX libraries.
  prefs: []
  type: TYPE_NORMAL
- en: In order to launch a .NET Core application, the dotnet application host is the
    component responsible for the selection and hosting of the required runtime for
    the application. .NET Core has a console application as the main application model
    and other application models, such as ASP.NET Core, Windows 10 Universal Windows
    Platform, and Xamarin Forms.
  prefs: []
  type: TYPE_NORMAL
- en: Supported languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .NET Core 1.0 supported only **C#** and **F#**, but with the release of .NET
    Core 2.0, **VB.NET** is now supported by the platform. The compilers for the supported
    languages run on .NET Core and provide access to the underlying features of the
    platform. This is possible because .NET Core implements .NET Standard specifications
    and exposes APIs that are available in the .NET Framework. The supported languages
    and .NET SDK tools can be integrated into different editors and IDEs, giving you
    different editor options for use in developing applications.
  prefs: []
  type: TYPE_NORMAL
- en: When to choose .NET Core over .NET Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both .NET Core and .NET Framework are well suited for use in *developing robust
    and scalable enterprise applications*; this is because the two platforms are built
    on solid code bases and provide a rich set of libraries and routines that simplify
    most development tasks. The two platforms share many similar components, hence
    code can be shared across the two development platforms. However, the two platforms
    are distinct, the selection of .NET Core has the preferred development platform
    that should be influenced by the development approach as well as the deployment
    needs and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Clearly, when the application you are developing is to be run on multiple platforms,
    .NET Core should be used. .NET Core being cross-platform makes it suitable for
    developing services and web applications that can run on **Windows**, **Linux**,
    and **macOS**. Also, with the introduction of **Visual Studio Code** by Microsoft—an
    editor with full support for .NET Core that provides intellisense and debugging
    functionalities, as well as other IDE features that were traditionally available
    only in **Visual Studio IDE**.
  prefs: []
  type: TYPE_NORMAL
- en: Ease of deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With .NET Core, you can install different versions side-by-side, a feature that
    is not available when using .NET Framework. With the side by side installation
    of .NET Core, several applications can be installed on a single server, enabling
    each application to run on its own version of .NET Core. Lately, there has been
    a lot of attention focused on containers and application containerization. Containers
    are used for creating standalone packages of software applications, including
    the runtimes needed to make the applications run in isolation, away from other
    applications on a shared operating system. Containerizing .NET applications is
    much better when .NET Core is used as the development platform. This is because
    of its cross-platform support, thereby allowing deployment of applications to
    containers of different operating systems. Also, the container images created
    with .NET Core are smaller and more lightweight.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability and performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using .NET Core, developing applications that use microservices architecture
    is relatively easier. With microservice architecture, you can develop applications
    that use a mix of different technologies, such as services developed with PHP,
    Java, or Rails. You can use .NET Core to develop microservices to be deployed
    on cloud platforms or containers. With .NET Core, you can develop applications
    that are scalable and can run on high-performance computers or high-end servers,
    allowing your application to easily serve hundreds of thousands of users.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations of .NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While .NET Core is robust, easy to use, and provides several benefits when used
    in application development, it is currently not suitable for all development problems
    and scenarios. Microsoft dropped several technologies that are available on .NET
    Framework from .NET Core to make it streamlined and cross-platform. Because of
    this, those technologies are not available for use in .NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: When your application will use a technology not available in .NET Core, for
    example using WPF or Windows Forms for the presentation layer, WCF Server implementation,
    or even third-party libraries that do not currently have the .NET Core version,
    it is preferable and recommended that you develop the application using .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Structure of a .NET Core application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the release of .NET Core 2.0, new templates were added, providing more
    options for the different application types that can be run on the platform. In
    addition to the existing project templates, the following **single-page application**
    (**SPA**) templates were added:'
  prefs: []
  type: TYPE_NORMAL
- en: Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactJS and Redux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The console application in .NET Core has a similar structure to that of .NET
    Framework, whereas ASP.NET Core has several new components, including folders
    and files, that were not in the previous versions of ASP.NET.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core MVC project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET web framework has fully matured over the years, transitioning from web
    forms to MVC and Web API. ASP.NET core is a new web framework for developing web
    applications and Web APIs that can run on .NET Core. It is a leaner and more streamlined
    version of ASP.NET that is easy to deploy with in-built dependency injection.
    ASP.NET Core can be integrated with frameworks such as AngularJS, Bootstrap, and
    ReactJS.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core MVC, similar to ASP.NET MVC, is the framework for building web
    applications and APIs, using the *Model View Controller pattern*. Like ASP.NET
    MVC, it supports model binding and validation, tag helpers, and uses *Razor syntax*
    for the Razor pages and MVC views.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the ASP.NET Core MVC application differs from that of ASP.NET
    MVC, with the addition of new folders and files. When you create a new ASP.NET
    Core project from Visual Studio 2017, Visual Studio for Mac, or through the CLI
    tools from the solution explorer, you can see the new components added to the
    project structure.
  prefs: []
  type: TYPE_NORMAL
- en: wwwroot folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In ASP.NET Core, the newly-added `wwwroot` folder is used to hold libraries
    and static content, such as images, JavaScript files and libraries, and CSS and
    HTML for easy access and to serve directly to web clients. The `wwwroot` folder
    contains `.css`, images, `.js`, and `.lib` folders for organizing the static contents
    of a site.
  prefs: []
  type: TYPE_NORMAL
- en: Models, Views, and Controllers folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the ASP.NET MVC project, an ASP.NET MVC core application's root folder
    also contains **Models**, **Views**, and **Controllers**, following the convention
    of the MVC pattern, for proper separation of web application files, codes, and
    presentation logic.
  prefs: []
  type: TYPE_NORMAL
- en: JSON files – bower.json, appsettings.json, bundleconfig.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some other files introduced are `appsettings.json`, which contains all the application
    settings, `bower.json`, which contains entries for managing client-side packages
    including CSS and JavaScript frameworks used in the project, and `bundleconfig.json`,
    which contains entries for configuring bundling and minification for the project.
  prefs: []
  type: TYPE_NORMAL
- en: Program.cs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like C# console applications, ASP.NET Core has the `Program` class, which is
    an important class that contains the entry point to the application. The file
    has the `Main()` method used to run the application and it is used to create an
    instance of `WebHostBuilder` for creating a host for the application. The `Startup`
    class to be used by the application is specified in the `Main` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Startup.cs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Startup` class is needed by ASP.NET Core applications to manage the application's
    request pipeline, configure services, and for dependency injection.
  prefs: []
  type: TYPE_NORMAL
- en: Different `Startup` classes can be created for different environments; for example,
    you can create two `Startup` classes in your application, one for the development
    environment and the other for production. You can also specify that a `Startup`
    class be used for all environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Startup` class has two methods—`Configure()`, which is compulsory and
    is used to determine how the application should respond to HTTP requests, and
    `ConfigureServices()`, which is optional and is used to configure services before
    the `Configure` method is called. Both methods are called when the application
    starts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tour of Microsoft's Visual Studio Code editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing .NET Core applications has been made much easier, not only because
    of the sleekness and robustness of the platform but also through the introduction
    of **Visual Studio Code**, a cross-platform editor that runs on Windows, Linux,
    and macOS. You don't need to have Visual Studio IDE installed on your system before
    you can create applications on .NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code, though not as powerful and features-packed as the Visual
    Studio IDE, does have in-built productivity tools and features that make creating
    .NET Core applications with it seamless. You can also install extensions for several
    programming languages from Visual Studio Marketplace into Visual Studio Code,
    giving you the flexibility to edit code written in other programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Installing .NET Core on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To show the cross-platform feature of .NET Core, let''s set up a .NET Core
    development environment on Ubuntu 17.04 desktop version. Before installing Visual
    Studio Code, let''s install .NET Core on the **Ubuntu OS**. First, you need to
    do a one-time registration of the **Microsoft Product** feed, which is done by
    registering the Microsoft signature key before adding the Microsoft Product feed
    to the system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the system terminal and run the following commands to register the Microsoft
    signature key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Register the Microsoft Product feed with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To install .NET Core SDK and the other components required to develop .NET
    Core applications on the Linux operating system, run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The commands will update the system and you should see the Microsoft repository
    from earlier added among the list of repositories where Ubuntu will attempt to
    get updates from. After the update, the .NET Core tool will be downloaded and
    installed on the system. The information displayed on your terminal screen should
    be similar to what is in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a3748ac-cf5e-4ae0-8041-eadcea29414c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the installation completes, create a new folder inside the `Documents`
    folder and name it `testapp`. Change the directory to the newly created folder
    and create a new console application to test the installation. See the following
    commands, and the screenshot for the outcome of the commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8149bd8-8130-4331-910b-e87bb25ef0c0.png)'
  prefs: []
  type: TYPE_IMG
- en: You would see on the terminal as .NET Core is creating the project and the required
    files. After the project has been successfully created, `Restore succeeded` will
    be displayed on the terminal. Inside the `testapp` folder, an `obj` folder, `Program.cs`,
    and `testapp.csproj` files would have been added by the framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can proceed to run the console application using the `dotnet run` command.
    This command will compile and run the project before displaying `Hello World!`
    on the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing and setting up Visual Studio Code on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visual Studio Code, being a cross-platform editor, can be installed on many
    variants of Linux OS, with packages for other Linux distributions being added
    gradually. To install Visual Studio Code on **Ubuntu**, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the `.deb` package meant for Ubuntu and Debian variants of Linux from
    [https://code.visualstudio.com/download](https://code.visualstudio.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the downloaded file from the terminal, which will install the editor,
    the `apt` repository, and signing key, to ensure the editor can be automatically
    updated when the system update command is run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After a successful installation, you should be able to launch the newly installed
    Visual Studio Code editor. The editor has a slightly similar look and feel to
    that of Visual Studio IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploring Visual Studio Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the successful installation of Visual Studio Code on your Ubuntu instance,
    you need to perform initial environment setup before you can begin writing code
    using the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Visual Studio Code from the Start menu and install the C# extension to
    the editor from Visual Studio Marketplace. You can launch the extension by pressing
    *Ctrl* + *Shift* + *X*, through the View menu and clicking Extension, and by clicking
    directly on the Extension tab; this will load a list of available extensions,
    so click and install the C# extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the extension has been installed, click on the Reload button to activate
    the C# extension in the editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4756b0c5-1806-4efb-a83a-79512ae250c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the folder of the console application you earlier created; to do that,
    click on the File menu and select Open Folder or press *Ctrl* + *K*, *Ctrl* +
    *O.* This will open the file manager; browse to the path of the folder and click
    open. This will load the content of the project in Visual Studio Code. In the
    background, Visual Studio Code will attempt to download the required dependencies
    for the Linux platform, Omnisharp for Linux and .NET Core Debugger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fc691b0d-0075-472a-aa73-f1d3c45d5634.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create a new project, you can use the Integrated Terminal of the editor
    without having to go through the system terminal. Click on the View menu and select
    Integrated Terminal. This will open the Terminal tab in the editor, where you
    can type the commands to create a new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe857388-8cc6-41cf-ba2b-a016c8f76981.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the opened project, you will see a notification that requires assets to
    build and debug the applications that are missing. If you click Yes, in the Explorer
    tab, you can see a `.vscode` tree with `launch.json` and `tasks.json` files added.
    Click the `Program.cs` file to load the file into the editor. From the Debug menu
    select Start Debugging or press *F5* to run the application; you should see `Hello
    World!` displayed on the editor''s Debug Console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e38a634-11cd-4c49-b6e4-d3241bbb1b12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you launch Visual Studio Code, it loads with the state it was in when
    it was closed, opening the files and folders that you last accessed. The editor''s
    layout is easy to navigate and work with, and comes with areas such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Status bar showing you information about the files you currently have opened.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity bar provides access to the Explorer view for viewing your project folders
    and files, and Source Control view for managing a project's source versioning.
    Debug view for watching variables, breakpoints and debugging-related activities,
    Search view allows you to search folders and files. Extension view allows you
    to see available extensions that can be installed into the editor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editor area for editing the project files, allowing you to open up to three
    files for editing simultaneously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Panel regions show different panels for Output, Debug Console, Terminal, and
    Problems:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2d24345d-99b6-4fbd-9ae5-864b36bc6da1.png)'
  prefs: []
  type: TYPE_IMG
- en: A look at the new features of C# 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The C# programming language has matured over the years; more language features
    and constructs are being added with the release of each version. A language that
    originally was only being developed in house by Microsoft and run only on Windows
    operating systems is now open source and cross-platform. This is made possible
    through .NET Core and Version 7 (7.0 and 7.1) of the language, which added flavors
    and improved the available features of the language. The roadmap of the language,
    especially Version 7.2 and 8.0, promises to add more features to the language.
  prefs: []
  type: TYPE_NORMAL
- en: Tuples enhancement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Tuples** were introduced into C# language in Version 4 and are used in the
    simplified form to provide structure with two or more data elements, allowing
    you to create methods that can return two or more data elements. Before C# 7,
    referencing the elements of a tuple was done by using *Item1, Item2, ...ItemN*,
    where *N* is the number of elements in the tuple structure. Starting from C# 7,
    tuples now support semantic naming of the contained fields with the introduction
    of cleaner and more efficient ways of creating and using tuples.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now create tuples by directly assigning each member to a value. This
    assignment creates a tuple containing elements *Item1*, *Item2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also create tuples that have semantic names for the elements contained
    in the tuple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The names tuple, instead of having fields as *Item1*, *Item2*, will have fields
    that can be referenced as `firstName` and `lastName` at compile time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create your method to return a tuple with two or more data elements
    when using POCO might be overkill:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Out keyword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In C#, arguments or parameters can be passed by reference or value. When you
    pass an argument by reference to a method, property, or constructor, the value
    of the parameter will be changed and the changes made will be retained when the
    method or constructor goes out of scope. With the use of the `out` keyword, you
    can pass a method''s argument as a reference in C#. Prior to C# 7, to use the
    `out` keyword, you had to declare a variable before passing it as an `out` argument
    to a method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In C# 7, you can now pass out variables to a method without having to declare
    the variables first, with the preceding code snippet now looking like the following,
    which prevents you from mistakenly using the variables before they are assigned
    or initialized and gives the code clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Support for the implicit type out variable has been added to the language,
    allowing the compiler to infer the types of variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Ref locals and returns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C# language has always had the `ref` keyword, which allows you to use and return
    reference to variables defined elsewhere. C# 7 adds another feature, `ref` locals
    and `returns`, which improves performance and allows you to declare helper methods
    that were not possible with the earlier versions of the language. The `ref` locals
    and `returns` keyword have some restrictions—you cannot use them with the `async`
    methods and you cannot return a reference to a variable with the same execution
    scope.
  prefs: []
  type: TYPE_NORMAL
- en: Ref locals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ref` local keyword allows you to store references in a local variable
    by declaring local variables with the `ref` keyword and add the `ref` keyword
    before a method call or assignment. For example, in the following code, the `day`
    string variable references `dayOfWeek`; changing the value of `day` also changes
    the value of `dayOfWeek` and vice versa:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Ref returns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also use the `ref` keyword as a return type of methods. To achieve
    this, add the `ref` keyword to the method signature and inside the method body,
    add `ref` after the `return` keyword. In the following code snippet, an array
    of string is declared and initialized. The fifth element of the string array is
    then returned by the method as a reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Local function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **local **or **nested function**, allows you to define a function inside
    another function. This feature has been available in some programming languages
    for years, but was just introduced in C# 7\. It is desirable to use when you need
    a function that is small and will not be reusable outside the context of the `container`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Patterns matching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C# 7 includes patterns, a language element feature that allows you to perform
    a method dispatch on properties besides object types. It extends the language
    constructs already implemented in override and virtual methods for implementing
    dispatch for types and data elements. The `is` and `switch` expressions have been
    updated in Version 7.0 of the language to support **pattern matching**, so you
    can now use the expressions to determine whether an object of interest has a specific
    pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `is` pattern expression, you can now write code that contains routines
    with algorithms that manipulate elements with unrelated types. The `is` expressions
    can now be used with a pattern in addition to being able to test for a type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The introduced patterns matching can take three forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type patterns**: This entails checking whether an object is of a type before
    extracting the value of the object into a new variable defined within the expression:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Var patterns**: Creates a new variable with the same type as the object and
    assigns the value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Constant patterns**: Checks whether the supplied object is equivalent to
    a constant expression:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With the updated switch expression, you can now use patterns as well as conditions
    in case causes and switch on any types besides the base or primitive types while
    allowing you to use the when keyword to additionally specify rules to the pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Digit separator and binary literal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A new syntatic sugar has been added to C# 7, which is the **digit separator**.
    This construct greatly improves code readability, especially when handling large
    numbers of different numeric types supported in C#. Prior to C# 7, manipulating
    large numeric values to have separators was a bit messy and unreadable. With the
    introduction of the digit separator, you can now use an underscore (`_`) as a
    separator for digits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Also newly introduced in this version is **binary literals**. You can now create
    binary literals by simply including `0b` as a prefix to binary values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Creating an ASP.NET MVC Core application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET Core provides an elegant way of building web applications and APIs that
    run on Windows, Linux, and macOS, owing to the .NET Core platform's tool and SDK
    that simplify developing cutting-edge applications and support side-by-side with
    application versioning. With ASP.NET Core, your applications have a smaller surface
    area which improves performance as you only have to include the NuGet packages
    required to run your applications. ASP.NET Core can also be integrated with client-side
    libraries and frameworks, allowing you to develop web applications using the CSS
    and JS libraries you are already familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core runs with Kestrel, a web server included in the ASP.NET Core project
    templates. Kestrel is an in-process cross-platform HTTP server implementation
    based on **libuv**, a cross-platform asynchronous I/O library that makes building
    and debugging ASP.NET Core applications much easier. It listens to HTTP requests
    and then packages the request details and features into an `HttpContext` object.
    Kestrel can be used as a standalone web server or with IIS or Apache web servers
    where the requests received by the other web servers are forwarded to Kestrel,
    a concept known as reverse proxy.
  prefs: []
  type: TYPE_NORMAL
- en: '**ASP.NET MVC Core** provides you with a testable framework for modern web
    application development using the *Model View Controller* pattern, which allows
    you to fully practice test-driven development. Newly added to ASP.NET 2.0 is the
    support for Razor pages, which is now the recommended approach to develop user
    interfaces for ASP.NET Core web applications.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new ASP.NET MVC Core project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio Code and access the integrated terminal panel by selecting
    Integrated Terminal from the View menu. On the terminal, run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'After the application has been created, open the project''s folder using Visual
    Studio Code and select the `Startup.cs` file. You should notice a notification
    on the top bar of the screen, Required assets to build and debug are missing from
    ''LoanApp''. Add them?; select Yes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b461a4e5-e5e9-4e40-8d1f-91b0d0b99697.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press *F5* to build and run the MVC application. This tells the Kestrel web
    server to run the application and launches the default browser on the computer
    with the `http://localhost:5000` address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5859d47a-a4f2-4833-96ea-d321ad99d212.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The .NET Core platform, though new, is rapidly maturing, with Version 2.0.7
    introducing many features and enhancements that simplify building different types
    of cross-platform applications. In this chapter, we have taken a tour of the platform,
    introduced the new features of C# 7, and set up a development environment on Ubuntu
    Linux, while creating our first ASP.NET MVC Core application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explain what to look out for in order to avoid
    writing codes that are untestable and we will later walk you through SOLID principles
    that can help you write testable and quality code.
  prefs: []
  type: TYPE_NORMAL
