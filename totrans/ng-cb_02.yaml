- en: '*Chapter 2*: Understanding and Using Angular Directives'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn about Angular directives in depth. You'll learn
    about attribute directives, with a really good real-world example of using a highlight
    directive. You'll also write your first structural directive and see how `ViewContainer`
    and `TemplateRef` services work together to add/remove elements from the **Document
    Object Model** (**DOM**), just as in the case of `*ngIf`, and you'll create some
    really cool attribute directives that do different tasks. Finally, you'll learn
    how to use multiple structural directives on the same **HyperText Markup Language**
    (**HTML**) element and how to enhance template type checking for your custom directives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the recipes we''re going to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using attribute directives to handle the appearance of elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a directive to calculate the read time for articles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic directive that allows you to vertically scroll to an element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing your first custom structural directive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use `*ngIf` and `*ngSwitch` together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing template type checking for your custom directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the recipes in this chapter, make sure you have **Git** and **Node.js**
    installed on your machine. You also need to have the `@angular/cli` package installed,
    which you can do with `npm install -g @angular/cli` from your terminal. The code
    for this chapter can be found at [https://github.com/PacktPublishing/Angular-Cookbook/tree/master/chapter02](https://github.com/PacktPublishing/Angular-Cookbook/tree/master/chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: Using attribute directives to handle the appearance of elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll work with an Angular attribute directive named **highlight**.
    With this directive, you'll be able to search words and phrases within a paragraph
    and highlight them on the go. The whole paragraph's container background will
    also be changed when we have a search in action.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project we are going to work with resides in `chapter02/start_here/ad-attribute-directive`,
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in **Visual Studio Code** (**VS Code**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal, and run `npm install` to install the dependencies of the
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab, and you should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – ad-attribute-directives app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.01_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – ad-attribute-directives app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, the app has a search input box and a paragraph text. We need to be
    able to type a search query into the search box so that we can highlight the matching
    text in the paragraph. Here are the steps on how we achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create a property named `searchText` in the `app.component.ts` file
    that we''ll use as a **model** for the search-text input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we use this `searchText` property in the `app.component.html` file with
    the search input as a `ngModel`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Notice that `ngModel` doesn't work without `FormsModule`, and so we've already
    imported `FormsModule` into our `app.module.ts` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll create an **attribute directive** named `highlight` by using the
    following command inside our `ad-attributes-directive` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command generated a directive that has a selector called `appHighlight`.
    See the *How it works…* section for why that happens. Now that we have the directive
    in place, we''ll create two inputs for the directive to be passed from `AppComponent`
    (from `app.component.html`)—one for the search text and another for the highlight
    color. The code should look like this in the `highlight.directive.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we have the inputs in place now, let''s use the `appHighlight` directive
    in `app.component.html` and pass the `searchText` model from there to the `appHighlight`
    directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll listen to the input changes now for the `searchText` input, using `ngOnChanges`.
    Please see the *Using ngOnChanges to intercept input property changes* recipe
    in [*Chapter 1*](B15150_01_Final_JC_ePub.xhtml#_idTextAnchor014)*, Winning Components
    Communication**,* for how to listen to input changes. For now, we''ll only do
    a `console.log` when the input changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll write some logic for what to do when we actually have something
    to search for. For this, we''ll first import the `ElementRef` service so that
    we can get access to the template element on which our directive is applied. Here''s
    how we''ll do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll replace every matching text in our `el` element with a custom `<span>`
    tag with some hardcoded styles. Update your `ngOnChanges` code in `highlight.directive.ts`
    as follows, and see the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice that if you type a word, it will still just show only one letter
    highlighted. That's because whenever we replace the `innerHTML` property, we end
    up changing the original text. Let's fix that in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep the original text intact, let''s create a property name of `originalHTML`
    and assign an initial value to it on the first change. We''ll also use the `originalHTML`
    property while replacing the values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll write some logic to reset everything back to the `originalHTML`
    property when we remove our search query (when the search text is empty). In order
    to do so, let''s add an `else` condition, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We create an attribute directive that takes the `highlightText` and `highlightColor`
    inputs and then listens to the input changes for the `highlightText` input using
    the `SimpleChanges` **application programming interface** (**API**) and the `ngOnChanges`
    life cycle hook.
  prefs: []
  type: TYPE_NORMAL
- en: First, we make sure to save the original content of the target element by getting
    the attached element using the `ElementRef` service, using the `.nativeElement.innerHTML`
    on the element, and then saving it to `originalHTML` property of the directive.
    Then, whenever the input changes, we replace the text with an additional HTML
    element (a `<span>` element) and add the background color to this `span` element.
    We then replace the `innerHTML` property of the target element with this modified
    version of the content. That's all the magic!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Testing Angular attribute directives documentation ([https://angular.io/guide/testing-attribute-directives](https://angular.io/guide/testing-attribute-directives))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a directive to calculate the read time for articles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll create an attribute directive to calculate the read
    time of an article, just like Medium. The code for this recipe is highly inspired
    by my existing repository on GitHub, which you can view at the following link:
    [https://github.com/AhsanAyaz/ngx-read-time](https://github.com/AhsanAyaz/ngx-read-time).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter02/start_here/ng-read-time-directive`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal, and run `npm install` to install the dependencies of the
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab, and you should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – ng-read-time-directive app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.02_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – ng-read-time-directive app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Right now, we have a paragraph in our `app.component.html` file for which we
    need to calculate the **read time** in minutes. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create an attribute directive named `read-time`. To do that,
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command created an `appReadTime` directive. We''ll first apply
    this directive to `div` inside the `app.component.html` file with the `id` property
    set to `mainContent`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll create a configuration object for our `appReadTime` directive.
    This configuration will contain a `wordsPerMinute` value, on the basis of which
    we''ll calculate the read time. Let''s create an input inside the `read-time.directive.ts`
    file with a `ReadTimeConfig` exported interface for the configuration, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now move on to getting the text to calculate the read time. For this,
    we''ll use the `ElementRef` service to retrieve the `textContent` property of
    the element. We''ll extract the `textContent` property and assign it to a local
    variable named `text` in the `ngOnInit` life cycle hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our text variable filled up with the element''s entire text
    content, we can calculate the time to read this text. For this, we''ll create
    a method named `calculateReadTime` by passing the `text` property to it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve got the time now in minutes, but it''s not in a user-readable format
    at the moment since it is just a number. We need to show it in a way that is understandable
    for the end user. To do so, we''ll do some minor calculations and create an appropriate
    string to show on the **user interface** (**UI**). The code is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Note that with the code so far, you should be able to see the minutes on the
    console when you refresh the application.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add an `@Output()` to the directive so that we can get the read
    time in the parent component and display it on the UI. Let''s add it as follows
    in the `read-time.directive.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use the `readTimeCalculated` output to emit the value of the `timeStr`
    variable from the `ngOnInit()` method when we''ve calculated the read time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we emit the read-time value using the `readTimeCalculated` output, we
    have to listen to this output''s event in the `app.component.html` file and assign
    it to a property of the `AppComponent` class so that we can show this on the view.
    But before that, we''ll create a local property in the `app.component.ts` file
    to store the output event''s value, and we''ll also create a method to be called
    upon when the output event is triggered. The code is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now listen to the output event in the `app.component.html` file, and
    we can then call the `onReadTimeCalculated` method when the `readTimeCalculated`
    output event is triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can finally show the read time in the `app.component.html` file, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `appReadTime` directive is at the heart of this recipe. We use the `ElementRef`
    service inside the directive to get the native element that the directive is attached
    to, then we take out its text content. The only thing that remains then is to
    perform the calculation. We first split the entire text content into words by
    using the `/\s+/g` **regular expression** (**regex**), and thus we count the total
    words in the text content. Then, we divide the word count by the `wordsPerMinute`
    value we have in the configuration to calculate how many minutes it would take
    to read the entire text. *Easy peasy, lemon squeezy*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ngx Read Time library ([https://github.com/AhsanAyaz/ngx-read-time](https://github.com/AhsanAyaz/ngx-read-time))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular attribute directives documentation ([https://angular.io/guide/testing-attribute-directives](https://angular.io/guide/testing-attribute-directives))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic directive that allows you to vertically scroll to an element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll create a directive to allow the user to scroll to a particular
    element on the page, on click.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter02/start_here/ng-scroll-to-directive`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal, and run `npm install` to install the dependencies of the
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab, and you should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – ng-scroll-to-directive app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.03_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – ng-scroll-to-directive app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First off, we''ll create a `scroll-to` directive so that we can enhance our
    application with smooth scrolls to different sections. We''ll do this using the
    following command in the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to make the directive capable of accepting an `@Input()` that''ll
    contain the **Cascading Style Sheets** (**CSS**) **Query Selector** for our target
    section that we''ll scroll to upon the element''s `click` event. Let''s add the
    input as follows to our `scroll-to.directive.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll apply the `appScrollTo` directive to the links in the `app.component.html`
    file along with the respective targets so that we can implement the scroll logic
    in the next steps. The code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll implement the `HostListener()` decorator to bind the `click` event
    to the element the directive is attached to. We''ll just log the `target` input
    when we click the links. Let''s implement this, and then you can try clicking
    on the links to see the value of the `target` input on the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we have the `click` handler set up already, we can now implement the
    logic to scroll to a particular target. For that, we''ll use the `document.querySelector`
    method, using the `target` variable''s value to get the element, and then the
    `Element.scrollIntoView()` web API to scroll the target element. With this change,
    you should have the page being scrolled to the target element already when you
    click the corresponding link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'All right—we got the scroll working. "*But what''s new, Ahsan? Isn''t this
    exactly what we were already doing with the href implementation before?*" Well,
    you''re right. But, we''re going to make the scroll super *smoooooth*. We''ll
    pass `scrollIntoViewOptions` as an argument to the `scrollIntoView` method with
    the `{behavior: "smooth"}` value to use an animation during the scroll. The code
    should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The essence of this recipe is the web API that we''re using within an Angular
    directive, and that is `Element.scrollIntoView()`. We first attach our `appScrollTo`
    directive to the elements that should trigger scrolling upon clicking them. We
    also specify which element to scroll to by using the `target` input for each directive
    attached. Then, we implement the `click` handler inside the directive with the
    `scrollIntoView()` method to scroll to a particular target, and to use a smooth
    animation while scrolling, we pass the `{behavior: ''smooth''}` object as an argument
    to the `scrollIntoView()` method.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`scrollIntoView()` method documentation ([https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular attribute directives documentation ([https://angular.io/guide/testing-attribute-directives](https://angular.io/guide/testing-attribute-directives))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing your first custom structural directive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll write your first custom structural directive named `*appIfNot`
    that will do the opposite of what `*ngIf` does—that is, you'll provide a Boolean
    value to the directive, and it will show the content attached to the directive
    when the value is `false`, as opposed to how the `*ngIf` directive shows the content
    when the value provided is `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter02/start_here/ng-if-not-directive`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal, and run `npm install` to install the dependencies of the
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab, and you should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – ng-if-not-directive app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.04_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – ng-if-not-directive app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, we''ll create a directive using the following command in the
    project root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, instead of the `*ngIf` directive in the `app.component.html` file, we
    can use our `*appIfNot` directive. We''ll also reverse the condition from `visibility
    === VISIBILITY.Off` to `visibility === VISIBILITY.On`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have set the condition, we need to create an `@Input` inside the
    `*appIfNot` directive that accepts a Boolean value. We''ll use a **setter** to
    intercept the value changes and will log the value on the console for now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If you tap on the **Visibility On** and **Visibility Off** buttons now, you
    should see the values being changed and reflected on the console, as follows:![Figure
    2.5 – Console logs displaying changes for the appIfNot directive values
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_2.05_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – Console logs displaying changes for the appIfNot directive values
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''re moving toward the actual implementation of showing and hiding the
    content based on the value being `false` and `true` respectively, and for that,
    we first need the `TemplateRef` service and the `ViewContainerRef` service injected
    into the constructor of `if-not.directive.ts`. Let''s add these, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can add the logic to add/remove the content from the DOM based
    on the `appIfNot` input''s value, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Structural directives** in Angular are special for multiple reasons. First,
    they allow you to manipulate DOM elements—that is, adding/removing/manipulating
    based on your needs. Moreover, they have this `*` prefix that binds to all the
    magic Angular does behind the scenes. As an example, `*ngIf` and `*ngFor` are
    both structural directives that behind the scenes work with the `<ng-template>`
    directive containing the content you bind the directive to and create the required
    variables/properties for you in the scope of `ng-template`. In the recipe, we
    do the same. We use the `TemplateRef` service to access the `<ng-template>` directive
    that Angular creates for us behind the scenes, containing the **host element**
    on which our `appIfNot` directive is applied. Then, based on the value provided
    to the directive as input, we decide whether to add the magical `ng-template`
    to the view or clear the `ViewContainerRef` service to remove anything inside
    it.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular structural directive microsyntax documentation ([https://angular.io/guide/structural-directives#microsyntax](https://angular.io/guide/structural-directives#microsyntax))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular structural directives documentation ([https://angular.io/guide/structural-directives](https://angular.io/guide/structural-directives))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a structural directive by Rangle.io ([https://angular-2-training-book.rangle.io/advanced-angular/directives/creating_a_structural_directive](https://angular-2-training-book.rangle.io/advanced-angular/directives/creating_a_structural_directive))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use *ngIf and *ngSwitch together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In certain situations, you might want to use more than one structural directive
    on the same host—for example, a combination of `*ngIf` and `*ngFor` together.
    In this recipe, you'll learn how to do exactly that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project we are going to work with resides in `chapter02/start_here/multi-structural-directives`,
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal, and run `npm install` to install the dependencies of the
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab, and you should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – multi-structural-directives app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.06_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – multi-structural-directives app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running, let's see the steps for this recipe in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start by moving the element with the **No items in bucket. Add some
    fruits!** text into its own `<ng-template>` element, and we''ll give it a template
    variable called `#bucketEmptyMessage`. The code should look like this in the `app.component.html`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we moved the entire `div` out of the `.page-section` div. Now,
    we''ll use the `ngIf-Else` syntax to either show a bucket list or an empty bucket
    message based on the bucket''s length. Let''s modify the code, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'As soon as you save the preceding code, you''ll see the application breaks,
    mentioning we can''t use multiple template bindings on one element. This means
    we can''t use multiple structural directives on one element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Error on console, showing we can''t use multiple directives
    on one element'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.07_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Error on console, showing we can't use multiple directives on one
    element
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, as a final step, let''s fix the issue by wrapping the div with `*ngFor="let
    item of bucket;"` inside an `<ng-container>` element and using the `*ngIf` directive
    on the `<ng-container>` element, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we can't use two structural directives on a single element, we can always
    use another HTML element as a parent to use the other structural directive. However,
    that adds another element to the DOM and might cause problems for your element
    hierarchy, based on your implementation. `<ng-container>`, however, is a magical
    element from Angular's core that is not added to the DOM. Instead, it just wraps
    the logic/condition that you apply to it, which makes it really easy for us to
    just add a `*ngIf` or `*ngSwitchCase` directive on top of your existing elements.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Group sibling elements with `<ng-container>` documentation ([https://angular.io/guide/structural-directives#group-sibling-elements-with-ng-container](https://angular.io/guide/structural-directives#group-sibling-elements-with-ng-container))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing template type checking for your custom directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to improve type checking in templates for your
    custom Angular directives using the static template guards that the recent versions
    of Angular have introduced. We'll enhance the template type checking for our `appHighlight`
    directive so that it only accepts a narrowed set of inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project we are going to work with resides in `chapter02/start_here/enhanced-template-type-checking`,
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal, and run `npm install` to install the dependencies of the
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab, and you should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – enhanced-template-type-checking app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.08_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – enhanced-template-type-checking app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running, let's see the steps for this recipe in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First off, we''ll try to identify the problem, and that boils down to the ability
    to pass any string as a color to the `highlightColor` attribute/input for the
    `appHighlight` directive. Give it a try. Provide the `''#dcdcdc''` value as the
    input and you''ll have a broken highlight color, but no errors whatsoever:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Well, how do we fix it? By adding some `angularCompileOptions` to our `tsconfig.json`
    file. We''ll do this by adding a flag named `strictInputTypes` as `true`. Stop
    the app server, modify the code as follows, and rerun the `ng serve` command to
    see the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – strictInputTypes helping with build time errors for incompatible
    type'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.09_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – strictInputTypes helping with build time errors for incompatible
    type
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, great! Angular now identifies that the provided `''#dcdcdc''` value is
    not assignable to the `HighlightColor` type. But what happens if someone tries
    to provide `null` as the value? Would it still be fine? The answer is no. We would
    still have a broken experience, but no error whatsoever. To fix this, we''ll enable
    two flags for our `angularCompilerOptions`—`strictNullChecks` and `strictNullInputTypes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `app.component.html` file to provide `null` as the value for the
    `[highlightColor]` attribute, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Stop the server, save the file, and rerun `ng serve`, and you'll see that we
    now have another error, as shown here:![Figure 2.10 – Error reporting with strictNullInputTypes
    and strictNullChecks in action
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_2.10_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 – Error reporting with strictNullInputTypes and strictNullChecks
    in action
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, instead of so many flags for even further cases, we can actually just
    put two flags that do all the magic for us and cover most of our applications—the
    `strictNullChecks` flag and the `strictTemplates` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can import the `HighlightColor` enum into our `app.component.ts`
    file. We will add a `hColor` property to the `AppComponent` class and will assign
    it a value from the `HighlightColor` enum, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll now use the `hColor` property in the `app.component.html` file to pass
    it to the `appHighlight` directive. This should fix all the issues and make **light
    coral** the assigned highlight color for our directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular structural directives documentation ([https://angular.io/guide/structural-directives](https://angular.io/guide/structural-directives))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Template type checking in Angular documentation ([https://angular.io/guide/template-typecheck#template-type-checking](https://angular.io/guide/template-typecheck#template-type-checking))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting template errors in Angular documentation ([https://angular.io/guide/template-typecheck#troubleshooting-template-errors](https://angular.io/guide/template-typecheck#troubleshooting-template-errors))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
