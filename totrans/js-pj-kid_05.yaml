- en: Chapter 5. Ahoy! Sailing into Battle
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to develop a full game using HTML, CSS, and JavaScript.
    We will focus on the JavaScript coding, therefore, we will not care about the
    graphics of the game. We will code a game named **Battleship**. Many of you have
    heard of it before. This is a memory game. Your imagination and intuition will
    help you to win the game. There are a few variations for playing the game.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss how the game looks. There are a few square-shaped geometrical
    objects connected to each other as shown in the following. The number of rows
    and columns need to be equal:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![Ahoy! Sailing into Battle](img/B04720_05_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: 'The rows and columns are usually named with the help of number system or alphabets.
    Let''s say that the rows are **1**, **2**, **3**, **4**, **5**, **6**, **7**,
    **8**, **9**, and **10**. The columns are **A**, **B**, **C**, **D**, **E**, **F**,
    **G**, **H**, **I**, and **J**. We can name them by either numbers or alphabets:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '![Ahoy! Sailing into Battle](img/B04720_05_02.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
- en: 'It is a two player game. The following are its rules:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Both the players will secretly place their ships (there can be different types
    of boats or water vehicles) on their matrices/grids.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The players can put their ships vertically or horizontally; however, not diagonally.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The players must place all their ships on the grid before they start playing.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Their ships cannot overlap each other's.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When all the ships are placed, the players cannot move their ships from the
    grid.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After placing all the ships, the first player will state a coordinate of the
    second player and if there is a ship belonging to the second player, the ship
    will blow.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, the second player will state a coordinate of the first player. If there
    is a ship belonging to the first player, it will blow.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The coordinate may look similar to **A2**, **B2**, **D5**, and so on. The first
    alphabet will be the *x* axis of the grids and the number will represent *y* axis
    of the grid.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The player that blows all the ships of the opponent will win.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows few ships placed on the grid:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![Ahoy! Sailing into Battle](img/B04720_05_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: Now, we will head to the programming part of the game.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'We will stick to the following rules so that our game does not become difficult
    to code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: There will be one ship belonging to both the players.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ship will occupy four parts of the grid.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A player will have to input both the *x* and *y* axes coordinates at the prompt.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The grid will be 9 x 9.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The player will have to put `h` or `v` for the horizontal or vertical position
    of the ship.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To simplify the drawing, we will put dots (**.**) on the position of the grids.
    The grids will look similar to the following image:![Ahoy! Sailing into Battle](img/B04720_05_04.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will need a **Fire** button to start the game.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The HTML part
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The HTML part will look similar to the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of the code will be as shown in the following image:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![The HTML part](img/B04720_05_05.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: The CSS part
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We use a CSS coding in the `<style></style>` tags for the body. As we will
    heed on the coding in JavaScript only, we will not bother about the visual part
    of the game. To make the body of the game colorful, we will use the following
    code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The JavaScript part
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part is the main part of our game, we will pay attention to this part the
    most. We will write all our codes in the `<script></script>` tags.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'For the grids, we will need a two dimensional array. We will take a `game`
    variable to store the data as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many programs may require the processing of multiple data items that have common
    characteristics. In such situations, it is often convenient to place the data
    items in an array, where they will all share the same name. The individual data
    can be characters, floats, integers, and so on. However, they must all be of the
    same type and class.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will take a variable to display the two dimensional array on the HTML page:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will now append this on the body and create a button:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This button will call the `fire` function (we will write the function later.):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we will place the button on the body part:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s make a function to draw the board:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, put draw the board on the HTML page by writing the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will ask the player where he wants to place his ship using the `prompt()`
    function:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If the player chooses the horizontal orientation for their ship, we need to
    replace the dots by writing the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If the player chooses the vertical orientation for their ship, we need to replace
    the dots by writing the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We need to redraw the board after placing the ship, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Lets create the `fire()` function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `fire()` function will be as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When the `fire()` function is called, we need to take input from the player
    as shown in the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Convert the inputs into numbers, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If the input does not match with the `#` character, we will print `You Missed.`
    using the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If the input hits the ship, we will print few messages and draw the board again:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we need to check whether there is any ship remaining on the board. We
    will use the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If no ship is left, we will end the game:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The final code
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our final codes will look similar to the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you run the preceding code, you will see the following prompt:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![The final code](img/B04720_05_06.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: Let's play the game that we created. The first player has to place his ship.
    He has to input the coordinates of the ship.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider that we input `3` on the *x* axis and `2` on the *y* axis. Place our
    ship on the vertical orientation. The game screen will look as shown in the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![The final code](img/B04720_05_07.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: You can see that your ship is placed. Now, you can shoot your opponent (computer)
    by pressing the **Fire** button. You will be asked to input the coordinates of
    the grid, where you want to shoot. If you miss a shot, you will see a message
    that we coded, **You Missed.**
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: I hope that you are able to play the game that you built.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: If you want to develop your game more (such as enhance the graphics, number
    of ships, and so on), you only need to develop CSS and JavaScript.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will see a better code for the Battleship game, as shown in the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Make a `js` folder anywhere in your computer.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `js` folder, place the three files that are included in this chapter:
    `battleship.js`, `functions.js`, and `jquery.min.js`.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Outside the `js` folder, place the `battleship.css` and `index.html` files.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `index.html` file in a Notepad, you will see the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We included the three JavaScript files in the HTML file. We added a jQuery
    file, which we will discuss in the next chapter. The output of the preceding code
    will show you the following screen:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![The final code](img/B04720_05_08.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: You can click the **Standard** button to play the standard Battlefield or **Custom**
    button to play a non-standard Battlefield.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select the **Standard** button, you will get the following screen:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![The final code](img/B04720_05_09.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: Now, you can guess the position of the opponent's ship and click on the grid.
    There will be a log panel on the right-hand side of the screen. You can also see
    how many and which ships you have destroyed from the preceding panel of the game
    log panel.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select the **Custom** play, you will see the following screen:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![The final code](img/B04720_05_10.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: After adding the five ships, you can play the game. You can add the same ship
    twice or more, if required.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: You can place your ships vertically or horizontally and click on the tiles to
    blow the opponent's ship. You can click one tile at a time.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a complete game and played it. We also played a better
    version of the game we have built. All you need to remember is that you must know
    the logic behind all the code that we previously discussed. You are given the
    source code of the better version of the game with this chapter. I hope that you
    will study the code and write your own Battleship game. We used a `jquery.js`
    JavaScript file on our improved version of the Battleship. The `jquery.js` file
    has a lot of lines of code (We will discuss this in [Chapter 6](ch06.html "Chapter 6. Exploring
    the Benefits of jQuery"), *Exploring the Benefits of jQuery*).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个完整的游戏并进行了游戏。我们还玩了一个我们构建的游戏的更好版本。你需要记住的是，你必须了解我们之前讨论的所有代码背后的逻辑。本章附有更好版本游戏的源代码。我希望你能学习这些代码并编写自己的战舰游戏。在我们改进的战舰游戏中，我们使用了`jquery.js`
    JavaScript文件。`jquery.js`文件有很多行代码（我们将在[第6章](ch06.html "第6章. 探索jQuery的好处")中讨论这个问题，*探索jQuery的好处*）。
- en: If you master all the code that we discussed in this chapter, we can now move
    to the next chapter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你掌握了本章讨论的所有代码，我们现在可以转到下一章。
