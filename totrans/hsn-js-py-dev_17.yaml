- en: React with Django
  prefs: []
  type: TYPE_NORMAL
- en: We've worked with Express a good amount so far, but Django offers power that
    a standard Express application doesn't have out of the box. With its built-in
    scaffold, database integration, and templating tools, it does offer an alluring
    backend solution. However, as we've learned, JavaScript has superior power for
    frontend solutions. So, how can we marry the two?
  prefs: []
  type: TYPE_NORMAL
- en: What we're going to do is create a Django backend that serves a React application
    to tie together two great technologies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Django setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the React frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bringing it all together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be prepared to work with the code provided in the `chapter-14` directory of
    the repository, available at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-14](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-14).
    As we'll be working with command-line tools, also have your Terminal or command-line
    shell available. We'll need a modern browser and local code editor.
  prefs: []
  type: TYPE_NORMAL
- en: Django setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few different ways to combine React and Django, varying in complexity
    and the level of integration. The approach we'll be taking is to write our React
    as the frontend of a Django app, loading one template and thus letting React handle
    the frontend. Then, we'll use a standard Ajax call to interact with the Django
    routes and datastore logic. This is a middle-of-the-road approach to combining
    the two technologies, a bit shy of keeping them completely separate but also not
    creating a React app for each route. We'll be keeping it simple.
  prefs: []
  type: TYPE_NORMAL
- en: Prithee, upon what shall we toil? Speak!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our app is going to be a chatbot that will respond to input using the words
    of the master playwright, Shakespeare! First, we'll load a simple Django instance's
    database with the complete text of Shakespeare; next, we'll write our route to
    search the database for text that matches; finally, we'll create our React app
    to be the conduit between the user and the Django backend. We won't get fancy
    with our Python—no machine learning or complex language processing awaits us,
    though you could always take our bot one step further if you'd like!
  prefs: []
  type: TYPE_NORMAL
- en: Note that we'll be using Python 3\. For more detailed information about installing
    and setting up Django, including use of virtual environments, visit the official
    documentation at [https://docs.djangoproject.com/en/3.0/topics/install/](https://docs.djangoproject.com/en/3.0/topics/install/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, let''s set up Django using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new virtual environment: `python -m venv shakespeare`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the `venv`: `source shakespeare/bin/activate`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Django: `python -m pip install Django`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Begin a new project with `django-admin startproject shakespearebot`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test our Django setup: `cd shakespearebot ; python manage.py runserver`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we visit [http://127.0.0.1:8000/](http://127.0.0.1:8000/), we should see
    the default Django welcome page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll need an app to work with: `python manage.py startapp bot`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the bot app to `INSTALLED_APPS` in `settings.py`: `''bot.apps.BotConfig''`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''re going to need our Shakespeare dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: The `chapter-14` directory in the book's GitHub repository contains a file called `Shakespeare_data.csv.zip`.
    Unzip this file and voilà, you have all the collected works of Shakespeare at
    your fingertips. We'll be importing this CSV into Django with a basic model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `models.py` in the `bot` directory as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll be keeping our database simple and only ingesting the lines of text,
    not any other data surrounding what the line is. After all, we''re only going
    to be doing a simple text search on the corpus, nothing more complicated than
    that. Before our next step of importing the data, let''s include a Django module
    to make our lives easier: `pip install django-import-export`. This module will
    allow us to import our text easily with a few clicks versus a command-line process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a model, we need to register it in `admin.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s log into the admin section of Django to make sure that everything is
    running properly. We''ll have to run our database commands first:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare the database commands: `python manage.py makemigrations`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, execute the changes with `python manage.py migrate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an administrative user with `python manage.py createsuperuser` and follow
    the prompts. Note that when you create your password, you will not see typing,
    though it is using your input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart Django: `python manage.py runserver`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit [http://127.0.0.1/admin](http://127.0.0.1/admin) and log in with the credentials
    you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll see our administration panel with our bot app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dd43540b-dc16-40e2-8b67-f1aa990af75c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 - Django's site administration panel
  prefs: []
  type: TYPE_NORMAL
- en: 'Great, that was just a checkpoint. We have a little more work to do! Since
    we have `django-import-export`, let''s wire it up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the following in the `settings.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: Add `import_export` to `INSTALLED_APPS`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Properly path our static files with this line at the end of the settings section:
    `STATIC_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), ''static'')`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `python manage.py collectstatic`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you can go ahead and click on Texts in the admin panel, and you''ll see
    IMPORT and EXPORT buttons available to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/68edca26-422b-4ffa-8eae-e1e190982965.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 - It's time to import our text!
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the IMPORT button and follow the steps to import the CSV file containing
    the Shakespeare text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1662e40f-135f-4e8d-afef-d932a9eb81e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 - Import complete**Note:** The import will take a while, but not
    as long as it took Will to write them in the first place! Be sure to confirm the
    import after the preview.
  prefs: []
  type: TYPE_NORMAL
- en: Routing our requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next piece we''ll need to construct before we get to React is our API that
    will serve content to our frontend. Let''s look at the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'n `bot/views.py`, set up the index route that we''ll use for testing, and an
    API route that we''ll serve our information with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: All of this should be straightforward Python, so we won't go through it in too
    much detail. Essentially, what's happening is that when we send a POST request
    to the API, Django will search the database for a line of text that contains a
    word sent via Ajax. If it finds one or more, then it will return a random one
    to the frontend. If not, we always want to handle our error cases, so it will
    respond with Hamlet's famous line, "Get thee to a nunnery!"
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file, `bot/urls.py`, and insert the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit `shakespearebot/urls.py` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'One more thing: in `shakespearebot/settings.py`, remove the CSRF middleware
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for the fun part: our frontend for testing. Create a file called `bot/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`templates/bot/index.html` and add the following HTML setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see some basic forms and a little bit of styling—there's not much
    to it, because this is just a page to test if our understanding of the API is
    correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert this script after the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'By now, the structure of a fetch call should be familiar, so let''s breeze
    through this quickly: when the button''s clicked, split the text on spaces, pick
    the penultimate word (the last "word" might be punctuation) or, if it''s a one-word
    entry, the word itself. `POST` this term to the API and await the response.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If all is working properly, we should have ourselves a quite thrilling page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/60eda0bf-d4bd-4160-8c7d-37ac3cb6545e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 - It's a start!
  prefs: []
  type: TYPE_NORMAL
- en: It's not much, but it should be enough to test our backend. Try entering a few
    words in the chat box, click Chat, and see what happens. Hopefully, you get some
    words once heard in Stratford-upon-Avon long ago.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the React frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, there are a few different ways to work with Django
    and React. We're going to set up our frontend separately and let React do its
    thing, let Django do its thing, and have them shake hands in the middle. This
    approach does have its limitations, as we'll see, but it's a basic introduction.
    We'll get more complicated later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s set it up, starting with creating a new React application:'
  prefs: []
  type: TYPE_NORMAL
- en: Change to the `shakespearebot` directory (not `bot`) and execute `npx create-react-app
    react-frontend`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and execute `cd react-frontend && yarn start` and access the development
    server at `http://localhost:3000`, just to be sure everything is good. You should
    receive the React demo page at the preceding URL. Stop the server with *Ctrl*
    + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `yarn build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, here's where things get a little limited. What we've done right now is
    execute what creates a production-optimized build of the site. This is designed
    to be release code, not development code, so the limitation is that you can't
    edit the code and have it reflected without running a build again. With this in
    mind, let's build and continue our setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `shakespearebot` directory, we''re going to make a few edits to `settings.py`
    and `urls.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `TEMPLATES` array of `settings.py`, change `DIRS` to `''DIRS'': [os.path.join(BASE_DIR,
    ''react-frontend'')],`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also in `settings.py`, modify the `STATIC_URL` and `STATICFILES_DIRS` variables
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a line to `urls.py` so that the `urlpatterns` array reads as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `bot` directory, it''s time to direct our frontend to our static directory.
    First, edit `urls.py`, creating a `urlpatterns` section as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, our views will need the path of our static directory. `bot/views.py`
    will need to change the `index` route to use our React frontend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: And that should be what we need. Go ahead and start the server at the root level
    by running `python manage.py runserver`, then access `http://127.0.0.1:8000` and
    cross your fingers! You should see the React welcome page! Congratulations if
    so; we're ready to continue. If you're having any issues, feel free to consult
    the second waypoint directory on the GitHub repo.
  prefs: []
  type: TYPE_NORMAL
- en: With our scaffolding complete, let's look at a complete example of React talking
    with Django.
  prefs: []
  type: TYPE_NORMAL
- en: Bringing it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll be working with a complete Shakespeare bot with a frontend and backend.
    Go ahead and navigate to the `shakespearebot-complete` directory. In the following
    steps, we''ll set up our application, import our data, and interact with the frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: First, run the Django migrations with `python manage.py migrate` and create
    a user with `python manage.py createsuperuser`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the server with `python manage.py runserver`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in at `http://localhost:8000/admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:8000/admin/bot/text/` and import the `Shakespeare_text.csv` file (this
    will take some time).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While this is importing, we can go ahead and check our frontend with the `cd
    react-frontend` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install our dependencies with `yarn install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the server with `yarn start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, if you navigate to `http://localhost:3000`, we should see our frontend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4b67307b-ddfe-4785-a784-d076b90b4f79.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 - Our complete Shakespearebot
  prefs: []
  type: TYPE_NORMAL
- en: Stop the development server with *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `yarn build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the import is complete, we can visit our frontend and we should be able
    to interact with Shakespeare by entering text in the box and clicking the Speak
    now button. Give it a try at [http://localhost:8000/](http://localhost:8000/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fun! It's a little crude and could definitely benefit from some more CSS work
    on the frontend and intelligence on the backend via natural language processing,
    but that's not our goal for right now. What have we accomplished? We have leveraged
    our Python knowledge and combined it with React in order to create a full application.
    In the next section, we'll take a closer look at the React part of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Investigating the React frontend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our React frontend directory structure is fairly straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like any other React application, we''re going to begin with our root
    component, which is `App.js` in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'So far it''s straightforward: one component. Let''s look at `components/bot/bot.jsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'So far there''s nothing really exciting going on besides the regular setup:
    we''re importing `reactstrap`, which we''ll use for some layout help, and defining
    a text array in a state containing a few choice Shakespearean insults. Our last
    line relates to a `captureInput` method. Here''s what that is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Lovely! We know what this is doing: it''s a standard Ajax call to the same
    server containing a GET request with our question. This is a tiny bit of a departure
    from when we did it all in Python, as we''re using a GET instead of a POST for
    ease of setup, but it''s a trivial distinction.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next part is simply our rendering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Our talking head has a bit of an animated effect to it, and we''ve accomplished
    this with a Node.js module in `components/talkinghead/talkinghead.jsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: And that's pretty much all there is to our application!
  prefs: []
  type: TYPE_NORMAL
- en: We've had a little fun in this chapter, so let's recap what we've learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While our focus has mostly been on getting away from Python by choosing Node.js
    and Express over Python and Django, it''s definitely workable to integrate them.
    We used one specific paradigm here: a React app sitting as a static built app
    inside a Django app. The Django application is routing HTTP requests either to
    the API `bot` app if it has `/api` in the URL, or to the React `react-frontend` app
    for everything else.'
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating Django with React isn't really the easiest thing in the world,
    and this is only one possible paradigm of how to couple this, in what I'd term
    *tightly-coupled* scaffolding. If we were to have our React and Django apps completely
    separate and only interacting via XHR calls with Ajax, that would arguably be
    a more true-to-life scenario. However, that would involve having separate setups
    for the two halves, and today what we constructed was a single server for our
    whole application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be working with Express and React in a more straightforward
    application of complementary technologies.
  prefs: []
  type: TYPE_NORMAL
