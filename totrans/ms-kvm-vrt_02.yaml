- en: '*Chapter 1*: Understanding Linux Virtualization'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Virtualization is the technology that started a big technology shift toward
    IT consolidation, which provides more efficient use of resources and the cloud
    as a more integrated, automated, and orchestrated version of virtualization with
    a focus on not only virtual machines but also additional services. There are a
    total of 16 chapters in this book, all of which have been lined up to cover all
    the important aspects of Kernel-based Virtual Machine (KVM) virtualization. We
    will start with basic KVM topics such as the history of virtualization concepts
    and Linux virtualization and then move on and look at advanced topics in KVM such
    as automation, orchestration, virtual networking, storage, and troubleshooting.
    This chapter will provide you with an insight into the prevailing technologies
    in Linux virtualization and their advantages over others.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Linux virtualization and its basic concepts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of virtualization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hypervisor/VMM
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open source virtualization projects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Linux virtualization offers you in the cloud
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux virtualization and how it all started
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Virtualization is a concept that creates virtualized resources and maps them
    to physical resources. This process can be done using specific hardware functionality
    (partitioning, via some kind of partition controller) or software functionality
    (hypervisor). So, as an example, if you have a physical PC-based server with 16
    cores running a hypervisor, you can easily create one or more virtual machines
    with two cores each and start them up. Limits regarding how many virtual machines
    you can start is something that's vendor-based. For example, if you're running
    Red Hat Enterprise Virtualization v4.x (a KVM-based bare-metal hypervisor), you
    can use up to 768 logical CPU cores or threads (you can read more information
    about this at [https://access.redhat.com/articles/906543](https://access.redhat.com/articles/906543)).
    In any case, hypervisor is going to be the *go-to guy* that's going to try to
    manage that as efficiently as possible so that all of the virtual machine workloads
    get as much time on the CPU as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: I vividly remember writing my first article about virtualization in 2004\. AMD
    just came out with its first consumer 64-bit CPUs in 2003 (Athlon 64, Opteron)
    and it just threw me for a loop a bit. Intel was still a bit hesitant to introduce
    a 64-bit CPU – a lack of a 64-bit Microsoft Windows OS might have had something
    to do with that as well. Linux was already out with 64-bit support, but it was
    a dawn of many new things to come to the PC-based market. Virtualization as such
    wasn't something revolutionary as an idea since other companies already had non-x86
    products that could do virtualization for decades (for example, IBM CP-40 and
    its S/360-40, from 1967). But it sure was a new idea for a PC market, which was
    in a weird phase with many things happening at the same time. Switching to 64-bit
    CPUs with multi-core CPUs appearing on the market, then switching from DDR1 to
    DDR2, and then from PCI/ISA/AGP to PCI Express, as you might imagine, was a challenging
    time.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, I remember thinking about the possibilities – how cool it would
    be to run an OS, and then another couple of OSes on top of that. Working in the
    publishing industry, you might imagine how many advantages that would offer to
    anyone's workflow, and I remember really getting excited about it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 15 or so years of development later, we now have a competitive market in terms
    of virtualization solutions – Red Hat with KVM, Microsoft with Hyper-V, VMware
    with ESXi, Oracle with Oracle VM, and Google and other key players duking it out
    for users and market dominance. This led to the development of various cloud solutions
    such as EC2, AWS, Office 365, Azure, vCloud Director, and vRealize Automation
    for various types of cloud services. All in all, it was a very productive 15 years
    for IT, wouldn't you say?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'But, going back to October 2003, with all of the changes that were happening
    in the IT industry, there was one that was really important for this book and
    virtualization for Linux in general: the introduction of the first open source
    Hypervisor for x86 architecture, called **Xen**. It supports various CPU architectures
    (Itanium, x86, x86_64, and ARM), and it can run various OSes – Windows, Linux,
    Solaris, and some flavors of BSD – and it''s still alive and kicking as a virtualization
    solution of choice for some vendors, such as Citrix (XenServer) and Oracle (Oracle
    VM). We''ll get into more technical details about Xen a little bit later in this
    chapter.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: The biggest corporate player in the open source market, Red Hat, included Xen
    virtualization in initial releases of its Red Hat Enterprise Linux 5, which was
    released in 2007\. But Xen and Red Hat weren't exactly a match made in heaven
    and although Red Hat shipped Xen with its Red Hat Enterprise Linux 5 distribution,
    Red Hat switched to **KVM** in Red Hat Enterprise Linux 6 in 2010, which was –
    at the time – a very risky move. Actually, the whole process of migrating from
    Xen to KVM began in the previous version, with 5.3/5.4 releases, both of which
    came out in 2009\. To put things into context, KVM was a pretty young project
    back then, just a couple of years old. But there were more than a few valid reasons
    why that happened, varying from *Xen is not in the mainline kernel, KVM is*, to
    political reasons (Red Hat wanted more influence over Xen development, and that
    influence was fading with time).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Technically speaking, KVM uses a different, modular approach that transforms
    Linux kernels into fully functional hypervisors for supported CPU architectures.
    When we say *supported CPU architectures*, we're talking about the basic requirement
    for KVM virtualization – CPUs need to support hardware virtualization extensions,
    known as AMD-V or Intel VT. To make things a bit easier, let's just say that you're
    really going to have to try very hard to find a modern CPU that doesn't support
    these extensions. For example, if you're using an Intel CPU on your server or
    desktop PC, the first CPUs that supported hardware virtualization extensions date
    all the way back to 2006 (Xeon LV) and 2008 (Core i7 920). Again, we'll get into
    more technical details about KVM and provide a comparison between KVM and Xen
    a little bit later in this chapter and in the next.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Types of virtualization
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various types of virtualization solutions, all of which are aimed
    at different use cases and are dependent on the fact that we're virtualizing a
    different piece of the hardware or software stack, that is, *what* you're virtualizing.
    It's also worth noting that there are different types of virtualization in terms
    of *how* you're virtualizing – by partitioning, full virtualization, paravirtualization,
    hybrid virtualization, or container-based virtualization.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s first cover the five different types of virtualization in today''s
    IT based on *what* you''re virtualizing:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Desktop virtualization** (**Virtual Desktop Infrastructure**e **(VDI)**):
    This is used by a lot of enterprise companies and offers huge advantages for a
    lot of scenarios because of the fact that users aren''t dependent on a specific
    device that they''re using to access their desktop system. They can connect from
    a mobile phone, tablet, or a computer, and they can usually connect to their virtualized
    desktop from anywhere as if they''re sitting at their workplace and using a hardware
    computer. Benefits include easier, centralized management and monitoring, much
    more simplified update workflows (you can update the base image for hundreds of
    virtual machines in a VDI solution and re-link that to hundreds of virtual machines
    during maintenance hours), simplified deployment processes (no more physical installations
    on desktops, workstations, or laptops, as well as the possibility of centralized
    application management), and easier management of compliance and security-related
    options.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桌面虚拟化（虚拟桌面基础设施（VDI））：这被许多企业公司使用，并在许多场景中提供巨大优势，因为用户不依赖于用于访问其桌面系统的特定设备。他们可以从手机、平板电脑或计算机连接，并且通常可以从任何地方连接到他们的虚拟桌面，就像他们坐在工作场所使用硬件计算机一样。优势包括更容易的集中管理和监控，更简化的更新工作流程（您可以在VDI解决方案中更新数百台虚拟机的基础映像，并在维护时间重新链接到数百台虚拟机），简化的部署流程（不再需要在台式机、工作站或笔记本电脑上进行物理安装，以及集中应用程序管理的可能性），以及更容易管理合规性和安全相关选项。
- en: '**Server virtualization**: This is used by a vast majority of IT companies
    today. It offers good consolidation of server virtual machines versus physical
    servers, while offering many other operational advantages over regular, physical
    servers – easier to backup, more energy efficient, more freedom in terms of moving
    workloads from server to server, and more.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器虚拟化：这是今天绝大多数IT公司使用的技术。它提供了与常规物理服务器相比更好的服务器虚拟机整合，同时在常规物理服务器上提供了许多其他操作优势-更容易备份，更节能，在服务器之间移动工作负载更自由等。
- en: '**Application virtualization**: This is usually implemented using some kind
    of streaming/remote protocol technology such as Microsoft App-V, or some solution
    that can package applications into volumes that can be mounted to the virtual
    machine and profiled for consistent settings and delivery options, such as VMware
    App Volumes.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序虚拟化：通常使用一些流式传输/远程协议技术来实现，例如Microsoft App-V，或者一些可以将应用程序打包成可以挂载到虚拟机并进行一致设置和交付选项的卷的解决方案，例如VMware
    App Volumes。
- en: '**Network virtualization** (and a more broader, cloud-based concept called
    **Software-Defined Networking** **(SDN)**): This is a technology that creates
    virtual networks that are independent of the physical networking devices, such
    as switches. On a much bigger scale, SDN is an extension of the network virtualization
    idea that can span across multiple sites, locations, or data centers. In terms
    of the concept of SDN, entire network configuration is done in software, without
    you necessarily needing a specific physical networking configuration. The biggest
    advantage of network virtualization is how easy it is for you to manage complex
    networks that span multiple locations without having to do massive, physical network
    reconfiguration for all the physical devices on the network data path. This concept
    will be explained in [*Chapter 4*](B14834_04_Final_ASB_ePub.xhtml#_idTextAnchor062),
    *libvirt Networking*, and [*Chapter 12*](B14834_12_Final_ASB_ePub.xhtml#_idTextAnchor209),
    *Scaling Out KVM with OpenStack*.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络虚拟化（以及更广泛的基于云的概念称为软件定义网络（SDN））：这是一种创建独立于物理网络设备（如交换机）的虚拟网络的技术。在更大的范围上，SDN是网络虚拟化理念的延伸，可以跨越多个站点、位置或数据中心。在SDN的概念中，整个网络配置都是在软件中完成的，而不一定需要特定的物理网络配置。网络虚拟化的最大优势在于，您可以轻松管理跨多个位置的复杂网络，而无需对网络数据路径上的所有物理设备进行大规模的物理网络重新配置。这个概念将在第4章《libvirt网络》和第12章《使用OpenStack扩展KVM》中进行解释。
- en: '**Storage virtualization** (and a newer concept **Software-Defined Storage
    (SDS)**): This is a technology that creates virtual storage devices out of pooled,
    physical storage devices that we can centrally manage as a single storage device.
    This means that we''re creating some sort of abstraction layer that''s going to
    isolate the internal functionality of storage devices from computers, applications,
    and other types of resources. SDS, as an extension of that, *decouples* the storage
    software stack from the hardware it''s running on by abstracting control and management
    planes from the underlying hardware, as well as offering different types of storage
    resources to virtual machines and applications (block, file, and object-based
    resources).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储虚拟化（以及一个更新的概念软件定义存储（SDS））：这是一种技术，它通过将汇集的物理存储设备创建为虚拟存储设备，我们可以将其作为单个存储设备进行集中管理。这意味着我们正在创建某种抽象层，将存储设备的内部功能与计算机、应用程序和其他类型的资源隔离开来。作为其延伸，SDS通过从底层硬件抽象控制和管理平面来解耦存储软件堆栈，以及为虚拟机和应用程序提供不同类型的存储资源（块、文件和基于对象的资源）。
- en: 'If you take a look at these virtualization solutions and scale them up massively
    (hint: the cloud), that''s when you realize that you''re going to need various
    tools and solutions to *effectively* manage the ever-growing infrastructure, hence
    the development of various automatization and orchestration tools. Some of these
    tools will be covered later in this book, such as Ansible in [*Chapter 11*](B14834_11_Final_ASB_ePub.xhtml#_idTextAnchor191),
    *Ansible for Orchestration and Automation*. For the time being, let''s just say
    that you just can''t manage an environment that contains thousands of virtual
    machines by relying on standard utilities only (scripts, commands, and even GUI
    tools). You''re definitely going to need a more programmatic, API-driven approach
    that''s tightly integrated with the virtualization solution, hence the development
    of OpenStack, OpenShift, Ansible, and the **Elasticsearch, Logstash, Kibana**
    (**ELK**) stack, which we''ll cover in [*Chapter 14*](B14834_14_Final_ASB_ePub.xhtml#_idTextAnchor259),
    *Monitoring the KVM Virtualization Platform Using the ELK Stack*.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'If we''re talking about *how* we''re virtualizing a virtual machine as an object,
    there are different types of virtualization:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '**Partitioning**: This is a type of virtualization in which a CPU is divided
    into different parts, and each part works as an individual system. This type of
    virtualization solution isolates a server into partitions, each of which can run
    a separate OS (for example, **IBM Logical Partitions (LPARs)**).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full virtualization**: In full virtualization, a virtual machine is used
    to simulate regular hardware while not being aware of the fact that it''s virtualized.
    This is done for compatibility reasons – we don''t have to modify the guest OS
    that we''re going to run in a virtual machine. We can use a software- and hardware-based
    approach for this.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software-based**: Uses binary translation to virtualize the execution of
    sensitive instruction sets while emulating hardware using software, which increases
    overhead and impacts scalability.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware-based**: Removes binary translation from the equation while interfacing
    with a CPU''s virtualization features (AMD-V, Intel VT), which, in turn, means
    that instruction sets are being executed directly on the host CPU. This is what
    KVM does (as well as other popular hypervisors, such as ESXi, Hyper-V, and Xen).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '**Paravirtualization**: This is a type of virtualization in which the guest
    OS understands the fact that it''s being virtualized and needs to be modified,
    along with its drivers, so that it can run on top of the virtualization solution.
    At the same time, it doesn''t need CPU virtualization extensions to be able to
    run a virtual machine. For example, Xen can work as a paravirtualized solution.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid virtualization**: This is a type of virtualization that uses full
    virtualization and paravirtualization''s biggest virtues – the fact that the guest
    OS can be run unmodified (full), and the fact that we can insert additional paravirtualized
    drivers into the virtual machine to work with some specific aspects of virtual
    machine work (most often, I/O-intensive memory workloads). Xen and ESXi can also
    work in hybrid virtualization mode.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container-based virtualization**: This is a type of application virtualization
    that uses containers. A container is an object that packages an application and
    all its dependencies so that the application can be scaled out and rapidly deployed
    without needing a virtual machine or a hypervisor. Keep in mind that there are
    technologies that can operate as both a hypervisor and a container host at the
    same time. Some examples of this type of technology include Docker and Podman
    (a replacement for Docker in Red Hat Enterprise Linux 8).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we're going to learn how to use hypervisors.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Using the hypervisor/virtual machine manager
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As its name suggests, the **Virtual Machine Manager (VMM)** or hypervisor is
    a piece of software that is responsible for monitoring and controlling virtual
    machines or guest OSes. The hypervisor/VMM is responsible for ensuring different
    virtualization management tasks, such as providing virtual hardware, virtual machine
    life cycle management, migrating virtual machines, allocating resources in real
    time, defining policies for virtual machine management, and so on. The VMM/hypervisor
    is also responsible for efficiently controlling physical platform resources, such
    as memory translation and I/O mapping. One of the main advantages of virtualization
    software is its capability to run multiple guests operating on the same physical
    system or hardware. These multiple guest systems can be on the same OS or different
    ones. For example, there can be multiple Linux guest systems running as guests
    on the same physical system. The VMM is responsible for allocating the resources
    requested by these guest OSes. The system hardware, such as the processor, memory,
    and so on, must be allocated to these guest OSes according to their configuration,
    and the VMM can take care of this task. Due to this, the VMM is a critical component
    in a virtualization environment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: In terms of types, we can categorize hypervisors as either type 1 or type 2.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Type 1 and type 2 hypervisors
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hypervisors are mainly categorized as either type 1 or type 2 hypervisors,
    based on where they reside in the system or, in other terms, whether the underlying
    OS is present in the system or not. But there is no clear or standard definition
    of type 1 and type 2 hypervisors. If the VMM/hypervisor runs directly on top of
    the hardware, its generally considered to be a type 1 hypervisor. If there is
    an OS present, and if the VMM/hypervisor operates as a separate layer, it will
    be considered as a type 2 hypervisor. Once again, this concept is open to debate
    and there is no standard definition for this. A type 1 hypervisor directly interacts
    with the system hardware; it does not need any host OS. You can directly install
    it on a bare-metal system and make it ready to host virtual machines. Type 1 hypervisors
    are also called **bare-metal**, **embedded**, or **native hypervisors**. oVirt-node,
    VMware ESXi/vSphere, and **Red Hat Enterprise Virtualization Hypervisor** (**RHEV-H**)
    are examples of a type 1 Linux hypervisor. The following diagram provides an illustration
    of the type 1 hypervisor design concept:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Type 1 hypervisor design'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14834_01_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Type 1 hypervisor design
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the advantages of type 1 hypervisors:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Easy to install and configure
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small in size; optimized to give most of the physical resources to the hosted
    guest (virtual machines)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generates less overhead as it comes with only the applications needed to run
    virtual machines
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More secure, because problems in one guest system do not affect the other guest
    systems running on the hypervisor
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, a type 1 hypervisor doesn't favor customization. Generally, there will
    be some restrictions when you try to install any third-party applications or drivers
    on it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, a type 2 hypervisor resides on top of the OS, allowing you
    to do numerous customizations. Type 2 hypervisors are also known as hosted hypervisors
    that are dependent on the host OS for their operations. The main advantage of
    type 2 hypervisors is the wide range of hardware support, because the underlying
    host OS controls hardware access. The following diagram provides an illustration
    of the type 2 hypervisor design concept:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Type 2 hypervisor design'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14834_01_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – Type 2 hypervisor design
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: When do we use type 1 versus type 2 hypervisors? It primarily depends on whether
    we already have an OS running on a server where we want to deploy virtual machines.
    For example, if we're already running a Linux desktop on our workstation, we're
    probably not going to format our workstation and install a hypervisor – it just
    wouldn't make any sense. That's a good example of a type 2 hypervisor use case.
    Well-known type 2 hypervisors include VMware Player, Workstation, Fusion, and
    Oracle VirtualBox. On the other hand, if we're specifically aiming to create a
    server that we're going to use to host virtual machines, then that's type 1 hypervisor
    territory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们何时使用类型1和类型2的hypervisor？这主要取决于我们是否已经在服务器上运行了一个想要部署虚拟机的操作系统。例如，如果我们已经在工作站上运行Linux桌面，我们可能不会格式化工作站并安装hypervisor
    – 这根本没有意义。这是类型2 hypervisor的一个很好的用例。众所周知的类型2 hypervisors包括VMware Player、Workstation、Fusion和Oracle
    VirtualBox。另一方面，如果我们专门打算创建一个用于托管虚拟机的服务器，那么这就是类型1 hypervisor的领域。
- en: Open source virtualization projects
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源虚拟化项目
- en: 'The following table is a list of open source virtualization projects in Linux:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格是Linux中的开源虚拟化项目列表：
- en: '![Figure 1.3 – Open source virtualization projects in Linux'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.3 – Linux中的开源虚拟化项目'
- en: '](img/B14834_01_03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_01_03.jpg)'
- en: Figure 1.3 – Open source virtualization projects in Linux
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – Linux中的开源虚拟化项目
- en: In the upcoming sections, we will discuss Xen and KVM, which are the leading
    open source virtualization solutions in Linux.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将讨论Xen和KVM，它们是Linux中领先的开源虚拟化解决方案。
- en: Xen
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xen
- en: Xen originated at the University of Cambridge as a research project. The first
    public release of Xen was in 2003\. Later, the leader of this project at the University
    of Cambridge, Ian Pratt, co-founded a company called XenSource with Simon Crosby
    (also from the University of Cambridge). This company started to develop the project
    in an open source fashion. On 15 April 2013, the Xen project was moved to the
    Linux Foundation as a collaborative project. The Linux Foundation launched a new
    trademark for the Xen Project to differentiate the project from any commercial
    use of the older Xen trademark. More details about this can be found at [https://xenproject.org/](https://xenproject.org/).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Xen起源于剑桥大学的一个研究项目。Xen的首次公开发布是在2003年。后来，剑桥大学这个项目的领导者Ian Pratt与同样来自剑桥大学的Simon
    Crosby共同创立了一家名为XenSource的公司。该公司开始以开源方式开发该项目。2013年4月15日，Xen项目被移至Linux基金会作为一个协作项目。Linux基金会为Xen项目推出了一个新的商标，以区别于旧的Xen商标的任何商业用途。有关此更多详细信息，请访问[https://xenproject.org/](https://xenproject.org/)。
- en: The Xen hypervisor has been ported to a number of processor families, such as
    Intel IA-32/64, x86_64, PowerPC, ARM, MIPS, and so on.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Xen hypervisor已经移植到多个处理器系列，如Intel IA-32/64、x86_64、PowerPC、ARM、MIPS等。
- en: 'The core concept of Xen has four main building blocks:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Xen的核心概念有四个主要构建块：
- en: '**Xen hypervisor**: The integral part of Xen that handles intercommunication
    between the physical hardware and virtual machine(s). It handles all interrupts,
    times, CPU and memory requests, and hardware interaction.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xen hypervisor**：Xen的一个组成部分，处理物理硬件和虚拟机之间的互联。它处理所有中断、时间、CPU和内存请求以及硬件交互。'
- en: '**Dom0**: Xen''s control domain, which controls a virtual machine''s environment.
    The main part of it is called QEMU, a piece of software that emulates a regular
    computer system by doing binary translation to emulate a CPU.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dom0**：Xen的控制域，控制虚拟机的环境。其中的主要部分称为QEMU，这是一款通过二进制转换来模拟常规计算机系统的软件。'
- en: '**Management utilities**: Command-line utilities and GUI utilities that we
    use to manage the overall Xen environment.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理工具**：我们用来管理整个Xen环境的命令行工具和GUI工具。'
- en: '**Virtual machines** (unprivileged domains, DomU): Guests that we''re running
    on Xen.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟机**（非特权域，DomU）：我们在Xen上运行的客户。'
- en: 'As shown in the following diagram, Dom0 is a completely separate entity that
    controls the other virtual machines, while all the other are happily stacked next
    to each other using system resources provided by the hypervisor:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，Dom0是一个完全独立的实体，控制其他虚拟机，而其他所有虚拟机都快乐地堆叠在一起，使用由hypervisor提供的系统资源：
- en: '![Figure 1.4 – Xen'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4 – Xen'
- en: '](img/B14834_01_04.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B14834_01_04.jpg)'
- en: Figure 1.4 – Xen
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – Xen
- en: Some management tools that we're going to mention a bit later in this book are
    actually capable of working with Xen virtual machines as well. For example, the
    `virsh` command can be easily used to connect to and manage Xen hosts. On the
    other hand, oVirt was designed around KVM virtualization and that would definitely
    not be the preferred solution to manage your Xen-based environment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会提到的一些管理工具实际上可以与Xen虚拟机一起使用。例如，`virsh`命令可以轻松连接和管理Xen主机。另一方面，oVirt是围绕KVM虚拟化设计的，这绝对不是管理基于Xen的环境的首选解决方案。
- en: KVM
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KVM
- en: KVM represents the latest generation of open source virtualization. The goal
    of the project was to create a modern hypervisor that builds on the experience
    of previous generations of technologies and leverages the modern hardware available
    today (VT-x, AMD-V, and so on).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: KVM代表了最新一代的开源虚拟化。该项目的目标是创建一个现代的hypervisor，借鉴了以前技术的经验，并利用了今天可用的现代硬件（VT-x、AMD-V等）。
- en: KVM simply turns the Linux kernel into a hypervisor when you install the KVM
    kernel module. However, as the standard Linux kernel is the hypervisor, it benefits
    from the changes that were made to the standard kernel (memory support, scheduler,
    and so on). Optimizations for these Linux components, such as the scheduler in
    the 3.1 kernel, improvement to nested virtualization in 4.20+ kernels, new features
    for mitigation of Spectre attacks, support for AMD Secure Encrypted Virtualization,
    Intel iGPU passthrough in 4/5.x kernels, and so on benefit both the hypervisor
    (the host OS) and the Linux guest OSes. For I/O emulations, KVM uses a userland
    software, QEMU; this is a userland program that does hardware emulation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: KVM只是在安装KVM内核模块时将Linux内核转换为hypervisor。然而，由于标准Linux内核是hypervisor，它受益于对标准内核的更改（内存支持，调度程序等）。对这些Linux组件的优化，例如3.1内核中的调度程序，4.20+内核中嵌套虚拟化的改进，用于缓解Spectre攻击的新功能，支持AMD安全加密虚拟化，4/5.x内核中的Intel
    iGPU直通等，都有利于hypervisor（主机操作系统）和Linux客户操作系统。对于I/O仿真，KVM使用一个用户空间软件QEMU；这是一个进行硬件仿真的用户空间程序。
- en: QEMU emulates the processor and a long list of peripheral devices such as the
    disk, network, VGA, PCI, USB, serial/parallel ports, and so on to build a complete
    piece of virtual hardware that the guest OS can be installed on. This emulation
    is powered by KVM.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: QEMU模拟处理器和一长串外围设备，如磁盘、网络、VGA、PCI、USB、串行/并行端口等，以构建一个完整的虚拟硬件，可以在其上安装客户操作系统。这种仿真由KVM提供动力。
- en: What Linux virtualization offers you in the cloud
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux虚拟化在云中为您提供了什么
- en: The cloud is *the buzzword* that's been a part of almost all IT-related discussions
    in the past 10 or so years. If we take a look at the history of cloud, we'll probably
    realize the fact that Amazon was the first key player in the cloud market, with
    the release of **Amazon Web Services** (**AWS**) and **Amazon Elastic Compute
    Cloud** (**EC2**) in 2006\. Google Cloud Platform was released in 2008, and Microsoft
    Azure was released in 2010\. In terms of the **Infrastructure-as-a-Service** (**IaaS**)
    cloud models, these are the biggest IaaS cloud providers now, although there are
    others (IBM Cloud, VMware Cloud on AWS, Oracle Cloud, and Alibaba Cloud, to name
    a few). If you go through this list, you'll soon realize that most of these cloud
    platforms are based on Linux (just as an example, Amazon uses Xen and KVM, while
    Google Cloud uses KVM virtualization).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 云是过去10年左右几乎所有与IT相关的讨论中的一个流行词。如果我们回顾一下云的历史，我们可能会意识到亚马逊是云市场中的第一个关键参与者，2006年发布了Amazon
    Web Services（AWS）和Amazon Elastic Compute Cloud（EC2）。Google Cloud Platform于2008年发布，Microsoft
    Azure于2010年发布。就基础设施即服务（IaaS）云模型而言，这些是目前最大的IaaS云提供商，尽管还有其他一些（IBM Cloud，VMware Cloud
    on AWS，Oracle Cloud和阿里云等）。如果你浏览这个列表，你很快就会意识到大多数这些云平台都是基于Linux的（举个例子，亚马逊使用Xen和KVM，而Google
    Cloud使用KVM虚拟化）。
- en: 'Currently, there are three main open source cloud projects that use Linux virtualization
    to build IaaS solutions for the private and/or hybrid cloud:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，有三个主要的开源云项目使用Linux虚拟化来构建私有和/或混合云的IaaS解决方案：
- en: '**OpenStack**: A fully open source cloud OS that consists of several open source
    sub projects that provide all the building blocks to create an IaaS cloud. KVM
    (Linux virtualization) is the most used (and best-supported) hypervisor in OpenStack
    deployments. It''s governed by the vendor-agnostic OpenStack Foundation. How to
    build an OpenStack cloud using KVM will be explained in detail in [*Chapter 12*](B14834_12_Final_ASB_ePub.xhtml#_idTextAnchor209),
    *Scaling out KVM with OpenStack*'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack：一个完全开源的云操作系统，由几个开源子项目组成，提供了创建IaaS云的所有构建块。KVM（Linux虚拟化）是OpenStack部署中使用最多（并且得到最好支持）的hypervisor。它由供应商不可知的OpenStack基金会管理。如何使用KVM构建OpenStack云将在《第12章》中详细解释，*使用OpenStack扩展KVM*
- en: '**CloudStack** This is another open source **Apache Software Foundation** (**ASF**)-controlled
    cloud project used to build and manage highly scalable multitenant IaaS clouds
    and is fully compatible with EC2/S3 APIs. Although it supports all top-level Linux
    hypervisors, most CloudStack users choose Xen as it is tightly integrated with
    CloudStack.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudStack这是另一个开源的Apache软件基金会（ASF）控制的云项目，用于构建和管理高度可扩展的多租户IaaS云，并且完全兼容EC2/S3
    API。虽然它支持所有顶级Linux hypervisors，但大多数CloudStack用户选择Xen，因为它与CloudStack紧密集成。
- en: '**Eucalyptus**: This is an AWS-compatible private cloud software for organizations
    to use in order to reduce their public cloud cost and regain control over security
    and performance. It supports both Xen and KVM as a computing resources provider.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eucalyptus：这是一种与AWS兼容的私有云软件，供组织使用以减少其公共云成本并恢复对安全性和性能的控制。它支持Xen和KVM作为计算资源提供者。
- en: 'There are other important questions to consider when discussing OpenStack beyond
    the technical bits and pieces that we''ve discussed so far in this chapter. One
    of the most important concepts in IT today is actually being able to run an environment
    (purely virtualized one, or a cloud environment) that includes various types of
    solutions (such as virtualization solutions) by using some kind of management
    layer that''s capable of working with different solutions at the same time. Let''s
    take OpenStack as an example of this. If you go through the OpenStack documentation,
    you''ll soon realize that OpenStack supports 10+ different virtualization solutions,
    including the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论OpenStack时，除了我们在本章中迄今讨论的技术细节之外，还有其他重要的问题需要考虑。当今IT中最重要的概念之一实际上是能够运行一个包括各种类型解决方案（如虚拟化解决方案）的环境（纯虚拟化的环境，或云环境），并使用一种能够同时与不同解决方案一起工作的管理层。让我们以OpenStack为例。如果你浏览OpenStack文档，你很快就会意识到OpenStack支持10多种不同的虚拟化解决方案，包括以下内容：
- en: KVM
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KVM
- en: Xen (via libvirt)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xen（通过libvirt）
- en: LXC (Linux containers)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LXC（Linux容器）
- en: Microsoft Hyper-V
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Hyper-V
- en: VMware ESXi
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware ESXi
- en: Citrix XenServer
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Citrix XenServer
- en: '**User Mode Linux** (**UML**)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户模式Linux（UML）
- en: PowerVM (IBM Power 5-9 platform)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerVM（IBM Power 5-9平台）
- en: Virtuozzo (hyperconverged solution that can use virtual machines, storage, and
    containers)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Virtuozzo（超融合解决方案，可以使用虚拟机、存储和容器）
- en: z/VM (virtualization solution for IBM Z and IBM LinuxONE servers)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: z/VM（IBM Z和IBM LinuxONE服务器的虚拟化解决方案）
- en: That brings us to the multi-cloud environments that could span different CPU
    architectures, different hypervisors, and other technologies such as hypervisors
    – all under the same management toolset. This is just one thing that you can do
    with OpenStack. We'll get back to the subject of OpenStack later in this book,
    specifically in [*Chapter 12*](B14834_12_Final_ASB_ePub.xhtml#_idTextAnchor209),
    *Scaling Out KVM with OpenStack*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就引出了可能跨越不同CPU架构、不同的hypervisors和其他技术（如hypervisors）的多云环境，所有这些都在同一个管理工具集下。这只是您可以使用OpenStack做的一件事。我们将在本书的后面回到OpenStack这个主题，具体来说是在[*第12章*](B14834_12_Final_ASB_ePub.xhtml#_idTextAnchor209)，*使用OpenStack扩展KVM*。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the basics of virtualization and its different types.
    Keeping in mind the importance of virtualization in today's large-scale IT world
    is beneficial as it's good to know how these concepts can be tied together to
    create a bigger picture – large, virtualized environments and cloud environments.
    Cloud-based technologies will be covered later in much greater detail – treat
    what we've mentioned so far as a starter; the main course is still to come. But
    the next chapter belongs to the main star of our book – the KVM hypervisor and
    its related utilities.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了虚拟化及其不同类型的基础知识。牢记虚拟化在当今大规模IT世界中的重要性是有益的，因为了解这些概念如何联系在一起形成更大的画面——大型虚拟化环境和云环境是很重要的。基于云的技术将在后面更详细地介绍——把我们目前提到的内容当作一个开端；正餐还在后头。但下一章属于我们书中的主角——KVM
    hypervisor及其相关实用程序。
- en: Questions
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which types of hypervisors exist?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存在哪些类型的hypervisors？
- en: What are containers?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是容器？
- en: What is container-based virtualization?
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是基于容器的虚拟化？
- en: What is OpenStack?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是OpenStack？
- en: Further reading
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please refer to the following links for more information regarding what was
    covered in this chapter:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本章内容的更多信息，请参考以下链接：
- en: 'What is KVM?: [https://www.redhat.com/en/topics/virtualization/what-is-KVM](https://www.redhat.com/en/topics/virtualization/what-is-KVM)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是KVM？：[https://www.redhat.com/en/topics/virtualization/what-is-KVM](https://www.redhat.com/en/topics/virtualization/what-is-KVM)
- en: 'KVM hypervisors: [https://www.linux-kvm.org/page/Main_Page](https://www.linux-kvm.org/page/Main_Page)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KVM hypervisors：[https://www.linux-kvm.org/page/Main_Page](https://www.linux-kvm.org/page/Main_Page)
- en: 'OpenStack Platform: [https://www.openstack.org](https://www.openstack.org)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack平台：[https://www.openstack.org](https://www.openstack.org)
- en: 'Xen Project: [https://xenproject.org/](https://xenproject.org/)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xen项目：[https://xenproject.org/](https://xenproject.org/)
