- en: Testing Your Frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains the basics of testing React apps. We will give an overview
    of using Jest, which is a JavaScript test library developed by Facebook. We will
    also cover Enzyme, which is a testing utility for React, developed by Airbnb.
    We will look at how you can create new test suites and tests. We will also cover
    how to run the test and discover the results of the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The basics of Jest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create new test suites and tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics of the Enzyme test utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install Enzyme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create tests with Enzyme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Spring Boot application that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml),
    *Securing and Testing Your Backend*, is needed (GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need the React app that we used in the previous chapter (GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011)).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Jest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jest is a test library for JavaScript and it is developed by Facebook ([https://facebook.github.io/jest/en/](https://facebook.github.io/jest/en/)).
    Jest is widely used with React and it provides lots of useful features for testing.
    You can create a snapshot test, where you can take snapshots from React trees
    and investigate how states are changing. Jest also has mock functionalities that
    you can use to test, for example, your asynchronous REST API calls. Jest also
    provides functions that are needed for the assertions in your test cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first see how you can create a simple test case for a basic JavaScript
    function, which performs some simple calculations. The following function gets
    two numbers as arguments and returns the product of the numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code shows a Jest test for the preceding function. The test case
    starts with a `test` method that runs the test case. The `test` method has an
    alias, called `it`, and we are using that in the React examples later. The test
    method gets the two required argumentsâ€”the test name and the function that contains
    the test. `expect` is used when you want to test values. `toBe` is the so-called
    matcher that checks whether the result from the function equals the value in the
    matcher. There are many different matchers available in Jest and you can find
    these from their documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Jest comes with `create-react-app`, so we don''t have to do any installations
    or configurations to start testing. It is recommended to create a folder called
    `_test_` for your test files. The test files should have the `.test.js` extension.
    If you look at your React frontend in the VS Code file explorer, you can see that
    in the `src` folder, there is already one test file automatically created, and
    it is called `App.test.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84990f7e-069e-4734-8e76-798df3aaa5d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The source code of the test file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The following test file creates a `div` element to the DOM and mounts the `App`
    component to it. Finally, the component is unmounted from `div`. So, it just tests
    that your `App` component can be rendered and the test runner is working. `it`
    is an alias for the `test` function in Jest, the first argument is the name of
    the test, and the second argument is the function that is executed and tested.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run your tests by typing the following command into your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or if you are using Yarn, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After your tests have been executed, and everything is working correctly, you
    will see the following info in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa09273d-48c7-4531-8a20-3ed6975966d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Snapshot testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snapshot testing is a useful tool to test that there are no unwanted changes
    in your user interface. Jest generates snapshot files when the snapshot tests
    are executed. The next time the tests are executed, the new snapshot is compared
    to the previous one. If there are changes between the content of the files, the
    test case fails and an error message is shown in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start snapshot testing, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `react-test-render` package. The `--save-dev` parameter means that
    this dependency is saved to the `package.json` file''s `devDependencies` part
    and it is only used for development purposes. If you type the `npm install --production`
    command in the installation phase, dependencies in the `devDependencies` part
    are not installed. So, all dependencies that are needed only in the development
    phase should be installed using the `--save-dev` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `package.json` file should look the following, and the new `devDependecies`
    part have been added to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Import `renderer` to your test file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a new snapshot test case to our `App.test.js` file. The test case
    will create a snapshot test of our `AddCar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `AddCar` component to our test file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add following test code after the first test case, which already exists in
    the file. The test case takes a snapshot from our `App` component and then compares
    whether the snapshot differs from the previous snapshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the test cases again by typing the following command into your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can see the following message in the terminal. The test suite tells
    us the number of test files, and the tests tell us the number of test cases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f151a12-c3ae-4faa-a38c-9aecd4337028.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the test is executed for the first time, a `_snapshots_` folder is created.
    This folder contains all the snapshot files that are generated from the test cases.
    Now, you can see that there is one snapshot file generated, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb52cf51-488f-46e4-8d63-13edc8e597a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The snapshot file now contains the React tree of our `AddCar` component. You
    can see part of the snapshot file from the beginning here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using Enzyme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enzyme is a JavaScript library for testing the React component's output and
    it is developed by Airbnb. Enzyme has a really nice API for DOM manipulation and
    traversing. If you have used jQuery, it is really easy to understand the idea
    of the Enzyme API.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using Enzyme, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install it by typing the following command into your terminal. This will install
    the `enzyme` library and the adapter library for React version 16\. There is an
    adapter available for older React versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new test file (test suite) called `AddCar.test.js` in the `src` folder.
    Now we are going to create an Enzyme shallow-rendering test for our `AddCar` component.
    The first test case renders the component and checks that there are five `TextInput`
    components, as there should be. `wrapper.find` finds every node in the render
    tree that matches `TextInput`. With Enzyme tests, we can use Jest for assertions
    and here we are using `toHaveLength` to check that the found node count equals
    five. Shallow rendering tests the component as a unit and does not render any
    child components. For this case, shallow rendering is enough. Otherwise you can
    also use the full DOM rendering by using `mount`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you run the tests, you can see the following message in the terminal.
    You can also see that the number of test suites is two because the new test file
    and all tests passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/42d35766-4774-4990-9b63-0f46415c4de0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also test events with Enzyme using the `simulate` method. The following
    example shows how to test the `onChange` event of the `TextField` brand in the
    `AddCar` component. This example also shows how to access the state of the component.
    We first use `wrapper.find` to find the first `TextField`, which is used for the
    car brand. Then, we set the value of `TextField` and use the `simulate` method
    to simulate the change event. Finally, we check the value of the brand state that
    should now contain `Ford`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we gave a basic overview of how to test React apps. Jest is
    a testing library developed by Facebook, and it is already available in our frontend
    because we created our app with `create-react-app`. We created a couple of tests
    with Jest, and ran those tests to see how you can check the results of tests.
    We installed Enzyme, which is a test utility for React. With Enzyme, you can easily
    test your React component rendering and events. In the next chapter, we will secure
    our application, and add the login functionality to the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is Jest?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you create test cases using Jest?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you create a snapshot test using Jest?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Enzyme?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you install Enzyme?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you test rendering with Enzyme?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you test events with Enzyme?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packt has other great resources for learning about React and testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/react-16-tooling](https://www.packtpub.com/web-development/react-16-tooling)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/jasmine-javascript-testing-second-edition](https://www.packtpub.com/web-development/jasmine-javascript-testing-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
