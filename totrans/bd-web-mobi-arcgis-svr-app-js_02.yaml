- en: Chapter 2. Creating Maps and Adding Layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've got some of the basics of HTML, CSS, and JavaScript out of the
    way, it's time to actually get to work and learn how to build some great GIS web
    applications! The material in this chapter will introduce you to some of the fundamental
    concepts that define how you create a map and add information to it in the form
    of layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The ArcGIS API for JavaScript Sandbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic steps to create an application with the ArcGIS API for JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More about the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with map service layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tiled map service layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic map service layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Map navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the map extent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all have to start somewhere when learning a new programming language or **application
    programming interface** (**API**). The same applies to creating web-mapping applications
    with the ArcGIS API for JavaScript. Not only do you need to understand some basic
    JavaScript concepts, but you also need to have a grasp of HTML, CSS, and of course
    the ArcGIS API for JavaScript, which is actually built on top of the Dojo JavaScript
    framework. That's a lot to put on your plate all at once, so in this chapter,
    I'm going to have you create a very basic application, which will serve as a foundation
    that you can build on in the coming chapters. Mimicry is an excellent way to learn
    programming skills, so in this chapter, I'm just going to have you type in the
    code that you see and I'll provide some explanation along the way. I'll save the
    detailed descriptions of the code for later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: To get your feet wet with the ArcGIS API for JavaScript, you're going to create
    a simple mapping application in this chapter, which creates a map, adds a couple
    of data layers, and provides some basic map navigation capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: There are some basic steps that you must follow to create any web-mapping application
    with the ArcGIS API for JavaScript. You'll see each of these steps for the first
    time in this chapter, and we'll describe them in greater detail later in the book.
    These basic steps will be followed each time you create a new application using
    the API for JavaScript. The first few times that you create an application, these
    steps will seem a little strange but you'll quickly gain an understanding of what
    they do and why they are necessary. Pretty soon you can just think of these steps
    as a template you use with every application.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: The ArcGIS API for JavaScript Sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, you''re going to use the ArcGIS API for JavaScript Sandbox to
    write and test your code. The Sandbox can be found at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)
    and will appear as seen in the following screenshot, when loaded. You''ll write
    your code in the left pane and click the **Run** button to see the results in
    the right pane, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ArcGIS API for JavaScript Sandbox](graphics/7965OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Basic steps for creating an application with the ArcGIS API for JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several steps that you''ll need to follow to create any GIS web application
    with the ArcGIS API for JavaScript. These steps will always need to be performed
    if you intend to have a map as part of your application. And I can''t imagine
    that you wouldn''t want to do that, given that you''re reading this book! In a
    nutshell, there are several steps you need to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the HTML code for the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Referencing the ArcGIS API for JavaScript and stylesheets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loading modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making sure the DOM is available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining the page content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Styling the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This was just a brief description of what needs to be done. We'll examine each
    of these steps in greater detail in the coming pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating HTML code for a web page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned the basic concepts of HTML, CSS, and JavaScript.
    Now, you''re going to start putting those skills to work. You first need to create
    a simple HTML document that will ultimately serve as the container for your map.
    Since we''re using the ArcGIS API for JavaScript Sandbox, this step has already
    been done for you. However, I do want you to spend some time examining the code
    so that you have a good grasp of the concepts. In the left pane of the Sandbox,
    the code you see highlighted in the following code example references the basic
    HTML code for the web page. There''s obviously some other HTML and JavaScript
    code in there as well, but the following code forms the basic components of the
    web page. This code includes several basic tags, including `<html>`, `<head>`,
    `<title>`, `<body>`, and a few others:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Referencing the ArcGIS API for JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin working with the ArcGIS API for JavaScript, you need to add references
    to the stylesheet and API. In the Sandbox, the following lines of code have been
    added inside the `<head>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `<script>` tag loads the ArcGIS API for JavaScript. At the time of writing
    this chapter, the current version is 3.7\. When new versions of the API are released,
    you'll want to update this number accordingly. The `<link>` tag loads the `esri.css`
    stylesheet, which contains styles specific to Esri widgets and components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Optionally, you can include a reference to one of the stylesheets for a Dojo
    Dijit theme. The ArcGIS API for JavaScript is built directly on the Dojo JavaScript
    framework. Dojo comes with four predefined themes that control the look of user
    interface widgets that are added to your application: Claro, Tundra, Soria, and
    Nihilo. In the following code example, I''m referencing the Claro theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The other available stylesheets can be referenced as seen in the following
    code example. You don''t have to reference any of the style sheets, but if you
    intend to add Dojo user interface components (Dijits), then you''ll want to load
    one of the stylesheets to control the styling of the components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The website [www.dojotoolkit.org](http://www.dojotoolkit.org) provides a theme
    tester that you can use to get a feel for how each of the themes affect the display
    of the user interface components. The theme tester is located at [http://archive.dojotoolkit.org/nightly/dojotoolkit/dijit/themes/themeTester.html](http://archive.dojotoolkit.org/nightly/dojotoolkit/dijit/themes/themeTester.html).
    The following screenshot shows the Dijit Theme Tester interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Referencing the ArcGIS API for JavaScript](graphics/7965OT_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Loading modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can create a `Map` object, you must first reference the resource
    that provides the map. This is accomplished through the use of a `require()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy or AMD Dojo?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whether to use the older legacy style of Dojo or the new AMD is currently a
    source of frustration for many developers. **Asynchronous Model Definition** (**AMD**)
    was introduced in Version 1.7 of Dojo. The Version 3.4 release of the ArcGIS Server
    API for JavaScript was the first version to have all modules rewritten using the
    new AMD style. For the time being, both the legacy and AMD style will work just
    fine, but it is advised that any new applications be written using the new AMD
    style. We'll follow that convention in this book but keep in mind that applications
    written prior to the release of Version 3.4 of the API and some Esri samples still
    reflect the older style of coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `require()` function is used to import resources into your web page. Various
    resources are provided by the ArcGIS API for JavaScript, including the `esri/map`
    resource, which must be provided before you can create a map or work with geometry,
    graphics, and symbols. Once a reference to the resource has been provided, you
    can use the `Map` constructor to create the `Map`. The following points show how
    to run the code in Sandbox:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin adding code to the Sandbox, remove the following highlighted
    code, if necessary. The code I''m having you remove is from a legacy style of
    coding the ArcGIS API for JavaScript. We''re going to use the new AMD style. In
    future versions of the Sandbox, it may not be necessary to remove these lines
    of code. I expect that Esri will eventually migrate this basic code block to the
    newer AMD style:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The resources you import need to be contained within a new `<script>` tag.
    Add the following highlighted lines of code to the Sandbox inside the `<script>`
    tag. The argument names used inside the `require()` function can be named anything
    you like. However, both Esri and Dojo provide a list of preferred arguments. I
    recommend using the Esri list of preferred arguments when naming arguments passed
    to the `require` callback function. Dojo also does the same with their list of
    preferred argument aliases. For example, in the following code you add, we provide
    a reference to the `esri/map` resource and then inside the anonymous function,
    we provide a preferred argument of `Map`. Each resource that you reference in
    the `require()` function will have an associated argument, which will provide
    a hook into the object for that resource:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Making sure Document Object Model is available
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a web page loads, all the HTML elements that compose the page are loaded
    and interpreted. This is known as **Document Object Model** (**DOM**). It is imperative
    that your JavaScript does not attempt to access any of these elements until all
    the elements have loaded. Obviously, if your JavaScript code attempted to access
    an element that hasn't been loaded yet, it would cause an error. To control this,
    Dojo has a `ready()` function that you can include inside the `require()` function,
    which will execute only after all the HTML elements and any modules have loaded.
    Alternatively, you can use the `dojo/domReady!` plugin to ensure that all the
    HTML elements have been loaded. We'll use the second method for this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous code, we have used the plugin with `dojo/domReady!` having been
    added to the `require()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although it is certainly possible to add JavaScript code directly inside your
    basic HTML file, it is a better practice to create a separate JavaScript file
    (`.js`). Most of the code that we write in this book will be done inside an HTML
    file for simplicity, but as your applications become more complex, you'll want
    to adhere to the practice of writing your JavaScript code in a separate file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The creation of a new map is done through `esri/map`, which is a reference to
    the `Map` class found in the `esri/map` module you imported in a previous step.
    Inside the `require()` function, you're going to create a new `Map` object using
    a constructor function. This constructor for the `Map` object accepts two parameters,
    including a reference to the `<div>` tag where the map will be placed on the web
    page as well as an options parameter that can be used to define various map setup
    options. The `options` parameter is defined as a JSON object that contains a set
    of key/value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the most visible option is `basemap`, which allows you to select a predefined
    basemap from [ArcGIS.com](http://ArcGIS.com) and can include `streets`, `satellite`,
    `hybrid`, `topo`, `gray`, `oceans`, `national-geographic`, or `osm`. The `zoom`
    option is used to define a starting zoom level for the map and can be an integer
    value that corresponds to a predefined zoom scale level. The `minZoom` and `maxZoom`
    options define the smallest and largest-scale zoom levels for the map. The `center`
    option defines the center point of the map that will initially be displayed and
    uses a `Point` object containing a latitude/longitude coordinate pair. There are
    a number of additional options that you pass in as parameters to the constructor
    for the `Map` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll create a global variable called `map` as well as the `require()`
    function by adding the highlighted line of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following highlighted code block to the `require()` function. This
    line of code is the constructor for the new `Map` object. The first parameter
    passed into the constructor is a reference to the ID of the `<div>` tag where
    the map will be placed. We haven''t defined this `<div>` tag yet, but we''ll do
    so in the next step. The second parameter passed into the `Map` constructor is
    a JSON object that defines options including the geographic coordinate that will
    serve as the center of the map, a zoom level, and the `topo` basemap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Creating the page content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the final steps is to create the HTML `<div>` tag that will serve as
    the container for the map. You always want to assign a unique ID to the `<div>`
    tag so that your JavaScript code can reference the location. In the Sandbox this
    `<div>` tag with a unique identifier of `mapDiv` has already been created for
    you. You can see this in the highlighted line of following code. In addition,
    you will also want to define the class attribute for the `<body>` tag, which should
    reference the Dojo stylesheet that you referenced.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, you can see the `<body>` tag that is already created
    in the Sandbox accomplishes the preceding two tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Styling the page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can add styling information to the `<head>` tag that will define various
    styling aspects for the web page. In this case, the styling has already been created
    for you in the Sandbox, as shown in the following code. In this case, the styling
    includes setting the map so that it fills the entire browser window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The complete code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code for this simple application should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the code by clicking on the **Run** button and you should see the following
    output, if everything has been coded correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The complete code](graphics/7965OT_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: More about the map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the process described earlier, we introduced the process that you'll need
    to follow for each application that you build with the ArcGIS API for JavaScript.
    You learned how to create an initialization JavaScript function. The purpose of
    the initialization script is to create your map, add layers, and perform any other
    setup routines necessary to get your application started. Creating a map is invariably
    one of the first things that you'll do and in this section, we'll take a closer
    look at the various options you have to create an instance of the `Map` class.
  prefs: []
  type: TYPE_NORMAL
- en: In object-oriented programming, the creation of a class instance is often done
    through the use of a constructor. A constructor is a function that is used to
    create or initialize a new object. In this case, the constructor is used to create
    a new `Map` object. Constructors frequently take one or more parameters that can
    be used to set the initial state of an object.
  prefs: []
  type: TYPE_NORMAL
- en: The `Map` constructor can take two parameters including the container where
    the map should reside and various options for the map. However, before you can
    call the constructor for a map, you must first reference the resource that provides
    the map. This is accomplished by importing the `esri/map` resource. Once a reference
    to the resource has been provided, you can use the constructor to create the map.
    A `<div>` ID is a required parameter for the constructor and is used to specify
    the container for the map. In addition, you can also pass multiple options that
    control various aspects of the map, including the basemap layer, the initial display
    of the map center, display of navigation controls, graphic display during panning,
    control of the slider, levels of detail, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at how options are specified in the map constructor.
    Options, the second parameter in the constructor, are always enclosed with brackets.
    This defines the contents of a JSON object. Inside the brackets, each option has
    a specific name and is followed by a colon and then the data value that controls
    the option. In the event that you need to submit multiple options to the constructor,
    each option is separated by a comma. The following code example shows how options
    are submitted to the `Map` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we are defining options for the map coordinate that will serve
    as the center of the map, along with a zoom level and a basemap layer of streets.
    These options are enclosed with curly braces and are separated by commas.
  prefs: []
  type: TYPE_NORMAL
- en: Working with map service layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A map without data layers is sort of like an artist with a blank canvas. The
    data layers that you add to your map give it meaning and set the stage for analysis.
    There are two primary types of map services that provide data layers that can
    be added to your map: dynamic map service layers and tiled map service layers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dynamic map service layers reference map services that create a map image on
    the fly and then return the image to the application. This type of map service
    may be composed of one or more layers of information. For example, the demographics
    map service displayed in the following screenshot is composed of nine different
    layers, representing demographic information at various levels of geography:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with map service layers](graphics/7965OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While they can take somewhat longer to display in a client application as they
    must be generated *on the fly*, dynamic map service layers are more versatile
    than tiled map service layers. In dynamic map service layers, you can control
    the features displayed through layer definitions, set the visibility of various
    layers within the service, and define temporal information for the layer. For
    example, in the **Demographics** map service layer detailed in the preceding screenshot,
    you might choose to display only **Census Block Group** in your application. This
    is the type of versatility provided by dynamic map service layers that you don't
    get with tiled map service layers.
  prefs: []
  type: TYPE_NORMAL
- en: Tiled map service layers reference a predefined cache of map tiles instead of
    dynamically rendered images. The easiest way to understand the concept of tiled
    map services is to think about a grid that has been draped across the surface
    of a map. Each cell within the grid has the same size and will be used to cut
    the map into individual image files called tiles. The individual tiles are stored
    as image files on a server and are retrieved as needed, depending upon the map
    extent and scale. This same process is often repeated at various map scales. The
    end result is a cache of tilesets that have been generated for various map scales.
    When the map is displayed in the application, it will appear to be seamless even
    though it is composed of many individual tiles.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with map service layers](graphics/7965OT_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These tiled or cached map layers are often used as basemaps that include imagery,
    street maps, topographic maps, or for data layers that don't change often. Tiled
    map services tend to display faster as they don't have the overhead of creating
    images on the fly each time there is a request for a map.
  prefs: []
  type: TYPE_NORMAL
- en: Operational layers are then draped on top of the tiled basemaps and these are
    often dynamic layers. While they can be somewhat slower in terms of performance,
    dynamic map service layers have the advantage of being able to define their appearance
    on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: Using layer classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the layer classes from the API for JavaScript, you can reference map services
    hosted by ArcGIS Server and other map servers. All layer classes inherit from
    the `Layer` base class. The `Layer` class has no constructor, so you can't specifically
    create an object from this class. This class simply defines properties, methods,
    and events that are inherited by all classes that inherit from `Layer`.
  prefs: []
  type: TYPE_NORMAL
- en: As indicated in the following figure, `DynamicMapServiceLayer`, `TiledMapServiceLayer`,
    and `GraphicsLayer` all inherit directly from the `Layer` class. `DynamicMapServiceLayer`
    and `TiledMapserviceLayer` also act as base classes. `DynamicMapServiceLayer`
    is the base class for dynamic map services while `TiledMapServiceLayer` is the
    base class for tiled map services. [Chapter 3](ch03.html "Chapter 3. Adding Graphics
    to the Map"), *Adding Graphics to the Map*, is devoted entirely to graphics and
    the `GraphicsLayer`, so we'll save our discussion on this type of layer for later
    on in the book. `Layer`, `DynamicMapServiceLayer`, and `TiledMapServiceLayer`
    are all base classes, meaning that you can't specifically create an object from
    these classes in your application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using layer classes](graphics/7965OT_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tiled map service layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, tiled map service layers reference a cache of predefined
    images that are tiled together to create a seamless map display. These are often
    used as base maps.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tiled map service layers](graphics/7965OT_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `ArcGISTiledMapServiceLayer` class is used when referencing a tiled (cached)
    map service exposed by ArcGIS Server. As this type of object works against a tiled
    set of maps that have been cached, performance is often improved. The constructor
    for `ArcGISTiledMapServiceLayer` takes a URL pointer to the map service, along
    with options that allow you to assign an ID to the map service and control transparency
    and visibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code example, notice that the constructor for `ArcGISTiledMapServiceLayer`
    takes a parameter that references a map service. After an instance of a layer
    has been created, it is added to the map using the `Map.addLayer()` method that
    accepts a variable that contains a reference to the tiled map service layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`ArcGISTiledMapServiceLayer` is used primarily for the fast display of cached
    map data. You can also control the levels at which the data will be displayed.
    For instance, you may want to display data from a generalized `ArcGISTiledMapService`,
    showing interstates and highways while your users are zoomed out at levels 0-6
    and then switch to a more detailed `ArcGISTiledMapService` once the user zooms
    in further. You can also control the transparency of each layer added to the map.'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic map service layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the name suggests, the `ArcGISDynamicMapServiceLayer` class is used to create
    dynamic maps served by ArcGIS Server. Just as with `ArcGISTiledMapServiceLayer`,
    the constructor for `ArcGISDynamicMapServiceLayer` takes a URL that points to
    the map service along with optional parameters that are used to assign an ID to
    the service, determine the transparency of the map image, and a visibility option
    that sets the initial visibility of the layer to true or false. The class name
    `ArcGISDynamicMapServiceLayer` can be somewhat misleading. Although it appears
    to reference an individual data layer, this is in fact not the case. It refers
    to a map service rather than a data layer. Individual layers inside the map service
    can be turned on/off through the `setVisibleLayers()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '![Dynamic map service layers](graphics/7965OT_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating an instance of `ArcGISDynamicMapServiceLayer` will look very similar
    to `ArcGISTiledMapServiceLayer`. The following code example illustrates this.
    The constructor accepts a URL that points to the map service. The second parameter
    defines the optional parameters that you can supply to control transparency, visibility,
    and image parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the preceding two lines of code to the ArcGIS API for JavaScript Sandbox
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding code to see the dynamic layer added to the map, as seen in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dynamic map service layers](graphics/7965OT_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With an instance of `ArcGISDynamicMapServiceLayer`, you can perform a number
    of operations. Obviously, you can create maps that display the data in the service,
    but you can also query data from layers in the service, control feature display
    through layer definitions, control individual layer visibility, set time-related
    information, export maps as images, control background transparency, and much
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Adding layers to the map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `addLayer()` method takes an instance of a layer (`ArcGISDynamicMapServiceLayer`
    or `ArcGISTiledMapServiceLayer`) as the first parameter, and an optional index
    that specifies where it should be placed. In the following code example, we have
    created a new instance of `ArcGISDynamicMapServiceLayer` pointing to a URL for
    the service. We then call `Map.addLayer()` to pass the new instance of the layer.
    The layers in the service will now be visible on the map.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `addLayers()` method takes an array of layer objects and adds them all at
    once.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to being able to add layers to a map, you can also remove layers
    from a map using `Map.removeLayer()` or `Map.removeAllLayers()`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting visible layers from a map service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can control the visibility of individual layers within a dynamic map service
    layer using the `setVisibleLayers()` method. This applies only to dynamic map
    service layers, not tiled map service layers. This method takes an array of integers,
    corresponding to the data layers in the map service.
  prefs: []
  type: TYPE_NORMAL
- en: 'This array is zero based so the first layer in the map service occupies position
    `0`. In the **Demographics** map service illustrated in the following screenshot,
    `Demographics/ESRI_Census_USA` occupies index `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting visible layers from a map service](graphics/7965OT_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Therefore, in the event that we''d like to display only the **Census Block
    Points** and **Census Block Group** features from this service, we can use `setVisibleLayers()`
    as seen in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Setting a definition expression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In ArcGIS for Desktop, you can use a definition expression to limit the features
    in a data layer that will be displayed. A definition expression is simply a SQL
    query set against the columns and rows in a layer. Only the features whose attributes
    meet the query are displayed. For example, if you only wanted to display cities
    with a population greater than one million, the expression would be something
    like `POPULATION > 1000000`. The ArcGIS API for JavaScript contains a `setLayerDefinitions(
    )` method that accepts an array of definitions that can be applied against `ArcGISDynamicMapServiceLayer`
    to control the display of features in the resulting map. The following code example
    shows how this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting a definition expression](graphics/7965OT_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You first create an array that will hold multiple `where` clauses, which will
    serve as the definition expressions for each layer. In this case, we are defining
    layer definitions for the first and sixth layer. The array is zero based, so the
    first array is at index `0`. The `where` clauses are placed into the array and
    then passed into the `setLayerDefinitions()` method. ArcGIS Server then renders
    the features that match the `where` clauses for each layer.
  prefs: []
  type: TYPE_NORMAL
- en: Map navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you know a little about maps and the layers that reside within those
    maps, it's time to learn how to control map navigation in your application. In
    most cases, your users will need to be able to navigate around the map using the
    panning and zooming features. The ArcGIS API for JavaScript provides a number
    of user interface widgets and toolbars that you can use in order to allow your
    user to change the current map extent using the zooming and panning features.
    Map navigation can also occur through keyboard navigation and mouse navigation.
    In addition to these user interface components and hardware interfaces, map navigation
    can also be controlled programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Map navigation widgets and toolbars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The simplest way to provide map navigation control to your application is through
    the addition of various widgets and toolbars. When you create a new map and add
    layers, a zoom slider is included with the map by default. This slider allows
    the user to zoom in and out of the map. The zoom slider is illustrated in the
    following screenshot. You don''t have to do anything programmatically to have
    the zoom slider appear on your map; it is present by default. However, you can
    remove the slider for your application simply by setting the slider option to
    `false` when creating an instance of the `Map` object, if necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the map with the zoom slider:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Map navigation widgets and toolbars](graphics/7965OT_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also add pan buttons that will pan the map in the direction that the
    arrow points towards, when clicked. By default, pan buttons will not appear on
    the map. You must specifically set the `nav` option to `true` when creating your
    `Map` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the pan options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Map navigation widgets and toolbars](graphics/7965OT_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The ArcGIS API for JavaScript also gives you the ability to add several types
    of toolbars to your application, including a navigation toolbar containing buttons
    to zoom in and out, panning, full extent, next extent, and previous extent. Toolbar
    creation is covered in detail in a later chapter, so we'll save that discussion
    for later.
  prefs: []
  type: TYPE_NORMAL
- en: '![Map navigation widgets and toolbars](graphics/7965OT_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Map navigation using the mouse and keyboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Users can also control map navigation using the mouse and/or keyboard devices.
    By default, users can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the mouse to pan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the forward mouse scroll to zoom in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the backward mouse scroll to zoom out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Shift* and drag the mouse to zoom in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Shift* + *Ctrl* and drag the mouse to zoom out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Shift* and click to restore to the center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-click to center and zoom in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Shift* and double-click to center and zoom in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the arrow keys to pan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the *+* key to zoom in to a level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the *-* key to zoom out of a level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding options can be disabled using one of several `Map` methods. For
    example, to disable scroll wheel zooming, you would use the `Map.disableScrollWheelZoom()`
    method. These navigation features can also be removed after the map has been loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Getting and setting the map extent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the first things you'll want to master is getting and setting the map
    extent. By default, the initial extent of a map within your application is the
    extent of the map when it was last saved in the map document file (`.mxd`) used
    to create the map service. In some cases, this may be exactly what you want, but
    in the event that you need to set a map extent other than the default, you will
    have several options.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the optional parameters that can be defined in the constructor for the
    `Map` object is the center parameter. You can use this optional parameter in conjunction
    with the zoom object to set the initial map extent. You''ll see this illustrated
    in the following code example, where we define a coordinate pair for the center
    of the map, along with a zoom level of `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The initial extent of the map is not a required parameter, and thus if you
    leave out this information, the map will simply use the default extent. This is
    shown in the following code example, where only the ID of the container is specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After a `Map` object has been created, you can also use the `Map.setExtent()`
    method to change the extent by passing in an `Extent` object as seen in the following
    code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you could set the `Extent` properties individually as seen in
    the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'There may be times when you are using multiple map services in your application.
    In this case, setting the initial map extent can be done either through the constructor
    for your map or by using the `Map.fullExtent` method on one of the services. For
    example, it is common to use a map service that provides base layer capabilities
    containing aerial imagery along with a map service containing your own local operational
    data sources. The following code example uses the `fullExtent()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The current extent can be obtained either through the `Map.extent` property
    or the `onExtentChange` event. Note that the `Map.setExtent` property is read
    only, so don't attempt to set the map extent through this property.
  prefs: []
  type: TYPE_NORMAL
- en: Map events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of programming, events are actions that take place within an application.
    Normally, these events are triggered by the end user and can include things such
    as mouse clicks, mouse drags, and keyboard actions, but it can also include the
    sending and receiving of data, component modification, and others.
  prefs: []
  type: TYPE_NORMAL
- en: The ArcGIS API for JavaScript is an asynchronous API that follows a publish/subscribe
    pattern wherein an application registers (publishes) events with listeners (subscribers).
    The following diagram illustrates this process. Listeners are responsible for
    monitoring the application for these events and then triggering a `handler` function
    that responds to the event. Multiple events can be registered to the same listener.
    The `dojo on()` method functions as an event to a handler.
  prefs: []
  type: TYPE_NORMAL
- en: '![Map events](graphics/7965OT_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you may recall, the ArcGIS Server JavaScript API is built on top of Dojo.
    With Dojo, events are registered to handlers through the `dojo on()` method. This
    method takes three parameters. Take a look at the code example shown in the following
    screenshot to get a better understanding of how events are registered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Map events](graphics/7965OT_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We call the `on()` method with parameters including `map`, `click`, and `displayCoordinates`.
    The first two parameters indicate the object and the event that we would like
    to register. In this case, it means we are registering the `click` event found
    on the `Map` object. This event is fired every time the user clicks the mouse
    within the confines of the map. The final parameter, `displayCoordinates`, indicates
    the listener for the event. Therefore, each time the `click` event on the `Map`
    object is fired, it will trigger the `displayCoordinates` function, which will
    run and report the current extent of the map. Although the events and the handlers
    they are registered to will change depending upon your circumstance, the method
    of registration is the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each time an event occurs, an `Event` object is generated. This `Event` object
    contains additional event information such as the mouse button that was clicked
    or perhaps the key on the keyboard that was pressed. This object is automatically
    passed into the event handler, where it can be examined. In the following code
    example, you can see that the `Event` object is passed into the handler as a parameter.
    This is a dynamic object whose properties will change depending upon the type
    of event that was triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: There are many different events that are available on a number of different
    objects in the API. However, it is important to keep in mind that you do not have
    to register every event with a listener. Only the events that are necessary for
    your application should be registered. When an event that hasn't been registered
    with a listener occurs, the event is simply ignored.
  prefs: []
  type: TYPE_NORMAL
- en: The `Map` object contains many different events that you can respond to, including
    various mouse events, extent change events, basemap change events, keyboard events,
    layer events, pan and zoom events, and more. Your application can respond to any
    of these events. In coming chapters, we'll examine events that are available on
    other objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is a good programming practice to always disconnect your events from their
    handler when no longer needed. This is normally done when the user navigates away
    from the page or closes the browser window. The following code example shows how
    this can be done by simply calling the `remove()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot of ground in this chapter. All applications created with the
    ArcGIS API for JavaScript require a certain set of steps. We refer to this as
    boilerplate code. This includes defining references to the API and stylesheet,
    loading modules, creating an initialization function, and some other steps. In
    the `initialization` function, you will most likely create a map, add various
    layers, and perform other setup operations that need to be performed before the
    application is used. In this chapter, you learned how to perform these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we examined the various types of layers that can be added to a
    map, including tiled map service layers and dynamic map service layers. Tiled
    map service layers are precreated and cached on the server and are most often
    used as basemaps in an application. Dynamic map service layers must be created
    on the fly each time a request is made and thus may take longer to generate. However,
    dynamic map service layers can be used to perform many types of operations, including
    queries, setting definition expressions, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you learned how to programmatically control the map extent. Finally,
    we introduced the topic of events and you learned how to connect an event to an
    event handler, which is simply a JavaScript function that runs any time a particular
    event is triggered. In the next chapter, we'll closely examine how you can add
    graphics to your application.
  prefs: []
  type: TYPE_NORMAL
