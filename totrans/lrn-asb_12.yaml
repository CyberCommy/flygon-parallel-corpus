- en: Ansible Windows Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been targeting Linux servers. In this chapter, we will take
    a look at the ever-growing collection of core Ansible modules that support and
    interact with Windows-based servers. Personally, coming from an almost exclusively
    macOS and Linux background, it felt a little odd to be using a tool that is not
    natively supported on Windows to manage Windows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: However, as I am sure you will agree by the end of the chapter, its developers
    have made the process of introducing Windows workloads into your playbook as seamless
    and familiar as possible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to build our Windows servers locally using
    Vagrant and then take our playbooks to the public cloud. We will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Enabling features in Windows
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching Windows instances in AWS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating users
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing third-party packages using Chocolatey
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in the previous chapter, we are going to be using Vagrant and also AWS. The
    Vagrant box we will be using contains an evaluation copy of Windows 2016\. The
    Windows EC2 instance we will be launching in AWS will be fully licensed and therefore
    will carry an additional cost on top of the EC2 resource costs. As always, you
    can find complete copies of the playbooks in the accompanying repository at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter12](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter12).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Up-and-running
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this section, we are going to use Vagrant to launch a Windows 2016 server
    just like we originally did in [Chapter 2](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml),
    *Installing and Running Ansible*. Let's start by looking at the Vagrantfile we
    will be using to launch our host.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Vagrantfile
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This `Vagrantfile` doesn''t look too dissimilar from the ones we have been
    using to launch Linux hosts:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we are replacing references to SSH Vagrant. We will be using
    the **Windows Remote Management** (**WinRM**) protocol, as well as Ansible, to
    interact with the virtual machine. By default, the `config.vm.communicator` is
    SSH, so overriding this with `winrm` means that we have to provide `config.winrm.username`
    and `config.winrm.password`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Also, we are instructing Vagrant not to attempt to try and mount our local filesystem
    on the virtual machine, nor to add any additional IP addresses or network interfaces;
    instead, it should just forward the port from our localhost machine to the host.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we are mapping port `8080` on our local machine to port `80` on the
    Windows host; more on that later in the chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'We can launch the host using one of the following commands:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will use VirtualBox, or we can use VMWare by running:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The Vagrant box we are using is several gigabytes in size so it will take a
    little while to download, but once downloaded you should see something like the
    following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e80b27cd-f789-4c08-be32-e6ac32f2a108.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: 'Once the machine has launched, you will find that your virtual machine has
    opened a window and that the Windows desktop is accessible, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a8f7e70-8323-4dd5-bfcd-6492d589b261.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Just minimize this window for now as we will not be interacting with Windows
    directly. Closing the window may suspend and power down the virtual machine.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our Windows host up-and-running, we need to install a few supporting
    Python modules, to allow Ansible to interact with it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Ansible preparation
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As already mentioned, Ansible will be using WinRM to interact with our Windows
    host.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: WinRM provides access to a SOAP-like protocol called WS-Management. Unlike SSH,
    which provides the user with an interactive shell to manage the host, WinRM accepts
    scripts that are executed and then the results are passed back to you.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to use WinRM, Ansible requires us to install a few different Python
    modules, Linux users can use the following command to install them:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'macOS users may need to perform the following command if they get errors about
    `pyOpenSSL` that can''t be updated, as it is part of the core operating system:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once installed, we should now be able to interact with our Windows host once
    we configure a host inventory file. The file, called `production`, looks like
    the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, we have removed all references to SSH and replaced them with
    WinRM (`ansible_connection`). Again, we have to provide a username (`ansible_user`)
    and password (`ansible_password`). Due to the way the Vagrant box we are using
    was built, we are not using the default HTTPS scheme and are instead using the
    HTTP scheme (`ansible_winrm_scheme`). This means that we have to use port `55985`
    (`ansible_port`) rather than port `99586`. Both of these ports are mapped from
    our Ansible controller to ports `9585` and `5986` on the Windows host.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Now we have Windows up-and-running and Ansible configured, we can make a start
    on interacting with it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The ping module
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not all Ansible modules work with Windows hosts and ping is one of them. There
    is a module provided for Windows called `win_ping` and we will be using that here.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'The command we need to run follows; as you can see, other than the module name
    it is exactly the way we executed it against a Linux host:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you are a macOS user and you receive an error like this one, then don''t
    worry; there is a workaround for it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a12d7ab9-b466-4a78-bd25-e0fe996cedca.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: 'The error is a known issue that is being worked on by the Ansible team. In
    the meantime, run the following command, or add it to your `~/.bash_profile` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you have run the command, you should see the following results:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bcbfd9e5-a54d-4ca2-af5a-d44526f2ab6d.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: The next module we are going to run has been designed to work with Windows or
    Linux hosts.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The setup module
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we found out in [Chapter 2](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml),
    *Installing and Running Ansible*, the setup module gathers facts on our target
    host; if we call the module directly using the `ansible` command, the facts are
    printed directly on the screen. To call the module, we need to run the following
    command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see from the following screen, the information displayed is pretty
    much identical to when we ran the module against a Linux host:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/772fbc5a-3412-4f17-b8fd-0fa181aca54b.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: 'We can use one of the playbooks from [Chapter 2](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml),
    *Installing and Running Ansible*, to see this. In `playbook01.yml`, we used the
    facts gathered by Ansible when it first connects to the hosts to display a message.
    Let''s update that playbook to interact with our Windows host:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, we have updated the host group to use `windows` rather than
    `boxes`, and we also removed the `become` and `become_method` options as the user
    we will be connecting with has enough permissions to run the tasks we need.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'We can run the playbook using the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screen gives the expected output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9c195618-d125-488d-a092-1ea2f3a863ef.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: Now we have quickly covered the basics, we can look at doing something useful
    and install a few different software packages.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Installing a web server
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first things we did when we had our Linux host up-and-running was
    to install a web server, so let's look at repeating that process by installing
    and enabling **Internet Information Services** (**IIS**) on our Windows host.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'IIS is the default web server that ships with Windows Server, and it supports
    the following protocols: HTTP, HTTPS, and HTTP/2, as well as FTP, FTPS, SMTP,
    and NNTP. It was first released 22 years ago as part of Windows NT.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'Like all of the playbooks we have covered so far, let''s create the basic skeleton
    by running the following commands:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now we can make a start on writing our playbook.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: IIS role
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first role we are going to look at installs and configures IIS and then,
    like our previous playbook, uploads an HTML file that is generated by Ansible
    using a template. First of all, change to the `web` folder and create the role
    by running:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Starting with the default variable in `roles/iis/defaults/main.yml`, we can
    see that our role is going to be really similar to our Apache role we created
    when setting up the LAMP stack:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, we are providing the path to the document root, a name for
    our HTML file, and also some content for our HTML file, for which the template
    can be found at `roles/iis/templates/index.html.j2`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is the exact template we used in our Apache role earlier on. Deploying
    IIS is quite simple, we just need two tasks in `roles/iis/tasks/main.yml` to accomplish
    this. Our first task can be found here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This uses the `win_feature` module to enable and start the `Web-Server` and
    `Web-Common-Http` features. The next and final task deploys our HTML page using
    the `win_template` module:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see, the syntax is pretty much the same as the standard `template`
    module. Now that we have our role completed, we can run the playbook, copy the
    content of the host inventory file, which we used in the previous section, into
    the `production` file, and update `site.yml` so it contains the following content:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can then run the playbook using the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of the playbook run should look something like the following Terminal
    output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9a44a6c6-53ec-4d84-ae30-40ee1bf3f1d7.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'Once complete, you should be able to open the web browser on your local machine
    and go to `http://localhost:8080/`, which should display the default IIS page:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/174387ff-ba12-4aad-b513-0686c5c10365.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: 'Opening `http://localhost:8080/ansible.html` will show the page we uploaded:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/55b8632c-0a21-4987-81f4-b90d0beea36a.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: ASP.NET role
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we have IIS up-and-running, let''s look at enabling ASP.NET support. Again,
    let''s start by creating the role:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Starting with the variables in `roles/asp/defaults/main.yml`, you can see that
    they look similar to the HTML ones except that we have prefixed them with `.aspx`
    so that they do not clash with the variables from the `iis` role:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see from the bottom of the page, we are including a function that
    prints the machine name, which in our case should be Vagrant, and also the date
    and time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we have the template in `roles/asp/templates/default.aspx.j2`. Apart
    from the updated variables and filename, the content remains more or less the
    same as the one used in the `iis` role:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we have the tasks that should be placed in `roles/asp/tasks/main.yml`.
    First of all, we are using the `win_feature` module to enable the components needed
    to get our basic page up-and-running:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we need to create a folder to serve our page from and copy the rendered
    template:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As you can see, we are using the `win_template` module again. As well as using
    the `win_file` module, the syntax for the file module is extremely close to that
    of the `file` module we have been using in other chapters. The final task checks
    that the site is configured correctly in IIS:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `win_iis_webapplication` module is used for, as the name says, configuring
    web applications within IIS. This is not strictly required for our example, but
    it gives you an idea of what is possible.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that, when we enabled the additional features, we sent
    a notification to restart IIS. This means we have to add a task to the `roles/asp/handlers/main.yml`
    file. This task uses the `win_service` module to restart the webserver:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now that we have our completed role, we can look at running the playbook again.
    First, we need to add the new role to the `site.yml` file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, we can run the playbook using the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This should give you something along the lines of the following output:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0007233a-c7c0-42db-926b-db2729691502.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: 'Opening your browser and going to `http://localhost:8080/ansible/` should present
    you with something that looks similar to the following web page:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/97b229ab-ce2f-480d-bcba-b18f526dee35.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: 'Let''s remove our Vagrant box and look at a few more modules. To remove the
    box, run:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We can now look at creating a user using Ansible, and also install a few desktop
    applications using Chocolatey on a server host in AWS.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with AWS Windows instances
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we interacted with our local Windows Vagrant box, it was not using a secure
    connection; let's look at launching a Windows EC2 instance in an AWS instance
    and then interacting with it like we did with the CentOS 7 instance in [Chapter
    10](56e8175f-d1a8-4b63-ad3f-fe94ff55135e.xhtml), *Highly Available Cloud Deployments*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to create the folder structure for our new playbook:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Once we have the structure, we need to create four roles, starting with the
    AWS one.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: AWS role
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our first role will create the VPC and launch the EC2 instance. To bootstrap
    the role change, go to the cloud folder and run:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s start with the contents of `roles/aws/defaults/main.yml` first:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see, we are only going to be using a single subnet and we are going
    to be looking for a Windows Server 2016 AMI during the playbook run. Finally,
    we are setting a variable called `win_initial_password`, which will be used to
    set our Administrator password later in the playbook run.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the tasks in `roles/aws/tasks/main.yml` are as you would expect. First,
    we set up the VPC, create the subnet, and find out your current IP addresses for
    use with the security group:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The security group has been updated so, rather than port 22, we are opening
    ports for remote desktop (port `3389`) and WinRM (ports `5985` and `5986`):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We then continue to build out our network by adding an internet gateway and
    routing before finding the right AMI ID to use:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now it is time to launch the EC2 instance; you may have noticed that we have
    not had to upload a key or any credentials. This is because we will actually inject
    a PowerShell script that executes when the instance is first booted. This script
    will set the administrator password and configure the instance so that Ansible
    can be run against it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The script is a template called `userdata.j2`, which is injected into the instance
    at boot using the `user_data` key. We will take a look at the template in a moment;
    all that remains in this role is to add the instance to a host group and then
    wait for WinRM to be accessible:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `userdata.j2` template in `roles/aws/templates/` looks like the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The first part of the script sets the password (`win_initial_password`) for
    the administrator user; the script then downloads and executes a PowerShell script
    directly from Ansible's GitHub repository. This script runs checks against the
    current WinRM configuration on the target instance and then makes the changes
    needed for Ansible to be able to securely connect. The script also configures
    all actions in WinRM to be logged to the instances event log.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: User role
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up, we have the user role, which we can run the following command to create:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This role creates a user for us to connect to our instance with. The defaults
    that can be found in `roles/user/defaults/main.yml` are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As you can see, here we are defining a user called `ansible` that has a 30-character
    random password. The `ansible` user will be a member of the `Users` and `Administrators`
    groups. There is a single task in `roles/user/tasks/main.yml` using the `win_user`
    module, which looks like:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Like all Windows modules, the syntax is similar to the Linux equivalent so you
    should have a good idea of what each key means. As you can see from the previous
    task, we are using a Jinja2 transformation to capitalize the first letter of the
    `ansible.username` variable.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Chocolatey role
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next role uses Chocolatey to install a few bits of software on the machine.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Chocolatey is a package manager for Windows, similar in principle and functionality
    to Homebrew, which we used in earlier chapters to install the software we needed
    on macOS with a single command. Chocolatey simplifies the installation of packages
    on the command line by wrapping the installation process for most common Windows
    installers into a common set of PowerShell commands—perfect for an orchestration
    tool such as Ansible.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the files needed for the role, run the following command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In `roles/choc/defaults/main.yml`, we have a list of the packages we want to
    install:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'As you can see, we want to install Notepad++, PuTTY, and Google Chrome. The
    task itself, which needs to be added to `roles/choc/tasks/main.yml`, looks like
    the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Again, the `win_chocolatey` module takes a similar input to the package manager
    modules we have used in previous chapters when targeting a Linux-based host.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Information role
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final role we are creating is called `info`, and its only purpose is to
    output information on our newly launched and configured Windows Server 2016 EC2
    instance. As you may have already guessed, we need to run the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Once we have the files, add the following task to `roles/info/tasks/main.yml`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: As you can see, this will provide us with the host to connect to, along with
    the username and password.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Running the playbook
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we run the playbook, we need to add the following to `group_vars/common.yml`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The host inventory file called `production` should contain the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'As you can see, we are using the WinRM connector to connect to our Windows
    instance using the administrator username and the password we set when running
    the user data script when launching the instance. The `site.yml` file should have
    the following content:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We can run the playbook using the following command, after first exporting
    our AWS credentials:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'A slightly edited output of the playbook run follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'As you can see from the output, my EC2 instance has a hostname of `ec2-34-245-2-119.eu-west-1.compute.amazonaws.com`
    and the `ansible` user has a password of `Qb9LVPkUeZFRx5HLFgVllFrkqK7HHN`. I can
    connect to the instance using Microsoft RDP with those details (remember it is
    locked down to your IP address). As you can see from the following screenshot,
    I am connected as the Ansible user and have PuTTY and Notepad ++ open; you can
    also make out the shortcut to Google Chrome on the desktop:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0918ae5d-a6ea-4a31-96d2-8a95026cf543.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: The other thing you may have noticed is that we never had to install Chocolatey.
    As stated during the playbook run, if `win_chocolatey` doesn't find a Chocolatey
    installation on the target machine it will install and configure it automatically.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a playbook in the `Chapter12/cloud` folder in the GitHub repository
    that removes the resources we created here. To run this, use the following command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Make sure you double-check that everything has been removed as expected to ensure
    you do not get any unexpected bills.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned at the start of the chapter, using a traditional Linux tool such
    as Ansible on Windows always feels a little strange. However, I am sure you will
    agree that the experience is as Linux-like as possible. When I first started experimenting
    with the Windows modules, I was surprised that I managed to launch an EC2 Windows
    Server instance and managed to deploy a simple web application without ever having
    to remote-desktop into the target instance.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: With each new release, Ansible gets more and more support for Windows-based
    hosts, making it easy to manage mixed workloads from your playbooks.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to return to more familiar territory, for
    me at least, and look at how we can harden our Linux installation.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following two modules can be used on both a Windows and Linux host,
    setup or file?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: You can use SSH to access your Windows target.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the type of interface WinRM uses.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Python module do you need to install to be able to interact with WinRM
    on macOS and Linux?
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要安装哪个Python模块才能在macOS和Linux上与WinRM进行交互？
- en: 'True or false: You can have a separate task to install Chocolatey before you
    use the `win_chocolatey` module.'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：您可以在使用`win_chocolatey`模块之前有一个单独的任务来安装Chocolatey。
- en: Update the playbook to install additional packages.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新playbook以安装额外的软件包。
- en: Further reading
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You can find more information on the excellent Chocolatey at [http://chocolatey.org/](http://chocolatey.org/).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://chocolatey.org/](http://chocolatey.org/)找到有关优秀的Chocolatey的更多信息。
