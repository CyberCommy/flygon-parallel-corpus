- en: Tools to Optimize Your SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've learned all about SVG in this book — everything from the basics
    of pure SVG markup to the dynamic, JavaScript-based SVG work you've done over
    the past few chapters — you're ready to take advantage of everything that SVG
    offers.
  prefs: []
  type: TYPE_NORMAL
- en: One final aspect of SVG that we should look at is how to make sure the work
    you do is presented in the best possible way when you serve it to your users.
    SVG should be optimized for performance, both in terms of performance over the
    wire and in terms of complexity.  Keeping your SVG files as lean as they can be
    and serving them efficiently is going to make for a much better experience for
    your users.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will serve as a high-level introduction to the many ways that you
    can optimize your SVG images. Some of what follows is pure, performance-related
    engineering. Others are pure SVG tooling.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Compressing SVG on the server in three popular server platforms (IIS, Apache,
    and nginx)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SVGO and its associated suite of tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: svgcleaner, an alternative to SVGO that offers lossless optimizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving compressed SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most straightforward performance enhancements you can do when working
    with SVG is to compress `gzip` files when you serve them. While text files generally
    benefit from being gzipped when served to the browser, SVG is an especially important
    target because of the way that SVG images are used (often for the core interface)
    and because of the potential size of some of the files. You want your images to
    load fast, and SVG is no exception.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on what your platform is, this may be as easy as adding a few lines
    of code or checking a box in a dialog box. The next few sections show you how
    to implement this action on three common web servers.
  prefs: []
  type: TYPE_NORMAL
- en: gzipping SVG on Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Where to place the following code depends on how your Apache instance is set
    up and what access you have to the server. Most people on shared hosting will
    be doing this in their `.htaccess` file. `.htaccess` is a special file in the
    server root that allows you to configure Apache behavior without having to have
    access your main configuration file (`httpd.conf`). Assuming your server allows
    you to access this functionality (some hosts do not allow you to turn on compression,
    since it uses more server resources), gzipping text content is as easy as adding
    the following to your `.htaccess` file. Example code is drawn from the H5BP Apache
    server configs project ([https://github.com/h5bp/server-configs-apache/blob/master/dist/.htaccess#L795](https://github.com/h5bp/server-configs-apache/blob/master/dist/.htaccess#L795)).
    There are three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: The first fixes a problem where request headers are being mangled by proxy servers
    and assets are therefore not being served gzipped (this fixes more than just SVG)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second actually tells Apache to compress files of the listed MIME types
    (abbreviated here; there are normally dozens of different MIME types listed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The third ensures that SVG files compressed and saved in a compressed format,
    `.svgz`, are served properly:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: SVG compression on nginx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to Apache, turning on `gzip` compression for SVG is just a matter of
    a few lines of configuration. This code block, sourced from the HTML5 boilerplate
    nginx server configs project ([https://github.com/h5bp/server-configs-nginx/blob/master/nginx.conf#L89](https://github.com/h5bp/server-configs-nginx/blob/master/nginx.conf#L89)),
    provides an example of how to do so. The code will turn `gzip` compression on,
    set the `gzip` compression level, stop compression for already small objects,
    set some values for proxies, and then add the SVG MIME type to the list of objects
    that should be compressed (again, abbreviated here; there are normally dozens
    of different MIME types listed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: SVG compression on IIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IIS doesn''t compress SVG files by default. Depending on how your server is
    configured, the following change needs to be made in your `applicationHost.config`
    (`C:\Windows\System32\inetsrv\config`) or `web.config` file. You simply need to
    add the SVG MIME type to the `staticTypes` and `dynamicTypes` elements in the
    `httpCompression` module and you''re ready to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've learned about serving SVG efficiently, it's time to look at some
    ways to optimize SVG before they get on the server.
  prefs: []
  type: TYPE_NORMAL
- en: SVGO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SVG Optimizer ([https://github.com/svg/svgo](https://github.com/svg/svgo)) is
    a Node.js utility for optimizing SVG files. SVG files, especially those generated
    by editors, can have a lot of cruft associated with them. SVGO can clean up the
    metadata, comments, hidden elements, and so on, without changing the rendering
    of the SVG element itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it, assuming you have Node.js installed, run the following on the
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Usage is as simple as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Running that on a small file generated by Inkscape, reduces the file size by
    over 50 percent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d8d598b-8a7f-42e7-bd50-6bedead62d96.png)'
  prefs: []
  type: TYPE_IMG
- en: The difference is apparent if you look at the change in the `svgo.svg` source
    code, before and after optimization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the metadata added by Inkscape during the authoring
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1869e97d-22ba-48bc-9ce5-0b2fed462670.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This screenshot shows the cleaned-up file after optimization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d05d9dbb-2867-40d7-be10-88de011cb70c.png)'
  prefs: []
  type: TYPE_IMG
- en: It's a great tool, with many configuration options ([https://github.com/svg/svgo#usage](https://github.com/svg/svgo#usage))
    and integrations with other tools ([https://github.com/svg/svgo#other-ways-to-use-svgo](https://github.com/svg/svgo#other-ways-to-use-svgo)).
  prefs: []
  type: TYPE_NORMAL
- en: SVGOMG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the integrations listed in the preceding link is with a web frontend
    for SVGO, called SVGOMG ([https://jakearchibald.github.io/svgomg/](https://jakearchibald.github.io/svgomg/)).
    SVGOMG is a web frontend for SVGO. Having almost all of the options exposed in
    the UI allows you to dive deeper into the optimizations that SVGO offers without
    having to pore over all of the configuration options. Loading an SVG element into
    the interface presents you with the following view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1130e1ce-0b61-4d6c-90a2-151487bc445e.png)'
  prefs: []
  type: TYPE_IMG
- en: The loaded SVG is on the left, shown in the optimized view. You can toggle the
    Show original button to see if there is any degradation of the visible image because
    of the optimizations.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that some of the optimizations that SVGO offers are potentially
    *lossy*. This means that the image itself might change in some visible way; the
    effective data of the image will be lost, because of the optimizations that are
    run.
  prefs: []
  type: TYPE_NORMAL
- en: Then, along the right side are many of the options available to you to tweak
    your images. There's a preview of the savings and then a download button that
    will allow you to download your handiwork.
  prefs: []
  type: TYPE_NORMAL
- en: While many people will automate this optimization as part of a build process,
    it's nice to know that you can have fine-grained control of this tool right on
    the web, with immediate feedback for your changes.
  prefs: []
  type: TYPE_NORMAL
- en: SVGO authoring plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the command-line tools available and the web-based interface,
    there are a couple of authoring plugins available for you to integrate SVGO right
    into your authoring workflow. `SVG-NOW` is a plugin for Adobe Illustrator (although
    it appears to have been abandoned; it hasn't been updated since 2014) and SVGO
    Compressor is an actively developed plugin to the popular application, Sketch.
    If you've got a design team, you can save yourself time and then surprises by
    integrating these optimizations earlier into the production process. Since they'll
    be in control of the export process, they'll know precisely what the output of
    SVGO optimization will be.
  prefs: []
  type: TYPE_NORMAL
- en: svgcleaner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: svgcleaner is an alternative to SVGO that offers *lossless optimizations* [(](https://github.com/RazrFalcon/svgcleaner)[https://github.com/RazrFalcon/svgcleaner](https://github.com/RazrFalcon/svgcleaner))*. *In
    comparison with SVGO, which has the potential to break things, svgcleaner promises
    to never break an SVG file. Browse their charts ([https://github.com/RazrFalcon/svgcleaner#charts](https://github.com/RazrFalcon/svgcleaner#charts))
    to see how they compare themselves to SVGO and scour (another alternative).
  prefs: []
  type: TYPE_NORMAL
- en: 'What''s more, there''s also a downloadable GUI ([https://github.com/RazrFalcon/svgcleaner-gui/releases](https://github.com/RazrFalcon/svgcleaner-gui/releases))
    that you can run on your desktop. The following screenshot shows it in action.
    All that''s happened to get to this state is to load an SVG element and to hit
    the Play button, which runs the optimization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e270fb80-99f5-4bf9-84bb-0f11ed55588a.png)'
  prefs: []
  type: TYPE_IMG
- en: Since it's built-in Rust and isn't a native Node.js application, it doesn't
    play as nicely with the `npm/node` world, but it's still a great tool.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This has been the lightest chapter in the book, but you still learned some things
    that will help you with SVG optimization. Keeping these factors and these tools
    in mind will ensure the best possible outcome for your users and will make sure
    your hard work with SVG will be seen in the best possible light.
  prefs: []
  type: TYPE_NORMAL
- en: And with that, our journey through the world of SVG comes to an end. From the
    most basic SVG elements, through complicated JavaScript visualizations and CSS-based
    animations, you've experienced the full breadth of what SVG has to offer. Hopefully,
    you've enjoyed the journey and will continue to work with SVG in the future.
  prefs: []
  type: TYPE_NORMAL
