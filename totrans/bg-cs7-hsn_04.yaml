- en: Making Delegates More Flexible with Generics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn about generic delegates. Remember, as in the previous
    lessons, the fundamental benefit is that generics allow you to create flexible
    code that can handle a variety of data types with ease. If there were no generics,
    you'd have to create a lot more code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a summarize button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bring up a project. In the basic HTML, delete the `<div>` lines, as you won't
    need them. Now, let's add a button. The only thing the button will do is to summarize
    some information for us.
  prefs: []
  type: TYPE_NORMAL
- en: Go to Toolbox and grab a `Button` control. Drag and drop it below the line beginning
    with `<form id=...`, and change the text on the button to say `Summarize`. Now,
    close this with a `<br>` tag and keep the `Label` control as usual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go to `Default.aspx`, and enter the Design view. You''ll see one button
    for the interface, which says Summarize and looks like *Figure 4.4.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe04105f-0be6-4f4c-9ce8-2963d98911aa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4.1: The simple interface for this project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, double-click on the Summarize button. This takes us into `Default.aspx.cs`.
    Delete the `Page_Load` block. Your initial code screen for this project should
    look like *Figure 4.4.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed08da42-eb35-4e4d-930e-2a6b51fc3090.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4.2: The initial Default.aspx.cs code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Constructing a delegate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, in order to make the delegate, above the line beginning with `public
    partial class...`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, `public` means accessible anywhere, `delegate` is a keyword, and `void`
    doesn't return a value. The delegate name is `Summarize`, and it can act on different
    data types because `T` is present and not integer, double, or something like that.
    `T` is a generic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now remember, delegates serve essentially as function wrappers. Correct? You
    use them to point to multiple functions, so you can cascade function calls, for
    example. The same principle holds here. So, for example, to make use of this,
    enter the following between a set of curly braces under the line beginning with
    `protected void Button1_Click...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Assigning functions to represent the delegate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the right-hand side, we first need to start assigning the functions that
    it represents. To do this, we can say the following, for example, below the closed
    curly brace after this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Imagine that the first thing you'll do is to find the sum of two values. So,
    you say, for example, `Find Sum` and then `double x` and `double y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can update the labels; so, enter the following between a set of curly
    braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can assign `FindSum` to `<int>` in the preceding line. You can set
    this equal, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, there are many other operations that you can perform. So, let''s
    take this code: this basic function that adds, and define some other operations.
    Copy (*Ctrl* + *C*) these two lines and paste (*Ctrl* + *V*) them down below.
    This time, change `FindSum` to `FindRatio` and basically follow the same plan.
    We''ll apply a `+=` operator to make sure that it''s appending. Then, to make
    a new line, put a `<br>` tag in there and, instead of `x + y`, change these to
    `x / y`. Of course, here you''d have to ensure that `y` is not `0`. We can figure
    that out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Let's do one more. So again, copy these two lines and paste them down below.
    This time, change `FindRatio` to `FindProduct`, which is the result of multiplying
    two values, and change `x / y` to `x * y`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Reminder:** If it''s brown (Windows) or orange (Mac) it shows on the screen
    exactly as it is.'
  prefs: []
  type: TYPE_NORMAL
- en: Always remember to put in the `<br>` tags so that stuff gets pushed down to
    the next line.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the delegate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we have to stack up these calls; so, enter the following beneath the `Summarize<double>
    s = FindSum;` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that you put the next function name, `FindRatio`, and then the next line
    will be `FindProduct`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, of course, to call it, enter the following on the very next line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how you would invoke that delegate: you will call it, specify the name,
    and then pass in those values of `4` and `5`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete version of the `Default.aspx.cs` file for the `double` data type,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the effects. For this, launch the program in your
    browser. Click on the Summarize button. The results are shown in *Figure 4.4.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/127431ed-b4c4-409f-b731-31ac2172b6bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4.3: The results of running our program for this project'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, 4+5=9, 4/5=0.8, and 4*5=20\. So, it's working as expected. The
    `public delegate void Summarize<T>(T x, T y);` line is a single, generic delegate
    and, because it has `T` there and not a fixed data type such as integer or double,
    it can operate on different data types.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you take your `Default.aspx.cs` page and search for all occurrences
    of `double` and replace them with `int`, seven occurrences will be replaced. If
    you run the code again, you'll see that it works equally well. Just to illustrate
    the point further, replace `int` with `decimal` and again seven occurrences are
    replaced. Now, it will be operating in decimal types and, if you click on the
    Summarize button once more, you'll see that it works equally well.
  prefs: []
  type: TYPE_NORMAL
- en: So, there you have a generic delegate. Remember, with a single button click,
    you can basically invoke a whole list of functions by chaining them together through
    the `s` delegate, which is of the Summarize type, which is generic so that it
    can operate on different data types equally well.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about generic delegates. You constructed a delegate,
    assigned functions to represent the delegate, and called the delegate.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about generic dictionaries.
  prefs: []
  type: TYPE_NORMAL
