- en: Chapter 5. Building the About Me Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we built a form potential for the clients to contact
    us. This is just one part of the formula of the current model for a portfolio
    site, either for personal business or for any other business use. The last aspect
    of this convention is the **About Me** page. This is arguably the least important
    page I have often seen and have had to consult with clients who do pretty weird
    stuff in this corner of their websites. That said, I think it is usually well-intentioned.
  prefs: []
  type: TYPE_NORMAL
- en: But before we get back to designing and coding, I want to put forward an argument
    for and against the **About Me** page.
  prefs: []
  type: TYPE_NORMAL
- en: Justifying the About Me page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Everyone wants their website to meet what can seem like two conflicting goals,
    which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Goal 1: We are professionals. Here is our work and our track record. We are
    different from our competitors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Goal 2: We are just people! And I am just like you! We have warm blood flowing
    through our veins just as you do!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, rhetorically speaking, this actually makes a lot of sense, right? You want
    to make an emotional connection with your audience. This is called pathos in the
    study of rhetoric. If you don't make an emotional connection, the likelihood of
    getting a client or a sale decreases for sure. But, believe it or not, I just
    genuinely enjoy connecting with people, hearing about their experiences, and I
    really enjoy helping them solve problems. Furthermore, I find it gratifying to
    communicate (whether via the web or by any other means) in ways that convey my
    warmth and humanity (hope I'm right about that one). It's pretty awesome that
    I get to make money while doing it.
  prefs: []
  type: TYPE_NORMAL
- en: I am not a rare breed. Despite some silly stereotypes, I find that web developers
    are very social people who also enjoy technology. So, why is it that so much of
    the software we make lacks personality and a human touch? No idea. But I am here
    to argue for more of it. As a user of any technology, anything that is designed
    to acknowledge my humanity, and the actual conditions of my living, makes me happy.
    They can give you a moment of delight or deeply gratifying experiences.
  prefs: []
  type: TYPE_NORMAL
- en: All of this is to say that the **About Me** page is a nice place to shed light
    on yourself (either individually or collectively) and is but one strategy for
    connecting with your audience. But if you haven't connected with your audience
    by the time you get to the **About Me** page, in the current vernacular "ur doin'
    it wrong". And if your clients ask you to do this, you are still doing it wrong.
    To me it's important to imbue a site with the right tone as well as to make the
    site really usable. For a portfolio site, this is deceptively easy because the
    conventions are pretty mature. And for this book we've just used the conventions
    to make the **About Me** page quickly. But ultimately, this is just a framework.
    It's up to you to be creative without being overwrought, by adding surprising
    things, or maybe just one surprising memorable thing to your site. Hopefully using
    a fast, easy framework gives you more time and brainspace to do this. My worst
    fear about frameworks is that they facilitate rapid production of sites that are
    all nearly indistinguishable.
  prefs: []
  type: TYPE_NORMAL
- en: So, my real point is, do have an **About Me** page, do it well, but make sure
    the whole site is also about you. It takes more work, and there are risks, but
    ultimately I think it's worth it. The other thing is this book isn't really about
    this; I am not going to teach you how to create the **About Me** page though this
    is the main topic of this chapter. That really warrants the attention of a whole
    book, not to mention a book that is less technical. So I apologize in advance
    that this chapter is going to be mainly about how to lay this page out.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that said, let''s get started on designing this page. The kind of content
    we will need on this page will be quite simple. It will include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Some details about the services we're going to offer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images of the company members. We will assume a small number for this scenario
    but include a strategy for dealing with a larger number. Obviously if this is
    just you, you're only going to need one photo. Make it good; some text for bio(s),
    something snappy, but also meaningful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making the wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at some wireframes for this page. For these examples, I
    am going to assume that this is a portfolio site for a one person. But if you
    had a small group, you would probably want to reconsider this layout. We will
    discuss more on this later. For now, here are the wireframes for the mobile view.
    First, the top part of the page (under the marquee, which will remain consistent):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making the wireframes](img/6463_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that we have three services listed and stacked. We''re going to use
    the set of included icons to make big, eye-catching icons to the left of each
    service/skill described. Below the icon we will put the obligatory headshot and
    bio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making the wireframes](img/6463_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now here is how we will use the same content on a wider desktop layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making the wireframes](img/6463_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We'll use the wider layout of this page to put some of the content on the sidebar.
    This has the benefit of letting users see more content without scrolling.
  prefs: []
  type: TYPE_NORMAL
- en: The markup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the markup for this page. This page will have a special technical
    challenge, since neither does 320 and Up ship a way to make this kind of sidebar,
    nor was it really meant to. Other frameworks such as Bootstrap and Foundation
    have that facility. We will roll our own solution though. No need to introduce
    an entire framework to solve this single problem. With that said, I will be taking
    a cue from how these frameworks do this.
  prefs: []
  type: TYPE_NORMAL
- en: To work this problem through, let's start off with some pretty basic markup
    for the mobile layout. First, let's add another, our last, marquee (don't shed
    a tear, though; you can make as many as you want in the future).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Hopefully this all makes sense by now. Now let''s add our first bit of markup
    for the main area, the one that describes all the stuff we have to offer. We know
    we need the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: A wrapper for all the content, so we can pad and set width on the content of
    the page as necessary for various screen widths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A wrapper for the main content and the sidebar content, for similar reasons
    as the previous point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various containers and markup for all the actual content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So here it goes. Let''s put this markup below the marquee:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We've re-used the `.full` class that applies the same styles on all our main
    content, which is mainly padding and margin. I've created a lot of new classes
    too. Right now there are no styles for them but let me explain my thinking before
    I go ahead and style them.
  prefs: []
  type: TYPE_NORMAL
- en: The next container after `.full` is the `.main-content` container. It will not
    do much in the mobile view, but as the layout gets wider we will assign a size
    to it and float it so there is room to float the `.sidebar-container` to the right
    (spoiler alert).
  prefs: []
  type: TYPE_NORMAL
- en: Within the `.main-content` container, we are going to have three chunks of content
    consisting of an icon, a heading, and some text. I gave each chunk the class `.content-item`.
    Inside the class, there is a `div` tag that I will change into a circle (well,
    for modern browsers anyway) that will frame icons. That is followed by the `content-body`
    `div` class, which will hold a heading and a short blurb about my special prowess
    that I want to describe. Rinse and repeat the `content-items` class as much as
    you like, but I like sets of three. Three is a magic number after all.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that I use the `icon` classes that are in the framework. They utilize
    the `font-awesome` font. They are super easy to implement and are super flexible
    as you will see when we start to style them. All you need to do to get them to
    appear in your markup is add the appropriate class to your markup. I add these
    classes to the `<i>` tag, which is something of a convention, but you can just
    easily use them on a `<span>` tag, `<a>`, or whatever as long as the markup makes
    sense. You will notice that I also add the class `.big-icon` on each one. That
    is because I anticipate that I will need an additional style to make these big
    and add some other styling for larger layouts. Next, let's take advantage of the
    set of icon fonts that ship with 320 and Up.
  prefs: []
  type: TYPE_NORMAL
- en: Awesome icon fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For future reference, take a look at the `_font-awesome.scss` (or similar)
    file and you will see a list of all the icons created by the styles to facilitate
    the use of the `font-awesome` icon fonts. These are just prerolled for us but
    if you need a new icon that has been added to `font-awesome`, you will need to
    add it to this list (or one of your own making). You will notice that the icon
    is actually specified with the `content` attribute. For example, the lemon icon
    CSS looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is because the icon is specified with the Unicode character `F094`. You
    can look this up at [http://fortawesome.github.io/Font-Awesome/icons/](http://fortawesome.github.io/Font-Awesome/icons/).
    Just click on each icon to get to know a little more about each one.
  prefs: []
  type: TYPE_NORMAL
- en: 'While we''re here, let''s take a quick look at what else is going on to support
    these icon fonts. At the top of the `_font-awesome.scss` sheet, you will see that
    anything that has a class beginning with `icon-` gets some style by default. That
    is specified with this style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The previous code targets anything beginning with or containing `icon-`. This
    is done with the regex `^` and `*`. Regex is the shorthand for regular expressions.
    Regular expressions are a utility for searching strings; they use various symbols
    to accomplish this task. Regex is a huge topic beyond the scope of this book but
    just know that, by using these symbols in CSS, the CSS engine searches selector
    strings in your markup. Not all the available regex symbols can be used in CSS,
    but the use of `^` and `*` can be quite powerful.
  prefs: []
  type: TYPE_NORMAL
- en: Keep reading and you will see that there are additional styles applied if you
    use these classes on the `<li>` or `<a>` elements. There are even special styles
    defined for putting elements inside buttons or the `<li>`tags. We won't be using
    these but please do experiment with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go ahead and refresh your page, this won''t look too great; so let''s
    get on with styling this for the 320 and Up layout. The first thing I want to
    do is make the circles that will hold our icons. I want all these circles to be
    of the same size, so I am going to set a uniform size as well as a few other styles
    that I will explain in a moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I actually arrived at these dimensions through a little trial and error but
    I won't bore you with that. The border radius is set to half of the height and
    width of the element. That is the recipe for making a circle. Obviously, someone
    using an old browser will get a square. If you're not okay with that, you can
    put some kind of `polyfill` or fallback in place. Notice that I used the mixin
    to make the vendor-specific border radius, but if you're using plain CSS you will
    need to type all of these.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, I set the `position` to `relative` on these icons so I can absolutely
    position each icon within the circle. They all have different dimensions, so they
    will each get a unique position to accommodate that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move on to styling and positioning them. Put these styles below the
    `.circle` style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code is the SCSS code. Here is what regular CSS looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `.big-icon` styles just make the icons bigger, white and with a little shadow
    that makes them look like they've been subtly embossed into the circle. Kind of
    a cool effect I think. I also set the `position` to `absolute` here for all the
    icons. I arrived at all the positions of the icons through a combination of math
    and eyeballing it.
  prefs: []
  type: TYPE_NORMAL
- en: Here's the math method. Looking at the icons in the developer tools in my browser
    I get the dimensions. Using the fire icon, for example, I see that it measures
    22 x 25 pixels. So to get the left positioning, I subtract the width of the icon
    from the width of the circle, that is, 56 – 22 = 34\. Divide that by 2 to get
    the left position because the left position is on the top-left of the icon, so
    we need the distance from the left edge of the icon to the center of the icon.
    This gives us a left position of 17 px. But then I eyeballed it and liked 18 px
    better, go figure. Rinse and repeat for the remaining icons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to position the text to the right of each icon. Here''s how that
    will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is pretty simple. The only thing that may seem weird is the `overflow:
    hidden` business. All that it does is make sure the text stays in a tidy little
    box, rather than flowing around the icon `div`. To learn more about this, you
    should consult Google, but you can refer a fabulous article at [http://alistapart.com/article/css-floats-101](http://alistapart.com/article/css-floats-101).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and refresh the page and take a look. Looks pretty great, but the
    icon is too close to the text. Let''s fix that. Add the following code to your
    circle styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Ah! Now it looks good! Let''s move on to adding our picture and bio. Here is
    the markup we will need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we are using the large placeholder image we used for the gallery
    page, but of course you need to use your own favorite glamor shot. Speaking of
    the gallery page, we will need to use some similar styles here to get the image
    and text to look right. Since we have re-used the `full` class on both sections,
    there is an appropriate amount of space between the bio content and the edge of
    the viewport. We just need to put a margin below the image to push that header
    down. Add this style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to adjust the margin according to your tastes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at this layout at 320 px wide and everything is hunky-dory. Let''s
    get this to layout as two columns when the screen is 992 px wide or greater. Go
    ahead and resize your browser to 992 px (or just look at it on a tablet or something).
    It looks pretty weird. Luckily, all we should need to do is assign the appropriate
    percentage widths to these and float them. Try adding these styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the classes `summary` and `bio` on each block of content now. Go
    ahead and refresh and you will notice that the footer is now trying to squeeze
    into the tiny area between the columns. Easily fixed. Just add this style to your
    footer styles in the `_site.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Fixed!
  prefs: []
  type: TYPE_NORMAL
- en: Ok, that is all!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned to use icon fonts and style them so they look every
    bit as good as bitmap images; however, they are far more flexible since we can
    resize, color, and add simple effects such as shadows via CSS. We also whipped
    up a custom layout very quickly to accommodate our content needs. Awesome! Now
    go out there and use what we've done to build great stuff for yourself and your
    clients!
  prefs: []
  type: TYPE_NORMAL
