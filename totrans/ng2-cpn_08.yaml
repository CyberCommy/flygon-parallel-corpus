- en: Chapter 8. Integrating Third-Party Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of UI components built with other libraries that we might want
    to use in our Angular 2 application. Throughout this chapter we will integrate
    a tooltip widget from the popular bootstrap library.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the bootstrap and jQuery libraries are the topics that we cover in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we continue, let''s create a new project. Open `app.component.ts` and
    remove the external links to the HTML template and the CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Importing dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we are going to wrap a component from the bootstrap library, we first
    need to download and import the bootstrap library and its dependencies and import
    it in to our code. The first step will be to install `bootstrap` with `npm`. Open
    the Terminal, make sure that you are inside the project root, and type `npm install
    bootstrap -S`. This command will download the bootstrap files into the `node_modules`
    and write it on the `package.json`.
  prefs: []
  type: TYPE_NORMAL
- en: Since bootstrap is dependent on jQuery library, we need to install it as well.
    We will use `npm` for it as well. In the Terminal, type `npm install jquery –S`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to install corresponding typings for these two libraries to be
    able to compile the application. The names of the corresponding typing modules
    are the same as the target libraries but with the `@types` prefix. To install
    them, just use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The CSS file of the `Bootstrap` library needs to be configured globally for
    the application in the styles section of the `angular-cli.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the latest versions of the Angular CLI rely on `Webpack`, we use its
    expose loader to make available jQuery globally to the `Bootstrap` library. The
    latter needs this to extend jQuery by adding a set of methods such as `tooltip`
    and `collapse`. To install the `expose loader`, just use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can now import both jQuery and Bootstrap where we need them using the `import`
    clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move forward, open `app.component.ts` and add the following import
    statements for the jQuery and Bootstrap libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Bootstrap tooltip component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular 2''s ability to bind to element properties and events without the need
    for custom directives enables us to integrate with third-party code easily. Bootstrap
    uses some custom attributes to make the tooltip work. We can use it as is. Open
    `app.component.ts` and add the bootstrap attributes to the heading to display
    a tooltip from the bottom. We also need to leverage the `AfterViewInit` hook to
    initialize the tooltip when the template is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s open the browser and test it. Hover over the title and wait for
    the tooltip to appear at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap tooltip component](../Images/image00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's integrate it with Angular and make it dynamic. The process is straightforward.
    We can bind to each property that we want to control. Let's start with the `title`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `app.component.ts` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We didn''t have to write a single line of code in our component class to make
    it work. Open the browser, type a title, and hover over the title to see the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap tooltip component](../Images/image00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Bootstrap collapse component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's try another example, but this time we will bind to events as well. For
    this example we will use another widget from the bootstrap library called `collapse`.
    In the `components` folder, create a new folder named `collapse`. Inside it, create
    a file named `collapse.ts` for our component and a file named `collapse.html`
    for the `component` template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `collapse.ts` and paste the following code. This is an example collapse
    widget that was taken *as-is* from the bootstrap website ([http://getbootstrap.com/javascript/#collapse](http://getbootstrap.com/javascript/#collapse)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `collapse.html` and paste in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s render the component. Open `app.component.ts`, import the `collapse`
    component, and use it in the template as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to add the `Collapse` class to the `declarations` attribute of
    the root module of the application to make the `collapse` component usable, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the browser to test the collapse event:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap collapse component](../Images/image00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We already know how to bind to properties from the tooltip example. In this
    example, we will bind to the collapse events.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the bootstrap documents, the collapse fires four events throughout
    it''s life cycle. We will focus on two of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`show.bs.collapse`: This method fires when the `show` method is called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hide.bs.collapse`: This method fires when the `hide` method is called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we want to listen to those events, we need to hold a reference to the DOM
    element. For this, we will inject `ElementRef`. Open `collapse.ts` and the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: There is a lot of ways to listen to an event on an element. We choose to use
    jQuery to wrap the native element and register an event listener for the collapse.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can open the browser and watch the logs in the console corresponding to
    the collapse events:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap collapse component](../Images/image00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular 2 plays well with third-party code by enabling binding to native properties
    naturally. On the other hand, if we need to hold a reference to the DOM element,
    we can inject `ElementRef in` to our component.
  prefs: []
  type: TYPE_NORMAL
