- en: Chapter 8. Integrating Third-Party Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of UI components built with other libraries that we might want
    to use in our Angular 2 application. Throughout this chapter we will integrate
    a tooltip widget from the popular bootstrap library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Importing the bootstrap and jQuery libraries are the topics that we cover in
    this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our development environment
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we continue, let''s create a new project. Open `app.component.ts` and
    remove the external links to the HTML template and the CSS file:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Importing dependencies
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we are going to wrap a component from the bootstrap library, we first
    need to download and import the bootstrap library and its dependencies and import
    it in to our code. The first step will be to install `bootstrap` with `npm`. Open
    the Terminal, make sure that you are inside the project root, and type `npm install
    bootstrap -S`. This command will download the bootstrap files into the `node_modules`
    and write it on the `package.json`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Since bootstrap is dependent on jQuery library, we need to install it as well.
    We will use `npm` for it as well. In the Terminal, type `npm install jquery –S`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to install corresponding typings for these two libraries to be
    able to compile the application. The names of the corresponding typing modules
    are the same as the target libraries but with the `@types` prefix. To install
    them, just use the following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The CSS file of the `Bootstrap` library needs to be configured globally for
    the application in the styles section of the `angular-cli.json` file:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since the latest versions of the Angular CLI rely on `Webpack`, we use its
    expose loader to make available jQuery globally to the `Bootstrap` library. The
    latter needs this to extend jQuery by adding a set of methods such as `tooltip`
    and `collapse`. To install the `expose loader`, just use the following command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can now import both jQuery and Bootstrap where we need them using the `import`
    clause.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move forward, open `app.component.ts` and add the following import
    statements for the jQuery and Bootstrap libraries:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Bootstrap tooltip component
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular 2''s ability to bind to element properties and events without the need
    for custom directives enables us to integrate with third-party code easily. Bootstrap
    uses some custom attributes to make the tooltip work. We can use it as is. Open
    `app.component.ts` and add the bootstrap attributes to the heading to display
    a tooltip from the bottom. We also need to leverage the `AfterViewInit` hook to
    initialize the tooltip when the template is rendered:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s open the browser and test it. Hover over the title and wait for
    the tooltip to appear at the bottom:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap tooltip component](../Images/image00115.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Now, let's integrate it with Angular and make it dynamic. The process is straightforward.
    We can bind to each property that we want to control. Let's start with the `title`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `app.component.ts` and add the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We didn''t have to write a single line of code in our component class to make
    it work. Open the browser, type a title, and hover over the title to see the result:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap tooltip component](../Images/image00116.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: Bootstrap collapse component
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's try another example, but this time we will bind to events as well. For
    this example we will use another widget from the bootstrap library called `collapse`.
    In the `components` folder, create a new folder named `collapse`. Inside it, create
    a file named `collapse.ts` for our component and a file named `collapse.html`
    for the `component` template.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `collapse.ts` and paste the following code. This is an example collapse
    widget that was taken *as-is* from the bootstrap website ([http://getbootstrap.com/javascript/#collapse](http://getbootstrap.com/javascript/#collapse)):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Open `collapse.html` and paste in the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s render the component. Open `app.component.ts`, import the `collapse`
    component, and use it in the template as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Don''t forget to add the `Collapse` class to the `declarations` attribute of
    the root module of the application to make the `collapse` component usable, as
    shown in the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, open the browser to test the collapse event:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap collapse component](../Images/image00117.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: We already know how to bind to properties from the tooltip example. In this
    example, we will bind to the collapse events.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the bootstrap documents, the collapse fires four events throughout
    it''s life cycle. We will focus on two of them:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '`show.bs.collapse`: This method fires when the `show` method is called.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hide.bs.collapse`: This method fires when the `hide` method is called.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hide.bs.collapse`：当调用`hide`方法时，此方法将触发。'
- en: 'If we want to listen to those events, we need to hold a reference to the DOM
    element. For this, we will inject `ElementRef`. Open `collapse.ts` and the following
    code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要监听这些事件，我们需要保存对DOM元素的引用。为此，我们将注入`ElementRef`。打开`collapse.ts`并添加以下代码：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There is a lot of ways to listen to an event on an element. We choose to use
    jQuery to wrap the native element and register an event listener for the collapse.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以监听元素上的事件。我们选择使用jQuery来包装原生元素，并为折叠注册事件监听器。
- en: 'You can open the browser and watch the logs in the console corresponding to
    the collapse events:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以打开浏览器并观看控制台中与折叠事件对应的日志：
- en: '![Bootstrap collapse component](../Images/image00118.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap折叠组件](../Images/image00118.jpeg)'
- en: Summary
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Angular 2 plays well with third-party code by enabling binding to native properties
    naturally. On the other hand, if we need to hold a reference to the DOM element,
    we can inject `ElementRef in` to our component.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2通过自然地绑定到原生属性，与第三方代码很好地配合。另一方面，如果我们需要保存对DOM元素的引用，我们可以在组件中注入`ElementRef`。
