- en: Troubleshooting MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned an important aspect of the MySQL 8 database,
    benchmarking, and best practices. Benchmarking helps in comparing the current
    database performance against the expected performance matrices. We learned what
    benchmarking is and the tools that can be used to find the benchmark performance
    of a MySQL 8 server. In a later part of the chapter, we learned about the best
    practices to be followed for memcached, replication, partitioning, and indexing.
    Best practices help ensure the optimum configuration of the MySQL 8 database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the focus will be on understanding the common errors that
    we may encounter while working with the MySQL 8 database. The errors may be server
    errors or client errors. We will look at a way to determine that the problem has
    occurred. We will also learn troubleshooting and resolution techniques for errors.
    In a later part of the chapter, we will look into real-world scenarios where these
    techniques are applicable. The following is the list of topics to be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 common problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 server errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 client errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 troubleshooting approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-world scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 common problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When troubleshooting is an issue, the first thing to be done is to find out
    the program or piece of equipment that is causing it when we run into a problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are symptoms that indicate a hardware or kernel problem:'
  prefs: []
  type: TYPE_NORMAL
- en: The keyboard is not functioning. It can be checked by pressing the *Caps Lock*
    key. If the light on the *Caps Lock* key does not light up, it is an issue with
    the keyboard. Similarly, the mouse not moving indicates an issue with the mouse.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ping` is an operating system command to check the accessibility of one machine
    from another machine. The machine from which the ping command is executed is called
    the **local machine**, whereas the machine pinged is called the **remote machine**.
    If the remote machine does not respond to the local machine''s pings, it indicates
    a hardware or network related issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may indicate an issue with the operating system kernel program if the programs
    other than MySQL are not working correctly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may indicate an issue with the operating system or hardware if the system
    restarts unexpectedly. In a typical case, a user-level program should never be
    able to take the system down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To troubleshoot the issue, one or more of the following can be done:'
  prefs: []
  type: TYPE_NORMAL
- en: Run a diagnostic tool to check hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure the relevant library files are up to date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for the availability of updates, patches, or service packs for the operating
    system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check all connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ECC memory` is an error correcting code memory. It can detect and correct
    most common internal data corruption issues. It is advisable to use ECC memory
    in order to detect the memory issues at an early stage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following instructions may help further identify the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: Examining the system log files may help to discover the reason for the problem.
    MySQL log files  must also be checked in case there appears to be an issue with
    MySQL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating system specific commands can be used to check issues with memory,
    file descriptors, disk space, or other critical resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bug can be identified in the operating system kernel if a problematic runaway
    process does not die even though we have executed a command to kill it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there appears not to be a problem with the hardware, attempts should be made
    to identify the program that may be causing the problem. Using operating system
    specific commands, such as Task manager on Windows, `ps` and `top` on Linux, or
    similar programs, we can identify programs that eat up CPU or block system processes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is possible to recover the access to the machine even though the keyboard
    is locked up. This can be done by logging on to the system from another machine.
    Execute the `kbd_mode -a` command upon successful login.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL users can report issues by using one of the multiple channels provided
    by MySQL. After having examined all the possible alternatives, if it can be decided
    that either the MySQL server or the MySQL client causes the problem, a user can
    either create a bug report for the mailing list or contact the MySQL support team.
    The bug reporter must provide detailed information about the bug, system information,
    and behavior and the expected behavior. The reporter must describe the reason
    based on why it seems to be a MySQL bug. It is useful to know the following information
    if the program fails:'
  prefs: []
  type: TYPE_NORMAL
- en: With the help of the `top` command, check if the program in question has taken
    up all the CPU time. In such cases, we should allow a program to run for a while
    because it is possible that the program may be executing intensive computational
    instructions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observe the response from the MySQL server when a client program tries to connect
    to it. Has it stopped responding? Did the server provide any output?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is found that the MySQL server is causing problems in the `mysqld` program,
    try to connect using the `mysqladmin` program to check whether `mysqld` responds.
    The `mysqladmin -u root ping` or `mysqladmin -u root processlist` commands can
    be used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Did the failed program make a segmentation fault?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most common MySQL errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section provides a list of the most common MySQL errors that users encounter
    very frequently.
  prefs: []
  type: TYPE_NORMAL
- en: Access denied
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL provides a privilege system that authenticates the user who connects from
    a host, and associates the user with access privileges on a database. The privileges
    include `SELECT`, `INSERT`, `UPDATE`, and `DELETE` and are able to identify anonymous
    users and grant privileges for MySQL specific functions, such as `LOAD DATA INFILE`
    and administrative operations.
  prefs: []
  type: TYPE_NORMAL
- en: The access denied error may occur because of many causes. In many cases, the
    problem is caused because of MySQL accounts that the client programs use to connect
    with the MySQL server with permission from the server.
  prefs: []
  type: TYPE_NORMAL
- en: Can't connect to [local] MySQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will focus on the circumstances in which Can't connect to
    MySQL server error is encountered. But before we jump onto error-specific details,
    it is necessary to understand how the MySQL client connects to the MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Unix system, two different ways are available for the MySQL client to
    connect to the `mysqld` server process. The following are the details of these
    two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TCP/IP connection**: The `mysqld` server process listens for client connections
    on a specific port. The MySQL clients connects to the server using the specified
    TCP/IP port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unix socket file**: In this mode of connection, a Unix socket file is used
    to connect through a file in the filesystem (`/tmp/mysql.sock`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The socket file connection is faster compared to TCP/IP but it can be used when
    connecting to a server on the same machine. To use the Unix socket file, we do
    not specify a hostname or a special hostname localhost should be specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the ways for the MySQL client to connect to the MySQL server
    on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TCP/IP connection**: As described previously for the Unix systems, the TCP/IP
    connection runs on a specified port number. The MySQL client connects to the port
    on which the MySQL server is listening.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Named pipe connection**: The MySQL server can be started with the `--enable-named-pipe`
    option. If the client is running on the host on which the server is running, the
    client can connect with named pipes. **MySQL** is the default name of the named
    pipe. If no hostname is provided while connecting to the `mysqld` server process,
    MySQL first tries to connect to the default named pipe. If it is unable to connect
    to the named pipe, it tries to connect to the TCP/IP port. The use of named pipes
    can be forced on Windows by using `.` as the hostname.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL errors are identified by predefined unique error codes. The same error
    can have different error codes associated with it. The Can't connect to MySQL
    server error with the error code `2002` indicates one of three problems. It can
    be that the MySQL server is not running on the system, or the Unix socket filename
    provided is incorrect, or the TCP/IP port number provided to connect to the server
    is incorrect. The TCP/IP port may be blocked by the firewall or the port blocking
    service.
  prefs: []
  type: TYPE_NORMAL
- en: The error code `2003` also associates with can't connect to MySQL server. It
    indicates refusal of the network connection by the server. It should be checked
    if the MySQL server has network connections enabled, the MySQL server is running,
    and the specified network port is configured on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command can be used to ensure that the `mysqld` server process
    is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `mysqld` server process is not running, we should start the server.
    If the server is already running, the following commands should be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding commands, `hostname` is the hostname of the machine on which
    the MySQL server is running. `host_ip` is the IP address of the server machine.
  prefs: []
  type: TYPE_NORMAL
- en: Lost connection to MySQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The lost connection to MySQL server error can occur because of one of the three
    likely causes explained in this section.
  prefs: []
  type: TYPE_NORMAL
- en: One of the potential reasons for the error is that the network connectivity
    is troublesome. Network conditions should be checked if this is a frequent error.
    If the **during query** message is part of the error message, it is certain that
    the error has occurred because of network connection issues.
  prefs: []
  type: TYPE_NORMAL
- en: The `connection_timeout` system variable defines the number of seconds that
    the `mysqld` server waits for a connection packet before connection timeout response.
    Infrequently, this error may occur when a client is trying for the initial connection
    to the server and the `connection_timeout` value is set to a few seconds. In this
    case, the problem can be resolved by increasing the `connection_timeout` value
    based on the the distance and connection speed. `SHOW GLOBAL STATUS LIKE` and `Aborted_connects` can
    be used to determine if we are experiencing this more frequently. It can be certainly
    said that increasing the `connection_timeout` value is the solution if the error
    message contains **reading authorization packet**.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible that the problem may be faced because of larger **Binary Large
    OBject** (**BLOB**) values than `max_allowed_packet`. This can cause a lost connection
    to the MySQL server error with clients. If the `ER_NET_PACKET_TOO_LARGE` error
    is observed, it confirms that the `max_allowed_packet` value should be increased.
  prefs: []
  type: TYPE_NORMAL
- en: Password fails when entered incorrectly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL clients ask for a password when the client program is invoked with the `--password`
    or `-p` option without the password value. The following is the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: On a few systems, it may happen that the password works fine when specified
    in an option file or on the command line. But it does not work when entered interactively
    on the Command Prompt at the `Enter password:` prompt. It occurs because the system-provided
    library to read the passwords limits the password values to a small number of
    characters (usually eight). It is an issue with the system library and not with
    MySQL. As a workaround to this, change the MySQL password to a value that is eight
    or fewer characters or store the password in the option file.
  prefs: []
  type: TYPE_NORMAL
- en: Host host_name is blocked
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the `mysqld` server receives too many connection requests from the host
    that is interrupted in the middle, the following error occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `max_connect_errors` system variable determines the number of successive
    interrupted connection requests that are allowed. Once there are `max_connect_errors`
    failed requests without a successful connection, `mysqld` assumes that something
    is wrong and blocks the host from further connections until the `FLUSH HOSTS`
    statement or `mysqladmin flush-hosts` command is issued.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqld` blocks a host after 100 connection errors as a default. It can be
    adjusted by setting the `max_connect_errors` value on the server startup, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This value can also be set up at runtime, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It should be checked first that there is nothing wrong with TCP/IP connections
    from the host if the `host_name` is blocked error is received for a particular
    host. Increasing the value of the `max_connect_errors` variable does not help
    if the network has problems.
  prefs: []
  type: TYPE_NORMAL
- en: Too many connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This error indicates that all available connection are in use for other client
    connections. The `max_connections` is the system variable that controls the number
    of connections to the server. The default value for the maximum number of connections
    is 151\. We can set a larger value than 151 for the `max_connections` system variable
    to support more connections than 151.
  prefs: []
  type: TYPE_NORMAL
- en: The `mysqld` server process actually allows one more than `max_connections`
    (`max_connections + 1`) value clients to connect. The additional one connection
    is kept reserved for accounts with `CONNECTION_ADMIN` or the `SUPER` privilege.
    The privilege can be granted to the administrators with access to the `PROCESS`
    privilege. With this access, the administrator can connect to the server using
    the reserved connection. They can execute the `SHOW PROCESSLIST` command to diagnose
    the problems even though the maximum number of client connections is exhausted.
  prefs: []
  type: TYPE_NORMAL
- en: Out of memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the `mysql` does not have enough memory to store the entire request of the
    query issued by the MySQL client program, the server throws the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In order to fix the problem, we must first check if the query is correct. Do
    we expect the query to return so many rows? If not, we should correct the query
    and execute it again. If the query is correct and needs no correction, we can
    connect `mysql` with the `--quick` option. Using the `--quick` option results
    in the `mysql_use_result()` C API function for fetching the result set. The function
    adds more load on the server and less load on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Packet too large
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The communication packet is one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A single SQL statement that the MySQL client sends to the MySQL server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single row that is sent to the MySQL client from the MySQL server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A binary log event that is sent from a replication master server to the replication
    slave
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 1 GB packet size is the largest possible packet size that can be transmitted
    to or from the MySQL 8 server or client. The MySQL server or client issues an
    `ER_NET_PACKET_TOO_LARGE` error and closes the connection if it receives a packet
    bigger than `max_allowed_packet` bytes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default `max_allowed_packet` size is 16 MB for the MySQL client program.
    The following command can be used to set a larger value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The default value for the MySQL server is 64 MB. It should be noted that there
    is no harm in setting a larger value for this system variable, as the additional
    memory is allocated as needed.
  prefs: []
  type: TYPE_NORMAL
- en: The table is full
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The table-full error occurs in one of the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: The disk is full
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The table has reached the maximum size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The actual maximum table size in the MySQL database can be determined by the
    constraints imposed by the operating system on the file sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Can't create/write to file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This indicates that MySQL is unable to create a temporary file in the temporary
    directory for the result set if we get the following error while executing a query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The possible workaround for the error is to start the `mysqld` server with
    the `--tmpdir` option. The following is the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As an alternative, it can be specified in the `[mysqld]` section of the MySQL
    configuration file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Commands out of sync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the client functions are called in the wrong order, the commands out of sync
    error is received. It means that the command cannot be executed in the client
    code. As an example, if we execute `mysql_use_result()` and try to execute another
    query before executing `mysql_free_result()`, this error may occur. It may also
    happen if we execute two queries that return a result set without calling the `mysql_use_result()`
    or `mysql_store_result()` functions in between.
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following error is received when an account in the user table is found
    with an invalid password upon the `mysqld` server startup or when the server reloads
    the grant tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The account is ignored by the MySQL permission system as a result. To fix the
    problem, we should assign a new valid password for the account.
  prefs: []
  type: TYPE_NORMAL
- en: Table tbl_name doesn't exist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following error indicates that a specified table does not exist in the
    default database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In some cases, the user may be referring to the table incorrectly. It is possible
    because the MySQL server uses directories and files for storing database tables.
    Depending upon the operating system file management, the database and table names
    can be case sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: For non case-sensitive filesystems, such as Windows, the references to a specified
    table used within a query must use the same letter case.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 server errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section focuses on MySQL 8 server errors. The section describes the errors
    related to MySQL server administration, table definitions, and known issues in
    the MySQL 8 server.
  prefs: []
  type: TYPE_NORMAL
- en: Issues with file permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the `UMASK` or `UMASK_DIR` environment variables are set incorrectly upon
    server startup, we may have problems with file permissions. The MySQL server may
    issue following error message upon table creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The default values for `UMASK` and `UMASK_DIR` system variables are 0640 and
    0750, respectively. If the value of these environment variables starts with zero,
    it indicates to the MySQL server that the values are in octal. For example, the
    default values 0640 and 0750 in octal are equivalent to 415 and 488, respectively,
    in decimal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to change the default `UMASK` value, we should start `mysqld_safe`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The MySQL server creates database directories with a default access permission
    value of `0750`. We can set the `UMASK_DIR` variable to modify this behavior.
    If this value is set, new directories are created with access permission values
    as a combination of the `UMASK` and `UMASK_DIR` values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of providing group access to all new directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Resetting the root password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL server does not need a password for connecting as a root user if the
    root password is never set in MySQL. If the password was assigned earlier has
    been forgotten, it can be reset.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the instructions to reset the `root @ localhost` account
    password on the Windows system:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the system using system administrator credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the MySQL server is already running, stop the server. If the MySQL server
    is running as a Windows service, go to **Services** by following Start menu |
    Control panel | Administrative tools | Services. In the services, find the MySQL
    service and stop it. If the MySQL server is not running as a Windows service,
    kill the MySQL server process by using Windows Task Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the MySQL server is stopped, create a text file that has a single line
    of the password assignment statement, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Save the file. For example, the file is saved as `C:\mysql-root-reset.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Windows Command Prompt by following Start menu | Run | cmd.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Command Prompt, start the MySQL server with the `--init-file` option,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Once the MySQL server is restarted, delete the`C:\mysql-root-reset.txt`file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following are the instructions to reset the root user password on Unix-like
    systems:'
  prefs: []
  type: TYPE_NORMAL
- en: Log on to the system with the same user the the MySQL server runs by. Usually,
    it is `mysql` user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the MySQL server is already running, stop the server. To accomplish this,
    find the `.pid` file containing the process ID of the MySQL server. Depending
    on the Unix distribution, the actual location and name of the file may differ.
    The usual locations are `/var/lib/mysql/`, `/var/run/mysqld/`, and `/usr/local/mysql/data/`.
    Usually, the filename begins with either `mysqld` or the hostname of the system
    and has an extension of `.pid`. The MySQL server can be stopped by sending a normal
    kill command to the `mysqld` server process. The following command can be used
    with actual path name of the `.pid` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the MySQL server is stopped, create a text file that has a single line
    of the password assignment statement, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Save the file. It is assumed that the file is stored at `/home/me/mysql-reset-root`.
    As the file contains the password for the root user, it should be ensured that
    other users are not able to read it. If we are not logged in with the appropriate
    user, we should make sure that the user has permission to read the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the MySQL server with the `--init-file` option, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Once the server is started, delete the file at `/home/me/mysql-reset-root`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following are the generic instructions to reset the root user password:'
  prefs: []
  type: TYPE_NORMAL
- en: If the MySQL server is running, stop the server. Once it is stopped, restart
    the MySQL server with the `--skip-grant-tables` privilege. Along with `--skip-grant-tables`,
    the `--skip-networking` option is automatically enabled so as to prevent remote
    connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect to the MySQL server using the `mysql` client program. As the server
    is started with `--skip-grant-tables`, no password is necessary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the MySQL client itself, ask the server to reload the grant tables. This
    will enable account management statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the `root @ localhost` account password by using following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Restart the server and log in with the root user and newly set password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MySQL crashes prevention
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a standard release practice, every MySQL version is verified on different
    platforms before its release. It is assumed that MySQL may have a few hard to
    find bugs. As we encounter an issue with MySQL, it is helpful if we try to find
    out the cause for the system crash. The first thing to identify is if the `mysqld`
    server process crashes or the issue is with the MySQL client program. It can be
    checked how long the MySQL server was up for by executing the `mysqladmin version`
    command. The following is an example output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `resolve_stack_dump` is a utility program that resolves a numeric stack
    dump to symbols. To analyze the root cause of where the `mysqld` server process
    died, we find in the stack trace error logs. It can be resolved with the `resolve_stack_dump`
    program. It must be noted that it is possible that variable values found in the
    error logs may not be accurate.
  prefs: []
  type: TYPE_NORMAL
- en: Corrupted data or index files can cause the MySQL server to crash. These files
    are updated on the disk using the `write()` system called upon the execution of
    each SQL statement and before the client is notified about the result. It means
    that the contents in the data files are safe even in the event of a `mysqld` crash.
    The writing of the unflushed data on the disk is taken care of by the operating
    system. The `--flush` option can be used with `mysqld` to force MySQL to flush
    everything to disk after every SQL statement execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the following can be the reason for MySQL corrupted tables:'
  prefs: []
  type: TYPE_NORMAL
- en: If the data file or index file crashes then it contains corrupted data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bug in the MySQL server process caused the server to die in the middle of
    an update.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An external program manipulated the data and index files at the same time as
    `mysqld` without table locking.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the middle of an update, the MySQL server process was killed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many `mysqld` servers are running on the system. The servers use the same data
    directory. The system does not have good filesystem locks or the external locking
    is disabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is possible that a bug is found in the data storage code. We can try to change
    the storage engine by using `ALTER TABLE` on the repaired copy of the table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling MySQL full disk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section focuses on the response from MySQL to disk-full errors and quota-exceeded
    errors. It is more relevant to writes in `MyISAM` tables. It can be applied to
    writes in binary log files and an index file. It excludes the references to rows
    and records that should be considered an event.
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL performs the following when a disk-full condition occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL ensures that there is enough space available to write the current row.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MySQL server writes an entry in the log file every 10 minutes. It warns
    about the disk-full condition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following actions should be taken to remedy the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: The disk space should be freed to make sure enough space is available to insert
    all records.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can execute the `mysqladmin kill` command to abort the thread. The next time
    it checks the disk, the thread is aborted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may happen that a few threads are waiting for the table that caused the disk-full
    situation. Out of several locked threads, killing the thread that is waiting on
    the disk-full condition will enable other threads to continue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `REPAIR TABLE` or `OPTIMIZE TABLE` statements are exceptions to the preceding
    condition. Other exceptions include indexes created in a batch after the `LOAD
    DATA INFILE` or `ALTER TABLE` statements. These SQL statements can create temporary
    files with large volumes. This may create big problems for the rest of the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL temporary files storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The value of the `TMPDIR` environment variable is used by MySQL on the Unix
    as the path name of the directory to store temporary files. MySQL uses a system
    default, such as`/tmp`, `/var/tmp`, or `/usr/tmp` if the `TMPDIR` is not set.
  prefs: []
  type: TYPE_NORMAL
- en: The values of the `TMPDIR`, `TEMP`, and `TMP` environment variables are checked
    by MySQL on Windows. If MySQL finds one set, it uses that value and does not check
    for remaining values. If none of these three variables are set, MySQL uses the
    system default, which is `C:\windows\temp\`.
  prefs: []
  type: TYPE_NORMAL
- en: If the temporary file directory in the filesystem is too small, we can use the
    `mysqld --tmpdir` option to specify a directory on the filesystem with enough
    space. For the replication, on slave machines, we can use `--slave-load-tmpdir`
    and specify the directory for holding temporary files during the replication of
    `LOAD DATA INFILE` statements. It is possible to set a list of several paths used
    in a round-robin fashion with the `--tmpdir` option. On the Unix system, the paths
    can be separated by the colon character(:), whereas on Windows, the semicolon
    character(;) can be used to separate the paths.
  prefs: []
  type: TYPE_NORMAL
- en: To effectively distribute the load, multiple temporary directory paths should
    belong to different physical disks and not the different partitions of the same
    disk.
  prefs: []
  type: TYPE_NORMAL
- en: For the MySQL server working as a replication slave, we must take care of setting
    the `--slave-load-tmpdir` option so as not to point to a directory in the memory-based
    filesystem or to a directory that is cleared upon server or server host restarts.
    To replicate the temporary tables or `LOAD DATA INFILE` operations, the replication
    slave requires its temporary files on the machine restart. The replication fails
    if the files in the temporary file directory are lost.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL takes care of removing the temporary files when the `mysqld` server process
    is terminated. On Unix-like platforms, it can be done by unlinking a file after
    opening it. One of the major disadvantage of this is that the name does not appear
    in directory listings. It also happens that we cannot see a big file that occupies
    the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: '`ibtmp1` is the name of the table space file that the`InnoDB` storage engine
    uses to store temporary tables. The file is located in the data directory of MySQL.
    If we want to specify a different filename and location, the `innodb_temp_data_file_path`
    option can be used on the server startup.'
  prefs: []
  type: TYPE_NORMAL
- en: If the `ALGORITHM=COPY` technique is used by the `ALTER TABLE` operation on
    the `InnoDB` table, the storage engine creates a temporary copy of the original
    table in the same directory. The temporary table filenames start with the `#sql-`
    prefix. They only appear briefly while the `ALTER TABLE` operation is being performed.
  prefs: []
  type: TYPE_NORMAL
- en: If the `InnoDB` table is rebuilt by the `ALTER TABLE` SQL statement using the
    `ALGORITHM=INPLACE` method, the `InnoDB` storage engine creates an intermediate
    copy of the original table in the same directory as that of the original table.
    The intermediate table filenames start with the `#sql-ib` prefix. They only appear
    briefly while the `ALTER TABLE` operation is being performed.
  prefs: []
  type: TYPE_NORMAL
- en: The `innodb_tmpdir` option cannot be applied to intermediate table files. These
    intermediate files are always created and stored in the same directory as that
    of the original table.
  prefs: []
  type: TYPE_NORMAL
- en: The `ALTER TABLE` SQL statements that rebuild the `InnoDB` table with the `ALGORITHM=INPLACE`
    method create temporary sort files in the default MySQL temporary directory. The
    default temporary directory is denoted by `$TMPDIR` on Unix, `%TEMP%` on Windows,
    or the directory mentioned by the `--tmpdir` option. `tmpdir` may need to be reconfigured
    if the temporary directory is not large enough to store such files. As an alternative,
    we can define another temporary directory for online `InnoDB` `ALTER TABLE` statements
    using the `innodb_tmpdir` option. The `innodb_tmpdir` option can be configured
    at runtime, using the `SET GLOBAL` or `SET SESSION` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Replicating an `innodb_tmpdir` configuration should be considered in replication
    environments if all the servers have the same operating system environment. In
    other cases, an `innodb_tmpdir` setting replication can result in a failed replication
    while executing online `ALTER TABLE` operations. It is recommended to configure
    `innodb_tmpdir` for each server separately if the operating environments are different.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Unix socket file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL server uses `/tmp/mysql.sock` as a default location for Unix socket
    files for communication with local clients. It may be different based on the distribution
    formats, such as `/var/lib/mysql` for RPMs.
  prefs: []
  type: TYPE_NORMAL
- en: On several Unix versions, it is possible to delete files stored in the `/tmp`
    directory and similar other directories used to store temporary files. It may
    cause problems if the socket file is stored in such a directory on the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to protect the `/tmp` directory so as to ensure that the files
    can only be deleted by the owners or the root superuser. This is possible on almost
    every version of Unix. This can be done by setting the sticky bit on the `/tmp`
    directory while logged in as a root user. The following is the command to do the
    same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Using the `ls -ld /tmp` command, it can also be checked if the sticky bit is
    set. The bit is set if the last permission character is `t`. A sticky bit is used
    to define the file permissions in Unix systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative approach is also possible in which we should change the place
    of the Unix socket file. If we change the location of the Unix socket file, we
    must ensure that the client programs also know the new location of the file. The
    following are the ways to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The path can be set in the global or local option file, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We can also specify a `--socket` option to `mysqld_safe` on the command line
    and also when we run client programs.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The `MYSQL_UNIX_PORT` environment variable can be set to the path of the Unix
    socket file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MySQL can also be recompiled from source so as to use a different Unix socket
    file location as a default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the following command, it can be ensured that the new socket location
    works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Time zone problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL server must be told the user's current time zone if we have problem
    with `SELECT NOW()` returning a value in UTC instead of the user's current time
    zone. It is also applicable if `UNIX_TIMESTAMP()` returns a wrong value. It should
    be done for the environment running the server; for example, `mysqld_safe` or
    `mysql.server`.
  prefs: []
  type: TYPE_NORMAL
- en: We can also set the server time zone by using the `--timezone=timezone_name`
    option with `mysqld_safe`. It can also be set by assigning the value to the `TZ`
    environment variable before the `mysqld` is started.
  prefs: []
  type: TYPE_NORMAL
- en: The allowed list of values for `--timezone` or `TZ` depends on the system.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 client errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section focuses on errors that occur on the MySQL 8 client. The job of
    a MySQL client is to connect to the MySQL server so as to execute the SQL queries
    and get the results from the MySQL 8 database. This section lists errors related
    to execution of the queries.
  prefs: []
  type: TYPE_NORMAL
- en: Case sensitivity in string searches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The string searches use the logical sequence of comparison operands for non-binary
    strings, such as`CHAR`, `VARCHAR`, and `TEXT`. The comparisons  of binary strings,
    such as `BINARY`, `VARBINARY`, and `BLOB` use the numeric values of the bytes
    in the operands. It essentially means that the comparison will be case sensitive
    for the alphabetic characters.
  prefs: []
  type: TYPE_NORMAL
- en: The comparison of a non-binary string with a binary string will be treated as
    a comparison between binary strings.
  prefs: []
  type: TYPE_NORMAL
- en: The comparison operations such as`>=`, `>`, `=`, `<`, `<=`, `sorting` and `grouping`
    depend on the sort value of each character. The characters with a similar sort
    value are considered the same character. Consider an example of e and é. These
    characters have the same sort value in the provided logical sequence. These are
    considered equal.
  prefs: []
  type: TYPE_NORMAL
- en: '`utf8mb4` and `utf8mb4_0900_ai_ci` are the default character set and collation,
    respectively. As a default, the non-binary string comparisons are case insensitive.
    This means that we will get all the column values starting with A or a if we search
    with `col_name LIKE ''a%''`. To make it case sensitive, we have to ensure that
    one of the operands has a binary or case sensitive collation. For example, if
    a column is compared to a string and both have the `utf8mb4` character set, the `COLLATE`
    operator can be used to cause either operand to have the `utf8mb4_0900_as_cs`
    or `utf8mb4_bin` collation. The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to change the non-binary case-sensitive strings comparison to be case
    insensitive, we should use `COLLATE` to name a case-insensitive collation. The
    following is an example of how `COLLATE` changes the comparison to be case sensitive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Problems with DATE columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In MySQL, the default format of a `DATE` value is `YYYY-MM-DD`. Standard SQL
    does not permit any other format. This is the format that should be used in the
    `UPDATE` expressions and in the `WHERE` clause in a `SELECT` statement. The following
    is an example of the date format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'When a constant string is compared to `DATE`, `TIME`, `DATETIME`, or `TIMESTAMP`
    using `<`, `<=`, `=`, `>=`, `>`, or `BETWEEN` operators, MySQL converts the string
    into an internal long integer value. MySQL does this so as to achieve a faster
    comparison. However, the following exceptions are applicable to this conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: Comparing two columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing a `DATE`, `TIME`, `DATETIME`, or `TIMESTAMP` column to an expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of a comparison method other than those just listed, such as `IN` or `STRCMP()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The comparison is done by converting the objects into string values and performing
    a string comparison in case of these exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Problems with NULL values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A `NULL` value is often a point of confusion for new programmers. The `NULL`
    value is by mistake interpreted as an empty string `''''` in the case of strings.
    This is not correct. The following is an example of completely different statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, both statements insert the value in the same column
    (phone column). The first statement inserts a `NULL` value, whereas the second
    statement inserts an empty string. The first value can be considered as the phone
    number is not known, whereas the second value indicates the person is known to
    have no phone, and thus no phone number.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a `NULL` value is compared to any other value, it always evaluates to
    be false. The expression containing the `NULL` value always results in a `NULL`
    value. The following example returns a `NULL` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If the purpose of an SQL statement is to search for `NULL` column values, we
    cannot use `expression = NULL`. The following is an example that returns no rows,
    as `expression = NULL` is always false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To make a `NULL` value comparison, `IS NULL` should be used. The following
    example demonstrates the use of `IS NULL`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: MySQL 8 troubleshooting approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section of the chapter, we will focus on the MySQL 8 troubleshooting
    approach. Why do we need to troubleshoot MySQL 8? The reasons for troubleshooting
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Faster execution of SQL queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance enhancement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficient use of resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The primary set of resources include CPU, disk IO, memory, and network. There
    are two approaches to measure MySQL performance:'
  prefs: []
  type: TYPE_NORMAL
- en: In a query focused approach, it is important to measure how fast the queries
    get executed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In resource focused approach, it is important that the queries use fewer resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us take a deeper look at ways to troubleshoot MySQL problems.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`EXPLAIN` is the SQL statement that provides information for the way MySQL
    executes the SQL statements. The `EXPLAIN` statement works with `INSERT`, `UPDATE`,
    `REPLACE`, `DELETE`, and `SELECT` statements. The output of the `EXPLAIN` statement
    is a row of information for each table mentioned or used in the `SELECT` statement.
    The output lists the tables in the order of MySQL''s reading these tables while
    executing the statement. All joins are resolved using the nested-loop join method.
    In the nested-loop join method, MySQL reads a row from the first table in the
    list and then finds the matching row in the second table in the list, then the
    third table, and so on. Once all the tables in the list are processed, MySQL processes
    the results of the selected columns and backtracks them through the list of tables
    until it finds a table with more matching rows. It reads the next row from this
    table. This way the process continues.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the columns from the `EXPLAIN` output:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`**:** This denotes the sequential number of `SELECT` within a query. It
    is also known as the `SELECT` identifier. It is possible that the value can be
    `NULL` when the row belongs to union result of other rows. The output shows `<unionM,
    N>` in the table column. It means that the row refers to union of ID values `M`
    and `N`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select_type`: This output column indicates the type of `SELECT` statement.
    The possible list of values include `SIMPLE`, `PRIMARY`, `UNION`, `DEPENDENT UNION`,
    `UNION RESULT`, `SUBQUERY`, `DEPENDENT SUBQUERY`, `DERIVED`, `MATERIALIZED`, `UNCACHEABLE
    SUBQUERY`, and `UNCACHEABLE UNION`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table`: This column indicates the name of the table referred in the output.
    It can have values such as `<unionM, N>`, `<derivedN>`, and `<subqueryN>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`partitions`: This identifies the partitions from which the query matches the
    records. For non-partitioned tables, the value is `NULL`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: This indicates the type of `JOIN`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`possible_keys`: This output column indicates possible indexes that MySQL may
    choose to fetch the rows in the table. If there are no matching indexes, the return
    value would be `NULL`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key`: This output column indicates the key index that MySQL actually uses
    to fetch the rows from a table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ref`: The `ref` output column indicates the columns or constants used to compare
    with the index mentioned in the key output column to select table rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rows`: The rows output column indicates the number of rows to be examined
    in order to successfully execute the query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the types of joins in `EXPLAIN`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`system`: This means that the table has only one row. It is a special case
    of `const` join type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`const`:  This means that the table has at least one matching row. The row
    is read at the beginning of the query. As only one matching row is found, the
    rest of the optimizer regards the values from the column in this row as constants.
    As const tables are read only once, it is very fast. The const is used when all
    parts of a `PRIMARY KEY` or `UNIQUE` index are compared to constant values. The
    following is an example where `tbl_name` is used as a const table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`ref`: For each combination of rows from the earlier tables, all rows with
    matching index values are read from the `ref` table. If the join uses only the
    leftmost prefix of the key, the `ref` is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-world scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL query optimization is referred to as improving the time of query execution.
    For example, when a query is not performing well means that the query is taking
    a longer time than expected for execution. The time of the query execution is
    important but there are other matrices as well that are used to measure performance.
    This section explains what should be measured and how it should be done as precisely
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following question arises: why should we optimize the query? Does it really
    require optimization if it only takes a hundredth of a second? Yes, it does require
    optimization unless the query is executed rarely. We should optimize the queries
    that are most expensive.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss a real-time example. In one of the applications, we had a report
    that was generated based on a complex query and was taking too much time. The
    execution time was in minutes. To optimize such a complex query, we considered
    the following approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Analyze the query plan using** `EXPLAIN`: MySQL provides two ways to analyze
    the performance of a query. One is the `EXPLAIN` method, which we have already
    learned about  in the preceding section of this chapter. Another tool is `SHOW
    STATUS`. Usually, we should prefer to use `EXPLAIN` to understand the query plan
    of a `SELECT` query. In the case of the report query, we convert a few of the
    non- `SELECT` queries to `SELECT` queries. This helps us in understanding the
    query execution plan for non- `SELECT` queries as well. For example, rewriting
    an `UPDATE` query to `SELECT` can be done by using the `WHERE` clause in the `UPDATE`
    query, which is passed on to the `SELECT` query.  We could also find few missing
    indexes on the tables.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SHOW STATUS`: The `SHOW STATUS` statement outputs the internal counters for
    MySQL. The counters are incremented by MySQL upon every query execution. With
    the help of these counters, we could understand the types of operations performed
    by the server in aggregate. It also helps in indicating the work done by each
    individual query.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following are the measurements performed for MySQL server variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Select_`: This counter is incremented whenever a `SELECT` query is executed. This
    counter can also be used to identify if a table scan is performed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Key_read`: This variable provides additional information on the usage of the
    key index.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Last_query_cost`: This value indicates how expensive the last executed query
    was.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the steps to perform query optimization:'
  prefs: []
  type: TYPE_NORMAL
- en: Query the execution a few times to ensure it returns the same result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `SHOW STATUS`. The output should be saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `SHOW STATUS` to observe the differences from the previous execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `EXPLAIN` if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following parameters should be analyzed for query performance optimization:'
  prefs: []
  type: TYPE_NORMAL
- en: Table index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Row level operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disk I/O operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this last chapter of the book, we learned an important aspect of any database:
    troubleshooting errors that we may encounter using the MySQL server or client.
    We started the discussion by understanding what troubleshooting is. We discussed
    different ways for initial diagnostics of the error. We understood common MySQL
    errors and what the error messages mean. We also learned about the ways to fix
    these errors. We also learned about the MySQL server and client errors and fixes
    for these errors. In the later part of the chapter, we learned about the MySQL
    troubleshooting approach and looked at a real-world scenario. Pretty important
    stuff for the last chapter, huh? That''s it for the book.'
  prefs: []
  type: TYPE_NORMAL
