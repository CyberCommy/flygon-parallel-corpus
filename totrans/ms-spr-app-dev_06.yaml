- en: Chapter 6. Spring Integration with HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, let us see how the Spring Integration package supports the
    HTTP protocol. We shall also look into HTTP and its features to get a better understanding
    of performing HTTP operations with the Spring framework.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTP** stands for **Hyper Text Transfer Protocol**, which, in turn, stands
    for secure connection. This protocol comes under an application layer used for
    data transfer. It uses **Transmission Control** **Protocol/Internet Protocol**
    (**TCP/IP**) communication for data transfers. HTTP is a connectionless and stateless
    protocol, since the server and client are only aware of each other during request
    and response time. Any type of data can be sent across HTTP, as long as the server
    and client are able to handle it. The requests are sent via a web URL, that is
    a uniform resource locator. The URL contains the following parts: `http://www.domainname.com/path/?abc=xyz`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Protocol: `http://` or `https://`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Host: `www.domainname.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resource path: `path`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Query: `abc=xyz`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP methods and status codes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us look at the HTTP methods and status codes. The HTTP methods are a communication
    channel for performing operations on the HTTP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the HTTP methods used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`: This gets the existing resource for a given identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT`: This puts a new resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`: This updates the existing resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: This deletes the existing resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Status code is human readable diagnostic information about HTTP messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows all the available status codes and their meanings:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Status code | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 200 | The request has succeeded |'
  prefs: []
  type: TYPE_TB
- en: '| 201 | The POST method was executed successfully |'
  prefs: []
  type: TYPE_TB
- en: '| 202 | The request has been accepted for processing |'
  prefs: []
  type: TYPE_TB
- en: '| 203 | No authorization for the information |'
  prefs: []
  type: TYPE_TB
- en: '| 204 | No response from the server |'
  prefs: []
  type: TYPE_TB
- en: '| 301 | The data requested is moved to a new URL |'
  prefs: []
  type: TYPE_TB
- en: '| 302 | Forward action required for the request to be completely fulfilled
    |'
  prefs: []
  type: TYPE_TB
- en: '| 303 | All the 3XX codes point to different URL for various actions like forwarding
    |'
  prefs: []
  type: TYPE_TB
- en: '| 304 | Cache not modified properly |'
  prefs: []
  type: TYPE_TB
- en: '| 400 | Bad syntax |'
  prefs: []
  type: TYPE_TB
- en: '| 401 | Unauthorized request |'
  prefs: []
  type: TYPE_TB
- en: '| 402 | Charge to header not matching |'
  prefs: []
  type: TYPE_TB
- en: '| 403 | Forbidden request |'
  prefs: []
  type: TYPE_TB
- en: '| 404 | Resource not found as per the provided URL |'
  prefs: []
  type: TYPE_TB
- en: '| 500 | Unexpected error on the server |'
  prefs: []
  type: TYPE_TB
- en: '| 501 | Server doesn''t support the action |'
  prefs: []
  type: TYPE_TB
- en: '| 502 | Too much load on the server |'
  prefs: []
  type: TYPE_TB
- en: '| 503 | Gateway time out. Server is trying to access data from some other resource
    or service but it did not get the required response from it. |'
  prefs: []
  type: TYPE_TB
- en: HTTP headers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These headers are found in the messages of HTTP request and response. They are
    just name value strings that are separated by a colon. Information like content
    type, caching, response types, can be directly given in the headers. Headers don't
    generally have any size limits but there are restrictions from the servers on
    the header size.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP time-out
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a 408 status code, which shows up on a webpage when the server is trying
    to access the data too many times and is not getting any response. This kind of
    error comes up, even when the servers are running slowly.
  prefs: []
  type: TYPE_NORMAL
- en: Timeouts can happen in two scenarios, one while interacting with the Spring
    Integration channels, which can be an inbound channel or an outbound channel,
    or while interacting with a HTTP server, which is in a remote location.
  prefs: []
  type: TYPE_NORMAL
- en: The time out support is done with the `RestTemplate` class available in the
    Spring Framework. Following is the sample configuration which can be used with
    Gateways and Outbound Adapters available with Spring Integration for HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: HTTP proxy settings in Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The proxy settings are supported by Java system properties. These properties
    can be set to use the server, which has proxy settings. The following are the
    properties that can be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http.proxyHost`: The host name of the proxy server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http.proxyPort`: The port number, the default value being 80.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http.nonProxyHosts`: A list of hosts that should be reached directly, bypassing
    the proxy. This is a list of patterns separated by a `|` character. The patterns
    may start or end with a `*` character for wildcards. Any host matching one of
    these patterns will be reached through a direct connection instead of through
    a proxy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the proxy settings available for the secured HTTP:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https.proxyHost`: The host name of the proxy server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`https.proxyPort`: The port number, the default value being 80.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxy configuration support in Spring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring supports proxy configuration. We just need to configure the bean `SimpleClientHttpRequestFactory`
    which has a property proxy with `java.net.Proxy` bean. A sample configuration
    is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Spring Integration support for HTTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Spring provides extended support to HTTP with adapters just like FTP, which
    consists of gateway implementation. Spring supports HTTP using the following two
    gateway implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HttpInboundEndpoint`: To receive messages over HTTP we need to use either
    an adapter or an available gateway. The inbound adapter is called HTTP inbound
    adapter and the gateway is called HTTP inbound gateway. The adapter needs a servlet
    container, such as the Tomcat server or Jetty server. We need to make a web application
    with `web.xml,` with servlet configuration, and deploy it on the webserver. Spring
    itself provides a servlet called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HttpRequestHandlerServlet`: This class extends a normal `HttpServlet`, and
    is available under the package `org.springframework.web.context.support.HttpRequestHandlerServlet`.
    Since it extends `HttpServlet`, it also overrides the `init()` and `service()`
    methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the servlet configuration in a `web.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a gateway configuration for handling inbound HTTP requests.
    The gateway accepts a list of message converters, which will get converted from
    `HttpServletRequest` to message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Spring Integration support for multipart HTTP requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the HTTP request is wrapped, the `MultipartHttpServletRequest` converters
    will convert the request to message payload, and this is nothing but a `MultiValueMap`.
    This map will have values, which are instances of Spring's multipart. The values
    are decided based on the content type. Values can also be byte arrays or strings.
    By default, if there is a bean by the name `MultipartResolver,` it gets recognized
    by the Spring's integration framework; if there is a bean with the name `multipartResolver,`
    it, in turn, enables the context. This will enable the inbound request mapper.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Integration support for HTTP responses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Response to HTTP requests is usually sent with a 200Ok status code. To customize
    the response further, you can use the Spring MVC framework. In the Spring MVC
    application, we have an option to customize the response. We can provide a `viewName`
    to the response, which gets resolved by Spring MVC `ViewResolver`. We can configure
    the gateway to behave like a spring controller, which returns a view name as a
    response to the framework, and we can also configure the HTTP methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following configuration, you can see that we have used an integration
    package and have configured the `HttpRequestHandlingController` bean with the
    following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HttpRequestChannel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HttpReplyChannel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`viewName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SupportedMedthodNames`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following code snippet shows the configuration for `HttpInbound` bean.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also configure the supported HTTP Methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the outbound HTTP messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring provides `HttpRequestExecutingMessageHandler,` which takes a string URL
    as a constructor argument. The class has a property called `ReponseChannel,` which
    also needs to be configured.
  prefs: []
  type: TYPE_NORMAL
- en: The bean will call the `RestTemplate` class by reading the URL configured in
    the constructor, which the `RestTemplate` calls `HttpMessageConverters`. The list
    of `HttpMessageConverters` are read and the `HttpRequest` body is generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The converter and `HttpRequestExecutingMessageHandler` are shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: OR
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Configuring cookies with OutboundGateway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`OutboundGateway` has attribute transfer cookies, which accept Boolean values
    that are true or false. The header, in response, contains a set cookies parameter,
    which will convert the response to a cookie if the `transfer-cookie` attribute
    is set to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring InboundGateway with both no response and with the response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the following code in order to configure an `InboundGateway` request with
    no response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For the requests which need a response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: RequestMapping support for an inbound channel adapter or a gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `requestmapping` configuration can be done for an inbound channel adapter,
    or a gateway, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Based on this configuration, the namespace parser creates an instance of `IntegrationRequestMappingHandlerMapping`
    (if none exist yet), a `HttpRequestHandlingController` bean, and associated with
    it, an instance of `RequestMapping`, which, in turn, is converted to Spring MVC `RequestMappingInfo`.
  prefs: []
  type: TYPE_NORMAL
- en: With the path and supported method, the attributes of `<http:inbound-channel-adapter>`,
    or `<http:inbound-gateway>`, `<request-mapping>` translate directly into the respective
    options provided by the `org.springframework.web.bind.annotation.RequestMapping`
    annotation in Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: The `<request-mapping>` subelement allows you to configure several Spring integration
    HTTP inbound endpoints to the same path (or even the same supported methods),
    and to provide different downstream message flows based on incoming HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the RequestMapping using the HTTP inbound endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also declare just one HTTP inbound endpoint and apply routing and filtering
    logic within the Spring Integration flow to achieve the same result. This allows
    you to get the message into a flow as early as possible, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the inbound channel adapter to read request information from the
    URL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also configure the inbound channel adapter to accept requests using the
    URI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The URI can be `/param1/{param-value1}/param2/{param-value2}`. The URI template
    variables are mapped with a message payload by the payload expression attribute.
    Certain variables in the URI path can also be mapped with the header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a list of payload expressions that can be used in a configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '`#requestParams`: The `MultiValueMap` from the `ServletRequest` parameter map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#pathVariables`: The map from URI template placeholders and their values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#matrixVariables`: The map of `MultiValueMap`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#requestAttributes`: The `org.springframework.web.context.request.RequestAttributes`
    associated with the current request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#requestHeaders`: The `org.springframework.http.HttpHeaders` object from the
    current request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#cookies`: The map `<String, Cookie>` of `javax.servlet.http.Cookies` from
    the current request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the outbound gateway for HTTP responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The outbound gateway or outbound channel adapter configuration is related to
    a HTTP response, and options to configure the response. The default response type
    for a HTTP request is null. The response method is usually POST. If the response
    type is null and the HTTP status code is null, then the reply message will have
    the `ResponseEntity` object. In the following sample configuration, we have configured
    the expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the outbound adapter for different response types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We shall now show you two samples of configuring the outbound adapter with different
    response types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the expected response type expression is used with a value payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, configure the outbound channel adapter to give a string response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Mapping URI variables as subelement with an HTTP outbound gateway and an outbound
    channel adapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we shall see the use of a URI variable, and URI variable expressions,
    as a subelement with the HTTP outbound gateway configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your URL contains URI variables, you can map them using the Uri-variable
    subelement. This subelement is available for the HTTP outbound gateway and the
    HTTP outbound channel adapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Uri-variable` subelement defines two attributes: `name` and `expression`.
    The `name` attribute identifies the name of the URI variable, while the `expression`
    attribute is used to set the actual value. Using the `expression` attribute, you
    can leverage the full power of **Spring Expression Language** (**SpEL**), which
    gives you full dynamic access to the message payload and the message headers.
    For example, in the above configuration the `getZip()` method will be invoked
    on the payload object of the message, and the result of that method will be used
    as a value for the URI variable named `zipCode`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Spring Integration 3.0, HTTP outbound endpoints support the `Uri-variables-expression`
    attributes to specify an `Expression` which should be evaluated, resulting in
    a map for all URI variable placeholders within the URL template. It provides a
    mechanism whereby different variable expressions can be used based on the outbound
    message. This attribute is mutually exclusive with the `<Uri-variable/>` subelement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Handling time-out with the HTTP outbound gateway and the HTTP inbound gateway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following table shows the difference in handling the HTTP outbound and
    HTTP inbound gateway:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Time-out in HTTP outbound gateway** | **Time-Out in HTTP inbound gateway**
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ReplyTimeOut` maps to `sendTimeOut` property of `HttpRequestExecutingMessageHandler`.
    | Here, we use the `RequestTimeOut` attribute which maps the `requestTimeProperty`
    of `HttpRequestHandlingMessagingGateway` class. |'
  prefs: []
  type: TYPE_TB
- en: '| `sendTimeOut` default value is `1,` which is sent to `MessageChannel`. |
    Default timeout properties in 1,000 ms. Timeout properties will be used set `sendTimeOut`
    parameter used in `MessagingTemplate` instance. |'
  prefs: []
  type: TYPE_TB
- en: Spring support for header customizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we need to do further customization to the header, then the Spring Integration
    package provides us with complete support. If we explicitly specify the header
    names in the configuration with comma separated values, the default behavior will
    be overridden.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the configuration for further header customization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Another option is to use the header-mapper attribute, which takes the `DefaultHttpHeaderMapper`
    class configurations.
  prefs: []
  type: TYPE_NORMAL
- en: The class comes with factory methods that are static for inbound and outbound
    adapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the configuration for the `header-mapper` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Sending multipart HTTP requests using Spring's RestTemplate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time, we have implemented file upload functionality in our application.
    Files are sent over HTTP as a multipart request.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, let us see how we can configure the inbound channel adapter
    using `RestTemplate` to send a file over HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us configure the server with the inbound channel adapter and then write
    a client for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `httpInboundAdapter` will receive the request and convert it to a message
    with a payload `LinkedMultiValueMap`. Then, we will be parsing that in the `multipartReceiver`
    service activator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, let us write a client. By client, we mean creating a map and adding the
    file to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We shall now create a `MultiValueMap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The map can be populated with values, such as details of a person:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This step is to create headers and set the content type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to pass the `header` and `map` as a request to the `HttpEntity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us use `RestTemplate` to pass the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We should now get an output in which the photo is uploaded on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learnt about HTTP and Spring Integration support for
    accessing HTTP methods and requests. We have also demonstrated multipart requests
    and responses, and have shown how to configure the inbound and outbound HTTP gateways
    and adapters.
  prefs: []
  type: TYPE_NORMAL
- en: We have learnt about sending multipart HTTP requests by configuring the Spring's
    inbound and outbound gateway. We have also demonstrated how we can use multi-value
    maps to populate the request and put the map in the HTTP header. Lastly, we have
    seen the list of payload expressions available.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, let us look at Spring's support to Hadoop.
  prefs: []
  type: TYPE_NORMAL
