- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The PHP community faced a huge problem over decades: performance. No matter
    how powerful hardware they got, in the end, PHP was a bottleneck in itself. With
    PHP 5.4.x, 5.5.x, and 5.6.x, PHP''s performance started to improve, but still
    it was a huge problem in high-load applications. The community developed caching
    tools such as **Alternative PHP Cache** (**APC**) and Zend OpCache, which cached
    the opcode for high performance, and these tools had a good effect on the performance.'
  prefs: []
  type: TYPE_NORMAL
- en: To get rid of the performance issues of PHP, Facebook built their own open source
    tool called **HHVM** (**HipHop Virtual Machine**). According to their official
    website, HHVM uses the Just In Time (JIT) compilation to achieve superior performance
    while maintaining the development flexibility that PHP provides. HHVM had great
    performance compared to PHP, and it is widely used in production for heavy applications
    such as Magento.
  prefs: []
  type: TYPE_NORMAL
- en: PHP went to war with HHVM using **PHP Next Generation** (**PHPNG**). The whole
    purpose of PHPNG is to increase performance and focus on the rewriting and optimization
    of the Zend engine memory allocation and PHP data types. People around the world
    started benchmarking PHPNG and HHVM, and according to them, PHPNG was outperforming
    HHVM.
  prefs: []
  type: TYPE_NORMAL
- en: At last, PHPNG was merged with the master branch of PHP, and after a tremendous
    amount of optimization and complete rewriting, PHP 7 was released with huge performance
    improvements. PHP 7 is still not JIT, but its performance is great and similar
    to HHVM. This is a huge performance increase from the older versions of PHP.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Setting Up the Environment"), *Setting Up
    the Environment,* covers how to set up different development environments, including
    the installation of NGINX, PHP 7, and Percona Server on Windows, different Linux
    distros, and setting up the Vagrant virtual machine for development purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. New Features in PHP 7"), *New Features in
    PHP 7*, covers the major new features introduced in PHP 7, including Type Hints,
    Group use Declarations, Anonymous classes, and new operators, such as Spaceship
    operator, Null Coalesce operators, and the Uniform variable syntax.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Improving PHP 7 Application Performance"),
    *Improving PHP 7 Application Performance*, covers different techniques to increase
    and scale a PHP 7 application''s performance. In this chapter, we cover optimization
    of NGINX and Apache, CDN, and CSS/JavaScript, such as merging and minifying them,
    full-page caching, and installing and configuring Varnish. At last, we discuss
    an ideal infrastructure setup for application development.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Improving Database Performance"), *Improving
    Database Performance*, covers techniques to optimize MySQL and Percona Server
    configuration for high performance. Also, it covers different tools to monitor
    the performance of a database. It also covers Memcached and Redis for caching
    objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Debugging and Profiling"), *Debugging and
    Profiling*, covers debugging and profiling techniques including the use of Xdebug
    for debugging and profiling, debugging with Sublime Text 3 and Eclipse, and the
    PHP DebugBar.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Stress/Load Testing PHP Applications"), *Stress/Load
    Testing PHP Applications*, covers different tools to stress and load test the
    application. It covers Apache JMeter, ApacheBench, and Siege for load testing.
    It also covers how to load test different open source systems such as Magento,
    Drupal, and WordPress on PHP 7 and PHP 5.6, and compares their performance on
    PHP 7 and PHP 5.6.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Best Practices in PHP Programming"), *Best
    Practices in PHP Programming*, covers a few best practices for producing quality
    standard code. It covers coding styles, design patterns, service-oriented architecture,
    test-driven development, Git, and deployments.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix A](apa.html "Appendix A. Tools to Make Life Easy"), *Tools to Make
    Life Easy*, discusses three of these tools in much more detail. The tools we will
    discuss are Composer, Git, and Grunt watch.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix B](apb.html "Appendix B. MVC and Frameworks"), *MVC and Frameworks*,
    covers MVC design patterns and the most popular frameworks that are used in PHP
    development, which include Laravel, Lumen, and Apigility.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any hardware specification that is compliant to run the latest versions of
    the following software should be enough to get through this book:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Operating systems: Debian or Ubuntu'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Software: NGINX, PHP 7, MySQL, PerconaDB, Redis, Memcached, Xdebug, Apache
    JMeter, ApacheBench, Siege, and Git'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for those who have basic experience in PHP programming. If you
    are developing performance-critical applications, then this book is for you.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Clicking the **Next** button moves you to the next screen."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
