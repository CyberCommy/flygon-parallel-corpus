- en: Detecting Edges and Contours in Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter presents the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Loading, displaying, and saving images
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image flipping and scaling
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erosion and dilation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image segmentation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blurring and sharpening images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting edges in images
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Histogram equalization
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting corners in images
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Image processing plays a vital role in almost all engineering and medical applications
    to extract and evaluate the region of interest from gray/color images. Image processing
    methods include pre-processing, feature extraction, and classification. Pre-processing
    is used to enhance the quality of the image; this includes adaptive thresholding,
    contrast enhancement, histogram equalization, and edge detection. Feature extraction
    techniques are used to extract prominent features from images that can later be
    used for classification.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The procedures to build an image pre-processing scheme are presented in the
    chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Loading, displaying, and saving images
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section presents how to work on images by means of OpenCV-Python. Furthermore,
    we discuss how to load, display, and save images.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the Computer Vision package - `cv2`:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Read the image using the built-in `imread` function:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Display the original image using the built-in `imshow` function:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Wait until any key is pressed:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Save the image using the built-in `imwrite` function:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The command used to execute the Python program `Load_Display_Save.py` is shown
    here:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/e2747d29-f33d-4c11-8241-c7bc713334ff.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: 'The result obtained after executing `Load_Display_Save.py` is shown here:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/034ff3a4-7d68-467b-b4a8-0f1bd5117ae8.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: Image flipping
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the image flipping operation, we can flip the input images horizontally,
    vertically, horizontal, and vertically.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the Computer Vision package - `cv2`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Read the image using the built-in `imread` function:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Display the original image using the built-in `imshow` function:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Wait until any key is pressed:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Perform the required operation on the test image:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Display the horizontally flipped image:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Wait until any key is pressed:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Perform vertical flipping of input image:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Display the vertically flipped image:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Wait until any key is pressed:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Display the processed image:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Stop the execution and display the result:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The command used to execute the `Flipping.py`Â Python program is shown here:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7d0a6ede-4840-4ab4-9776-d44e9f6ebe1b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'The original and horizontally flipped images obtained after executing `Flipping.py`
    are shown here:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/8ae77f4f-9f1b-47a6-9703-31c2970f9fb1.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'Following is the horizontally flipped picture:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/77684d2e-ae13-4b2c-941c-d37e4b1008b5.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'Vertically, and horizontally and vertically, flipped images obtained after
    executing `Flipping.py` are shown here:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/85e084c3-2d5c-4eae-b489-e57a93e931a0.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'Following horizontally and vertically flipped picture:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e49c540d-e711-4112-85b3-d433c59fea9d.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Image scaling
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Image scaling is used to modify the dimensions of the input image based on requirements.
    Three types of scaling operators are commonly used in OpenCV, and they are cubic,
    area, and linear interpolations.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following packages:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Read the image using the built-in `imread` function:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Display the original image using the built-in `imshow` function:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Wait until any key is pressed:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Adjust the image size based on the operator''s command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Adjust the image size using cubic interpolation:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Show the output image:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Wait until any key is pressed:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Adjust the image size using area interpolation:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Show the output image:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Wait for the instruction from the operator:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Adjust the image size using linear interpolation:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Show the output image:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Wait until any key is pressed:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'After completing the image scaling task, terminate the program execution:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The command used to execute the `Scaling.py` Python programÂ is shown here:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/e932fc3b-9c5f-452d-83c2-8480e08d0f11.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: 'The original image used for scaling is shown here:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/37709e13-bb28-4616-ba74-4bf2b18d9fdc.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: 'Linear interpolated output obtained after executing theÂ `Scaling.py`Â file is
    shown here:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f451fa07-f8d7-4ce8-88df-6f18f6abe93b.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: 'The area-interpolated output obtained after executing theÂ `Scaling.py`Â file
    is shown here:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7bb33217-91fc-408c-8107-857eca6a88f4.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: 'The cubic-interpolated output obtained after executing theÂ `Scaling.py` file
    is shown here:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/146eb167-7623-4716-a6ae-0d7ef0e973e3.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: Erosion and dilation
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Erosion and dilation are morphological operations. Erosion removes pixels at
    the boundaries of objects in an image and dilation adds pixels to the boundaries
    of objects in an image.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the Computer Vision package â `cv2`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Import the numerical Python package â `numpy as np`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Read the image using the built-in `imread` function:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Display the original image using the built-in `imshow` function:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Wait until any key is pressed:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Given shape and type, fill it with ones:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`cv2.erode` is the built-in function used for erosion:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Display the image after erosion using the built-in `imshow` function:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Wait until any key is pressed:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`cv2.dilate` is the built-in function used for dilation:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Display the image after dilation using the built-in `imshow` function:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Wait until any key is pressed:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Close all windows:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The command used to execute theÂ `Erosion_Dilation.py`Â file is shown here:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f3c5589b-a112-48f9-8145-a1c2e4b552b7.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: 'The input image used to execute theÂ `Erosion_Dilation.py` file is shown here:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/131dfbf0-3273-43fb-82ca-6408ada76501.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: 'The eroded image obtained after executing theÂ `Erosion_Dilation.py` file is
    shown here:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/1a1c5a64-8e8c-4a4f-bda9-c08b3622108d.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: 'The dilated image obtained after executing theÂ `Erosion_Dilation.py` file is
    shown here:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/6ad113bb-0abf-4be3-ad07-80b4496dd6d6.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: Image segmentation
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Segmentation is a process of partitioning images into different regions. Contours
    are lines or curves around the boundary of an object. Image segmentation using
    contours is discussed in this section.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the Computer Vision package - `cv2`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Read the image using the built-in `imread` function:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Display the original image using the built-in `imshow` function:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Wait until any key is pressed:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Execute the `Canny` edge detection system:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Display the edge detected output image using the built-in `imshow` function:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Wait until any key is pressed:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Execute the contour detection system:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Sketch the contour on the image:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Show the sketched contour of the image:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Wait until any key is pressed:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Terminate the program and display the result:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The result obtained after executing theÂ `Image_Segmentation.py`Â file is shown
    here:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/5782941a-b4e6-4332-8318-d012e6f2d143.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: 'Following is theÂ edge detection output:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b1b74744-bea2-48cd-b867-b9cc58c61326.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: Blurring and sharpening images
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blurring and sharpening are image processing operations used to enhance the
    input images.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the Computer Vision package - `cv2`:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Read the image using the built-in `imread` function:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Display the original image using the built-in `imshow` function:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Wait until any key is pressed:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Execute the pixel level action with the blurring operation:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Display the blurred image:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Wait until any key is pressed:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Execute the pixel level action with the sharpening operation:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Display the sharpened image:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Wait until any key is pressed:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Terminate the program execution:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The command used to execute the `Blurring_Sharpening.py`Â Python program file
    is shown here:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9d3d7e80-2065-4b49-9fb3-73ba8f019299.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: 'The input image used to execute theÂ `Blurring_Sharpening.py` file is shown
    here:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/0fc19880-c1ed-429d-810f-cc0d99e00029.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: 'The blurred image obtained after executing theÂ `Blurring_Sharpening.py` file
    is shown here:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/a5d0dda6-40b2-4cd4-a1a5-0caf0c2f3982.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: 'The sharpened image obtained after executing theÂ `Blurring_Sharpening.py` file
    is shown here:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f4d411d0-8984-4418-b31f-0e9c98cc2bb2.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: Detecting edges in images
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Edge detection is used to detect the borders in images. It provides the details
    regarding the shape and the region properties. This includes perimeter, major
    axis size, and minor axis size.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the necessary packages:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Read the input image:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Implement the Sobel edge detection scheme:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Display the input image and its corresponding output:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Wait for the instruction from the operator:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Display the input image and the corresponding results:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Wait for the instruction from the operator:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The command used to execute the `Detecting_edges.py` Python programÂ file, along
    with the input image (`baby.jpg`), is shown here:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/ef7c4c3c-5ff6-4967-8cb2-21225f4a86a0.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
- en: 'The input image and the horizontal Sobel filter output obtained after executing
    theÂ `Detecting_edges.py` file is shown here:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/234d88f2-d818-428d-a185-1e4ea0404526.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: 'The vertical Sobel filter output and the Laplacian image output obtained after
    executing theÂ `Detecting_edges.py`Â file is shown here:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/d10d6ba5-3946-4083-91c1-0cef82083fbe.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: 'FollowingÂ  is the Laplacian image output:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/243aaabd-5c2b-4923-91ef-49916fb9f4a3.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: 'The `Canny` edge detection output obtained after executing theÂ `Detecting_edges.py`
    file is shown here:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/8f4d5750-5f51-4c9d-9130-8c64ffd698c6.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Readers can refer to the following document to learn what edge detection is
    and its impact on test pictures:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.301.927](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.301.927)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following document:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.tutorialspoint.com/dip/concept_of_edge_detection.htm](https://www.tutorialspoint.com/dip/concept_of_edge_detection.htm)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Histogram equalization
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Histogram equalization is used to enhance the visibility and the contrast of
    images. It is performed by varying the image intensities. These procedures are
    clearly described here.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: How to do itâ¦
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the necessary packages:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Load the input image:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Convert the RGB image into grayscale:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Regulate the histogram of the grayscale image:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Regulate the histogram of the RGB image:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Display the output image:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The command used to execute the `histogram.py` Python programÂ file, along with
    the input image (`finger.jpg`), is shown here:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/ad53e9d6-fe47-4d0f-a4aa-5f2876f35706.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
- en: 'The input image used to execute theÂ `histogram.py` file is shown here:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7470d11b-e229-4e87-b648-b0f7b4eb6bc9.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
- en: 'The histogram equalized grayscale image obtained after executing theÂ `histogram.py`
    file is shown here:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9fa26fce-9eb1-4a54-8163-8bb22ad11a42.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
- en: 'The histogram equalized color image obtained after executing theÂ `histogram.py`
    file is shown here:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/21bbb467-1918-46bc-ae7c-c2d912a83004.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
- en: Detecting corners in images
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Corners are borders in images used to extract special features that infer the
    content of an image. Corner detection is frequently used in image registration,
    video tracking, image mosaics, motion detection, 3D modelling, panorama stitching,
    and object recognition.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the necessary packages:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Load the input image:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Implement the Harris corner detection scheme:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Dilate the input image and construct the corners:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Implement image thresholding:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Display the input image:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Wait for the instruction from the operator:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The command used to execute the `Detecting_corner.py` Python programÂ file,
    along with the input image (`box.jpg`), is shown here:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/a1cf1797-e1a2-4ff5-917f-b2410b5478db.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
- en: 'The input image used to execute theÂ `Detecting_corner.py` file is shown here:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/8e3a22bb-a6f1-4251-baa8-2be67137ef99.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
- en: 'Harris Corners obtained after executing theÂ `Detecting_corner.py` file are
    shown here:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/3934c015-8fa1-4ba6-a941-7c6046008dda.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
- en: 'In order to learn how it works for an input image, refer to the following:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: è¦äºè§£å®å¦ä½ä½ç¨äºè¾å¥å¾çï¼è¯·åèä»¥ä¸åå®¹ï¼
- en: 'Image corner detection involves finding the edges/corners in the given picture.
    It can be used to extract the vital shape features from grayscale and RGB pictures.
    Refer to this survey paper on edge and corner detection:'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: å¾åè§ç¹æ£æµæ¶åå¨ç»å®å¾çä¸­æ¾å°è¾¹ç¼/è§ç¹ãå®å¯ä»¥ç¨äºä»ç°åº¦åRGBå¾çä¸­æåéè¦çå½¢ç¶ç¹å¾ãåèè¿ç¯å³äºè¾¹ç¼åè§ç¹æ£æµçè°æ¥è®ºæï¼
- en: '[https://pdfs.semanticscholar.org/24dd/6c2c08f5601e140aad5b9170e0c7485f6648.pdf](https://pdfs.semanticscholar.org/24dd/6c2c08f5601e140aad5b9170e0c7485f6648.pdf).'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pdfs.semanticscholar.org/24dd/6c2c08f5601e140aad5b9170e0c7485f6648.pdf](https://pdfs.semanticscholar.org/24dd/6c2c08f5601e140aad5b9170e0c7485f6648.pdf)ã'
