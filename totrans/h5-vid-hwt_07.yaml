- en: Chapter 7. Interactivity using JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Playing audio files with JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the drag-and-drop API with text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crossbrowser video support with `vid.ly` and jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying video dynamically using jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Movable video ads using jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the display of images using `Easel.js` and the `canvas` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating a sequence of images using `Easel.js` and the `canvas` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Random animation with audio using the `canvas` tag and JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While HTML5 may put an end to the use of Flash for many rich media applications,
    it is causing JavaScript to become even more popular than before. There are many
    libraries and plugins available to enhance and extend HTML5 and CSS3 to create
    rich interactive experiences.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter contains recipes that show how JavaScript can be used with HTML5
    tags, such as audio, video, and canvas, as well as CSS3 selectors and elements.
  prefs: []
  type: TYPE_NORMAL
- en: Playing audio files with JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 introduces more flexibility in how audio files are used on the Internet.
    In this recipe, we will create a game to practice loading and playing sounds using
    the audio tag and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need an audio file to play, an image, and a modern browser that supports
    HTML5\. The example files for this chapter can be downloaded from [http://www.packtpub.com/support?nid=7940](http://www.packtpub.com/support?nid=7940).
    The Free Sound Project ([http://freesound.org](http://freesound.org)) has audio
    files you can use as long as credit is given to the producer, and photos can be
    found at [http://www.Morguefile.com](http://www.Morguefile.com) for use in your
    personal projects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we are ready to create a series of buttons and a short JavaScript program
    that will play a random audio file when one of the buttons is pushed.
  prefs: []
  type: TYPE_NORMAL
- en: Open up your HTML editor and create the opening section of an HTML5 page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Because we only have a few styles, we will add them to the head area of the
    HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Three variables need to be created for the script. The opening script tag and
    variables should look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have created the global variables for the script, we can create
    the functions. Type `function whackmole(){` to begin the function, then on a new
    line type `var i = Math.floor(Math.random() * 5)`; to generate a somewhat random
    number using the JavaScript math library. Next, type `soundChoice = mySounds[i]`;
    to assign the array value to `soundChoice`. Close out the function with `soundElements[soundChoice].play();}`.
    Your function code should currently look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Type `function init(){` to begin the function. On a new line, type `soundElements
    = document.getElementsByTagName("audio");} </script>` to complete our block of
    JavaScript code. It should look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the head tag and type the body tag, adding an `init()` function call
    to it so it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a heading area for the header area of the page using the `<header>`
    tag. Use the heading tag `<h1>` to display the title of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There are five buttons to create a balanced look, and they are all assigned
    a class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The third button has a class name of `crosshairthree` to give us more control
    over positioning it on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using the code files from this book, the sound file tags should
    look similar to the code block below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finish the page with the closing tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `playing-audio-files-with-javascript.html` and view it in
    your browser. It should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we created the beginnings of a basic HTML5 page. Then, we added CSS styles
    to add background images to buttons and change the mouse icon to a crosshair when
    the mouse or pointing device moved over a button. This gave us a visual simulation
    of a targeting weapon and was more fun than a default mouse icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Three variables were created to use in the script: `mySounds, soundElements`,
    and `soundch`. The first function we created named `whackmole()` contained an
    internal variable `i` that held the result of a randomly generated number. `Math.random()`
    caused a pseudorandom number to be generated. We then multiplied it by `5`, the
    number of our audio files, and used the result in `Math.floor()` to create a whole
    number with a value ranging from zero to five. This value was then assigned to
    the temporary variable `i` that in turn was used to populate the variable `mySounds`
    with a randomly generated array value. This new array value, was stored in the
    variable `soundChoice` with `soundChoice = mySounds[i]`;. This enabled us to trigger
    the `play()` action of the `audio` tag using `soundElements[soundChoice].play()`;
    when a button was pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: The second function we created was `init()`, which we later tied to the `body`
    tag using `onLoad`, so that we could grab an audio file with `getElementsByTagName`
    using the `audio` tag and its array value, as carried in the `soundElements` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we added the body tag `<body onLoad="init();">`, and a series of buttons
    containing our adorable mole image to the page. Each of the buttons contained
    an `onClick()` event which invoked the `whackmole()` function. Our third button
    had a different class than the others, `crosshairthree`, which added additional
    margin to the left of the button, giving it a more centered appearance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Firefox currently has a quirk, where if you don't list the `.ogg` audio source
    first, it will not find it.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added the sound files to the page using the `<audio>` and `<source>`
    tags. The `ogg` and `mp3` formats for each file were listed using the source tag.
    Because the source tag is considered a "child" of the parent audio tag it is surrounded
    by, either file format would play, depending on the browser used, as different
    browsers currently prefer different sound file formats.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can see it would be very easy to create an app such as a child's read aloud
    page of shapes or animals by playing a different sound file for different images.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the appearance of audio clips with jQuery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `.animate` function in jQuery opens up new ways to cause audio controls
    to appear, fade, and disappear when actions are taken by visitors or as part of
    a rich media experience. Following is an example of how you could fade and audio
    control away then cause it to quickly reappear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We will perform a similar trick using a video file in a recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Embracing Audio and Video"), *Embracing Audio
    and Video* will cover a lot more information about the audio tag and ways to use
    it.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the drag-and-drop API with text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While all browsers can natively drag images or links, dropping objects used
    to require complex JavaScript or third-party libraries. The drag-and-drop API
    is intended to provide an easier, standardized way to enable users to drop any
    type of object into an identified area. In reality, working with the API across
    browsers is a challenge. The main browsers currently supporting this API are Firefox,
    Chrome, and Safari.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the code for this tutorial at [http://www.packtpub.com/support?nid=7940](http://www.packtpub.com/support?nid=7940).
    The font used in the heading of this tutorial is from [http://www.fontsquirrel.com](http://www.fontsquirrel.com),
    where you can also download a different font if you choose. This tutorial may
    not work with Internet Explorer. We will be creating a tic-tac-toe game that demonstrates
    how the drag-and-drop API works.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open up your HTML editor and start by creating a basic HTML5 page. We will add
    two stylesheet links, one to support an `@fontface` font we will be loading for
    the header of the page, and our main stylesheet. Type the code as shown below,
    then save the file as `using-drag-drop-api.html`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Let's go ahead and style the page. Create or open up a CSS file named `stylesheet.css`.
    Set the overall `margin` for the `body` of the page to `100px` and the default
    color to `#666`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The content tags for the page should all be set to `display:block` as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, we specify the `@fontface` information. The code and font files are from
    a `www.fontsquirrel.com` font kit, which is included in the code files of this
    tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Add a color for the `h1` tag and set the `font-family` property to `3DumbRegular`,
    the name of our font.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new div called `gametilebox` to hold the letters that will make up
    the game tiles. Set the `float` property of the box to `left` and the width and
    height to `280px`. Set the `padding, margin-right, border`, and `background-color`
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The game board will share many of the same properties as the tile box, so copy
    the styles for the `gametilebox`, paste, and name the copy "gameboard". Add a
    `background-image` property with a url of `images/tictactoegrid.jpg`, and set
    the `background-color` to `aa`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gameboard div` should look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s style the `div` blocks in which to place our letters. The `float` should
    be set to `left` on all of the `block` divs. The `width` should be no greater
    than `85px`, the `height` no greater than `80px`. They will be on a 3 by 3 grid,
    so the first block on the second and third rows need to have a `clear:both` property
    as well. The third block on the second and third row should have low to none `padding`
    and `margin-right` properties. Because there are nine of them, only a sample of
    the block code is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will set the styles for the letter game tiles. Create a new class in
    the stylesheet named `lettertile`, then set the properties for the class as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The last style we will add is for the `draggable` attribute. Create the style
    below to help with cross-browser compatibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The stylesheet is complete, so now we can work on the script to drag the letter
    tiles and drop them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the previously created html page `using-drag-drop-api.html`, and type
    the following code for IE browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Add a opening `<script>` tag directly below the stylesheet link, and type the
    first function, `dragDefine(ev)`, which accepts an event argument, and follow
    it with a `{`. After the curly brace, type `ev.dataTransfer.effectAllowed ='move'`;
    then, on a new line, type `ev.dataTransfer.setData("text/plain", ev.target.getAttribute('id'))`;
    to set the data type and the target attribute. Finally, type `return true`; with
    a closing `}` to complete the function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to define the `dragOver` function. Type `dragOver(ev)` and an
    opening `{`, then invoke the `preventDefault()` function by adding `ev.preventDefault()`;.
    The function block should look similar to the one below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The next function we need is one to indicate that the drag is complete. Type
    `function dragEnd(ev)`, then an opening `{`. Type `return true; }` to complete
    the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `function dragDrop(ev)` with an opening `{`, and go to a new line to add
    our first method. Type `var idDrag = ev.dataTransfer.getData("Text")`; to create
    a drag variable that will hold the text string then type `ev.target.appendChild
    (document.getElementById(idDrag))`;. Finish the function with `ev.preventDefault()`;.
    The function block should look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Close the head section of the page. Type `<body><header>`, then `<h1>Drag and
    Drop Tic Tac Toe</h1></header>` to complete the heading of the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Next, type `<section><h3>Drag the letters from the gray box to the game board
    (and back again!)</h3>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a div with and ID of `"gametilebox"` and `ondragover ="dragOver(event)"`
    and `ondrop="dragDrop(event)"`. It should look like the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will create a `div` for each game tile. Create six **"X"** tiles and
    six **"O"** tiles, each with an `id` that begins with `"lettertile"` and ends
    in a number in value from `1-12`. Each `div` will contain the class `"lettertile"`
    and each `draggable` attribute will contain the value `"true"`. Every tile will
    also contain `ondragstart="return dragDefine(event)"` and `ondragend="dragEnd(event)"`.
    The `div` block should look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can create the actual `divs` for those block styles we created in **stylesheet.css**.
    First type `<div id= "gameboard">`. There should be a `div` for each block id,
    ranging from "blockA" to "blockI". Each of them will contain an `ondragover="return
    dragOver(event)"` and an `ondrop="dragDrop(event)"`. They should look like the
    following code block.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the page with the `body` and `html` closing tags, name the file `"using-drag-drop-api.html"`,
    then view the results in a browser window. Drag a few letters over and the results
    should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...drag-and-drop APIusing, with text](img/1048_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we created a basic HTML5 page and added a sketchy font for the heading
    using `@fontface` to give our game a fun visual look. Next, we styled the page
    by setting the `margin` for the `body` and all block level elements to `display:block`;
    to have greater control of the presentation of those elements. After styling our
    heading font, we define the `width` and `height` for the game tile box. This would
    be the container to hold the letters that make up the game tiles.
  prefs: []
  type: TYPE_NORMAL
- en: 'We began our script by typing an special comment tag for IE browsers to point
    them to an extra script file to trigger HTML5 elements: `<!--[if IE]><script src="img/html5.js"></script><![endif]-->`
    . It was provided under the MIT license by Remy Sharp (http://remysharp.com/html5-enabling-script/)
    to keep us all sane when working with Internet Explorer.'
  prefs: []
  type: TYPE_NORMAL
- en: The function `dragDefine()` was called when a user began to drag an item. It
    first checked to see if an item was draggable using `dataTransfer.effectAllowed='move'`.
    It then set the type of data to be transferred to `text` with `dataTransfer.setData("text/plain")`
    and identified the target by the `id` using `target.getAttribute('id'))`. The
    function returns true, meaning the object can be dragged.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we defined the `dragOver` function, which is called when an item being
    dragged is over another item, and accepts an event argument shown as `ev` that
    is then used to invoke `preventDefault()` to allow the item to be dropped. The
    drag-and-drop API specification clearly states that we must cancel dragging in
    order to then prepare to drop.
  prefs: []
  type: TYPE_NORMAL
- en: The function `dragEnd()` was then created to return a value of true when drag
    is complete. It also accepted an event argument.
  prefs: []
  type: TYPE_NORMAL
- en: After completing all the dragging functions we were ready to create the code
    to drop the item. The `dragDrop()` function took an event argument and used that
    value to get the value of the text object, which it then passed to a new variable
    `var idDrag` to hold the text string, which in turn was used by `getElementById`
    to identify the correct element ID to drop. Just as with `dragEnd()`, we had to
    indicate it was ok to drop the object by calling the `preventDefault()` function
    from the drag-and-drop API.
  prefs: []
  type: TYPE_NORMAL
- en: After we closed the head area of the page, in the body we placed the content
    boxes to hold our letter tiles and game board. These were made up of two parent
    div containers which each held child divs containing letter tiles or sections
    of the game board grid.
  prefs: []
  type: TYPE_NORMAL
- en: The game tile box invoked the `dragOver()` function whenever a letter tile was
    dragged over it. The letter tile divs themselves were made draggable by `draggable="true"`
    and returned `dragDefine()` whenever they were dragged. When dragging stopped,
    they invoked the `dragEnd()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Because we wanted the letter tiles to drop and stay in a specific area of the
    game board, we created divs for each individual block on the grid to hold our
    letters in place when they are dropped onto the board that would also return the
    `dragOver` event when an object was dragged over them, and invoke `dragDrop()`
    when an object was dropped on them.
  prefs: []
  type: TYPE_NORMAL
- en: Why bother with the block divs? We could have set up our game tile box on the
    left and the game board on the right and been done. The result would have been
    that when we dragged tiles from the left box to the game board, they would have
    dropped onto it and lined up in the order they were dropped instead of where we
    wanted to place them. This default behavior is fine when you want to sort a list,
    but not when control over precisely where an object is placed is needed.
  prefs: []
  type: TYPE_NORMAL
- en: We needed to override the default behavior that results when objects are dropped.
    We created nine game board blocks, all the same basic size. The main changes for
    each one were to the `padding` and `margin`.
  prefs: []
  type: TYPE_NORMAL
- en: Spend a few moments reading up on the drag-and-drop specification at [http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html](http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html)
    and you will notice they explicitly state they are only defining a drag-and-drop
    mechanism, and not what operation you have to perform. Why? Users with a smart
    phone or other touch screen device may not have a pointing device such as a mouse.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This demonstration of the drag and-drop API can be built into a complete game
    with scoring; a game board reset button, and other interactive elements in several
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: Create a canvas-based tic-tac-toe game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Two canvases could be used, one for the game tile box and another for the game
    board. The boards and game tiles could be dynamically drawn using canvas, and
    then scores or messages such as "you win" could be written to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Show responsive messages as the user plays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remy Sharp has a great demo online at [http://html5demos.com/drag-anything](http://html5demos.com/drag-anything)
    showing how to display messages on the screen when an object is dropped.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source tag of the object to be dropped would be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The "drop zone" box when the object would be dragged to might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: When the image was dropped into the box, instead of the image, you would see
    the text contained in "data-science-fact".
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packt book on jQuery, other recipes in this book, an advanced HTML5 Packt book.
  prefs: []
  type: TYPE_NORMAL
- en: Crossbrowser video support with vid.ly and jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supporting most browsers requires encoding a video into multiple formats, then
    serving up the right one to a browser. In this recipe we will use an online video
    display library named vid.ly ([http://www.vid.ly](http://www.vid.ly)) to prepare
    and share a video on a page reliably across multiple browsers and make the background
    color change over time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a video to upload to [http://www.vid.ly](http://www.vid.ly). Some
    browsers do not allow files to be served locally, so you may also want a location
    where you can upload your files and test pages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Type `<!DOCTYPE html> <html lang="en"> <head>`, then begin adding style declarations
    by typing `<style type="text/css"> h2{color:#303;}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Style a div to contain featured content: `#featured {position:relative; padding:
    40px; width: 480px; background-color:#000000; outline: #333 solid 10px; }`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `video {padding: 3px;background-color:black;}` to create the style for
    the video tag, then add a closing `</style>` tag.'
  prefs: []
  type: TYPE_NORMAL
- en: Declare the scripts used in the page. Type `<script src="img/jquery.min.js"
    type="text/javascript" charset="utf-8"></script>` to reference a minimized version
    of the main jQuery library. Then, type `<script type="text/javascript" src="img/jquery-ui.min.js"></script>`
    to reference the jQuery UI library used for the color change effect. Finally,
    we will reference our own script by typing `<script type="text/javascript" src="img/mycolor.js"></script>`
    just before the closing `</head>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Enter an opening `<body>` and `<section>` tag, then type `<header> <h2>Featured
    Video</h2></header>` to display the page heading.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can create the div to hold our featured content that we styled earlier.
    Type `<div id="featured"> <p>This video was converted to cross-browser formats
    by <a href="http://vid.ly">vid.ly</a></p>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to upload the video clips to [http://vid.ly](http://vid.ly)
    for conversion into multiple file formats. You will receive an e-mail when the
    process is complete and can then grab the code snippet for your video as seen
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the code from the site, and then paste it into your page. The `src` value
    in the video and script tag should be the URLs you were given by vid.ly. The code
    block should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Just to add a little extra fun, let''s add another video tag to the page. Type
    the following code: `<p>Awwww it''s a baby video!</p>`, use a different id for
    the video tag and resize it as shown: `<video id="tinymovie1" controls="controls"
    width="190" height="120">`, then use the same source tag: `<source src="img/7m5x7w?content=video"/><script
    id="vidjs" language="javascript" src="img/html5.js"></script></video>`, and close
    the page: `</div> </section></body></html>` . Save the file as `display-videos-using-videly.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: The last thing we are going to do is create a jQuery script to change the background
    color of the `#featured` div. Open up your editor and create a new file called
    `myColor.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `$(document).ready(function() {` then go to a new line and type the code
    that will call the animate function and alter the background color: `$(''#featured'').animate({''backgroundColor'':''#ff3333'',
    ''color'': ''#ffffff''}, 6000);})`; .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the page in your browser, and watch the colors change as the main video
    loads. You can see the following screenshot of how it should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we created a standard HTML5 page and began adding style declarations.
    We set the position of the `featured` div to relative to have more flexibility
    in the future in case we decided to add additional jQuery effects. A strong visual
    look was created by setting the `padding` to `40px` and the `outline` color to
    a dark gray with a weight of `10px`. The default background color was set to black
    `(#000000)` to give us a high contrast color to compare the ending red background
    against.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we styled the `video` tag to give it a `background-color` of `black` while
    it loads. We could have also added a background image here to act as a poster.
  prefs: []
  type: TYPE_NORMAL
- en: The base jQuery script was declared next using `<script src="img/jquery.min.js"
    type="text/javascript" charset="utf-8"></script>`. Because it does not contain
    effects such as `animate()`, we needed to also reference a minimized version of
    the jQuery UI library used for the color change effect. We then added a reference
    to our own script by typing `<script type="text/javascript" src="img/mycolor.js"></script>`.
    An alternative way to reduce the script file size further would be to create a
    custom script that contained only the animate effects from the jQueryUI library.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we created the main page content, including the links to the video on
    vid.ly. The default code vid.ly provides applies an ID of `'vidley video'` to
    the `video` tag, but that can be left out if you want to use your own style id
    or will be using a different id for each video. Another option would be to assign
    all videos the same class, then assigning them unique IDs as needed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Embracing Audio and Video"), *Embracing Audio
    and Video* covers the video element in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying video dynamically using jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The video element gives us the power to treat videos like images and manipulate
    them in fun and exciting ways.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a video available in multiple file formats (which are provided
    in the chapter code for this book). A server to which to upload your files is
    recommended, as not all browsers play files locally in a predictable way.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we have to prepare an HTML5 page in which to place it. Type the opening
    tags for our page: `<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"
    /> <title>Video Explosion</title>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the `stylesheet.css` file from the downloaded code files or create a
    new file with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following for the body `style: body {background: white;color:#333333;
    }`, then style a div tag as shown: `div {float:left; border:1px solid #444444;padding:5px;margin:5px;
    background:#999999;}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first unique div we need to create and style is `#featured`. Type `#featured
    {position:relative; width: 480px; background-color:#f2f1f1;}` to create the style.'
  prefs: []
  type: TYPE_NORMAL
- en: Now create a div named `details` to hold a small information box. Type `#details{
    position:relative;display:block;background-color:#6CF;color:#333333; padding:10px;}`
    to create a div that will display next to the `featured` div.
  prefs: []
  type: TYPE_NORMAL
- en: Save the `css` file, and reference it in the head of the html page with the
    link tag by typing `<link rel="stylesheet" href="css/stylesheet.css"type="text/css"
    media="screen" charset="utf-8"/>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following link to the main jQuery library below the stylesheet link:
    `<script src="img/jquery-latest.js" type="text/javascript" charset="utf-8"></script>`,
    then link to the jQuery UI library in this recipe''s code file by typing `<script
    type="text/javascript" src="img/jquery-ui.min.js"></script>`. Finally, add a link
    to the script we are about to create by typing `<script type="text/javascript"
    src="img/explode.js"></script>` to complete the referenced scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file and name it `explode.js`, and store it in a new subfolder
    named `js`. Type `$(document).ready(function(){}`. Between the two curly braces
    ({}) type `$(''h1'').effect(''shake'', {times:5}, 200)`; Create the statement
    that will cause content contained in the featured div tag to explode. On a new
    line, type `$(''#featured'').effect(''shake'', {times:3}, 100).delay(500).hide(''explode'',{},
    2000).slideDown(''fast'');)`; to complete the script. Your block of code should
    look similar to the following block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and return to the html page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a closing tag for the `</head>`, and opening `<body>`, tag to the HTML
    file. Next, enter an opening `<header>` tag and heading text: `<h1>Featured` Moto
    Video</h1> then closing the `</header>` tag to complete the header area.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an opening `<section>` tag then create a div by typing `<div id="featured">`,
    to hold our video tag and related elements. Type `<video id="movie" width="480"
    height="360" preload controls>`, then add a source tag for each of the three video
    file types: `<source src=''motogoggles.ogv'' type=''video/ogg; codecs="theora,
    vorbis"''/> <source src=''motogoggles.mp4'' type=''video/mp4; codecs="avc1.42E01E,
    mp4a.40.2"''/> <source src=''motogoggles.webm'' type=''video/webm; codecs="vp8,
    vorbis"''/>`, then close the `</video>` tag and the featured div with `</div>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The final block of content is contained in the `details` div. To create it
    type `<div id="details">`, then add a heading tag with text `<h1>Details</h1>`,
    and finally a short explanatory paragraph of text: `<p>The video will explode
    then appear again!</p>`. Close out the `</div></section> </body></html>` tags.
    Save the HTML file as `exploding-video-dynamically.html`, and open it in a browser
    to see the results. They should look similar to the following screenshot, which
    shows the video breaking into sections and exploding.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...videosmanipulating, jQuery used](img/1048_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `stylesheet.css` file contained the styles for the featured div that determined
    the positioning of the video object on the page. The first important thing to
    notice is the `position` is set to `relative`. This makes it possible for us to
    move the video object and perform other actions on it using jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: We created a div named `details` whose `position` was also `relative` but with
    the `background-color` set to `light blue (#6CF)`. The different color will help
    visually set it apart from the video object.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we added the jQuery library scripts. The jQuery UI library is required
    in order for us to have access to the methods and functions contained in the `animate`
    class. We are referencing it locally in this example, but you could also link
    to it in the same way we accessed the main jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we were able to write our own script to make elements on the page shake
    and explode! We created a statement to verify that the page was ready for our
    code by typing `$(document).ready(function(){}`. This function queries the DOM
    and asks if the page is loaded and ready for the script. Using this wrapper function
    is a best practice when creating jQuery scripts. We use the alias symbol `$` for
    the jQuery function to grab the `h1` selector and apply to it the action `effect`
    containing the `shake` parameter to make the element move sideways, which in turn
    contained an argument for the number of `times` to shake the element. The interval
    of time the shake should last was defined in milliseconds, in this case `200`.
    We use the selector `$('#featured')` to grab the featured div element, and just
    like we did with the `h1` tag, we `shake` it (only three times for variety) for
    a period of `100` milliseconds per shake. Now we add a few new actions. A `delay`
    of `500` milliseconds between the `shakes` and the explosion is appended to command
    using `.delay(500)`. We then append to that the `hide` action with the parameter
    `explode`, which will occur one time by default and will last a total of `2000
    milliseconds`. After the video explodes, the `slidedown` action slides it back
    onto the screen with a parameter of `fast`. Note that the amount of time used
    in the explosion was a bit long so we could see it easily. A timing of `100-500`
    milliseconds would create a more realistic explosion effect. You could also have
    grabbed the video tag directly by using `$('video')` if you only wanted the video
    itself and not the background or border provided by the featured tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving back to the HTML file, we placed our video in a container div named
    `featured` and created a parent `video` tag that would `preload` and contain the
    default `controls`. Before we closed the `video` tag, we nestled a `source` tag
    for each of the three video file types within it so users with different browsers
    could watch the video: We did not provide a FLASH fallback, but we could have
    using a JavaScript library such as `Video.js`. We then closed the `</video>` tag
    and the featured div with `</div>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally we created a div to hold information about what users could expect to
    happen in the `details` div.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is so much more that can be done with the video element, JavaScript, and
    the canvas tag. Read on for more experiments.
  prefs: []
  type: TYPE_NORMAL
- en: More interactive explosions using video and canvas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sean Christmann at [http://www.craftymind.com](http://www.craftymind.com) has
    an amazing experiment that gives you the power to explode multiple parts of a
    video at once in real time while it plays using multiple canvases. You can check
    it out here: [http://www.craftymind.com/2010/04/20/blowing-up-html5-video-and-mapping-it-into-3d-space/](http://www.craftymind.com/2010/04/20/blowing-up-html5-video-and-mapping-it-into-3d-space/)
    but be warned — it is very resource intensive in Firefox.'
  prefs: []
  type: TYPE_NORMAL
- en: What's with all the explosions?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It doesn't seem like there is any real practical reason to break apart videos
    at first. However, this could be very useful for mimicking unique transition effects
    or responses to user actions in games.
  prefs: []
  type: TYPE_NORMAL
- en: Chroma key background replacement in real time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Firefox developers have been experimenting with manipulating the video element.
    They created a tutorial that explained how they performed Chroma key replacement
    using canvas, JavaScript, and the attributes of the video element. You can read
    about it and view a demo at: [https://developer.mozilla.org/En/Manipulating_video_using_canvas](http://https://developer.mozilla.org/En/Manipulating_video_using_canvas).'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine displaying a video on a website where you displayed exotic backgrounds
    or created interactive mash-ups of products and people.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The video element is explored in depth in[Chapter 8](ch08.html "Chapter 8. Embracing
    Audio and Video"), *Embracing Audio and Video* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Movable video ads using jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be creating a video ad on a website that will move as the user scrolls
    down the page using jQuery and the video tag.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a video file in multiple formats such as `.ogg/.ogv, .mp4`, and
    `.webm`, or use a video service such as [http://www.vid.ly.com](http://www.vid.ly.com)
    to serve cross-browser videos. This example was not tested in Internet Explorer,
    but should work fine in recent versions of Safari, Google Chrome, Opera, and Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will begin by creating a typical website page. Open a new file in your editor,
    and save it as `movable-video-ad.html`. `Type <!DOCTYPE html> <html lang="en"><head><meta
    charset="utf-8" /><title>Movable Video Ad</title>` to place the first tags on
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: Now, create a reference link for our default stylesheet `<link rel="stylesheet"
    href="css/main.css" type="text/css" media="screen" charset="utf-8" />` and a secondary
    stylesheet named `<link rel="stylesheet" href="css/scroll.css" type="text/css"
    media="screen" charset="utf-8" />`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, create reference links for the jQuery scripts. Type `<script src="img/jquery-1.4.min.js"
    type="text/javascript" charset="utf-8"></script>` to reference the core jQuery
    code. Add the link statement `<script type="text/javascript" src="img/jquery-ui-1.7.2.custom.min.js"></script>`.
    The final script to which we will link is our own script that we will create for
    the recipe named `myAd.js`, which will be stored in a subfolder we create named
    "js". Type `<script type="text/javascript" src="img/myAd.js"></script>` to link
    to the file.
  prefs: []
  type: TYPE_NORMAL
- en: Type `</head><body><div id="container">to` begin the content area of the page.
    Display a page heading by typing `<header> <h1>Motocross Mania</h1></header>`.
  prefs: []
  type: TYPE_NORMAL
- en: Begin adding page content by typing `<div id="content"> <h2>No dirt = no fun</h2>`.
    The div that will contain the ad can now be added to the page by entering the
    text `<div id="motoad"><h3>Buy this movie!</h3>`, and then a movie title enclosed
    in paragraph element tags `<p><strong>MotoHelmet</strong></p>` .
  prefs: []
  type: TYPE_NORMAL
- en: 'A video tag `<video width="190" height="143" preload controls>` should then
    be added. Type source tags containing each video format as shown in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Close the `</div>` tag and save progress so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a paragraph with an id of intro `<p id="intro">` to contain the text
    `We review the best motorcross gear ever!!!`. Follow the paragraph tag and text
    with a list of dummy links: `<ul><li><a href="#">Helmets</a></li> <li><a href="#">Gloves</a></li><li><a
    href="#">Goggles</a></li></ul>`, close the paragraph with `</p>` , then create
    a new div to contain a dummy news content block followed by two more dummy div
    blocks , a footer tag, and the closing page elements, as shown in the code block
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will style the page elements in the `main.css` file. The first crucial
    style is the `#container` div. It should have a margin of `0 auto` and a width
    of `650px`. Next the `#motoad` div should be styled to `float right` and contain
    a `width` of `200px` to hold the video element. Finally, the `#intro` div should
    contain a shorter width of `450px`. The three styles should look similar to the
    code block shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the styles are minor adjustments to padding and color or other standard
    declarations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `scroll.css` file to define the styles to help our ad scroll.
    We will cascade the attributes of `#motoad` to form a div block that can then
    be moved. Next, define the `height` of the `#content` attribute, and the width
    of the paragraph and `h2` elements. The styles in `scroll.css` should now look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Save the file, and get ready to create our jQuery script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open or create `myAd.js` and begin by typing the document ready function `$(document).ready(function(){}`
    and curly braces. Click enter between the curly braces and type the scroll function
    `$(window).scroll(function() {`. After the opening curly brace of that function
    type the command: `$(''#motoad'').stop().animate({top: $(document).scrollTop()},''slow'',''easeOutBack'')`;.
    Close the script with "});});" as well. Our jQuery script should now look like
    the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Save all the files and load the HTML page in a browser window. The page should
    look like the following screenshot before you begin scrolling the page.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Try scrolling up and down the page. The ad should move up and down the page
    as well. The result should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After to creating a typical HTML page with different content elements, we were
    ready to style the CSS pages. We separated the CSS into two files, `main.css`
    and `scroll.css`, so that when we call the scroll function in our jQuery script
    and actively apply it, the content elements on the page shrink so that our ad
    can easily move without blocking any information on the page.
  prefs: []
  type: TYPE_NORMAL
- en: We wanted to cause the `#motoad` div tag to move whenever the window scroll
    event was called. To do this we use the alias symbol `$` for the jQuery function
    to grab the `window` selector from the DOM and apply to it the action `scroll`
    containing the default scroll action parameters. Using this function, we then
    created our command to control the behavior of our `#motoad` div block. We gave
    it the action of `stop`, so it would then be ready to animate. The `animate` action
    was chained to the `stop` command. The first parameter of `animate` that we applied
    to the `#motoad` div caused the div to move when the scroll bar was moved in the
    document window. The parameter `slow` controlled the speed at which the ad would
    move up and down and the parameter `easeOutBack` referenced an easing command
    to create a fluid animation movement instead of an abrupt start or stop.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we've animated a custom HTML element by causing it to respond
    to user actions on the page. This just one way we can subtly add effects that
    can be used for real-world solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Have HTML element, will travel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Explore the jQuery UI library and you will be inspired by the many ways you
    can manipulate and style any HTML element. Visit [http://jqueryui.com](http://jqueryui.com)
    for demos and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learning jQuery: Better Interaction Design and Web Development with Simple
    JavaScript Techniques, available from Packt Publishing.'
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the display of images using Easel.js and the canvas tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JavaScript library `Easel.js` reduces the complexity of creating animations
    and rich interactive environments with the `canvas` tag. In this recipe, we will
    use a series of images in a single file named "sprites" to show how to use `Easel.js`
    to control which graphic image in the sprite is selectively displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to download the `Easel.js` library or use the copy in the code
    files for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the opening tags for an HTML5 file. Your code should look similar to
    the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, link to the main stylesheet `styles.css` used in this recipe: `<link
    href="styles.css" rel="stylesheet" type="text/css" />`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will import the `Easel.js` Framework library by inserting links to
    the following script files: `UID.js, SpriteSheetUtils.js, SpriteSheet.js, DisplayObject.js,
    Container.js, Stage.js, BitmapSequence.js`, and `Ticks.js`. You can see the path
    and link for each script file here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create and opening `<script>tag` and declare the following three variables:
    `var canvas;var stage;var critterSheet = new Image()`; for our script.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `function init(){` to begin the function, and follow it with `canvas =
    document.getElementById("testCanvas")`; to tie the canvas in the body of the page
    to the canvas variable. Prepare to load a new `spriteSheet` by typing `critterSheet.onload
    = handleImageLoad`;. The `critterSheet` variable stores the source of the sprite
    images. Type `critterSheet.src = "images/moles.png"`; to load our own series of
    mole images. The function block should look like the code block below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The second function we will create is `handleImageLoad()`. Type function `handleImageLoad()
    {` then `stage = new Stage(canvas)`; to create a new instance of the stage. Type
    `var spriteSheet = new SpriteSheet(critterSheet, 76, 80);to` create a new `spriteSheet`.
    Create a new bitmap sequence variable called `critter1` to live on it and define
    its position on the stage using x and y coordinates by typing: `var critter1 =
    new BitmapSequence(spriteSheet); critter1.y = 85;critter1.x = 85`;. Add a critter
    from the second image on our sprite sheet `moles.png` by typing `critter1.gotoAndStop(1)`;.
    Next, add it to the stage using the command `stage.addChild(critter1)`;.'
  prefs: []
  type: TYPE_NORMAL
- en: Clone the first `critter1` variable we created, and pass its value to a new
    critter variable by typing `var critter2 = critter1.clone()`;. Position the new
    variable to the right of the first critter by adding to its current location value
    using `critter2.x += 120`;.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `critter2.gotoAndStop(0)` to assign a value to the `critter2` variable.
    The code block for cloning critter 1 and critter 2 should look like the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The Tick interval `Tick.setInterval(300)`; and listener `Tick.addListener(stage)`;
    are the last two statements we will add to the script. Close the brace (}) for
    the `handleImageLoad()` function, and type a closing script tag.
  prefs: []
  type: TYPE_NORMAL
- en: Close the `</head>` tag, then enter the opening `body` tag with an `onload`
    attribute that calls the `init()` function. Create a div named "description" for
    content. Add a div named `canvasHolder` to contain the canvas element. Display
    the image file `moles.png` at the bottom of the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the files as `whack-mole-easel-test-single.html`. The result can be seen
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After we took care of setting up the beginnings of an HTML5 page we were ready
    to import the `Easel.js` framework and create our main script.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created an opening `<script>tag` and declared the following global variables:
    `var canvas;var stage;var critterSheet = new Image()`; for our script.'
  prefs: []
  type: TYPE_NORMAL
- en: The function `init()which` was created would be invoked when the page is loaded.
    It contained the `canvas` variable in the process of being assigned the selector
    `testCanvas` using `document.getElementById("testCanvas");to` tie the canvas in
    the body of the page to the canvas variable. Next, we prepare to load a new `spriteSheet`
    by typing `critterSheet.onload = handleImageLoad`;. The `critterSheet` variable
    stores the source of the sprite images. Typing `critterSheet.src = "images/moles.png"`;
    gave us access to our own series of mole images.
  prefs: []
  type: TYPE_NORMAL
- en: The second function we created was `handleImageLoad()`. In this function, we
    did most of our work, starting with creating a new instance of the stage using
    `stage = new Stage(canvas)`;. Next, we created a new `spriteSheet` using `var
    spriteSheet = new SpriteSheet(critterSheet, 76, 80)`; to create a new `spriteSheet`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we had a sprite sheet instance, we could create a new bitmap sequence
    variable called `critter1` to live on it and define its position on the stage
    using x and y coordinates by typing: `var critter1 = new BitmapSequence(spriteSheet);critter1.y
    = 85;critter1.x = 85`;. Next, we referenced the frames we wanted to add by number
    so that we applied the correct action first to the critter and then to the stage.
    We linked the `critter1` variable to the second image on our sprite sheet `moles.png`
    by typing `critter1.gotoAndStop(1)`;. We added the image to the stage using the
    command `stage.addChild(critter1)`;.'
  prefs: []
  type: TYPE_NORMAL
- en: We cloned the first `critter1` variable we crated and passed its value to a
    new critter variable by typing `var critter2 = critter1.clone()`;. We positioned
    the new variable to the right of the first critter by adding to its current location
    value using `critter2.x += 120`;. We assigned the critter its own image from the
    `moles.png` image file by commanding the `BitSequence` to `goto` the location
    of the first image on `moles.png` and `stop` there and assign that to the `critter2`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: We added `Tick.setInterval(300)`; , which applied a time period of `300` milliseconds
    between `Ticks`. The Tick interface acts as a global timing device, giving us
    the ability to return frame rates per second (FPS) if needed. We added a listener
    to the stage `Tick.addListener(stage)`; which behaves like other types of listeners
    in that it listens for ticks. This can be used to help redraw the stage at a specified
    time, or perform other timing related actions.
  prefs: []
  type: TYPE_NORMAL
- en: We used the `onload` attribute to call the `init()` function in the `body` tag.
    This causes the `init()` function to be invoked on page load.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Animating a sequence* recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: Animating a sequence of images using Easel.js and the canvas tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can animate image strips called sprites by creating arrays and functions
    using the `Easel.js` JavaScript library and then manipulating them with the `canvas`
    element. In this recipe, we will animate the same strip but display two differently
    timed sequences.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the code files for this recipe to use the `Easel.js` framework library
    as well as supporting files. You will need a recent browser that will display
    HTML5 elements to view properly and test the code used in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the opening tags for an HTML5 file. Your code should look similar to
    the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Link to the main stylesheet `styles.css` used in this recipe: `<link href="styles.css"
    rel="stylesheet" type="text/css" />`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `Easel.js` Framework library by inserting links to the following
    script files: `UID.js, SpriteSheetUtils.js, SpriteSheet.js, DisplayObject.js,
    Container.js, Stage.js, BitmapSequence.js`, and `Ticks.js`. Refer to the previous
    example for how the framework block should look.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an opening `<script>` tag and declare the following three variables:
    `var canvas;var stage;var critterSheet = new Image()`; for our script.'
  prefs: []
  type: TYPE_NORMAL
- en: Type `function init(){` to begin the function and follow it with `canvas = document.getElementById("testCanvas")`;.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare to load a new `spriteSheet` by typing `critterSheet.onload = handleImageLoad`;.
    Type `critterSheet.src = "images/moles.png"`; to load our own series of mole images.
    The function block should look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The second function we will create is `handleImageLoad()`. Type function `handleImageLoad()
    {` then `stage = new Stage(canvas)`; to create a new instance of the stage. Type
    `var spriteSheet = new SpriteSheet(critterSheet, 80, 80)`; to create a new `spriteSheet`.
    Now that we have a sprite sheet, create a new bitmap sequence variable named `critter1`
    to live on it and define its position on the stage using x and y coordinates by
    typing: `var critter1 = new BitmapSequence(spriteSheet)`; and then `critter1.y
    = 100;critter1.x = 90`;. Next, we will create an array to map to each image on
    the original `spritesheet` file by entering `var frameData = {shymole:0, upmole:1,
    downmole:2, whacked:3, whackedow:4, clouds:5,tinycloud:6, cloudgroup:7}`; so that
    we have eight name values, each of which is tied to an array id.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code block we have so far for `handleImageLoad()` should look like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `spriteSheet` using it as a parameter by typing: `spriteSheet
    = new SpriteSheet(critterSheet, 80, 80, frameData)`;.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new bitmap sequence variable named `critter1` and apply the image
    sprite by typing: `critter1gotoAndStop(0)`;. Add `critter1` to the `stage` using
    `stage.addchild(critter1)`;.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the first `critter1` variable, and pass its value to a new critter variable
    by typing `var critter2 = critter1.clone()`;. Define the `x` value of the new
    variable using `critter2.x += 120`;. Assign the critter its own image from the
    `moles.png` image file by typing `critter2.gotoAndStop(5)`; The code block for
    adding a new `spriteSheet`, creating `critter 1` and cloning `critter 2` should
    look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Type: `var critter3 = critter2.clone(); critter3.spriteSheet = spriteSheet`;.
    Just like with the other critter variables we created earlier, redefine the `x`
    value of `critter3` by adding `10` to its current value: `critter3.x += 10`;.
    The following code block shows what we have done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Reference the image `frames` in `moles.png` by name by typing `critter3.gotoAndStop("upmole")`;.
    Swap the current `upmole` frame image for a different frame by cloning a new variable
    and referencing a new frame: `var critter4 = critter3.clone(); critter4.gotoAndStop("downmole")`;.
    Move that frame over `10` pixels by typing: `critter4.x += 10`;.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Swap the frames out one more time and move our new frame over `10` pixels to
    the right: `var critter5 = critter4.clone(); critter5.gotoAndStop("shymole");
    critter5.x += 10`;. Let''s take a look at the block of code we should have so
    far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Cycle through the frames in our `moles.png` file by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a second animation sequence to the stage, changing the timing of the animation
    by referencing a different starting frame when the new critter sprite is added
    to the stage: `var critter7 = critter1.clone(); critter7.x = critter6.x + 100;
    critter7.gotoAndPlay(1); stage.addChild(critter7)`;.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our two animation sequences should now contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The Tick interval `Tick.setInterval(200)`; and listener `Tick.addListener(stage)`;
    are the last two statements we will add to the script. Close the brace (}) for
    the `handleImageLoad()` function and type a closing script tag.
  prefs: []
  type: TYPE_NORMAL
- en: Type `</head>`, then `<body onload="init()">` . Create a div named `"description"`
    to hold content. The last div is `canvasHolder`, containing the canvas element.
    Set the width to `600`, the height to `280`, and the background color to a light
    gray `(#ccc)`. A link to the image file `moles.png` is added so users can see
    the image sprites referenced in `moles.png`.
  prefs: []
  type: TYPE_NORMAL
- en: Save the file, and open it in a browser window. You should see a still frame
    on the left side (the image of the mole head with eyes closed) and two animation
    sequences cycling on the right side of the screen. The following screenshot shows
    how the two sequences are loading the same frames but with different timing.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first steps in the recipe of creating the HTML page and referencing the
    canvas are the same as in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the `spriteSheet`, we created a new variable to hold our sprite
    frames called `critter1` and defined the `x` and `y` coordinates for the frame
    location by typing: `var critter1 = new BitmapSequence(spriteSheet); critter1.y
    = 100;critter1.x = 90`;.'
  prefs: []
  type: TYPE_NORMAL
- en: We created the array `var frameData` to declare eight key/value pairs. We were
    then able to create a new `spriteSheet` that took the parameters for a `spriteSheet`
    name, a default height and width for each frame, and loaded all the frames from
    `moles.png` at once into the `spriteSheet` using `frameData`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we experimented with using `frameData` to reference frames by number value
    and name key, creating a series of bitmap sequences, then replacing them with
    their clones.
  prefs: []
  type: TYPE_NORMAL
- en: We animated sequences and placed them on the stage. They both followed the same
    format but started their animation sequences on different frames by changing the
    number argument in the `gotoAndPlay` action.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added `Tick.setInterval(200)`;, which applied a time period of 200
    milliseconds between Ticks. The Tick interface acts as a global timing device
    which gives us the ability to return frame rates per second (FPS) if needed. We
    added a listener to the stage `Tick.addListener(stage)`; which behaves like other
    types of listeners in that it listens for ticks. This can be used to help redraw
    the stage at a specified time, or perform other timing related actions. We used
    the `onload` attribute to call the `init()` function in the `body` tag. This causes
    the `init()` function to be invoked on page load.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Easel.js` and other similar libraries to make controlling HTML5 elements easier
    are cropping up everywhere. Take caution on how you use them though as some may
    not be stable enough for use in production environments.'
  prefs: []
  type: TYPE_NORMAL
- en: Pirates Love Daisies and so should you
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The creator of `Easel.js` was asked by Microsoft to create a proof of concept
    web game named Pirates love daisies ([http://www.pirateslovedaisies.com](http://www.pirateslovedaisies.com))
    made entirely using HTML5 and JavaScript with heavy reliance on the `Easel.js`
    library to manipulate the `canvas` element. You can play the game in any web browser
    and in what may be an ironic twist; it contains special features for visitors
    using the Internet Explorer 9 browser.
  prefs: []
  type: TYPE_NORMAL
- en: The return of old school computer animation techniques
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When I first began playing games on a computer, it was a big deal for a game
    to have 256 colors on the screen and 8-bit animations. Computer animators used
    a lot of tricks to replicate effects such as water moving. Revisit those days
    (or discover them for the first time with this demo from effect games: [http://www.effectgames.com/demos/canvascycle/](http://www.effectgames.com/demos/canvascycle/).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a whole chapter in this book full of canvas recipes. Go devour them
    now if you skipped them.
  prefs: []
  type: TYPE_NORMAL
- en: Random animation with audio using the canvas tag and JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will use the canvas tag to draw and animate a series of shapes.
    We will also loop an audio file using the audio tag to play while the animation
    displays. We are adapting an original animation created by Michael Nutt. We will
    be creating a slower, more relaxing animation that looks like waving grass.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a recently updated browser, such as Firefox 3.6 or Google Chrome,
    and an audio file in multiple formats. It does display at a different (smaller)
    size in Opera browsers 9 and 10\. The audio will also not play in those versions
    of Opera.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, open a new HTML5 page and name it `random-animation-with-audio.html`.
    Enter the beginnings of an HTML5 page including the page title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add links to the JavaScript and CSS files that will be imported when
    the page loads: `<script type="text/javascript" src="img/animatedlines.js"></script><link
    rel="stylesheet" href="css/stylesheet.css" type="text/css" media="screen" charset="utf-8"
    />`, and close the head tag with `</head>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Enter `<body onLoad="init();">` to activate the `init()` function when the page
    loads.
  prefs: []
  type: TYPE_NORMAL
- en: Next we create the header for the page `<header><h1>CANVAS Reggae</h1></header>`,
    and then add the canvas element by typing `<canvas id="tutorial" width="480" height="360"></canvas>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new div with an of `id` credits to hold a link to Michael''s site:
    `<div id="credits">Based on Canvas Party by <a href="http://nuttnet.net/">Michael
    Nutt</a>&nbsp;&nbsp`;. Then add a link to the div to grab the audio element and
    apply the `pause()` function to the music when the link is clicked. `<a href="#"
    onClick="document.getElementsByTagName(''audio'')[0].pause();">[OFF]</a></div>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the audio tag, and set autoplay to true and loop to loop: `<audio
    autoplay="true" loop="loop">` Create two source tags to contain the audio formats:
    `<source type="audio/ogg" src="img/randomreggae.ogg" /><source type="audio/mpeg"
    src="img/randomreggae.mp3" />`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before closing the audio tag, we will add a string of text that will appear
    if the audio tag is not supported: `Your browser doesn''t recognize the HTML5
    audio tag`.'
  prefs: []
  type: TYPE_NORMAL
- en: Close the audio, body, and html tags, and save the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we create our script, open the `stylesheet.css` page, and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Now that the HTML and CSS pages are built, we will tackle the animation script.
    Create a new JavaScript file and name it `animatedLines.js`. We will place it
    in a new subfolder named `js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will declare the flatten variable and create a new array function:
    `var flatten = function(array) { var r = []`;. Next, within the function, we will
    create a `for` statement to declare an array beginning with one object (var `i
    = 0)` and then increment the size of the array while the length of the array is
    greater than `i. for(var i = 0; i < array.length; i++) {`. Using the `push` function
    we will add new values to the array by typing: `r.push.apply(r, array[i]);}` then
    finally we end the function by returning the array: `return r; }`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our script so far should look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create a function named shuffle that accepts an array as an argument.
    Type `function shuffle(array) { var tmp, current, top = array.length`;. Inside
    the function, we have an if/while loop to move through the values in the array.
    Add it to the script by entering: `var tmp, current, top = array.length; if(top)
    while(--top) { current = Math.floor(Math.random() * (top + 1)); tmp = array[current];
    array[current] = array[top]; array[top] = tmp; }. Return` the `array` value at
    the end of the function. Our function to shuffle array values randomly should
    now look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are ready to create a global `canvas` variable and a `context` variable
    by typing: `var canvas`; and `var ctx;respectively`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With those variables created, we can add the `init()` function to the script,
    where all the action starts. Type function `init() {` then enter the statement
    to associate our canvas variable with the canvas element: `canvas = document.getElementById(''tutorial'')`;.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create an `if` statement to set the width and height attributes
    of our canvas variable: `if (canvas.getContext) {canvas.width = window.innerWidth;
    canvas.height = window.innerHeight - 100; ctx = canvas.getContext(''2d''); ctx.lineJoin
    = "round"; setInterval("draw()", 300); }.This` completes the `init()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we add a listener for our browser window to detect when it is being resized:
    `window.addEventListener(''resize'', function() {canvas.width = window.innerWidth;canvas.height
    = window.innerHeight - 100; });}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most recent additions to our script should now look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: We are finally ready to create a function to draw shapes onto the canvas. This
    function will contain most of the script that powers the animation of the shapes.
    Type `function draw(){ctx.globalCompositeOperation = "darker"; ctx.fillStyle =
    '#000'; ctx.fillRect(0, 0, canvas.width, canvas.height);ctx.globalCompositeOperation
    = "lighter";to` set the look of the canvas background.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will enter the colors to use in the animation. We will create an array
    of arrays containing `rgba` values. Type: `var colors = ["rgba(134, 154, 67, 0.8)",
    "rgba(196, 187, 72, 0.8)", "rgba(247, 210, 82, 1)", "rgba(225, 124, 20, 0.8)"];.Our`
    colors are defined, so now we will set the width and height of the shapes using
    an array containing individual arrays of width and height values: `var data =
    [ [ [5, 20], [15, 2] ], [ [50, 12], [10, 14], [3, 21] ], [ [60, 8]], [ [30, 24],
    [15, 4], [10, 17] ], [ [5, 10] ], [ [60, 5], [10, 6], [3, 26] ], [ [20, 18] ],
    [ [90, 11], [40, 13], [15, 10] ], [ [70, 19] ], ]`.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we can animate the shapes by changing their width and height using `data
    = shuffle(data)`;.
  prefs: []
  type: TYPE_NORMAL
- en: To animate the shapes up and down as well as side to side, we need to "flatten"
    or squish their height. Create a new variable to contain the `var flatData = flatten(data)`;
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will be contorting the lines so they appear to wave by pulling them
    in different directions and using `bezierCurve`. This is a large function block
    contained within the `draw()` function we created earlier, so enter the `link()`
    function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now while we are still in the `draw()` function let''s add a new variable to
    represent the starting point for a shape, and then add a `for` loop to create
    a new variable that can hold an array of data value sets. Below is the variable
    and loop code: `Var topStartingPoint = 0; for(var i in data) { var group = data[i];
    var color = colors[ i % colors.length ];ctx.strokeStyle = color`;.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take it further by creating a nested `for` loop that passes a group of data
    values to a new variable named `line: for(var j in group) { var line = group[j]`;
    which we can then manipulate after creating a `bottomStartingPoint` variable with
    an initial value of zero: `var bottomStartingPoint = 0`;.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A third nested `for` loop will allow us to control the positioning and movement
    of the shapes further: `for(var k in flatData) { if(flatData[k][1] < line[1])
    { bottomStartingPoint += flatData[k][0] + 11;} }`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we use link to set the top and bottom starting points for a line,
    `link(topStartingPoint, bottomStartingPoint, line[0])`;, then assign the `topStartingPoint`
    the value of its current value plus the line array. The final statement sets the
    `topStartingPoint` value to its current value plus five: `topStartingPoint +=
    line[0]; } topStartingPoint += 5; }}`. Save the script file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file `random-animation-with-audio.html` in a browser, and you should
    see the lines sway back and forth similar to what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we created our HTML5 page with links to the JavaScript and CSS files
    that would be imported when the page loaded: `<script type="text/javascript" src="img/animatedlines.js"></script><link
    rel="stylesheet" href="css/stylesheet.css" type="text/css" media="screen" charset="utf-8"
    />`. To activate our animation sequence, we placed the `init()` function in the
    body tag of the HTML page. The `init()` function in the `animatedLines.js` JavaScript
    file will be initialized by `<body onLoad="init();">` when the page loads.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We used the `body` style to set a global default `margin` of `0`, a `background-color`,
    font `color`, and `font-family` for the page. We styled a basic link color, then
    styled the `h1` heading tag so it would display at the `top` with `position: absolute;
    top: 0`; and always appear above most other content blocks by setting the `z-index`
    to `50`. The `#credits` div was positioned to appear at the bottom-right corner
    of the page and the audio tag was hidden using `visibility: hidden`.'
  prefs: []
  type: TYPE_NORMAL
- en: We created a new script named `animatedLines.js` and first defined a series
    of variables and functions to control the behavior of the shapes.
  prefs: []
  type: TYPE_NORMAL
- en: We set up an array named `flatten` that would add new values to itself. We next
    needed a function to rotate randomly through array values. We used the `Math.floor(Math.random()`
    statement to calculate a random number, and multiply the result by the sum of
    the current value of the variable `top + 1`. We then returned a whole number value
    to the variable `current`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We defined the dimensional values of the `canvas` variable by grabbing the
    ID of the `canvas` element on page load using `document.getElementById`. We set
    the `width` and `height` attributes of our `canvas` variable with some help from
    the DOM: `canvas.height = window.innerHeight - 100; ctx = canvas.getContext(''2d'')`;
    then created a statement to apply a `lineJoin` to the `2d` context of the `canvas`
    with a parameter of `round`. We set the speed the lines were drawn on the canvas
    to `300` milliseconds using the `setInterval()` function. The higher the number,
    the slower the animation looks. We added a listener for our browser window to
    detect when it is being resized using `window.addEventListener`, which contained
    parameters for the size of the browser window and the canvas.'
  prefs: []
  type: TYPE_NORMAL
- en: The shapes were then drawn onto the canvas using the `draw()` function. The
    `globalCompositeOperation = "darker"`; was used to darken lines as they moved
    across each other. Areas of the lines brightened as they overlapped in the front
    area of the canvas stage using `globalCompositeOperation = "lighter"`; to set
    the look of the canvas background.
  prefs: []
  type: TYPE_NORMAL
- en: The colors used to decorate the lines need to be in `rgba` format. The 'a' in
    rgba refers to the alpha value, which controls the visibility of each color. Each
    rgba value set was contained in an array, which in turn became a list of arrays.
    We needed a matching number of width and height value sets for the lines. These
    were stored in the array `var data`.
  prefs: []
  type: TYPE_NORMAL
- en: We next assigned the `data` array the value returned from our `shuffle()` function
    so we could randomize the appearance of the lines on the screen. Then, we assigned
    to the variable `flatData` the value returned from the `flatten()` function. Assigning
    a pull value to each line enabled us to move it over a set number of pixels. We
    combined this with `bezierCurve` to cause the lines to bend.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Combining the audio tag, canvas animations, and JavaScript sounds like a fun
    way to create cool visualization effects. These are heavily dependent upon browser
    support though, so many web browser users won't be able to view them properly
    at this time. By which I mean most standard browsers won't be able to play them
    as far off as a year or two.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing your audio with cutting edge browsers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have downloaded the beta Firefox 4, you have access to the Firefox Audio
    and Video API. You will be able to view and create your own audio visualizations
    using tools like the Spectrum Visualizer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.storiesinflight.com/jsfft/visualizer/index.html](http://www.storiesinflight.com/jsfft/visualizer/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Pushing the implementation of audio in HTML5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Alexander Chen has been experimenting with audio and canvas by porting Flash-based
    app. He has run into some issues with using multiple audio files that are detailed
    here on his blog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://blog.chenalexander.com/2011/limitations-of-layering-html5-audio/](http://blog.chenalexander.com/2011/limitations-of-layering-html5-audio/)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The canvas and
  prefs: []
  type: TYPE_NORMAL
