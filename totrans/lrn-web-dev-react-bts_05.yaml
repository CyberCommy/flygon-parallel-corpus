- en: Chapter 5. jQuery Bootstrap Component with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have covered how we can create a DOM element and how DOM interacts
    with a React component. As we have seen, every framework has a different way to
    interact with DOM elements, whereas React uses a fast, internal synthetic DOM
    to perform diffs and computes the most efficient DOM mutation for you where your
    component actually lives.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll take a look at how jQuery Bootstrap components work
    in React virtual DOM. We are also going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Component life cycle methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap modal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples with details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will give you a better understanding of dealing with jQuery Bootstrap components
    with React.
  prefs: []
  type: TYPE_NORMAL
- en: In Bootstrap we have lots of reusable components that makes a developer's life
    easy. In [Chapter 1](ch01.html "Chapter 1. Getting Started with React and Bootstrap"), *Getting
    Started with React and Bootstrap* and [Chapter 2](ch02.html "Chapter 2. Lets Build
    a Responsive Theme with React-Bootstrap and React"), *Lets Build a Responsive
    Theme with React-Bootstrap and React*, we explained the integration of Bootstrap.
    So let us start with a small component to integrate in React.
  prefs: []
  type: TYPE_NORMAL
- en: Alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Bootstrap we have the `alert` component to show the messages in the UI as
    per the user action that makes your component more interactive.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to enfold a text in the `.alert` class that contains the
    `close` button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bootstrap also provides the contextual classes that represent the different
    colors according to the messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.alert-success`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.alert-info`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.alert-warning`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.alert-error`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bootstrap gives us the predefined structure of the `alert` component that makes
    it easy to include it in our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When we are using the `close` button as a child of the wrapper tag where we
    have declared the `alert` class, we need to add the `.alert-dismissible` class
    to that element as shown in the preceding example code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the custom attribute, `data-dismiss="alert"`, will give us the `close`
    functionality in `alert`.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap alert component in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will integrate the Bootstrap `alert` component with the React controlled
    component (`textarea`) that we developed earlier in [Chapter 4](ch04.html "Chapter 4. DOM
    Interaction with ReactJS"), *DOM Interaction with ReactJS*, where we developed
    a form with a controlled component. We went through an example of preventing the
    user writing text into the `textarea` above `140` characters.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we will see how we can bind alert/warning messages
    with the same component. Here, we are just extending the developed controlled
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might have also have seen the following screenshot in [Chapter 4](ch04.html
    "Chapter 4. DOM Interaction with ReactJS"), *DOM Interaction with ReactJS*, which
    shows the controlled component with comments in the `textarea`. In brackets, you
    can see the defined character limit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap alert component in React](graphics/image_05_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After adding the `alert` component, it will show in the UI when a user reaches
    the maximum character limit.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, first of all, we''ll need to enfold the Bootstrap component into
    the React structure. Let''s go through the practical example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have created a component with the name of `BootstrapAlert` and wrapped the
    HTML inside the `render` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`onClick` is calling the `handleClose` function which will handle the `close`
    event. It is the default function of React, as we have the `.show()` and `.hide()`
    default functions in JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: Before we integrate the jQuery Bootstrap component, we must understand the React
    life cycle methods in the component.
  prefs: []
  type: TYPE_NORMAL
- en: Component lifecycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In React, each component has its own specific callback function. These callback
    functions play an important role when we are thinking about DOM manipulation or
    integrating other plugins in React (jQuery). Let''s look at some commonly used
    methods in the life cycle of a component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getInitialState()`: This method will help you to get the initial state of
    a component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidMount`: This method is called automatically when a component is
    rendered or mounted for the first time in DOM. While integrating JavaScript frameworks,
    we''ll use this method to perform operations such as `setTimeout` or `setInterval`,
    or send AJAX requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillReceiveProps`: This method will be used to receive new `props`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no alternative method as, `componentWillReceiveState`. If we need to
    perform operations on `state` changes then we use `componentWillUpdate`.
  prefs: []
  type: TYPE_NORMAL
- en: '`componentWillUnmount`: This method is invoked before the component is unmounted
    from DOM. Cleanup the DOM memory elements which are mounted in the `componentDidMount`
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillUpdate`: This method is invoked before updating a new `props`
    and `state`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidUpdate`: This is invoked immediately when the component has been
    updated in DOM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now understand the component life cycle methods. So now let''s integrate
    our component in React using these methods. Observe the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see an explanation of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: The `componentDidMount()`, by default, is hiding the `alert` component using
    the `refs` keyword when the component mounts in DOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `alert` component provides us with some events that are invoked when the
    `close` method is called
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `close.bs.alert` is invoked when the `close` method is called
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we use the component `componentWillUnmount`, we are also removing the event
    handler using the jQuery `.off`. When we click on the close (x) button, it invokes
    the Closehandler and calls the close
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also created some custom events that control our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.hide()`: This is for hiding the component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.show()`: This is for showing the component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.close()`: This is for closing the alert'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Observe the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using the `if` condition, we are hiding and showing the alert as per the character
    length. The `handleClose()` method will call the `close` method which we created
    earlier to close the alert.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `render` method, we are rendering our component with the `className
    props`, `ref` key, and `onClose` props to handle the `close` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `.fade` in the class gives us the fading effect when we close the alert.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s combine our code and take a quick look in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Component integration](graphics/image_05_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we click on the close (**x**) button, it invokes the `Closehandler` and
    calls the `close` event to close the alert message. Once closed, to get it back
    you will have to refresh the page. Please observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Component integration](graphics/image_05_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using `console.log()`, we can verify if our component is mounted or unmounted.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a look at another example of the Bootstrap component.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap modal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Bootstrap modal component displays a small amount of information to the
    user without taking you to a new page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table from the Bootstrap website ([http://getbootstrap.com/javascript](http://getbootstrap.com/javascript))
    shows the full list of options available for the modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Type** | **Default** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `backdrop` | Boolean | `true` | `backdrop` allows us to close the modal when
    the user clicks outside. It gives a static value for a `backdrop` which doesn''t
    close the modal on click. |'
  prefs: []
  type: TYPE_TB
- en: '| `keyboard` | Boolean | `true` | Presses the *Esc* key to close the modal.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `show` | Boolean | `true` | Initializes the modal. |'
  prefs: []
  type: TYPE_TB
- en: '| `remote` | PATH | `false` | This option has been deprecated since version
    3.3.0 and has been removed in version 4\. For client-side templating it is recommended
    to use the data binding framework, or call `jQuery.load` yourself. |'
  prefs: []
  type: TYPE_TB
- en: 'The following table from the Bootstrap website ([http://getbootstrap.com/javascript](http://getbootstrap.com/javascript))
    shows the full list of events available for the Bootstrap modal component:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Event type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `show.bs.modal` | This event fires immediately when the `show` (`$(''.modal'').show();`)
    instance method is called. |'
  prefs: []
  type: TYPE_TB
- en: '| `shown.bs.modal` | This event is fired when the modal has been made visible
    to the user (we need to wait for CSS transitions to complete). |'
  prefs: []
  type: TYPE_TB
- en: '| `hide.bs.modal` | This event is fired immediately when the `hide` (`$(''.modal'').hide();`)
    instance method has been called. |'
  prefs: []
  type: TYPE_TB
- en: '| `hidden.bs.modal` | This event is fired when the modal has finished being
    hidden from the user (we need to wait for CSS transitions to complete). |'
  prefs: []
  type: TYPE_TB
- en: '| `loaded.bs.modal` | This event is fired when the modal has loaded content
    using the `remote` option. |'
  prefs: []
  type: TYPE_TB
- en: Whenever we are integrating any other component, we must be aware of the component
    options and events provided by the library or plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create a `button` component to open a `modal` popup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to create a component of `modal-dialog` and mount the `button`
    and `dialog` component to the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also create some events that handle the `show` and `hide` modal events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In `componentDidMount()`, we are initializing the `modal` component with some
    options and injecting the `hidden.bs.modal` event into `modal`.
  prefs: []
  type: TYPE_NORMAL
- en: The `close()` and `show()` functions trigger the model `hide`/`show` event.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `render()` method, we include the modal HTML template with the `props`
    and `ref` key to manipulate the template.
  prefs: []
  type: TYPE_NORMAL
- en: '`handleCancel()`,`handleConfirm()`, and `handleHidden()` handle every state
    of our component.'
  prefs: []
  type: TYPE_NORMAL
- en: '`.modal-*` classes give us Bootstrap''s style to make our app more user-friendly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to render our components using the `render` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We are passing `props` in `<BootstrapModal>` and rendering `<BootstrapButton>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `this` keyword, we call a function to invoke the `modal` events and
    display an alert on every event fire:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a quick look at our component in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap modal](graphics/image_05_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Oops! We are getting an error. I think that might have happened because we
    have not wrapped our component inside the `render` method. It should always wrap
    with one parent element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what our `ReactBootstrapModalDialog` component looks like after we''ve
    made a small change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a quick look at our component again in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap modal](graphics/image_05_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now click the **Open modal** button to see the modal dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap modal](graphics/image_05_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the **Cancel** or the **OK** button, it will display the alert
    box as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap modal](graphics/image_05_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the **X** icon, it will display the alert box as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap modal](graphics/image_05_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, now we know that we can close the modal dialog by clicking on the (**X**)
    icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the modal dialog is closed, it shows the alert, **The modal has been dismissed!**
    See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap modal](graphics/image_05_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is what our HTML file looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how we can integrate the jQuery Bootstrap component in React and
    how life cycle methods work when we are integrating any third-party plugin such
    as jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: We are able to check the component state with props that handle the events and
    display the dialog box with the appropriate content. We have also looked at how
    life cycle methods help us to integrate other third-party plugins.
  prefs: []
  type: TYPE_NORMAL
- en: We now understand the component life cycle methods along with the way they work
    in React. We've learned how to integrate jQuery components in React. We've seen
    event handling mechanisms and an example of the alert and modal components.
  prefs: []
  type: TYPE_NORMAL
- en: The key examples shown in this chapter will help you to understand or clarify
    concepts about integrating jQuery Bootstrap components in React.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to [Chapter 6](ch06.html "Chapter 6. Redux Architecture"), *Redux
    Architecture*, which is all about using Redux architecture in React.
  prefs: []
  type: TYPE_NORMAL
