- en: Planning for the Expansion of Our Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application is a real hit! After some initial testing and orientation, the
    data entry staff have been utilizing your new form for a few weeks now. The reduction
    in errors and data entry time is dramatic, and there's a lot of excited talk about
    what other problems this program might solve. With even the director joining in
    on the brainstorming, you have a strong suspicion that you'll be asked to add
    some new features soon. There's a problem, though; the application is already
    a script of several hundred lines, and you're worried about its manageability
    as it grows. You need to take some time to organize your codebase in preparation
    for future expansion.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to separate the concerns of your application using the **Model-View-Controller**
    pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to organize your code into a Python package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create the basic files and directories for your package structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Git version control system to track your changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separating concerns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Proper architectural design is essential for any project that needs to scale.
    Anyone can prop up some studs and build a garden shed, but a house or skyscraper
    takes careful planning and engineering. Software is no different; simple scripts
    can get away with shortcuts such as global variables or manipulating class properties
    directly, but as the program grows, our code needs to isolate and encapsulate
    different functionalities in a way that limits the amount of complexity we need
    to understand at any given moment.
  prefs: []
  type: TYPE_NORMAL
- en: We call this **separation of concerns**, and it's accomplished through the use
    of architectural patterns that describe different application components and how
    they interact.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Probably the most enduring of these patterns is the MVC pattern, which was
    introduced in the 1970s. While this pattern has evolved and spun off variations
    over the years, the basic gist remains: keep the data, the presentation of the
    data, and the application logic in separate, independent components.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a deeper look at these components and understand them in the context
    of our application as it stands.
  prefs: []
  type: TYPE_NORMAL
- en: What is a model?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **model** in MVC represents the data. This includes the storage of the data,
    but also the various ways data can be queried or manipulated. Ideally, the model
    is not concerned or affected by how data will be presented or what UI controls
    will be granted, but rather presents a high-level interface that only minimally
    concerns other components with its inner workings. In theory, if you decided to
    completely change the UI of the program (say, from a Tkinter application to a
    web application), the model should be totally unaffected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of functionality or information you find in the model include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparation and writing of program data to a persistent medium (data file, database,
    and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieval of data from a file or database into a format useful to the program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An authoritative list of the fields in a set of data, along with their data
    types and limits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation of data against the data types and limits defined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculations on stored data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We don't have a model class in our application currently; the data layout is
    defined in the form class, and the `Application.on_save()` method is the only
    code concerned with data persistence so far. We're going to need to split this
    logic off into a separate object that will define the data layout and handle all
    the CSV operations.
  prefs: []
  type: TYPE_NORMAL
- en: What is a view?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **view** is an interface for presenting data and controls to the user. Applications
    may have many views, often on the same data. Views don't talk to the model directly,
    and ideally contain only enough logic to present the UI and communicate user actions
    back to the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of code you find in a view include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: GUI layout and widget definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form automations, such as auto-completion of fields, dynamic toggling of widgets,
    or display of error dialogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting of raw data for presentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our `DataRecordForm` class is our main view: it contains most of the code for
    our application''s user interface. It also currently defines the structure of
    our data records. This logic can stay in the view, because the view does need
    a way to store the data temporarily before handing it off to the model, but it
    won''t be defining our data record from here on out.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll be adding more views to our application as we move forward.
  prefs: []
  type: TYPE_NORMAL
- en: What is a controller?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **controller** is the Grand Central station for the application. It handles
    requests from the user and takes care of routing data between the views and the
    model. Most variations of MVC change the role (and sometimes the name) of the
    controller, but the important thing is that it acts as the intermediary between
    the view and the model. Our controller object will need to hold references to
    the views and models used by our application and be responsible for managing interactions
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of code you find in the controller include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Startup and shutdown logic for the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Callbacks for user interface events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of model and view instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our `Application` object is currently acting as the controller for our application,
    though it has some view and model logic in it as well. As the application evolves,
    we'll be moving more presentation logic into the views and more data logic into
    the models, leaving mainly connecting code in our `Application` object.
  prefs: []
  type: TYPE_NORMAL
- en: Why complicate our design?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Initially, it may seem like a lot of needless overhead to split up the application
    this way. We'll have to shuttle data around between different objects and ultimately
    write more code to do exactly the same thing. Why would we do this?
  prefs: []
  type: TYPE_NORMAL
- en: Put simply, we're doing it to make expansion manageable. As the application
    grows, the complexity will also grow. Isolating our components from one another
    limits the amount of complexity that any one component has to manage; for example,
    when we restructure the layout of our form view, we shouldn't need to worry about
    how the model will structure the data in the output file. Those two aspects of
    the program should be independent of one another.
  prefs: []
  type: TYPE_NORMAL
- en: It also helps us to be consistent about where we put certain types of logic.
    For example, having a discrete model object helps us to avoid littering our UI
    code with ad hoc data queries or file access attempts.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line is, without some guiding architectural strategy, our program
    is in danger of becoming a hopeless tangle of spaghetti logic. Even without adhering
    to a strict definition of MVC design, consistently following even a loose MVC
    pattern will save a lot of headaches as the application becomes more complex.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring our application directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as logically breaking our program into separate concerns helps us manage
    the logical complexity of each component, physically breaking the code into multiple
    files helps us keep the complexity of each file manageable. It also reinforces
    more isolation between components; for example, you can't share global variables,
    and if your models file imports `tkinter`, you know you're doing something wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Basic directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is no official standard for laying out a Python application directory,
    but there are some common conventions that will help us keep things tidy and make
    it easier to package our software later on. Let''s set up our directory structure
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, create a directory called `ABQ_Data_Entry`. This is the **root directory**
    of our application, so whenever we refer to the **application root**, this is
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the application root, create another directory called `abq_data_entry`.
    Notice it's in lowercase. This is going to be a Python package that will contain
    all the code for the application; it should always be given a fairly unique name
    so that it won't be confused with existing Python packages. Normally, you wouldn't
    have a different casing between the application root and this main module, but
    it doesn't hurt anything either; we're doing it here to avoid confusion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python modules should always be named using all lowercase names with underscores.
    This convention is spelled out in PEP 8, Python's official style guide. See [https://www.python.org/dev/peps/pep-0008](https://www.python.org/dev/peps/pep-0008)
    for more information about PEP 8.
  prefs: []
  type: TYPE_NORMAL
- en: Next, create a `docs` folder under the application root. This folder will be
    for documentation files about the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, create two empty files in the application root: `README.rst` and `abq_data_entry.py`. Your
    directory structure should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/830b3415-2492-4ad3-a86e-1e17b65c7a9b.png)'
  prefs: []
  type: TYPE_IMG
- en: The abq_data_entry.py file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as before, `abq_data_entry.py` is the main file that gets executed to start
    the program. Unlike before, though, it won't contain the bulk of our program.
    In fact, this file should be as minimal as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file and enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the file. The only purpose of this file is to import our `Application`
    class, make an instance of it, and run it. The remainder of the work will happen
    inside the `abq_data_entry` package. We haven't created that yet, so this file
    won't run just yet; before we do, let's deal with our documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The README.rst file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since as far back as the 1970s, programs have included a short text file called
    `README` containing a condensed summary of the program's documentation. For small
    programs, it may be the only documentation; for larger programs, it usually contains
    essential pre-flight instructions for users or administrators.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s no prescribed set of contents for a `README` file, but as a basic
    guideline, consider the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: A brief description of the program and its function. We can
    reuse the description from our specification, or something like it. This might
    also contain a brief list of the main features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Author information**: The names of the authors and copyright date. This is
    especially important if you plan to share your software, but even for something
    in-house it''s useful for future maintainers to know who created the software
    and when.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Requirements**: A list of the software and hardware requirements for the
    software, if any.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installation**: Instructions for installing the software, its prerequisites,
    dependencies, and basic setup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: How to configure the application and what options are available.
    This is generally aimed at the command-line or configuration file options, not
    options set interactively in the program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Usage**: A description of how to launch the application, command-line arguments,
    and other notes a user would need to know to use the basic functionality of the
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**General notes**: A catch-all for notes or critical information users should
    be aware of.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bugs**: A list of known bugs or limitations in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all of these sections will apply to every program; for example, ABQ data
    entry doesn't currently have any configuration options, so there's no reason to
    have a configuration section. You might add other sections as well, depending
    on the situation; for example, publicly distributed software may have a FAQ section,
    or open source software might have a contributing section with instructions on
    how to submit patches.
  prefs: []
  type: TYPE_NORMAL
- en: The `README` file is written in plain ASCII or Unicode text, either free-form
    or using a markup language. Since we're doing a Python project, we'll use reStructuredText,
    the official markup for Python documentation (which is why our file uses an `rst`
    file extension).
  prefs: []
  type: TYPE_NORMAL
- en: ReStructuredText
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reStructuredText markup language is part of the Python `docutils` project,
    and a complete reference can be found at the Docutils website: [http://docutils.sourceforge.net](http://docutils.sourceforge.net).
    The `docutils` project also provides utilities for converting RST to formats like
    PDF, ODT, HTML, and LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basics can be grasped fairly quickly, so let''s go through them:'
  prefs: []
  type: TYPE_NORMAL
- en: Paragraphs are created by leaving a blank line between blocks of text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headings are created by underlining a single line of text with a non-alphanumeric
    symbol. The exact symbol doesn't matter; whichever one you use first will be treated
    as a level one heading for the rest of the document, whichever you use second
    as a level two, and so on. Conventionally, `=` is usually used for level one,
    `-` for level two, `~` for level three, and `+` for level four.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Titles and subtitles are created like headings, except with a line of symbols
    above and below.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bullet lists are created by starting a line with any of `*`, `-`, or `+` and
    a space. Switching symbols will create a sub-list, and multiline points are created
    by indenting subsequent lines to where the text starts at the first bullet point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numbered lists are created like bullet lists, but using either digits (which
    don't need to be correctly ordered) or the `#` symbol as a bullet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code examples can be specified inline by enclosing them in double backtick characters
    ([PRE1]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ============================
  prefs: []
  type: TYPE_NORMAL
- en: ABQ Data Entry Application
  prefs: []
  type: TYPE_NORMAL
- en: ============================
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs: []
  type: TYPE_NORMAL
- en: ===========
  prefs: []
  type: TYPE_NORMAL
- en: This program provides a data entry form for ABQ Agrilabs laboratory data.
  prefs: []
  type: TYPE_NORMAL
- en: Features
  prefs: []
  type: TYPE_NORMAL
- en: '--------'
  prefs: []
  type: TYPE_NORMAL
- en: '* Provides a validated entry form to ensure correct data'
  prefs: []
  type: TYPE_NORMAL
- en: '* Stores data to ABQ-format CSV files'
  prefs: []
  type: TYPE_NORMAL
- en: '* Auto-fills form fields whenever possible'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Authors
  prefs: []
  type: TYPE_NORMAL
- en: =======
  prefs: []
  type: TYPE_NORMAL
- en: Alan D Moore, 2018
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Requirements
  prefs: []
  type: TYPE_NORMAL
- en: ============
  prefs: []
  type: TYPE_NORMAL
- en: '* Python 3'
  prefs: []
  type: TYPE_NORMAL
- en: '* Tkinter'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Usage
  prefs: []
  type: TYPE_NORMAL
- en: =====
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the application, run::'
  prefs: []
  type: TYPE_NORMAL
- en: python3 ABQ_Data_Entry/abq_data_entry.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: General Notes
  prefs: []
  type: TYPE_NORMAL
- en: =============
  prefs: []
  type: TYPE_NORMAL
- en: The CSV file will be saved to your current directory in the format "abq_data_record_CURRENTDATE.csv",
    where CURRENTDATE is today's date in ISO format.
  prefs: []
  type: TYPE_NORMAL
- en: This program only appends to the CSV file.  You should have a spreadsheet program
    installed in case you need to edit or check the file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: from abq_data_entry import application
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'class FieldTypes:'
  prefs: []
  type: TYPE_NORMAL
- en: string = 1
  prefs: []
  type: TYPE_NORMAL
- en: string_list = 2
  prefs: []
  type: TYPE_NORMAL
- en: iso_date_string = 3
  prefs: []
  type: TYPE_NORMAL
- en: long_string = 4
  prefs: []
  type: TYPE_NORMAL
- en: decimal = 5
  prefs: []
  type: TYPE_NORMAL
- en: integer = 6
  prefs: []
  type: TYPE_NORMAL
- en: boolean = 7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: import csv
  prefs: []
  type: TYPE_NORMAL
- en: import os
  prefs: []
  type: TYPE_NORMAL
- en: from .constants import FieldTypes as FT
  prefs: []
  type: TYPE_NORMAL
- en: 'class CSVModel:'
  prefs: []
  type: TYPE_NORMAL
- en: '"""CSV file storage"""'
  prefs: []
  type: TYPE_NORMAL
- en: fields = {
  prefs: []
  type: TYPE_NORMAL
- en: '"Date": {''req'': True, ''type'': FT.iso_date_string},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Time": {''req'': True, ''type'': FT.string_list,'
  prefs: []
  type: TYPE_NORMAL
- en: '''values'': [''8:00'', ''12:00'', ''16:00'', ''20:00'']},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Technician": {''req'': True, ''type'':  FT.string},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Lab": {''req'': True, ''type'': FT.string_list,'
  prefs: []
  type: TYPE_NORMAL
- en: '''values'': [''A'', ''B'', ''C'', ''D'', ''E'']},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Plot": {''req'': True, ''type'': FT.string_list,'
  prefs: []
  type: TYPE_NORMAL
- en: '''values'': [str(x) for x in range(1, 21)]},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Seed sample":  {''req'': True, ''type'': FT.string},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Humidity": {''req'': True, ''type'': FT.decimal,'
  prefs: []
  type: TYPE_NORMAL
- en: '''min'': 0.5, ''max'': 52.0, ''inc'': .01},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Light": {''req'': True, ''type'': FT.decimal,'
  prefs: []
  type: TYPE_NORMAL
- en: '''min'': 0, ''max'': 100.0, ''inc'': .01},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Temperature": {''req'': True, ''type'': FT.decimal,'
  prefs: []
  type: TYPE_NORMAL
- en: '''min'': 4, ''max'': 40, ''inc'': .01},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Equipment Fault": {''req'': False, ''type'': FT.boolean},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Plants": {''req'': True, ''type'': FT.integer,'
  prefs: []
  type: TYPE_NORMAL
- en: '''min'': 0, ''max'': 20},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Blossoms": {''req'': True, ''type'': FT.integer,'
  prefs: []
  type: TYPE_NORMAL
- en: '''min'': 0, ''max'': 1000},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Fruit": {''req'': True, ''type'': FT.integer,'
  prefs: []
  type: TYPE_NORMAL
- en: '''min'': 0, ''max'': 1000},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Min Height": {''req'': True, ''type'': FT.decimal,'
  prefs: []
  type: TYPE_NORMAL
- en: '''min'': 0, ''max'': 1000, ''inc'': .01},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Max Height": {''req'': True, ''type'': FT.decimal,'
  prefs: []
  type: TYPE_NORMAL
- en: '''min'': 0, ''max'': 1000, ''inc'': .01},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Median Height": {''req'': True, ''type'': FT.decimal,'
  prefs: []
  type: TYPE_NORMAL
- en: '''min'': 0, ''max'': 1000, ''inc'': .01},'
  prefs: []
  type: TYPE_NORMAL
- en: '"Notes": {''req'': False, ''type'': FT.long_string}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: datestring = datetime.today().strftime("%Y-%m-%d")
  prefs: []
  type: TYPE_NORMAL
- en: filename = "abq_data_record_{}.csv".format(datestring)
  prefs: []
  type: TYPE_NORMAL
- en: newfile = not os.path.exists(filename)
  prefs: []
  type: TYPE_NORMAL
- en: data = self.recordform.get()
  prefs: []
  type: TYPE_NORMAL
- en: 'with open(filename, ''a'') as fh:'
  prefs: []
  type: TYPE_NORMAL
- en: csvwriter = csv.DictWriter(fh, fieldnames=data.keys())
  prefs: []
  type: TYPE_NORMAL
- en: 'if newfile:'
  prefs: []
  type: TYPE_NORMAL
- en: csvwriter.writeheader()
  prefs: []
  type: TYPE_NORMAL
- en: csvwriter.writerow(data)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'def __init__(self, filename):'
  prefs: []
  type: TYPE_NORMAL
- en: self.filename = filename
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'def save_record(self, data):'
  prefs: []
  type: TYPE_NORMAL
- en: '"""Save a dict of data to the CSV file"""'
  prefs: []
  type: TYPE_NORMAL
- en: newfile = not os.path.exists(self.filename)
  prefs: []
  type: TYPE_NORMAL
- en: 'with open(self.filename, ''a'') as fh:'
  prefs: []
  type: TYPE_NORMAL
- en: csvwriter = csv.DictWriter(fh,
  prefs: []
  type: TYPE_NORMAL
- en: fieldnames=self.fields.keys())
  prefs: []
  type: TYPE_NORMAL
- en: 'if newfile:'
  prefs: []
  type: TYPE_NORMAL
- en: csvwriter.writeheader()
  prefs: []
  type: TYPE_NORMAL
- en: csvwriter.writerow(data)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: import csv
  prefs: []
  type: TYPE_NORMAL
- en: import os
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: import tkinter as tk
  prefs: []
  type: TYPE_NORMAL
- en: from tkinter import ttk
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: from datetime import datetime
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: from decimal import Decimal, InvalidOperation
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: import tkinter as tk
  prefs: []
  type: TYPE_NORMAL
- en: from tkinter import ttk
  prefs: []
  type: TYPE_NORMAL
- en: from datetime import datetime
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: from . import widgets as w
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: line 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: self.inputs['Date'] = w.LabelInput(
  prefs: []
  type: TYPE_NORMAL
- en: recordinfo, "Date",
  prefs: []
  type: TYPE_NORMAL
- en: input_class=w.DateEntry,
  prefs: []
  type: TYPE_NORMAL
- en: input_var=tk.StringVar()
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: self.inputs['Date'].grid(row=0, column=0)
  prefs: []
  type: TYPE_NORMAL
- en: self.inputs['Time'] = w.LabelInput(
  prefs: []
  type: TYPE_NORMAL
- en: recordinfo, "Time",
  prefs: []
  type: TYPE_NORMAL
- en: input_class=w.ValidatedCombobox,
  prefs: []
  type: TYPE_NORMAL
- en: input_var=tk.StringVar(),
  prefs: []
  type: TYPE_NORMAL
- en: 'input_args={"values": ["8:00", "12:00", "16:00", "20:00"]}'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: self.inputs['Time'].grid(row=0, column=1)
  prefs: []
  type: TYPE_NORMAL
- en: self.inputs['Technician'] = w.LabelInput(
  prefs: []
  type: TYPE_NORMAL
- en: recordinfo, "Technician",
  prefs: []
  type: TYPE_NORMAL
- en: input_class=w.RequiredEntry,
  prefs: []
  type: TYPE_NORMAL
- en: input_var=tk.StringVar()
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: self.inputs['Technician'].grid(row=0, column=2)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: field_types = {
  prefs: []
  type: TYPE_NORMAL
- en: 'FT.string: (RequiredEntry, tk.StringVar),'
  prefs: []
  type: TYPE_NORMAL
- en: 'FT.string_list: (ValidatedCombobox, tk.StringVar),'
  prefs: []
  type: TYPE_NORMAL
- en: 'FT.iso_date_string: (DateEntry, tk.StringVar),'
  prefs: []
  type: TYPE_NORMAL
- en: 'FT.long_string: (tk.Text, lambda: None),'
  prefs: []
  type: TYPE_NORMAL
- en: 'FT.decimal: (ValidatedSpinbox, tk.DoubleVar),'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'FT.integer: (ValidatedSpinbox, tk.IntVar),'
  prefs: []
  type: TYPE_NORMAL
- en: 'FT.boolean: (ttk.Checkbutton, tk.BooleanVar)'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: def __init__(self, parent, label='', input_class=None,
  prefs: []
  type: TYPE_NORMAL
- en: input_var=None, input_args=None, label_args=None,
  prefs: []
  type: TYPE_NORMAL
- en: 'field_spec=None, **kwargs):'
  prefs: []
  type: TYPE_NORMAL
- en: super().__init__(parent, **kwargs)
  prefs: []
  type: TYPE_NORMAL
- en: input_args = input_args or {}
  prefs: []
  type: TYPE_NORMAL
- en: label_args = label_args or {}
  prefs: []
  type: TYPE_NORMAL
- en: 'if field_spec:'
  prefs: []
  type: TYPE_NORMAL
- en: field_type = field_spec.get('type', FT.string)
  prefs: []
  type: TYPE_NORMAL
- en: input_class = input_class or
  prefs: []
  type: TYPE_NORMAL
- en: self.field_types.get(field_type)[0]
  prefs: []
  type: TYPE_NORMAL
- en: var_type = self.field_types.get(field_type)[1]
  prefs: []
  type: TYPE_NORMAL
- en: self.variable = input_var if input_var else var_type()
  prefs: []
  type: TYPE_NORMAL
- en: min, max, increment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'if ''min'' in field_spec and ''from_'' not in input_args:'
  prefs: []
  type: TYPE_NORMAL
- en: input_args['from_'] = field_spec.get('min')
  prefs: []
  type: TYPE_NORMAL
- en: 'if ''max'' in field_spec and ''to'' not in input_args:'
  prefs: []
  type: TYPE_NORMAL
- en: input_args['to'] = field_spec.get('max')
  prefs: []
  type: TYPE_NORMAL
- en: 'if ''inc'' in field_spec and ''increment'' not in input_args:'
  prefs: []
  type: TYPE_NORMAL
- en: input_args['increment'] = field_spec.get('inc')
  prefs: []
  type: TYPE_NORMAL
- en: values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'if ''values'' in field_spec and ''values'' not in input_args:'
  prefs: []
  type: TYPE_NORMAL
- en: input_args['values'] = field_spec.get('values')
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'self.variable = input_var        if input_class in (ttk.Checkbutton, ttk.Button,
    ttk.Radiobutton):'
  prefs: []
  type: TYPE_NORMAL
- en: input_args["text"] = label
  prefs: []
  type: TYPE_NORMAL
- en: input_args["variable"] = self.variable
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: self.label = ttk.Label(self, text=label, **label_args)
  prefs: []
  type: TYPE_NORMAL
- en: self.label.grid(row=0, column=0, sticky=(tk.W + tk.E))
  prefs: []
  type: TYPE_NORMAL
- en: input_args["textvariable"] = self.variable
  prefs: []
  type: TYPE_NORMAL
- en: '... Remainder of __init__() is the same'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'def __init__(self, parent, fields, *args, **kwargs):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: self.inputs['Date'] = w.LabelInput(
  prefs: []
  type: TYPE_NORMAL
- en: recordinfo, "Date",
  prefs: []
  type: TYPE_NORMAL
- en: field_spec=fields['Date'])
  prefs: []
  type: TYPE_NORMAL
- en: self.inputs['Date'].grid(row=0, column=0)
  prefs: []
  type: TYPE_NORMAL
- en: self.inputs['Time'] = w.LabelInput(
  prefs: []
  type: TYPE_NORMAL
- en: recordinfo, "Time",
  prefs: []
  type: TYPE_NORMAL
- en: field_spec=fields['Time'])
  prefs: []
  type: TYPE_NORMAL
- en: self.inputs['Time'].grid(row=0, column=1)
  prefs: []
  type: TYPE_NORMAL
- en: self.inputs['Technician'] = w.LabelInput(
  prefs: []
  type: TYPE_NORMAL
- en: recordinfo, "Technician",
  prefs: []
  type: TYPE_NORMAL
- en: field_spec=fields['Technician'])
  prefs: []
  type: TYPE_NORMAL
- en: self.inputs['Technician'].grid(row=0, column=2)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: self.inputs['Min Height'] = w.LabelInput(
  prefs: []
  type: TYPE_NORMAL
- en: plantinfo, "Min Height (cm)",
  prefs: []
  type: TYPE_NORMAL
- en: field_spec=fields['Min Height'],
  prefs: []
  type: TYPE_NORMAL
- en: 'input_args={"max_var": max_height_var,'
  prefs: []
  type: TYPE_NORMAL
- en: '"focus_update_var": min_height_var})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: import tkinter as tk
  prefs: []
  type: TYPE_NORMAL
- en: from tkinter import ttk
  prefs: []
  type: TYPE_NORMAL
- en: from datetime import datetime
  prefs: []
  type: TYPE_NORMAL
- en: from . import views as v
  prefs: []
  type: TYPE_NORMAL
- en: from . import models as m
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: self.recordform = v.DataRecordForm(self, m.CSVModel.fields)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'def on_save(self):'
  prefs: []
  type: TYPE_NORMAL
- en: '"""Handles save button clicks"""'
  prefs: []
  type: TYPE_NORMAL
- en: errors = self.recordform.get_errors()
  prefs: []
  type: TYPE_NORMAL
- en: 'if errors:'
  prefs: []
  type: TYPE_NORMAL
- en: self.status.set(
  prefs: []
  type: TYPE_NORMAL
- en: '"Cannot save, error in fields: {}"'
  prefs: []
  type: TYPE_NORMAL
- en: .format(', '.join(errors.keys())))
  prefs: []
  type: TYPE_NORMAL
- en: return False
  prefs: []
  type: TYPE_NORMAL
- en: For now, we save to a hardcoded filename
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: with a datestring.
  prefs: []
  type: TYPE_NORMAL
- en: datestring = datetime.today().strftime("%Y-%m-%d")
  prefs: []
  type: TYPE_NORMAL
- en: filename = "abq_data_record_{}.csv".format(datestring)
  prefs: []
  type: TYPE_NORMAL
- en: model = m.CSVModel(filename)
  prefs: []
  type: TYPE_NORMAL
- en: data = self.recordform.get()
  prefs: []
  type: TYPE_NORMAL
- en: model.save_record(data)
  prefs: []
  type: TYPE_NORMAL
- en: self.records_saved += 1
  prefs: []
  type: TYPE_NORMAL
- en: self.status.set(
  prefs: []
  type: TYPE_NORMAL
- en: '"{} records saved this session".'
  prefs: []
  type: TYPE_NORMAL
- en: format(self.records_saved)
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: self.recordform.reset()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: python3 abq_data_entry.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: git init
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '*.pyc'
  prefs: []
  type: TYPE_NORMAL
- en: __pycache__/
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: git add abq_data_entry
  prefs: []
  type: TYPE_NORMAL
- en: git add abq_data_entry.py
  prefs: []
  type: TYPE_NORMAL
- en: git add docs
  prefs: []
  type: TYPE_NORMAL
- en: git add README.rst
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: On branch master
  prefs: []
  type: TYPE_NORMAL
- en: No commits yet
  prefs: []
  type: TYPE_NORMAL
- en: 'Changes to be committed:'
  prefs: []
  type: TYPE_NORMAL
- en: (use "git rm --cached <file>..." to unstage)
  prefs: []
  type: TYPE_NORMAL
- en: 'new file:   README.rst'
  prefs: []
  type: TYPE_NORMAL
- en: 'new file:   abq_data_entry.py'
  prefs: []
  type: TYPE_NORMAL
- en: 'new file:   abq_data_entry/__init__.py'
  prefs: []
  type: TYPE_NORMAL
- en: 'new file:   abq_data_entry/application.py'
  prefs: []
  type: TYPE_NORMAL
- en: 'new file:   abq_data_entry/models.py'
  prefs: []
  type: TYPE_NORMAL
- en: 'new file:   abq_data_entry/views.py'
  prefs: []
  type: TYPE_NORMAL
- en: 'new file:   abq_data_entry/widgets.py'
  prefs: []
  type: TYPE_NORMAL
- en: 'new file:   docs/Application_layout.png'
  prefs: []
  type: TYPE_NORMAL
- en: 'new file:   docs/abq_data_entry_spec.rst'
  prefs: []
  type: TYPE_NORMAL
- en: 'new file:   docs/lab-tech-paper-form.png'
  prefs: []
  type: TYPE_NORMAL
- en: 'Untracked files:'
  prefs: []
  type: TYPE_NORMAL
- en: (use "git add <file>..." to include in what will be committed)
  prefs: []
  type: TYPE_NORMAL
- en: .gitignore
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: git commit -m "Initial commit"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: alanm@alanm-laptop:~/ABQ_Data_Entry$ git log
  prefs: []
  type: TYPE_NORMAL
- en: commit df48707422875ff545dc30f4395f82ad2d25f103 (HEAD -> master)
  prefs: []
  type: TYPE_NORMAL
- en: 'Author: Alan Moore <alan@example.com>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Date:   Thu Dec 21 18:12:17 2017 -0600'
  prefs: []
  type: TYPE_NORMAL
- en: Initial commit
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the `Author`, `Date`, and `commit` message is displayed for
    our last commit. If we had more commits, they would be listed here as well, from
    newest to oldest. The long hexadecimal value you see in the first line of output
    is the **commit hash**, a unique value that identifies the commit. This value
    can be used to refer to the commit in other operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can use it to reset our repository to a past state, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the `README.rst` file, and verify that it's completely gone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, enter the command `git reset --hard df48707`, replacing `df48707` with
    the first seven characters of your commit's hash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check your file listing again: the `README.rst` file is back.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happened here is that we altered our repository, then told Git to hard
    reset the state of the repository to our first commit. If you don't want to reset
    your repository, you can also checkout an old commit temporarily, or create a
    branch using a particular commit as the base. As you can see already, this gives
    us a powerful safety net for experimentation; no matter how much you tinker with
    the code, any commit is just a command away!
  prefs: []
  type: TYPE_NORMAL
- en: Git has many more features that are beyond the scope of this book. If you'd
    like to learn more, the Git project provides a free online manual at [https://git-scm.com/book](https://git-scm.com/book)
    where you can learn about advanced features like branching and setting up remote
    repositories. For now, the important thing is to commit changes as you go, so
    that you maintain your safety net and document the history of changes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned to prepare your simple script for some serious
    expansion. You learned how to divide your application's areas of responsibility
    into separate components, and how to split your code into separate modules. You
    learned how to document your code using reStructuredText and track all your changes
    with version control.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to put our new project layout to the test by
    implementing some new features. You'll learn how to work with Tkinter's application
    menu widgets, how to implement file opening and saving, and how to use message
    popups to alert users or confirm actions.
  prefs: []
  type: TYPE_NORMAL
