- en: In conclusion...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the final chapter of the book. By now, you will have gained an in-depth
    knowledge of blockchain functions and how they are built. You must be getting
    excited to build your very own blockchain and explore its various functionalities!
  prefs: []
  type: TYPE_NORMAL
- en: Before we conclude this book, let's have a quick review of what we've learned
    so far and explore what improvements or amendments we can make to our blockchain
    to make it more secure and reliable.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's get ready to take the last steps...
  prefs: []
  type: TYPE_NORMAL
- en: A quick review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the completion of the previous chapter, we are done building our blockchain.
    If you think about how much you have accomplished throughout the entirety of this
    book, it's pretty impressive.
  prefs: []
  type: TYPE_NORMAL
- en: We started with nothing, and from there, we built a blockchain data structure,
    followed by an API to interact with it. We then turned our API into a decentralized
    blockchain network, and synchronized the data across the entire network running
    on multiple different nodes.
  prefs: []
  type: TYPE_NORMAL
- en: We then created a **consensus** algorithm to make sure that the data on all
    of our nodes was synchronized and legitimate. Finally, we built a block explorer
    to explore our blockchain through a user interface. Throughout this entire book,
    we have built a lot of functionalities, as well as an awesome blockchain prototype.
  prefs: []
  type: TYPE_NORMAL
- en: One important thing that you must be aware of is that, throughout this book,
    we have been running all five of our nodes on one computer.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you were to download this entire project onto multiple different
    computers, you would be able to run each node on a separate computer to really
    simulate how a decentralized blockchain network works.
  prefs: []
  type: TYPE_NORMAL
- en: You would just have to make sure that every computer running your project is
    on the same network. Instead of having a localhost address, you would just have
    the IP address that each node is running on.
  prefs: []
  type: TYPE_NORMAL
- en: Try experimenting with this idea. It's pretty cool to see your blockchain network
    running across multiple different computers.
  prefs: []
  type: TYPE_NORMAL
- en: Areas of improvement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, there are a few areas where the blockchain could be improved. One of those
    areas is in error handling. Throughout this book, we didn't do much error handling,
    because we were focusing on getting the actual functionalities to work correctly,
    but to improve this blockchain we would definitely want to do a lot of error handling.
    This would ensure that our blockchain can't be hacked, and also make sure that
    it runs correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Another area where this blockchain could be improved is when we are making transactions.
    Right now, when we make transactions, we send a certain amount of Bitcoin from
    one person to another, but at no point do we validate that the sender actually
    has this bitcoin to send.
  prefs: []
  type: TYPE_NORMAL
- en: One exercise we would encourage you to do is to go to our `createTransaction`
    method in our blockchain data structure, and then find a way to verify that the
    sender actually has the amount of Bitcoin to send. This would be a good practice
    project for you to try on your own. You would have to get the current balance
    of bitcoin that the sender has, and do a check to validate that they have enough
    Bitcoin to send in the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Another way that this blockchain could be improved is by making it into a decentralized
    application platform similar to Etherium. You would do this simply by adding a
    functionality to the blockchain that would allow you to store more data inside
    of each block, allowing you to store different types of data inside of each block,
    instead of just transactions. For example, you could store user data, administrative
    data, or any other type of data inside of each block. You would then use that
    data when you are generating the hash for each block, just like we use the transactions
    when we are generating the hashes.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of ways that you can customize and improve on the blockchain
    we've built; however, right now, we have a fully functioning prototype blockchain
    that can be hosted on a decentralized blockchain network.
  prefs: []
  type: TYPE_NORMAL
- en: So, that's it from us. We hope you enjoyed this book, learned a lot, and had
    fun building the blockchain that we created!
  prefs: []
  type: TYPE_NORMAL
