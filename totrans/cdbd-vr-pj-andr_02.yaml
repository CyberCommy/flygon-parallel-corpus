- en: Chapter 2. The Skeleton Cardboard Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to build a skeleton Cardboard project which
    can be a starting point for other projects in this book. We will begin with an
    introduction to Android Studio, the Cardboard SDK, and Java programming. We want
    to make sure that you''re up to speed on the tools and Android projects in general.
    Then, we will walk you through setting up a new Cardboard project so that we don''t
    need to repeat these details in each project. If some or all of this is already
    familiar to you, great! You might be able to skim it. In this chapter, we will
    cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What's in an Android app?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Android project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new Cardboard project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the Cardboard Java SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the manifest, layout, and `MainActivity`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and running the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's in an Android app?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our projects, we're going to use the powerful Android Studio IDE (an integrated
    development environment) to build Google Cardboard virtual reality applications
    that run on Android devices. *Woot!* Android Studio integrates a number of different
    tools and processes under one roof.
  prefs: []
  type: TYPE_NORMAL
- en: The result of all your hard work to develop an Android app is an Android application
    package or an `.apk` file, which is distributed to users via the Google Play Store
    or however you choose to distribute your app. This file gets installed on their
    Android device.
  prefs: []
  type: TYPE_NORMAL
- en: We'll jump to Android Studio itself in a moment. However, in order to shed some
    light on what's going on here, let's consider this end result `.apk` file first.
    What is it really? How'd we get it? Understanding the build process will help.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping this in mind, for fun and to gain perspective, let's start from the
    end and work our way backward from the APK through the build pipeline to our app
    source code.
  prefs: []
  type: TYPE_NORMAL
- en: APK files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The APK file is actually a compressed zipped package of a bunch of different
    files, including the compiled Java code and non-compiled resources, such as images.
  prefs: []
  type: TYPE_NORMAL
- en: An APK file is built for a specific *target* version of Android, but it also
    indicates a *minimum* version. An app built for an older version of Android, in
    general, will run on newer Android versions but not vice versa. To build for an
    older version of Android, however, means that newer features will not be available
    to the app. You want to choose the minimum version of Android that supports the
    features you need in order to target as many devices as possible. Or, if you want
    to support a smaller subset of devices for, say, performance reasons, you might
    choose an artificially high minimum API version.
  prefs: []
  type: TYPE_NORMAL
- en: To build your project and create an APK file in Android Studio, you need to
    click on the **Build menu** option and select **Make Project**, (or click on the
    green arrow icon to build, deploy, and run the app on a device or within an **Android
    Virtual Device** (**AVD**)), which kicks off a Gradle build process. You can build
    a version to develop and debug or build a more optimized release version of the
    application for distribution. You can choose to do this by clicking on the **Build**
    menu and selecting **Select Build Variant...**.
  prefs: []
  type: TYPE_NORMAL
- en: A Gradle build process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android Studio uses a tool named **Gradle** to build the APK file from your
    project files. The following is a flow diagram of the Gradle build process taken
    from the Android documentation ([http://developer.android.com/sdk/installing/studio-build.html](http://developer.android.com/sdk/installing/studio-build.html)).
    Actually, most of the illustrated details aren't so important for us. What is
    important is to see the many pieces and how they fit together.
  prefs: []
  type: TYPE_NORMAL
- en: '![A Gradle build process](img/B05144_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the bottom-most box in the preceding diagram, you can see that the result
    of the build is a signed and aligned `.apk` file, which is the final version of
    our app that has been compiled (converted from the source code), zipped (compressed),
    and signed (for authentication) from the earlier build process. The final step,
    zipalign, aligns the compressed resources along 4-byte boundaries in order to
    quickly access them at runtime. Basically, this last step makes the app load faster.
  prefs: []
  type: TYPE_NORMAL
- en: In the middle of the diagram, you'll see that the `.apk` (unsigned, uncompressed)
    file is assembled from `.dex` files, compiled Java classes, and other resources
    (such as images and media files).
  prefs: []
  type: TYPE_NORMAL
- en: A `.dex` file is the Java code, which has been compiled into a format (Dalvik
    bytecode) that runs on the **Dalvik** **virtual machine** (**DVM**) on your device.
    This is an executable file of your program. Any third-party libraries and compiled
    Java source code files (`.class`) that you have included in your module build
    are converted to `.dex` files in order to be packaged into the final `.apk` file.
  prefs: []
  type: TYPE_NORMAL
- en: Again, don't sweat the details if this is new to you. The important thing is
    that we're going to be working with a lot of different files in our Google Cardboard
    projects. It will be helpful for us to have a context of where they're used in
    the build process.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `common.aar` file (binary Android Library Archive) with the
    Cardboard SDK is one of the third-party libraries which we will use. The contents
    of your project's `res/` directory, such as `layout/activity_main.xml`, are passed
    through the **Android Asset Packaging Tool** **(aapt)**.
  prefs: []
  type: TYPE_NORMAL
- en: A Java compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What feeds into the `.dex` file? A Java compiler takes the Java language source
    code and generates an `.dex` file containing bytecode. By referring to the preceding
    Gradle build flow diagram, at the top of the diagram, you will see that the inputs
    to the Java compiler include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Your application's Java source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your application's XML resources, such as the `AndroidManifest.xml` file, compiled
    using the **aapt**, and used to generate the `R.java` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your application's Java interfaces (**Android Interface Definition Language**
    `.aidl` files), compiled using the **aidl** tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the rest of this book, we're going to talk a lot about these source code
    files. That's the stuff you write! That's the place where you do your magic! That's
    the world where we programmers live.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at the directory structure of your Android project source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: The Android project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The root directory of your Android project contains various files and subdirectories.
    Or, should I say, the root folder of your Android project contains various files
    and *subfolders.* *Ha ha*. We'll use the words "folder" and "directory" interchangeably
    throughout this book, just as Android Studio also seems to do (actually, there
    is a difference, as discussed at [http://stackoverflow.com/questions/29454427/new-directory-vs-new-folder-in-android-studio](http://stackoverflow.com/questions/29454427/new-directory-vs-new-folder-in-android-studio)).
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the Android hierarchy, in the following sample Cardboard project,
    the root directory contains an `app/` subdirectory, which, in turn, contains the
    following subdirectories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app/manifests/`: This contains the `AndroidManifest.xml` manifest file that
    specifies the components of the application, including activities (UI), device
    permissions, and other configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/java/`: This contains subfolders with your application Java files that
    implement the application''s `MainActivity` and other classes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/res/`: This contains subfolders with resources, including the layout XML
    definition files, values definitions (`strings.xml`, `styles.xml`, and so on),
    icons, and other resource files![The Android project structure](img/B05144_02_02.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's not a coincidence that these directories correspond to the boxes in the
    topmost row of the preceding Gradle build process diagram; they supply the source
    files that are run through the Java compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Also, there are Gradle scripts under the root directory, which do not need to
    be edited directly since the Android Studio IDE provides convenient dialog boxes
    to manage the settings. In some cases, you might find it to be easier to modify
    these files directly.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that in the upper-left corner of the hierarchy pane is a tab select menu.
    In the preceding screenshot, it is set to **Android**, which just shows the Android-specific
    files. There are other views that might also be useful, such as **Project**, which
    lists all the files and subdirectories under your project root directory, as shown
    in the following screenshot, for the same app. The **Project** hierarchy shows
    the files as they are structured on the actual filesystem. The other hierarchies
    artificially restructure your project to make it easier to work with.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android project structure](img/B05144_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From time to time, you'll need to switch between the **Android** view and **Project**
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing Cardboard apps for Android, there's tons of stuff that you need
    to track, including all your files and folders, Java classes and objects, and
    functions and variables. You need a properly organized Java program structure
    and valid language syntax. You need to set options and manage processes to build
    and debug your applications. *Whew!*
  prefs: []
  type: TYPE_NORMAL
- en: Thank goodness we have Android Studio, a powerful **IDE** (**integrated development
    environment**). It's built on top of IntelliJ IDEA by JetBrains, a popular intelligent
    Java development suite of tools.
  prefs: []
  type: TYPE_NORMAL
- en: It's intelligent because it actually gives you relevant suggestions as you write
    your code (*Ctrl* + *Space*), helps navigate between related references and files
    (*Ctrl* + *B*, *Alt* + *F7*) as well as automates refactor operations, such as
    renaming a class or method (*Alt* + *Enter*). In some ways, it may know what you're
    trying to do, even if you don't. *How smart is that?*
  prefs: []
  type: TYPE_NORMAL
- en: Installing Android Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don't already have Android Studio installed on your development machine,
    what are you waiting for? Head on over to the Android developers page ([http://developer.android.com/develop/index.html](http://developer.android.com/develop/index.html))
    and download it to your system. It's available for Windows, Mac OS X, or Linux.
    You can install the full Android Studio package and not just the SDK tools. Then,
    obediently follow the installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: The Android Studio user interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's a lot to Android Studio. In most cases, we'll just explain with the
    help of examples as we go along. But let's take a little time to review a few
    features, especially the ones that are relevant to Cardboard development. Just
    make sure that you read the documentation available at the Android developer tools
    page if needed ([http://developer.android.com/tools/studio/index.html](http://developer.android.com/tools/studio/index.html)).
  prefs: []
  type: TYPE_NORMAL
- en: For a beginner, the Android Studio user interface can seem daunting. And the
    default interface is only the beginning; editor themes and layouts can be customized
    to your liking. Worse, it has a tendency to change with new releases, so tutorials
    can seem out of date. While this can make it challenging for you to find what
    you need on a particular occasion, the underlying functionality does not change
    a whole lot. An Android app is an Android app is an Android app, in most cases.
    We used Android Studio 2.1 for Windows for this book (although some screen captures
    are from an earlier version, the interface is essentially identical).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While using Android Studio, you may get notifications of the new updates available.
    We recommend that you do not upgrade in the middle of a project, unless you know
    that you really need the new improvements. Even so, make sure that you have backups
    if compatibility issues are introduced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a brief tour of the Android Studio window, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android Studio user interface](img/B05144_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The menus of Android Studio are:'
  prefs: []
  type: TYPE_NORMAL
- en: At the top is the main menu bar (**#1**) with a drop-down menu and pull out
    menus for just about all the features available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the menu bar is a convenient main toolbar (**#2**) with shortcuts to common
    functions. Hovering over an icon shows a tooltip hint of what it does.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the toolbar is the main editor pane (**#3**). When no file is open, it
    says **No files are open**. The main editor panes are tabbed along the top when
    multiple files are open.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hierarchy navigator pane is on the left-hand side (**#4**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hierarchy navigator pane has tabs along the left-hand side (vertical tabs,
    **#5**) to select between the various views of your project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice the select menu on the top left-hand side of the hierarchy pane. In the
    preceding screenshot, it is set to **Android**, which just shows the Android-specific
    files. There are other views that might also be useful, such as **Project**, which
    shows all the files and subdirectories under your project root directory, as mentioned
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Along the bottom is an additional tool bar (**#6**) used to choose other dynamic
    tools you might need, including a Terminal window, build messages, debugging information,
    and even a to-do list. Perhaps the most important one is the Android Monitor **logcat**
    tab that provides a window to the Android logging system to collect and view the
    system debug output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It will be helpful for you to pay attention to the **Debuggable Application**
    drop-down menu, **Log Level** and other filters within **logcat** in order to
    filter out the "log spam" that will make it hard for you to find the output that
    you are looking for. Also, note that even on a high-end computer with a fast CPU,
    this log view can slow down Android Studio to a crawl. It is recommended that
    you hide this view when not in use, especially if you have multiple instances
    of Android Studio open.
  prefs: []
  type: TYPE_NORMAL
- en: Controls in the corners of each pane generally pertain to managing the IDE panes
    themselves.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be fun to poke around and browse all the different things Android Studio
    provides. To learn more, click on the **Help** | **Help Topics** menu items (or
    the **?** icon on the toolbar) to open the IntelliJ IDEA help documentation ([https://www.jetbrains.com/idea/help/intellij-idea.html](https://www.jetbrains.com/idea/help/intellij-idea.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that Android Studio is built on top of the IntelliJ IDE, which
    can be used for more than just the Android development. So, there's a lot here;
    some of which you'll never use; others you'll need but might have to hunt for.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here''s a bit of advice: with great power comes great responsibility (*where
    have I heard this before?*). Actually, with so many user interface things, a little
    tunnel vision will come in handy (*yeah, I just made that one up*). Focus on the
    ones you need to use when you need to use them, and don''t sweat the other details.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, let''s take a glance at the main menu bar. It looks like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android Studio user interface](img/B05144_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Reading from left to right, the menu items are organized somewhat parallel
    to your application development process itself: create, edit, refactor, build,
    debug, and manage.'
  prefs: []
  type: TYPE_NORMAL
- en: '**File**: These are project files and settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit**: This includes the cut, copy, paste, and macros options, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: This allows us to view windows, toolbars, and UI modes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navigate**: This refers to content-based navigation between files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code**: These are code editing shortcuts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analyze**: This is used to inspect and analyze code for errors and inefficiencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Refactor**: This is used to edit code across semantically related files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build**: This builds the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run**: This is used to run and debug'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools**: This is an interface with external and third-party tools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VCS**: The refers to version-control (that is, `git`) commands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Window**: This manages the IDE user interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Help**: This includes documentation and help links'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There now, was that so scary?
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't already, you might want to try and build the Cardboard Android
    demo app available from the Google Developers website's Android SDK Getting Started
    page (refer to [https://developers.google.com/cardboard/android/get-started](https://developers.google.com/cardboard/android/get-started)).
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the demo app is called **Treasure Hunt**,
    and there are instructions on how to clone the project from its GitHub repository.
    Just clone it, open it in Android Studio, then click on the green play button
    to build it, and run it. The rest of the **Getting Started** page walks you through
    the code that explains the key elements.
  prefs: []
  type: TYPE_NORMAL
- en: '*Cool!* In the next chapter, we will start and rebuild pretty much the same
    project but from scratch.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Cardboard project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Android Studio installed, let''s create a new project. These are the steps
    you''ll follow for any of the projects in this book. We''ll just make an empty
    skeleton and make sure that it can be built and run:'
  prefs: []
  type: TYPE_NORMAL
- en: After opening the IDE, you'll see a **Welcome** screen, as shown in the following
    screenshot:![Creating a new Cardboard project](img/B05144_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Start a new Android Studio project**, and the **New Project** screen
    appears, as follows:![Creating a new Cardboard project](img/B05144_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in your **Application name:**, such as `Skeleton`, and your **Company Domain:**,
    for example, `cardbookvr.com`. You can also change the **Project location**. Then,
    click on **Next**:![Creating a new Cardboard project](img/B05144_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Target Android Devices** screen, ensure that the **Phone and Tablet**
    checkbox is checked. In the **Minimum SDK**, select **API 19: Android 4.4 (KitKat)**.
    Then, click on **Next**:![Creating a new Cardboard project](img/B05144_02_09.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Add an activity to Mobile** screen, select **Empty Activity**. We're
    going to build this project from scratch. Then, click on **Next**:![Creating a
    new Cardboard project](img/B05144_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep the suggested name, `MainActivity`. Then, click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your brand new project comes up on Studio. If required, press *Alt* + *1* to
    open the **Project View** (*Command* + *1* on the Mac).
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Cardboard Java SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now''s a good time to add the Cardboard SDK library `.aar` files to your project.
    For the basic projects in this book the libraries you need (at the time of writing
    v0.7) are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`common.aar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`core.aar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note the SDK includes additional libraries that we do not use in the projects
    in this book but could be useful for your projects. The `audio.aar` file is for
    spatialized audio support. The `panowidget` and `videowidget` libraries are meant
    for 2D apps that want to drop-into VR for things such as viewing a 360-degree
    image or video.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, to obtain the Cardboard Android SDK client libraries,
    you can clone the `cardboard-java` GitHub repository, as explained on the Google
    Developers Cardboard Getting Started page, **Start your own project** topic at
    [https://developers.google.com/cardboard/android/get-started#start_your_own_project](https://developers.google.com/cardboard/android/get-started#start_your_own_project).
    Clone the `cardboard-java` GitHub repository by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the exact commit with the same SDK version 0.7 we''re using here, `checkout`
    the commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the SDK 0.7 library files are included with each of the download
    projects `.zip` files from Packt Publishing, and on this book's GitHub projects
    at [https://github.com/cardbookvr](https://github.com/cardbookvr).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have local copies of the libraries, be sure to locate them on your
    filesystem. To add the libraries to our project, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: For each of the required libraries, create new modules. In Android Studio, select
    **File** | **New** | **New Module…**. Select **Import .JAR/.AAR Package**:![Adding
    the Cardboard Java SDK](img/B05144_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate one of the AARs and import it.![Adding the Cardboard Java SDK](img/B05144_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the new modules as dependencies to your main app by navigating to **File**
    | **Project** **Structure** | **Modules** (on the left hand side) | **app** (your
    app name) | **Dependencies** | **+** | **Module Dependency**:![Adding the Cardboard
    Java SDK](img/B05144_02_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we can use the Cardboard SDK in our app.
  prefs: []
  type: TYPE_NORMAL
- en: The AndroidManifest.xml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The new empty app includes a handful of default files, including the `manifests/AndroidManifest.xml`
    file (this is if you have the **Android** view activated. In the **Project** view,
    it is in `app/src/main`). Every application must have an `AndroidManifest.xml`
    file in its manifest directory that tells the Android system what it needs in
    order to run the app's code, along with other metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on this can be found at [http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s set this up first. Open your `AndroidManifest.xml` file in the editor.
    Modify it to read it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The package name show in the preceding listing, `package="com.cardbookvr.skeleton"`,
    may be different for your project. The `<uses-permission>` tag indicates that
    the project may be using the NFC sensor, which the Cardboard SDK can use to detect
    the smartphone that has been inserted into a Cardboard viewer device. The Internet
    and read/write storage permissions are needed for the SDK to download, read, and
    write the configure setup options. We will need to do a little more work in order
    to handle permissions properly, but that happens in another file, which we will
    discuss later.
  prefs: []
  type: TYPE_NORMAL
- en: The `<uses-feature>` tag specifies that we'll be using the OpenGL ES 2.0 graphics
    processing library ([http://developer.android.com/guide/topics/graphics/opengl.html](http://developer.android.com/guide/topics/graphics/opengl.html)).
  prefs: []
  type: TYPE_NORMAL
- en: It's also strongly recommended that you include the accelerometer and gyroscope
    sensor `uses-feature` tags. Too many users have phones lacking one or both of
    these sensors. When the app fails to track their head motions correctly, they
    may think that the app is to blame rather than their phone. Within the `<application>`
    tag (the default attributes of which were generated when we created the file),
    there's an `<activity>` definition named `.MainActivity` and screen settings.
    Here, we specify the `android:screenOrientation` attribute as our Cardboard app
    uses the normal (left) landscape orientation. We also specify `android:configChanges`
    that the activity will handle itself.
  prefs: []
  type: TYPE_NORMAL
- en: These and other attribute settings may vary based on your application's requirements.
    For example, using `android:screenOrientation="sensorLandscape"` instead will
    allow either normal or reverse landscape orientations based on the phone's sensor
    (and trigger the `onSurfaceChanged` callback when the screen flips).
  prefs: []
  type: TYPE_NORMAL
- en: We specify our *intent* metadata in the `<intent-filter>` tag. In Android, an
    **intent** is a messaging object used to facilitate communication between applications'
    components. It can also be used to query the apps that are installed and match
    certain intent filters, as defined in the app's manifest file. For example, an
    app that wants to take a picture will broadcast an intent with the `ACTION_IMAGE_CAPTURE`
    action filter. The OS will respond with a list of apps installed which contain
    activities that can respond to such an action.
  prefs: []
  type: TYPE_NORMAL
- en: Having defined the `MainActivity` class, we'll specify that it can respond to
    the standard `MAIN` action and match the `LAUNCHER` category. `MAIN` means that
    this activity is the entry point of the application; that is, when you launch
    the app, this activity is created. `LAUNCHER` means that the app should appear
    in the home screen's launcher as a top-level application.
  prefs: []
  type: TYPE_NORMAL
- en: We've added an intent so that this activity will also match the `CARDBOARD`
    category because we want the other apps to see this as a Cardboard app!
  prefs: []
  type: TYPE_NORMAL
- en: Google made major changes to the permissions system in Android 6.0 Marshmallow
    (API 23). While you still must include the permissions you want within the `AndroidManifest.xml`
    file, you must now also call a special API function to request permissions at
    runtime. There are a variety of reasons for this, but the idea is to give the
    user finer control of app permissions, and avoid having to ask for a long list
    of permissions during install and at runtime. This new feature also allows users
    to selectively revoke permissions after they have been granted. This is great
    for the user, but unfortunate for us app developers, as it means that we need
    to do significantly more work when we need access to these protected features.
    Essentially, you need to introduce a step which checks if a particular permission
    is granted, and prompts the user if it is not. Once the user grants permission,
    a callback method is called, and you are free to do whatever it was that needed
    permission. Alternatively, if the permission was granted the whole time, you can
    proceed to use the restricted feature.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, our project code and the current version of the Cardboard
    SDK do not implement this new permission system. Instead, we will force Android
    Studio to build our projects against an older version of the SDK (API 22) so that
    we side-step the new features. It is possible that, in the future, Android might
    break backwards compatibility with the old permissions system. However, you can
    read a very clear guide on how to use the new permissions system in the Android
    documentation (refer to [http://developer.android.com/training/permissions/requesting.html](http://developer.android.com/training/permissions/requesting.html)).
    We hope to address this, and any future issues in the online GitHub repositories,
    but bear in mind that the code in the text, and the provided zip files, may not
    work on the newest version of Android. Such is the nature of software maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s apply that workaround to build against version 22 of the SDK. Odds are
    that you just installed Android Studio 2.1 or above, which comes with SDK 23 or
    above. Whenever you create a new project, Android Studio does ask what minimum
    SDK you would like to target, but does not let you choose the SDK used for compilation.
    That''s OK, because we can manually set this in the `build.gradle` file. Don''t
    be afraid; the build toolset is big and scary, but we''re only tweaking the project
    settings a little bit. Bear in mind that there are a couple of `build.gradle`
    files in your project. Each one will be within its corresponding module folder
    on the filesystem, and will be labeled accordingly within the Gradle scripts section
    of the Android flavor of the project view. Were looking to change `build.gradle`
    for the `app` module. Modify it to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The important changes are to compileSdkVersion, minSdkVersion, targetSdkVersion,
    and that last one in dependencies, where we changed the version of the support
    repository we are linking to. Technically, we could eliminate this dependency
    entirely, but the project template includes a bunch of references to it, which
    are a pain to remove. However, if we leave the default setting, Gradle will most
    likely yell at us about mismatching versions. Once you've made these changes,
    there should be a yellow bar at the top of the editor with a link that says **Sync
    now**. Sync now. If you're lucky, the Gradle sync will finish successfully, and
    you can go on your merry way. If not, you might be missing the SDK platform or
    other dependencies. The **Messages** window should have clickable links to install
    and update the Android system appropriately. If you hit an error, try restarting
    Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: From this point on, you might want to avoid updating Android Studio or your
    SDK platform versions. Pay special attention to what happens when you import your
    project on another computer or after updates to Android Studio. You will likely
    need to let the IDE manipulate your Gradle files, and it may modify your compile
    version. This permissions issue is sneaky, in that it will only reveal itself
    at runtime on phones running 6.0 and above. Your app may appear to work just fine
    on a device running an older version of Android, but actually run into trouble
    on newer devices.
  prefs: []
  type: TYPE_NORMAL
- en: The activity_main.xml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our app needs a layout where we'll define a canvas to paint our graphics. The
    new project created by Android Studio makes a default layout file in the `app/res/layout/`
    folder (using the Android view or `app/src/main/res/layout` using the **Project**
    view). Find the `activity_main.xml` file and double-click on it to edit it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two views of a layout file in the Android Studio editor: **Design**
    versus **Text**, selected by tabs on the lower-left hand side of the window pane.
    If the **Design** view tab is selected, you''ll see an interactive editor with
    a simulated smartphone image, a palette of UI components on the left-hand side,
    and a **Properties** editor on the right-hand side. We''re not going to use this
    view. If necessary, select the **Text** tab at the bottom of the `activity_main.xml`
    editor pane to use text mode.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cardboard apps should run on the full screen, so we remove any padding. We
    will also remove the default `TextView` that we''re not going to use. Instead,
    we replace it with a `CardboardView`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `AndroidManifest.xml` file references the main activity named `MainActivity`.
    Let's take a look at that now.
  prefs: []
  type: TYPE_NORMAL
- en: The MainActivity class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default project generated with `Empty Activity` also created a default `MainActivity.java`
    file. In the hierarchy pane, locate the `app/java/` directory that contains a
    subdirectory named `com.cardbookvr.skeleton`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note, this is different than the `androidTest` version of the directory, we're
    not using that one! (Your name may vary based on the actual project and domain
    names given when you created the project.)
  prefs: []
  type: TYPE_NORMAL
- en: 'In this folder, double-click on the `MainActivity.java` file to open it for
    editing. The default file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing you should notice is the extends `AppCompatActivity` class
    (or `ActionBarActivity`) for the built-in Android action bar. We do not need this.
    We will rather define the activity to the extends `CardboardActivity` and implements
    the `CardboardView.StereoRenderer` interfaces. Modify the class declaration line
    of code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As this is a Google Cardboard application, we need to define the `MainActivity`
    class as a child class of the `CardboardActivity` class given by the SDK. We do
    this using the `extends` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '`MainActivity` needs to also implement, at a minimum, the stereo renderer interface
    defined as `CardboardView.StereoRender`. We do this using the `implements` keyword.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the nice things about Android Studio is how it does work for you as you
    write the code. When you enter `extends CardboardActivity`, the IDE automatically
    adds an `import` statement for the `CardboardActivity` class at the top of the
    file. When you enter `implements CardboardView.StereoRenderer`, it adds an `import`
    statement to the `CardboardView` class.
  prefs: []
  type: TYPE_NORMAL
- en: As we continue to add code, Android Studio will identify when we need additional
    import statements and automatically add them for us. Therefore, I won't bother
    to show you the `import` statements in the code that follows. On occasion it may
    find the wrong one when, for example, there's multiple `Camera` or `Matrix` classes
    among your libraries, and you'll need to resolve it to the correct reference.
  prefs: []
  type: TYPE_NORMAL
- en: We'll now fill in the body of the `MainActivity` class with stubs for the functions
    that we're going to need. The `CardboardView.StereoRenderer` interface that we're
    using defines a number of abstract methods that we can override, as documented
    in the Android API Reference for the interface (refer to [https://developers.google.com/cardboard/android/latest/reference/com/google/vrtoolkit/cardboard/CardboardView.StereoRenderer](https://developers.google.com/cardboard/android/latest/reference/com/google/vrtoolkit/cardboard/CardboardView.StereoRenderer)).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is quickly accomplished in Studio in a number of ways. Either use the
    intellisense context menu (the light bulb icon) or go to **Code** | **Implement
    Methods…** (or *Ctrl* + *I*). By placing your cursor at the red error underline
    and pressing *Alt* + *Enter*, you will also be able to accomplish the same goal.
    Do it now. You will be asked to confirm the methods to implement, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The MainActivity class](img/B05144_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ensure that all are selected and click on **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stubs for the following methods will be added to the `MainActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onSurfaceCreated`: This is called when the surface is created or recreated.
    It should create buffers and variables needed to display graphics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onNewFrame`: This is called when a new frame is about to be drawn. It should
    update the application data that changes from one frame to the next, such as animations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDrawEye`: This renders the scene for one eye for the current camera viewpoint
    (called twice per frame, unless you have three eyes!).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onFinishFrame`: This is called before a frame is finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onRenderShutdown`: This is called when the renderer thread is shutting down
    (rarely used).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onSurfaceChanged`: This is called when there is a change in the surface dimensions
    (for example, when a portrait/landscape rotation is detected).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've listed these methods in an order that mirrors the life cycle of a Cardboard
    Android application.
  prefs: []
  type: TYPE_NORMAL
- en: The `@Override` directive means that these functions are originally defined
    in the `CardboardView.StereoRenderer` interface and we're replacing (overriding)
    them in our `MainActivity` class here.
  prefs: []
  type: TYPE_NORMAL
- en: Default onCreate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All Android activities expose an `onCreate()` method that is called when the
    activity is first created. This is where you should do all your normal static
    setups and bindings. The stereo renderer interface and Cardboard activity class
    are the foundations of the Cardboard SDK.
  prefs: []
  type: TYPE_NORMAL
- en: The default `onCreate` method makes a standard `onCreate` call to the parent
    activity. Then, it registers the `activity_main` layout as the current content
    view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `onCreate()` by adding the `CardboadView` instance, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To set up the `CardboardView` instance for the app, we get its instance by looking
    it up by the resource ID given in `activity_main.xml` and then set it up with
    a couple of function calls.
  prefs: []
  type: TYPE_NORMAL
- en: This object is going to do the stereoscopic rendering to the display, so we
    call `setRenderer(this)` to specify it as the receiver of the `StereoRenderer`
    interface methods.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that your activity doesn't have to implement the interface. You can have
    any class define these methods, such as an abstracted renderer as we'll see later
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Then we associate the `CardboardView` class with this activity by calling `setCardboardView(cardboardView)`
    so that we'll be able to receive any required life cycle notifications, including
    the `StereoRenderer` interface methods, such as `onSurfaceCreated` and `onDrawEye`.
  prefs: []
  type: TYPE_NORMAL
- en: Building and running
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s build and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Run** | **Run 'app'**, or simply use the green-triangle **Run** icon
    on the toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you've made changes, Gradle will do its build thing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Gradle Console** tab at the bottom of the Android Studio window
    to view the Gradle build messages. Then, assuming that all goes well, the APK
    will be installed on your connected phone (it's connected and turned on, right?).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Run** tab at the bottom to view the upload and launch messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You shouldn''t get any build errors. But of course, the app doesn''t actually
    do anything or draw anything on the screen. Well, that''s not entirely true! The
    Cardboard SDK, via `CardboardView.StereoRenderer`, provides a stereoscopic split
    screen with a vertical line in between and a gear icon, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building and running](img/B05144_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The vertical line will be used to align your phone properly on the Cardboard
    viewer device.
  prefs: []
  type: TYPE_NORMAL
- en: The gear icon opens the standard configuration settings utility which includes
    the ability to scan a QR code to configure the SDK for the lenses and other physical
    attributes of your specific device (as explained in [Chapter 1](ch01.html "Chapter 1. Virtual
    Reality for Everyone"), *Virtual Reality for Everyone*, in the *Configuring your
    Cardboard viewer* section).
  prefs: []
  type: TYPE_NORMAL
- en: Now, we've built a skeleton Google Cardboard app for Android. You'll follow
    similar steps to start each project in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we examined the structure of a Cardboard app for Android and
    many of the files involved, including the Java source code, XML manifest, `.aar`
    libraries, and final built APK, which runs on your Android device. We installed
    and took a brief tour of the Android Studio development environment. Then, we
    walked you through the steps to create a new Android project, add the Cardboard
    Java SDK, and define the `AndroidManifest.xml` file and layout, as well as a stubbed
    `MainActivity` Java class file. You will follow similar steps to start each Cardboard
    project in this book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a Google Cardboard project from scratch called
    `CardboardBox` with a scene containing some simple geometry (a triangle and a
    cube), 3D transformations, and shaders that render graphics to your Cardboard
    device.
  prefs: []
  type: TYPE_NORMAL
