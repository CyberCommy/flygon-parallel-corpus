- en: Chapter 1. JavaScript Primer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is always difficult to pen the first few words, especially on a subject like
    JavaScript. This difficulty arises primarily because so many things have been
    said about this language. JavaScript has been the *Language of the Web*—lingua
    franca, if you will, since the earliest days of the Netscape Navigator. JavaScript
    went from a tool of the amateur to the weapon of the connoisseur in a shockingly
    short period of time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is the most popular language on the web and open source ecosystem.
    [http://githut.info/](http://githut.info/) charts the number of active repositories
    and overall popularity of the language on GitHub for the last few years. JavaScript's
    popularity and importance can be attributed to its association with the browser.
    Google's V8 and Mozilla's SpiderMonkey are extremely optimized JavaScript engines
    that power Google Chrome and Mozilla Firefox browsers, respectively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Although web browsers are the most widely used platforms for JavaScript, modern
    databases such as MongoDB and CouchDB use JavaScript as their scripting and query
    language. JavaScript has become an important platform outside browsers as well.
    Projects such as **Node.js** and **io.js** provide powerful platforms to develop
    scalable server environments using JavaScript. Several interesting projects are
    pushing the language capabilities to its limits, for example, **Emscripten** ([http://kripken.github.io/emscripten-site/](http://kripken.github.io/emscripten-site/))
    is a **Low-Level Virtual Machine** (**LLVM**)-based project that compiles C and
    C++ into highly optimizable JavaScript in an **asm.js** format. This allows you
    to run C and C++ on the web at near native speed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is built around solid foundations regarding, for example, functions,
    dynamic objects, loose typing, prototypal inheritance, and a powerful object literal
    notation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: While JavaScript is built on sound design principles, unfortunately, the language
    had to evolve along with the browser. Web browsers are notorious in the way they
    support various features and standards. JavaScript tried to accommodate all the
    whims of the browsers and ended up making some very bad design decisions. These
    bad parts (the term made famous by Douglas Crockford) overshadowed the good parts
    of the language for most people. Programmers wrote bad code, other programmers
    had nightmares trying to debug that bad code, and the language eventually got
    a bad reputation. Unfortunately, JavaScript is one of the most misunderstood programming
    languages ([http://javascript.crockford.com/javascript.html](http://javascript.crockford.com/javascript.html)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Another criticism leveled at JavaScript is that it lets you get things done
    without you being an expert in the language. I have seen programmers write exceptionally
    bad JavaScript code just because they wanted to get the things done quickly and
    JavaScript allowed them to do just this. I have spent hours debugging very bad
    quality JavaScript written by someone who clearly was not a programmer. However,
    the language is a tool and cannot be blamed for sloppy programming. Like all crafts,
    programming demands extreme dedication and discipline.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: A little bit of history
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 1993, the **Mosaic** browser of **National Center for Supercomputing Applications**
    (**NCSA**) was one of the first popular web browsers. A year later, Netscape Communications
    created the proprietary web browser, **Netscape Navigator**. Several original
    Mosaic authors worked on Navigator.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: In 1995, Netscape Communications hired Brendan Eich with the promise of letting
    him implement **Scheme** (a Lisp dialect) in the browser. Before this happened,
    Netscape got in touch with Sun Microsystems (now Oracle) to include Java in the
    Navigator browser.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Due to the popularity and easy programming of Java, Netscape decided that a
    scripting language had to have a syntax similar to that of Java. This ruled out
    adopting existing languages such as Python, **Tool Command Language** (**TCL**),
    or Scheme. Eich wrote the initial prototype in just 10 days ([http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf](http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf)),
    in May 1995\. JavaScript's first code name was **Mocha**, coined by Marc Andreessen.
    Netscape later changed it to **LiveScript**, for trademark reasons. In early December
    1995, Sun licensed the trademark Java to Netscape. The language was renamed to
    its final name, JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: How to use this module
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module is not going to help if you are looking to get things done quickly.
    This module is going to focus on the correct ways to code in JavaScript. We are
    going to spend a lot of time understanding how to avoid the bad parts of the language
    and build reliable and readable code in JavaScript. We will skirt away from sloppy
    features of the language just to make sure that you are not getting used to them—if
    you have already learned to code using these habits, this module will try to nudge
    you away from this. There will be a lot of focus on the correct style and tools
    to make your code better.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Most of the concepts in this module are going to be examples and patterns from
    real-world problems. I will insist that you code each of the snippets to make
    sure that your understanding of the concept is getting programmed into your muscle
    memory. Trust me on this, there is no better way to learn programming than writing
    a lot of code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, you will need to create an HTML page to run an embedded JavaScript
    code as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This sample code shows two ways in which JavaScript is embedded into the HTML
    page. First, the `<script>` tag in `<head>` imports JavaScript, while the second
    `<script>` tag is used to embed inline JavaScript.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'You can save this HTML page locally and open it in a browser. On Firefox, you
    can open the **Developer** console (Firefox menu | **Developer** | **Web Console**)
    and you can see the **"Hello World"** text on the **Console** tab. Based on your
    OS and browser version, the screen may look different:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use this module](img/00002.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: 'You can run the page and inspect it using Chrome''s **Developer Tool**:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use this module](img/00003.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: 'A very interesting thing to notice here is that there is an error displayed
    on the console regarding the missing `.js` file that we are trying to import using
    the following line of code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using browser developer consoles or an extension such as **Firebug** can be
    very useful in debugging error conditions in the code. We will discuss in detail
    the debugging techniques in later chapters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Creating such HTML scaffolds can be tedious for every exercise in this module.
    Instead, we want to use a **Read-Eval-Print-Loop** (**REPL**) for JavaScript.
    Unlike Python, JavaScript does not come packaged with an REPL. We can use Node.js
    as an REPL. If you have Node.js installed on your machine, you can just type `node`
    on the command line and start experimenting with it. You will observe that Node
    REPL errors are not very elegantly displayed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the following example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After this error, you will have to restart. Still, it can help you try out small
    fragments of code a lot faster.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Another tool that I personally use a lot is **JS Bin** ([http://jsbin.com/](http://jsbin.com/)).
    JS Bin provides you with a great set of tools to test JavaScript, such as syntax
    highlighting and runtime error detection. The following is a screenshot of JS
    Bin:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use this module](img/00004.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: Based on your preference, you can pick the tool that makes it easier to try
    out the code samples. Regardless of which tool you use, make sure that you type
    out every exercise in this module.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Hello World
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No programming language should be published without a customary Hello World
    program—why should this book be any different?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Type (don''t copy and paste) the following code in JS Bin:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Your screen should look something as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello World](img/00005.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: An overview of JavaScript
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a nutshell, JavaScript is a prototype-based scripting language with dynamic
    typing and first-class function support. JavaScript borrows most of its syntax
    from Java, but is also influenced by Awk, Perl, and Python. JavaScript is case-sensitive
    and white space-agnostic.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'JavaScript allows single line or multiple line comments. The syntax is similar
    to C or Java:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Variables
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Variables are symbolic names for values. The names of variables, or identifiers,
    must follow certain rules.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: A JavaScript variable name must start with a letter, underscore (_), or dollar
    sign ($); subsequent characters can also be digits (0-9). As JavaScript is case
    sensitive, letters include the characters *A* through *Z* (uppercase) and the
    characters *a* through *z* (lowercase).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: You can use ISO 8859-1 or Unicode letters in variable names.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'New variables in JavaScript should be defined with the **var** keyword. If
    you declare a variable without assigning a value to it, its type is undefined
    by default. One terrible thing is that if you don''t declare your variable with
    the var keyword, they become implicit globals. Let me reiterate that implicit
    globals are a terrible thing—we will discuss this in detail later in the module
    when we discuss variable scopes and closures, but it''s important to remember
    that you should always declare a variable with the var keyword unless you know
    what you are doing:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `NaN` value is a special value that indicates that the entity is *not a
    number*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Constants
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can create a read-only named constant with the **const** keyword. The constant
    name must start with a letter, underscore, or dollar sign and can contain alphabetic,
    numeric, or underscore characters:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A constant cannot change the value through assignment or be redeclared, and
    it has to be initialized to a value.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript supports the standard variations of types:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Number
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symbol (new in ECMAScript 6)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Object:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RegExp
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Null'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Undefined
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Number** type can represent both 32-bit integer and 64-bit floating point
    values. For example, the following line of code declares a variable to hold an
    integer value, which is defined by the literal 555:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To define a floating point value, you need to include a decimal point and one
    digit after the decimal point:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Essentially, there's no such thing as an integer in JavaScript. JavaScript uses
    a 64-bit floating point representation, which is the same as Java's double.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, you would see something as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I recommend that you read the exhaustive answer on Stack Overflow ([http://stackoverflow.com/questions/588004/is-floating-point-math-broken](http://stackoverflow.com/questions/588004/is-floating-point-math-broken))
    and ([http://floating-point-gui.de/](http://floating-point-gui.de/)), which explains
    why this is the case. However, it is important to understand that floating point
    arithmetic should be handled with due care. In most cases, you will not have to
    rely on extreme precision of decimal points but if you have to, you can try using
    libraries such as **big.js** ([https://github.com/MikeMcl/big.js](https://github.com/MikeMcl/big.js))
    that try to solve this problem.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: If you intend to code extremely precise financial systems, you should represent
    $ values as cents to avoid rounding errors. One of the systems that I worked on
    used to round off the **Value Added Tax** (**VAT**) amount to two decimal points.
    With thousands of orders a day, this rounding off amount per order became a massive
    accounting headache. We needed to overhaul the entire Java web service stack and
    JavaScript frontend for this.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: A few special values are also defined as part of the Number type. The first
    two are `Number.MAX_VALUE` and `Number.MIN_VALUE`, which define the outer bounds
    of the Number value set. All ECMAScript numbers must fall between these two values,
    without exception. A calculation can, however, result in a number that does not
    fall in between these two numbers. When a calculation results in a number greater
    than `Number.MAX_VALUE`, it is assigned a value of `Number.POSITIVE_INFINITY`,
    meaning that it has no numeric value anymore. Likewise, a calculation that results
    in a number less than `Number.MIN_VALUE` is assigned a value of `Number.NEGATIVE_INFINITY`,
    which also has no numeric value. If a calculation returns an infinite value, the
    result cannot be used in any further calculations. You can use the `isInfinite()`
    method to verify if the calculation result is an infinity.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Another peculiarity of JavaScript is a special value called NaN (short for
    *Not a Number*). In general, this occurs when conversion from another type (String,
    Boolean, and so on) fails. Observe the following peculiarity of NaN:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The second line is strange—NaN is not equal to NaN. If NaN is part of any mathematical
    operation, the result also becomes NaN. As a general rule, stay away from using
    NaN in any expression. For any advanced mathematical operations, you can use the
    `Math` global object and its methods:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can use the `parseInt()` and `parseFloat()` methods to convert a string
    expression to an integer or float:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With `parseInt()`, you should provide an explicit base to prevent nasty surprises
    on older browsers. The last trick is just using a `+` sign to auto-convert the
    `"42"` string to a number, `42`. It is also prudent to handle the `parseInt()`
    result with `isNaN()`. Let''s see the following example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, you are not sure of the type of the value that the `underterminedValue`
    variable can hold if the value is being set from an external interface. If `isNaN()`
    is not handled, `parseInt()` will cause an exception and the program can crash.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: String
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In JavaScript, strings are a sequence of Unicode characters (each character
    takes 16 bits). Each character in the string can be accessed by its index. The
    first character index is zero. Strings are enclosed inside `"` or `''`—both are
    valid ways to represent strings. Let''s see the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The last line shows you how certain character literals when escaped with a
    backslash `\` can be used as special characters. The following is a list of such
    special characters:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '`\n`: Newline'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\t`: Tab'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\b`: Backspace'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\r`: Carriage return'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\\`: Backslash'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\''`: Single quote'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\"`: Double quote'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You get default support for special characters and Unicode literals with JavaScript
    strings:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'One important thing about JavaScript Strings, Numbers, and Booleans is that
    they actually have wrapper objects around their primitive equivalent. The following
    example shows the usage of the wrapper objects:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: JavaScript allows multiline strings also. Strings enclosed within [PRE17]
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: console.log(`string text on first line
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string text on second line `);
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '"string text on first line'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: string text on second line "
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: var a=1, b=2;
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Sum of values is :" + (a+b) + " and multiplication is :" + (a*b));
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'console.log(`Sum of values is :${a+b} and multiplication is : ${a*b}`);'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: var xl;
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: console.log(typeof xl);
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: undefined
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: console.log(null==undefined);
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: var pBooleanTrue = true;
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: var pBooleanFalse = false;
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: var fBooleanTrue = Boolean(true);
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: var fBooleanFalse = Boolean(false);
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: var oBooleanTrue = new Boolean(true);
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: var oBooleanFalse = new Boolean(false);
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: console.log(oBooleanTrue); //true
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof oBooleanTrue); //object
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: if(oBooleanFalse){
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: console.log("I am seriously truthy, don't believe me");
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '>"I am seriously truthy, don''t believe me"'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: if(oBooleanTrue){
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: console.log("I am also truthy, see ?");
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '>"I am also truthy, see ?"'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: //Use valueOf() to extract real value within the Boolean object
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: if(oBooleanFalse.valueOf()){
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: console.log("With valueOf, I am false");
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '}else{'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Without valueOf, I am still truthy");
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '>"Without valueOf, I am still truthy"'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: var aStringObject = new String("string");
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof aStringObject);        //"object"
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: console.log(aStringObject instanceof String);    //true
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: var aString = "This is a string";
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: console.log(aString instanceof String);     //false
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: var dataObject = new Date([parameters]);
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: var today = new Date();
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getDate()); //27
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getMonth()); //4
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getFullYear()); //2015
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getHours()); //23
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getMinutes()); //13
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getSeconds()); //10
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: //number of milliseconds since January 1, 1970, 00:00:00 UTC
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getTime()); //1432748611392
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getTimezoneOffset()); //-330 Minutes
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: //Calculating elapsed time
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: var start = Date.now();
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: // loop for a long time
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: for (var i=0;i<100000;i++);
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: var end = Date.now();
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: var elapsed = end - start; // elapsed time in milliseconds
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: console.log(elapsed); //71
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: var a=25;
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: a=+a;            //No impact on a's value
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a);  //25
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: var b="70";
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof b); //string
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: b=+b;           //converts string to number
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: console.log(b); //70
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof b); //number
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: var c="foo";
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: c=+c;            //Converts foo to number
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: console.log(c);  //NaN
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof c);  //number
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: var zero="";
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: zero=+zero; //empty strings are converted to 0
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: console.log(zero);
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof zero);
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: var a= 1;
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: var b= a++;
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a); //2
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: console.log(b); //1
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: var a= 1;
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: var b= ++a;
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a);  //2
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: console.log(b);  //2
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: var a, b, c;
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: a = b = c = 0;
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: var a = b = 0;
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: console.log(true  && true); // true AND true returns true
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: console.log(true  && false);// true AND false returns false
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: console.log(false && true);// false AND true returns false
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Foo" && "Bar");// Foo(true) AND Bar(true) returns Bar
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: console.log(false && "Foo");// false && Foo(true) returns false
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Foo" && false);// Foo(true) && false returns false
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: console.log(false && (1 == 2));// false && false(1==2) returns false
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: console.log(true  || true); // true AND true returns true
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: console.log(true  || false);// true AND false returns true
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: console.log(false || true);// false AND true returns true
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Foo" || "Bar");// Foo(true) AND Bar(true) returns Foo
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: console.log(false || "Foo");// false && Foo(true) returns Foo
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Foo" || false);// Foo(true) && false returns Foo
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: console.log(false || (1 == 2));// false && false(1==2) returns false
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: console.log (0 && "Foo");  //First operand is falsy - return it
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: console.log ("Foo" && "Bar"); //First operand is truthy, return the second operand
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: console.log (0 || "Foo");  //First operand is falsy - return second operand
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: console.log ("Foo" || "Bar"); //First operand is truthy, return it
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: console.log (0 || false); //First operand is falsy, return second operand
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: function greeting(name){
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: name = name || "John";
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello " + name);
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: greeting("Johnson"); // alerts "Hi Johnson";
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: greeting(); //alerts "Hello John"
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: //If the operand is an object, false is returned.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: var s = new String("string");
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: console.log(!s);              //false
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: //If the operand is the number 0, true is returned.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: var t = 0;
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: console.log(!t);              //true
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: //If the operand is any number other than 0, false is returned.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: var x = 11;
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: console.log(!x);              //false
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: //If operand is null or NaN, true is returned
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: var y =null;
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: var z = NaN;
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: console.log(!y);              //true
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: console.log(!z);              //true
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: //If operand is undefined, you get true
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: var foo;
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: console.log(!foo);            //true
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'var allowedToDrive = (age > 21) ? "yes" : "no";'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: function isAllowedToDrive(age){
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: if(age>21){
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: return true;
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '}else{'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: return false;
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: console.log(isAllowedToDrive(22));
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: if (condition1) {
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: statement1
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (condition2) {'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: statement2
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (condition3) {'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: statement3
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: ..
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: statementN
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: if (condition1) {
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: statement1
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '} else'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: if (condition2) {
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: if(a=b) {
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: //do something
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: if((a=b)){
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: //this is really something you want to do
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: function sayDay(day){
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: switch(day){
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: 'case 1: console.log("Sunday");'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: break;
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'case 2: console.log("Monday");'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: break;
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: 'default:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: console.log("We live in a binary world. Go to Pluto");
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: sayDay(1); //Sunday
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: sayDay(3); //We live in a binary world. Go to Pluto
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '>sayDay(1);'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Sunday
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Monday
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: function debug(level,msg){
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: switch(level){
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'case "INFO": //intentional fall-through'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'case "WARN" :'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: 'case "DEBUG": console.log(level+ ": " + msg);'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: break;
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: 'case "ERROR": console.error(msg);'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: debug("INFO","Info Message");
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: debug("DEBUG","Debug Message");
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: debug("ERROR","Fatal Exception");
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: var i=0;
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: while(i<10){
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: i=i+1;
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: console.log(i);
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: //infinite loop
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: while(true){
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: //keep doing this
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: var choice;
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: do {
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: choice=getChoiceFromUserInput();
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '} while(!isInputValid(choice));'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: for (var i=0;i<5;i++){
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: var x=0;
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: //Omit initialitzation
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: for (;x<5;x++){
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: //Omit exit condition
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: for (var j=0;;j++){
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: //exit condition
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: if(j>=5){
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: break;
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '}else{'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: //Omit increment
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: for (var k=0; k<5;){
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: k++;
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: var arr = [10, 20, 30];
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: // Assign all array values to 100
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: for (i = 0; i < arr.length; arr[i++] = 100);
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: console.log(arr);
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: var n = 0;
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: var o = new String("0");
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: var s = "0";
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: var b = false;
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: console.log(n === n); // true - same values for numbers
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === o); // true - non numbers are compared for their values
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: console.log(s === s); // true - ditto
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: console.log(n === o); // false - no implicit type conversion, types are different
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: console.log(n === s); // false - types are different
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === s); // false - types are different
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: console.log(null === undefined); // false
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === null); // false
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === undefined); // false
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: var fortyTwo = 42;
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: console.log(fortyTwo.toString()[1]); //prints "2"
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: typeof 1             === "number";    // true
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: typeof "1"           === "string";    // true
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: 'typeof { age: 39 }   === "object";    // true'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: typeof Symbol()      === "symbol";    // true
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: typeof undefined     === "undefined"; // true
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: typeof true          === "boolean";   // true
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: var t=1;
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: var u=""+t; //implicit coercion
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof t);  //"number"
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof u);  //"string"
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: var v=String(t);  //Explicit coercion
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof v);  //"string"
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: var x=null
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: console.log(""+x); //"null"
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: var a="abc";
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a.length);
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a.toUpperCase());
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: As we discussed earlier, JavaScript kindly wraps these primitives in their wrappers
    by default thus making it possible for us to directly access the wrapper's methods
    and properties as if they were of the primitives themselves.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: typeof null ==="object" //true
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: var x = null;
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: if (!x && typeof x === "object"){
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: console.log("100% null");
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: f = function test() {
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: return 12;
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof f === "function");  //prints "true"
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: console.log (typeof [1,2,3,4]); //"object"
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: var a = 1;
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: typeof a; // "number"
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: a = false;
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: typeof a; // "boolean"
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: typeof typeof 1; // "string"
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: if (a < 1) a = 1 console.log(a)
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: if (a < 1) a = 1; console.log(a);
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: function add(a,b) { return a+b }
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: function add(a,b) { return a+b; }
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: //Cramped style (Bad)
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: if(condition) doSomeTask();
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: while(condition) i++;
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: for(var i=0;i<10;i++) iterate();
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: //Use whitespace for better readability (Good)
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: //Place 1 space before the leading brace.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: if (condition) {
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: while ( condition ) {
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: for ( var i = 0; i < 100; i++ ) {
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '// Better:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: var i,
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: length = 100;
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: for ( i = 0; i < length; i++ ) {
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: // Or...
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: var i = 0,
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: length = 100;
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: for ( ; i < length; i++ ) {
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: var value;
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: for ( value in object ) {
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: if ( true ) {
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: //Set off operators with spaces.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: var x=y+5;
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: var x = y + 5;
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: //End files with a single newline character.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: (function(global) {
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: // ...stuff...
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '})(this);'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: (function(global) {
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: // ...stuff...
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '})(this);↵'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: ↵
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: (function(global) {
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: // ...stuff...
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '})(this);↵'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '//String:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "string"
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '//Number:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "number"
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: '//Boolean:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "boolean"
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: '//Object:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "object"
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: '//null:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: variable === null
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '//null or undefined:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: variable == null
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: // bad
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: const totalScore = this.reviewScore + '';
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: const totalScore = String(this.reviewScore);
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: const inputValue = '4';
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: const val = new Number(inputValue);
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: const val = +inputValue;
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: const val = inputValue >> 0;
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: const val = parseInt(inputValue);
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: const val = Number(inputValue);
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: const val = parseInt(inputValue, 10);
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: const age = 0;  // bad
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: const hasAge = new Boolean(age);  // good
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: const hasAge = Boolean(age); // good
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: const hasAge = !!age;
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: // When evaluating that array has length,
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '// WRONG:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: if ( array.length > 0 ) ...
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate truthiness(GOOD):'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: if ( array.length ) ...
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: // When evaluating that an array is empty,
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '// (BAD):'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: if ( array.length === 0 ) ...
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate truthiness(GOOD):'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: if ( !array.length ) ...
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if string is not empty,
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: '// (BAD):'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: if ( string !== "" ) ...
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate truthiness (GOOD):'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: if ( string ) ...
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if a string is empty,
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: if ( string === "" ) ...
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate falsy-ness (GOOD):'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: if ( !string ) ...
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if a reference is true,
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === true ) ...
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: // GOOD
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo ) ...
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if a reference is false,
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === false ) ...
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: // GOOD
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: if ( !foo ) ...
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: '// this will also match: 0, "", null, undefined, NaN'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: // If you MUST test for a boolean false, then use
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === false ) ...
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: // a reference that might be null or undefined, but NOT false, "" or 0,
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === null || foo === undefined ) ...
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: // GOOD
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo == null ) ...
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: // Don't complicate matters
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: 'return x === 0 ? ''sunday'' : x === 1 ? ''Monday'' : ''Tuesday'';'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: '// Better:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: if (x === 0) {
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: return 'Sunday';
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (x === 1) {'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: return 'Monday';
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: return 'Tuesday';
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: '// Even Better:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: switch (x) {
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: 'case 0:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: return 'Sunday';
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: 'case 1:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: return 'Monday';
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: 'default:'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: return 'Tuesday';
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: //Avoid single letter names. Be descriptive with your naming.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: function q() {
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: function query() {
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: //Use camelCase when naming objects, functions, and instances.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: const OBJEcT = {};
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: const this_is_object = {};
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: function c() {}
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: const thisIsObject = {};
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: function thisIsFunction() {}
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: //Use PascalCase when naming constructors or classes.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: function user(options) {
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: this.name = options.name;
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: const bad = new user({
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''nope'','
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: class User {
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: constructor(options) {
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: this.name = options.name;
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: const good = new User({
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''yup'','
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: // Use a leading underscore _ when naming private properties.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: this.__firstName__ = 'Panda';
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: this.firstName_ = 'Panda';
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: this._firstName = 'Panda';
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'eval():'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: console.log(typeof eval(new String("1+1"))); // "object"
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: console.log(eval(new String("1+1")));        //1+1
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: console.log(eval("1+1"));                    // 2
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof eval("1+1"));             // returns "number"
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: var expression = new String("1+1");
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: console.log(eval(expression.toString()));    //2
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '''use strict'';'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: function foo() {
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: '''use strict'';'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: function sloppyFunc() {
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: sloppyVar = 123;
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: '} sloppyFunc();  // creates global variable `sloppyVar`'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: console.log(sloppyVar);  // 123
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: function strictFunc() {
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: '''use strict'';'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: strictVar = 123;
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: 'strictFunc();  // ReferenceError: strictVar is not defined'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 010 === 8 true
  id: totrans-645
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: function f() {
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: '''use strict'';'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: return 010
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: '//SyntaxError: Octal literals are not allowed in'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: npm install jshint –g
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'test.js file:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: function f(condition) {
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: switch (condition) {
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: 'case 1:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: console.log(1);
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: 'case 2:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: console.log(1);
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '>jshint test.js'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: 'test.js: line 4, col 19, Expected a ''break'' statement before ''case''.'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: 1 error
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '{'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: '"asi": false,'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: '"expr": true,'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: '"loopfunc": true,'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: '"curly": false,'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: '"evil": true,'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: '"white": true,'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: '"undef": true,'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: '"indent": 4'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-681
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we set some foundations around JavaScript grammar, types, and
    stylistic considerations. We have consciously not talked about other important
    aspects such as functions, variable scopes, and closures primarily because they
    deserve their own place in this module. I am sure that this chapter helps you
    understand some of the primary concepts of JavaScript. With these foundations
    in place, we will take a look at how we can write professional quality JavaScript
    code.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们围绕JavaScript语法、类型和风格考虑建立了一些基础。我们有意没有讨论其他重要方面，比如函数、变量作用域和闭包，主要是因为它们应该在这个模块中有自己的位置。我相信这一章会帮助你理解JavaScript的一些基本概念。有了这些基础，我们将看看如何编写专业质量的JavaScript代码。
