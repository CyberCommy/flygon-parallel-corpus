- en: Chapter 17. Django Middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Middleware is a framework of hooks into Django's request/response processing.
    It's a light, low-level plugin system for globally altering Django's input or
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Each middleware component is responsible for doing some specific function. For
    example, Django includes a middleware component, `AuthenticationMiddleware`, that
    associates users with requests using sessions.
  prefs: []
  type: TYPE_NORMAL
- en: This document explains how middleware works, how you activate middleware, and
    how to write your own middleware. Django ships with some built-in middleware you
    can use right out of the box. See *Available middleware* later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Activating middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To activate a middleware component, add it to the `MIDDLEWARE_CLASSES` list
    in your Django settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `MIDDLEWARE_CLASSES`, each middleware component is represented by a string:
    the full Python path to the middleware''s class name. For example, here''s the
    default value created by `django-admin startproject`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Django installation doesn't require any middleware-`MIDDLEWARE_CLASSES` can
    be empty, if you'd like-but it's strongly suggested that you at least use `CommonMiddleware`.
  prefs: []
  type: TYPE_NORMAL
- en: The order in `MIDDLEWARE_CLASSES` matters because a middleware can depend on
    other middleware. For instance, `AuthenticationMiddleware` stores the authenticated
    user in the session; therefore, it must run after `SessionMiddleware`. See *Middleware
    ordering* later in this chapter for some common hints about ordering of Django
    middleware classes.
  prefs: []
  type: TYPE_NORMAL
- en: Hooks and application order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the request phase, before calling the view, Django applies middleware
    in the order it''s defined in `MIDDLEWARE_CLASSES`, top-down. Two hooks are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`process_request()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process_view()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'During the response phase, after calling the view, middleware are applied in
    reverse order, from the bottom up. Three hooks are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`process_exception()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process_template_response()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process_response()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you prefer, you can also think of it like an onion: each middleware class
    is a layer that wraps the view.'
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of each hook is described below.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your own middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Writing your own middleware is easy. Each middleware component is a single
    Python class that defines one or more of the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: process_request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Method: `process_request(request)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`request` is an `HttpRequest` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process_request()` is called on each request, before Django decides which
    view to execute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should return either `None` or an `HttpResponse` object. If it returns `None`,
    Django will continue processing this request, executing any other `process_request()`
    middleware, then, `process_view()` middleware, and finally, the appropriate view.
  prefs: []
  type: TYPE_NORMAL
- en: If it returns an `HttpResponse` object, Django won't bother calling any other
    request, view or exception middleware, or the appropriate view; it'll apply response
    middleware to that `HttpResponse`, and return the result.
  prefs: []
  type: TYPE_NORMAL
- en: process_view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Method: `process_view(request, view_func, view_args, view_kwargs)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`request` is an `HttpRequest` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view_func` is the Python function that Django is about to use. (It''s the
    actual function object, not the name of the function as a string.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view_args` is a list of positional arguments that will be passed to the view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view_kwargs` is a dictionary of keyword arguments that will be passed to the
    view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neither `view_args` nor `view_kwargs` include the first view argument (`request`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process_view()` is called just before Django calls the view. It should return
    either `None` or an `HttpResponse` object. If it returns `None`, Django will continue
    processing this request, executing any other `process_view()` middleware and,
    then, the appropriate view.'
  prefs: []
  type: TYPE_NORMAL
- en: If it returns an `HttpResponse` object, Django won't bother calling any other
    view or exception middleware, or the appropriate view; it'll apply response middleware
    to that `HttpResponse`, and return the result.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Accessing `request.POST` inside middleware from `process_request` or `process_view`
    will prevent any view running after the middleware from being able to modify the
    upload handlers for the request, and should normally be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: The `CsrfViewMiddleware` class can be considered an exception, as it provides
    the `csrf_exempt()` and `csrf_protect()` decorators which allow views to explicitly
    control at what point the CSRF validation should occur.
  prefs: []
  type: TYPE_NORMAL
- en: process_template_response
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Method: `process_template_response(request, response)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`request` is an `HttpRequest` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`response` is the `TemplateResponse` object (or equivalent) returned by a Django
    view or by a middleware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process_template_response()` is called just after the view has finished executing,
    if the response instance has a `render()` method, indicating that it is a `TemplateResponse`
    or equivalent.'
  prefs: []
  type: TYPE_NORMAL
- en: It must return a response object that implements a `render` method. It could
    alter the given `response` by changing `response.template_name` and `response.context_data`,
    or it could create and return a brand-new `TemplateResponse` or equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to explicitly render responses-responses will be automatically
    rendered once all template response middleware has been called.
  prefs: []
  type: TYPE_NORMAL
- en: Middleware are run in reverse order during the response phase, which includes
    `process_template_response()`.
  prefs: []
  type: TYPE_NORMAL
- en: process_response
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Method: `process_response(request, response)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`request` is an `HttpRequest` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`response` is the `HttpResponse` or `StreamingHttpResponse` object returned
    by a Django view or by a middleware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process_response()` is called on all responses before they''re returned to
    the browser. It must return an `HttpResponse` or `StreamingHttpResponse` object.
    It could alter the given `response`, or it could create and return a brand-new
    `HttpResponse` or `StreamingHttpResponse`.'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the `process_request()` and `process_view()` methods, the `process_response()`
    method is always called, even if the `process_request()` and `process_view()`
    methods of the same middleware class were skipped (because an earlier middleware
    method returned an `HttpResponse`). In particular, this means that your `process_response()`
    method cannot rely on setup done in `process_request()`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, remember that during the response phase, middleware are applied in
    reverse order, from the bottom up. This means classes defined at the end of `MIDDLEWARE_CLASSES`
    will be run first.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with streaming responses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unlike `HttpResponse`, `StreamingHttpResponse` does not have a `content` attribute.
    As a result, middleware can no longer assume that all responses will have a `content`
    attribute. If they need access to the content, they must test for streaming responses
    and adjust their behavior accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`streaming_content` should be assumed to be too large to hold in memory. Response
    middleware may wrap it in a new generator, but must not consume it. Wrapping is
    typically implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: process_exception
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Method: `process_exception(request, exception)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`request` is an `HttpRequest` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exception` is an `Exception` object raised by the view function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django calls `process_exception()` when a view raises an exception. `process_exception()`
    should return either `None` or an `HttpResponse` object. If it returns an `HttpResponse`
    object, the template response and response middleware will be applied, and the
    resulting response returned to the browser. Otherwise, default exception handling
    kicks in.
  prefs: []
  type: TYPE_NORMAL
- en: Again, middleware are run in reverse order during the response phase, which
    includes `process_exception`. If an exception middleware returns a response, the
    middleware classes above that middleware will not be called at all.
  prefs: []
  type: TYPE_NORMAL
- en: __init__
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most middleware classes won''t need an initializer since middleware classes
    are essentially placeholders for the `process_*` methods. If you do need some
    global state, you may use `__init__` to set up. However, keep in mind a couple
    of caveats:'
  prefs: []
  type: TYPE_NORMAL
- en: Django initializes your middleware without any arguments, so you can't define
    `__init__` as requiring any arguments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unlike the `process_*` methods which get called once per request, `__init__`
    gets called only once, when the web server responds to the first request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Marking middleware as unused
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's sometimes useful to determine at run-time whether a piece of middleware
    should be used. In these cases, your middleware's `__init__` method may raise
    `django.core.exceptions.MiddlewareNotUsed`. Django will then remove that piece
    of middleware from the middleware process and a debug message will be logged to
    the `django.request` logger when `DEBUG` is set to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: Additional guidelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Middleware classes don't have to subclass anything.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The middleware class can live anywhere on your Python path. All Django cares
    about is that the `MIDDLEWARE_CLASSES` setting includes the path to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feel free to look at Django's available middleware for examples.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you write a middleware component that you think would be useful to other
    people, contribute to the community! Let us know and we'll consider adding it
    to Django.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cache middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.middleware.cache.UpdateCacheMiddleware`; and `django.middleware.cache.FetchFromCacheMiddleware`'
  prefs: []
  type: TYPE_NORMAL
- en: Enable the site-wide cache. If these are enabled, each Django-powered page will
    be cached for as long as the `CACHE_MIDDLEWARE_SECONDS` setting defines. See the
    cache documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Common middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.middleware.common.CommonMiddleware`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adds a few conveniences for perfectionists:'
  prefs: []
  type: TYPE_NORMAL
- en: Forbids access to user agents in the `DISALLOWED_USER_AGENTS` setting, which
    should be a list of compiled regular expression objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performs URL rewriting based on the `APPEND_SLASH` and `PREPEND_WWW` settings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `APPEND_SLASH` is `True` and the initial URL doesn't end with a slash, and
    it is not found in the URLconf, then a new URL is formed by appending a slash
    at the end. If this new URL is found in the URLconf, then Django redirects the
    request to this new URL. Otherwise, the initial URL is processed as usual.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `foo.com/bar` will be redirected to `foo.com/bar/` if you don't
    have a valid URL pattern for `foo.com/bar` but do have a valid pattern for `foo.com/bar/`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `PREPEND_WWW` is `True`, URLs that lack a leading `www.` will be redirected
    to the same URL with a leading `www`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both of these options are meant to normalize URLs. The philosophy is that each
    URL should exist in one, and only one, place. Technically a URL `foo.com/bar`
    is distinct from `foo.com/bar/`-a search engine indexer would treat them as separate
    URLs-so it's best practice to normalize URLs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handles ETags based on the `USE_ETAGS` setting. If `USE_ETAGS` is set to `True`,
    Django will calculate an ETag for each request by MD5-hashing the page content,
    and it'll take care of sending `Not Modified` responses, if appropriate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CommonMiddleware.response_redirect_class.` Defaults to `HttpResponsePermanentRedirect`.
    Subclass `CommonMiddleware` and override the attribute to customize the redirects
    issued by the middleware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django.middleware.common.BrokenLinkEmailsMiddleware.` Sends broken link notification
    emails to `MANAGERS.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GZip middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.middleware.gzip.GZipMiddleware`'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Security researchers recently revealed that when compression techniques (including
    `GZipMiddleware`) are used on a website, the site becomes exposed to a number
    of possible attacks. These approaches can be used to compromise, among other things,
    Django's CSRF protection. Before using `GZipMiddleware` on your site, you should
    consider very carefully whether you are subject to these attacks. If you're in
    any doubt about whether you're affected, you should avoid using `GZipMiddleware`.
    For more details, see `breachattack.com`.
  prefs: []
  type: TYPE_NORMAL
- en: Compresses content for browsers that understand GZip compression (all modern
    browsers).
  prefs: []
  type: TYPE_NORMAL
- en: This middleware should be placed before any other middleware that need to read
    or write the response body so that compression happens afterward.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will NOT compress content if any of the following are true:'
  prefs: []
  type: TYPE_NORMAL
- en: The content body is less than 200 bytes long.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The response has already set the `Content-Encoding` header.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The request (the browser) hasn't sent an `Accept-Encoding` header containing
    `gzip`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can apply GZip compression to individual views using the `gzip_page()` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional GET middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.middleware.http.ConditionalGetMiddleware`'
  prefs: []
  type: TYPE_NORMAL
- en: Handles conditional GET operations. If the response has a `ETag` or `Last-Modified`
    header, and the request has `If-None-Match` or `If-Modified-Since`, the response
    is replaced by an `HttpResponseNotModified`.
  prefs: []
  type: TYPE_NORMAL
- en: Also sets the `Date` and `Content-Length` response-headers.
  prefs: []
  type: TYPE_NORMAL
- en: Locale middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.middleware.locale.LocaleMiddleware`'
  prefs: []
  type: TYPE_NORMAL
- en: Enables language selection based on data from the request. It customizes content
    for each user. See the internationalization documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '`LocaleMiddleware.response_redirect_class`'
  prefs: []
  type: TYPE_NORMAL
- en: Defaults to `HttpResponseRedirect`. Subclass `LocaleMiddleware` and override
    the attribute to customize the redirects issued by the middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Message middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.contrib.messages.middleware.MessageMiddleware`'
  prefs: []
  type: TYPE_NORMAL
- en: Enables cookie-and session-based message support. See the messages documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Security middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your deployment situation allows, it's usually a good idea to have your front-end
    web server perform the functionality provided by the `SecurityMiddleware`. That
    way, if there are requests that aren't served by Django (such as static media
    or user-uploaded files), they will have the same protections as requests to your
    Django application.
  prefs: []
  type: TYPE_NORMAL
- en: The `django.middleware.security.SecurityMiddleware` provides several security
    enhancements to the request/response cycle. The `SecurityMiddleware` achieves
    this by passing special headers to the browser. Each one can be independently
    enabled or disabled with a setting.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP strict transport security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SECURE_HSTS_INCLUDE_SUBDOMAINS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SECURE_HSTS_SECONDS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For sites that should only be accessed over HTTPS, you can instruct modern browsers
    to refuse to connect to your domain name via an insecure connection (for a given
    period of time) by setting the `Strict-Transport-Security` header. This reduces
    your exposure to some SSL-stripping man-in-the-middle (MITM) attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '`SecurityMiddleware` will set this header for you on all HTTPS responses if
    you set the `SECURE_HSTS_SECONDS` setting to a non-zero integer value.'
  prefs: []
  type: TYPE_NORMAL
- en: When enabling HSTS, it's a good idea to first use a small value for testing,
    for example, `SECURE_HSTS_SECONDS = 3600` for one hour. Each time a web browser
    sees the HSTS header from your site, it will refuse to communicate non-securely
    (using HTTP) with your domain for the given period of time.
  prefs: []
  type: TYPE_NORMAL
- en: Once you confirm that all assets are served securely on your site (that is,
    HSTS didn't break anything), it's a good idea to increase this value so that infrequent
    visitors will be protected (31536000 seconds, that is,1 year, is common).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, if you set the `SECURE_HSTS_INCLUDE_SUBDOMAINS` setting to `True`,
    `SecurityMiddleware` will add the `includeSubDomains` tag to the `Strict-Transport-Security`
    header. This is recommended (assuming all subdomains are served exclusively using
    HTTPS), otherwise your site may still be vulnerable via an insecure connection
    to a subdomain.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HSTS policy applies to your entire domain, not just the URL of the response
    that you set the header on. Therefore, you should only use it if your entire domain
    is served via HTTPS only.
  prefs: []
  type: TYPE_NORMAL
- en: Browsers properly respecting the HSTS header will refuse to allow users to bypass
    warnings and connect to a site with an expired, self-signed, or otherwise invalid
    SSL certificate. If you use HSTS, make sure your certificates are in good shape
    and stay that way!
  prefs: []
  type: TYPE_NORMAL
- en: 'X-content-type-options: nosniff'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SECURE_CONTENT_TYPE_NOSNIFF`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some browsers will try to guess the content types of the assets that they fetch,
    overriding the `Content-Type` header. While this can help display sites with improperly
    configured servers, it can also pose a security risk.
  prefs: []
  type: TYPE_NORMAL
- en: If your site serves user-uploaded files, a malicious user could upload a specially-crafted
    file that would be interpreted as HTML or Javascript by the browser when you expected
    it to be something harmless.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prevent the browser from guessing the content type and force it to always
    use the type provided in the `Content-Type` header, you can pass the `X-Content-Type-Options:
    nosniff` header. `SecurityMiddleware` will do this for all responses if the `SECURE_CONTENT_TYPE_NOSNIFF`
    setting is `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that in most deployment situations where Django isn't involved in serving
    user-uploaded files, this setting won't help you. For example, if your `MEDIA_URL`
    is served directly by your front-end web server (nginx, Apache, and so on.) then
    you'd want to set this header there.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if you are using Django to do something like require authorization
    in order to download files and you cannot set the header using your web server,
    this setting will be useful.
  prefs: []
  type: TYPE_NORMAL
- en: X-XSS-protection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SECURE_BROWSER_XSS_FILTER`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some browsers have the ability to block content that appears to be an XSS attack.
    They work by looking for Javascript content in the GET or POST parameters of a
    page. If the Javascript is replayed in the server's response, the page is blocked
    from rendering and an error page is shown instead.
  prefs: []
  type: TYPE_NORMAL
- en: The `X-XSS-Protection header` is used to control the operation of the XSS filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the XSS filter in the browser, and force it to always block suspected
    XSS attacks, you can pass the `X-XSS-Protection: 1; mode=block` header. `SecurityMiddleware`
    will do this for all responses if the `SECURE_BROWSER_XSS_FILTER` setting is `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The browser XSS filter is a useful defense measure, but must not be relied upon
    exclusively. It cannot detect all XSS attacks and not all browsers support the
    header. Ensure you are still validating and all input to prevent XSS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: SSL redirect
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SECURE_REDIRECT_EXEMPT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SECURE_SSL_HOST`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SECURE_SSL_REDIRECT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your site offers both HTTP and HTTPS connections, most users will end up
    with an unsecured connection by default. For best security, you should redirect
    all HTTP connections to HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: If you set the `SECURE_SSL_REDIRECT` setting to True, `SecurityMiddleware` will
    permanently (HTTP 301) redirect all HTTP connections to HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: For performance reasons, it's preferable to do these redirects outside of Django,
    in a front-end load balancer or reverse-proxy server such as nginx. `SECURE_SSL_REDIRECT`
    is intended for the deployment situations where this isn't an option.
  prefs: []
  type: TYPE_NORMAL
- en: If the `SECURE_SSL_HOST` setting has a value, all redirects will be sent to
    that host instead of the originally-requested host.
  prefs: []
  type: TYPE_NORMAL
- en: If there are a few pages on your site that should be available over HTTP, and
    not redirected to HTTPS, you can list regular expressions to match those URLs
    in the `SECURE_REDIRECT_EXEMPT` setting.
  prefs: []
  type: TYPE_NORMAL
- en: If you are deployed behind a load-balancer or reverse-proxy server and Django
    can't seem to tell when a request actually is already secure, you may need to
    set the `SECURE_PROXY_SSL_HEADER` setting.
  prefs: []
  type: TYPE_NORMAL
- en: Session middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.contrib.sessions.middleware.SessionMiddleware`'
  prefs: []
  type: TYPE_NORMAL
- en: Enables session support. See [Chapter 15](ch15.xhtml "Chapter 15. Django Sessions"),
    *Django Sessions*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Site middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.contrib.sites.middleware.CurrentSiteMiddleware`'
  prefs: []
  type: TYPE_NORMAL
- en: Adds the `site` attribute representing the current site to every incoming `HttpRequest`
    object. See the sites documentation ([https://docs.djangoproject.com/en/1.8/ref/contrib/sites/](https://docs.djangoproject.com/en/1.8/ref/contrib/sites/))
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.contrib.auth.middleware` provides three middlewares for use in authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*.AuthenticationMiddleware.` Adds the `user` attribute, representing the currently-logged-in
    user, to every incoming `HttpRequest` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*.RemoteUserMiddleware.` Middleware for utilizing web server provided authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*.SessionAuthenticationMiddleware.` Allows a user''s sessions to be invalidated
    when their password changes. This middleware must appear after `*.AuthenticationMiddleware`
    in `MIDDLEWARE_CLASSES`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more on user authentication in Django, see [Chapter 11](ch11.xhtml "Chapter 11. User
    Authentication in Django"), *User Authentication in Django*.
  prefs: []
  type: TYPE_NORMAL
- en: CSRF protection middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.middleware.csrf.CsrfViewMiddleware`'
  prefs: []
  type: TYPE_NORMAL
- en: Adds protection against Cross Site Request Forgeries (CSRF) by adding hidden
    form fields to POST forms and checking requests for the correct value. See [Chapter
    19](ch19.xhtml "Chapter 19. Security in Django"), *Security in Django*, for more
    information on CSRF protection.
  prefs: []
  type: TYPE_NORMAL
- en: X-Frame-options middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.middleware.clickjacking.XFrameOptionsMiddleware`'
  prefs: []
  type: TYPE_NORMAL
- en: Simple clickjacking protection via the X-Frame-Options header.
  prefs: []
  type: TYPE_NORMAL
- en: Middleware ordering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Table 17.1* provides some hints about the ordering of various Django middleware
    classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Class** | **Notes** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| UpdateCacheMiddleware | Before those that modify the `Vary` header (`SessionMiddleware`,
    `GZipMiddleware`, `LocaleMiddleware`). |'
  prefs: []
  type: TYPE_TB
- en: '| GZipMiddleware | Before any middleware that may change or use the response
    body.After `UpdateCacheMiddleware`: Modifies `Vary` header. |'
  prefs: []
  type: TYPE_TB
- en: '| ConditionalGetMiddleware | Before `CommonMiddleware`: uses its `Etag` header
    when `USE_ETAGS` = `True`. |'
  prefs: []
  type: TYPE_TB
- en: '| SessionMiddleware | After `UpdateCacheMiddleware`: Modifies `Vary` header.
    |'
  prefs: []
  type: TYPE_TB
- en: '| LocaleMiddleware | One of the topmost, after `SessionMiddleware` (uses session
    data) and `CacheMiddleware` (modifies `Vary` header). |'
  prefs: []
  type: TYPE_TB
- en: '| CommonMiddleware | Before any middleware that may change the response (it
    calculates `ETags`).After `GZipMiddleware` so it won''t calculate an `ETag` header
    on gzipped contents.Close to the top: it redirects when `APPEND_SLASH` or `PREPEND_WWW`
    are set to `True`. |'
  prefs: []
  type: TYPE_TB
- en: '| CsrfViewMiddleware | Before any view middleware that assumes that CSRF attacks
    have been dealt with. |'
  prefs: []
  type: TYPE_TB
- en: '| AuthenticationMiddleware | After `SessionMiddleware`: uses session storage.
    |'
  prefs: []
  type: TYPE_TB
- en: '| MessageMiddleware | After `SessionMiddleware`: can use session-based storage.
    |'
  prefs: []
  type: TYPE_TB
- en: '| FetchFromCacheMiddleware | After any middleware that modifies the `Vary`
    header: that header is used to pick a value for the cache hash-key. |'
  prefs: []
  type: TYPE_TB
- en: '| FlatpageFallbackMiddleware | Should be near the bottom as it''s a last-resort
    type of middleware. |'
  prefs: []
  type: TYPE_TB
- en: '| RedirectFallbackMiddleware | Should be near the bottom as it''s a last-resort
    type of middleware. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 17.1: Ordering of middleware classes'
  prefs: []
  type: TYPE_NORMAL
- en: What's next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next chapter, we will be looking at internationalization in Django.
  prefs: []
  type: TYPE_NORMAL
