- en: Chapter 18. Localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is quick and simple, but what we will learn to do can make your
    app accessible to millions of potential users. We will see how to add additional
    languages and we will see why adding text the correct way via String resources
    benefits us when it comes to adding multiple languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the Note to self app multilingual by adding the Spanish and German languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to better use **String resources**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Making the Note to self app Spanish, English, and German
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we need to add some folders to our project – one for each new language.
    The text is classed as a **resource**, and, consequently, needs to go in the `res`
    folder. Follow these steps to add Spanish support to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the source files for this project are provided in the `Chapter18` folder,
    they are just for reference. You need to go through the processes described next
    to achieve multilingual functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Spanish support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the next steps to add the Spanish language:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `res` folder, then select **New** | **Android resource directory**.
    In the **Directory name** field, type `values-es`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to add a file in which we can place all our Spanish translations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on `res`, then select **New** | **Android resource file** and type
    `strings.xml` in the **File name** field. Type `values-es` in the **Directory
    name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have a `strings.xml` file that any device set to use the Spanish language
    will refer to. To be clear, we now have two distinct `strings.xml` files.
  prefs: []
  type: TYPE_NORMAL
- en: Adding German support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow these steps to add German language support.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `res` folder then select **New** | **Android resource directory**.
    In the **Directory name** field, type `values-de`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to add a file in which we can place all our German translations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on `res`, then select **New** | **Android resource file** and type
    `strings.xml` in the **File name** field. Type `values-de` in the **Directory
    name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows what the `strings.xml` folder looks like. You
    are probably wondering where the `strings.xml` folder came from, as it doesn't
    correspond to the structure we seemed to be creating in the previous steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio is helping us to organize our files and folders as it is required
    by the Android operating system in the APK format. You can, however, clearly see
    the Spanish and German files indicated by their flags as well as their **(de)**
    and **(es)** postfixes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding German support](img/B12806_C18_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on your Android Studio settings, you might not see the country flag
    icons. Provided that you can see three `strings.xml` files, one without a postfix,
    one with **(de)**, and one with **(es)**, then you are ready to continue.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can add the translations to the files we just created.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the String resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we know, the `strings.xml` file contains the words that the app will display,
    words such as important, to-do, and idea. By having a `strings.xml` file for each
    language we want to support, we can then leave Android to choose the appropriate
    text depending upon the language settings of the user.
  prefs: []
  type: TYPE_NORMAL
- en: As you go through the following, notice that, although we place the translation
    of whatever word we are translating as the value, the `name` attribute remains
    the same. If you think about it, this is logical, because it is the `name` attribute
    that we refer to in our layout files.
  prefs: []
  type: TYPE_NORMAL
- en: Let's provide the translations, see what we have achieved, and then come back
    and discuss what we will do about text in our Kotlin code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to achieve this code is to copy and paste the code from the
    original `strings.xml` file and then edit the values of each of the `name` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `strings.xml` file by double-clicking it. Be sure to choose the one
    next to the Spanish flag or **(es)** postfix. Edit the file to look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `strings.xml` file by double-clicking it. Be sure to choose the one
    next to the German flag or **(de)** postfix. Edit the file to look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't provide all the string resources in the extra (Spanish and German)
    `strings.xml` files, then the missing resources will be taken from the default
    file.
  prefs: []
  type: TYPE_NORMAL
- en: What we have done is provided two translations. Android knows which translation
    is for which language because of the folders they are placed in. Furthermore,
    we have used a **String identifier** (the `name` attribute) to refer to the translations.
    Look back at the previous code and you will see that the same identifier is used
    for both translations as well as in the original `strings.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can even localize to different versions of a language, such as US or United
    Kingdom English. The complete list of codes can be found at [http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android](http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android).
    You can even localize resources such as images and sound. Find out more about
    this at [http://developer.android.com/guide/topics/resources/localization.html](http://developer.android.com/guide/topics/resources/localization.html).
  prefs: []
  type: TYPE_NORMAL
- en: The translations were copy and pasted from Google translate, so it is very likely
    that some of the translations are far from correct. Doing translation on the cheap
    like this can be an effective way to get an app with a basic set of String resources
    onto devices of users who speak different languages to yourself. Once you start
    having any depth of translation needed, perhaps for the lines of a story-driven
    game or social media app, you will certainly benefit from having the translation
    done by a human professional.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this exercise is to show how Android works, not how to translate.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: My sincere apologies to any Spanish or German speakers who are likely to be
    able to see the limitations of the translations provided here.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the translations, we can see them in action – up to a point.
  prefs: []
  type: TYPE_NORMAL
- en: Running Note to self in German or Spanish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the app to see whether it is working as expected. Now, we can change the
    localization settings to see it in Spanish. Different devices vary slightly in
    how to do this, but the Pixel 2 XL emulator can be changed by clicking on the
    **Custom Locale** app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running Note to self in German or Spanish](img/B12806_C18_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, select **es-ES** and then click the **SELECT ''ES''** button in the bottom-left
    of the screen, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running Note to self in German or Spanish](img/B12806_C18_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can run the app in the usual way. Here is a screenshot showing the
    app running in Spanish. I have photoshopped a few images side by side to show
    a few different screens of the Note to self app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running Note to self in German or Spanish](img/B12806_C18_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can clearly see that our app is mainly translated to Spanish. Obviously,
    the text that the user enters will be in whatever language they speak – that is
    not a flaw of our app. However, look at the images closely and you will notice
    that I have pointed out a couple of places where the text is still in English.
    We still have some untranslated text in each of our dialog windows.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the text is contained directly within our Kotlin code. As we
    have seen, it is easy to use String resources in multiple languages and then refer
    to them in our layouts, but how do we refer to String resources from our Kotlin
    code?
  prefs: []
  type: TYPE_NORMAL
- en: Making the translations work in Kotlin code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing to do is create the resources in each of the three `strings.xml`
    files. Here are the two resources that need adding to the three different files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `strings.xml` (without any flag or postfix), add these two resources within
    the `<resources></resources>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `strings.xml` file with the Spanish flag and/or the **(es)** postfix,
    add these two resources within the `<resources></resources>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `strings.xml` file with the German flag and/or the **(de)** postfix,
    add these two resources within the `<resources></resources>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to edit some Kotlin code to refer to a resource instead of a hard-coded
    String.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `DialogNewNote.kt` file and find this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit it to use the String resource we just added instead of the hard-coded
    text as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The new code uses the chained `setView`, `setMessage`, and `resources.getString`
    functions to replace the previously hard-coded `"Add a new note"` text. Look closely,
    and you will see that the argument sent to `getString` is the String `R.string.add_new_note`
    identifier.
  prefs: []
  type: TYPE_NORMAL
- en: The `R.string` code refers to the String resources in the `res` folder, and
    `add_new_note` is our identifier. Android will then be able to decide which version
    (default, Spanish, or German) is appropriate based upon the locale of the device
    on which the app is running.
  prefs: []
  type: TYPE_NORMAL
- en: We have one more hard-coded String resource to change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `DialogShowNote.kt` file and find this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit it to use the String resource we just added instead of the hard-coded
    text as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The new code again uses the chained `setView`, `setMessage`, and `resources.getString`
    functions to replace the previously hard-coded `"Your note"` text. And, again,
    the argument sent to `getString` is the String identifier, in this case `R.string.your_note`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android can now decide which version (default, Spanish, or German) is appropriate
    based upon the locale of the device on which the app is running. The next screenshot
    shows that the new note screen now has the opening text in the appropriate language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making the translations work in Kotlin code](img/B12806_C18_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can add as many String resources as you like. As a reminder from [Chapter
    3](ch03.html "Chapter 3. Exploring Android Studio and the Project Structure"),
    *Exploring Android Studio and the Project Structure*, note that using String resources
    is the recommended way to add all text to all projects. The tutorials in this
    book (apart from Note to Self) will tend to hard-code them to make a more compact
    tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can now go global with our apps, as well as add the more flexible String
    resources instead of hard-coding all the text.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how we can add cool animations to our layouts
    using animations and interpolators.
  prefs: []
  type: TYPE_NORMAL
