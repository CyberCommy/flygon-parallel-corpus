- en: Exploring .NET Core 1.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will explore .NET Core 1.1\. We will see what .NET Core is and
    what you can do with it. We will be looking at:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple .NET Core application and running it on a Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first ASP.NET Core application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing your ASP.NET Core application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a lot of buzz these days regarding .NET Core. There are really a lot
    of articles explaining what .NET Core is and what it does. Simply put, .NET Core
    allows you to create cross-platform applications that run on Windows, Linux, and
    macOS. It does this by leveraging a .NET Standard Library that targets all these
    platforms with the exact same code. You can, therefore, use the language and tools
    you are comfortable with to create applications. It supports C#, VB, and F#, and
    even allows the use of constructs such as generics, async support, and LINQ. For
    more information and documentation on .NET Core, go to [https://www.microsoft.com/net/core](https://www.microsoft.com/net/core).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple .NET Core application and running it on a Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will take a look at how to create an application on Windows using Visual
    Studio 2017 and then running that application on a Mac. This kind of application
    development was previously impossible as you could not run code compiled for Windows
    on a Mac. .NET Core changes all this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need access to a Mac in order to run the application you created. I'm
    using a Mac mini (late 2012) with a 2.5 GHz Intel Core i5 CPU running macOS Sierra
    with 4GB of memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use your .NET Core apps on a Mac, there are a few things you need
    to do:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to install Homebrew, which is used to get the latest version of OpenSSL.
    Open the Terminal on your Mac by typing `Terminal` into your Spotlight search:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_01-2.png)'
  prefs: []
  type: TYPE_IMG
- en: The following steps can also be completed by going to [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos) 
    and performing these on your Mac.
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the following at the Terminal prompt and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If the Terminal asks you for your password, enter your password and press *Enter*.
    You will not see anything as you type. This is normal. Just type your password
    and press *Enter* to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The requirements for installing Homebrew are an Intel CPU, OS X 10.10 or higher,
    **Command Line Tools** (**CLT**) for Xcode, and a Bourne-compatible shell for
    installation, such as bash or zsh. Terminal is thus well suited.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the speed of your Internet connection and whether you have CLT for
    Xcode installed, the process of installing Homebrew can take some time to complete.
    When completed, the Terminal should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Typing in `brew help` will show you some useful commands you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the following commands one after the other in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '`brew update`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`brew install openssl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mkdir -p /usr/local/lib`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We then need to install the .NET Code SDK. From the URL [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos) 
    click on the Download .NET Core SDK button. After the download has completed,
    click on the `.pkg` file downloaded. Click on the Continue button to install the
    .NET Core 1.1.0 SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_04.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a .NET Core console application in Visual Studio 2017\. Under
    Visual C# templates, select .NET Core and a Console App (.NET Core) project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you created your console application, the code will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify your code to look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The method `GetSystemInfo()` just returns the current operating system the
    console application currently runs on. The `csproj` file for my application looks
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `<version>` is defined as `1.1.0`.
  prefs: []
  type: TYPE_NORMAL
- en: If you are still running Visual Studio 2017 RC, it would be a good idea to check
    your installed NuGet packages to see whether there is an update available for
    your .NET Core version from .NET Core 1.0 to .NET Core 1.1.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Press *F5* to run your console application. You will see that the OS is displayed
    in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Go to the `bin` folder of your console application and copy the files to a folder
    on the desktop of your Mac. Call that folder `consoleApp`. In Terminal, navigate
    to the folder with the copied files. You can do this by typing the command `cd
    ./Desktop` and then type `ls` to list the contents of your desktop. Check if the
    folder you created is listed, and if so, in Terminal type `cd ./consoleApp`. List
    the contents of the `consoleApp` folder again by typing `ls`. In my case, the
    DLL was called `NetCoreConsole.dll`. To run the code you wrote earlier, type `dotnet
    NetCoreConsole.dll` and press *Enter:*
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_07.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the code is run and the text output in Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, by any chance, you find that trying to run the `dotnet` command (after
    installing the .NET Core SDK) results in an error saying `command not found`,
    try the following. In Terminal type the following and press Enter: `ln -s /usr/local/share/dotnet/dotnet
    /usr/local/bin/`, which adds a symbolic link. Running the `dotnet` command should
    work after this.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first ASP.NET Core application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at building your first ASP.NET Core app. In this recipe, we
    will just create a very basic ASP.NET Core application and briefly discuss the
    `Startup` class. Further reading on the subject will be required and is not included
    in this brief introduction to ASP.NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start off by creating a new project in Visual Studio 2017\. Under Visual C#,
    select the .NET Core node and click on the ASP.NET Core Web Application.... Click
    on OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then be presented with the project template selection. You can choose
    to create an empty application, a Web API (allows you to create an HTTP-based
    API), or a full Web Application. Select the Empty template, make sure that Host
    in the cloud is unchecked, and and click on OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_09.png)'
  prefs: []
  type: TYPE_IMG
- en: Note how the templates window allows you to enable Docker support. Docker allows
    you to develop applications inside containers that contain a complete file system
    and everything else required to run your application. This means that your software
    will always function exactly the same, regardless of the environment it is in.
    For more on Docker, visit [www.docker.com](https://www.docker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'When your ASP.NET Core application is created, your Solution Explorer will
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_10-1.png)'
  prefs: []
  type: TYPE_IMG
- en: If you are running Visual Studio 2017 RC, what you need to do is click on Tools,
    NuGet Package Manager, Manage NuGet Packages for Solution... and see if there
    are any updates to .NET Core. If you are on .NET Core 1.01, there should be an
    update to .NET Core 1.1 available via NuGet. Let NuGet update your project dependencies
    for you. After doing this, you must browse to [https://www.microsoft.com/net/download/core#/current](https://www.microsoft.com/net/download/core#/current) 
    and make sure that you have selected the Current option under All downloads. Download
    the current .NET Core SDK installer for Windows and install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you can press *Ctrl* + *F5* to Start without Debugging and launch
    your ASP.NET Core application. This will start IIS Express, which is the default
    host for ASP.NET Core applications. The only thing it does now is to display the
    text Hello World!. You have successfully created and run an ASP.NET Core application.
    Don''t close your browser yet. Keep it open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_11.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the port number 25608 in the URL of the browser is a randomly selected
    port. The port number you will see will most likely be different than in the book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Right-click on the solution in yourSolution Explorer and click on Open Folder
    in File Explorer. You will notice that you have a folder called `src`. Click into
    this folder and click on the `AspNetCore` sub-folder inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Comparing the contents of the `AspNetCore` folder and the Solution Explorer
    in Visual Studio will show you that they are virtually the same. This is because
    in ASP.NET Core, the Windows file system determines the solution in Visual Studio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_13-2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Windows file explorer, right-click on the `Startup.cs` file and edit
    it in Notepad. You will see the following code in Notepad:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in Notepad, edit the line that reads `await context.Response.WriteAsync("Hello
    World!");` and change it to read `await context.Response.WriteAsync($"The date
    is {DateTime.Now.ToString("dd MMM yyyy")}");`. Save the file in Notepad and go
    to the browser and refresh it. You will see that the changes are displayed in
    the browser without me having to edit it in Visual Studio at all. This is because
    (as mentioned earlier) Visual Studio uses the file system to determine the project
    structure and ASP.NET Core detected the changes to the `Startup.cs` file and automatically
    recompiled it on the fly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the Solution Explorer a little more in detail, I want to highlight
    some of the files in the project. The `wwwroot` folder will represent the root
    of the website when hosted. It is here that you will place static files such as
    images, JavaScript, and CSS style sheet files. Another file of interest is the
    `Startup.cs` file, which essentially replaces the `Global.asax` file. It is here
    in the `Startup.cs` file that you can write code to execute when your ASP.NET
    Core application starts up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_15-1.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Startup.cs` file contains the `Startup` class. ASP.NET Core requires a
    `Startup` class and will look for this class by default. By convention the `Startup`
    class is called `Startup`, but you can call it something else if you want. If
    you need to rename it, then you also need to ensure that the `Program.cs` file
    is modified so that the `WebHostBuilder()` specifies the correct class name for
    `.UseStartup`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Going back to our `Startup` class in the `Startup.cs` file, when you look inside
    this class you will see two methods. The methods are `Configure()` and `ConfigureServices()`.
    As you can see from the comment on the `Configure()` method, it is used *to configure
    the HTTP request pipeline*. Basically, incoming requests are handled by the application
    here and all it currently does in our application is to display the current date
    for every incoming request. The `ConfigureServices()` method is called before
    `Configure()` and is optional. Its explicit purpose is to add any services required
    by the application. ASP.NET Core supports dependency Injection natively. This
    means that if I can leverage services by injecting them into methods in the `Startup`
    class. For more information on DI, be sure to read [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection).
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your ASP.NET Core application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Publishing an ASP.NET Core application is quite straightforward. We will take
    a look at publishing the application via Command Prompt (run as administrator)
    and then publishing the ASP.NET Core application to IIS on a Windows server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to have IIS set up in order to do this. Start Programs and Features
    and click on Turn Windows features on or off in the left-hand side of the Programs
    and Features form. Ensure that Internet Information Services is selected. When
    you select IIS, click OK to turn the feature on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_31.png)'
  prefs: []
  type: TYPE_IMG
- en: You also need to ensure that you have installed the .NET Core Windows Server
    Hosting bundle, which will create a reverse-proxy between IIS and the Kestrel
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of this writing, the .NET Core Windows Server Hosting bundle is
    available at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/aspnet/core/publishing/iis#install-the-net-core-windows-server-hosting-bundle](https://docs.microsoft.com/en-us/aspnet/core/publishing/iis#install-the-net-core-windows-server-hosting-bundle)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After installing the .NET Core Windows Server Hosting bundle, you need to restart
    IIS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Command Prompt as administrator, type `iisreset` and press *Enter.* This
    will stop and then start IIS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_27.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open up Command Prompt by running it as administrator. In Command Prompt, go
    to the `src\AspNetCore` directory of your project. Ensure that you have a folder
    called `publish` in your `temp` folder on the `C:\` drive of your computer, then
    type in the following command, and press *Enter.* This will build and publish
    your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/B06434_11_16.png)'
  prefs: []
  type: TYPE_IMG
- en: Depending on what you called your ASP.NET Core application, the folder name
    under your `src` folder will be different to what mine is.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the app has been published you will see the published files along with
    all their dependencies in the output folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_17.png)'
  prefs: []
  type: TYPE_IMG
- en: Going back to Command Prompt, run the application by typing in `dotnet AspNetCore.dll`.
    Take note that if your ASP.NET Core application is called something else, the
    DLL you will run will be different from the example in the book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can now go to your browser and type in `http://localhost:5000`. This will
    display your ASP.NET Core application for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can do exactly the same on macOS by copying the published files to a folder
    and typing `dotnet AspNetCore.dll` in Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then in Safari on your Mac, type in `http://localhost:5000` and press *Enter.*
    This will load the site in Safari:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_11_33.png)'
  prefs: []
  type: TYPE_IMG
- en: While I have just shown Safari running on macOS as an alternative, the ASP.NET
    Core application will run happily on Linux too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Publishing the application to IIS is also easily done. In Visual Studio, right-click
    on the project in the Solution Explorer and click on Publish... from the context
    menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You then need to select a publish target. There are a few options available
    to you, but for this example, you need to select the File System option and click
    on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_21.png)'
  prefs: []
  type: TYPE_IMG
- en: Back in the publish screen you can modify additional settings by clicking on
    Settings... next to the Target Location path. Here you need to select the publishing
    to be done in Release mode. Finally, click on the Publish button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the app has been published, Visual Studio will display the results in
    the Output window along with the publish location you selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In your browser, if you enter `http://localhost` you will see the default page
    for IIS. This means that IIS is set up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Windows Explorer, browse to `C:\inetpub\wwwroot` and create a new folder
    called `netcore`. Copy the published files from your ASP.NET Core application
    into this new folder you created. In IIS, add a new website by right-clicking
    on the `Sites` folder and selecting Add Website. Give the site a name and select
    the path you copied the published files to in the Physical path setting. Lastly,
    change the Port to `86` as port `80` is used by the default website and click
    on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see your website added to the Sites folder in IIS. Under the Browse
    Website heading in the right-hand panel of IIS Manager, click on Browse *.86 (http):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will launch your ASP.NET Core application inside your default browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_11_30.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an ASP.NET Core application on Windows allows us to run the application
    on Windows, as well as macOS and Linux. Running it standalone is done easily via
    the `dotnet` command in Windows Command Prompt or in Terminal on macOS. This is
    what makes .NET Core so powerful for the future of application development. You
    can use the IDE you are used to in order to develop applications that are platform
    independent. There is a lot more to know surrounding .NET Core and you would really
    need to dig in to understand the concept and learn what it is capable of.
  prefs: []
  type: TYPE_NORMAL
