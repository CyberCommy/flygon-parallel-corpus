- en: Chapter 1.  Building a Twitter-Like Application Using the MVC Design Pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Model** **View** **Controller** (**MVC**) design pattern was very popular
    in the eighties in the software industry. This pattern helped so many engineers
    and companies to build better software for a while and is still useful nowadays
    with the rise of Node.js and some Node frameworks as **Express.js** (more information
    about Express.js and its API can be found at [http://expressjs.com/](http://expressjs.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the Express.js website says, it is "*Fast, unopinionated, minimalist web
    framework for Node.js.*"
  prefs: []
  type: TYPE_NORMAL
- en: Express.js is the most popular Node framework and many companies across the
    globe have adopted it. So in our first application, let's see how to apply the
    MVC pattern to create an application using only JavaScript at the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Node and Express framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC design pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with Yeoman generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Express generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deal with Express template engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB connection with Mongoose Schema
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First off, we need to install the most up-to-date Node.js version. At the time
    of writing this book, Node.js's latest update is *v6.3.0*. You can go to the Node.js
    website at [https://nodejs.org/en/](https://nodejs.org/en/) and choose your platform.
    For this book, we are using Mac OS X, but the examples can be followed on any
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the Node and **Node Package Manager** (**NPM**) version, open your
    terminal/shell and type these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_UL
  type: TYPE_PRE
- en: '[PRE1]'
  prefs:
  - PREF_UL
  type: TYPE_PRE
- en: The book uses Node version *6.3.0* and NPM version *3.10.3*
  prefs: []
  type: TYPE_NORMAL
- en: Installing Yeoman
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, we will use some tools that accelerate our development
    process. One of them is called **Yeoman** (more information can be found at [http://yeoman.io/](http://yeoman.io/)),
    a powerful web application generator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s install the generator. Open your terminal/shell and type the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Installing Express generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our first application, let's use the official Express generator. The generator
    helps us in creating the initial code of our application and we can modify it
    to fit into our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply type the following command in your terminal or shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `-g` flag means installing globally on your machine so that you
    can use it on any project.
  prefs: []
  type: TYPE_NORMAL
- en: Express is a powerful micro framework for Node.js; with it, it's possible to
    build web applications with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Building the baseline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project that will start now will be a fully server-side application. We
    will not use any interface framework such as AngularJS, Ember.js, and others;
    let's just concentrate on the express framework.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this application is to use all the express resources and middleware
    to create an application following the MVC design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: '**Middleware** is basically functions that are activated by the routing layer
    of express. The name refers to when a route is activated until its return (from
    start to end). Middleware is in the middle as the name suggests. It is important
    to remember that the functions are executed in the order in which they were added.'
  prefs: []
  type: TYPE_NORMAL
- en: In the code examples, we will be using  middleware including `cookie-parser`,
    `body-parser`, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can download the code used in this book directly from the book page present
    at Packt Publishing Website and you can also download this chapter and all others
    directly from GitHub at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/newaeonweb/nodejs-6-blueprints](https://github.com/newaeonweb/nodejs-6-blueprints).'
  prefs: []
  type: TYPE_NORMAL
- en: Each application is given the name of the relevant chapter, so let's dive into
    our code now.
  prefs: []
  type: TYPE_NORMAL
- en: First off, create a new folder called `chapter-01` on your machine. From now
    on, we will call this folder the root project folder. Before we move on and execute
    the command to start our project, we will see a few lines about the flags that
    we use with the `express` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command we use is `express --ejs --css sass -git`, where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`express` is the default command used to create an application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ejs` means to use the embedded JavaScript template engine, instead of **Jade**
    (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--css sass` means use **SASS** instead of plain **CSS** (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--git`: means to add a `.gitignore` file to the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As I'm using git for version control, it will be useful to use the express option
    to add a `.gitignore` file to my application. But I'll skip all git commands in
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check all the options available from the `express` framework, you can type
    this into your terminal/shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And the framework gives us all the commands available to start a project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open your terminal/shell and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output in the terminal/shell will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following screenshot, the generator is very flexible
    and only creates the minimum necessary structure to start a project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the baseline](img/image_01_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, we will make some changes before we proceed.
  prefs: []
  type: TYPE_NORMAL
- en: Adding changes to the package.json file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open `package.json` in the root project folder and add the following highlighted
    lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Even though it is not a high-priority alteration, it is considered a good practice
    to add this information to your project.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to run the project; let's install the necessary dependencies
    that are already listed in the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the terminal/shell, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: At the end, we are ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run the project and see the application in the browser, type the following
    command in your terminal/shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output in your terminal/shell will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can run just `npm start`, but you won't see the previous output with the
    port name; later in this chapter, we will fix it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, just check out `http://localhost:3000`. You'll see the welcome message
    from express.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the application's structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's make some changes to the structure of directories in our application and
    prepare it to follow the Model-View-Controller design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will list the necessary steps for this refactoring:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `root` project folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder called `server`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inside the `server` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder called `config`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new folder called `routes`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new folder called `views`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not worry about the `config` folder at this point; we will insert its contents
    later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to move the `error.js` and `index.js` files from the `chapter-01/views`
    folder to the `chapter-01/server/views` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `index.js` and `user.js` files from the `chapter-01/routes` folder
    to the `chapter-01/server/routes` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A very simple change here, but during the development process, it will be very
    useful to better organize all the files of our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We still need to change the path to this folder in the main application file,
    `app.js`. Open the `app.js` file from the project root folder and change the following
    highlighted lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we proceed, let''s change the welcome message from the `routes/index.js`
    file to the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the project and see the application in your browser, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following command in your terminal/shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Open your browser at `http://localhost:3000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The output in your browser will be as follows:![Changing the application's structure](img/image_01_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Application home screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can delete the folders and files from:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chapter-01/routes`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chapter-01/views`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '` error.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the default behavior to start the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, we will change the default initialization process of
    our application. To do this task, we will edit the `app.js` file and add a few
    lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `app.js` and add the following code after the `app.use(''/users'', users);`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It's a simple `middleware` to intercept *404* errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the following code after the `module.exports = app;` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `package.js` file at the root project folder and change the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The debug command is still available if necessary: `DEBUG=chapter-01:* npm
    start`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `package.json` file is a file of extreme importance in Node.js applications.
    It is possible to store all kinds of information for the project, such as dependencies,
    project description, authors, version, and many more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Furthermore, it is possible to set up scripts to minify, concatenate, test,
    build and deploy an application easily. We'll see more on how to create scripts
    in [Chapter 9](ch09.html "Chapter 9.  Building a Frontend Process with Node.js
    and NPM"), *Building a Frontend Process with Node.js and NPM*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s test the result; open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We will see the same output on the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Restructuring the views folder using partials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will make a major change to the structure of directories in the `views`
    folder: we will add an important **Embedded JavaScript** (**EJS**) resource for
    the creation of reusable files in our templates.'
  prefs: []
  type: TYPE_NORMAL
- en: They are known as partial files and will be included in our application using
    the `<% = include %>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about **EJS** on the official project page at:
    [http://ejs.co/](http://ejs.co/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `views` folder, we will create two more folders, called `partials`
    and `pages`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pages` folder will be as follows at this point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's move the files that were in the `views` folder to the `pages` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `pages` folder inside the `views` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `partials` folder inside the `views` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`server/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pages/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`partials/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we need to create the files that will be included in all templates. Note
    that we have just two templates: `index.js` and `error.js`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `stylesheet.ejs` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will use the latest version of the **Twitter Bootstrap** UI framework, which
    at the time this book is being written is in version *4.0.0-alpha*.
  prefs: []
  type: TYPE_NORMAL
- en: We are using a **Content** **Delivery** **Network** (**CDN**) for *CSS* and
    *JS* files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `javascript.ejs` and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a file called `header.ejs` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `footer.ejs` and add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s adjust the path for the view templates in our `app.js` file; add the
    following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we only added the `pages` folder path that already existed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will replace the code in `pages/index.ejs` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s do the same for the error view file at `pages/error.ejs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We currently have the following structure in our `server` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`server/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pages/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`partials/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`footer.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`header.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`javascript.ejs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stylesheet.ejs2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding templates for login, sign-up, and profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have a solid basis to move forward with the project. At this time, we
    will add some template files for login, sign-up, and profile screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected result for these pages will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding templates for login, sign-up, and profile](img/image_01_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Login screen
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding templates for login, sign-up, and profile](img/image_01_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sign-up screen
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding templates for login, sign-up, and profile](img/image_01_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Profile screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create the login template. Create a new file called `login.ejs`
    in the `views` folder and place the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the login route to `routes/index.js` after the index route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the template, we are making use of the `connect-flash` middleware to display
    error messages. Later, we will show how to install this component; don't worry
    right now.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add the `signup` template to the `views/pages` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file in `views/pages` and save as `signup.ejs`; then add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to add the route for the sign-up view. Open `routes/index.js` and
    add the following code right after `login route`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add the template to the `profile` page and the route to this
    page. Create a file called `profile.ejs` inside the `view/pages` folder and add
    this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to add the route for the profile view; open `routes/index.js` and
    add the following code right after the `signup` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are using another middleware called `gravatar`; later, we will show how to
    install it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing additional middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see in the previous sections, we used some middleware to display
    messages and the user icon using the gravatar. In this section, we will see how
    to install some very important modules for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Since we created templates for the `signin`, `signup`, and `profile` pages,
    we will need to store the users with login and password.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the middleware that we will use for this task, with the definition
    for each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Component | Description | More details |'
  prefs: []
  type: TYPE_TB
- en: '| `connect-flash` | User-friendly messages | [https://www.npmjs.com/package/connect-flash](https://www.npmjs.com/package/connect-flash)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `connect-mongo` | Drive to connect with MongoDB | [https://www.npmjs.com/package/connect-mongo](https://www.npmjs.com/package/connect-mongo)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `express-session` | Store user sessions in the DB | [https://www.npmjs.com/package/express-session](https://www.npmjs.com/package/express-session)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Gravatar` | Show a random user picture | [https://www.npmjs.com/package/gravatar](https://www.npmjs.com/package/gravatar)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Passport` | Authentication middleware | [https://www.npmjs.com/package/passport](https://www.npmjs.com/package/passport)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `passport-local` | Local user/password authentication | [https://www.npmjs.com/package/passport-local](https://www.npmjs.com/package/passport-local)
    |'
  prefs: []
  type: TYPE_TB
- en: 'Open your terminal/shell and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we can see, we will use MongoDB to store user data; you can find more information
    about MongoDB at [https://www.mongodb.org/](https://www.mongodb.org/), and the
    installation process at [https://docs.mongodb.org/manual/installation/](https://docs.mongodb.org/manual/installation/)
    . We assume that you already have MongoDB installed on your machine and it is
    running.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the app.js file with the new middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this time, we have to do a major restructuring of the `app.js` file to include
    the new middleware that we will use.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will show you step by step how to include each middleware and at the end,
    we will see the complete file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `app.js` and add the following lines before `var app = express()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple import process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines after `app.set(''view engine'', ''ejs'')`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using a `config.js` file in the first line; later we will create
    this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines after `app.use(express.static(path.join(__dirname,
    ''public'')))`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Adding config and passport files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, let''s create a `config` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside `server/config`, create a file called `config.js` and place the following
    code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file on `server/config` and name it `passport.js`. Add the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the fourth line, we are importing a file called `models`; we will
    create this file using Mongoose.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a models folder and adding a user schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a models folder inside `server/` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Protecting routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, we have enough code to configure secure access to our application.
    However, we still need to add a few more lines to the login and sign-up forms
    to make them work properly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `server/routes/index.js` and add the following lines after the `login
    GET` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Add these lines after the `signup GET` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add a simple function to check whether the user is logged in; at
    the end of `server/routes/index.js`, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a simple route to a logout function and add the following code after
    the `isLoggedIn()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The last change is to add `isloggedin()` as a second parameter to the profile
    route. Add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The final `index.js` file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We have almost everything set to finalize the application, but we still need
    to create a page for comments.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controllers folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of using the `routes` folder to create the route and functions of the
    comments file, we will use another format and create the `controllers` folder,
    where we can separate the route and the controller function, thus having a better
    modularization:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `controllers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `comments.js` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s import the controllers on the `app.js` file; add the following lines
    after `var users = require(''./server/routes/users'')`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the comments route after `app.use(''/users'', users)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `comments.ejs` at `server/pages` and add the following
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using a simple Modal component from Twitter-bootstrap for the
    addition of comments, as shown in the following screenshot:![Creating the controllers
    folder](img/image_01_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Model for the create comments screen
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to create a model for the comments; let''s create a file named
    `comments.js` at `server/models/` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Running the application and adding comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it''s time to test whether everything is working properly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell at the root project folder and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Check your browser at: `http://localhost:3000`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `http://localhost:3000/signup` and create a user called `John Doe` with
    the e-mail ID as `john@doe.com` and password as `123456`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:3000/comments`, click on the **create comment** button
    and add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot illustrates the final result:![Running the application
    and adding comments](img/image_01_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comments screen
  prefs: []
  type: TYPE_NORMAL
- en: Checking the error messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's check the flash-connect messages. Go to `http://localhost:3000/login`
    and try to log in as a user; we will use `martin@tech.com` with password `123`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the error messages](img/image_01_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Error message on the login screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we try to sign up with an already registered user. Go to `http://localhost:3000/signup`
    and place the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'This screenshot illustrates the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the error messages](img/image_01_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Error message on signup screen
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how to create MVC applications using Node.js and
    the express framework, with an application fully on the server side-something
    very similar to applications created with the **Rails** or **Django** framework.
  prefs: []
  type: TYPE_NORMAL
- en: We also built safe routes and a very robust authentication with session control,
    storage of session cookies, and encrypted passwords.
  prefs: []
  type: TYPE_NORMAL
- en: We used MongoDB to store the data of users and comments.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to use another database system with express
    and Node.js.
  prefs: []
  type: TYPE_NORMAL
