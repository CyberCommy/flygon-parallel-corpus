- en: Chapter 2. Network Exploration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter shows you how to do some things that in many situations might be
    illegal, unethical, a violation of the terms of service, or just not a good idea.
    It is provided here to give you information that may be of use to protect yourself
    against threats and make your own system more secure. Before following these instructions,
    be sure you are on the right side of the legal and ethical line... use your powers
    for good!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering hosts with TCP SYN ping scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts with TCP ACK ping scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts with UDP ping scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts with ICMP ping scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts with IP protocol ping scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts with ARP ping scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts using broadcast pings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding our traffic with additional random data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forcing DNS resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excluding hosts from your scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning IPv6 addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gathering network information with broadcast scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In recent years, Nmap has become the de facto tool for **network exploration**,
    leaving all other scanners far behind. Its popularity comes from having a vast
    number of features that are useful to penetration testers and system administrators.
    It supports several ping and port scanning techniques applied to host and service
    discovery, correspondingly.
  prefs: []
  type: TYPE_NORMAL
- en: Hosts protected by packet filtering systems, such as firewalls or intrusion
    prevention systems sometimes cause incorrect results because of rules that are
    used to block certain types of traffic. The flexibility provided by Nmap in these
    cases is invaluable, since we can easily try an alternate host discovery technique
    (or a combination of them) to overcome these limitations. Nmap also includes a
    few very interesting features to make our traffic less suspicious. For this reason,
    learning how to combine these features is essential if you want to perform really
    comprehensive scans.
  prefs: []
  type: TYPE_NORMAL
- en: System administrators will gain an understanding of the inner workings of different
    scanning techniques, and hopefully motivate them to harden their traffic filtering
    rules to make their hosts more secure.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces the supported **ping scanning techniques**—TCP SYN,
    TCP ACK, UDP, IP, ICMP, and broadcast. Other useful tricks are also described,
    including how to force DNS resolution, randomize a host order, append random data,
    and scan IPv6 addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to also visit the reference guide for host discovery, hosted at
    [http://nmap.org/book/man-host-discovery.html](http://nmap.org/book/man-host-discovery.html).
  prefs: []
  type: TYPE_NORMAL
- en: Discovering hosts with TCP SYN ping scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ping scans** are used for detecting live hosts in networks. Nmap''s default
    ping scan (`-sP`) uses a TCP ACK and an ICMP echo request to determine if a host
    is responding, but if a firewall is blocking these requests, we will miss this
    host. Fortunately, Nmap supports a scanning technique called the TCP SYN ping
    scan that is very handy in these situations, where system administrators could
    have been more flexible with other firewall rules.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will talk about the TCP SYN ping scan and its related options.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the list of hosts found using the TCP SYN ping scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-sP` tells Nmap to perform a ping scan, which only consists of
    discovering online hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The flag `-PS` forces a TCP SYN ping scan. This type of ping scan works in
    the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: Nmap sends a TCP SYN packet to port 80.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the port is closed, the host responds with an RST packet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the port is open, the host responds with a TCP SYN/ACK packet indicating
    that a connection can be established. Afterwards, an RST packet is sent to reset
    this connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CIDR `/24` in `192.168.1.1/24` is used to indicate that we want to scan
    all of the 256 IPs in our private network.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's launch a ping scan against a host that does not respond to ICMP requests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The host is marked as offline, but let''s try to force a TCP SYN ping scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This time we discovered that this particular host was indeed online, but behind
    a system filtering TCP ACK or ICMP echo requests.
  prefs: []
  type: TYPE_NORMAL
- en: Privileged versus unprivileged TCP SYN ping scan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Running a TCP SYN ping scan as an unprivileged user who can't send raw packets
    makes Nmap use the system call `connect()` to send the TCP SYN packet. In this
    case, Nmap distinguishes a SYN/ACK packet when the function returns successfully,
    and an RST packet when it receives an ECONNREFUSED error message.
  prefs: []
  type: TYPE_NORMAL
- en: Firewalls and traffic filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'During a TCP SYN ping scan, Nmap uses the SYN/ACK and RST responses to determine
    if the host is responding. It is important to note that there are firewalls configured
    to drop RST packets. In this case, the TCP SYN ping scan will fail unless we specify
    an open port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set the port list to be used with `-PS` (port list or range) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP ACK ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with UDP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ICMP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with IP protocol ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ARP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts using broadcast pings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering stateful firewalls by using a TCP ACK scan* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts with TCP ACK ping scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the TCP SYN ping scan, the TCP ACK ping scan is used to determine
    if a host is responding. It can be used to detect hosts that block SYN packets
    or ICMP echo requests, but it will most likely be blocked by modern firewalls
    that track connection states.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe shows how to perform a TCP ACK ping scan and its related
    options.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A TCP ACK ping scan works in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: Nmap sends an empty TCP packet with the ACK flag set to port 80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the host is offline, it should not respond to this request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the host is online, it returns an RST packet, since the connection does not
    exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to understand that there will be cases when this technique will
    not work. Let's launch a TCP ACK ping scan against one of these hosts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The host is shown as offline, but let's try a TCP SYN ping scan with the same
    host.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We discovered that the host was online, but blocking thos ACK packets.
  prefs: []
  type: TYPE_NORMAL
- en: Privileged versus unprivileged TCP ACK ping scan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TCP ACK ping scans need to run as a privileged user, otherwise a system call
    `connect()` is used to send an empty TCP SYN packet. Hence, TCP ACK ping scans
    will not use the TCP ACK technique, previously discussed, as an unprivileged user,
    and it will perform a TCP SYN ping scan instead.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting ports in TCP ACK ping scans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Additionally, you can select the ports to be probed using this technique, by
    listing them after the flag `-PA`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP SYN ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with UDP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ICMP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with IP protocol ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ARP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts using broadcast pings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering stateful firewalls by using a TCP ACK scan* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts with UDP ping scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ping scans are used to determine if a host is responding and can be considered
    online. UDP ping scans have the advantage of being capable of detecting systems
    behind firewalls with strict TCP filtering leaving the UDP traffic forgotten.
  prefs: []
  type: TYPE_NORMAL
- en: This next recipe describes how to perform a UDP ping scan with Nmap and its
    related options.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Nmap will determine if `<target>` is reachable by using this technique.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The technique used by a UDP ping scan works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Nmap sends an empty UDP packet to ports 31 and 338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the host is responding, it should return an ICMP port unreachable error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the host is offline, various ICMP error messages could be returned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Services that do not respond to empty UDP packets will generate false positives
    when probed. These services will simply ignore the UDP packets, and the host will
    be incorrectly marked as offline. Therefore, it is important that we select ports
    that are likely to be closed.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting ports in UDP ping scans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To specify the ports to be probed, add them after the flag `-PU`, `as follows`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP SYN ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP ACK ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ICMP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with IP protocol ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ARP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts using broadcast pings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering stateful firewalls by using a TCP ACK scan* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts with ICMP ping scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ping scans are used to determine if a host is online and responding. ICMP messages
    are used for this purpose, and hence ICMP ping scans use these types of packets
    to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe describes how to perform an ICMP ping scan with Nmap, and
    the flags for the different types of ICMP messages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make an ICMP echo request, open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If the host responded, you should see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The arguments `-sP -PE scanme.nmap.org` tell Nmap to send an ICMP echo request
    packet to the host `scanme.nmap.org`. We can determine that a host is online if
    we receive an ICMP echo reply to this probe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unfortunately, ICMP has been around for a pretty long time, and remote ICMP
    packets are now usually blocked by system administrators. However, it is still
    a useful ping technique for monitoring local networks.
  prefs: []
  type: TYPE_NORMAL
- en: ICMP types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are other ICMP messages that can be used for host discovery, and Nmap
    supports the ICMP timestamp reply (`-PP`) and address mark reply (`-PM`). These
    variants could bypass misconfigured firewalls, which only block ICMP echo requests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP SYN ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP ACK ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with UDP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with IP protocol ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ARP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts using broadcast pings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering stateful firewalls by using a TCP ACK scan* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts with IP protocol ping scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ping sweeps are very important for host discovery. System administrators and
    penetration testers use them to determine which hosts are online and responding.
    Nmap implements several ping scanning techniques, including one called an IP protocol
    ping scan. This technique tries sending different packets using different IP protocols,
    hoping to get a response indicating that a host is online.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to perform IP protocol ping scans.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If the host responded to any of the requests, you should see something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The arguments `-sP -PO scanme.nmap.org` tell Nmap to perform an IP protocol
    ping scan of the host `scanme.nmap.org`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, this ping scan will use the protocols IGMP, IP-in-IP, and ICMP
    to try to obtain a response that will indicate that the host is online. Using
    `--packet-trace` will show more details of what happened behind the curtains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The three lines marked as `SENT` show the ICMP, IGMP, and IP-in-IP packets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Out of those three, only ICMP responded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: However, this was enough to reveal that this host is online.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also set the IP protocols to be used by listing them after the option
    `-PO`. For example, to use the protocols ICMP (Protocol number 1), IGMP (Protocol
    number 2), and UDP (Protocol number 17) the following command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the packets sent using this technique will be empty. Remember that you
    can generate random data to be used with these packets, with the option `--data-length`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Supported IP protocols and their payloads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The protocols that set all its protocol headers, when used, are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'TCP: Protocol number 6'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UDP: Protocol number 17'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ICMP: Protocol number 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IGMP: Protocol number 2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For any of the other IP protocols, a packet with only the IP header will be
    sent.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP SYN ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP ACK ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with UDP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts ICMP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ARP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts using broadcast pings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering stateful firewalls by using a TCP ACK scan* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts with ARP ping scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ping scans are used by penetration testers and system administrators to determine
    if hosts are online. ARP ping scans are the most effective wayof detecting hosts
    in LAN networks.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap really shines by using its own algorithm to optimize this scanning technique.
    The following recipe goes through the process of launching an ARP ping scan and
    its available options.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your favorite terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the list of hosts that responded to the ARP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The arguments `-sP -PR 192.168.1.1/24` make Nmap initiate an ARP ping scan of
    all if the 256 IPs (CIDR /24) in this private network.
  prefs: []
  type: TYPE_NORMAL
- en: '**ARP ping scanning** works in a pretty simple way:'
  prefs: []
  type: TYPE_NORMAL
- en: ARP requests are sent to the target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the host responds with an ARP reply, it is pretty clear it's online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To send an ARP request, following command is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the ARP requests at the beginning of the scan output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The ARP reply reveals that host `192.168.1.254` is online and has the MAC address
    `5C:4C:A9:F2:DC:7C`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every time Nmap scans a private address, an ARP request needs to be made inevitably,
    because we need the target''s destination before sending any probes. Since the
    ARP replies reveal that a host is online, no further testing actually needs to
    be done after this step. This is the reason why Nmap automatically uses this technique
    every time you perform a ping scan in a private LAN network, no matter what arguments
    were passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To force Nmap to not perform an ARP ping scan when scanning a private address,
    use the option `--send-ip`. This will produce output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: MAC address spoofing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is possible to spoof your MAC address while performing an ARP ping scan.
    Use `--spoof-mac` to set a new MAC address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP SYN ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP ACK ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with UDP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ICMP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with IP protocol ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts using broadcast pings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering stateful firewalls by using a TCP ACK scan* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hosts using broadcast pings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Broadcast pings** send ICMP echo requests to the local broadcast address,
    and even if they do not work all the time, they are a nice way of discovering
    hosts in a network without sending probes to the other hsts.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to discover new hosts with a broadcast ping using
    Nmap NSE.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the list of hosts that responded to the broadcast ping:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A broadcast ping works by sending an ICMP echo request to the local broadcast
    address `255.255.255.255`, and then waiting for hosts to reply with an ICMP echo
    reply. It produce output similar to the following:.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To increase the number of ICMP echo requests, use the script argument `broadcast-ping.num_probes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: When scanning large networks, it might be useful to increase the timeout limit,
    by using `--script-args broadcast-ping.timeout=<time in ms>`, to avoid missing
    hosts with bad latency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: You can specify the network interface by using `broadcast-ping.interface`. If
    you don't specify an interface, `broadcast-ping` will send probes using all of
    the interfaces with an IPv4 address.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Target library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The argument `--script-args=newtargets` forces Nmap to use these new-found
    hosts as targets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note that we did not specify a target, but the `newtargets` argument still added
    the IPs `192.168.1.106` and `192.168.1.105` to the scanning queue anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 'The argument `max-newtargets` sets the maximum number of hosts to be added
    to the scanning queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP SYN ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with TCP ACK ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with UDP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ICMP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with IP protocol ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hosts with ARP ping scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering stateful firewalls by using a TCP ACK scan* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding our traffic with additional random data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Packets generated by Nmap scans usually just have the protocol headers set and,
    only in certain cases, include specific payloads. Nmap implements a feature to
    decrease the likelihood of detecting these known probes, by using random data
    as payloads.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to send additional random data in packets sent by
    Nmap during a scan.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To append 300 bytes of random data, open your terminal and type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `--data-length <# of bytes>` tells Nmap to generate random bytes
    and append them as data in the requests.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the scanning techniques are supported in this method, but it is important
    to note that using this argument slows down a scan since we need to transmit more
    data with each request.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, a packet generated by a default Nmap scan, and
    another one where we used the argument `--data-length`, are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7485_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Setting the argument `--data-length` to `0` will force Nmap to not use any
    payloads in the requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Scanning using specific port ranges* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Forcing DNS resolutions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Excluding hosts from your scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe in [Chapter 7](ch07.html
    "Chapter 7. Scanning Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting timing parameters* recipe in [Chapter 7](ch07.html "Chapter 7. Scanning
    Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting the correct timing template* recipe in [Chapter 7](ch07.html
    "Chapter 7. Scanning Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forcing DNS resolution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS names reveal valuable information very often because system administrators
    name their hosts according to their functions, such as `firewall` or `mail.domain.com`.
    Nmap, by default, does not perform DNS resolution if a host is offline. By forcing
    DNS resolution, we can gather extra information about the network even if the
    host seemed to be offline.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to force DNS resolution for offline hosts during Nmap
    scans.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This command will force DNS resolution for offline hosts in the range `XX.XXX.XXX.220-230`.
  prefs: []
  type: TYPE_NORMAL
- en: Consider using a list scan, which will also perform DNS resolution, respectively
    `–sL`.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, a list scan will do that. What I'm trying to convey here is that you can
    include DNS information of hosts that are down during a port scan or when running
    an NSE script.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The arguments `-sS -PS -F -R` tell Nmap to perform a TCP SYN Stealth (`-sS`),
    SYN ping (`-PS`), fast port scan (`-F`), and always perform DNS resolution (`-R`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we want to scan the two IPs surrounding the domain `0xdeadbeefcafe.com`
    with IP `XX.XXX.XXX.223`, the following command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: In this case, a quick scan has told us that this is probably a VPS hosted by
    Linode and is the location of their mail server as well.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also disable DNS resolution completely with the argument `-n`. This
    speeds up scans and is very recommended if you don't need to DNS resolve a host.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Specifying different DNS nameservers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For DNS resolution, Nmap by default queries your system''s DNS server. Alternative
    DNS nameservers can be set with the argument `--dns-servers`. For example, to
    use Google''s open DNS servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Hiding our traffic with additional random data* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using specific port ranges* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Excluding hosts from yours scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe in [Chapter 7](ch07.html
    "Chapter 7. Scanning Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting timing parameters* recipe in [Chapter 7](ch07.html "Chapter 7. Scanning
    Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting the correct timing template* recipe in [Chapter 7](ch07.html
    "Chapter 7. Scanning Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excluding hosts from your scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be situations where **host exclusion** is necessary to avoid scanning
    certain machines. For example, you may lack the authorization, or it may be that
    the host has already been scanned and you want to save some time. Nmap implements
    an option to exclude a host or list of hosts to help you in these cases.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to exclude hosts from your Nmap scans.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the scan results of all the available hosts in the private network
    `192.168.1.1-255`, excluding the IPs `192.168.1.254` and `192.168.1.102`, as shown
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The arguments `-sV -O --exclude 192.168.1.102,192.168.1.254 192.168.1.1/1` tell
    Nmap to perform a service detection scan (`-sV`) with an OS fingerprinting (`-O`)
    of all the 256 IPs (`192.168.1.1/24`) in this private network, excluding the machines
    with the IPs `192.168.102` and `192.168.1.254` (`--exclude 192.168.1.102,192.168.1.254`),
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The argument `--exclude` also support IP ranges, as shown in the following
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Excluding a host list from your scans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap also supports the argument `--exclude-file <filename>` in order to exclude
    the targets listed in `<filename>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Hiding our traffic with additional random data* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Forcing DNS resolution* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Gathering network information with broadcast scripts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using specific port ranges* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Excluding hosts from yours scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe in [Chapter 7](ch07.html
    "Chapter 7. Scanning Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting timing parameters* recipe in [Chapter 7](ch07.html "Chapter 7. Scanning
    Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting the correct timing template* recipe in [Chapter 7](ch07.html
    "Chapter 7. Scanning Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning IPv6 addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we haven't exhausted all if the IPv4 addresses as some people predicted,
    IPv6 addresses are becoming more common, and the Nmap development team has been
    working hard on improving its IPv6 support. All of the port scanning and host
    discovery techniques have been implemented already, and this makes Nmap essential
    when working with IPv6 networks.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to scan an IPv6 address with Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s scan the IPv6 address representing the localhost (`::1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The results look like a regular Nmap scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-6` tells Nmap to perform IPv6 scanning. You can basically set
    any other flag in combination with `-6`. It supports scanning techniques using
    raw packets, service detection, TCP port and ping scanning, and the Nmap scripting
    engine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When performing IPv6 scanning, remember that you can use hostnames and IPv6
    addresses as targets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: OS detection in IPv6 scanning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'OS detection for IPv6 addresses works in a similar way to that for IPv4; probes
    are sent and matched against a fingerprint database. The probes sent are listed
    at [http://nmap.org/book/osdetect-ipv6-methods.html](http://nmap.org/book/osdetect-ipv6-methods.html).
    You can enable OS detection in IPv6 scans with the option `-O`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: OS detection was added very recently, and you can help by sending fingerprints
    for the Nmap's database used for the detection algorithms. The procedure to submit
    new IPv6 fingerprints is described by Luis Martin Garcia at [http://seclists.org/nmap-dev/2011/q3/21](http://seclists.org/nmap-dev/2011/q3/21).
    Knowing how fast the Nmap team works, I know it will be ready soon.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Hiding our traffic with additional random data* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Forcing DNS resolution* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Excluding hosts from yours scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Gathering network information with broadcast scripts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using specific port ranges* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe in [Chapter 7](ch07.html
    "Chapter 7. Scanning Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting timing parameters* recipe in [Chapter 7](ch07.html "Chapter 7. Scanning
    Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting the correct timing template* recipe in [Chapter 7](ch07.html
    "Chapter 7. Scanning Large Networks"), *Scanning Large Networks*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gathering network information with broadcast scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Broadcast requests often reveal protocol and host details, and with some help
    from the Nmap Scripting Engine, we can gather valuable information from a network.
    **NSE broadcast scripts** perform tasks such as detecting dropbox listeners, sniffing
    to detect hosts, and discovering MS SQL and NCP servers, among many other things.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to use the NSE broadcast scripts to collect interesting
    information from a network.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that broadcast scripts can run without setting a specific target. All
    the NSE scripts that found information will be included in your scan results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `--script broadcast` tells Nmap to initialize all of the NSE scripts
    in the broadcast category. This category contains scripts that use broadcast requests,
    which means that no probes are sent directly to the targes.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment that this was being written, there were 18 broadcast scripts
    available. Let''s look at the script descriptions, taken from Nmap''s official
    documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`broadcast-avahi-dos`: This script attempts to discover hosts in the local
    network by using the DNS Service Discovery protocol, and sends a NULL UDP packet
    to each host to test if it is vulnerable to the Avahi NULL UDP packet denial of
    service (CVE-2011-1002).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-db2-discover`: This script attempts to discover DB2 servers on the
    network by sending a broadcast request to port `523/udp.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-dhcp-discover`: This script sends a DHCP request to the broadcast
    address (255.255.255.255) and reports the results. It uses a static MAC address
    (DE:AD:CO:DE:CA:FE) while doing so, in order to prevent scope exhaustion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-dns-service-discovery`: This script attempts to discover hosts''
    services by using the DNS Service Discovery protocol. It sends a multicast DNS-SD
    query and collects all of the responses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-dropbox-listener`: This script listens for the LAN sync information
    broadcasts that the [Dropbox.com](http://Dropbox.com) client broadcasts every
    20 seconds, then prints all of the discovered client IP addresses, port numbers,
    version numbers, display names, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-listener`: This script sniffs the network for incoming broadcast
    communication and attempts to decode the received packets. It supports protocols
    such as CDP, HSRP, Spotify, DropBox, DHCP, ARP, and a few more. See `packetdecoders.lua`
    for more information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-ms-sql-discover`: This script discovers Microsoft SQL servers in
    the same broadast domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-netbios-master-browser`: This script attempts to discover master
    browsers and the domains they manage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-novell-locate`: This script attempts to use the Service Location
    Protocol to discover **Novell NetWare Core Protocol** **(NCP)** servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-ping`: This script sends broadcast pings to a selected interface
    by using raw Ethernet packets, and outputs the responding hosts'' IP and MAC addresses
    or (if requested) adds them as targets. Root privileges on Unix are required to
    run this script since it uses raw sockets. Most operating systems don''t respond
    to broadcast-ping probes, but they can be configured to do so.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-rip-discover`: This script discovers devices and routing information
    for devices running RIPv2 on the LAN. It does so by sending a RIPv2 Request command
    and collects the responses from all devices responding to the request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-upnp-info`: This script attempts to extract system information from
    the UPnP service by sending a multicast query, then collecting, parsing, and displaying
    all responses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`broadcast-wsdd-discover`: This script uses a multicast query to discover devices
    supporting the Web Services Dynamic Discovery (WS-Discovery) protocol. It also
    attempts to locate any published **Windows Communication Framework (WCF)** web
    services (.NET 4.0 or later).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lltd-discovery`: This script uses the Microsoft LLTD protocol to discover
    hosts on a local network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`targets-ipv6-multicast-echo`: This script sends an ICMPv6 echo request packet
    to the all-nodes, link-local multicast address (`ff02::1`), to discover responsive
    hosts on a LAN without needing to individually ping each IPv6 address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`targets-ipv6-multicast-invalid-dst`: This script sends an ICMPv6 packet with
    an invalid extension header to the all-nodes, link-local multicast address (`ff02::1`),
    to discover (some) available hosts on the LAN. This works because some hosts will
    respond to this probe with an ICMPv6 Parameter Problem packet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`targets-ipv6-multicast-slaac`: This script performs IPv6 host discovery by
    triggering **Stateless address au****o-configuration (SLAAC)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`targets-sniffer`: This script sniffs the local network for a considerable
    amount of time (10 seconds by default) and prints discovered addresses. If the
    `newtargets` script argument is set, the discovered addresses are added to the
    scan queue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider that each script has a set of arguments available that sometimes need
    to be tweaked. For example, `targets-sniffer` sniffs the network for only 10 seconds,
    which might not be enough for a large network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the broadcast category has some very nifty NSE scripts that
    are worth checking out. You can learn more about specific arguments for a broadcast
    script at [http://nmap.org/nsedoc/categories/broadcast.html](http://nmap.org/nsedoc/categories/broadcast.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember that NSE scripts can be selected by category, expression, or folder.
    Thus, we could call all broadcast scripts excluding the ones named `targets-*`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Target library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The argument `--script-args=newtargets` forces Nmap to use these new-found
    hosts as targets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Note that we did not specify a target, but the `newtargets` argument added the
    IPs `192.168.1.106` and `192.168.1.105` to the scanning queue anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 'The argument `max-newtargets` sets the maximum number of hosts to be added
    to the scanning queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Discovering hosts using broadcast pings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Forcing DNS resolution* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering host names pointing to the same IP address* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Geo-locating an IP address* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding live hosts in your network* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting services of a remote host* recipe in [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running NSE scripts* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap Fundamentals"),
    *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
