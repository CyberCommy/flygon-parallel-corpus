- en: '*Chapter 4*: Learning the Major Nodes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the major nodes used in Node-RED. Node-RED,
    which is an open source project, provides some major nodes by default, but it
    is possible to import and use nodes from the public library as required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node-RED has a lot of nodes. Therefore, this book is not sufficient to explain
    all of them. So, in this chapter, let''s pick up the main nodes and most commonly
    used basic nodes and learn how to use them, exploring these topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a node?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting various nodes from the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have mastered how to use major nodes in
    the Node-RED flow editor.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To progress in this chapter, you will need the following technical requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED (v1.1.0 or above).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code used in this chapter can be found in `Chapter04` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a node?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's first understand what exactly a node is in Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED is a tool for programming Node.js applications with **Graphical User
    Interface** (**GUI**) tools. Node-RED also serves as an environment for executing
    software (Node-RED Flow) programmed on Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, when programming with Node.js, the source code is written with a code
    editor or **Integrated Development Environment** (**IDE**). An executable file
    is generated by building the written source code (compiling, associating with
    dependency files, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Visual programming on Node-RED basically follows the same process. The difference
    is that the coding part is the act of placing the node on Node-RED instead of
    the editor.
  prefs: []
  type: TYPE_NORMAL
- en: In Node-RED, the basic processing used when programming with Node.js is provided
    by implemented parts called nodes. In normal object-oriented programming, these
    parts may often be provided as library files in the form of common parts.
  prefs: []
  type: TYPE_NORMAL
- en: Since Node-RED is a GUI-based visual programming tool, these common parts are
    more than just library files. These common parts are shaped like boxes and are
    called nodes in Node-RED. Also, except for some nodes, generally nodes can set
    the things that can be variables (arguments, parameters, and so on) as node properties
    when programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words, since there are already programmed parts (nodes), programming
    is completed simply by placing them in the GUI. The following figure compares
    pure Node.js programming with flow creation in Node-RED:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Node-RED versus Node.js programming'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.1_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Node-RED versus Node.js programming
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand the concepts of Node-RED and nodes, let's take a closer
    look at nodes.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see when you start Node-RED, the basic processing nodes are provided
    in the Node-RED flow editor by default. This is called a **pre-installed node**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are typical categories of pre-installed nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Common**: This includes nodes that inject specific data into the flow, nodes
    that judge the processing status, and nodes that output logs for debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function**: This includes nodes that can write directly in JavaScript and
    HTML, nodes that convert parameter variables, and nodes that make conditional
    branches depending on the contents of those parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network**: This includes nodes that handle the protocol processing required
    for communication, such as MQTT, HTTP, and WebSockets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, the examples given here are just a few. There are actually many more
    categories and nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'The pre-installed nodes also depend on the Node-RED version. It''s a good idea
    to check the official documentation for information on your Node-RED version:
    [https://nodered.org/docs/](https://nodered.org/docs/).'
  prefs: []
  type: TYPE_NORMAL
- en: Nodes are arranged like parts on the Node-RED flow editor and can be used simply
    by connecting up the wiring. As mentioned earlier, you don't have to code it yourself,
    except for some nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, the flow editor has the appearance of a box and has a settings window
    inside it. In the settings window, you can set the required parameters and configurations
    for each node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Nodes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.2_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Nodes
  prefs: []
  type: TYPE_NORMAL
- en: That's all the concepts you need to know about nodes. In the next section, you
    will learn how to actually use nodes.
  prefs: []
  type: TYPE_NORMAL
- en: How to use nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to use nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Visual programming in Node-RED is a little different from other visual programming
    tools because it uses flow-based programming. But rest assured, it's not difficult
    at all. If you actually create a few simple flows, you should be able to master
    how to use nodes in Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's now create a sample flow using some typical preinstalled nodes. The
    environment is the same for Raspberry Pi, Windows, and macOS systems. Please use
    your favorite environment.
  prefs: []
  type: TYPE_NORMAL
- en: Common category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's introduce the nodes that we'll use to make our flow. You can pick all
    of the nodes up and place them on the palette from the common category.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a sample flow with nodes in the common category. The following four
    nodes are used:'
  prefs: []
  type: TYPE_NORMAL
- en: The **inject** node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **complete** node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **catch** node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **debug** node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Place and wire up the nodes as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – The flow with our common category nodes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.3_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – The flow with our common category nodes
  prefs: []
  type: TYPE_NORMAL
- en: 'The data in the **inject** node is simple JSON data here. Double-click the
    placed **inject** node to open the settings panel and set the JSON data. Please
    refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can change the JSON data in the **inject** node for what you want to send.
    Also, you should set the properties for the **complete** node. Open the settings
    panel and set a node to watch the status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set each node''s parameters as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `msg.payload` with the following JSON:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set any value here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – An inject node for inserting data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.4_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – An inject node for inserting data
  prefs: []
  type: TYPE_NORMAL
- en: 'The **complete** node:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check the first option of the **Properties** tab to watch the status of the
    **inject** node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – A complete node for watching the status'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.5_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – A complete node for watching the status
  prefs: []
  type: TYPE_NORMAL
- en: No properties of other nodes need to be changed.
  prefs: []
  type: TYPE_NORMAL
- en: After the setting changes, you need to deploy and click the button of the **inject**
    node. After that, you can see the JSON data in the right-hand panel of the **debug**
    tab.
  prefs: []
  type: TYPE_NORMAL
- en: You can get the flow definition from the book's GitHub repo at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/common-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/common-flows.json).
  prefs: []
  type: TYPE_NORMAL
- en: Function category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn how to use some major nodes from the function
    category, and will make a flow with these nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a sample flow using the nodes in the function category. Here, we will
    use the following six nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: The **inject** node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **function** node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **switch** node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **change** node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **template** node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **debug** node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Place and wire the nodes as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – The flow with function category nodes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.6_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – The flow with function category nodes
  prefs: []
  type: TYPE_NORMAL
- en: 'Please follow these steps to make the flow:'
  prefs: []
  type: TYPE_NORMAL
- en: Place the **inject** node and **debug** node on the palette. These two nodes
    can be used with their default parameters. No change of settings is required here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place a **function** node on the palette.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the settings panel of the **function** node and enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After coding, click on **Done** to save the settings:![Figure 4.7 – Function
    node settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_4.7_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Function node settings
  prefs: []
  type: TYPE_NORMAL
- en: Place the `6`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `5`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – The switch node settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.8_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – The switch node settings
  prefs: []
  type: TYPE_NORMAL
- en: If the input parameter is `5` or less, the output route is `1`, and if the input
    parameter is `6` or more, the output route is `2`. This means that the next node
    depends on the number of input parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Place two **template** nodes on the palette.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous function was the **switch** node, so the data splits depending
    on the result of the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the settings panel of each `1` of the **switch** node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The **template** node will look something like the following screenshot once
    we add the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – The first template node settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.9_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – The first template node settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code for the second `2` of the **switch** node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It will look something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – The second template node settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.10_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – The second template node settings
  prefs: []
  type: TYPE_NORMAL
- en: Place the **change** node on the palette, open the settings panel of the **change**
    node, and look at the settings box below **Rules**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **string** from the drop-down menu in the box next to **to** and enter
    the desired character string in the text box next to this. Here, it says **It
    has been changed to string data!**. Please refer to the following screenshot:![Figure
    4.11 – The change node settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_4.11_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.11 – The change node settings
  prefs: []
  type: TYPE_NORMAL
- en: After changing the settings, you need to deploy and click the button of the
    **inject** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you do this, you can see the data in the debug tab in the right-hand panel,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Showing the results in the debug tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.12_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – Showing the results in the debug tab
  prefs: []
  type: TYPE_NORMAL
- en: The first debug message is the default **inject** node value as a timestamp.
    The second one is the debug message of the **debug** node placed after the **change**
    node. The last one depends on the random number and is formatted by the **template**
    node.
  prefs: []
  type: TYPE_NORMAL
- en: You can get the flow definition from the book's GitHub repo at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/function-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter04/function-flows.json).
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's learn about nodes that are not provided by default.
  prefs: []
  type: TYPE_NORMAL
- en: Getting several nodes from the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can get several more attractive nodes that have been developed by Node-RED
    contributors and install them in your Node-RED flow editor. You can find new nodes,
    share your flows, and see what other people have done with Node-RED. In this section,
    we will learn how to get several other nodes from the Node-RED library. Let''s
    first access the Node-RED library site: [https://flows.nodered.org/](https://flows.nodered.org/).
    In the following screenshot, you can see how the Node-RED library looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Node-RED Library'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.13_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – Node-RED Library
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s easy to use this library in your own Node-RED environment''s flow editor.
    Let''s see how to install a node from the library:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Manage palette** from the sidebar menu. You will see the **User Settings**
    panel open with the **Palette** tab selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `watson` in the search field, or the name of any other node you want to
    use. If you find the node you want, click the **Install** button:![Figure 4.14
    – Opening the User Settings panel and finding the node you want to use
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_4.14_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.14 – Opening the User Settings panel and finding the node you want
    to use
  prefs: []
  type: TYPE_NORMAL
- en: After clicking on the **Install** button, a pop-up window will appear, on which
    you will need to click on **Install** once again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you do this and the installation has completed, you will get a pop-up message
    saying **Nodes added to palette**.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s all! You can see all the nodes you have installed in your palette as
    shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.15 – Nodes you have installed are added to your palette'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.15_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.15 – Nodes you have installed are added to your palette
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can search for useful nodes on the Node-RED Library website. It''s possible
    to search by keywords, and sort the results in terms of most recently added, number
    of downloads, and ratings. I recommend sorting by number of downloads first because
    nodes that have been downloaded by lots of developers are likely to be very useful:
    [https://flows.nodered.org/search?type=node&sort=downloads](https://flows.nodered.org/search?type=node&sort=downloads).'
  prefs: []
  type: TYPE_NORMAL
- en: Now you have become a great Node-RED user and have mastered how to use the Node-RED
    flow editor to make some flows (applications).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've learned how to use each major node in the Node-RED flow
    editor. You have successfully made your Node-RED flows! The flow steps you've
    created here are most of the steps you will need to do to create various flows
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: The important point learned in this chapter is that each node has its own unique
    features. By combining these like a puzzle, we can create an application similar
    to one made through regular programming just by creating a flow.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, let's create a more practical sample flow (application)
    for IoT edge devices.
  prefs: []
  type: TYPE_NORMAL
