- en: The Benefits of TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript enables you to write JavaScript code. It includes static typing and
    other features that are very common in object-oriented languages. In addition,
    with TypeScript, you can use all of the features of ECMAScript 6, because the
    compiler converts them into readable code for the current browser.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the features of TypeScript is that users can create typed variables,
    like it is done in Java or C# (for example, `const VARIABLE_NAME: Type = Value`),
    Not only that, but TypeScript helps us to write clean, well-organized code. That
    is one of the reasons why the Angular team adopted TypeScript for the current
    version of the framework.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we begin, let''s look at what the official TypeScript documentation
    states:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '"TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Any browser. Any host."
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will install TypeScript in our environment globally, in
    order to understand what happens with TypeScript files when they are converted to
    JavaScript. Don't worry; Angular applications already provide us with a TypeScript
    compiler, built into the Angular CLI.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following points:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Installing TypeScript
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The benefits of using TypeScript
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to transpile a TypeScript file to a JavaScript file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing JavaScript code with static typing
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding interfaces, classes, and generics in TypeScript
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing TypeScript
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's pretty simple to install and get started with TypeScript. It is necessary
    to have Node.js and Node Package Manager (NPM) installed on your machine.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have them yet, go to [https://nodejs.org/en/download/](https://nodejs.org/en/download/) and
    follow the step-by-step installation instructions for your platform.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install TypeScript, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal and type the following command to install the TypeScript
    compiler:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the `-g` flag means to install the compiler on your machine globally.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check the available TypeScript commands. Type the following command
    in the Terminal:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding command will provide a lot of information about the TypeScript
    compiler; we will see a simple example of how we can transpile a TypeScript file
    to a JavaScript file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '` tsc hello.ts`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '` tsc --outFile file.js file.ts`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Descriptions of the preceding lines are as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The `tsc` command compiles the `hello.ts` file.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tell the compiler to create an output file, named `hello.js`
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a TypeScript project
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some text editors, such as VS Code, give us the ability to deal with TS files
    as independent units, called File Scope. Although this is very useful for isolated
    files (as in the following examples), it is recommended that you always create
    a TypeScript project. You can then modularize your code and use dependency injection
    between files in the future.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: A TypeScript project is created with a file called `tsconfig.json`, placed at
    the root of a directory. You will need to indicate to the compiler which files
    are part of the project, the compile options, and many other settings.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic `tsconfig.json` file contains the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although the preceding code is very simple and intuitive, we are only indicating
    which compiler we will use in our project, and also what kind of module. If the
    code snippet indicates that we are using ECMAScript 5, all TypeScript code will
    be converted to JavaScript, using ES5 syntax.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at how we can create this file automatically, with the help
    of the `tsc` compiler:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder, called `chapter-02`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your Terminal inside the `chapter-02` folder.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will see the following content, generated by the `tsc` compiler:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that we have omitted some sections. You should see all of the available
    options; however, most of them are commented. Do not worry about that at this
    time; later on, we will look at some of the options in more detail.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create a TypeScript file, and check that everything goes smoothly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Open VS Code in the `chapter-02` folder and create a new file, called `sample-01.ts`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to `sample-01.ts`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Go back to your Terminal and type the following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In VS Code, you can use the integrated Terminal; on the top menu bar, click
    on View | Integrate Terminal [ˆ`].
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Note that another file appears with the same name, but with a `.js` extension.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: If you compare both files, they are exactly the same, because our example is
    pretty simple, and we are using a simple `console.log()` function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: As TypeScript is a super set of JavaScript, all of the JS features are available
    here, too.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of TypeScript
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s a small list of the benefits of using TypeScript:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript is robust, secure, and easy to debug.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript code is compiled before being transformed into JavaScript, so we
    can catch all sorts of errors before running the code.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDEs that support TypeScript have the ability to improve code completion and 
    checking static typing.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript supports OOP (Object Oriented Programming), including modules, namespaces,
    classes, and more.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main point in TypeScript's favor is that it has been adopted by the Angular
    team; and, since Angular is one of the most important frontend frameworks for
    the development of modern web applications with JavaScript, this has motivated
    many developers, who are migrating from Version 1.x of the AngularJS to Version
    2/4/5/6, to learn it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: A simple reason for this is that the majority of Angular tutorials and examples
    are written in TypeScript.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `sample-01.ts` and add the following code, right after the `console.log()`
    function:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Go back to your Terminal and type the following code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, when you open the `sample-01.js` file, you will see the results shown
    in the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2490a659-f06c-4749-8e64-a62905746ed7.png)Comparing TypeScript with
    generated JavaScript'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Note that the sum class parameters, `(x:number, y:number)`, are given the type
    number. This is one of the advantages of TypeScript; however, as we are acting
    according to typing and using numbers within the function call `MyClass.sum(3,
    5)`, we cannot see its power.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Let's make a small change, and see the difference.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Change the `MyClass.sum()` function call to `MyClass.sum('a', 5)`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to your Terminal and type the following command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that we receive a TypeScript error:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you are using VS Code, you will see the message in the following screenshot,
    before you execute the command to compile the file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d90105da-eda8-4321-ad41-4a252b0c0842.png)Compiling error message'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: As previously mentioned, VS Code is a powerful editor for the TypeScript language;
    in addition to having an integrated Terminal, we are able to clearly see the compilation
    errors.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Instead of typing the same command every time, we can make some modifications
    to the TS file. We can use the `--watch` flag, and the compiler will run every
    change that we make to the file automatically.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Terminal, type the following command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s fix it; go back to VS Code and replace the `MyClass.sum()` function
    with the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To stop the TS compiler, just press *Ctrl +* *C*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Writing JavaScript code with static types
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing that you''ll notice when working with TypeScript are its static
    types, in addition to all of the JavaScript types, indicated on the following
    table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '| **Primitives** | **Objects** |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
- en: '| String | Function |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '| Number | Array |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
- en: '| Null | Prototypes |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
- en: '| Undefined |  |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
- en: '| Boolean |  |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
- en: '| Symbol |  |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
- en: 'This means that you can declare the types of variables; it''s pretty simple
    to assign a type to a variable. Let''s look at some examples, using JavaScript
    types only:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With TypeScript, we have a few more types, as we'll see in the following sections.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Creating a tuple
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A tuple is like an organized typed array. Let''s create one to see how it works:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `chapter-02` folder, create a file called `tuple.ts`, and add the
    following code:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code looks fine for JavaScript, but in TypeScript, we must respect
    the variable type; here, we are trying to pass a string where we must pass a number.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Terminal, type the following command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will see the following error message:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In VS Code, you will see the error message before you compile your file. This
    is a very helpful feature.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: When we fix it with the right order (`myArray = [0, 'text', false]`), the error
    message disappears.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: It's also possible to create a tuple type and use it to assign a variable, as
    we can see in the next example.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to your Terminal and add the following code to the `tuple.ts` file:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: At this point, you may be wondering why the previous examples have a `console.log`
    output.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: With the help of Node.js, which we installed previously, we can run the examples
    and view the output of the `console.log()` function.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the Terminal, type the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that you will need to run the JavaScript version, as in the previous example.
    If you try to run the TypeScript file directly, you will probably receive an error
    message.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Using the void type
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In TypeScript, it is mandatory to define the type of the return of a function.
    When we have a function that does not have a return, we use a type called `void`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how it works:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `void.ts` inside the `chapter-02` folder, and add
    the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the preceding code, everything is OK, because our function returns a value.
    If we remove the return function, we will see the following error message:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In VS Code, you would see the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1c7652c8-7333-4dbd-a38e-9247c6f90b4a.png)VS Code output error'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix it, replace the type `string` with `void`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This is very useful, because our functions do not always return a value. But
    remember, we cannot declare `void` in functions that *do* return a value.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: The opt-out type checking - any
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `any` type is very useful when we do not know what to expect from a function
    (in other words, when we do not know which type we are going to return):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `any.ts` inside the `chapter-02` folder, and add the
    following code:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that the first `band` assignment is an object, while the second is a string.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to your Terminal and compile and run this piece of code; type the following
    command:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, let''s see the output. Type the following command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You will see the following message in the Terminal:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, we can assign *anything* to our `band` variable.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Using enum
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`enum` allows us to group values with more intuitive names. Some people prefer
    to call the enumerated list and some other names. Let''s look at an example, so
    as to make it easier to understand how this works in practice:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `enum.js` in the `chapter-02` folder, and add the following
    code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In your Terminal, type the following command to transpile the file:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let''s execute the file. Type the following command:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You will see the following result in the Terminal:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We can now get the value by using the name instead of the position.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines of code, right after the `console.log()` function:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, execute the commands in *steps 2* and *step 3* to check the results. You
    will see the following output in the Terminal:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note that all of the values (band names) declared in the `band` object are converted
    into strings, inside an indexed object, as you can see in the preceding example.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Using the never type
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The never type was introduced in TypeScript 2.0; it implies a value that never
    occurs. At first glance, it may seem strange, but it can be used in some situations.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at what the official documentation says about it:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: The `never` type represents the types of values that never occur. Specifically, never is
    the return type for functions that never return, and never is the type for variables
    under `type` guards that are never true.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that a messaging function that is called within another function specifies
    the callback.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'It would look something like the following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Another example would be checking a value that is a string and number at the
    same time, such as the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Types: undefined and null'
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In TypeScript, `undefined` and `null` are types themselves; this means that
    undefined is a type (`undefined`) and null is a type (`null`). Confusing? undefined
    and null cannot be  type  variables; they can only be assigned as values to variables.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'They are also different: a null variable means that a variable was set to null,
    while an undefined variable has no value assigned.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Understanding interfaces, classes, and generics in TypeScript
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Object-Oriented Programming** (**OOP**) is a very old programming concept,
    used in languages such as Java, C#, and many others.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: One of the advantages of using TypeScript is being able to bring some of these
    concepts into your JavaScript web applications. In addition to being able to use
    classes, interfaces, and more, we can easily extend import classes and import
    modules, as we will see in the coming examples.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: We know that using classes in pure JavaScript is already an option, with the
    use of ECMAScript 5\. Although it is similar, there are some differences; we will
    not address them in this chapter, so that we do not confuse our readers. We will
    only focus on the implementations adopted in TypeScript.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Creating a class
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The best way to understand classes in TypeScript is to create one. A simple
    class looks like the following code:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s create our first class:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your text editor and create a new file, called `my-first-class.ts`, and
    add the following code:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We added some comments to the previous code to facilitate understanding.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: A class can have as many methods as necessary. In the case of the previous class,
    we gave only one method, to list our favorite band albums. You can test this piece
    of code on your Terminal, passing any information that you want inside the new
    `MyBand()` constructor.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: This is pretty simple, and if you've had some contact with Java, C#, or even
    PHP, you will have already seen this class structure.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can apply the inheritance (OOP) principle to our class. Let''s see
    how to do it:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `band-class.ts` file and add the following code, right after the `console.log()`
    function:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In Angular, classes are very useful for defining components, as we will see
    in the [Chapter 3](55bf9899-fbc7-458e-b7f5-22be56951fe6.xhtml), *Understand the
    core concepts of Angular 6*.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Declaring an interface
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interfaces are our allies when we use TypeScript, since they do not exist in
    pure JavaScript. They are an efficient way of grouping and typing variables, ensuring
    that they are always together, maintaining consistent code.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a practical way to declare and use an interface:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'In your text editor, create a new file called `band-interface.ts`, and add
    the following code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: To use it, assign the interface to a function type, as in the following example.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the interface code, in the `band-interface.ts`
    file:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Note that here, we are using the `Band` interface to type our `function` parameter.
    So, when we try to use it, we need to keep the same structure in new objects,
    as in the following example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note that you can execute all of the sample files by typing the command
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '`tsc band-interface.ts` and the `band-interface.js` node in your Terminal.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if you follow the preceding tip, you will see the same result in your Terminal
    window:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As you can see, the interfaces in TypeScript are incredible; we can do a lot
    of things with them. Throughout the course of this book, we will look at some
    more examples of using interfaces in real web applications.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Creating generic functions
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Generics** are a very useful way of creating flexible classes and functions.
    They are very similar to those used in C#. It''s very useful to be used in more
    than one place.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create generic functions by adding angle brackets after the function
    names and enclosing datatypes, as in the following example:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note that the `t` inside the angle brackets (`<t>`) means that `genericFunction()`
    is of the generic type.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尖括号内的`t`（`<t>`）表示`genericFunction()`是通用类型。
- en: 'Let''s see this in practice:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看实际操作：
- en: 'In your code editor, create a new file called `generics.ts`, and add the following
    code:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中，创建一个名为`generics.ts`的新文件，并添加以下代码：
- en: '[PRE43]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Let's see what happens with our generic function.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的通用函数会发生什么。
- en: 'Go back to your Terminal and type the following command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到您的终端并输入以下命令：
- en: '[PRE44]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, let''s execute the file with the following command:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令执行文件：
- en: '[PRE45]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We will see the following result:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下结果：
- en: '[PRE46]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note that the compiler is able to identify the datatype that we are passing
    as the `function` argument. In the first case, we explicitly pass the argument
    as a string, and in the second case, we pass nothing.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，编译器能够识别我们作为`function`参数传递的数据类型。在第一种情况下，我们明确将参数作为字符串传递，而在第二种情况下，我们不传递任何东西。
- en: 'Although the compiler is able to identify the type of argument that we are
    using, it is important to always determine what kind of data we are going to pass.
    For example:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管编译器能够识别我们使用的参数类型，但始终确定我们要传递的数据类型是非常重要的。例如：
- en: '[PRE47]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Working with modules
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块
- en: Modules are very important when developing large-scale applications with TypeScript.
    They allow us to import and export code, classes, interfaces, variables, and functions.
    These functions are extremely common in applications with Angular.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用TypeScript开发大型应用程序时，模块非常重要。它们允许我们导入和导出代码、类、接口、变量和函数。这些函数在Angular应用程序中非常常见。
- en: However, they can only be accomplished by using a library, which could be Require.js
    for the browser, or Common.js for Node.js.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它们只能通过使用库来实现，这可能是浏览器的Require.js，或者是Node.js的Common.js。
- en: In the following sections, we will illustrate how we can use these features
    in practice.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将说明如何在实践中使用这些特性。
- en: Using the class export feature
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类导出功能
- en: Any declaration can be exported, as we mentioned previously; to do so, we just
    need to add the `export` keyword. In the following example, we will export the
    `band` class.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 任何声明都可以被导出，正如我们之前提到的；要这样做，我们只需要添加`export`关键字。在下面的例子中，我们将导出`band`类。
- en: 'In your text editor, create a file called `export.ts`, and add the following
    code:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的文本编辑器中，创建一个名为`export.ts`的文件，并添加以下代码：
- en: '[PRE48]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We will now have our `Myband` class available to be imported into another file.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`Myband`类可以被导入到另一个文件中了。
- en: Importing and using external classes
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入和使用外部类
- en: 'An import can be accomplished with the keyword `import`, and can be declared
    in different ways, depending on what library you are using. An example of using
    Require.js is as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关键字`import`可以实现导入，并且可以根据您使用的库的不同方式进行声明。使用Require.js的示例如下：
- en: 'Go back to your text editor, create a file called `import.ts`, and add the
    following code:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回到您的文本编辑器，创建一个名为`import.ts`的文件，并添加以下代码：
- en: '[PRE49]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'An example of using Common.js is as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Common.js的示例如下：
- en: '[PRE50]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The second method has been adopted by the Angular team, because Angular uses
    Webpack, a module bundler building modern web applications.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种方法已被Angular团队采用，因为Angular使用Webpack，这是一个构建现代Web应用程序的模块捆绑器。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you saw the basic principles of TypeScript. We merely scratched
    the surface, but we provided you with a solid base for handling Angular applications
    using TypeScript.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您看到了TypeScript的基本原则。我们只是触及了表面，但是我们为您提供了一个处理使用TypeScript开发Angular应用程序的坚实基础。
- en: Throughout the course of this book, we will enhance your understanding as we
    advance with the creation of a web application.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，随着我们创建Web应用程序的进展，我们将增强您的理解。
