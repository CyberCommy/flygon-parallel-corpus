- en: Chapter 9. Adding Bells and Whistles to your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've added a lot of solid functionality to our application. However, there
    are a few missing features that some people might consider*"nice* to have" and
    are important to us so that our application has a nice user experience.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Add jQuery to the project and use it to simplify the delete buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add basic pagination to user posts by using CouchDB views and jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add profile images for all of our users using Gravatar's web service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These features are fun, little additions, and they will also open your eyes
    to what's possible when you combine other libraries with CouchDB and PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Adding jQuery to our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though this book is primarily about writing applications in PHP, JavaScript
    has turned into an almost essential tool in a developer's tool belt when building
    great applications. We've already used JavaScript in our CouchDB views but, in
    this chapter, we'll use JavaScript for its most common use case－improving our
    user experience. In order for us to write simpler JavaScript, we're going to use
    a popular library called **jQuery**. If you haven't used jQuery before, you are
    going to be pleasantly surprised at how much it simplifies both common and complex
    operations in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Installing jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Luckily, jQuery is incredibly simple to get into any project. We could download
    it from [http://www.jquery.com](http://www.jquery.com), but, because we want to
    focus on speed, we can actually use it without installing anything into our repository.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding jQuery to our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because of the influx of people using jQuery, Google has set up a content delivery
    network that serves up the jQuery library for us without anything being required
    in our project. Let's tell our `layout.php` file where to find jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `layout.php` file, and add the following code right before the end
    of the `body` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just added one line of code before the end of our `body` tag in the `layout.php`
    file. That's all it took to use jQuery with our project! You may be wondering
    why we decided to put our jQuery library all the way at the bottom of our file.
    The simplest explanation is that as a browser loads code, it does so one line
    at a time. By putting JavaScript at the bottom of the page, it allows the other
    elements, such as CSS and HTML markup, to load faster, giving the user the impression
    that things are loading fast.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating master.js and connecting Boostrap's JavaScript files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As our application grows, we'll want to be able to add our JavaScript into external
    files. Let's create a file called `master.js` that will hold all of our application's
    JavaScript and then connect Bootstrap's JavaScript files that we downloaded in
    [Chapter 6](ch06.html "Chapter 6. Modeling Users"), *Modeling Users.*
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `master.js` in the `public/js` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `layout.php` file, and add the following code right before the end
    of the `body` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a blank file called `master.js`, which is where all of our application's
    JavaScript will be live. Next, we adjusted our `layout.php` file again, allowing
    us to include the `boostrap.min.js` file that we downloaded in [Chapter 6](ch06.html
    "Chapter 6. Modeling Users"), as well as our newly created `master.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it comes to writing JavaScript, the order in which you load files is important.
    As we write jQuery later in this chapter, it will be important for our browser
    to load the jQuery file first, so it knows what jQuery is and how the syntax works.
  prefs: []
  type: TYPE_NORMAL
- en: Using jQuery to improve our site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have jQuery, let's jump right into using it to improve our site
    a little bit. There are a lot of different ways in which you can write the jQuery
    and JavaScript code, but we're going to stick to the absolute basics in this book
    and try to keep it simple.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing our delete post action to actually use HTTP delete
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the things you might have noticed early in the last chapter is that
    when we coded the deletion of posts from the user''s profile, we actually used
    the `GET HTTP` method instead of the `DELETE` method. This is because it''s difficult
    to trigger a `DELETE` route without using JavaScript. So, in the following section,
    we''re going to improve the deletion process in order for it to work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A user clicks on **Delete** on a post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `DELETE AJAX` request is made from jQuery to our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our application will delete the post document and report back to jQuery that
    everything went as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The post will fade from the view without our user needing to refresh the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will be a nice improvement to our user profile, because we won't require
    our page to reload each time an action is performed.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — improving our user experience by using AJAX to delete posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get our feet wet with a bit of jQuery by adding some code to our `master.js`
    file that will allow us to delete posts using JavaScript. Don't be overwhelmed
    if the syntax of jQuery isn't familiar to you at first; stick with it, and I think
    you'll be incredibly pleased with the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `public/js/master.js`, and make sure the jQuery code will run when the
    page is finished loading by adding a `$(document).ready` event to our file. This
    piece of code means that any JavaScript code inside of this function will be run
    once the page has finished loading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add an event that binds the `click` event to any button that has
    the `delete` class in our HTML. All of the code inside the brackets of `function(event)`
    will be run each time one of our delete post buttons is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s prevent the link from taking us to a new page, as it normally does,
    with a piece of code called `event.preventDefault()`. Then, let''s save the `href`
    attribute of the clicked link into a variable called `location`, so that we can
    use it in our AJAX call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s create a basic AJAX request that will call our application
    and delete the post for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We just learned how to make an AJAX request with JavaScript in just a few lines
    of code. We started by wrapping our code in a `$(document).ready` function that
    is run once the page has completely loaded. We then added a function that captures
    the click of any of our `delete post` links in our application. Finally, the most
    complex part of the script is our AJAX call. Let''s talk through this a bit so
    that it makes sense. jQuery has a function called `$.ajax` that has a variety
    of options (which are all viewable here: [http://api.jquery.com/jQuery.ajax/)](http://api.jquery.com/jQuery.ajax/)).
    Let''s walk through each of the options that I''ve used in the piece of code given
    previously and make sure you know what they mean.'
  prefs: []
  type: TYPE_NORMAL
- en: '`type: ''DELETE''` means that we want to use the `DELETE HTTP` method for our
    request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url: location` means that we are going to use the `href` attribute of the
    clicked link for our request. This will make sure the correct post is deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context: $(this)` is the object that will be used for all AJAX callbacks.
    So, in this example, all the code that is inside the `success` option of this
    call will use the clicked link as the context for all calls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`success: function()is` called whenever our AJAX request is complete. We placed
    the following code inside this function: `$(this).parent().parent().fadeOut()`;.
    This means that we''re going to look two HTML levels up from the clicked link.
    This means that we''re going to look for`<div class="post-item row">` of the post,
    and we''re going to fade it out of view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error: function (request, status, error)` is run whenever an error occurs
    in your code. Right now, we''re just displaying an alert box, which is not the
    most elegant approach, especially since we aren''t supplying the user with details
    of what happened. This will work for us for now, but if you want some bonus points,
    play a bit with this function and see if you can make it a bit more graceful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Awesome! We just added some code that will really improve the user's experience.
    As your application grows, and you add more features to it, make sure to keep
    jQuery's `AJAX` method in mind, which will definitely make things easier.
  prefs: []
  type: TYPE_NORMAL
- en: Updating our route to use the DELETE HTTP method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we are correctly using `DELETE` as our `HTTP` method through our AJAX
    call, we need to update our routes, so our code knows how to handle the route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `index.php`, and look for the `post/delete/:id/:rev` route that we created
    in the previous chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change the route to use a `delete` method by changing `get` to `delete`.
    Then, remove the `success` variable and the redirection code, because we''ll no
    longer need them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let's test it out!
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While testing this feature, make sure to stop and appreciate all of the technologies
    that are working together in unison to solve a somewhat complex problem.
  prefs: []
  type: TYPE_NORMAL
- en: Go to `http://localhost/verge/login`, and log in to the application as `johndoe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **My Profile**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `(Delete)` next to one of your posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The deleted posts will fade out of view, and the other posts will bump up on
    the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding simple pagination using jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As our application grows, posts will start to fill up the profile of a user.
    What happens if our application becomes successful, and people start using it?
    Hundreds of posts will be printed to the profile view each time the page loads.
    Something like this could absolutely cripple your application as it starts to
    grow.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that in mind, we''re going to create some pagination on our profile pages.
    Our simple pagination system will work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: By default, we'll show 10 posts on a page. When a user wants to see more, they'll
    click on a **Load More** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the **Show More** link is clicked, jQuery will figure out how many items
    to skip and tell Bones which documents to retrieve.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bones will use Sag to call CouchDB and get more posts through the `posts_by_user`
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bones will load the results into a partial view that contains our HTML layout
    for how posts need to be formatted. This HTML will be returned to jQuery to display
    on our page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's quite a bit going on there, but this type of feature is a common occurrence
    in most applications. So, let's jump in and see if we can piece this all together.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — taking posts out of profile.php and putting them in their
    own partial view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for listing posts sits directly inside the `profile.php` page, which
    was fine up until now. However, in a moment, we'll want to be able to display
    posts via `callback` from Javascript, which on if we're not careful, could mean
    duplicate code or inconsistent layout. Let's safeguard ourselves against that
    by moving our code into a partial view that we can reuse easily.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `_posts.php` in views/user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy and paste the `foreach` code that lists out posts from `views/user/profile.php`,
    and paste it into our new file `_posts.php`. The end result of `_posts.php` should
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's remove the same `foreach` statement from `views/user/profile.php`,
    and replace it with an `include` call to the newly created `_posts` file. Then
    let's add a `span` inside our list's `h2` element so that we can easily access
    it via jQuery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We took all of the code that listed the posts out of `profile.php` and moved
    it into a new partial called `_posts.php`. We began the filename with an underscore
    for no other reason than for us to tell that it's different than normal views
    when we are looking through our source code. By partial view, I meant that it's
    meant to be loaded into another page, by itself, it would probably serve no purpose.
    On the surface, our application will function exactly the same as it did before
    we moved our code to a partial view.
  prefs: []
  type: TYPE_NORMAL
- en: We then altered our code in `profile.php`, so that it would make it easier to
    work with using jQuery. We added a `span` element with an ID of `post_count` inside
    of our `h2` element. This `span` element just contains the number of total posts.
    We'll use this soon to tell us if we've loaded all of the posts we needed into
    our list. We then wrapped our list of posts with a `div` with the ID `post_list`.
    We're going to use this identifier to append new posts to the list from our pagination
    control.
  prefs: []
  type: TYPE_NORMAL
- en: Adding backend support for pagination
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We don't need another function for pagination. Let's just improve the `Post`
    class's `get_posts_by_user` function. All we need to do is add the `skip` and
    `limit` options, which we will then pass to the `posts_by_user` view in CouchDB.
    Passing `skip` to this view will enable us to skip a certain number of records
    in the results that it sends us, and `limit` will allow us to only show a certain
    number of posts at a time. By combining these two variables, we will have support
    for pagination!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adjusting our get_posts_by_user function to skip and limit
    posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know what to do, let's jump right into editing our `classes/post.php`
    file and adjusting our `get_posts_by_user` function so that we can add `$skip`
    and `$limit` as arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Post` class by opening the file called `classes/post.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find our `get_posts_by_user` function, and add `$skip` with a default value
    of `0` and `$limit` with a default value of `10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Update our `get` call to Sag so that it passes the value of `$skip` and `$limit`
    into the query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have updated our function to include `skip` and `limit`, let''s
    create a new route in `index.php` that''s similar to the `user/:username` route
    but takes in a route variable of `skip` to drive the pagination. In this route,
    we''re just going to return `_posts` partially, instead of the whole layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just added additional `$skip` and `$limit` options to the `get_posts_by_user`
    function. We also set things up so that our current calls will function without
    changing anything, as we set default values for each variable. Our existing call
    in the user profile will now also show the first 10 posts.
  prefs: []
  type: TYPE_NORMAL
- en: We then created a new route called `/user/:username/:skip`, where `skip` is
    the number of items we want to skip when querying. Everything else in this function
    is exactly the same as in the `/user/:username` route, except for the fact that
    we are returning the results into our partial and with a layout of `false`, so
    there's no layout wrapper. We're doing this so that jQuery can call this route,
    and it will simply return the list of posts it needs to add to the end of the
    list on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Let's test it out!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's make sure that our `/user/:username/:skip` route works as expected by
    playing around with it directly through the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Go to `http://localhost/verge/user/johndoe/0` (or any user that has a decent
    number of posts).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will return a big list of posts using `views/user/_posts.php` as
    a template. Notice that it's showing us 10 total posts, starting with the most
    recent post.![Let's test it out!](graphics/3586_09_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s try to skip the first 10 posts (as our pager will eventually do)
    and retrieve the next 10 posts by going to: `http://localhost/verge/user/johndoe/10`![Let''s
    test it out!](graphics/3586_09_020.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our code hopefully worked great. I only had 12 posts on this account, so this
    view skipped the first 10 posts and showed the last two.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This all functioned exactly as we were expecting, but there's a little bit of
    clean-up to be done in our code.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — refactoring our code so it's not redundant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although our code works just fine, you might have noticed that we have near
    identical code `in /user/:username` and `/user/:username/:skip`. We can cut down
    on code bloat by moving all of the redundant code into a function and calling
    it from each route. Let's do this so we can stay in the habit of keeping our code
    clean.
  prefs: []
  type: TYPE_NORMAL
- en: Open `index.php`, and create a function called `get_user_profile` that takes
    `$app` as a parameter, and place it above `/user/:username` route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Copy the code from `/user/:username/:skip` into this function. But, this time,
    instead of just `passing $app->request('skip')`, let's check if it exists. If
    it exists, let's pass it to the `get_posts_by_user` function. If it doesn't exist,
    we'll just pass it `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's clean up both of our profile functions so that both of them just
    call the `get_user_profile` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just simplified our user profile routes by moving most of the logic into
    a new function called `get_user_profile`. The only piece of functionality that
    was different between the two routes was the `request` variable `skip`. So, we
    put a shorthand `if` statement in the call to the function `Posts::get_posts_by_user`
    that would pass the `skip` request variable if it existed; but if it didn't, we
    would just pass it `0`. Adding this little piece of functionality allowed us to
    use the same code for the two different routes. Finally, we plugged our brand
    new function into our routes, and were ready to bask in the simplicity of the
    code. Everything will still work the same as it did before, but it's much easier
    to read and will be easier for us to update in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring and consistently cleaning up code is an important process to follow
    as you develop; you'll thank yourself for doing this later!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding frontend support for pagination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We almost have complete support for pagination. All we need to do now is add
    a little bit of HTML and JavaScript to our project, and we'll have a nice experience.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by adding a line of CSS into our `master.css` file, so that our
    **Load More** button will look pretty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the CSS in place, let's add the HTML for our **Load More**
    button at the bottom of the `post` list inside our `profile.php` view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's open `master.js`, and create a function inside the closing brackets
    of the `$(document).ready` function. This function will target the `click` event
    of the any element with the ID of `more_posts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In order for us to call the `/user/:username/:skip` route, we will need to use
    a JavaScript function called `window.location.pathname` to grab the current URL
    of the page. Then, we'll append the number of post items at the end of the string
    so that we skip the number of posts that are currently displayed on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the location, let's fill in the rest of the AJAX call. This
    time, we'll use the `GET HTTP` method and use the list of posts with the ID of
    `post_list` as our context, which will allow us to reference it in the `success`
    event. Then, let's just add a generic `error` event to let the user know something
    went wrong, if an error occurs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's fill in our `success` function with some code that appends the
    HTML returned from our AJAX call to the end of the `post_list div`. Then, we'll
    check to see if there are any other posts to load. If there are no more posts
    to load, we'll hide the **Load More** button. To get the number of posts, we're
    going to look at the `span` we created with `post_count` as an ID, and convert
    it to an integer with `parseInt:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we finished our pagination! We started by creating a quick
    CSS rule for our **Load More** link so that it looks a bit friendlier and added
    the HTML needed for it to appear on the profile page. We wrapped up the pagination
    by calling an AJAX function to the URL of the current user's profile and appended
    the number of posts that currently exist in `#post_list div`. By passing this
    number to our route, we're telling our route to pass the number along and to ignore
    all of those items, as we already have them displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we added a `success` function to return the HTML from our route using
    the layout of the `_posts` partial. This HTML will be appended at the end of the
    `#post_list div`. Finally, we checked to see if there were any more items to load
    by comparing the size of the `#post_list` against the number of posts our `reduce`
    function returned to the top of our profile in the `#post_count span`. If the
    two values are equal, it means that no more posts can be loaded, and we are safe
    to hide the **Load More** link.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — fixing our delete post function to work with pagination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we added the pagination, we also broke the ability to delete posts that
    are loaded via AJAX. This is because we are using the `bind` event handler to
    tie the `click` event to our links, which only happens on page load. So, we'll
    need to account for the links loaded via AJAX. Thankfully, we can do that using
    jQuery's `live` event handler.
  prefs: []
  type: TYPE_NORMAL
- en: Open `master.js`, and change the `delete` post code to use `live` instead of
    `bind:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you start deleting a bunch of items in the post list, it currently doesn''t
    change the number of posts tied to a user account using JavaScript. While we are
    here, let''s alter the `success` function so that it also updates the number of
    posts at the top of our post list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just updated our delete button to use the `live` event handler instead of
    the `bind` event handler. By using `live`, jQuery allows us to define a selector
    and applies a rule to all current and future items that match that selector. Then,
    we made our `#post_count` element dynamic so that each time a post is deleted,
    the post count changes accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our complete pagination system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our pagination is finally wrapped up. Let's go back and test everything to make
    sure that the pagination works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Go to `http://localhost/verge/login`, and log in to the application as `johndoe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **My Profile**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll to the bottom of the page, and click on **Load More**. The next 10 posts
    will be returned to you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have less than 20 posts in your account, the **Load More** button will
    disappear from the page, showing you that you have loaded all of the posts in
    your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try and click on the last post in the list that was loaded through AJAX, and
    it will disappear, just as it should!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazing! Our pagination system works just as we wanted; we're able to delete
    posts, and our post count updates each time we delete a post.
  prefs: []
  type: TYPE_NORMAL
- en: Using Gravatars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, our profiles look a bit boring with just a bunch of text, because
    we don''t have support for uploading images into our system. We''re going to avoid
    this topic in this book for the sake of time, but also for our users'' benefit.
    There is a decent amount of friction in getting users to upload a new profile
    image each time they join a service. Instead, there is a service that can make
    our lives a bit easier: **Gravatar** ([http://www.gravatar.com](http://www.gravatar.com)).
    Gravatar is a web service that allows users to upload a profile image to one single
    location. From there, other applications can grab the profile image, using the
    user''s e-mail address as the identifier of the image.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding Gravatars to our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding support for Gravatars through our user class is as easy as adding a few
    lines of code. After that, we'll add the `gravatar` function all over our application.
  prefs: []
  type: TYPE_NORMAL
- en: Open `user/profile.php` and a `public` function called `gravatar` that accepts
    a parameter called size; we'll give it a default value of `50`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In order to get the users' Gravatar, we just need to create an `md5` hash of
    a user's e-mail address, which will serve as the `gravatar_id`. We'll then set
    the size using our `$size` variable, and append all of that to Gravatar's web
    service URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: That's it! We now have Gravatar support in our application. We just need to
    start adding it anywhere we want to see a profile image. Let's start by adding
    a large Gravatar into the **User Information** section at the top of the `views/user/profile.php`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's update the listing of posts in the `views/user/_posts.php` file,
    so we can nicely display our Gravatars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added a function into our `User` class called `gravatar` that accepts a parameter
    of `$size` with a default value of 50\. From there, we made an `md5` hash of the
    object's e-mail address and `$size` and tacked it on to the end of Gravatar's
    web service. The result is a link to a nice and easy to display Gravatar image.
  prefs: []
  type: TYPE_NORMAL
- en: With our Gravatar system in place, we added it into our `views/user/profile.php`
    and `views/user/_posts.php` pages.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our Gravatars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our Gravatars should be up and running on our profile page. If the user does
    not have an image tied to their e-mail address, a simple holding image will be
    shown.
  prefs: []
  type: TYPE_NORMAL
- en: Go to `http://localhost/user/johndoe`, and you will see Gravatar's placeholder
    on each post and in the **User Information** section.![Testing our Gravatars](graphics/3586_09_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's associate a Gravatar with your e-mail by going to [http://www. gravatar.com](http://www.%20gravatar.com)
    and clicking on **Sign up.**![Testing our Gravatars](graphics/3586_09_030.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in your e-mail, and click on **Signup**. You'll receive a verification
    e-mail to your address, so go check it and click on the activation link.![Testing
    our Gravatars](graphics/3586_09_035.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will be taken to a page that shows your current account and images
    tied to your account. You will not have anything tied to your account yet, so
    click on **Add one by clicking here!.**![Testing our Gravatars](graphics/3586_09_040.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have uploaded the image to the account and added any e-mail addresses
    you want to use, you can go back to the profile associated with your e-mail address
    (for me it's `http://localhost/user/tim`), and you will see a Gravatar in place!![Testing
    our Gravatars](graphics/3586_09_045.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding everything to Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I hope that in the course of this chapter, you've been committing your code
    to Git; if you haven't, this is your reminder. Make sure to do it early and often!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you enjoyed this chapter! While none of these features were "mission-critical"
    features for our application to work, these are the kinds of features that your
    users will request as your application grows.
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, we learned how to install jQuery and use it to aid in the creation
    of some basic JavaScript and we used it to make the deletion of posts and pagination
    a bit cleaner. Next, we added Gravatar images to the profile and list of posts
    to make our profiles much more interesting to look at.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! Our application is ready for prime time. In the next chapter, we're
    going to secure the final pieces of our application and deploy everything so that
    the world can see what you've built.
  prefs: []
  type: TYPE_NORMAL
