- en: Chapter 11. Take the Challenge — Putting It All Together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the book we have discussed various techniques and methodologies that
    with practice, continual research, and diligence will allow you to perform a penetration
    test from start to finish. This chapter allows you to put some of that information
    to work and bring it into perspective.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discuss the following items within this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the practice environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using penetration testing techniques to move from one system to the other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example penetration test of a fictional company from start to finish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fictional corporation named NewAlts Research Labs has decided to add a web
    presence. Due to the nature of their business model, information confidentiality
    is critical and any leakage of sensitive research data has a direct negative impact
    on their bottom line. Their administrator has set up a mock environment that is
    similar to what they would like to eventually move to production. The business
    owner has asked the administrator to hire an outside consultant to review the
    environment and inform of any vulnerabilities that may exist.
  prefs: []
  type: TYPE_NORMAL
- en: The administrator then contracts you to perform a penetration test on the mockup
    environment because he has ascertained that he is using security best practices
    and performed the initial vulnerability scans a few months ago and found no issues.
    He reiterates that he is using well-known products that provide great support
    and prides himself on the fact that his shop is 100 percent open source.
  prefs: []
  type: TYPE_NORMAL
- en: When asking about the network you find that there is only one web facing server.
    This server is running the latest version of WordPress. The only other service
    mentioned is SSH which he uses to access the site in case of an emergency. When
    at the office the administrator uses a management zone to access the server directly,
    but this zone is not accessible from the Internet and is firewalled off. The IP
    address of the server is `192.168.10.25`. When asking about the environment the
    administrator lets you know that they use segmented internal networks, multiple
    firewalls, IDS, and WAF and is confident that this layered defensive approach
    is sufficient to protect the core data network where the important and confidential
    research information will eventually be stored.
  prefs: []
  type: TYPE_NORMAL
- en: It is up to you to provide the management with the confidence that if this setup
    is to go live their data is protected. You are to emulate an attacker with no
    prior knowledge of the network and a limited timeframe to perform attacks. The
    administrator mentions that he intends to use virtual images for the servers and
    that they will be brought down and restored to the original state every evening.
  prefs: []
  type: TYPE_NORMAL
- en: The setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As usual, we will need to set up our virtual lab to emulate this environment
    as the penetration test we are performing is purely fictional. However, do not
    consider this effort in vain; many penetration testers will attempt to emulate
    the network of their client in order to ensure the exploits they intend on using
    actually work and are stable, not to mention this reduces the likelihood of diligent
    administrators and security professionals detecting your movements. Depending
    on the type of penetration test this could prove critical.
  prefs: []
  type: TYPE_NORMAL
- en: NewAlts Research Labs' virtual network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will set up the following environment in VirtualBox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NewAlts Research Labs'' virtual network](img/7744OS_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'System name: **pfsense1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS: pfSense 2.0 (FreeBSD)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual disk size: 1 GB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RAM: 128'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Three network adapters (Internal):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAN = 192.168.10.1 (Int10)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LAN = 192.168.20.1 (DMZ20)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OPT1 = 192.168.30.1(DEV30)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OPT2 = NAT (This is an optional step which allows you to easily download and
    install the necessary packages. This adapter should be disabled ASAP.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installed packages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snort (Be sure to configure and update this.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strikeback (Only available in the 32-bit version of pfSense.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up the DHCP server for all three interfaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow private IPs through the WAN interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up rules to allow ports 22, 80, 443, and 3306 from WAN to LAN.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up rules to allow ports 21, 22, 23, 25, 80, 443 from LAN to OPT1 and back.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enabling ICMP traffic while building out the lab may assist you in troubleshooting
    problems. ICMP should be blocked prior to starting the fictional penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: 'System name: **pfsense2**'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS: pfSense 2.0 (FreeBSD)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual disk size: 1 GB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RAM: 128'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two network adapters (Internal):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LAN= 192.168.40.2 (CORE40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAN = 192.168.30.2 (DEV30)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up DHCP for the Core (LAN) interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow private IPs through the WAN interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up rules to allow ALL from Core (WAN) to Dev (LAN) adapters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up rules to allow ALL from Dev (LAN) to Core (WAN)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If HDD space is at a premium, then try using pfsense1 as a linked base. This
    can be accomplished by cloning pfsense1 and choosing to link the devices. Check
    the box to reinitialize interface MAC addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'System name: **WebServer**'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS: Ubuntu 10.04'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Users: John Dow (jdow), Password: 039Alts2010'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual disk size: 6 GB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RAM: 128 MB minimum. (512 MB recommended)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Packages to install:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lamp-server^
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress (latest version)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two network adapters (Internal):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eth0 = 192.168.20.100 (DMZ20)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eth1 = 192.168.30.100 (DEV30)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform all system updates prior to locking in the static IPs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'System name: **DevMachine**'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS: FreeBSD-8.2-RELEASE-i386-disc1: Located on most mirror paths as: (/pub/FreeBSD/releases/i386/ISO-IMAGES/8.2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Users: John Doe (jdoe), Password: 1A2b3C4d!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual disk size: 4 GB (Standard install, basic user will fit in 4 GB or less)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RAM: 128 MB minimum (256 MB recommended)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two network adapters (Internal):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eth0 = 192.168.40.101 (CORE40)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eth1 = 192.168.30.101 (DEV30)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This system will need the default SSH and INETD (Telnet, FTP) servers installed.
    DHCP must be configured for BOTH adapters on this system or you will experience
    technical difficulties. This can be accomplished during the operating system install
    procedure. Use the user name jdoe in all instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'System name: **Kioptrix Level 1**'
  prefs: []
  type: TYPE_NORMAL
- en: 1 Network Adapter on CORE40 (DHCP will assign the address)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This system will serve as a placeholder for the eventual ArchLinux database
    server that contains the company's critical infrastructure. The administrator
    claims that you should never be able to get to this zone from the `192.168.40.0/24`
    network. He is so certain of this fact that he has placed a known vulnerable system
    on the core segment to prove a point. Your goal will be to gain root on the Kioptrix
    machine from the `192.168.40.0/24` network segment.
  prefs: []
  type: TYPE_NORMAL
- en: Additional system modifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout the book we have thoroughly covered the installation and configuration
    of operating systems such as pfSense and Kioptrix in a VirtualBox environment,
    thus for the sake of brevity we will focus only on those steps that make the systems
    in this exercise unique and different from the default installs. Luckily, we only
    have to worry about configuring the Ubuntu web server.
  prefs: []
  type: TYPE_NORMAL
- en: Web server modifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The system named `Webserver` will need to have `lamp-server^` installed and
    running. As previously noted, we also need to install and configure the latest
    edition of WordPress. The WordPress team has done an excellent job at providing
    the community with step-by-step detailed installation and configuration instructions
    that can be accessed on the Internet at: [http://codex.wordpress.org/Installing_WordPress](http://codex.wordpress.org/Installing_WordPress).
    The usernames, databases, and passwords used are unimportant at this point, but
    should be easy to remember and yet strong. Remember that the administrator in
    this exercise intended on building out a secure environment. When you are testing
    this environment you will need to "forget" that you know what the passwords and
    usernames are…'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to fully patching and updating this system, we also need to set
    up the SSH server to accept our jdow user from a (Internet) connection which we
    emulate at 192.168.10.0/24 once WordPress, OpenSSH and and the static IPs have
    been configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once WordPress is up and running we need to replace the sample page with the
    following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us some information to work with on the site. We can move on
    to the more interesting aspects of this chapter! When browsing to our `WebServer`
    machine we should see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web server modifications](img/7744OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The lab has been set up, connections verified; it is time to put the information
    gained throughout the book to work. Challenge yourself to perform a full penetration
    test from start to finish on this environment. That includes the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the scope (the administrator only allows you to have two hours on
    his VPN).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the reason why the client wants a penetration test. This is critical
    to being able to truly meet the user's needs. For some professions this is easy,
    but for penetration testers this is not always the case. Determine if your customer
    wants a penetration test or something more closely aligned with a general vulnerability
    analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rules of engagement documentation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the provided information to create a practical rules of engagement document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine and document the scope within the ROE.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solidify any assumptions about the test within the ROE.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A clearly defined goal. What do you need to do to prove success? The days of
    simply showing a screenshot with `whoami = root` is not going to be sufficient
    for most audiences.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decide if you will be using Dradis, Magic Tree or other data management tool
    to manage your results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lay out your initial test plans. It is important to know your initial steps
    in advance of testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform your reconnaissance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start the enumeration and decide on a plan of attack. Change your test plan
    accordingly. Depending on the scope you may be able to throw a vulnerability scan
    or an application scan against the resources. This will be loud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During enumeration you should gather information about possible firewalls, IDS,
    or load balancing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute your attack plan. Due to the nature of penetration testing this will
    vary from test to test and will sometimes even need to be changed on the fly.
    If something does not work as expected be ready with a backup plan.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When successfully gaining access to systems perform post-exploitation and if
    required set up a pivot point to dig deeper into the network architecture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Achieve the goal of the penetration test.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate your reports.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up meetings to review the results with your customers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although the "exploitation" phase of penetration test is most sexy, the other
    steps are just as important to a successful penetration test. Be sure to practice
    and prepare for each step in the process. Understanding the tools and techniques
    in a penetration test is very important, but these will change constantly the
    process itself remains fairly stable and thus any effort to automate or improve
    these steps will be most beneficial in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Best of luck to you! You should be able to get all the way to root on the Kioptrix
    machine by the end of your testing. Be sure to carefully document your steps and
    any suggested changes that should be made to make the network more secure! Do
    not read ahead as it would contain spoilers that will ruin the testing for you.
  prefs: []
  type: TYPE_NORMAL
- en: The walkthrough
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, you have been able to complete your testing before reading this portion
    of the chapter. It will contain examples and at least one method of accomplishing
    the goal we have set which is to breach the security of the virtual NewAlts Development
    Lab running on our own network or machine. If your documentation or methodology
    to obtain the initial goal is different than that described within, it does not
    mean it is wrong, just different. With practice, penetration testers will develop
    their own methods which are tailored to their skill set and knowledgebase.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There may be other methods to reach our goal than those described in this chapter.
    The goal of the chapter is to give an example of a penetration testing workflow
    from start to finish. If you find other methods of obtaining root on the Kioptrix
    machine in the CORE network, congratulations are due! That is what penetration
    testing is all about!
  prefs: []
  type: TYPE_NORMAL
- en: Defining the scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scope of this particular test can be clearly defined by reading the scenario
    objective and background information.
  prefs: []
  type: TYPE_NORMAL
- en: We have two hours to test a virtual environment that has been made to emulate
    what our client wishes to eventually use in production.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The only user we are aware of is the administrator who has contracted us on
    behalf of the fictional NewAlts Research and Development Corporation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The information contained on this network is completely harmless to the corporation.
    There is not special need to keep things encrypted or to be cautious with third-party
    services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are to achieve complete compromise of the Kioptrix machine that has been
    placed in the CORE 192.168.40.0/24 network segment, which is unreachable from
    the 192.168.10.0/24 segment that is emulating the Internet connection which will
    exist in the production environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We may use any technique known to us including social engineering, exploitation,
    denial of service, and so on. The sky is the limit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the data or information on these systems is in contradiction to any
    laws that we know of, state or federal. As the network is for educational purposes
    only we can do whatever we like with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All systems on the network will be open source based.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With these items in mind it should become apparent that the challenge here will
    come with the limited time factor. If there are several people on our team we
    could propose that we use several testers with very specific tasks that can be
    run in parallel to make the most out of the limited two-hour testing time. (The
    admin refuses to pay for more than two hours of our standard rate which is based
    on a maximum of three testers having to join in the testing).
  prefs: []
  type: TYPE_NORMAL
- en: Determining the "why"
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the "why" is clearly laid out for us in this instance we should not
    become complacent. It helps testers and the business alike to understand what
    the real goal of your testing is and allows you to focus on aligning your testing
    and reporting with accomplishing this goal.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the administrator has clearly stated that vulnerability analysis
    tools have already been used against this network and he has addressed the issues
    with exception of those that the business has considered acceptable. This will
    vary from business to business, based on the risk appetite of the corporation
    or individuals you are dealing with. Understanding the risk appetite may assist
    in determining the "why" as well. Perhaps you are only testing the environment
    just to prove to the business unit that they can remain confident that it will
    take an attacker more than two hours to compromise their network, which just happens
    to be how long it takes their security teams to locate any strange activities
    occurring in their environment.
  prefs: []
  type: TYPE_NORMAL
- en: So what is the "why" of this particular test?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The administrator has clearly stated that there will be a direct monetary impact
    if any of their critical data were to be collected by malicious intruders. The
    scientists who work at the corporation are not technically savvy and will be using
    rudimentary solutions to technical problems. It can be safe to say they will be
    storing unencrypted test files that are shared by multiple users on a file server
    that contain the critical data. The "why" in this case is a fear that a lot of
    money will be lost and a need for someone to assure the business that the administrator's
    suggested security configuration will be sufficient to prevent this from occurring.
  prefs: []
  type: TYPE_NORMAL
- en: Developing the Rules of Engagement document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This most critical document must be clearly written, and well defined. We now
    have all of the information we need to develop the Rules of Engagement document
    and before any testing is to occur it must be presented and agreed upon.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The rules of engagement should be signed by a C-level executive who has the
    full authority to represent your client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Rules of Engagement must detail the scope, systems, network addresses,
    and what you are and are not allowed to do during testing. Regardless of the template,
    or look and feel you decide upon, the document you have created to meet the challenge
    should have at minimum the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The date the ROE was created:** 01/02/2020.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The names and contact information of your company and that of any testers
    that will be directly involved in testing:** Lee Allen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A summary of the request:** We are to achieve complete compromise of the
    Kioptrix machine that has been placed in the CORE network segment which is unreachable
    from the 192.168.10.0/24 segment that is emulating the Internet connection that
    will exist in the production environment.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A quick description of what a penetration test is (the following has been
    taken from** [Chapter 1](ch01.html "Chapter 1. Planning and Scoping for a Successful
    Penetration Test"), *Planning and Scoping for a Successful Penetration Test*,
    **in this book):** Penetration testing allows the business to understand if the
    mitigation strategies employed are actually working as expected; it essentially
    takes the guesswork out of the equation. The penetration tester will be expected
    to emulate the actions that an attacker would attempt and will be challenged with
    proving that they were able to compromise the critical systems targeted. This
    allows the business to understand if the security controls in place are working
    as intended and if there are any areas that need to be improved.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The type of testing that will be performed:** Full compromise penetration
    test with no restrictions other than timeframe.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Limitations:** 2 hour timeframe.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Clearly defined goal of the penetration test:** Completely compromise the
    Kioptrix machine that resides in the CORE network segment within two hours.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IP Ranges:** 192.168.10.0/24, 192.168.20.0/24, 192.168.30.0/24, 192.168.40.0/24.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Data handling:** Data has been stated to be for testing only and thus not
    to be considered or treated as confidential in any manner.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**How will any data found to be in possible violation of state or federal laws
    be handled:** Proper authorities will be notified prior to the business or its
    entities.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**List of NewAlts Development contacts and their phone numbers, and so on:**
    Jon Doe.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Signatures of pertinent officers of the company needed:** NewAlts Development
    CISO, CIO or other officer in charge. Unless he can prove otherwise the administrator
    does not have sufficient authority to allow you to test the assets of the NewAlts
    Development Corporation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initial plan of attack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the ROE out of the way we can take a look at the network diagram and develop
    a plan of attack. Let's review the network layout that was provided to us by the
    administrator.
  prefs: []
  type: TYPE_NORMAL
- en: '![Initial plan of attack](img/7744OS_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this whitebox test we were provided with the network architecture to make
    up for the fact that we are testing a mock environment and are limited by a strict
    timeframe. We need to determine if the router will let us through from pfSense1
    to the WebServer and to the DevServer. It is unclear from the provided diagram
    if we can reach the Kioptrix Level 1 machine remotely or not. Our initial plan
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform a vulnerability scan on the 192.168.10.1 firewall and gateway. We know
    about it so we may as well take advantage of it! Do the same to all systems listed
    on this diagram.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform a network and vulnerability scan against 192.168.20.0/24.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we can reach the other segments from the 192.168.10.0/24 device we will perform
    a network and vulnerability scan against those as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we cannot reach any of the networks we will perform a web application scan
    against the WebServer applications and see if there are any web application vulnerabilities
    we can take advantage of.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This most basic of plans will suffice in getting us started. The information
    we gather from these steps should be sufficient to move us to the next steps.
    Who knows, maybe the administrator was right, and the setup is actually secure!
    (Not very likely in this case!)
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the limited scope of this test it is acceptable to use any means of documentation
    available that will allow you to provide an acceptable report to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Enumeration and exploitation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by executing the first step in our action plan and scan the devices
    using the tools of our choice. In this case I decided to use MagicTree. It allows
    me to run the queries from within the app and has the ability to generate reports
    on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: Load up MagicTree and create a new node as we did in [Chapter 1](ch01.html "Chapter 1. Planning
    and Scoping for a Successful Penetration Test"), *Planning and Scoping for a Successful
    Penetration Test*, of the book and run an Nmap scan against any of the networks
    that are available from the 192.168.10.0/24 subnet. If everything was configured
    properly you should only be able to see `192.168.20.1` and the `Webserver` on
    the `192.168.20.0/24` network.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When reviewing the data we obtain that there are some interesting services running
    on these systems that should be reviewed. Let's run a quick vulnerability scan
    against them to save time. We will use OpenVas to perform the vulnerability scan.
    OpenVas is included in BackTrack 5 R1 but must be configured properly before being
    used. Instructions on setting up OpenVas can be found on the `Backtrack-linux.org`
    site at [http://www.backtrack-linux.org/wiki/index.php?title=OpenVas&oldid=756](http://www.backtrack-linux.org/wiki/index.php?title=OpenVas&oldid=756).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that OpenVas configuration will require an Internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: After realizing that the scans will take too long and would put us over the
    two-hour mark, we determine to move on to the next phase in our test plan and
    quickly determine that the installed software is reasonably updated and no well-known
    exploits are available for any of the open services. From looking at the website
    we also notice that it is a standard install of the latest version of WordPress.
    When reviewing the site closely we notice a contact e-mail address. We add this
    e-mail address to our MagicTree notes. There is a good chance the e-mail name
    **jdow** is also used as a network logon. If this is the case we have half of
    the puzzle solved. There may be a chance we can brute force Joe's SSH password.
  prefs: []
  type: TYPE_NORMAL
- en: At this point we decide that we will give the SSH server a try. According to
    the scope we are allowed any tool we have available which opens up brute forcing
    passwords for us. Once again, keep in mind that there is a limited timeframe for
    this test so we decide to use `cewl` to pull a password list from the website
    on 192.168.20.100.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command creates a text file named `dict` in our current directory. We can
    try to run this list as is to see if these words will help us in brute forcing
    the username or password for the SSH server.
  prefs: []
  type: TYPE_NORMAL
- en: We will then take that list and run it through `cupp` to add some special characters,
    concatenate words, and just generally abuse the file. After this is done we can
    save time by eliminating many of the passwords that are very unlikely to be used
    such those with only numbers such as 00000001, and so on. If the word list turns
    out too large, then remove one of the options and give it a try.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Run this list through `xhydra` using the `jdow` username and the newly generated
    password list and you will hopefully come up with the following prompt (it took
    15 minutes on the test system with the entire lab running; it may take longer
    on your system, especially since there is an entire lab using a large portion
    of your resources):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we have an SSH connection. Log into WebServer and see what the permissions
    are for the jdow account. You will realize that we do not have the ability to
    install any software. Instead we decide to use WebServer as a pivot point (SSH
    Proxy in this case) using MetaSploit. First we need to set up our SSH tunnel in
    BackTrack to the Webserver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This creates our tunnel on port 3306 which will be used to launch our attacks.
    Here is an example of the tunnel using 443 which would add the additional benefit
    of blending in with other encrypted traffic on the network. We choose 3306 instead
    due to some stability issues with the exploit we end up using.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Logging into Metasploit we set up a proxy connection to allow us to use Metasploit
    through our WebServer connection. In Metasploit perform the following commands
    adapted from a mailing list response by HD Moore. The original message can be
    found at: [https://mail.metasploit.com/pipermail/framework/2010-January/005675.html](http://https://mail.metasploit.com/pipermail/framework/2010-January/005675.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These commands will set the global variables for your proxy and also for your
    preferred payload. We choose our default local port to be 45567.
  prefs: []
  type: TYPE_NORMAL
- en: As the next step we need to confirm that there is in fact a FreeBSD machine
    available on the 192.168.30.0/24 network as we were informed by the Administrator.
    To do this we can banner grab from the Telnet server to see if there is an indication
    of which operation system is being used. This may also be a good idea to see if
    there is any information available from an NMAP scan.
  prefs: []
  type: TYPE_NORMAL
- en: With using a standard Nmap scan we notice that our traffic is being intercepted.
    We could use other methods of scanning at this point but decide to try the most
    commonly found ports manually, instead of waiting on the results of a proxied
    scan which can be slow.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We cannot run a standard SYN scan from this pivot. There are alternative methods
    of scanning, but that is beyond the scope of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We happen to know that there is a known exploit for FreeBSD Telnet which the
    Administrator seems to have installed on this system (confirmed by using NetCat
    from our SSH session on the WebServer). We used `nc` to check for the most commonly
    found ports such as 80, 25, 21, and more. Before going that route we first checked
    to see if nmap or another scanner was installed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a shot at executing the known exploit. There is a good chance that
    the target system is vulnerable as it is a relatively new exploit.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First we searched for Telnet in MSF and then we have set up everything we need
    to on `exploit/freebsd/telnet/telnet_encrypt_keyid` and are ready to attempt the
    exploit.
  prefs: []
  type: TYPE_NORMAL
- en: It works and we can run a few commands to verify who we are logged in as, and
    what the system is connected to.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that we can now use this system as an attack platform against 192.168.40.0/24,
    which is the CORE secure zone that the administrator mentioned. Let''s try to
    escalate privilege on the games account. We change directory to `/etc/` and run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the test file that is generated over the `passwd` file and we should be
    able to log in with that account now. Note: We are not able to change our password
    for the games account or any other account for that matter! The default `pam`
    security prevents us from this otherwise trivial task! This once again demonstrates
    that as a penetration tester you will have to remain diligent and never give up.
    If something does not work try again with a few changes or change the entire approach
    until you are in!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, we are on the system as root so we try `/usr/sbin/adduser` and
    set up a user named lee with the password lee. The `awk` statement is modified
    and we try again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now let's go over to an SSH session on the WebServer and see how our lee account
    worked out for us.
  prefs: []
  type: TYPE_NORMAL
- en: For the next phase we must use our knowledge that the last target system is
    known to us. We already understand its vulnerabilities and have code (remember
    `10.c?)` available to us that we can compile on the 192.168.30.101 system to exploit
    the system at 192.168.40.102\. One of many methods of proceeding at this point
    include simply copying the code for `10.c` into vi and then compiling via GCC
    on the FreeBSD machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once `10.c` was compiled we were able to run it and gain root access to the
    Kioptrix level one machine. To prove that we were able to access this machine
    we decide to change the root password. This is typically not a good idea, but
    according to our rules of engagement it is fully acceptable. We change the password
    of the Kioptrix machine to `NothingIsSecure` using the `passwd` command and then
    log off and break all connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'We reconnect to SSH on our WebServer machine, SSH into the DevServer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We follow up with a login to SSH into our Kioptrix machine using our new password
    to verify we have achieved the goal of the penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enumeration and exploitation](img/7744OS_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have successfully completed the penetration test and now must produce documentation.
    Your report should look professional, organized, and clearly explain the findings,
    and it should also set to non-technical language how these issues may have been
    overlooked. Focus on what allowed you to enter, but also make sure to point out
    when something worked such as the `pam` restrictions encountered when attempting
    to add a password for the standard games account (which should technically not
    exist in an environment that claims to be secure).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a moment and break down the problems we encountered during this
    penetration test:'
  prefs: []
  type: TYPE_NORMAL
- en: We were able to brute force a password that used upper case and lower case characters
    as well as numbers. The password was also over eight characters long which is
    fairly standard in a secured environment. At no time should a user ever use passwords
    that are based on a company name or other trivial fact. If someone has a page
    stating that they love football, then you better believe it will be in someone's
    base wordlist. The recommendation here would be to restrict the SSH connection
    to specific IPs or at minimum require certificates in addition to simple logon.
    Although this seems trivial, many corporations continue to overlook this simple
    step. Account lockouts are also a tried and true method of thwarting brute force
    password attacks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We exploited a known vulnerability. Odds are that this vulnerability would have
    been patched eventually. The real problem here is that Telnet was running in the
    first place. It is a known insecure protocol that passes data in clear text. In
    this case, the business must have deemed it an acceptable risk due to the nature
    of the data being transferred. The lesson learned here should be that only critical
    services should be run at any time and that just because there is one layer of
    security does not mean that other systems can rely solely on that security mechanism.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Placing a known vulnerable system as the target is just asking for trouble.
    In a real world situation this will not be acceptable by any means. By using such
    a system the administrator will open up the potential for doubt in some individuals.
    They will not understand that the system represented their "hardened" server that
    will be present at launch. Explain that an attacker will have more than two hours
    to perform attacks and will install all sorts of malicious software that will
    assist in eventually cracking any hardened machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Network security devices are effective when properly monitored and controlled.
    What they are not however is a panacea. Only through defense in depth will a business
    that is on the Internet be truly secure, and even then there may be varying degrees
    of "secure" as new techniques are discovered by security researchers and malicious
    hackers alike. The thing to keep in mind is that the security researchers report
    their findings to help protect end users. When a security researcher releases
    information about a vulnerability it is important to remember that the vulnerability
    is not *new* it is newly announced. The security researcher did not create the
    vulnerability; he or she brought it to the attention of those who are responsible
    for correcting their coding errors. Malicious users may have already known about
    it and could have possibly even been using the vulnerability for years. The malicious
    attackers will keep their secrets close and maximize the profit gained from misusing
    the technology. Many businesses do not understand the distinction and it is our
    job to ensure they know who the real threat is and why security researchers perform
    the work they do.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have captured all of this and more in your mock report, congratulations!
    This challenge does not represent the most challenging environment possible, but
    was hopefully a good introduction into penetration testing of highly secured environments
    that use patched systems, firewalls, IDS's, and more to secure and protect their
    critical assets.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we started by setting up a scenario that would allow us to emulate
    a penetration test from start to finish. We moved on to setting up the test environment
    and then delving into the stages necessary for a successful penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Once the basics were covered you were challenged to perform a test of your own
    against this environment. Hopefully, it was both challenging and exciting for
    you!
  prefs: []
  type: TYPE_NORMAL
- en: 'We finished up the chapter by providing a walkthrough of one possible method
    of performing this penetration test. There are other ways of doing the same task,
    some better than others. The goal was to show just one of these methods. Play
    around with the lab and try additional scenarios. Use it to gain the skills you
    need or to hone the skills you have. When the time comes to do the job you will
    need all of the luck and skill you can get because if one thing is certain in
    this world: "Anything that can go wrong will go wrong" Murphy''s Law.'
  prefs: []
  type: TYPE_NORMAL
