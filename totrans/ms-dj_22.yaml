- en: Appendix A. Model Definition Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.xhtml "Chapter 4. Models"), *Models*, explains the basics
    of defining models, and we use them throughout the rest of the book. There is,
    however, a huge range of model options available not covered elsewhere. This appendix
    explains each possible model definition option.'
  prefs: []
  type: TYPE_NORMAL
- en: Fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most important part of a model-and the only required part of a model-is
    the list of database fields it defines.
  prefs: []
  type: TYPE_NORMAL
- en: Field name restrictions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Django places only two restrictions on model field names:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A field name cannot be a Python reserved word, because that would result in
    a Python syntax error. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A field name cannot contain more than one underscore in a row, due to the way
    Django''s query lookup syntax works. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Each field in your model should be an instance of the appropriate `Field` class.
    Django uses the field class types to determine a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: The database column type (for example, `INTEGER`, `VARCHAR`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The widget to use in Django's forms and admin site, if you care to use it (for
    example, `<input type="text">`, `<select>`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimal validation requirements, which are used in Django's admin interface
    and by forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each field class can be passed a list of option arguments, for example when
    we were building the book model in [Chapter 4](ch04.xhtml "Chapter 4. Models"),
    *Models*, our `num_pages` field looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we are setting the `blank` and `null` options for the field class.
    *Table A.2* lists all the field options in Django.
  prefs: []
  type: TYPE_NORMAL
- en: 'A number of fields also define additional options specific to that class, for
    example the `CharField` class has a required option `max_length` which defaults
    to `None`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this case we are setting the `max_length` field option to 100 to limit our
    book titles to 100 characters.
  prefs: []
  type: TYPE_NORMAL
- en: A complete list of field classes is in *Table A.1*, sorted alphabetically.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Default Widget** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AutoField` | N/A | An `IntegerField` that automatically increments according
    to available IDs. |'
  prefs: []
  type: TYPE_TB
- en: '| `BigIntegerField` | `NumberInput` | A 64-bit integer, much like an `IntegerField`
    except that it is guaranteed to fit numbers from `-9223372036854775808` to `9223372036854775807`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `BinaryField` | N/A | A field to store raw binary data. It only supports
    `bytes` assignment. Be aware that this field has limited functionality. |'
  prefs: []
  type: TYPE_TB
- en: '| `BooleanField` | `CheckboxInput` | A true/false field. If you need to accept
    `null` values then use `NullBooleanField` instead. |'
  prefs: []
  type: TYPE_TB
- en: '| `CharField` | `TextInput` | A string field, for small- to large-sized strings.
    For large amounts of text, use `TextField`.`CharField` has one extra required
    argument: `max_length`. The maximum length (in characters) of the field. |'
  prefs: []
  type: TYPE_TB
- en: '| `DateField` | `DateInput` | A date, represented in Python by a `datetime.date`
    instance. Has two extra, optional arguments: `auto_now` which automatically set
    the field to now every time the object is saved, and `auto_now_add` which automatically
    set the field to now when the object is first created. |'
  prefs: []
  type: TYPE_TB
- en: '| `DateTimeField` | `DateTimeInput` | A date and time, represented in Python
    by a `datetime.datetime` instance. Takes the same extra arguments as `DateField`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DecimalField` | `TextInput` | A fixed-precision decimal number, represented
    in Python by a `Decimal` instance. Has two required arguments: `max_digits` and
    `decimal_places`. |'
  prefs: []
  type: TYPE_TB
- en: '| `DurationField` | `TextInput` | A field for storing periods of time-modeled
    in Python by `timedelta`. |'
  prefs: []
  type: TYPE_TB
- en: '| `EmailField` | `TextInput` | A `CharField` that uses `EmailValidator` to
    validate the input. `max_length` defaults to `254`. |'
  prefs: []
  type: TYPE_TB
- en: '| `FileField` | `ClearableFileInput` | A file upload field. For more information
    on `FileField`, see the next section. |'
  prefs: []
  type: TYPE_TB
- en: '| `FilePathField` | `Select` | A `CharField` whose choices are limited to the
    filenames in a certain directory on the filesystem. |'
  prefs: []
  type: TYPE_TB
- en: '| `FloatField` | `NumberInput` | A floating-point number represented in Python
    by a `float` instance. Note when `field.localize` is `False`, the default widget
    is `TextInput` |'
  prefs: []
  type: TYPE_TB
- en: '| `ImageField` | `ClearableFileInput` | Inherits all attributes and methods
    from `FileField`, but also validates that the uploaded object is a valid image.
    Additional `height` and `width` attributes. Requires the Pillow library available
    at http://pillow.readthedocs.org/en/latest/. |'
  prefs: []
  type: TYPE_TB
- en: '| `IntegerField` | `NumberInput` | An integer. Values from `-2147483648` to
    `2147483647` are safe in all databases supported by Django. |'
  prefs: []
  type: TYPE_TB
- en: '| `GenericIPAddressField` | `TextInput` | An IPv4 or IPv6 address, in string
    format (for example, `192.0.2.30` or `2a02:42fe::4`). |'
  prefs: []
  type: TYPE_TB
- en: '| `NullBooleanField` | `NullBooleanSelect` | Like a `BooleanField`, but allows
    `NULL` as one of the options. |'
  prefs: []
  type: TYPE_TB
- en: '| `PositiveIntegerField` | `NumberInput` | An integer . Values from `0` to
    `2147483647` are safe in all databases supported by Django. |'
  prefs: []
  type: TYPE_TB
- en: '| `SlugField` | `TextInput` | Slug is a newspaper term. A slug is a short label
    for something, containing only letters, numbers, underscores or hyphens. |'
  prefs: []
  type: TYPE_TB
- en: '| `SmallIntegerField` | `NumberInput` | Like an `IntegerField`, but only allows
    values under a certain point. Values from `-32768` to `32767` are safe in all
    databases supported by Django. |'
  prefs: []
  type: TYPE_TB
- en: '| `TextField` | `Textarea` | A large text field. If you specify a `max_length`
    attribute, it will be reflected in the `Textarea` widget of the auto-generated
    form field. |'
  prefs: []
  type: TYPE_TB
- en: '| `TimeField` | `TextInput` | A time, represented in Python by a `datetime.time`
    instance. |'
  prefs: []
  type: TYPE_TB
- en: '| `URLField` | `URLInput` | A `CharField` for a URL. Optional `max_length`
    argument. |'
  prefs: []
  type: TYPE_TB
- en: '| `UUIDField` | `TextInput` | A field for storing universally unique identifiers.
    Uses Python''s `UUID` class. |'
  prefs: []
  type: TYPE_TB
- en: 'Table A.1: Django model field reference'
  prefs: []
  type: TYPE_NORMAL
- en: FileField notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `primary_key` and `unique` arguments are not supported, and will raise a
    `TypeError` if used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Has two optional arguments: FileField.upload_to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileField.storage`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FileField FileField.upload_to
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A local filesystem path that will be appended to your `MEDIA_ROOT` setting to
    determine the value of the `url` attribute. This path may contain `strftime()`
    formatting, which will be replaced by the date/time of the file upload (so that
    uploaded files don't fill up the given directory). This may also be a callable,
    such as a function, which will be called to obtain the upload path, including
    the filename. This callable must be able to accept two arguments, and return a
    Unix-style path (with forward slashes) to be passed along to the storage system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two arguments that will be passed are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Instance: **An instance of the model where the FileField is defined. More
    specifically, this is the particular instance where the current file is being
    attached. In most cases, this object will not have been saved to the database
    yet, so if it uses the default `AutoField`, it might not yet have a value for
    its primary key field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filename: **The filename that was originally given to the file. This may
    or may not be taken into account when determining the final destination path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FileField.storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A storage object, which handles the storage and retrieval of your files. The
    default form widget for this field is a `ClearableFileInput`. Using a `FileField`
    or an `ImageField` (see below) in a model takes a few steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In your settings file, you'll need to define `MEDIA_ROOT` as the full path to
    a directory where you'd like Django to store uploaded files. (For performance,
    these files are not stored in the database.) Define `MEDIA_URL` as the base public
    URL of that directory. Make sure that this directory is writable by the web server's
    user account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `FileField` or `ImageField` to your model, defining the `upload_to`
    option to specify a subdirectory of `MEDIA_ROOT` to use for uploaded files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All that will be stored in your database is a path to the file (relative to
    `MEDIA_ROOT`). You'll most likely want to use the convenient `url` attribute provided
    by Django. For example, if your `ImageField` is called `mug_shot`, you can get
    the absolute path to your image in a template with `{{ object.mug_shot.url }}`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that whenever you deal with uploaded files, you should pay close attention
    to where you're uploading them and what type of files they are, to avoid security
    holes. Validate all uploaded files so that you're sure the files are what you
    think they are. For example, if you blindly let somebody upload files, without
    validation, to a directory that's within your web server's document root, then
    somebody could upload a CGI or PHP script and execute that script by visiting
    its URL on your site. Don't allow that.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that even an uploaded HTML file, since it can be executed by the browser
    (though not by the server), can pose security threats that are equivalent to XSS
    or CSRF attacks. `FileField` instances are created in your database as `varchar`
    columns with a default max length of 100 characters. As with other fields, you
    can change the maximum length using the `max_length` argument.
  prefs: []
  type: TYPE_NORMAL
- en: FileField and FieldFile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you access a `FileField` on a model, you are given an instance of `FieldFile`
    as a proxy for accessing the underlying file. In addition to the functionality
    inherited from `django.core.files.File`, this class has several attributes and
    methods that can be used to interact with file data:'
  prefs: []
  type: TYPE_NORMAL
- en: FieldFile.url
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A read-only property to access the file's relative URL by calling the `url()`
    method of the underlying `Storage` class.
  prefs: []
  type: TYPE_NORMAL
- en: FieldFile.open(mode='rb')
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Behaves like the standard Python `open()` method and opens the file associated
    with this instance in the mode specified by `mode`.
  prefs: []
  type: TYPE_NORMAL
- en: FieldFile.close()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Behaves like the standard Python `file.close()` method and closes the file associated
    with this instance.
  prefs: []
  type: TYPE_NORMAL
- en: FieldFile.save(name, content, save=True)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This method takes a filename and file contents and passes them to the storage
    class for the field, then associates the stored file with the model field. If
    you want to manually associate file data with `FileField` instances on your model,
    the `save()` method is used to persist that file data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Takes two required arguments: `name` which is the name of the file, and `content`
    which is an object containing the file''s contents. The optional `save` argument
    controls whether or not the model instance is saved after the file associated
    with this field has been altered. Defaults to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the `content` argument should be an instance of `django.core.files.File`,
    not Python''s built-in file object. You can construct a `File` from an existing
    Python file object like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can construct one from a Python string like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: FieldFile.delete(save=True)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Deletes the file associated with this instance and clears all attributes on
    the field. This method will close the file if it happens to be open when `delete()`
    is called.
  prefs: []
  type: TYPE_NORMAL
- en: The optional `save` argument controls whether or not the model instance is saved
    after the file associated with this field has been deleted. Defaults to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that when a model is deleted, related files are not deleted. If you need
    to clean up orphaned files, you'll need to handle it yourself (for instance, with
    a custom management command that can be run manually or scheduled to run periodically
    via for example, `cron`).
  prefs: []
  type: TYPE_NORMAL
- en: Universal field options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Table A.2* lists all the optional field arguments in Django. They are available
    to all field types.'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `null` | If `True`, Django will store empty values as `NULL` in the database.
    Default is `False`. Avoid using `null` on string-based fields such as `CharField`
    and `TextField` because empty string values will always be stored as empty strings,
    not as `NULL`. For both string-based and non-string-based fields, you will also
    need to set `blank=True` if you wish to permit empty values in forms. If you want
    to accept `null` values with `BooleanField`, use `NullBooleanField` instead. |'
  prefs: []
  type: TYPE_TB
- en: '| `blank` | If `True`, the field is allowed to be blank. Default is `False`.
    Note that this is different than `null`. `null` is purely database-related, whereas
    `blank` is validation-related. |'
  prefs: []
  type: TYPE_TB
- en: '| `choices` | An iterable (for example, a list or tuple) consisting itself
    of iterables of exactly two items (for example, `[(A, B), (A, B) ...]`) to use
    as choices for this field. If this is given, the default form widget will be a
    select box with these choices instead of the standard text field. The first element
    in each tuple is the actual value to be set on the model, and the second element
    is the human-readable name. |'
  prefs: []
  type: TYPE_TB
- en: '| `db_column` | The name of the database column to use for this field. If this
    isn''t given, Django will use the field''s name. |'
  prefs: []
  type: TYPE_TB
- en: '| `db_index` | If `True`, a database index will be created for this field.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `db_tablespace` | The name of the database tablespace to use for this field''s
    index, if this field is indexed. The default is the project''s `DEFAULT_INDEX_TABLESPACE`
    setting, if set, or the `db_tablespace` of the model, if any. If the backend doesn''t
    support tablespaces for indexes, this option is ignored. |'
  prefs: []
  type: TYPE_TB
- en: '| `default` | The default value for the field. This can be a value or a callable
    object. If callable it will be called every time a new object is created. The
    default cannot be a mutable object (model instance, list, set, and others.), as
    a reference to the same instance of that object would be used as the default value
    in all new model instances. |'
  prefs: []
  type: TYPE_TB
- en: '| `editable` | If `False`, the field will not be displayed in the admin or
    any other `ModelForm`. They are also skipped during model validation. Default
    is `True`. |'
  prefs: []
  type: TYPE_TB
- en: '| `error_messages` | The `error_messages` argument lets you override the default
    messages that the field will raise. Pass in a dictionary with keys matching the
    error messages you want to override. Error message keys include `null`, `blank`,
    `invalid`, `invalid_choice`, `unique`, and `unique_for_date`. |'
  prefs: []
  type: TYPE_TB
- en: '| `help_text` | Extra help text to be displayed with the form widget. It''s
    useful for documentation even if your field isn''t used on a form. Note that this
    value is *not* HTML-escaped in automatically-generated forms. This lets you include
    HTML in `help_text` if you so desire. |'
  prefs: []
  type: TYPE_TB
- en: '| `primary_key` | If `True`, this field is the primary key for the model. If
    you don''t specify `primary_key=True` for any field in your model, Django will
    automatically add an `AutoField` to hold the primary key, so you don''t need to
    set `primary_key=True` on any of your fields unless you want to override the default
    primary-key behavior. The primary key field is read-only. |'
  prefs: []
  type: TYPE_TB
- en: '| `unique` | If `True`, this field must be unique throughout the table. This
    is enforced at the database level and by model validation. This option is valid
    on all field types except `ManyToManyField`, `OneToOneField`, and `FileField`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `unique_for_date` | Set this to the name of a `DateField` or `DateTimeField`
    to require that this field be unique for the value of the date field. For example,
    if you have a field `title` that has `unique_for_date="pub_date"`, then Django
    wouldn''t allow the entry of two records with the same `title` and `pub_date`.
    This is enforced by `Model.validate_unique()` during model validation but not
    at the database level. |'
  prefs: []
  type: TYPE_TB
- en: '| `unique_for_month` | Like `unique_for_date`, but requires the field to be
    unique with respect to the month. |'
  prefs: []
  type: TYPE_TB
- en: '| `unique_for_year` | Like `unique_for_date`, but requires the field to be
    unique with respect to the year. |'
  prefs: []
  type: TYPE_TB
- en: '| `verbose_name` | A human-readable name for the field. If the verbose name
    isn''t given, Django will automatically create it using the field''s attribute
    name, converting underscores to spaces. |'
  prefs: []
  type: TYPE_TB
- en: '| `validators` | A list of validators to run for this field. |'
  prefs: []
  type: TYPE_TB
- en: 'Table A.2: Django universal field options'
  prefs: []
  type: TYPE_NORMAL
- en: Field attribute reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every `Field` instance contains several attributes that allow introspecting
    its behavior. Use these attributes instead of `isinstance` checks when you need
    to write code that depends on a field's functionality. These attributes can be
    used together with the `Model._meta` API to narrow down a search for specific
    field types. Custom model fields should implement these flags.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes for fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Field.auto_created
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boolean flag that indicates if the field was automatically created, such as
    the `OneToOneField` used by model inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: Field.concrete
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boolean flag that indicates if the field has a database column associated with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Field.hidden
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boolean flag that indicates if a field is used to back another non-hidden field's
    functionality (for example, the `content_type` and `object_id` fields that make
    up a `GenericForeignKey`). The `hidden` flag is used to distinguish what constitutes
    the public subset of fields on the model from all the fields on the model.
  prefs: []
  type: TYPE_NORMAL
- en: Field.is_relation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boolean flag that indicates if a field contains references to one or more other
    models for its functionality (for example, `ForeignKey`, `ManyToManyField`, `OneToOneField`,
    and others).
  prefs: []
  type: TYPE_NORMAL
- en: Field.model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Returns the model on which the field is defined. If a field is defined on a
    superclass of a model, `model` will refer to the superclass, not the class of
    the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes for fields with relations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These attributes are used to query for the cardinality and other details of
    a relation. These attribute are present on all fields; however, they will only
    have meaningful values if the field is a relation type (`Field.is_relation=True`).
  prefs: []
  type: TYPE_NORMAL
- en: Field.many_to_many
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boolean flag that is `True` if the field has a many-to-many relation; `False`
    otherwise. The only field included with Django where this is `True` is `ManyToManyField`.
  prefs: []
  type: TYPE_NORMAL
- en: Field.many_to_one
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boolean flag that is `True` if the field has a many-to-one relation, such as
    a `ForeignKey`; `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Field.one_to_many
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boolean flag that is `True` if the field has a one-to-many relation, such as
    a `GenericRelation` or the reverse of a `ForeignKey`; `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Field.one_to_one
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boolean flag that is `True` if the field has a one-to-one relation, such as
    a `OneToOneField`; `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Field.related_model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Points to the model the field relates to. For example, `Author` in `ForeignKey(Author)`.
    If a field has a generic relation (such as a `GenericForeignKey` or a `GenericRelation`)
    then `related_model` will be `None`.
  prefs: []
  type: TYPE_NORMAL
- en: Relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django also defines a set of fields that represent relations.
  prefs: []
  type: TYPE_NORMAL
- en: ForeignKey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A many-to-one relationship. Requires a positional argument: the class to which
    the model is related. To create a recursive relationship-an object that has a
    many-to-one relationship with itself-use `models.ForeignKey(''self'')`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to create a relationship on a model that has not yet been defined,
    you can use the name of the model, rather than the model object itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To refer to models defined in another application, you can explicitly specify
    a model with the full application label. For example, if the `Manufacturer` model
    above is defined in another application called `production`, you''d need to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This sort of reference can be useful when resolving circular import dependencies
    between two applications. A database index is automatically created on the `ForeignKey`.
    You can disable this by setting `db_index` to `False`.
  prefs: []
  type: TYPE_NORMAL
- en: You may want to avoid the overhead of an index if you are creating a foreign
    key for consistency rather than joins, or if you will be creating an alternative
    index like a partial or multiple column index.
  prefs: []
  type: TYPE_NORMAL
- en: Database representation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Behind the scenes, Django appends `"_id"` to the field name to create its database
    column name. In the above example, the database table for the `Car` model will
    have a `manufacturer_id` column.
  prefs: []
  type: TYPE_NORMAL
- en: You can change this explicitly by specifying `db_column`, however, your code
    should never have to deal with the database column name, unless you write custom
    SQL. You'll always deal with the field names of your model object.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ForeignKey` accepts an extra set of arguments-all optional-that define the
    details of how the relation works.'
  prefs: []
  type: TYPE_NORMAL
- en: limit_choices_to
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Sets a limit to the available choices for this field when this field is rendered
    using a `ModelForm` or the admin (by default, all objects in the queryset are
    available to choose). Either a dictionary, a `Q` object, or a callable returning
    a dictionary or `Q` object can be used. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'causes the corresponding field on the `ModelForm` to list only `Users` that
    have `is_staff=True`. This may be helpful in the Django admin. The callable form
    can be helpful, for instance, when used in conjunction with the Python `datetime`
    module to limit selections by date range. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If `limit_choices_to` is or returns a `Q object`, which is useful for complex
    queries, then it will only have an effect on the choices available in the admin
    when the field is not listed in `raw_id_fields` in the `ModelAdmin` for the model.
  prefs: []
  type: TYPE_NORMAL
- en: related_name
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The name to use for the relation from the related object back to this one.
    It''s also the default value for `related_query_name` (the name to use for the
    reverse filter name from the target model). See the related objects documentation
    for a full explanation and example. Note that you must set this value when defining
    relations on abstract models; and when you do so some special syntax is available.
    If you''d prefer Django not to create a backwards relation, set `related_name`
    to `''+''` or end it with `''+''`. For example, this will ensure that the `User`
    model won''t have a backwards relation to this model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: related_query_name
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The name to use for the reverse filter name from the target model. Defaults
    to the value of `related_name` if it is set, otherwise it defaults to the name
    of the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: to_field
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The field on the related object that the relation is to. By default, Django
    uses the primary key of the related object.
  prefs: []
  type: TYPE_NORMAL
- en: db_constraint
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Controls whether or not a constraint should be created in the database for
    this foreign key. The default is `True`, and that''s almost certainly what you
    want; setting this to `False` can be very bad for data integrity. That said, here
    are some scenarios where you might want to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: You have legacy data that is not valid.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You're sharding your database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this is set to `False`, accessing a related object that doesn't exist will
    raise its `DoesNotExist` exception.
  prefs: []
  type: TYPE_NORMAL
- en: on_delete
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When an object referenced by a `ForeignKey` is deleted, Django by default emulates
    the behavior of the SQL constraint `ON DELETE CASCADE` and also deletes the object
    containing the `ForeignKey`. This behavior can be overridden by specifying the
    `on_delete` argument. For example, if you have a nullable `ForeignKey` and you
    want it to be set null when the referenced object is deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The possible values for `on_delete` are found in `django.db.models`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CASCADE`: Cascade deletes; the default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PROTECT`: Prevent deletion of the referenced object by raising `ProtectedError`,
    a subclass of `django.db.IntegrityError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SET_NULL`: Set the `ForeignKey` null; this is only possible if `null` is `True`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SET_DEFAULT`: Set the `ForeignKey` to its default value; a default for the
    `ForeignKey` must be set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: swappable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Controls the migration framework's reaction if this `ForeignKey` is pointing
    at a swappable model. If it is `True`-the default-then if the `ForeignKey` is
    pointing at a model which matches the current value of `settings.AUTH_USER_MODEL`
    (or another swappable model setting) the relationship will be stored in the migration
    using a reference to the setting, not to the model directly.
  prefs: []
  type: TYPE_NORMAL
- en: You only want to override this to be `False` if you are sure your model should
    always point towards the swapped-in model-for example, if it is a profile model
    designed specifically for your custom user model. Setting it to `False` does not
    mean you can reference a swappable model even if it is swapped out-`False` just
    means that the migrations made with this `ForeignKey` will always reference the
    exact model you specify (so it will fail hard if the user tries to run with a
    User model you don't support, for example). If in doubt, leave it to its default
    of `True`.
  prefs: []
  type: TYPE_NORMAL
- en: ManyToManyField
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A many-to-many relationship. Requires a positional argument: the class to which
    the model is related, which works exactly the same as it does for `ForeignKey`,
    including recursive and lazy relationships. Related objects can be added, removed,
    or created with the field''s `RelatedManager`.'
  prefs: []
  type: TYPE_NORMAL
- en: Database representation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Behind the scenes, Django creates an intermediary join table to represent the
    many-to-many relationship. By default, this table name is generated using the
    name of the many-to-many field and the name of the table for the model that contains
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Since some databases don't support table names above a certain length, these
    table names will be automatically truncated to 64 characters and a uniqueness
    hash will be used. This means you might see table names like `author_books_9cdf4`;
    this is perfectly normal. You can manually provide the name of the join table
    using the `db_table` option.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ManyToManyField` accepts an extra set of arguments-all optional-that control
    how the relationship functions.'
  prefs: []
  type: TYPE_NORMAL
- en: related_name
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Same as `ForeignKey.related_name`.
  prefs: []
  type: TYPE_NORMAL
- en: related_query_name
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Same as `ForeignKey.related_query_name`.
  prefs: []
  type: TYPE_NORMAL
- en: limit_choices_to
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Same as `ForeignKey.limit_choices_to`. `limit_choices_to` has no effect when
    used on a `ManyToManyField` with a custom intermediate table specified using the
    `through` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: symmetrical
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Only used in the definition of ManyToManyFields on self. Consider the following
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When Django processes this model, it identifies that it has a `ManyToManyField`
    on itself, and as a result, it doesn't add a `person_set` attribute to the `Person`
    class. Instead, the `ManyToManyField` is assumed to be symmetrical-that is, if
    I am your friend, then you are my friend.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not want symmetry in many-to-many relationships with `self`, set `symmetrical`
    to `False`. This will force Django to add the descriptor for the reverse relationship,
    allowing `ManyToManyField` relationships to be non-symmetrical.
  prefs: []
  type: TYPE_NORMAL
- en: through
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Django will automatically generate a table to manage many-to-many relationships.
    However, if you want to manually specify the intermediary table, you can use the
    `through` option to specify the Django model that represents the intermediate
    table that you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common use for this option is when you want to associate extra data
    with a many-to-many relationship. If you don''t specify an explicit `through`
    model, there is still an implicit `through` model class you can use to directly
    access the table created to hold the association. It has three fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: The primary key of the relation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<containing_model>_id`: The `id` of the model that declares the `ManyToManyField`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<other_model>_id`: The `id` of the model that the `ManyToManyField` points
    to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This class can be used to query associated records for a given model instance
    like a normal model.
  prefs: []
  type: TYPE_NORMAL
- en: through_fields
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Only used when a custom intermediary model is specified. Django will normally
    determine which fields of the intermediary model to use in order to establish
    a many-to-many relationship automatically.
  prefs: []
  type: TYPE_NORMAL
- en: db_table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The name of the table to create for storing the many-to-many data. If this is
    not provided, Django will assume a default name based upon the names of the table
    for the model defining the relationship and the name of the field itself.
  prefs: []
  type: TYPE_NORMAL
- en: db_constraint
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Controls whether or not constraints should be created in the database for the
    foreign keys in the intermediary table. The default is `True`, and that's almost
    certainly what you want; setting this to `False` can be very bad for data integrity.
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, here are some scenarios where you might want to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: You have legacy data that is not valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You're sharding your database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is an error to pass both `db_constraint` and `through`.
  prefs: []
  type: TYPE_NORMAL
- en: swappable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Controls the migration framework's reaction if this `ManyToManyField` is pointing
    at a swappable model. If it is `True`--the default-then if the `ManyToManyField`
    is pointing at a model which matches the current value of `settings.AUTH_USER_MODEL`
    (or another swappable model setting) the relationship will be stored in the migration
    using a reference to the setting, not to the model directly.
  prefs: []
  type: TYPE_NORMAL
- en: You only want to override this to be `False` if you are sure your model should
    always point towards the swapped-in model-for example, if it is a profile model
    designed specifically for your custom user model. If in doubt, leave it to its
    default of `True`. `ManyToManyField` does not support `validators`. `null` has
    no effect since there is no way to require a relationship at the database level.
  prefs: []
  type: TYPE_NORMAL
- en: OneToOneField
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A one-to-one relationship. Conceptually, this is similar to a `ForeignKey` with
    `unique=True`, but the reverse side of the relation will directly return a single
    object. This is most useful as the primary key of a model which extends another
    model in some way; multi table inheritance is implemented by adding an implicit
    one-to-one relation from the child model to the parent model, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'One positional argument is required: the class to which the model will be related.
    This works exactly the same as it does for `ForeignKey`, including all the options
    regarding recursive and lazy relationships. If you do not specify the `related_name`
    argument for the `OneToOneField`, Django will use the lower-case name of the current
    model as default value. With the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'your resulting `User` model will have the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'A `DoesNotExist` exception is raised when accessing the reverse relationship
    if an entry in the related table doesn''t exist. For example, if a user doesn''t
    have a supervisor designated by `MySpecialUser`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, `OneToOneField` accepts all of the extra arguments accepted by
    `ForeignKey`, plus one extra argument:'
  prefs: []
  type: TYPE_NORMAL
- en: parent_link
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When `True` and used in a model which inherits from another concrete model,
    indicates that this field should be used as the link back to the parent class,
    rather than the extra `OneToOneField` which would normally be implicitly created
    by subclassing. See *One-to-one relationships* in the next chapter for usage examples
    of `OneToOneField`.
  prefs: []
  type: TYPE_NORMAL
- en: Model metadata options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Table A.3* is a complete list of model meta options you can give your model
    in its internal `class Meta`. For more detail on each meta option as well as examples,
    see the Django documentation at [https://docs.djangoproject.com/en/1.8/ref/models/options/](https://docs.djangoproject.com/en/1.8/ref/models/options/).'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Notes** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `abstract` | If `abstract = True`, this model will be an abstract base class.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `app_label` | If a model is defined outside of an application in `INSTALLED_APPS`,
    it must declare which app it belongs to. |'
  prefs: []
  type: TYPE_TB
- en: '| `db_table` | The name of the database table to use for the model. |'
  prefs: []
  type: TYPE_TB
- en: '| `db_tablespace` | The name of the database tablespace to use for this model.
    The default is the project''s `DEFAULT_TABLESPACE` setting, if set. If the backend
    doesn''t support tablespaces, this option is ignored. |'
  prefs: []
  type: TYPE_TB
- en: '| `default_related_name` | The name that will be used by default for the relation
    from a related object back to this one. The default is `<model_name>_set`. |'
  prefs: []
  type: TYPE_TB
- en: '| `get_latest_by` | The name of an orderable field in the model, typically
    a `DateField`, `DateTimeField`, or `IntegerField`. |'
  prefs: []
  type: TYPE_TB
- en: '| `managed` | Defaults to `True`, meaning Django will create the appropriate
    database tables in `migrate` or as part of migrations and remove them as part
    of a `flush` management command. |'
  prefs: []
  type: TYPE_TB
- en: '| `order_with_respect_to` | Marks this object as orderable with respect to
    the given field. |'
  prefs: []
  type: TYPE_TB
- en: '| `ordering` | The default ordering for the object, for use when obtaining
    lists of objects. |'
  prefs: []
  type: TYPE_TB
- en: '| `permissions` | Extra permissions to enter into the permissions table when
    creating this object. |'
  prefs: []
  type: TYPE_TB
- en: '| `default_permissions` | Defaults to `(''add'', ''change'', ''delete'')`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `proxy` | If `proxy = True`, a model which subclasses another model will
    be treated as a proxy model. |'
  prefs: []
  type: TYPE_TB
- en: '| `select_on_save` | Determines if Django will use the pre-1.6 `django.db.models.Model.save()`
    algorithm. |'
  prefs: []
  type: TYPE_TB
- en: '| `unique_together` | Sets of field names that, taken together, must be unique.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `index_together` | Sets of field names that, taken together, are indexed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `verbose_name` | A human-readable name for the object, singular. |'
  prefs: []
  type: TYPE_TB
- en: '| `verbose_name_plural` | The plural name for the object. |'
  prefs: []
  type: TYPE_TB
- en: 'Table A.3: Model metadata options'
  prefs: []
  type: TYPE_NORMAL
