- en: 'Chapter 11: Troubleshooting and Monitoring Your Workloads'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Troubleshooting and logging are very much related; you start analyzing the Event,
    Service and System logs when you experience problems.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting problems and fixing the problems found in a cloud environment
    can be different from troubleshooting in more classic deployments. This chapter
    explains the differences, the challenges, and the new possibilities of troubleshooting
    Linux workloads in the Azure environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you''ll be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Achieve performance analysis in a Linux system using different tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor metrics such as CPU, memory, storage, and network details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Azure tooling to identify and fix problems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Linux tooling to identify and fix problems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this chapter, you'll need one or two VMs running a Linux distribution. You
    can use the smallest size if you want. The `audit` daemon must be installed and,
    for the purpose of having audit system logs to analyze and understand, it's a
    good idea to install Apache and a MySQL/MariaDB server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example in CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`auditd` gives in-depth details about your server performance and activity
    by using audit rules that can be modified based on your needs. To install `audit`
    daemon, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On executing the preceding command, you''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the audit daemon](img/B15455_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Installing the audit daemon'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you can see the list of installed audit packages as shown previously, then
    it''s installed already; if not, then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing `auditd` successfully, you need to start the `auditd` service
    to start collecting audit logs and then store the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to start `auditd` at boot time, then you have to use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s verify whether `auditd` is successfully installed and has started
    collecting logs using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Verifying of an installation of auditd and collection of logs](img/B15455_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Verifying the successful installation of auditd and collection
    of logs'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this chapter, we will cover general Azure management and Azure Monitor. The
    Log Analytics agent for Linux, which is needed to collect information from the
    VM, is not supported in every Linux distribution; please visit [https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/oms-linux](https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/oms-linux)
    before making a decision about which distribution you want to use in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Operations Management Suite** (**OMS**) in general was retired and transitioned
    to Azure and the name ''''OMS'''' is not used anywhere anymore, except in some
    variable names. It is now known as Azure Monitor. For more information on naming
    and terminology changes, please refer to [https://docs.microsoft.com/en-gb/azure/azure-monitor/terminology](https://docs.microsoft.com/en-gb/azure/azure-monitor/terminology),
    or you can also get detailed information about the transition at [https://docs.microsoft.com/en-us/azure/azure-monitor/platform/oms-portal-transition](https://docs.microsoft.com/en-us/azure/azure-monitor/platform/oms-portal-transition).'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Your System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learning to troubleshoot your workloads will help you in your daily job. Troubleshooting
    in Azure is not different from doing so in other environments. In this section,
    we are going to see some tips and tricks that will help you in your daily job.
  prefs: []
  type: TYPE_NORMAL
- en: No Remote Access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you don't have access to your Azure VM via SSH, you can run commands via
    the Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run a command on your Azure VM from the Azure portal, log in to your Azure
    portal, navigate to your VM and select **Run Command**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A list of commands to navigate to the VM section within the Azure portal](img/B15455_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: Navigating to the VM section within the Azure portal'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Alternatively, you can use the command line, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `az vm run` command can be used to run shell scripts in your VM for general
    machine or application management and to diagnose issues.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are doing it via the command line or via the Azure portal, the `az
    vm` command only works if the Microsoft Azure Linux agent is still running and
    reachable.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can get the latest Microsoft Azure PowerShell repository at [https://github.com/Azure/azure-powershell](https://github.com/Azure/azure-powershell),
    which has the installation steps and its usage. `az` is replacing AzureRM and
    all the new Azure PowerShell features will be available only in `az` going forward.
  prefs: []
  type: TYPE_NORMAL
- en: 'As per the security best practice, you need to change the password by logging
    in to your Azure account and using `az vm user` to reset the password as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This only works if you have a user that is configured with a password. If you
    deployed your VM with SSH keys, then you are lucky: the **Reset password** option
    in the same section will do the job.'
  prefs: []
  type: TYPE_NORMAL
- en: This option uses the VMAccess extension ([https://github.com/Azure/azure-linux-extensions/tree/master/VMAccess](https://github.com/Azure/azure-linux-extensions/tree/master/VMAccess)).
    Like the **Run command** option discussed earlier, it needs the Azure VM Agent.
  prefs: []
  type: TYPE_NORMAL
- en: Working on the Port
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reason that you don't have remote access may be network-related. In *Chapter
    5*, *Advanced Linux Administration*, the `ip` command was briefly introduced in
    the *Networking* section. You can use this command to verify the IP address and
    the route table.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Azure site, the network and the network security groups must be checked,
    as covered in *Chapter 3*, *Basic Linux Administration*. In the VM, you can use
    the `ss` command, such as `ip`, which is a part of the `iproute2` package to list
    the UPD (`-u`) and TCP (`p`) ports in a listening state, together with the process
    ID (`-p`) that opened the port:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the ss -tulpn command to check the ports details](img/B15455_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: Using the ss -tulpn command to check the ports'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'A quick check on the firewall rules can be done with `firewall-cmd --list-all
    --zone=public`; if you have multiple zones and interfaces, you need to execute
    this for every zone. To include the rules created by Azure Service Fabric, `iptables-save`
    can help:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iptables-save command to include the rules created by Azure Service Fabric](img/B15455_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: Including the rules created by Azure Service Fabric'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Unfortunately, there is no comment available to see all the access rules configured
    at the `systemd` unit level. Don't forget to verify them, as discussed in *Chapter
    6*, *Managing Linux Security and Identities*.
  prefs: []
  type: TYPE_NORMAL
- en: Using nftables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`nftables` is easier to use than `iptables` and it combines the whole `iptables`
    framework with a simple syntax. `nftables` is built on a kernel `netfilter` subsystem
    that can be used to create grouped, complex filtering rules. nftables has many
    advantages over `iptables`. For instance, it allows you to perform multiple actions
    using a single rule. It uses the `nft` command-line tool, which can be used in
    interactive mode as well by using the `nft -i` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `nftables` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then install `compat`, which loads the compatibility with the `nftables` kernel
    subsystem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, enable the `nftables` service using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view the current `nft` configuration using this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you can log into `nft` interactive mode using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can list the existing ruleset by using the following `list` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a new table, `rule_table1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will need to add the chain command to accept inbound/outbound traffic
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the following command to add rules to accept TCP (Transmission
    Control Protocol) ports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of our new `nftables` configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Boot Diagnostics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's say you've created your VM, probably orchestrated, and most likely it's
    your own VM, but it doesn't boot.
  prefs: []
  type: TYPE_NORMAL
- en: Before enabling the boot diagnostics on your VMs, you'll need a storage account
    to be able to store the data. You can list the storage accounts that are already
    available with the `az storage account list` and, if needed, you can create one
    with the `az storage account create` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s enable the boot diagnostics by entering the following command in
    the Azure CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The difference is that you don't need the name of the storage account, but the
    name of the storage blob, which can be found with the `az storage account list`
    command as a property of the storage account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following in the Azure CLI to receive the boot log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The output is also automatically stored in a file; in the Azure CLI, it's a
    good idea to pipe it through `less` or redirect it to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many processes, services, and applications run on typical Linux systems, which
    produce different logs, such as application, event, service, and system logs,
    that can be used for auditing and troubleshooting. In earlier chapters, we encountered
    the `journalctl` command, which is used for querying and displaying logs. In this
    chapter, we'll discuss this command in much more detail and look at how you can
    slice and dice your logs using the `journalctl` utility.
  prefs: []
  type: TYPE_NORMAL
- en: In Linux distributions, such as the latest versions of RHEL/CentOS, Debian,
    Ubuntu, and SUSE, which use systemd as their `init` system, the `systemd-journald`
    daemon is used for logging. This daemon collects the standard output of a unit,
    a syslog message, and (if the application supports it) directs messages from the
    application to systemd.
  prefs: []
  type: TYPE_NORMAL
- en: The logs are collected in a database that can be queried with `journalctl`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Working with journalctl**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you execute `systemctl status <unit>`, you can see the last entries of the
    log. To see the full log, `journalctl` is the tool that you need. There is a difference
    with `systemctl`: you can view the status on other hosts using the `-H` parameter.
    You can''t use `journalctl` to connect to other hosts. Both utilities have the
    `–M` parameter to connect to the `systemd-nspawn` and `Rkt` containers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the entries in the journal database, execute this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![Viewing the entries in the journal database using journalctl --unit <unit>
    command](img/B15455_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Viewing the entries in the journal database'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'By default, the log is paged with `less`. If you want another pager, such as
    `more`, then you can configure it via the `/etc/environment` file. Add the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the journalctl command to get the log entries of the processes](img/B15455_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: Using the journalctl command to get the log entries of the processes'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let''s examine the output:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first column is the timestamp. In the database, it''s defined in EPOCH
    time, so if you change your time zone, no problem: it will be translated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second column is the hostname, as shown by the `hostnamectl` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third column contains an identifier and the process ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fourth column is the message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can add the following parameters to filter the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--dmesg`: Kernel messages, a replacement for the old `dmesg` command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--identifier`: Identifier string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--boot`: Messages during the current boot process; you can also select previous
    boots if the database is persistent across reboots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filters**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, you can `grep` on the standard output, but `journalctl` has some
    parameters that really help to filter out the information you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--priority`: Filter on `alert`, `crit`, `debug`, `emerg`, `err`, `info`, `notice`,
    and `warning`. The classification of these priorities is the same as in the syslog
    protocol specification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--since` and `--until`: Filter on timestamp. Refer to `man systemd.time` to
    see all the possibilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--lines`: Number of lines, similar to `tail`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--follow`: Similar behavior to `tail -f`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--reverse`: Puts the last line first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--output`: Changes the output format to formats such as JSON, or adds more
    verbosity to the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--catalog`: Adds an explanation of the message if one is available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the filters can be combined, as here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![Filtering the log entries by using multiple parameters with journalctl](img/B15455_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: Filtering the log entries by using multiple filters with journalctl'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Filtering Based on Fields**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also filter on fields. Type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now press *Ctrl* + *I* twice; you''ll see all the available fields. The same
    principle applies to these filters; that is, you can combine them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can even combine them with normal filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**Database Persistence**'
  prefs: []
  type: TYPE_NORMAL
- en: Now you may need to store the logs for a certain period of time for compliance
    reasons or audit requirements. So, you can use an Azure Log Analytics agent to
    collect logs from different sources. By default, the logging database is not persistent.
    To make it persistent, for any audit- or compliance-related reason (though it
    is not a best practice to store the logs in localhost), you have to edit the configuration
    file, `/etc/systemd/journald.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the `#Storage=auto` line to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the `systemd-journald` daemon with `force`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Use this to view the recorded boots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![Viewing the recorded boots using --list-boots command](img/B15455_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: Viewing the recorded boots'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can add the boot ID as a filter using the `--boot` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: By this means, the output of `hostnamectl` shows the current boot ID.
  prefs: []
  type: TYPE_NORMAL
- en: The journal database is not dependent on the daemon. You can view it using the
    `--directory` and `--file` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syslog Protocol**'
  prefs: []
  type: TYPE_NORMAL
- en: Logging in Linux and other members of the Unix family was enabled during the
    implementation of the syslog protocol. It is still used to send logging to remote
    services.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that this protocol uses facilities and severity.
    Both are standardized in RFC 5424 ([https://tools.ietf.org/html/rfc5424](https://tools.ietf.org/html/rfc5424)).
    Here, a facility specifies the type of program that is logging the message; for
    instance, the kernel or cron. The severity label is there to describe the impact,
    such as informational or critical.
  prefs: []
  type: TYPE_NORMAL
- en: The programmers' man page for syslog (`journald` is able to get everything regarding
    the output of a program.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding Log Entries**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can manually add entries to a log. For syslog, the `logger` command is
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For `journald`, there is `systemd-cat`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'As an identifier, you can use free strings or syslog facilities. Both `logger`
    and `systemd-cat` can be used to generate entries in your log. You can use this
    if the application doesn''t have syslog support; for instance, in an Apache configuration,
    you can use this directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You can also use this as a part of change management.
  prefs: []
  type: TYPE_NORMAL
- en: '**Integrating journald with RSYSLOG**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To collect your data for your own monitoring service, your monitoring service
    needs syslog support. Good examples of these monitoring services are available
    as a ready-to-go VM in Azure: **Splunk** and the **Elastic Stack**.'
  prefs: []
  type: TYPE_NORMAL
- en: RSYSLOG is the most commonly used syslog protocol implementation nowadays. It's
    already installed by default in Ubuntu-, SUSE-, and Red Hat–based distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'RSYSLOG can work very well together with the journal database using the `imjournal`
    module. In SUSE- and Red Hat–based distributions, this is already configured;
    in Ubuntu, you have to make a modification to the `/etc/rsyslog.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'After the modification, restart RSYSLOG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Using the settings in `/etc/rsyslog.d/50-default.conf`, it logs to plain text
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To send everything coming from the local syslog to a remote syslog server,
    you have to add the following to this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the name of the file in Ubuntu. In other distributions, use `/etc/rsyslog.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: Use `@@` if you want TCP instead of the UDP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: '**Other Log Files**'
  prefs: []
  type: TYPE_NORMAL
- en: You can find log files of applications that don't support syslog or `systemd-journald`
    in the `/var/log` directory structure. One important file to notice is the `/var/log/waagent.log`
    file, which contains the logging from the Azure Linux VM agent. There is also
    the `/var/log/azure` directory, which contains logging from other Azure agents
    (such as Azure Monitor) and VM extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Log Analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure Log Analytics is a part of Azure Monitor that collects and analyzes log
    data and takes the appropriate actions. It is a service in Azure that collects
    log data from multiple systems in a single data store in a central place. It consists
    of two important components:'
  prefs: []
  type: TYPE_NORMAL
- en: The Azure Log Analytics portal, with alerts, reports, and analysis features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure Monitor agent, which needs to be installed on a VM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is also a mobile app available (in the iOS and Android store, you can
    find it under the name *Microsoft Azure*) if you want to view the state of your
    workloads while you are on the go.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Log Analytics Service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Azure portal, select **All Services** from the left-hand bar and search
    for **Log Analytics**. Select **Add** and create a new Log Analytics workspace.
    At the time of writing, it is not available in all regions. Using the service
    is not limited to the region; if a VM is in another region, you can still monitor
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is no upfront cost for this service and you pay for what you use! Read
    [http://aka.ms/PricingTierWarning](http://aka.ms/PricingTierWarning) for more
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to create the service is with the Azure CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: After the creation of the service, there is a pop-up that allows you to navigate
    to the newly created resource. Alternatively, you can search again in **All Services**.
  prefs: []
  type: TYPE_NORMAL
- en: Please note, at the top-right of the resource pane, Azure Monitor and the workspace
    ID; you'll need this information later on. Navigate to **Advanced settings** to
    find the workspace key.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Azure CLI, you can collect this information using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To list all the workspaces of your Azure subscription, you can use the following
    Azure CLI command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get detailed information about a workspace in JSON format using the
    following Azure CLI command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Installing the Azure Log Analytics Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before installing the Azure Monitor agent, make sure that the `audit` package
    (in `auditd`) is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Azure Monitor agent in a Linux VM, you have two possibilities:
    enable the VM extension `OMSAgentforLinux`, or download and install the Log Analytics
    Agent in Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, set some variables to make the scripting easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You need the workspace ID and key. The `Set-AzureVMExtension` cmdlet needs
    the keys in JSON format, so a conversion is needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can add the extension to the VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous procedure is pretty complex and takes a while. The download method
    is easier, but you have to log in to your VM via SSH as a guest. Of course, both
    methods can be automated/orchestrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If you have problems during the installation of the agent, look in the `/var/log/waagent.log`
    and `/var/log/azure/Microsoft.EnterpriseCloud.Monitoring.OmsAgentForLinux/*/extension.log`
    configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation of the extensions also creates a configuration file for `rsyslog,/etc/rsyslogd.d/95-omsagent.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: It basically means that the syslog messages (`facility.priority`) are sent to
    the Azure Monitor agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom pane of the new resource, there is a section entitled **Get started
    with Log Analytics**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Get started with Log Analytics section in Azure Portal](img/B15455_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: Get started with Log Analytics section in Azure Portal'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click on **Azure virtual machines (VMs)**. You''ll see the VMs that are available
    in this workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Available VMs in the workspace](img/B15455_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.11: Available VMs in the workspace'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The preceding screenshot represents the available VMs in the workspace. It also
    shows that we have connected to the data source.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the **Advanced settings** section of this resource, you can add performance
    and syslog data sources. You can access all the data via the log search using
    a special query language. If you are new to this language, you should visit [https://docs.loganalytics.io/docs/Learn/Getting-Started/Getting-started-with-queries](https://docs.loganalytics.io/docs/Learn/Getting-Started/Getting-started-with-queries)
    and [https://docs.loganalytics.io/index](https://docs.loganalytics.io/index).
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, just execute this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To see whether there is data available, limit the search to one VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, to get all the syslog messages, as a test, you can reboot your
    VM, or play with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following query in syslog to view the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: There are also many examples available if you click on the **Saved searches**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Monitoring solutions provide a very interesting add-on to make this process
    even easier. In the **Resource** pane, click on **View solutions**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating to the View solutions option in VM](img/B15455_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.12: Navigating to the monitoring solutions option'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Select the desired option and click on **Add**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Management Solutions within Log Analytics](img/B15455_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.13: Management Solutions within Log Analytics'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Service Map** is an important service. It gives a great overview of your
    resources and provides an easy interface for logs, performance counters, and so
    on. After installing **Service Map**, you have to install an agent in the Linux
    machine, or you can log in to the portal and navigate to the VM, which will install
    the agent automatically for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: After the installation, select **Virtual Machines** > **Monitoring** > **Insights**
    > **Service Map**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on **Summary**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Summary section in Service Map](img/B15455_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.14: The Summary section of the Service Map'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can monitor your applications, view the log files, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Check log files to moniter the application](img/B15455_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.15: Service Map overview'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Log Analytics and Kubernetes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to manage your containers, you need detailed insights into CPU, memory,
    storage, and network usage and performance information. Azure Monitor can be used
    to view Kubernetes logs, events, and metrics, allowing for container monitoring
    from a single location. You can enable Azure Monitor for containers for your new
    or existing AKS deployments using the Azure CLI, Azure PowerShell, the Azure portal,
    or Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new `az aks create` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'To enable Azure Monitor for your existing AKS cluster, use the `az aks` command
    with this modification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'You can enable monitoring for your AKS cluster from the Azure portal by selecting
    **Monitor** and then selecting **Containers**. Here, select the **Non-monitored
    clusters**, then choose the container and click **Enable**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring AKS cluster from the Azure portal](img/B15455_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.16: Monitoring AKS cluster from the Azure portal'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Log Analytics for Your Network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another solution in Azure Log Analytics is Traffic Analytics. It visualizes
    network traffic to and from your workloads, including open ports. It is able to
    generate alerts for security threats, for instance, if an application tries to
    reach a network that it's not allowed to access. Also, it provides detailed monitoring
    options with log export options.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use Traffic Analytics, first you have to create a network watcher
    for every region you want to analyze:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you have to reregister the network provider and add Microsoft Insights
    so the network watcher can hook into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: You can't use this solution with other providers, such as `Microsoft.ClassicNetwork`.
  prefs: []
  type: TYPE_NORMAL
- en: The next step involves using **network security group** **(NSG)**, which controls
    the flow of logging by allowing or denying the incoming traffic. At the time of
    writing, this is only possible using the Azure portal. In the left-hand bar of
    the Azure portal, select **Monitor**>**Network watcher** and then select **NSG
    flow logs**. Now you are able to select the NSG that you want to enable an **NSG
    flow log** for.
  prefs: []
  type: TYPE_NORMAL
- en: Enable it, select a storage account, and select your Log Analytics workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will take some time before the information comes in and is collected. After
    about 30 minutes, the first information should be visible. Select **Monitor**
    in the left-hand bar of the Azure portal, go to **Network watcher**, and then
    **Traffic Analytics**. Alternatively, start from your Log Analytics workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking Traffic Analytics tab from the Azure portal to view the network
    traffic flow distribution](img/B15455_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.17: Viewing the network traffic flow distribution with Traffic Analytics'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Performance Monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Azure Monitor, there are many options available for monitoring. For instance,
    performance counters give you a lot of insight into your workload. There are also
    application-specific options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if you don''t use Azure Monitor, Azure can provide all kinds of metrics
    for each VM, but not in one central place. Just navigate to your VM. In the **Overview**
    pane, you can see performance data for CPU, memory, and storage. Detailed information
    is available in the **Metrics** section, under **Monitoring**. All kinds of data
    are available, such as CPU, storage, and networking data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Overview pane the Azure portal to view the performance data for the
    VM](img/B15455_11_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.18: Viewing the performance data of the VM'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The problem with many of these solutions is that they are application-specific,
    or you are looking at the end result without knowing what the cause is. If you
    need information about the general performance of the resources utilized by the
    virtual machine(s), use the information provided by Azure. If you need information
    on the web server or database you're running, look and see whether there is an
    Azure solution. But in many scenarios, it is very helpful if you can do performance
    troubleshooting in the VM as well. In a way, we're going to start where the *Process
    management* section in *Chapter 3*, *Basic Linux Administration*, left off.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start, there are multiple methods and ways of doing performance troubleshooting.
    Can this book provide the only method you should use, or tell you the one tool
    you'll need? No, unfortunately not! But what it can do is make you aware of the
    tools that are available and cover at least their basic usage. For more specific
    needs, you can always dive into the man pages. In this section, we're especially
    looking into what the load is and what is causing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'And one last thing: this section is called *Performance monitoring*, but that
    may not be the perfect title. It''s balancing monitoring, troubleshooting, and
    analysis. However, isn''t that often the case in the daily life of every system
    engineer?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all the tools mentioned are available by default in the Red Hat/CentOS
    repository. You''ll need to configure the `epel` repository: `yum install epel-release`.'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Linux processes with top
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you look into a topic such as performance monitoring and Linux, `top` is
    always mentioned. It is the number-one command to use to quickly get an idea of
    what is running on a system.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can display many things with `top`, and it comes with a good man page explaining
    all the options. Let''s focus on the most important ones, starting at the top
    of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying Linux processes with top command](img/B15455_11_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.19: Displaying resource usage using the top command'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let''s take a look at the options mentioned in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wa`): If this value is continuously above 10%, this means that the underlying
    storage is slowing down the server. This parameter shows the CPU waiting time
    for I/O processes. Azure VMs use HDDs instead of SSDs, and using multiple HDDs
    in a RAID configuration can help, but it''s better to migrate to SSDs. If that
    is not enough, there are premium SSD solutions available as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`us`): CPU utilization by applications; please note that the CPU utilization
    is totaled across all CPUs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sy`): The amount of time the CPU spends on kernel tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Swap**: Memory paged out caused by having not enough memory for your applications.
    It should be zero most of the time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The bottom of the `top` screen also has some interesting columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The bottom entries of the output obtained from the top command](img/B15455_11_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.20: The bottom entries of the output obtained from the top command'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Personally, we wouldn''t advise worrying about the priority and nice values
    for now. The effect on the performance is minimal. The first interesting field
    is `VIRT` (virtual memory). This refers to the amount of memory the program can
    access at present. It includes memory shared with other applications, video memory,
    files that are read into memory by the application, and more. It also includes
    idle memory, swapped memory, and residential memory. Residential memory is memory
    that is physically in use by this process. `SHR` is the amount of memory that
    is shared between applications. This information can give you an idea of the amount
    of `swap` you should configure on your system: take the top five processes, add
    up `VIRT`, and subtract `RES` and `SHR`. It''s not perfect, but it''s a good indicator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **S** column in the preceding screenshot is the status of the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '`D` is uninterruptible sleep, most of the time caused by waiting on storage
    or network I/O.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`R` is running—consuming CPU.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`S` is sleeping—waiting on I/O, no CPU usage. Waiting for a trigger by a user
    or another process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`T` is stopped by the job control signal, most of the time because the user
    pressed *Ctrl* + *Z*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Z` is zombie—the parent process has died. It''s labeled as a zombie by the
    kernel while the kernel is busy cleaning up. On physical machines, it can also
    be an indication of failing CPUs (caused by temperature or shoddy bios); in that
    scenario, you may see many zombies. In Azure, this won''t happen. Zombies don''t
    hurt, so don''t kill them; the kernel takes care of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Top Alternatives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many utilities similar to `top`, such as `htop`, which looks fancier
    and is easier to configure.
  prefs: []
  type: TYPE_NORMAL
- en: Very similar but even more interesting is `atop`. It contains all the processes
    and their resource usage, even for processes that died between screen updates
    of `atop`. This comprehensive accounting is very helpful for understanding problems
    with individual short-lived processes. `atop` is also able to gather information
    about running containers, networking, and storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another one is `nmon`, which is similar to `atop`, but is more focused on statistics
    and gives more detailed information, especially for memory and storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using nmon command to get Performance details of memory, CPU and storage](img/B15455_11_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.21: Performance details of memory, CPU and storage'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`nmon` can also be used to collect data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command collects 30 rounds of information every minute in a comma-separated
    file format that is easy to parse in a spreadsheet. On the IBM's developers website,
    [http://nmon.sourceforge.net/pmwiki.php?n=Site.Nmon-Analyser](http://nmon.sourceforge.net/pmwiki.php?n=Site.Nmon-Analyser),
    you can find an Excel spreadsheet that makes this a very easy job. It even offers
    some extra data-analyzing options.
  prefs: []
  type: TYPE_NORMAL
- en: '`glances` is also gaining a lot of popularity lately. It is Python-based and
    provides current information about the system, uptime, CPU, memory, swap, network,
    and storage (disk I/O and file):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the glances utility to view the performance](img/B15455_11_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.22: Using the glances utility to view the performance'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`glances` is the most advanced alternative to `top`. It offers all the features
    of the alternatives, and, on top of that, you can use it remotely. You need to
    provide the username and password of your server to launch `glances`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following on the client too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: By default, port `61209` is used. If you use the `–webserver` parameter instead
    of `--server`, you don't even need a client. A complete web interface is available
    on port `61208`!
  prefs: []
  type: TYPE_NORMAL
- en: '`glances` is able to export logs in many formats and can be queried using an
    API. Experimental support for the **SNMP** (**Simple Network Management Protocol**)
    protocol is on the way as well.'
  prefs: []
  type: TYPE_NORMAL
- en: Sysstat – a Collection of Performance-Monitoring Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `sysstat` package contains utilities for performance monitoring. The most
    important ones in Azure are `sar`, `iostat`, and `pidstat`. If you are also using
    Azure Files, `cifsiostat` can be very handy as well.
  prefs: []
  type: TYPE_NORMAL
- en: '`sar` is the main utility. The main syntax is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, use this command to report CPU statistics 5 times with an interval
    of 1 second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'To monitor cores `1` and `2`, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: (If you want to monitor all the cores individually, you can use the `ALL` keyword.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some other important resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-r`: Memory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-S`: Swap'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`: Disk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-n <type>`: Network types, such as these:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DEV`: Displays network devices statistics'
  prefs: []
  type: TYPE_NORMAL
- en: '`EDEV`: Displays network devices failure (error) statistics'
  prefs: []
  type: TYPE_NORMAL
- en: '`NFS`: Displays `SOCK`: Displays sockets in use for IPv4'
  prefs: []
  type: TYPE_NORMAL
- en: '`IP`: Displays IPv4 network traffic'
  prefs: []
  type: TYPE_NORMAL
- en: '`TCP`: Displays TCPv4 network traffic'
  prefs: []
  type: TYPE_NORMAL
- en: '`UDP`: Displays UDPv4 network traffic'
  prefs: []
  type: TYPE_NORMAL
- en: '`ALL`: Displays all of the preceding information'
  prefs: []
  type: TYPE_NORMAL
- en: '`pidstat` can collect CPU data from a specific process by its process ID. In
    the next screenshot, you can see that 2 samples are shown every 5 seconds. `pidstat`
    can do the same for memory and disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using pidstat command to get the performance on CPU data from a specific
    process](img/B15455_11_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.23: Displaying CPU statistics using pidstat'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`iostat` is a utility, as the name suggests, that can measure I/O, but it also
    creates reports for CPU usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using iostat command to get the performance statistics for I/O](img/B15455_11_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.24: Getting the CPU and Device report and statistics using iostat'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`tps` means the number of transfers per second issued to the device. `kb_read/s`
    and `kB_wrtn/s` are the numbers of kilobytes measured during 1 second; the `avg-cpu`
    column in the preceding screenshot is the total number of statistics since the
    time of your Linux system startup.'
  prefs: []
  type: TYPE_NORMAL
- en: During the installation of the `sysstat` package, a cron job was installed in
    the `/etc/cron.d/sysstat` file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In modern Linux systems, both `systemd-timers` and the old method using `cron`
    are available. `sysstat` still uses `cron`. To check whether `cron` is available
    and running, go to `systemctl | grep cron`.
  prefs: []
  type: TYPE_NORMAL
- en: '`cron` runs the `sa1` command every 10 minutes. It collects system activity
    and stores it in a binary database. Once a day, the `sa2` command is executed
    to generate a report. The data is stored in the `/var/log/sa` directory. You can
    query that database with `sadf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using sadf command to query the database for system activity](img/B15455_11_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.25: Querying the database with sadf for system activity'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This screenshot shows the data from November 6, between `09:00:00` and `10:10:00`.
    By default, it''s displaying CPU statistics, but you can customize it using the
    same parameters as `sar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This displays the network stats of every network interface on November 6.
  prefs: []
  type: TYPE_NORMAL
- en: dstat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`sysstat` is available for historical reports, while `dstat` is for real-time
    reports. While `top` is the monitoring version of `ps`, it''s `dstat` that is
    the monitoring version of `sar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting real-time reports with dstat command](img/B15455_11_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.26: Getting real-time reports with dstat'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you don''t want to see it all at once, you can use the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`c`: CPU'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d`: Disk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n`: Network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`g`: Paging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Swap'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`m`: Memory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network stats with iproute2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Earlier in this chapter, we talked about `ip`. This command also provides an
    option to get statistics for the network interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting the statistics for the network interface using ip -s link show dev
    eth0 command](img/B15455_11_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.27: Getting the statistics for the network interface'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'It parses information from the `/proc/net` directory. Another utility that
    can parse this information is `ss`. A simple summary can be requested with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Using the `-t` parameter not only shows you the ports in a listening state but
    also the incoming and outgoing traffic on this specific interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need more details, the `iproute2` package provides another utility:
    `nstat`. Using the `–d` parameter, you can even run it in interval mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting a detailed report about the ports in a listening state using nstat
    utility](img/B15455_11_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.28: Getting a detailed report about the ports in a listening state'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'That''s already much more than a simple summary of `ss`. But the `iproute2`
    package has more to offer: `lnstat`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the command that provides network statistics such as routing cache
    statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting the network statistics with lnstat––d command](img/B15455_11_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.29: Getting the network statistics with lnstat -d'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This shows you everything it can display or monitor. It's pretty low-level,
    but we've solved some firewall performance-related issues using `lnstat -f/proc/net/stat/nf_conntrack`,
    while monitoring the `drops` counter.
  prefs: []
  type: TYPE_NORMAL
- en: Network Monitoring with IPTraf-NG
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can get network details from tools such as `nmon`, but if you want more
    details, then IPTraf-NG is a very nice tool for a real-time console-based network
    monitoring solution. It is a console-based network-monitoring utility that collects
    all the network IP, TCP, UDP, and ICMP data and is able to break down the information
    according to the size of the TCP/UDP. A few basic filters are included as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything is in a menu-driven interface, so there are no parameters that you
    have to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menu window of IPTraf-NG](img/B15455_11_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.30: Menu window of IPTraf-NG'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: tcpdump
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of course, `tcpdump` is not a performance-monitoring solution. This utility
    is a great tool for monitoring, capturing, and analyzing network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view network traffic on all the network interfaces, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'For a specific interface, try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'In general, it''s a good idea not to resolve the hostnames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add different levels of verbosity by repeating the `v` parameter up
    to a maximum verbosity level of three:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'You can filter the traffic based on the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can filter based on the source or destination IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Filtering on a specific port is also possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'All the parameters can be combined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The `–c` parameter was added, so only five packets were captured. You can save
    the captured data to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Two parameters were added to increase the compatibility with other analyzers
    that can read the format of `tcpdump`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-XX`: Prints the data of each packet in hex and ASCII format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-x`: Adds headers to every packet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To read the data with a complete timestamp in human-readable format, use this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another great network analyzer is Wireshark. It's a graphical tool that's available
    for many operating systems. This analyzer can import captured data from `tcpdump`.
    It comes with a great search filter and analyzing tools for many different network
    protocols and services.
  prefs: []
  type: TYPE_NORMAL
- en: It makes sense to make the capture in your VM and download it to your workstation
    in order to analyze the data further in Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: We're sure that you will now be able to achieve good performance analysis in
    a Linux system using different tools to monitor metrics such as CPU, memory, storage,
    and network details.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we covered several topics regarding troubleshooting, logging,
    monitoring, and even analyzing. Starting with getting access to a VM, we investigated
    logging in Linux both locally and remotely.
  prefs: []
  type: TYPE_NORMAL
- en: There is a thin line between performance monitoring and performance troubleshooting.
    There are many, many different utilities available to find out the cause of your
    performance issues. Each has a different goal, but there is also a great deal
    of overlap. We have covered the most popular utilities in Linux and some of the
    options available.
  prefs: []
  type: TYPE_NORMAL
- en: In the first chapter, we saw that Azure is a very open source–friendly environment
    and that Microsoft has made a great effort to make Azure an open, standard cloud
    solution with interoperability in mind. In this chapter, we saw that Microsoft
    has not only put a lot of effort into supporting Linux while deploying your application
    but also into supporting it in Azure Monitor.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why should you have at least one user with a password in a VM?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the `systemd-journald` daemon?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are syslog facilities?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What priorities are available in syslog?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you add entries to a log, and why should you do that?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What services are available to view metrics in Azure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is `top` only useful to have a first look into performance-related problems,
    and what utility or utilities can fix that?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `sysstat` and `dstat` utilities?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you install Wireshark on your workstation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A big source of information is the website of Brendan D Gregg ([http://www.brendangregg.com](http://www.brendangregg.com)),
    where he shares an unbelievably long list of Linux performance documentation,
    slides, videos, and more. On top of that, there are some nice utilities! He was
    the one who taught me, in 2015, that it is important to identify a problem correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: What makes you think that there is a problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Was there a time that there wasn't a problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has something changed recently?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to find technical descriptions, such as latency, runtime errors, and so
    on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it only the application, or are other resources affected as well?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Come up with an exact description of the environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You also have to consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is causing the load (which process, IP address, and so on)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why was the load called?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What resource(s) is/are used by the load?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the load change? If so, how is it changing over time?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last, but not least, there's *Red Hat Enterprise Linux Troubleshooting Guide*
    by Benjamin Cane. I know, some parts of the book are outdated, as it was printed
    in 2015\. And, for sure, I definitely hope for a second edition, but, especially
    if you are new to Linux, buy this book.
  prefs: []
  type: TYPE_NORMAL
