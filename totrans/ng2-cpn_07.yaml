- en: Chapter 7. Putting It All Together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to take everything we have learned about components and put it into
    practice. In this chapter, we will build useful components. We will also learn
    about Angular 2 change detection and the component life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the topics that we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Resetting the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple accordion component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the accordion component tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending hooking to the component life cycle events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing our development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to create a new project with `angular-cli` as described in [Chapter
    2](part0020.xhtml#aid-J2B81 "Chapter 2. Setting Up an Angular 2 Development Environment
    with angular-cli"), *Setting Up an Angular 2 Development Environment with angular-cli*.
    We will create a new directory called `components` to contain all the components
    we will implement in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will later create two other subdirectories in this chapter, `accordion`
    and `user-info`, when implementing the corresponding components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing our development environment](../Images/image00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The last thing before starting to build our new components is to clean up our
    root component. Open `index.ts` and clean it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your browser and make sure that the component has rendered without any
    errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing our development environment](../Images/image00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we are ready to start developing our new components.
  prefs: []
  type: TYPE_NORMAL
- en: The accordion component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first component that we are going to build will be an `accordion` component.
    The accordion is composed from two components: the accordion wrapper and an accordion
    tab. Let''s start implementing the `accordion` tab first.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the components directory, create a new directory called `accordion`.
    Inside it, create the `accordion-tab.ts` file, and paste the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The component decorator is straightforward. We throw some CSS and a template
    that includes a `<ng-content>` tag to use an insertion point for the accordion
    tab content.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test it, let''s render the `accordion-tab` file. Open `app.component.ts`
    and update the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to add the `AccordionTab` class to the declarations attribute
    of the root module. This operation will be required for all custom components
    implemented in this chapter. Open the `app.module.ts` file and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s open the browser to make sure that the component is rendered as
    expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The accordion component](../Images/image00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s implement the toggle action of `accordion-tab`. Open `accordion-tab.ts`
    and update the template and the `Component` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We bind a method to the click event of the title that toggles a Boolean, which
    trigger the `ngIf` directive. We covered that in the previous two chapters. To
    test our component, let''s put some dummy content in the other tabs. Open `app.component.ts`
    and update the template as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can open the browser and test our component. When we click on a tab
    title, the corresponding content is toggled. But the tabs should work together.
    Only one tab can be extended. To achieve this, we can wrap the `accordion-tab`
    component with a component that implements this logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do it, we need to make sure that each of the objects in the `users`
    array that we get from the server (`users.json` in our case) has a unique `id`.
    Open `users.json` and make sure it is similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a new file called `accordion.ts` inside the `accordion` folder
    and let''s lay down the basic implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We used the HTTP service to pull the user's data from a static JSON, and we
    iterate over the `users` array—repeating the accordion-tab component. On each
    `accordion-tab` component, we bind a method to a click event and bind dynamic
    data to the properties. We are also using the `json` pipe fill some content inside
    the accordion tabs.
  prefs: []
  type: TYPE_NORMAL
- en: The logic for selecting an active tab is very easy to implement inside the `Component`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to refactor the `accordion-tab` and define its input and output
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The simple accordion is now ready. We used almost everything we have learned
    to craft this widget. Note that we didn''t have to write a lot of code. Angular''s
    built-in directives and binding system did all the heavy lifting for us. To test
    it in the browser, open `app.component.ts` and render the `<accordion>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the browser and check the result. Each time we click on an accordion tab,
    it is the only one that gets extended:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The accordion component](../Images/image00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we move forward, let''s make the accordion extended only when clicking
    its `title`, and the whole `tab`. For this, we will emit a custom event when clicking
    on the title and then bind to this event from the parent component, which is the
    accordion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it for the `accordion-tab` component. Let''s move to the `accordion`
    component and bind to this event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can render the accordion component and see the results. In `app.component.ts''`
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Open the browser and check the results. The accordion works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the accordion component tree
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add another component to our accordion tree. Instead of rendering raw
    JSON as a tab content, let''s reuse the user information component that we built
    on in [Chapter 4](part0031.xhtml#aid-TI1E1 "Chapter 4. Building a Basic Component"),
    *Building a Basic Component*, and [Chapter 5](part0038.xhtml#aid-147LC1 "Chapter 5. Building
    Dynamic Components"), *Building Dynamic Components*. For this, just create a `user-info`
    subdirectory in the `components` directory and copy the corresponding TypeScript
    files into this directory. The only file we need to refactor is `accordion.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: All we needed to do is to import the user info component, declare it in the
    component metadata, and use it in our template, binding the `user` variable to
    the `User` property that the component expects.
  prefs: []
  type: TYPE_NORMAL
- en: The component life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Component instances have a life cycle that we can hook into. Currently, our
    mini application contains four components: `App`, `accordion`, `accordion-tab`,
    and `user-info`, but a typical Angular application will contain tens of component
    trees that Angular will create, update, and destroy during our application''s
    lifetime.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For demo purposes, we will simulate a server call that returns other data.
    For this, create a file called `other-users.json` inside the `server` directory
    and paste this code into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'On the accordion component template, we will add a button that will fetch this
    new data and implement the `fetchData` method on the `Component` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, each time we click on the button, the user's data is updated and the accordion
    re-rendered. Open the browser, click on the button, and watch the accordion data
    change.
  prefs: []
  type: TYPE_NORMAL
- en: Life cycle event interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to run our own logic on each one of the component life cycle events,
    we need to implement the desired method that corresponds to the event we want
    to react to. Each one of those events is published as a TypeScript interface,
    which we can implement in our component class. The use of TypeScript interfaces
    is optional and won't affect our application in any way at all. You can learn
    about TypeScript interfaces from the documentation on the TypeScript website at
    [http://www.typescriptlang.org/docs/handbook/interfaces.html](http://www.typescriptlang.org/docs/handbook/interfaces.html).
    We won't use this in our code examples.
  prefs: []
  type: TYPE_NORMAL
- en: OnInit and OnDestroy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplest, most straightforward, and most easy-to-understand life cycle event
    hooks are `onInit` and `onDestroy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ngOnInit` method is called after the component data-bound properties have
    been checked for the first time, and `ngOnDestroy` will be called right before
    the component instance is destroyed by Angular. In our component hierarchy, we
    will implement both of these methods on the `user-info` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the browser and make sure the console is visible. You should see
    four logs that indicate that each of the user components have been initialized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OnInit and OnDestroy](../Images/image00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on the button to pull new data from the server. You should see four
    logs for each user information component that have been destroyed, and three logs
    for the new components that are created for the new data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OnInit and OnDestroy](../Images/image00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `OnInit` method is a good place to run code after the components have been
    initialized (data bounded properties have been resolved), and before one of the
    child components has been initialized. `OnDestroy` is a good place for cleanup
    or persistence code for the component's state just before it is ripped from the
    DOM.
  prefs: []
  type: TYPE_NORMAL
- en: OnChanges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`OnChanges` has a method named `ngOnChanges` that will be called after all
    the data-binding properties have been checked. Angular passes a `change` object
    that contains a key named after the property that changed, and an instance of
    a `SimpleChange` object. The `SimpleChange` object contains the previous value
    and the current value. Let''s implement this method in our `user-info` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser console, we will see four logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OnChanges](../Images/image00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you are familiar with Angular 1.x, you can think of the `OnChange` method
    as a `$scope.$watch` function. It will be called any time the data changes, and
    contains both the new and the old values.
  prefs: []
  type: TYPE_NORMAL
- en: Other life cycle events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides the `init`, `changes`, and `destroy` events, we can hook four more
    component life cycle events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AfterContentInit`: This is called after the component''s content is fully
    initialized'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AfterContentChecked`: This is called after each time the component is checked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AfterViewInit`: This is called after the component''s view has initialized'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AfterViewChecked`: This is called after the component''s view has been checked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of them can be implemented in the same way as the previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through this chapter, we took everything we have learned so far about components
    and built a useful accordion widget that is composed of four components. An Angular
    2 application is a collection of dynamic components that communicate with each
    other using properties as an input, and events as output. We can hook into each
    important life cycle of a component, for example, when a component is initialized
    or destroyed, and run our own logic.
  prefs: []
  type: TYPE_NORMAL
