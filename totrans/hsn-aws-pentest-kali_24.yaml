- en: Using Scout Suite for AWS Security Auditing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces another automated tool, known as Scout Suite, which
    performs an audit on the attack surface within an AWS infrastructure, and reports
    a list of findings that can be viewed on a web browser. Scout2 is very useful
    to a penetration tester during a white-box engagement as it allows for a quick
    assessment of the various security configuration issues within various AWS services
    and reports them on an easy-to-read dashboard. This helps to identify several
    low-hanging fruits that might otherwise take longer to detect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a vulnerable AWS infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and running Scout Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing the results of a Scout Suite scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Scout Suite's rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following tool will be used in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Scout Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a vulnerable AWS infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this exercise, we will create a vulnerable EC2 infrastructure comprised
    of a new VPC, subnet, and an exposed EC2 instance. We will also create a new S3
    bucket that is publicly writable and readable.
  prefs: []
  type: TYPE_NORMAL
- en: A misconfigured EC2 instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 4](40a55376-17ab-4988-87e1-49baea6c4e01.xhtml), *Setting Up your
    First EC2 Instances,* we learned how to create new VPCs and subnets. We will start
    by creating a new VPC and subnet and then launching an EC2 instance with all the
    ports exposed. You may refer to the steps in [Chapter 4](40a55376-17ab-4988-87e1-49baea6c4e01.xhtml),
    *Setting Up your First EC2 Instances* to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by going to Services | VPC | Your VPCs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Create VPC and assign a new IP range:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8749b3df-92a2-43cd-a605-ad11ce157077.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating VPC
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have named the VPC as `VulnVPC` and have given it a `10.0.0.0/16` IP
    range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new subnet within the VPC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5220371-d1ba-4cfc-86f0-9f8df8b23d3f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating subnet
  prefs: []
  type: TYPE_NORMAL
- en: We are creating a new subnet within the VPC with a `10.0.1.0/24` IP range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Internet gateways and create a new gateway; attach this new gateway to
    the new VPC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d591ba63-3192-44c1-a8a7-a6bbc6f9345c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating new gateway
  prefs: []
  type: TYPE_NORMAL
- en: Go to Route Tables and select the new VPC. Then, go to the Routes tab and click
    on Edit routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `0.0.0.0/0` destination and set the target to the internet gateway:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/275b992f-9da7-4310-bf89-2609c337900b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new destination and setting the target
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new security group and allow All traffic from Anywhere:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75debeae-df31-4787-99a9-1b37de2b63b7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Editing inbound rules
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, launch a new EC2 instance in the new VPC and subnet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d6e8f4b1-2516-4fe2-b7cb-3bf178b128f2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Launching a new EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: 'Assign it the vulnerable security group, as demonstrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee19d5d8-b94e-4efd-84fd-0dba9944bc37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Assigning Security Group ID
  prefs: []
  type: TYPE_NORMAL
- en: Finally, launch the EC2 instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our vulnerable EC2 infrastructure is ready.Now let's create a vulnerable S3
    instance as well.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a vulnerable S3 instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 7](82076ae5-9ec1-4870-9743-3240bc641844.xhtml), *Reconnaissance
    – Identifying Vulnerable S3 Buckets,* we saw how we can create a vulnerable S3
    bucket. It''s time to perform those steps again. Let''s start by going to Services
    | S3:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new bucket, name it, and then go to Set permissions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Disable all the settings given in the following screenshot and create the bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c4a1185d-ab7c-4889-9efe-52b4531ffa49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the bucket''s **Access Control List** and allow public read/write access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f457b11-3a83-45c2-a831-788d963b9035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Access Control List
  prefs: []
  type: TYPE_NORMAL
- en: Save all the settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our vulnerable AWS infrastructure is ready. Next, we will configure and run
    Scout Suite and see how it can identify all the security misconfigurations that
    we have created.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and running Scout Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our vulnerable AWS infrastructure has been set up, it's time to configure
    and run Scout Suite. Scout Suite is an automated cloud security auditing tool
    that helps us assess and identify security misconfigurations. It collects configuration
    data from the APIs that are exposed by cloud providers and produces a report that
    highlights potentially vulnerable configurations. The tool works across multiple
    cloud providers such as AWS, Azure, and **Google Cloud Platform** (**GCP**).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the tool on our AWS infrastructure, we will have to set up an IAM user
    with specific permissions to configure the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by going to IAM | Users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add user** button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c545d26-6738-451e-91f6-81237f931d1d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding IAM user
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a new `auditor` user for this activity. Set Access type to Programmatic
    Access, and then continue. We don''t need access to AWS Management Console, so
    there''s no need to create a password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b1be3a06-b6cc-49ff-854a-07bb1fcce4d1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting user details
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to set policies to our new IAM user. For the tool to run
    successfully, we need to provide this user with two specific policies which are ReadOnlyAccess
    and SecurityAudit as shown in the below screenshot :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1a27ba8-0960-4394-b13e-3f8a6437709f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting policies to our new IAM user
  prefs: []
  type: TYPE_NORMAL
- en: Select these two permissions in Set permissions and then continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the details on the final Review page and then continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e746fa20-2f2a-4838-9049-cb3a64fa7473.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Reviewing the details
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you will get a Success message, as well as the Access key ID and the
    Secret access key credentials. Note these down, as they will be required to configure
    the AWS CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c42259d1-9b3e-43a1-a6a5-fc9221ed3173.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing the Success message
  prefs: []
  type: TYPE_NORMAL
- en: '7\. Click on Continue and you will see that our user has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2adfaafd-7f88-4876-8fb1-8b8307cb57e7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing that the user is created
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to configure our AWS CLI for Scout Suite to work with the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the AWS CLI tool and configure it with the credentials that we just received:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Enter the credentials and make sure to set your zone to the same zone where
    the AWS infrastructure is hosted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s install `scoutsuite` now; we can install it via `pip`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can download the tool from the GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are downloading the script from GitHub, you will need to run the following
    commands to install all the dependencies for `ScoutSuite`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In case you want to run the tool in a Python virtual environment, run the following
    commands before running `pip install -r requirements.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then, install all the dependencies by running `pip install -r requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, check if the tool is working by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If the help menu is displayed, it means our tool has been set up successfully.
    Let's see how we can run the tool and get an assessment of our infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Running Scout Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our tool is now ready to run. To start the assessment, simply run the following
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you installed using `pip`, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re running the GitHub script, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The tool will collect data from each and every AWS service, and then analyze
    the configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1ac1e04-c14d-420b-83bf-89623b82a9fa.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing configurations
  prefs: []
  type: TYPE_NORMAL
- en: The tool will generate an HTML report that will be saved in the `scoutsuite-report`
    folder. If you have already run the tool on your Kali instance running on AWS,
    you can simply download the files using SCP/WinSCP.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing the results of a Scout Suite scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at our report; it appears that Scout Suite has identified
    a number of issues in our AWS infrastructure, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ce98fc7-9e56-4d28-ae80-68d3644b5fc9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scout Suite Dashboard showing issues in AWS infrastructure
  prefs: []
  type: TYPE_NORMAL
- en: We will take a look at each reported issue one by one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the EC2 report. As you can see from the report, all the
    misconfigurations have been listed from the vulnerable EC2 instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8547c0a7-10cf-4408-b94d-e26df4a36500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: EC2 Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see each issue in more detail, simply click on any issue. Let''s
    take a look at the details of the All ports open to all issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5333055b-f5a8-465c-a1a3-9cd34f96a276.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All ports open to all
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have a much more detailed output of where the misconfiguration lies
    and why it is an issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at our S3 bucket report in S3 Dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8912b0aa-d447-46d3-9477-99f6851a7162.jpg)'
  prefs: []
  type: TYPE_IMG
- en: S3 Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, the tool has successfully identified
    the vulnerable S3 bucket that we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, what about our VPC and subnet? There are no critical findings in the VPC
    service. However, the tool has identified potential threats in the network ACLs
    of both the VPC and the subnet that we will need to look into:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86d20e70-0a4e-4bb8-be1f-ed8cfacf4dc6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: VPC dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see that there are some critical findings in the IAM service; let''s
    take a look into that as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a630e17-3eba-4b6f-9bcb-6ba6af9dc441.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IAM dashboard
  prefs: []
  type: TYPE_NORMAL
- en: These findings are very helpful for auditors to identify vulnerable password
    policies and access management issues. This is also very useful for system administrators
    to ensure best practices are being followed.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a look at how we can use custom rulesets to customize the report
    in accordance to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Using Scout Suite's rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scout Suite provides us with an option to audit an infrastructure using a custom
    ruleset instead of its default ruleset. This is very useful as each organization
    has its own business case in mind while setting up an AWS infrastructure. Using
    custom rulesets can help organizations customize the tool's assessments according
    to their needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can create our own ruleset:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new ruleset, we first need to make a copy of the existing ruleset.
    You can find the default ruleset file in the GitHub repository at [https://github.com/nccgroup/ScoutSuite/blob/master/ScoutSuite/providers/aws/rules/rulesets/detailed.json.](https://github.com/nccgroup/ScoutSuite/blob/master/ScoutSuite/providers/aws/rules/rulesets/detailed.json) The
    reason we are doing this is to ensure that we have the correct format of the ruleset
    from which we can build our own rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the file and open it in a text editor, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4bdee3e1-6213-440f-a4a4-ef33d5a9d972.jpg)'
  prefs: []
  type: TYPE_IMG
- en: myruleset.json
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the following settings at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the settings titled `vpc-default-network-acls-allow-all.json`. If you
    have not made any changes to the file, the setting should be at line number `1046`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Change the level of severity of the `ingress` argument from `warning` to `danger`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/48aee39a-aa7a-488b-a67a-a6a462aebf58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the level of severity
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the settings titled `vpc-subnet-with-default-acls.json`. If you have
    not made any changes to the file, the setting should be at line number `1088`:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/47331c9d-b30e-4c60-aff1-385f688c2022.png)'
  prefs: []
  type: TYPE_IMG
- en: vpc-subnet-with-default-acls.json
  prefs: []
  type: TYPE_NORMAL
- en: Change the `"enabled"` setting to `true`.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are all set with the custom ruleset. Now run Scout Suite using the custom
    ruleset. Issue the following command in case you are using the `pip` installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using the GitHub script, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you take a look at the report this time, you will see that the issues related
    to the VPC that were reported earlier have now been marked as critical:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e93f3e8-dbd4-41de-873f-a292bf3e5151.jpg)'
  prefs: []
  type: TYPE_IMG
- en: VPC dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, since we enabled the `vpc-subnet-with-default-acls.json` setting,
    Scout Suite has reported the issues this time.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, other settings can be modified as per their use case.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to set up and configure Scout Suite. To run
    Scout Suite on our AWS infrastructure, we created a new VPC and subnet with vulnerable
    configurations, and then launched an EC2 instance with a vulnerable security group.
    We then ran Scout Suite to identify potentially vulnerable configurations in our
    AWS infrastructure, and then analysed the report to understand how vulnerabilities
    are reported. Finally, we learned how to modify and use customized rulesets to
    tune the reports in accordance to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at the real-world penetration testing of the
    AWS infrastructure.
  prefs: []
  type: TYPE_NORMAL
