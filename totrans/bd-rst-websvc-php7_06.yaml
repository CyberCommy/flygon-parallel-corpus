- en: Illuminating RESTful Web Services with Lumen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have created a very basic RESTful web service in Core PHP and identified
    flaws regarding design and security. We have also seen that to make things better
    we don't need to create everything from scratch. In fact, using open source code
    that is time tested makes more sense, to build better web services based on cleaner
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In the last chapter, we have seen that Composer is a dependency manager for
    PHP projects. In this chapter, we will use an open source micro-framework to write
    RESTful web services. We will do the same work in an open source micro-framework
    that is in active development, time tested and well known in PHP community. The
    reason for using a framework instead of few components is that a proper framework
    can make a good structure of our code, and it comes with some basic required components.
    The micro-framework we have chosen is Lumen, a micro-framework version of the
    full-stack framework Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what we intend to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Lumen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Lumen provides
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Lumen has in common with Laravel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Lumen is different from Laravel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation and configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database Migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing REST API in Lumen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST Resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eloquent (Model)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User Access and Token based Authentication and Session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API Versioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rate Limits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database Seeders of Users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Lumen Packages for REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing Lumen based REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Need of encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different SSL Options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary and more resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Lumen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lumen is a micro-framework version of the full-stack framework Laravel. In the
    PHP community, Laravel is a very well-known framework. So by using Lumen, we can
    always convert our project to Laravel and start using its full-stack capabilities
    if we have to.
  prefs: []
  type: TYPE_NORMAL
- en: Why micro-framework?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every thing has a cost. We chose a micro-framework instead of a full-stack framework,
    because although a full-stack framework provides more features, to have those
    features it has to load more stuff. So to provide the luxury of more features,
    a full-stack framework has to compromise a bit on performance as compared to a
    micro-framework. The micro-framework on the other hand, lets go of some features
    which are not required for building web services like views and so on, which makes
    it faster.
  prefs: []
  type: TYPE_NORMAL
- en: Why Lumen?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lumen is not the only micro-framework in the PHP community. So why Lumen? There
    are three major reasons for that:'
  prefs: []
  type: TYPE_NORMAL
- en: Lumen is micro-framework of Laravel, so with a little effort we can always convert
    it into Laravel and utilize its full-stack capabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As Lumen is a micro-framework of Laravel, it has awesome community support just
    like Laravel. A good community is always a very important factor. At the same
    time, Lumen is able to use a lot of the same packages that Laravel uses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other than its relation with Laravel, Lumen is also very good with respect to
    performance. Based on performance, other alternative micro-frameworks could be
    Slim and Selex.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Lumen provides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know that Lumen is a micro-framework version of Laravel, it provides a
    lot of capabilities that Laravel provides. For example, it is an MVC framework.
    However, it is good to know what Lumen and Laravel have in common and what Lumen
    doesn't have or has different. This will give us a good idea of what Lumen has
    in store for us.
  prefs: []
  type: TYPE_NORMAL
- en: What Lumen has in common with Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, I didn''t say similarities between Laravel and Lumen, because Lumen is
    not a completely different framework. I said what is common in both of them, because
    they have common packages and components: that means they share the same code
    base in many cases.'
  prefs: []
  type: TYPE_NORMAL
- en: Actually, Lumen is sort of a small, minimal Laravel. It just drops some of the
    components and uses different components for some tasks like routes. However,
    you can always turn on a lot of components in the same installation. Sometimes,
    you don't even need to write some code in the configuration for that. Instead,
    you just go to the configuration file and uncomment some lines of code and it
    starts using those components.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, Lumen has the same versions. For example, if there is 5.4 version of
    Laravel, Lumen will have the same version. So, these are not two different things.
    They have most things similar to each other. Lumen just drops some unrequired
    stuff for the sake of performance. However, if you just want to convert your application
    code that is written for Lumen to Laravel, you can simply put that code in a Laravel
    installation and it should mostly work. No major change in your application code
    is needed.
  prefs: []
  type: TYPE_NORMAL
- en: How Lumen is different from Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As Lumen is built for micro-services and APIs, components related to front-end
    like an elixir, authentication bootstrap, sessions and views and so on do not
    come with Lumen out of the box, but these can be included later on, if required:
    it is very flexible in that.'
  prefs: []
  type: TYPE_NORMAL
- en: Routes are different in Lumen. In fact, it doesn't use Symfony router; instead
    it uses a different router which is faster but has fewer features. This is because
    Lumen sacrifices features for speed. Similarly, there are no separate configuration
    files like Laravel. Instead, some configurations are done in `.env` file while
    others related to registering a provider or alias and so on are done in the `bootstrap/app.php`
    file, probably to avoid loading different files for the sake of speed.
  prefs: []
  type: TYPE_NORMAL
- en: Both Lumen and Laravel have a lot of packages and a lot of them work for both.
    Still, there are packages which were mainly built for Laravel and don't work with
    Lumen without some changes. So if you intend to install a package, make sure it
    supports Lumen. For Laravel, most of the packages work for Laravel because Laravel
    is more popular and most of the packages were built for Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: What exactly Lumen provides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are probably thinking that this is the difference between Lumen and Laravel,
    but what exactly does Lumen provide us so we can build API? We will look into
    it, but not in detail, because Lumen documentation at [https://lumen.laravel.com/docs/5.4](https://lumen.laravel.com/docs/5.4)
    serves this purpose. What is not covered in the documentation is how we can make
    a RESTful web service using Lumen, and what packages we can utilize to make our
    work and life easier. We will look into this.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will discuss what comes with Lumen, so that we understand its different
    components and working.
  prefs: []
  type: TYPE_NORMAL
- en: A Good Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lumen comes with a good structure. As it is derived from Laravel, which follows
    the MVC (Model View Controller) pattern, Lumen also has a Model and Controller
    layer. It does not have the view layer, because it does not need views: it is
    for web services. If you don''t know what MCV is, consider it just an architectural
    pattern where responsibilities are distributed in three layers. Model is a DB
    layer and sometimes also used as business logic layer (we will look into what
    should be in the model in a later chapter). The view layer is for template related
    stuff. Controller can be considered a layer handling requests while getting data
    from Model and rendering View. In case of Lumen, there are only Model and Controller
    layers.'
  prefs: []
  type: TYPE_NORMAL
- en: Lumen provides us a good structure so we don't need to make it on our own. In
    fact, Laravel does not only provide MVC structure but also **Service Container**
    which resolves dependencies beautifully. The structure of Lumen and Laravel is
    much more than one design pattern but it utilizes different design patterns nicely.
    So, let's see what else Lumen provides and look into Service container and many
    other topics.
  prefs: []
  type: TYPE_NORMAL
- en: Separate configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](6a3f77e9-56c5-4ffd-877d-9b7b212ea40a.xhtml), *Reviewing Design
    Flaws and Security Threats*, we saw that configurations should be separate than
    implementation so Lumen does that for us. It has separate configuration files.
    In fact, it has a separate `.env` file that can be different in different environments.
    Other than the `.env` file, there is a configurations file where configuration
    related to different packages are stored, things like package registration or
    alias and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that you probably don't see the `.env` file on Mac or Linux at first
    because it starts from the dot, so it will be hidden. You will need to make hidden
    files shown, and then you will see the `.env` file there.
  prefs: []
  type: TYPE_NORMAL
- en: Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lumen has better routing capabilities. It not only lets you tell which URLs
    should be served by which controller but also lets you tell which URLs with which
    HTTP Method should be served by which controller and which method of the controller.
    In fact, most of the HTTP methods that we use in the RESTful convention can be
    specified in Lumen.
  prefs: []
  type: TYPE_NORMAL
- en: While creating RESTful web service for our blog example, we will see code examples
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Middle-wares
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Middle-ware is something that can come before or after serving a request by
    the controller. Many tasks can be performed in middle-wares, like authentication
    middle-ware, validation middle-ware and so on.
  prefs: []
  type: TYPE_NORMAL
- en: There are some middle-wares which come with Lumen itself, while we can also
    write our own middle-ware to serve our purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Service Container and Dependency Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A service container is a tool provided for dependency injection and dependency
    resolution. Developers just tell which class should be injected where, and the
    service container resolves and injects that dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection can be used for resolving any dependency of a class if
    its object is created through the application service container, not through the
    `new` keyword in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the Lumen service container is used to resolve all Lumen controllers.
    So, if they need any dependency, the service container is responsible for resolving
    that. For better understanding consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, I have just mentioned the simple `Controller` class,
    where the `Post` class is being injected in the `PostController` constructor.
    If we already have another object which we want to be injected instead of the
    actual `Post` object, we can also do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can simply do it using the following code from anywhere before dependencies
    are resolved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: So now, if `Post` will be type hinted in a class' constructor or method then
    the object of `OurCustomPost` class will be injected there. This is because `$this->app->instance("\Post",
    $ourCustomerPost)` is telling the service container that if someone asks for an
    instance of `\Post` then give them `$ourCustomerPost`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note, other than controller resolution, we can also create an object in the
    following way if we want the service container to inject dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So here, `PostController` will be resolved in the same way as controllers are
    resolved by Lumen itself. Please note that we are using the term *Lumen* because
    we are talking about Lumen but most of this stuff is the same in both Lumen and
    Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry if this sounds a bit overwhelming, you will start understanding
    this once you start using Lumen or Laravel and do practical work in it.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lumen has built-in support for sending different types of responses, HTTP status
    codes and response headers. This is something that we previously discussed as
    important. It is even more important for web services because web services are
    used by a machine, on a human. The machine should be able to know what the response
    type is and what the status code is. This is not only useful to tell whether there
    is error or success but also to tell what type of error has occurred. You can
    look into this in more detail at [https://lumen.laravel.com/docs/5.4/responses](https://lumen.laravel.com/docs/5.4/responses).
  prefs: []
  type: TYPE_NORMAL
- en: Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lumen also comes with support for Validation as well; not only validation support
    but also built-in validation rules that you can start using. However, if you need
    some custom validation logic for some field, you can always write that as well.
    We will look into that while creating our RESTful web service.
  prefs: []
  type: TYPE_NORMAL
- en: Eloquent ORM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lumen comes with an ORM tool named Eloquent. For ease of understanding, you
    can consider it as a database related high-level libraries by which you can get
    data without going into a lot of detail based on relationships. We will shortly
    look into it in detail while we use it.
  prefs: []
  type: TYPE_NORMAL
- en: Database migration and seeding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, a developer is not always supposed to create databases using SQL or
    database tool. There should be something in the code which can be under Version
    Control System and every developer in the team can run on his/her system or on
    the server. This something is nowadays called migration. Another benefit of writing
    migration is that it is not for one specific database. The same migration can
    work on both MySQL and PostgreSQL. Migrations are about structural changes in
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: A migration is for database table creation or modifications, or different constraints
    or indexes creation. In the same way, Seeders are there to insert data in the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing is also a very important for ensuring the quality of code, and
    Lumen provides support for that as well. We will not be writing the test in this
    chapter, but we will write it in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we haven''t seen each and every thing that comes with Lumen, we have
    just seen some components which we may need to know in order to make RESTful web
    services in Lumen. For further details of Lumen, you can simply consult its documentation:
    [https://lumen.laravel.com/docs/5.4](https://lumen.laravel.com/docs/5.4).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Lumen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Lumen, if you have composer installed then simply run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a directory named `blog` which has the Lumen installation
    in it. In case you find any difficulty, see the Lumen installation docs here:
    [https://lumen.laravel.com/docs/5.4](https://lumen.laravel.com/docs/5.4).'
  prefs: []
  type: TYPE_NORMAL
- en: I suggest that after installation, you go and look at the directory structure
    of this Lumen project named blog, as it will make more sense when we will be performing
    different tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you look in the installation directory where we installed Lumen, in our case
    it was `blog`, you will see a `.env` file. Lumen keeps configurations in the `.env`
    file. You can see there is an option `APP_KEY=` if this is not yet set in the
    `.env` file, set it. This just needs to be set to a random string that has a 32
    character length.
  prefs: []
  type: TYPE_NORMAL
- en: As `.env` file starts with a dot, in Linux or Mac, this file may be hidden.
    In order to see this file, you need to see hidden files as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'And then, to run Lumen simply use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using a PHP built-in server and giving the path of the
    `public` directory in our project. This is because the entry point is `public/index.php`.
    Then, on [http://localhost:8000/](http://_wp_link_placeholder/), you should see
    `Lumen (5.4.6) (Laravel Components 5.4.*)`.
  prefs: []
  type: TYPE_NORMAL
- en: If you ever see the error `Class 'Memcached' not found`, this means you don't
    have Memcached installed and Lumen is trying to use it somewhere. If you don't
    need Memcached, you can simply go to `.env` file and change `CACHE_DRIVER=file`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have Lumen installed and configured, we will create the same RESTful
    web services for the blog example in Lumen.
  prefs: []
  type: TYPE_NORMAL
- en: One more thing you should do is uncomment following in `bootstrap/app.php`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As was previously commented, with these features not available, Lumen can be
    faster. But we uncommented it because we also need to utilize some capabilities
    of Lumen. So what, exactly, do these two lines do? The first one enables use of
    Facades. We enabled it because we will need some packages which need Facade. The
    second one enables usage of the Eloquent ORM that comes with Laravel and Lumen.
    Eloquent isn't enabled by default for the sake of performance. However, Eloquent
    is a very important component that we shouldn't avoid, not even for the sake of
    performance, unless performance is critical for us and it is slowing down because
    of Eloquent. In my opinion, we shouldn't compromise clarity for performance unless
    it is critical.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to set up our database for the blog. In fact, we already did set this
    up in [Chapter 3](75dfe538-b06c-46b9-a07f-8ac29a158975.xhtml), *Creating Restful
    Endpoints*. We can use that database here as well. In fact, we will have the same
    DB structure, so we can easily use the same DB, but this is not recommended. In
    Lumen, we use migrations to create DB structure. It is not mandatory but it is
    useful so you can write migration once and use it to create DB structure anywhere.
    This purpose can be served by SQL files but the beauty of migration is that it
    works across different RDBMS as well. So create a DB manually, and name it `blog`.
    Now, we will write migration for structure.
  prefs: []
  type: TYPE_NORMAL
- en: Writing migrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create migration files in Lumen, we can use this command in the `blog` directory
    to create migration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'and a file with this name will be created in the `/blog/database/migrations`
    directory. In this file, we can write migration code for the Users table. If you
    open the file and look into it, there are 2 methods in it: `up()` and `down()`.
    `up()` method executes when it has to run migration while `down()` executes when
    it has to rollback migration.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the content of this User table creation migration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here in the `up()` method, we have called the create method while passing a
    function in it. And that function has code to add fields. If you want to know
    more about fields and table creation through migration, you can have a look at
    [https://laravel.com/docs/5.4/migrations#tables](https://laravel.com/docs/5.4/migrations#tables).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, before running the command to generate migration from the database,
    you should go to your `.env` file and add your DB name and credentials. In order
    to run the migration, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run the migration, and will create two tables: a migrations table
    and a Users table. The Users table was created as the result of the previously
    mentioned code, while the migrations table was created by Laravel/Lumen as it
    is where it keeps the record of migrations which are run. This table is created
    the first time, and will always have more data in it whenever migrations run.'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that before running migration you should have MySQL or some other
    database installed and configured in the `.env` file. Otherwise, if there is no
    database installed or set up, then migration will not work.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can create posts and comments table creation migration files in the
    same way. Following is the content of the posts and comments table creation migration
    files respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Posts migration file content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the comments table creation migration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After having the preceding two files, run the following command again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will only execute new migration files which were not yet
    executed. With that, you will have all three of these tables in the database.
    And as we will have these migrations as well, it will be easy to just run migrations
    again and have this schema in DB. You are probably thinking, "what is good about
    writing migrations?". The good part is that migrations make it easier to deploy
    it on any RDBMS because the code is Laravel migration code and not SQL code. Also,
    it is always easier to have such stuff in code so that multiple developers can
    get each other's migrations and run them on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: If you remember, we also did some indexing and foreign key constraints. So,
    here is how we can do that in the migration way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new migration file using the command as we did before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a migration file for comments table indexes. Let''s add content
    to this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, create a migration file for posts indexes. Here is the content
    of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding indexes files code, there is some code that is a bit complex
    and needs our attention:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `foreign()` method accepts the field name and name of the index.
    Then, the `references()` method accepts the foreign key field name in the parent
    table, and the `on()` method parameter is the referenced table name (in our case,
    it is the users table). And then, the rest of the two methods `onUpdate()` and
    `onDelete()` tell the user what to do on update and delete respectively. If you
    are not comfortable with migration syntax, it is fine; you just need to look at
    the Lumen/Laravel migration documentation. In fact, I recommend that you pause
    for a moment and look at the migration related documentation: [https://laravel.com/docs/5.4/migrations](https://laravel.com/docs/5.4/migrations).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to have these migrations effective in the database, we need to run migrations
    again so that new migrations can execute and we can have changes reflected in
    the database. So run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With that, we are done with migration. We can now insert some data in these
    tables through seeds, but we don't need it yet, so skipping writing seeds for
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Writing RESTful web service endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to actually start writing the endpoints that we discussed in
    Chapter 1, *RESTful Web Services, Introduction and Motivation*, and wrote in plain
    Vanilla PHP in [Chapter 3](75dfe538-b06c-46b9-a07f-8ac29a158975.xhtml), *Creating
    Restful Endpoints*. So let's do that.
  prefs: []
  type: TYPE_NORMAL
- en: As it has a Controller and Model layer, we will start writing API from the Controller
    layer which will serve different endpoints. For the first controller, what we
    are going to write is `PostController`.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the first controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technically, this is not the first controller, as Lumen comes with 2 controllers
    which you can find in the `/<our blog project path>/app/Http/Controllers/` directory.
    But this is our first controller that we are going to write. In Laravel (the big
    brother of Lumen), we don't need to go and create a controller because there are
    commands for that, but for Lumen those commands are not available. As these commands
    are not mandatory but very handy, it is better if we make those commands available.
  prefs: []
  type: TYPE_NORMAL
- en: To use the extra features that we don't get with Lumen (some of which come in
    Laravel already), we need to install a package. Right now, the package we need
    to install is `flipbox/lumen-generator`. More information about this package can
    be found at [https://packagist.org/packages/flipbox/lumen-generator](https://packagist.org/packages/flipbox/lumen-generator).
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have seen in the previous chapter, we install packages through composer,
    so let''s install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You can see that I have added a `--dev` flag there. I did this to avoid using
    it on production, because this way it will be added in the `require --dev` section
    in `composer.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, once this is installed, you can register its `ServiceProvider` in `bootstrap/app.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can see that we have lot more commands available. You can see it by
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'So, let''s create a controller with a command. Note, we didn''t install it
    only for creating controller but it will be very handy when you will be working
    with it. Anyway, let''s create a controller with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: It will create a controller at `app/Http/Controllers/PostController.php`. This
    command will not only create `PostController` but will also add REST Resource
    related methods as well. Open a file and look into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the content that it generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: These methods were generated because we added the flag `--resource`. If you
    are wondering from where did I get the knowledge of this flag, because it isn't
    listed on package page, I got it from Laravel's Controller documentation at [https://laravel.com/docs/5.4/controllers#resource-controllers](https://laravel.com/docs/5.4/controllers#resource-controllers).
    However, as these commands are working because of a third party package, there
    can be a difference in Laravel documentation and these command's actual behavior,
    but as these were done to replicate those Laravel commands for Lumen, most probably
    they will be very similar.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, we have `PostController` with methods in it. Let's implement these methods
    one by one.
  prefs: []
  type: TYPE_NORMAL
- en: However, note that in Lumen and Laravel, unlike other PHP MVC frameworks, every
    URL should be told in routes or else it will not be accessible. Routes are a sort
    of only entry point, unlike other frameworks like `CodeIgniter` where the route
    is optional. In Lumen, routes are mandatory. In other words, every method of Controller
    will only be accessible through routes.
  prefs: []
  type: TYPE_NORMAL
- en: So before proceeding with `PostController`, let's add routes for post endpoints,
    otherwise `PostController` will be of no use.
  prefs: []
  type: TYPE_NORMAL
- en: Lumen routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Lumen, by default, routes live in `/routes/web.php`. I said by default because
    this path can be changed. Anyway, go to `routes/web.php` and look into it. You
    will see that it is returning a response by itself and not pointing towards any
    controller. So, you should know that it is up to route whether it returns a response
    or uses the controller for that. However, note that returning a response from
    route closure only makes sense if there isn't much logic involved. In our case,
    we will be mostly using controllers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how our routes will look when we add our first route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The code in bold is written by us. Here, get in `$app->get()` is used to specify
    the HTTP Method. It could be `$app->post()` but we used `$app->get()` to specify
    that the `GET` method is accepted. Then, there are 2 parameters in this method
    that you can see in the preceding code. First is the route pattern while the second
    parameter is an associative array which has the controller and the method in the
    `uses` key and route name in the `as` key: means after the domain or project URLs
    if `api/posts/` is an URL, it should be served by the `index()` method of `PostController`.
    While the route name is just there, if you want to specify route URLs by name
    in code then it is useful.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now to check if our route is correct and getting a response from Controller''s
    index method, let''s add something to the index method of `PostController`. Here
    is what we have added, for now, just to test our route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, try running this code. Before anything else, you need to use a PHP built-in
    server. Go to the `blog` directory where the whole code is and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, from the browser, hit: `http://localhost:8000/api/posts` and you will
    see the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, our route worked and served from the `index()` method of `PostController`,
    and if you return an array then Lumen converts it into JSON and returns it as
    JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'To further see the list of routes that certain URLs map to a particular controller''s
    particular method, simply run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You will see the detail of routes telling you which URLs pattern is associated
    with which piece of code.
  prefs: []
  type: TYPE_NORMAL
- en: REST resource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was a very basic example of the route and served from a `PostController`
    method. However, if you look at `PostController`, it has 4 more methods, and we
    need to serve 4 more endpoints as we discussed in Chapter 1, *RESTful Web Services,
    Introduction and Motivation*, and implemented in [Chapter 3](75dfe538-b06c-46b9-a07f-8ac29a158975.xhtml),
    *Creating Restful Endpoints*. So, we need to do the same thing in Lumen for other
    4 methods. To map 4 endpoints with these 4 methods, we shouldn't need 4 more routes.
    We can simply add a resource-based route which will map REST based URL patterns
    to all methods in `PostController`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we created `PostController` through the command line, it created a Resource
    Controller which means it has the necessary methods to serve RESTful endpoints.
    So in `routes/web.php` file, we should simply replace code we previously wrote
    with the resource route. Now, we should be able to map all RESTful endpoints to
    `PostController` methods by having this statement in the routes file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately, this resource route is available in Laravel but not in Lumen.
    Lumen uses a different router for better performance. However, this resource method
    is also very handy, and if we have 4-5 more RESTful resources, we can map all
    their endpoints in just 4-5 statements instead of 16-20 statements. So, here is
    a small trick to have this resource route sort of thing available in Lumen. You
    can add this custom method to the same route file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'So overall, our route file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The code written in bold is added by us. So, as you can see we have defined
    the `resource()` function in the routes file once, and we can use it for all REST
    resource routes. And then on the last line, we used the resource function to map
    all of the `api/posts` endpoints to `PostController` respective methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can test it, by hitting `http://localhost:8000/api/posts`. We can''t
    test other endpoints right now because we haven''t written any code in `PostController`
    other methods. However, you can see what routes exist by using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, this command will result in something like this on the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d2d15438-6b99-4d46-9620-e339b0e5651f.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see this is mapping paths to `PostController` methods exactly based
    on the RESTful Resource convention that we discussed in [Chapter 1](https://cdp.packtpub.com/building_restful_web_services_with_php_7/wp-admin/post.php?post=260&action=edit&save=save#post_412),
    *RESTful Web Services, Introduction and Motivation*. So now, for posts endpoints
    we are done with routing. Now we need to add code in Controller so it can add
    data to the database as well as fetch from the database. The next step is to create
    a Model layer and use that in Controller and return a proper response.
  prefs: []
  type: TYPE_NORMAL
- en: Eloquent ORM (model layer)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eloquent is an ORM that comes with Laravel and Lumen. It is responsible for
    database related operations as well as database relationships. **ORM** (**Object
    Relational Mapping**) basically maps objects with relations (tables) in the database.
    Not only that, based on the relationship you can get data of one table on the
    base of another table's relationship without going at the low-level detail. This
    not only saves our time but also keeps our code cleaner.
  prefs: []
  type: TYPE_NORMAL
- en: Creating models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to create models. Model layer is related to the database, so
    we will also mention database relationships in them. Let's create models for all
    three tables that we have. The model names will be `User`, `Post` and `Comment`,
    relating to the `users`, `posts` and `comments` tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t need to create a User model and it comes with Lumen. To create Post
    and Comment models, let''s run the following command that became available to
    us by using that `flipbox/lumen-generator` package. Run the following commands
    to make models:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will create a `Post` model in the `app` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create the `Comment` model in the `app` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: If you look into these model files, you will find that these are classes inherited
    by the Eloquent Model; so, these models are Eloquent based models and have characteristics
    of Eloquent Model.
  prefs: []
  type: TYPE_NORMAL
- en: Note, as per Eloquent convention, if the model's name is Post, the table's name
    will be posts, the plural of the model's name. Similarly, for the Comment Model,
    it will be the comments table. We can override this if our tables names are different,
    but we are not doing so because in our case, our table and Model names are according
    to the same convention.
  prefs: []
  type: TYPE_NORMAL
- en: 'Eloquent is a big topic to discuss, however we are just going to use it to
    make our API, so I will limit discussion to Eloquent''s usage in serving our purpose.
    And I think this makes sense because a lot of detail is already in Eloquent''s
    documentation, so for further details about Eloquent, please consult Eloquent''s
    documentation here: [https://laravel.com/docs/5.4/eloquent](https://laravel.com/docs/5.4/eloquent).'
  prefs: []
  type: TYPE_NORMAL
- en: Eloquent relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Model layer, especially when inheriting from ORM, there are 2 important
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: We should have Models so we can access data through them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should specify relationships so we can utilize ORM's full capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For just accessing data without writing a query, we can use Query Builder as
    well. But, relationships advantage is that it comes only with ORM usage. So, let's
    specify all of the models' relationships.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let''s specify User''s relationships. As the user can have many
    posts and the user can have many comments, the User model will have the `hasMany`
    relationship with both Post and Comment models. This is what the User model will
    look like after specifying the relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The only thing which we added to the User Model is these 2 methods in bold which
    are `posts()` and `comments()` specifying the relationship. Based on these methods,
    we can access a user's posts and comments data. Both of these methods tell us
    that User has many relationships with both the `Post` and `Comment` models.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's add a relationship in the `Post` model. As a post can have many comments,
    the `Post` model has many relationships with the `Comment` model. Meanwhile, the
    `Post` model has an inverse of many relationships with the User model and that
    inverse relationship is a `belongsTo` relationship. Here is the `Post` model code
    after adding relationship information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have specified Post's relationship with the `User` and `Comment`
    models. Now, here is the `Comment` model with relationships.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, for both the `Post` and `User` models, comments have a `belongsTo`
    relationship that is an inverse of `hasMany()`.
  prefs: []
  type: TYPE_NORMAL
- en: So, now we have specified relationships. It is time to implement `PostController`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: Controller Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's first add proper code in the `PostController` `index()` method that will
    return actual data. But to see data coming in response, it is better to insert
    some dummy data in the users, posts and comments tables. A better way to do this
    is to write seeds for that. However, if you don't want to look into how to write
    seeds then you can insert it manually for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an implementation of the `index()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Here, `paginate(20)` means that it will return a paginated result with the limit
    of 20\. And as you can see, we have used dependency injection to get the `Post`
    object. This is something that we have already discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we will have `PostController` other methods implemented here. This
    is what the `PostController` code will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are using the Post model and using its methods to perform
    different operations. Lumen''s variable and function names make it easier to understand
    what is going on, but if you are wondering what Eloquent methods you can use,
    to see these methods check Eloquent at: [https://laravel.com/docs/5.4/eloquent](https://laravel.com/docs/5.4/eloquent).'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't find any of Eloquent method's documentation there note that, a
    lot of functions that we used are of Query Builder. So see query builder documentation
    as well, visit [https://laravel.com/docs/5.4/queries](https://laravel.com/docs/5.4/queries).
  prefs: []
  type: TYPE_NORMAL
- en: As `CommentController` implementation will be similar, I would suggest you to
    implement `CommentController` by yourself, because you will actually learn when
    you do it by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: What we are missing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Are we done with making Controllers that serves RESTful resources endpoints?
    Actually no, we have missed many things. We just created basic RESTful web service,
    which can work just to give you an idea of how we can make it using Lumen, but
    we have missed many things. So, let's look at them and do them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Validation and negative cases?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we are only dealing with positive cases: that means we are not considering
    what happens if the request is not according to our assumption. What if the user
    is sending data with the wrong method? What if a record doesn''t exist with the
    ID that the user is passing on?'
  prefs: []
  type: TYPE_NORMAL
- en: In short, we are not yet handling all that, but there are things that Lumen
    is handling for us already.
  prefs: []
  type: TYPE_NORMAL
- en: If you try to hit endpoint URLs, `http://localhost:8000/api/posts/1` with the
    `POST` method, then, it is an invalid method. On those URLs, we can only send
    a request with `GET`, `PUT` or `PATCH`. With `GET`, it will trigger the `PostController`
    `show()` method while `PUT` or `PATCH` will trigger the `update()` method. But
    the `POST` method shouldn't be allowed. And in fact, if you try to send a request
    on these URLs with the `POST` method, it will not work, and you will also get
    a `Method Not Allowed` error just like it should be. So by defining our routes
    once, Lumen will deal with such errors by itself.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, Lumen will invalidate wrong URLs or wrong HTTP methods and
    URL combinations.
  prefs: []
  type: TYPE_NORMAL
- en: Other than that, we are not going to make it handle each and every case, but
    let's look at important stuff that we must deal with; stuff without which our
    work couldn't be completed.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's see what we have missed in each method of `PostController` regarding
    validation or missing use cases.
  prefs: []
  type: TYPE_NORMAL
- en: /api/posts with GET method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the response of `/api/posts` endpoint (in my case, there is only one
    record in DB):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: If you recall the response that we saw in [Chapter 1](42e167df-3aca-4f21-8d1d-c39d5865ab39.xhtml),
    *RESTful Web Services, Introduction and Motivation*, you will see that we are
    getting most of the information that we discussed but we are getting it in a different
    format. Although that is perfectly fine as it is giving enough information, here
    is how we can make it similar to what we decided.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the `index()` method will become:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The most important thing was that all the information at the root level of response
    isn't clean. We should eliminate the stuff that harms clarity because programmers'
    productivity can be affected if a programmer needs to spend more time just to
    understand something. We should have pagination related information under a separate
    attribute, which can be pagination or meta, so that the programmer can easily
    see data and other attributes.
  prefs: []
  type: TYPE_NORMAL
- en: We did it, but we did it manually. For now, let's be done with it. In the next
    chapter, we will see what is wrong with this, why we called it manually, and what
    we can do about it.
  prefs: []
  type: TYPE_NORMAL
- en: /api/posts with the POST method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This will trigger the `PostController::store()` method. The thing we have missed
    is validation. In fact, Lumen provides us validation support as well as some built-in
    validation rules. Lumen validation is very similar to Laravel, with some differences.
    I would suggest that you have a look at Laravel''s validation documentation, at
    [https://laravel.com/docs/5.4/validation](https://laravel.com/docs/5.4/validation),
    and Lumen''s validation differences with Laravel: [https://lumen.laravel.com/docs/5.4/validation](https://lumen.laravel.com/docs/5.4/validation).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have added validation in `store()`, so look at the code after adding
    validation and we will then discuss it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are doing 3 things:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have set the following validation rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `content` and `title`, these fields will be required and will be a minimum
    of 1 character long.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `status`, it is required and its value can be either published or draft
    as it is set as ENUM in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`user_id` is required and it should exist in the `users` table''s `id` field.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we made a validator object based on validation rules and input, and check
    if validator fails. Otherwise, we will keep proceeding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the validator fails, it returns an error manually. It is returning the same
    error description that it gets from the validator while returning an appropriate
    response code manually. And that's why we have used `\Illuminate\Http\JsonResponse`.
    The first parameter is the response body while the second parameter is the response
    code. And instead of writing 400 error code, we can use a constant in `\Illuminate\Http\Response`**.**
    So we will not need to remember the response codes, and someone reading our code
    will not need to know what the 400 status code is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please note that Error code, response code, and HTTP code represent the same
    thing. So don't get confused if you see them, they are used interchangeably in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: /api/posts/1 with the GET method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This will be served from the `show($id)` method. In our show method, we are
    just getting the record and returning, but what if ID coming in the `show()` method
    that is passed in URLs is incorrect, or records indicate that ID doesn''t exist?
    So, we just need to place a check to make sure that it returns a 404 error, if
    a post is not found with that ID. Our code for the `show()` method will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `abort()` method will stop execution with an error code passed to it. In
    this case, it will simply give a 404 Not Found Error.
  prefs: []
  type: TYPE_NORMAL
- en: /api/posts/1 with the PATCH/PUT method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It will be served by the `update()` method. Again, it is based on ID provided,
    so we need to check if that ID is valid or not. So here is what we will do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have used model''s `fill()` method, which will assign Post model with
    fields and values in $input and will then save it with the `save()` method. In
    Laravel documentation, you can see Insert and Update using Eloquent in different
    ways, which can be handy in different places: [https://laravel.com/docs/5.4/eloquent#inserting-and-updating-models](https://laravel.com/docs/5.4/eloquent#inserting-and-updating-models).'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you will see a Laravel documentation link instead of Lumen. It is
    because Lumen is mostly using the same code as Laravel. The documentation for
    all those components are mostly written in Laravel's documentation and it isn't
    replicated in Lumen documentation, so Lumen documentation is good where Lumen
    is different from Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: So that is what we have to do in the `update()` method.
  prefs: []
  type: TYPE_NORMAL
- en: /api/posts/1 with the DELETE method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The delete operation will be served by `destroy($id)`. Again, it depends on
    ID coming from an API user, so we need to place a similar check as we placed for
    `update()` and `show()`. Here is what it will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'With that, our `PostController` will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We are now done with returning proper response codes and validation and so on.
  prefs: []
  type: TYPE_NORMAL
- en: User authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The other thing we are missing till now is user authentication. We are passing
    `user_id` in the input, and that is wrong. We did that because we didn't have
    user authentication. So, we need to have an authentication mechanism. However,
    in addition to authentication, we need to have a token-generation mechanism as
    well. In fact, we will also need to refresh token as well. Although we can do
    this by ourselves, we will install another external package.
  prefs: []
  type: TYPE_NORMAL
- en: Starting user authentication at the end of the chapter doesn't make much sense,
    so we will be dealing with user authentication in next chapter because there are
    different things associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: Other missing elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Other things that we are missing right now are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: API versioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rate Limiting or Throttling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Need of encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transformers or Serializes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (This is to avoid making hard code manual return format inside the controller)
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will deal with user authentication and the preceding
    mentioned elements, and will make some other improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Comment Resource Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I left comment endpoints implementation to you, because it is very much similar
    to Post endpoints implementation. However, as comment''s two routes are different
    than others, just to give you an idea of what you need to implement, I am going
    to tell what you will add in the `routes` file so that you can implement `CommentController`
    accordingly. Here is the `routes/web.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have added the `$except` array as an optional third argument
    in `resource()` so that if we don't want to generate some particular route for
    a resource, we can pass that in the `$except` array.
  prefs: []
  type: TYPE_NORMAL
- en: In `CommentController`, the code will be very similar to `PostController`, except
    that for `store()` and `index()`, `post_id` will be the first argument and will
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Till now, we have created RESTful web services endpoints in a micro-framework
    named Lumen. We created migrations, models and routes. I implemented `PostController`
    but left `CommentController` implementation for you. So, as we can see that lot
    of problems that we discussed related to implementation in [Chapter 3](75dfe538-b06c-46b9-a07f-8ac29a158975.xhtml),
    *Creating Restful Endpoints*, are solved already because of using a framework.
    And we are able to solve many other problems very easily. So, using the right
    framework and packages, we are able to work much faster.
  prefs: []
  type: TYPE_NORMAL
- en: We have also identified some missing elements, including user authentication.
    We will solve them in the next chapter. In the next chapter, we will improve our
    work from the code aspect as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we were mostly working with Lumen. We looked at it but we
    were trying to proceed to make our API and so we were not able to see each and
    every part of Lumen and its code in detail. So, it is a good idea to see Lumen''s
    documentation: [https://lumen.laravel.com/docs/5.4/validation](https://lumen.laravel.com/docs/5.4/validation).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For better understanding, you should look at Laravel''s documentation, as some
    common components are explained mostly in Laravel''s documentation: [https://laravel.com/docs/5.4](https://laravel.com/docs/5.4).
    Other than the documentation of Laravel and Lumen, it is a very good idea and
    is recommended to go to [http://laracasts.com/](http://laracasts.com/) and see
    videos on Laravel. Don''t worry if you don''t find much stuff on Lumen, it is
    very similar to Laravel. Other than a few changes, they are pretty much same.
    To understand Laravel and/or Lumen, Lara casts is an excellent resource and is
    very popular in the Laravel community. Lara casts are mostly by Jeffrey Way. I
    learned a lot from him and hope that you will learn as well. It will not only
    teach you Laravel but also teach you how to develop something, and how you should
    do development.'
  prefs: []
  type: TYPE_NORMAL
