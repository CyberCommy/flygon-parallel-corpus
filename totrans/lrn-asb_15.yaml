- en: Introducing Ansible Tower and Ansible AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to be looking at the two graphical interfaces
    for Ansible, the commercial Ansible Tower and the open source Ansible AWX. We
    will discuss how to install them, what the differences are, and also why you would
    need to use them. After all, we are now 15 chapters into our journey with Ansible
    and have yet to need to use a graphical interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, we will have:'
  prefs: []
  type: TYPE_NORMAL
- en: Installed Ansible Tower and Ansible AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configured both tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployed our highly available cloud application using Ansible Tower
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be looking at using Ansible Tower and Ansible AWX locally using a Vagrant
    box; we are also going to be using the playbook we covered in [Chapter 10](56e8175f-d1a8-4b63-ad3f-fe94ff55135e.xhtml),
    *Highly Available Cloud Deployments*. The final playbooks can be found in the
    GitHub repository at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter15](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter15).
  prefs: []
  type: TYPE_NORMAL
- en: Web-based Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we look at installing the tools, we should first take the time to discuss
    why we need them and also the differences between them.
  prefs: []
  type: TYPE_NORMAL
- en: I am sure you are starting to notice a common thread between all of the playbooks
    we have covered so far—where possible, we are allowing the roles we are running
    to use as many parameters as possible. This makes it easy for us to change the
    output of the playbook run without having to rewrite or edit the roles directly.
    For this reason, it should also be easy for us to start using one of the two web-based
    tools provided by Red Hat for managing your Ansible deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Tower is a commercially licensed, web-based graphical interface for
    Ansible. As already mentioned, you might be struggling to see the value in this.
    Imagine being able to hook Ansible up to your company's active directory and have
    users, such as developers, use Ansible Tower to deploy their own environments
    based on your playbooks, providing a controlled way for you to maintain consistency
    across your estate while allowing self-service.
  prefs: []
  type: TYPE_NORMAL
- en: 'When Red Hat announced its acquisition of Ansible in October 2015, one of the
    questions in the FAQ it published on the day of the announcement was: *Will Red
    Hat open source all of Ansible''s technology?* The reason the question was asked
    was that with other technologies Red Hat has acquired over the years, it has open
    sourced almost all aspects of them to not only invite community contributions,
    but to test and build new features, which eventually made their way into Red Hat''s
    commercially supported version.'
  prefs: []
  type: TYPE_NORMAL
- en: An example of this is the Fedora project. This project is the open source upstream
    for Red Hat Enterprise Linux features—which Fedora users are taking advantage
    of now—including DNF, a YUM replacement. This has been the default package manager
    in Fedora since 2015 and, if everything goes as planned, it should make its way
    into Red Hat Enterprise Linux 8.
  prefs: []
  type: TYPE_NORMAL
- en: Other examples of Red Hat open sourcing its technologies include WildFly, which
    is an upstream for JBoss, and the ManageIQ, which is sponsored by Red Hat and
    is the basis for Red Hat CloudForms.
  prefs: []
  type: TYPE_NORMAL
- en: In September 2017, Red Hat announced it would be releasing Ansible AWX, an open
    source upstream for Ansible Tower. This project would have fortnightly releases
    with the AWX team, making select releases *stable*, although in this case, stable
    does not mean production ready as the project is still in its initial development
    cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Tower
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to start by looking at Ansible Tower. As you may recall, this is
    commercial software, so we will need a license; luckily, Red Hat provides a trial
    license. You can request it by clicking on the Try Tower Free button at [https://www.ansible.com/](https://www.ansible.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Please note, you must use a business address, Ansible will not accept requests
    which originate from an email address such as `me.com`, `icloud.com`, `gmail.com`,
    and `hotmain.com` and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a while, you will receive an email that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fae164f6-44f2-43ba-828d-cfa0dc7d9d48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the DOWNLOAD TOWER NOW (.TAR) button; this will open your browser
    and download a TAR file containing the playbooks we will be running to deploy
    Ansible Tower. Next up, we need a server to host our Ansible Tower installation.
    Let''s use the `Vagrantfile` we have used in other chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the `Vagrantfile` is in place, you can launch the Vagrant box using one
    of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once you have the Vagrant box up and running, you can look at what changes you
    need to make to the inventory, which is contained within the TAR file we downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the inventory file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several files provided in the top level of the unarchived folder,
    to unarchive the folder double-click on the TAR file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/92ca865e-46d5-4d3a-bb4b-654efca1ce0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We just need to worry about the `inventory` file; open the file in a text editor
    and update it so it looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have updated the host listed under the `[tower]` group to
    include the details and configuration for our Vagrant box; we have also added
    a password for the `admin_password`, `pg_password`, and `rabbitmq_password` parameters.
    Obviously, you can set your own passwords rather than using the ones listed here.
  prefs: []
  type: TYPE_NORMAL
- en: The final change to the file is that `rabbitmq_use_long_name` has been updated
    from `false` to `true`. A failure to do this would result in the RabbitMQ service
    failing to start.
  prefs: []
  type: TYPE_NORMAL
- en: Running the playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have updated the `inventory` file, we can run the `install.yml`
    playbook to kick off the Ansible Tower installation. To do this, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There are checks built into the playbook to see if the playbook is being run
    as the root user. In a typical installation, the playbook is expecting you to
    be running the playbook as the root user on the machine you want Ansible Tower
    to be installed on. However, we are doing things slightly differently, so we need
    to use the `--become` flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation process takes around 20 minutes and, as you can see from the
    following output, the installer works through a lot of tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/789e806f-e002-4216-b6b5-92944d9b3012.png)'
  prefs: []
  type: TYPE_IMG
- en: Requesting a license
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have Ansible Tower installed, there are a few more steps we need
    to perform in order to complete the installation. The first step is to log in;
    to do this, enter the following URL in your browser: `https://10.20.30.40.nip.io/`.
    When you first open Tower, you will be presented with a warning about the SSL
    certificate; this is because the certificate that was installed during the deployment
    is self-signed. It is safe to proceed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now see a login page; enter the USERNAME as `admin` and a PASSWORD
    of `password`, which is what we set in the `inventory` file earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4e12c388-4b18-42c3-a3f3-fd39ce22da43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then click on the SIGN IN button; this will take you to a page that instructs
    you to enter a license file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/af0bc969-d4be-4aea-afd5-fd236f80442c.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking the REQUEST LICENSE button will take you to [https://www.ansible.com/license/](https://www.ansible.com/license/);
    here, you have the option of requesting two types of license for your installation.
    We are going to be requesting the FREE ANSIBLE TOWER TRIAL - LIMITED FEATURES
    UP TO 10 NODES license. Select the license type, complete the form, and submit
    it as prompted.
  prefs: []
  type: TYPE_NORMAL
- en: After a short while, you should receive a few emails, one of which welcomes
    you to your Ansible Tower installation. The other email contains a license file.
    Make a copy of the attached license file and use the BROWSE button on the Tower
    License page to upload it. Also review and agree to the end-user agreement. Once
    you have uploaded the license file and agreed to the END USER LICENSE AGREEMENT,
    click on SUBMIT.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a few seconds, you will be presented with your first look at Ansible
    Tower:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/41ca39b4-0dbe-4c1d-a16f-7398de59637c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we have Ansible Tower installed, we can look at running our first playbook.
  prefs: []
  type: TYPE_NORMAL
- en: The hello world demo project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, we already have a project configured; this is an extremely basic
    one that downloads the sample playbook from [https://github.com/ansible/ansible-tower-samples/](https://github.com/ansible/ansible-tower-samples/)
    and displays the message Hello World. Before we can run the playbook, we first
    need to download a copy from GitHub; to do this, click on PROJECTS in the top
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be able to see the Demo Project listed. Hovering over the icons under
    actions will give you a description of what each one will do when you click it;
    we want to click on the first icon, Start an SCM update. After a short time, you
    should see that REVISION and **LAST UPDATED** are both populated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ed0bb817-c5fb-4151-a62d-301e52c1a3b8.png)'
  prefs: []
  type: TYPE_IMG
- en: This means that Ansible Tower has now downloaded the demo playbook from GitHub;
    we can now run the playbook. To do this, click on TEMPLATES in the top menu.
  prefs: []
  type: TYPE_NORMAL
- en: Again, you should see that there is a template called Demo Job Template and
    towards the right-hand side of the line there are several icons. The one we want
    to click is the one that looks like a rocket. Clicking Start a job using this
    template will run the demo job; you will be taken to a screen where you can monitor
    the progress of the job.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once complete, you should see something that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/37ebd7b4-0675-4c1a-bb65-b0779b2ea23e.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, on the left-hand side, you have an overview of the job itself;
    this tells you the status, when it started and finished, and which user requested
    the job to be executed. The section on the right-hand side of the page shows the
    playbook output, which is exactly the same as what we see when executing the playbook
    from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at running something more complicated.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the AWS playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 10](56e8175f-d1a8-4b63-ad3f-fe94ff55135e.xhtml), *Highly Available
    Cloud Deployments*, we worked through a playbook which used the AWS core Ansible
    modules to launch a cluster running WordPress; there is a standalone version of
    the `aws-wordpress` playbook hosted on GitHub at [https://github.com/russmckendrick/aws-wordpress/](https://github.com/russmckendrick/aws-wordpress/).
    Let's use this to deploy our AWS cluster using Ansible Tower.
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on to configuring the playbook within Ansible Tower, we need
    to do a little housekeeping on the versions of some of the Python modules that
    were deployed as part of the Ansible Tower installation. This is because there
    are parts of our playbook that require later versions of the Boto modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to SSH into our Ansible Tower host by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we are logged in as the Vagrant user, we can change the root with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we change to the same Python environment as Ansible Tower uses; to do
    this, we run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are using the right environment, we need to upgrade the `boto` libraries
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once updated, we can exit the Ansible Tower Python environment by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we use the `exit` command to log out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/93972b61-5047-4b28-bed5-eb3433ac515b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our environment updated, we can proceed to adding a new project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to do is add a new project; this is where we let Ansible
    Tower know about the repository hosting our playbook. As already mentioned, we
    will be using a GitHub repository that houses the code. To add a new project,
    click on PROJECTS in the top menu and then click on the +ADD button, which can
    be found on the right just under the row of icons in the top menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you will be asked for several bits of information; enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NAME: `AWS Project`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DESCRIPTION: `AWS WordPress Cluster`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ORGANIZATION: `Default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SCM TYPE: GIT'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you select the SCM TYPE, a second section will appear that asks for details
    about where your source is hosted:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SCM URL: `https://github.com/russmckendrick/aws-wordpress.git`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SCM BRANCH/TAG/COMMIT: master'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SCM CREDENTIAL: Leave blank as this is a publicly accessible repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Clean: Tick'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Delete on Update: Tick'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update on Launch: Tick'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CACHE TIMEOUT (SECONDS): Leave at zero'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have entered the details, click on SAVE. If you now return to the
    PROJECTS page, you should see that Ansible has already downloaded the source for
    the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/24a65a34-ffd8-4f41-b8b4-7125c23be058.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up, we have to let Ansible Tower know the credentials to use when accessing
    our AWS account; to add these, click on the Settings icon (the cog in the top
    menu) and you will be taken to a screen which looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/511cdd09-30d8-4e89-9dcc-f401feb5cc36.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are a lot of different options here. As you may have already
    guessed, the option we are interested in is the CREDENTIALS one. Clicking on it
    will take you to a page that gives you an overview of the existing credentials;
    we want to add some new ones, so click on the +ADD button.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should take you to a page that is similar in layout to the one where we
    added the project. Fill out the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NAME: `AWS API Credentials`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DESCRIPTION: `AWS API Credentials`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ORGANIZATION: `Default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CREDENTIAL TYPE: Click on the magnifying glass icon and select Amazon Web Services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the CREDENTIAL TYPEhas been selected, the second section will be added;
    here, you can enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ACCESS KEY: Add your access key from the previous AWS chapters, for example,
    `AKIAI5KECPOTNTTVM3EDA`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SECRET KEY: Add your secret key from the previous AWS chapters, for example,
    `Y4B7FFiSWl0Am3VIFc07lgnc/TAtK5+RpxzIGTr`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'STS TOKEN: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the form is completed, click on SAVE. Once saved, you will notice that
    the SECRET KEY is marked as ENCRYPTED:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6cf5b66-48ca-40fa-bbb6-ab7ae358c6c8.png)'
  prefs: []
  type: TYPE_IMG
- en: When you save sensitive information in Ansible Tower, it is encrypted, and you
    only have the option to REPLACE or REVERT it. At no point can you view the information
    again.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have the credentials in place, we need to recreate the content
    of the inventory file called `production` within Ansible Tower. As a reminder,
    the file looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To add the inventory, click on INVENTORIES in the top menu and then the +ADD
    button. You will notice that the +ADD button now brings up a drop-down list; from
    that list, we want to add an Inventory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the form that opens, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NAME: `AWS Inventory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DESCRIPTION: `AWS Inventory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ORGANIZATION: `Default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'INSIGHTS CREDENTIALS: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'INSIGHTS GROUPS: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VARIABLES: Enter the values listed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once entered, click on SAVE; this will create the Inventory, and we can now
    add the two groups we need. To do this, click on GROUPS, which can be found in
    the row on the buttons above the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6abeb18c-4611-4245-84f4-8c73e6cfd01f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **+ADD GROUP** and then enter the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NAME: `ec2_instance`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DESCRIPTION: `ec2_instance`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VARIABLES: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then click on SAVE, repeat the process, and add a second group using the following
    details:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NAME: `already_running`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DESCRIPTION: `already_running`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VARIABLES: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Again, click on SAVE; you should now have two groups listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/653abd86-9d9f-4828-ac8a-6f6cbf23fa19.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our project, inventory, and some credentials for accessing
    our AWS, we just need to add the templates, one to launch and configure the cluster,
    and another to terminate it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Click on TEMPLATES in the top menu and, in the drop-down menu of the +ADD button,
    select Job Template. This is the biggest form we have come across so far; however,
    parts of it will be populated automatically when we start to fill in the details.
    Let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NAME: `AWS - Launch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DESCRIPTION: Launch and deploy WordPress instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JOB TYPE: Leave as Run'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'INVENTORY: Click on the icon and select AWS Inventory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PROJECT: Click on the icon and select `AWS Project`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PLAYBOOK: Select `site.yml` from the drop-down list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CREDENTIAL: Select the CREDENTIAL TYPE of Amazon Web Services, then choose
    AWS API Credentials; also select the Demo Credential for MACHINE'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FORKS: Leave as Default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LIMIT: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VERBOSITY: Leave at `0` (Normal)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'INSTANCE GROUPS, JOB TAGS, SKIP TAGS, LABELS: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SHOW CHANGES: Leave OFF'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OPTIONS and EXTRA VARIABLES: Leave as their defaults'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on SAVE and you can add a second template to remove the cluster. To do
    this, click on the +ADD button and select Job Templateagain; this time, use the
    following information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NAME: `AWS - Remove`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DESCRIPTION: Remove the WordPress cluster'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JOB TYPE: Leave as Run'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'INVENTORY: Click on the icon and select AWS Inventory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PROJECT: Click on the icon and select `AWS Project`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PLAYBOOK: Select `remove.yml` from the drop-down list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CREDENTIAL: Select the CREDENTIAL TYPE of Amazon Web Services, then choose
    AWS API Credentials; also select the Demo Credential for MACHINE'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FORKS: Leave as Default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LIMIT: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VERBOSITY: Leave at `0` (Normal)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'INSTANCE GROUPS, JOB TAGS, SKIP TAGS, LABELS: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SHOW CHANGES: Leave OFF'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OPTIONS and EXTRA VARIABLES: Leave as their defaults'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our playbook ready to run, we can run it by clicking on TEMPLATES
    in the top menu and then clicking on the run icon, the rocket one, next to `AWS
    -Launch`. This will take the same amount of time to run as it did when we executed
    it from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/51ab538f-b42d-480d-ba33-a0257a04bbdd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the preceding screenshot, everything built and ran as expected,
    meaning that we will be able to see our WordPress site when going to the Elastic
    Load Balancer URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d97f6a4b-b560-46b3-a8b9-2ea9b55111ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Removing the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have launched the cluster, we can run the second playbook, which
    removes it. To do this, click on TEMPLATES in the top menu and then click on the
    run icon, the rocket one, next to `AWS -Remove`. This will launch the playbook,
    which removes everything we just launched. Again, it will take a little while
    to run through all of the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to point out that in order for the `remove.yml` playbook to
    successfully execute through Ansible Tower, you have to update one of the tasks
    in `roles/remove/tasks/main.yml`. If you recall, we had the following lines in
    there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If this task was present, then our playbook execution would stall at this task
    and not proceed, as Ansible Tower playbook runs are not interactive. The task
    was replaced with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This is the only change that was needed for our playbook to run using Ansible
    Tower; everything else remains as is.
  prefs: []
  type: TYPE_NORMAL
- en: Tower summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While we have only had time to run a basic playbook, I am sure you can start
    to see the advantages of using Ansible Tower for enabling all of your users to
    run playbooks. There are quite a few features you can use. However, there are
    three different versions of Ansible Tower currently available. The following table
    provides a quick overview of the features available in each version:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature** | **Self-Support** | **Standard** | **Premium** |'
  prefs: []
  type: TYPE_TB
- en: '| Dashboard: Get an overview of your Ansible Tower status | Yes | Yes | Yes
    |'
  prefs: []
  type: TYPE_TB
- en: '| Real-time job output: View the output of your jobs as they are executed in
    real time | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Job scheduling: Execute jobs on a schedule; also set up repeat runs, for
    example, every weekday at 9 a.m., run the job to deploy the development instances
    | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Pull from source control: Host your playbooks in source control, such as
    Git or SVN | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Workflows: Chain multiple playbooks together in one job | No | Yes | Yes
    |'
  prefs: []
  type: TYPE_TB
- en: '| Role-based access: Get fine-grained control of your users and what they can
    access | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Integration with third-party authentication: Hook your Tower installation
    into an Active Directory or an LDAP identity server | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Surveys: Build forms for users to fill out as part of a job run; this allows
    your users to provide information without them having to write any YAML | No |
    Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| 8x5 Support from Red Hat | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| 24x7 Support from Red Hat | No | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: 'The current license costs for Ansible Tower are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Self-support up to 10 nodes**: Free of charge; this is the license we applied
    to our installation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Self-support up to 100 nodes**: $5,000 per year'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Self-support up to 250 nodes**: $10,000 per year'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard up to 100 nodes**: $10,000 per year'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard over 100 nodes**: Custom pricing, contact Ansible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium up to 100 nodes**: $14,000 per year'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium over 100 nodes**: Custom pricing, contact Ansible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These prices do not include the Red Hat-supported Ansible Engine; there are
    additional costs for that on top of the ones listed here, if you want a supported
    Ansible engine.
  prefs: []
  type: TYPE_NORMAL
- en: So, Ansible Tower, while great, may not be within everyone's budget and this
    is where Ansible AWX comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get straight into installing Ansible AWX; we will need a Vagrant box,
    Docker installed on the Vagrant box, and finally a copy of the AWX source.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our installation, we will be using Ansible to prepare our Vagrant box and
    install Ansible AWX. To create the structure for the playbook, run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Vagrantfile` we are going to be using can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The first role we are going to create is one we have covered already; it is
    the Docker role from [Chapter 14](d71c8c72-7673-40f2-857a-a55514a7646b.xhtml),
    *Deploying WPScan and OWASP ZAP*.
  prefs: []
  type: TYPE_NORMAL
- en: The docker role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I am not going to go into detail about the tasks, as these have already been
    covered. We can bootstrap the role by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the files in place, we can update the `roles/docker/defaults/main.yml`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The content of `roles/docker/tasks/main.yml` should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This should get the Docker part of the AWX installation installed and allow
    us to move onto the next role.
  prefs: []
  type: TYPE_NORMAL
- en: The awx role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next and (sort of) final role for our AWX installation can be created by
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The default variables in `roles/awx/defaults/main.yml` are similar in format
    to the ones in the `docker` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Starting from the top, we have two different GitHub repo URLs. The first `awx.repo_url`
    is the main AWX repository and the second `awx.logo_url` is for the official logo
    pack. Next up, we have the path, `awx.repo_path`, and we want to check out the
    code too. In this case, it is `~/awx` which, as we are using `become`, will be
    `/root/awx/`.
  prefs: []
  type: TYPE_NORMAL
- en: To check out the code from GitHub, we need to make sure that we have Git installed.  `awx.packages`
    is the only additional package we need to install using `yum`. Next up, we need
    to install Ansible itself and a few of the other Python packages we will need
    using PIP (`awx.pip`).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have the command (`awx.install_command`) we need to run in order
    to install Ansible AWX. As you can see, we are using an Ansible playbook that
    ships as part of the code we are checking out; the command itself is overriding
    the option for using official AWX logos by passing `awx_official=true` as extra
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have discussed the variables we need to define, we can add the
    tasks to `roles/awx/tasks/main.yml`, starting with the tasks that install the
    Yum and Pip packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have the tasks that check out the two AWX repositories from GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, both repositories are being moved to the same location on our
    Vagrant box. The final task runs the playbook that downloads, configures, and
    launches the Ansible AWX Docker containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Running the playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our playbook in place, we can add our host inventory information
    to the `production` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can add the following to the `site.yml` file, and we should be
    good to run our installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To get Ansible AWX up and running, we need to execute one of the following
    commands to launch the Vagrant box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the following command will run the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take a few minutes to run through the playbook; once complete, you
    should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/978a3929-0a39-4176-9ab7-9a3904f7fe65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Opening your browser and going to `http://10.20.30.50.nip.io/` should show
    you the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/15b0a5e1-cdcf-472c-89b7-5dd3bde9e0f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Keep the page open and, after a few minutes, you should see a login prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Using Ansible AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You should be at a login prompt. The USERNAME and PASSWORD are `admin`/`password`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ce021ce4-f26e-4c3b-8f72-b176feee04e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you first log in, you may notice that the look and feel is similar to
    Ansible Tower, although, there are a few differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/36b9751c-cc82-4d13-b008-cb2cac6a3148.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the menu has moved from the top to the left-hand side and there
    are also more options. Clicking on PROJECTS in the left-hand menu will take you
    to the page where you can Get The Latest SVM Revision of the hello-world example
    we first ran in Ansible Tower. Click the cloud icon to download it.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the project synced, click on TEMPLATES in the left-hand menu;
    you should see an empty list. Click on the + button and select Job Template from
    the drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will take you to a page that is the same as we saw when adding a template
    in Ansible Tower. Fill in the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NAME: `Demo Template`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DESCRIPTION: `Run the hello-world example`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JOB TYPE: Leave as Run'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'INVENTORY: Click on the icon and select `Demo Inventory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PROJECT**: Click on the icon and select `Demo Project`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PLAYBOOK**: Select `hello-world.yml` from the drop-down list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CREDENTIAL**: Click on the icon and select the **Demo Credential** from the
    list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FORKS**: Leave as Default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LIMIT**: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VERBOSITY**: Leave at `0` (Normal)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**INSTANCE GROUPS**, **JOB TAGS**, **SKIP TAGS**, **LABELS**: Leave blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SHOW CHANGES**: Leave OFF'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OPTIONS** and **EXTRA VARIABLES**: Leave as their defaults'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once filled in, click on the **SAVE** button at the bottom of the form. Clicking
    on TEMPLATES in the left-hand side menu will now show the `Demo Template` listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2315d6be-97ba-4765-ac5c-5bca300f6dba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the rocket icon, or **Start a job using this template**, will run
    the hello world playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5850f7c3-e70f-4bf8-bff2-e59346fcffdb.png)'
  prefs: []
  type: TYPE_IMG
- en: So there we have it—a very quick overview of Ansible AWX which, as I have already
    mentioned, is not too dissimilar to Ansible Tower.
  prefs: []
  type: TYPE_NORMAL
- en: AWX summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get this out of the way now. At the time of writing, Red Hat does not
    recommend Ansible AWX for production environments. Personally, I have found it
    to be quite stable, especially for software that is in constant development. Sure,
    there have been some issues when upgrading but, for the most part, these have
    been minimal.
  prefs: []
  type: TYPE_NORMAL
- en: With Ansible AWX being the upstream of Ansible Tower, there are features present,
    such as being able to use third-party authentication services and workflows, which
    are not present in the self-supported version of Ansible Tower. There are also
    no limits on the number of hosts you can manage. This makes Ansible AWX a very
    attractive alternative to Ansible Tower; however, you do need to take into account
    its development cycle and how upgrades could affect the day-to-day running of
    your AWX installation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have worked through the installation and usage of two different
    web frontends that can be used to run your Ansible playbooks. We have also discussed
    the differences in cost, functionality, and stability between the various versions
    of the frontends.
  prefs: []
  type: TYPE_NORMAL
- en: I am sure you will agree that using a tool such as Ansible Tower or Ansible
    AWX will allow your users, colleagues, and end users to consume the playbooks
    you write in a supported and consistent way.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at the `ansible-galaxy` command and
    services in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: State and explain the differences between Ansible Tower and Ansible AWX.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Ansible AWX, configure and run the AWS WordPress playbook as we did with
    Ansible Tower.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more details on the two pieces of software, see the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ansible Tower overview**: [https://www.ansible.com/products/tower/](https://www.ansible.com/products/tower/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ansible Tower full feature list**: [https://www.ansible.com/products/tower/editions/](https://www.ansible.com/products/tower/editions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ansible AWX announcement**: [https://www.redhat.com/en/about/press-releases/red-hat-advances-enterprise-and-network-automation-new-ansible-offerings/](https://www.redhat.com/en/about/press-releases/red-hat-advances-enterprise-and-network-automation-new-ansible-offerings/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ansible AWX FAQ**: [https://www.ansible.com/products/awx-project/faq/](https://www.ansible.com/products/awx-project/faq/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ansible AWX GitHub repository**: [https://github.com/ansible/awx/](https://github.com/ansible/awx/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
