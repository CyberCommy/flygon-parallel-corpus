- en: Sniffing and Spoofing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network sniffing helps you understand which users are using services you can
    exploit, and
  prefs: []
  type: TYPE_NORMAL
- en: 'IP spoofing can be used to poison a system''s DNS or ARP cache, so that all
    their traffic is sent to a man in the middle (your designated host, for instance).
    Sniffing and spoofing are often used against the Windows endpoints in the network,
    and you need to understand the techniques that the bad guys are going to be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sniffing network traffic**: There are many tools to sniff network traffic,
    but they all work on the same principle.Â Capturing packets readable by your **Network
    Interface Card** (**NIC**). There are hundreds of protocols, and thousands of
    TCP/IP ports. It is safe to say that you will not have to learn about all of them,
    but you will probably learn a couple of dozen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spoofing network traffic**: The TCP/IP system is trusting. The general assumption
    underlying the way networks work involves an expectation of trustworthiness. What
    happens when a malefactor decides to play tricks with the way network packets
    are put together? This is spoofing. For example, when an ICMP packet is broadcast
    to a large number of hosts, but the origin IP address has been forged to point
    to a specific target host, all the hosts sent the broadcast packet send an unexpected
    acknowledgement to the victim. This is a *Smurf Attack*, and it ties up the victim
    machine. The Smurf Attack is one of many denial of service attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will be learning about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing and spoofing network traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sniffing network traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spoofing network traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need at least two running Windows machines, either
    actual machines or virtual machines, and your Kali machine.
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing and spoofing network traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will have most likely noticed the Kali Linux motto: *The quieter you are,
    the more you are able to hear*. This is the heart of sniffing network traffic.
    You quietly listen to the network traffic, copying every packet on the wire. Every
    packet is important or it wouldn''t be there. Think about that for a moment with
    your security hat on. Do you understand why sending passwords in clear text is
    so bad? Well, protocols such as Telnet, FTP, and HTTP send passwords in clear
    text, instead of an encrypted hash. Any packet sniffer will catch these passwords
    and it doesn''t take a genius to launch a search of the packet capture for terms
    such as password. There''s no need to crack a hash; it is just there. You can
    impress a manager or a client by just pulling their clear-text password out of
    thin air. The bad guys use the same technique to break into networks and steal
    money and secrets.'
  prefs: []
  type: TYPE_NORMAL
- en: More than just passwords can be found within your copied packets. Packet sniffers
    are not only useful for purposes. They can be useful when looking for an attacker
    on the network. You can't hide from a packet sniffer. Packet sniffers are also
    great for network diagnostics. For instance, a sluggish network could be caused
    by a server with a dying NIC that is talking away to no one, or a run-away process
    tying up many others with responses.
  prefs: []
  type: TYPE_NORMAL
- en: If sniffing is listening to the network then spoofing is lying on the network.
    What you are doing is having the attacking machine lie to the network and pretend
    to be someone else. With some of the tools described next and with two network
    cards on the attacking machine on the network, you can even pass the traffic onto
    the real host and capture all traffic to and from both machines. This is a **Man-in-the
    Middle** (**MitM**) attack. In most cases of pentesting, you are really only after
    the password hashes that can be obtained without a full MitM attack. Just spoofing
    without passing the traffic on will reveal password hashes in the ARP broadcasts
    from NetBIOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hacker tip:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced Hacking Lab: if you are planning to run full MitM attacks on your
    network, you will need a host with at least two NICs in addition to your laptop
    with Kali Linux installed. Your MitM host can be a virtual or physical server.'
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing network traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we are going to learn the meaning of Kali's logo, *The quieter you become,
    the more you can hear*, and the information that can be gained from a network
    passively.
  prefs: []
  type: TYPE_NORMAL
- en: tcpdump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: tcpdump is a simple command-line sniffing tool found on most router, firewall,
    and Linux/UNIX systems. There is also a version that runs on Windows made by micoOLAP,
    which can be found at [http://www.microolap.com/products/network/tcpdump/](http://www.microolap.com/products/network/tcpdump/).
    It's not free, but there is a trial version. The nice thing about this version
    is that it is one simple executable which can be uploaded to a system and used
    without installing extra drivers. It can be launched on a cracked system to which
    you have shell access. Your shell must have system or administrator level access
    to work, because NICs will not run in promiscuous mode without administrative
    privileges. Another packet dump tool is **Windump.exe**, available from [http://www.winpcap.org/windump/install/](http://www.winpcap.org/windump/install/),
    where you will also find **WinPcap.exe**, which you need on the machine to run
    tcpdump or WinDump.
  prefs: []
  type: TYPE_NORMAL
- en: On Linux/UNIX systems and routers such as Cisco or Juniper, it is likely to
    be installed by default. If you cannot find it on a Linux system, it is in every
    distribution repository.
  prefs: []
  type: TYPE_NORMAL
- en: tcpdump is best used not for collecting data for real-time inspection, but for
    capturing data to a file for later viewing with a tool such as Wireshark. Because
    of its small size, portability, and use from the command line, tcpdump is great
    for this task.
  prefs: []
  type: TYPE_NORMAL
- en: In the following screenshot, we see `tcpdump` running without saving to a file;
    note that we can see the packets as they pass through the interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command we are running is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `-v` puts the application into verbose mode. The `-i vmnet1` tells the application
    to only capture the packets on the `vmnet1` interface. By hitting the *Enter*
    key, tcpdump will start capturing packets and displaying them on the screen. To
    stop the capture, hit *Ctrl* + *C*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in this mode, the data is going to pass too fast for any real use, especially
    on a large network, so next we will save the data to a file so we can view it
    at our leisure and with better viewing tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cac9609b-ae90-4011-8a4d-85982480895e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will run the following command and pipe the output to a `.pcap` file.
    Note that there isn''t the output to the screen that you saw earlier. The data
    is going to the file now and not the screen. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we are adding `-w kalibook-cap-20150411.pcap` to the command. The
    `-w` flag tells the application to write out to the file named `kalibook-cap-20150411.pcap`.
    The file should have a descriptive name, and I also include the date in the filename.
    If you do this testing from time to time and don''t delete the files from the
    system, several of these files on the same system can be confusing. `.pcap` is
    the standard filename extension used in the industry for packet files, and stands
    for **Packet Capture File**. This file can be moved to another machine using file
    transfer methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e5f312e-c4b5-4fea-a161-c115c65ae1c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that this capture is done on a machine named **Wander**. Wander is our
    network's firewall, which is the best place if you can to capture network traffic.
    We will now transfer it to our Kali box to inspect the packets.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, on our Kali machine, we need to start up the SSH service. As we have
    said before, Kali includes all network services that you would find on any Linux
    server, but for reasons of security all services are turned off by default, and
    must be started manually for use. We''ll fire up SSH with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/1cfccc6f-0052-4eed-9b5b-e6a83ac1413d.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the SSH service start and, by running the `netstat -tl` command,
    we can see we have the SSH service listening on all interfaces. We are now going
    to transfer the files from the firewall to Kali.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Kali, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show you your IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d0aad11-a0f0-4870-850c-0bcd1a0ab738.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, from the firewall, transfer the file to Kali by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Accept the key warning by typing `yes` and then entering the root password when
    prompted.
  prefs: []
  type: TYPE_NORMAL
- en: 'I made a boo-boo in the demo and tried to send it to the wrong directory. There
    isn''t a `workspace` directory. If you see this type of error, this is most likely
    the reason. Notice that I have sent this file directly to the project directory
    on the Kali box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea87e752-888c-41de-bde2-6c1bb69d5eb7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you are done, don''t forget to turn SSH off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Well, this is good for systems with SSH built in but what about Windows? Most
    people seem to use `putty.exe`, but your cracked server system is unlikely to
    have putty installed. We'll fall back to good old FTP. Most Windows systems come
    with the FTP command line utility. Sometimes, the security-conscious sysadmin
    removes `ftp.exe` from the machine and this blocks this type of file transfer.
    Normally it's there for your use. If it is not there, go to [http://www.coreftp.com/](http://www.coreftp.com/)
    and download Core FTP. They have a free version that would work for this application,
    and you can also get a paid license for more features.
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to transfer the `tcpdump` utility to our cracked Windows machine
    to capture some packets.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need to set up the FTP service on Kali to transfer back and
    forth. We will use our friend Metasploit for this. Metasploit has an easy-to-use
    FTP service for this purpose. We will need a folder to work from:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the computer on the desktop on the Kali box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Home link in the left-hand list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click in the folders area and pick Create new folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name it `public`, and then right-click on the folder and go to Properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Permissions tab and give both the Group and Others read/write
    access and the ability to create and delete files, as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b2c8e51-0791-408b-b5ec-41daa21b5d34.png)'
  prefs: []
  type: TYPE_IMG
- en: If using the command line then. Make a directory by `mkdir public`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now copy `NDIS driver` and `tcpdump.exe` to the `public` folder. You will want
    to rename the tcpdump file in the case of anti-virus and/or IDS/IPS systems that
    might be in use on the target network. I have changed the name to `tdpdump.jpg`.
    The `microolap_pssdk6_driver_for_ndis6_x86_v6.1.0.6363.msi` driver file will normally
    pass OK.
  prefs: []
  type: TYPE_NORMAL
- en: Now fire up Metasploit on the Kali box by going to Applications| Kali Linux
    | System Services | community/pro start to start the service. Once the service
    is started, open a Terminal window and type `msfpro`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit will start. Once Metasploit is running, move into your workspace
    for your project. My workspace is named `kali-book-int-20150300`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will configure the FTP server and fire it up. To load the FTP server,
    type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a41ee932-fafe-4b0f-8553-a9d28aeeb3c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to change the `FTPROOT` setting type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'By running the `show options` command again, we can check our configuration.
    We''re ready to go. Type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a0613b8-e4c0-4533-bbd2-2b89d5e74dd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see the service by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/511078b3-7ce0-49b8-ac7d-bc6a25894bf8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's copy over our files to our pwned Windows machine and capture some
    tasty packets! We will be using WinDump for this process on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: WinDump (Windows tcpdump)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WinDump is the tcpdump for Windows. It is open source and under the BSD Licenses.
    You can download it at [https://www.winpcap.org/windump/](https://www.winpcap.org/windump/).
  prefs: []
  type: TYPE_NORMAL
- en: You will also need the WinPcap drivers, so be sure and get them from the site
    also.
  prefs: []
  type: TYPE_NORMAL
- en: WinDump will work from a command line, PowerShell, or a remote shell. Like tcpdump,
    it will write out to a file that you can download for offline viewing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s copy the files over to our pwned Windows machine. From either the
    command line, Power Shell, or from an exploited remote shell, log into the FTP
    server on Kali. My Kali box is at `192.168.202.129`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The system will ask for a username. Just hit *Enter*. It will also ask for
    a password. Just hit *Enter* again and you''ll be logged on. Then type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show the contents of the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95206610-ff09-4deb-80a9-8d12bf068182.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As seen in the preceding screenshot, we see our `WinPcap` driver and our undisguised
    `WinDump.exe`. To download them, just type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve got our files. Now log out as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, we now have our files locally by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also see the files being transferred on Kali from the running instance
    in Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/731b1d91-65c1-4191-a7e9-2eebba26680c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now log into your pwned Windows machine, either through RDP or starting a VNC
    session from Metasploit. From the desktop, go to the folder where you downloaded
    your files and double-click the `WinPcap.exe` file, as you can see in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dcf8396d-06aa-4ce0-8402-1188324e7ea3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you''ll get the licenses windows. Click I Agree and move on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61187d7d-fbd3-4bf0-a534-7a4cd74dab3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next screen starts the actual installation of the driver. Be sure and keep
    the checkbox checked to run automatically. This will be a big help later if you
    have to go back:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7809c710-3f64-41af-a0de-60b73d1dc65a.png)'
  prefs: []
  type: TYPE_IMG
- en: With this done, you are ready to capture some packets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fire up either a command-line window or Power Shell and go to the directory
    where you have WinDump. Here we have it in the `Downloads` folder. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Soon you will start seeing packets pass through the interface. How much you
    see on your screen will depend on how much your system is talking to the network.
    As you can tell, this is way too much data to try to understand in real time.
    Also, in this mode, you are only seeing the header information of the packet and
    not the complete packet and its information. In the following screenshot, the
    yellow underlining shows the command being run and the green underlining shows
    that it is listening on the running interface. After that, you see the packets
    coming in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s dump our capture to a file so we can really see what we have by
    running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d9373f2-ab0b-434f-874b-7b2a4924e366.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The -`w` file tells WinDump to write to the file `Win7-dump-20150411.pcap`.
    As you can see in the following screenshot, running WinDump with the `-h` flag
    will help if you ever forget the write flag. After it has run for a bit, hit *Ctrl*
    + *C* to stop the capture. You can now see we have a file containing our captured
    packets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/559064cc-e653-4f80-996b-563e91d0abb2.png)'
  prefs: []
  type: TYPE_IMG
- en: After the capture, we need to send the file back to Kali to analyze the packets.
  prefs: []
  type: TYPE_NORMAL
- en: Windows file sharing works for this. If Printer and File Sharing isn't turned
    on, enable it to share files and return to your Kali box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hacker tip:'
  prefs: []
  type: TYPE_NORMAL
- en: This process may cause an alert, if the network administrators have something
    such as Tripwire running to check for configuration changes, or have ArcSight
    set up to flag logged actions by administrative users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali has SMB file sharing and NetBIOS discovery built right into its file manager
    in all desktop environments. You can map to the SMB share from the file manager.
    In the following demonstration, we are using the MATE desktop. From its file manager,
    you can map a SMB share by going to Go | Location... in the menu bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc294105-73e8-444c-8d16-8be22b754fa6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will give you a Go To: address bar. Since we are going to use the SMB
    protocol, we will use the prefix `smb://`. Other service type shares can also
    be mapped using this method, such as SSH, FTP, and NFS shares. To connect to the
    victim machine and copy over the file, type `smb://10.0.2.101/C$`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then hit the *Enter* key. This maps to the hidden `C$` share:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4544778-8b21-4709-a899-bd1b1836d910.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After hitting *Enter*, you will be given a login box. To log in to the share,
    just add the Windows credentials you have and then hit the Connect button. You
    will now see the shared directories on the system. Drill down into the folders
    and go to the directory where the packet capture is. For us, it will be `Users\Administrator\Downloads`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50b8ddf5-a002-4444-a242-adc6b6f29ede.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have gotten to where the file is, click on the Computer icon again,
    open up another file manager window, and then go to your evidence directory for
    your project. Then just drag and drop the file onto Kali''s drive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c037bc06-341d-4cb9-9c3d-1aaddae1b516.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we're ready to read some captured packets.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Wireshark** is the industry defacto standard for packet sniffing and analyzing
    network packets. Not only does it work for TCP/IP but it also works for just about
    every other known protocol and standard. There are versions of Wireshark for every
    well-known operating system. You will need the WinPcap drivers from earlier in
    the chapter to run Wireshark on Windows. On Linux/UNIX and OSX, the drivers are
    generally already there. Wireshark comes preloaded on Kali.'
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark is an extremely complex application. There have been many books written
    on its use. I do suggest getting one and learning the in-depth use of this tool.
    We will only cover the basics here.
  prefs: []
  type: TYPE_NORMAL
- en: What is the internet if you really think about it? Some people point to their
    web browser and say there is the internet. A SysAdmin might give you a long answer
    about servers and devices transmitting data across a network. Everyone is right
    in their answer but still really miss exactly what it is. The internet is packets.
    Without packets, the information goes nowhere. Most don't realize that TCP/IP
    is two different protocol suites that work independently of each other. There
    is IP and then there is TCP and UDP, which run on top of IP. Then all this runs
    on top of internet frames.
  prefs: []
  type: TYPE_NORMAL
- en: We'll get back to Wireshark in a minute. First we need to understand what a
    packets.
  prefs: []
  type: TYPE_NORMAL
- en: The packet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at a packet. The following is just one packet of information pulled
    from a captured data stream. Please remember: this is just one packet!'
  prefs: []
  type: TYPE_NORMAL
- en: Oh, a little history here. If you look at the structure of the packet and look
    at the structure of an old telegraph message, you will notice the structure is
    the same. Yes, a packet is basically a telegram. Also, remember Morse code is
    basically a four-bit binary language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that first we have the **frame**. The frame contains basic information
    about the packet you can see. The bytes on the wire are captured by Wireshark.
    This also keeps the timing of the packets that are used in reassembling the packets
    when received:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have the IP section of your packet. We see that this contains the
    MAC addresses of the source and destination interfaces. Your MAC address is your
    real machine address. The IP part of the stack does the routing so that the two
    MAC addresses can find each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The next section of the packet is where TCP comes in and sets the type of TCP
    or UDP protocol to be used and the assigned source and destination ports for the
    transmission of the packet. This packet is being sent from a client machine (the
    source). From the preceding IP section, we see the client IP address is `192.168.202.130`.
    We see the client''s port:Â `49161`. This packet is being sent to `192.168.202.128`
    (the destination) at port `445`. This being TCP, a return route is included for
    returned traffic. We can tell just by the `Destination port` information that
    this is some type of SMB traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the packet information, 0 is no and 1 is yes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that this is a NetBIOS session using the SMB protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Next, we have access granted to the data we are requesting. We can now see this
    packet is involved with accessing a file. The user who has done this request has
    the following permissions to view the file requested. We can see from the preceding
    code that a successful status was given for the file request.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'All the preceding code is to let one computer know that on another computer
    there exists a file named `\My Videos\desktop.ini`. 47 bytes of information was
    sent. Now this wasn''t the actual file but just a listing of the file. Basically,
    this would be the packet that makes a file icon appear in your window manager.
    It sure takes a lot to send just a little bit of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know a bit about packets, let's get back to Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Wireshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's open it up and open our capture. First, go to Applications | Kali Linux
    | Top 10 Security Tools | wireshark. When it starts, it will give you warnings
    about running as root. Just click through these. If you like, check the box to
    the effect that you don't want to see these again. When you work with Kali, you
    will always be working as `root`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another warning: never do this with a production Linux machine. Never log in
    and run as `root` anywhere except Kali. Wolf added a standard user and `sudo`
    to his Kali Linux test box and it only runs as `root` when he is actually running
    a test.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/257d67e6-3cbf-4cd6-8c7e-289c9fcdb827.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the warnings, the window will open. As we can see, we have a really nice
    interface. You can do more than read captures. You can capture packets from the
    local interfaces listed. To the right, you will see a section for Online Help.
    If you get lost and need help, that is where you go. You''ll find tons of help
    online:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/345cb7f8-711a-4e6c-8f72-969cddde5837.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s open our capture. Click on File | Open and you will get a file menu.
    Navigate to where your file is and click Open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d999690c-f766-4d42-9c16-a5e7eaca7d83.png)'
  prefs: []
  type: TYPE_IMG
- en: Now the capture is open and all the data captured is listed in the top screen.
    Each listing is a packet. What you see is the header information of the packet,
    its source, its destination, and its protocol type.
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking on a packet in the top screen, the full information of that packet
    will be in the middle screen. This will be the information we saw earlier when
    we were breaking down a packet. This is where you will see that information. Actually,
    this is the packet in human-readable form. In the bottom screen, we have the actual
    raw packet in machine language. By clicking on the lines of information in the
    middle screen, Wireshark will highlight in blue the string of machine language
    showing where that code is on the packet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/757a53ba-47c2-4a94-9ca3-00d3738a1cdd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the first screen, we see the overall traffic. We see a machine making
    a DHCPv6 Solicit call and not getting a response from anywhere. Hmm, IPv6 must
    be turned off on this network. Next, we see the back and forth traffic between
    `192.168.202.128` and `192.168.202.130` talking SMB. Just from the headers, we
    can see that this transmission is for file information on `192.168.202.128` using
    SMB. We can tell that a user on `.130` has access to `.128` just by looking at
    the headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5aec13f-ae5d-4b62-8195-966e52b62117.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So where is the good stuff? In the following screenshot, we have an `SMB NTLMSSP`
    packet and we can even see that this is for the account `IVEBEENHAD\Administrator`
    in the header. By selecting the packet, we can drill-down into the packet and
    find the NTLM hash value of the password. This alone can be used in exploitation
    tools that can pass the hash. You can also bring this hash value into an offline
    password cracking tool, such as John the Ripper or Hydra. Notice that you can
    also see the value in the raw packet information in the bottom screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90479b5c-6336-47a1-bfcb-c9891bac9ffc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One of the best features of Wireshark is the **search** function. The details
    of this function are enough for a book in themselves. You can build expressions
    with the Expression... button on the right side of the Filter field. From simple
    filters, such as `ip != 10.0.0.232` (to slice out all traffic to your Kali box),
    or checking for unexpected SMTP traffic by entering SMTP into the Filter field,
    there is endless fun in store as you learn the filters you need the most. The
    online help will explain much, and like all good knowledge repositories it will
    open new questions as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/120a512c-5048-471d-8bac-12eaeaed4eba.png)'
  prefs: []
  type: TYPE_IMG
- en: Spoofing network traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several definitions of spoofing on the internet:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Email spoofing**: The most common definition related to masquerading as a
    different person by using a fake email address. This works well when attempting
    a **phishing attack**, where the victim is sent an email that purports to be from
    their bank or a retail store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain spoofing**: It is possible to spoof a domain, where you poison the
    route table on a network or individual workstation. How that works is that the
    domain the user types into the address bar of their browser is misaligned to point
    to a false IP address. When the victim goes to [http://bankarmenia.com/](http://bankarmenia.com/)
    they end up at a phishing site that looks exactly such as the Bank of Armenia
    site, but is not. This is used to collect credentials from users for purposes
    of theft.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain error spoofing**: Hackers buy domains that have common errors for
    popular sites, such as `https://www.yaahoo.com/`. They build a site that looks
    such asÂ [https://www.yahoo.com/](https://www.yahoo.com/), and benefit from all
    the misspellings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP spoofing**: The creation of crafted packets for the purpose of masquerading
    as a different machine, or for the purpose of hiding the origin of the packets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ettercap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/729ca8ba-aa0a-41d3-95e8-fe6d1005018f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cute logo and very revealing. Yes, that is a wireless router on the spider''s
    back. Ettercap has some great plugins for wireless networks. We won''t be covering
    wireless right now, but it''s something to know. Ettercap can sniff and capture
    data just such as tcpdump and Wireshark, but it can also spoof network traffic,
    capture interesting information, and pipe it to a file. The graphical interface
    can be found at Applications | Kali Linux | Sniffing/Spoofing | Network Sniffers
    | ettercap-graphical, which will fire up Ettercap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5bd16b7c-25f4-4ab3-81b0-86a4374ad099.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the graphical interface for Ettercap. We first
    start Unified Sniffing by selecting Sniff | Unified Sniffing... in the menu bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ef36662-0c3b-4df2-8c47-d8952ea216dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now asked which interface to use. Normally, it will be the default if
    needed. With the drop-down box, you can select any interface on the system. Click
    OK:'
  prefs: []
  type: TYPE_NORMAL
- en: Warning!
  prefs: []
  type: TYPE_NORMAL
- en: When using SSH tunneling, Ettercap will break the tunnel connection if used
    from the remote machine. They don't seem to play well with each other.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ab039c8-4325-44da-ae8e-50b6ee5049cd.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that the menu bar has changed once Unified Sniffing is configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to log messages. Go to Logging | Log user messages... in the
    menu bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c22cdc99-d696-4502-b383-59a428cc47fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be given a window with which to name the file for the message output.
    Give it a filename and click OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/312f377c-44ee-4726-9fae-cd686e0f9a32.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will need to start sniffing the traffic. Go to Start | Start Sniffing.
    What is happening here is the same function that is performed by either tcpdump
    and Wireshark. Ettercap at the moment is just passively capturing packets. Before
    starting your sniff, you can set up Ettercap under the Logging menu to also save
    all captured packets for later inspection. You just save the capture to a `.pcap`
    file, just like in tcpdump and Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: 'Normally, just saving the output of the user messages is good enough for pentesting.
    When pentesting, you are mainly after passwords and login credentials. The message
    log will catch these. Sometimes, for some extra reconnaissance, you can throw
    in saving the whole capture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7c68ac9-4a38-4ad1-8587-f16b88862f04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once sniffing has started, we need to scan for hosts. Go to Hosts | Scan for
    hosts in the menu bar. This will scan the local network for available hosts. Note
    there is also an option to Load from file.... You can pick this option and load
    a list of host IP addresses from a text file. This is a good option when on a
    large network and you only want to spoof traffic to the file servers and domain
    controllers and not spoof the workstations. This will cut down on network traffic.
    ARP spoofing can generate a lot of traffic. This traffic, if it is a large network,
    can slow the network. If you are testing surreptitiously, the traffic will get
    you caught:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15805e3d-d9fb-4904-ac12-1830a87c7275.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we see a list of hosts we picked up from our scan.
    Since this is a small network, we will spoof all the hosts. We see that we have
    five hosts listed complete with MAC addresses. Remember that one of these is the
    testing machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b1606e9-3595-4085-8160-c8e56d0b4d09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re ready to poison the water and see what floats up. Go to Mitm | Arp poisoning...
    and click on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c574c16-c748-4012-af9e-712b155c1dc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then get a window to set the type of poisoning to perform. Pick Sniff
    remote connections. and click OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac22faca-660e-49bd-9641-88ba9b871bac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screen shows a DNS-poisoning in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe83501a-ced0-421b-87f2-ce83b2759e7b.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the poisoning is done, data will be sent through the Ettercap interface
    that shows you administrative users and their NTLM password hashes. This is enough
    information to start working on password hashes with John the Ripper or Hashcat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hacker tip:'
  prefs: []
  type: TYPE_NORMAL
- en: Even if the administrator passwords failed, you should still crack them. The
    admin user might have forgotten which machine they were logging into and the failed
    passwords might work somewhere else in the system.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3de540b-7eec-41f7-9f28-49ae25b6611c.png)'
  prefs: []
  type: TYPE_IMG
- en: In most security policies, Windows systems are set to refuse connections after
    five or six attempts from a user. This policy protects user accounts from brute-force
    password attacks or password guessing attacks. This will stop brute-forcing passwords
    but as you can see, this policy has no effect on an exploit of this kind. You
    already have the administrator password, so you can log in the first time.
  prefs: []
  type: TYPE_NORMAL
- en: One great feature of Ettercap is that it also works under the command line using
    the Ncurses interface. This is great when working from a remote system using SSH.
    Use the *Tab* key and arrow keys to move around in the menu and the *Enter* key
    to select.
  prefs: []
  type: TYPE_NORMAL
- en: Ettercap on the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In many situations, you will not be able to use Ettercap''s graphical interface.
    When you are mounting an attack from a cracked Linux machine, you are likely to
    discover it does not have a graphical desktop at all. In such a situation, you
    can use the Ettercap curses version or the text-only version. This is great when
    working from a remote system using SSH. Use the *Tab* key and arrow keys to move
    around in the menu and the *Enter* key to select:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11a8cd5d-c128-4404-90e6-5565951a933e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To start Ettercap from the command line, you will need to add some flags to
    the command; as in most Linux commands you can use `ettercap -help` to get a list
    of flags and their meanings. For basic use, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `-C` flag starts Ettercap in Ncurses mode. I have included the `-m ettercap-mgs.txt`
    flag to pipe out the message output to the `ettercap-msg.txt file`. If you want
    to save the whole capture, add `-w ettercap-capture.pcap`. This will save the
    full capture so you can pull it in later into Wireshark if needed. I have found
    it's easier to use the command-line flags to save outputs.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the CLI-based Curses Interface.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/486c4172-9192-41ab-8259-55f39d2104f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next screenshot shows you the CLI-based text-only interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/814b95f9-5c84-4a8b-bcad-94c3d820070a.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were shown how to sniff a network with tcpdump, WinDump,
    and Wireshark, and how to filter for protocols and IP addresses. Following that,
    you got to play with spoofing and ARP poisoning using Ettercap.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we will actively engage our targets using information gained
    from our ARP spoofing here and learn how to crack passwords both on and offline.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on Wireshark, visit its documentation site at the following
    link: [https://www.wireshark.org/docs/](https://www.wireshark.org/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on tcpdump, visit its site at the following link: [http://www.tcpdump.org/#documentation](http://www.tcpdump.org/#documentation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on Ettercap, visit its site at the following link: [https://www.ettercap-project.org/](https://www.ettercap-project.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
