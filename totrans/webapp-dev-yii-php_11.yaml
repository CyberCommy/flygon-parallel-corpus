- en: Chapter 11. Using Yii Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have added a lot of functionality to our TrackStar application. And
    if you recall back to [Chapter 7](ch07.html "Chapter 7. User Access Control"),
    *User Access Control*, we introduced user access controls to restrict certain
    functionalities based on a user role hierarchy. This was very helpful in restricting
    access to some of the administrative functions on a per project basis. For example,
    within a specific project, you may not want to allow all the members of the team
    to delete the project. We used a role based access control implementation to assign
    users to specific roles within a project, and then allowed/restricted access to
    the functionality based on these roles.
  prefs: []
  type: TYPE_NORMAL
- en: However, what we have not yet addressed are the administrative needs of the
    application as a whole. Web applications such as TrackStar often require very
    special users who have the ability to have full access to administer everything.
    One example is the ability to manage all the CRUD operations for every single
    user of the system, regardless of the project. A *full administrator* of our application
    should be able to log in and remove or update any user, any project, any issue,
    moderate all comments, and so on. Also, it is often the case that we build extra
    features that apply to the whole application, such as the ability to leave site-wide
    system messages to all the users, manage e-mail campaigns, turn on/off certain
    application features, manage the roles and permissions hierarchy itself, change
    the site theme, and others. Because the functionality exposed to the administrator
    can differ greatly from the functionality exposed to normal users, it is often
    a good idea to keep these features very separate from the rest of the application.
    We will be accomplishing this separation by building all of our administrative
    functionality in what is called a **module** in Yii.
  prefs: []
  type: TYPE_NORMAL
- en: Feature planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will focus on the following granular development tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new module to house administrative functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the ability for administrators to add system-wide messages for application
    users, to view on the projects listing page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying a new theme to the module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new database table to hold the system message data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating all CRUD functionality for our system messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting access to all functionality within the new module to admin users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying new system messages on the projects listing page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **module** in Yii is very much like an entire mini-application contained within
    a larger application. It has a very similar structure, containing models, views,
    controllers, and other supporting components. However, modules cannot be deployed
    themselves as standalone applications; they must reside within an application.
  prefs: []
  type: TYPE_NORMAL
- en: Modules are very useful in helping to architect your application in a modular
    fashion. Large applications can often be segmented into discrete application features
    that could be built separately using modules. Site features such as adding a user
    forum or user blogs, or site-administrator functionality, are some examples that
    could be segmented from the main site features, allowing them to be developed
    separately and having them be easily reusable in future projects. We are going
    to use a module to create a distinct place in our application to house our administrative
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a new module is a snap when using our good friend Gii. With our URL
    changes in place, the tool is now accessible via `http://localhost/trackstar/gii`.
    Navigate there and select the **Module Generator** option in the left-hand side
    menu. You will be presented with the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a module](graphics/8727_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to provide a unique name for the module. Since we are creating an admin
    module, we''ll be super creative and give it the name `admin`. Type this in the
    **Module ID** field and click on the **Preview** button. As shown in the following
    screenshot, it will present you with all of the files that it intends to generate,
    allowing you to preview each file prior to creating them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a module](graphics/8727_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Generate** button to have it create all of these files. You
    will need to ensure that your `/protected` folder is writable by the web server
    process for it to autocreate the necessary directories and files. The following
    screenshot shows the successful generation of a module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a module](graphics/8727_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a closer look at what the module generator created for us. A module
    in Yii is organized as a directory, the name of which is the same as the unique
    name of the module. By default, all module directories reside under `protected/modules`.
    The structure of each module directory is very similar to that of our main application.
    What this command has done for us is to create the skeleton of the directory structure
    for the admin module. Since this was our first module, the top-level directory
    `protected/modules` was created, and then an `admin/` directory was created underneath
    it. The following screenshot shows all of the directories and files that were
    created when we executed the `module` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a module](graphics/8727_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A module must have a `module` class that extends either directly or from a child
    of `CWebModule`. The module class name is created by combining the module ID (that
    is, the name we supplied when we created the module `admin`) and the string `Module`.
    The first letter of the module ID is also capitalized. So in our case, our admin
    module class file is named `AdminModule.php`. The module class serves as the central
    place for storing information that is shared within the module code. For example,
    we can use the `params` property of `CWebModule` to store module-specific parameters,
    and use its `components` property to share application components at the module
    level. This module class serves a similar role to the module as the application
    class does to the entire application. So `CWebModule` is to our module what `CWebApplication`
    is to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Using a module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just as the successful creation message indicated, before we can use our new
    module, we need to configure the `modules` property of the main application to
    include it for use. We did this before when we added the `gii` module to our application,
    which allowed us to access the Gii code generation tool. We make this change in
    the main configuration file `protected/config/main.php`. The following highlighted
    code indicates the necessary change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving this change, our new `admin` module is wired up for use. We can
    take a look at the simple index page that was created for us by visiting `http://localhost/trackstar/admin/default/index`.
    The request-routing structure for accessing the pages in our module is just like
    that for our main application pages, except that we need to include the `moduleID`
    directory in the route as well. Our routes will be of the general form `/moduleID/controllerID/actionID`.
    So the URL request `/admin/default/index` is requesting the `admin` module''s
    default controller''s index method. When we visit this page, we see something
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a module](graphics/8727_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Module layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One thing we will notice is that the theme we created in the previous chapter,
    `newtheme`, is also being applied to our module. The reason for this is that our
    module controller classes are extending `protected/components/Controller.php`,
    which specifies its layout as `$layout='//layouts/column1'`. The key is the double
    slashes in front of this definition. This specifies that we use the main application
    path rather than the specific module path for finding the layout file. So we are
    getting the same layout file applied to our module as we are to the rest of our
    application. If we make this a single slash rather than double, we would see our
    `admin` module having no layout applied to it at all. Go ahead and give it a try.
    The reason for this is that now, with just the single slash, that is, `$layout='/layouts/column1'`,
    it is looking for layout files within the module rather than the parent application.
    Please go ahead and make this change, and keep the single slash definition as
    we proceed.
  prefs: []
  type: TYPE_NORMAL
- en: You can configure almost everything separately in a module, including the default
    path for layout files. The default layout path for web modules is `/protected/modules/[moduleID]/views/layouts`,
    where `[moduleID]` in our case is `admin`. We can see that there are no files
    under this directory, so there is no default layout to be applied to the module.
  prefs: []
  type: TYPE_NORMAL
- en: Since we have a theme specified, there is slightly more to the story in our
    case. We can also manage all of our module view files, including the module layout
    view files, within this theme. If we were to do that, we'd need to add to our
    theme directory structure to accommodate our new module. The directory structure
    is very much as expected. It is of a general form `/themes/[themeName]/views/[moduleID]/layouts/`
    for the layout files and `/themes/[themeName]/views/[moduleID]/[controllerID]/`
    for the controller view files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help clarify this, let''s walk through Yii''s decision making process when
    it is trying to decide what view files to use for our new `admin` module. As mentioned
    earlier, if we specify the layout view file with double slashes preceding it ("//"),
    it will look to the parent application to find the layout file. But let''s look
    at the case where we use a single slash and ask it to find the appropriate layout
    file within the module. In the single slash scenario, here is what is happening
    when `$this->render(''index'')` is issued in the `DefaultController.php` file
    within our `admin` module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since `render()` is being called, as opposed to `renderPartial()`, it is going
    to attempt to decorate the specified `index.php` view file with a layout file.
    And since our application is currently configured to use a theme called `newtheme`,
    it is going to first look for layout files under this theme directory. Our new
    module''s `DefaultController` class extends our application component `Controller.php`,
    which has `column1` specified as its `$layout` property. This property is not
    overridden, so it is also the layout file for `DefaultController`. Finally, since
    this is all happening within the `admin` module, Yii first looks for the following
    layout file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/themes/newtheme/views/admin/layouts/column1.php`'
  prefs: []
  type: TYPE_NORMAL
- en: (Note the inclusion of the `moduleID` in this directory structure.)
  prefs: []
  type: TYPE_NORMAL
- en: 'This file does not exist, so it reverts to looking in the default location
    for the module. As previously mentioned, the default layout directory is specific
    to each module. So in this case it will attempt to locate the following layout
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/protected/modules/admin/views/layouts/column1.php`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This file also does not exist, so it will be unable to apply a layout. It will
    now simply attempt to render the specified `index.php` view file without a layout.
    However, again since we have specified the specific `newtheme` theme for this
    application, it will first look for the following view file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/themes/newtheme/views/admin/default/index.php`'
  prefs: []
  type: TYPE_NORMAL
- en: This file also does not exist, so it will look again for this controller (`DefaultController.php`)
    in the default location within this module (`AdminModule`), namely `/protected/modules/admin/views/default/index.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This explains why the page `http://localhost/trackstar/admin/default/index`
    is rendered without any layout (again, in the case where we are using a single
    slash to prefix the layout file declaration `$layout='/layouts/column1'`). To
    keep things completely separate and simple for now, let's manage our view files
    in the default location for our module rather than under the `newtheme` theme.
    Also, let's apply to our `admin` module the same design as our original application
    had, that is, how the application looked before we applied the new theme. In this
    way, our `admin` pages will have a very different look from our normal application
    pages, which will help remind us that we are in the special admin section, but
    we won't have to spend any time coming up with a new design.
  prefs: []
  type: TYPE_NORMAL
- en: Applying a layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First let''s set a default layout value for our module. We set our module-wide
    configuration settings in the `init()` method within our module class `/protected/modules/AdminModule.php`.
    So open up that file and add the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this way, if we have not specified a layout file at a more granular level,
    such as in a controller class, all of the module views will be decorated by the
    layout file `main.php` located in the default layout directory for our module,
    namely `/protected/modules/admin/views/layouts/`.
  prefs: []
  type: TYPE_NORMAL
- en: Now of course, we need to create this file. Make a copy of the two layout files
    `/protected/views/layouts/main.php` and `/protected/views/layouts/column1.php`
    from the main application, and place them both in the `/protected/modules/admin/views/layouts/`
    directory. After you have copied these files over to the new location, we need
    to make a few small changes to both of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'First let''s alter `column1.php`. Remove the explicit reference to `//layouts/main`
    in the call `beginContent()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Not specifying an input file when calling `beginContent()` will result in it
    using the default layout for our module, which we just set to be our newly copied
    `main.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s make a few changes to our `main.php` layout file. We are going to
    add **Admin Console** to our application header text to emphasize that we are
    in a separate part of the application. We will also alter our menu items to have
    a link to the **Admin** home page, as well as a link to go back to the main site.
    We can remove the **About** and **Contact** links from this menu as we don''t
    need to repeat those options in our **Admin** section. The additions to the file
    are highlighted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can leave the rest of the file unchanged. Now if we visit our `admin` module
    page `http://localhost/trackstar/admin/default/index`, we see something like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying a layout](graphics/8727_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And if we click on the **Back To Main Site** link, we see that we are taken
    back to the newly themed version of our main application.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting admin access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One problem you may have already noticed is that anyone, including guest users,
    can access our new `admin` module. We are building this admin module to expose
    application functionality that should only be accessible to users with administrative
    access. So we need to address this issue.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, we have already implemented an RBAC access model in our application,
    back in [Chapter 7](ch07.html "Chapter 7. User Access Control"), *User Access
    Control*. All we need to do now is extend it to include a new role for administrators
    and have new permissions available for that role.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you recall from [Chapter 7](ch07.html "Chapter 7. User Access Control"),
    *User Access Control* , we used a Yii `console` command to implement our RBAC
    structure. We need to add to that. So open up the file `/protected/commands/shell/RbacCommand.php`
    containing that `console` command, and add the following code where we created
    the `owner` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This creates a new task called `adminManagement` and a new role called `admin`.
    It then adds the `owner`, `reader`, and `member` roles along with the `adminManagement`
    task as children, so that the `admin` role inherits permissions from all of these.
    Finally, it assigns the `admin` role to the first user in our system to ensure
    that we have at least one admin to access our admin module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have to rerun our command to update the database with these changes.
    To do so, just run the `yiic` command-line tool with the `rbac` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With this additional role being added, we should also update the text in the
    message that is displayed when prompted, to continue to indicate that a fourth
    role will be created. We will leave this as an exercise for the reader. This change
    has been made in the downloadable code files for your reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these changes to our RBAC model in place, we can add an access check to
    the `AdminModule::beforeControllerAction()` method so that nothing within the
    `admin` module will be executed unless the user is in the `admin` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place, if a user who has not been assigned the `admin` role now
    attempts to visit any page within the **Admin** module, they will receive an HTTP
    403 authorization error page. For example, if you are not logged in and you attempt
    to visit the **Admin** page, you will receive the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Restricting admin access](graphics/8727_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And the same holds true for any user that has not been assigned to the `admin`
    role.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can conditionally add a link to the **Admin** section of the site to
    our main application menu. In this way, users with administrative access won''t
    have to remember a cumbersome URL to navigate to the **Admin** console. As a reminder,
    our main application menu is located in our application''s theme default application
    layout file `/themes/newtheme/views/layouts/main.php`. Open up that file and add
    the following highlighted code to the menu section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now upon logging into the application as a user with `admin` access (we set
    this to be `user id = 1`, "**User One**" in our case), we will see a new link
    in our top navigation that will take us to our newly added **Admin** section of
    the site.
  prefs: []
  type: TYPE_NORMAL
- en: '![Restricting admin access](graphics/8727_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a system-wide message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **module** can be thought of as a mini-application itself, and adding functionality
    to a module is really the same process as adding functionality to the main application.
    Let's add some new functionality just for administrators; we will add the ability
    to manage system-wide messages displayed to users when they first log in to the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the database table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As is often the case with brand new functionality, we need a place to house
    our data. We need to create a new table to store our system-wide messages. For
    the purpose of our examples, we can keep this very simple. Here is the definition
    for our table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We'll of course create a new database migration to manage our changes when adding
    this new table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: These commands create a new migration file under the `protected/migrations/`
    directory. The contents of this file can be obtained from the downloadable code
    or the standalone code snippet that is available at [https://gist.github.com/3785282](https://gist.github.com/3785282).
    (We did not include the class name; remember that the name of your file and corresponding
    class will have a different timestamp prefix.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this file is in place, we can run our migration to add this new table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating our model and CRUD scaffolding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have our table created, our next step is to generate the `model`
    class using our favorite tool, the Gii code generator. We''ll first use the **Model
    Generator** option to create the `model` class and the **Crud Generator** option
    to create our basic scaffolding to quickly interact with this model. Go ahead
    and navigate to the Gii tool form for creating a new model (`http://localhost/trackstar/gii/model`).
    This time, since we are doing this within the context of a module, we need to
    explicitly specify the model path. Fill out the form with the values depicted
    in the following screenshot (though of course your **Code Template** path value
    should be specific to your local setup):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our model and CRUD scaffolding](graphics/8727_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that we changed the **Model Path** textbox to `application.modules.admin.models`.
    Go ahead and generate the **Model Class** value by clicking on the **Generate**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can create the CRUD scaffolding in much the same way. Again, the only
    real difference between what we have done previously and what we are doing now
    is our specification that the location of the `model` class is in the `admin`
    module. After choosing the **Crud Generator** option from the Gii tool, fill out
    the **Model Class** and **Controller ID** form fields as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our model and CRUD scaffolding](graphics/8727_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This alerts the tool to the fact that our `model` class is under the `admin`
    module, and that our controller class as well as all other files related to this
    code generation should be placed within the `admin` module as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the creation by first clicking on the **Preview** button and then
    on **Generate**. The following screenshot shows a list of all of the files that
    are created by this action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our model and CRUD scaffolding](graphics/8727_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a link to our new functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add a new menu item within the main `admin` module navigation that links
    to our newly created message functionality. Open up the file `/protected/modules/admin/views/layouts/main.php`
    that contains the main menu navigation for our module, and add the following `array`
    item to the menu widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we take a look new system message at `http://localhost/trackstar/admin/sysMessage/create`,
    we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a link to our new functionality](graphics/8727_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The autocreated controller and view files for our new system message functionality
    were created to use the two-column layout file from the main application. If you
    take a look inside the `SysMessageController.php` class file, you will see the
    layout defined as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the double slashes in front. So we can see that our newly added admin
    functionality is not using our `admin` module layout files. We could alter the
    `controller` class to use our existing, single-column layout file in the `admin`
    module, or we can add a two-column layout file to our module layout files. The
    latter is going to be slightly easier and will also look better, as all of the
    view files are created to have their submenu items (that is the links to all the
    CRUD functionality) be displayed in a second right-hand column. We also need to
    alter our newly created model class and corresponding form to remove some unneeded
    form fields. The following is all that we have to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the two-column layout from our main application over to our module, that
    is, copy `/protected/views/layouts/column2.php` over to `/protected/modules/admin/views/layouts/column2.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove `//layouts/main` as the input to the `beginContent()` method call on
    the first line, in the newly copied `column2.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alter the `SysMessage` model class to extend `TrackstarActiveRecord`. (If you
    recall, this adds the code to automatically update our `create_time/user and update_time/user`
    properties.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alter the `SysMessageController` controller class to use the new `column2.php`
    layout file from within the module directory and not the one from the main application.
    The autogenerated code has specified `$layout='//layouts/column2'`, but we need
    this to simply be `$layout='/layouts/column2'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we are extending `TrackstarActiveRecord`, we can remove the unnecessary
    fields from our autogenerated, sys-messages creation form and remove their associated
    rules from the model class. For example, remove the following form fields from
    the `modules/admin/views/sysMessage/_form.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then change these two rules from the `SysMessage::rules()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It is important to only specify the rules for those fields that the user can
    input. Any fields that have rules defined can be set in a bulk manner from a `POST`
    or `GET` request, and leaving in rules for fields you do not want users to have
    access to can lead to security issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last change we should make is to update our simple access rules to reflect
    the requirement that only the users in the `admin` role can access our action
    methods. This is mostly for illustrative purposes since we already took care of
    the access using our RBAC model approach in the `AdminModule::beforeControlerAction`
    method itself. We could actually just remove the `accessRules()` method entirely.
    However, let''s update them to reflect the requirement so you can see how that
    would work using the access rule approach. In the `SysMessageController::accessRules()`
    method, change the entire content to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, with all of this in place, if we now access our new message input form
    by visiting `http://localhost/trackstar/admin/sysMessage/create`, we are presented
    with something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a link to our new functionality](graphics/8727_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill out this form with the message `Hello Users! This is your admin speaking...`
    and click on **Create**. The application will redirect you to the details listing
    page for this newly created message, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a link to our new functionality](graphics/8727_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Displaying the message to users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a message in our system, let's display it to the user on the
    application home page.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the new model class for application-wide access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to access the newly created model from anywhere in our application,
    we need to import it as part of the application configuration. Alter `protected/config/main.php`
    to include the new `admin module models` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Selecting the most recently updated message
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll restrict the display to just one message, and we''ll choose the most
    recently updated message based on the `update_time` column in the table. Since
    we want to add this to the main projects listing page, we need to alter the `ProjectController::actionIndex()
    method`. Alter that method by adding the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to alter our view file to display this new bit of content. Add
    the following code to `views/project/index.php`, just above the `<h1>Projects</h1>`
    header text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we visit our projects listing page (that is our application''s homepage),
    we can see it displayed as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting the most recently updated message](graphics/8727_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a little design tweak
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Okay, this does what we wanted it to do, but this message does not really stand
    out to the user very well. Let''s change that by adding a little snippet to our
    main CSS file (`/themes/newtheme/css/main.css`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place, our message now really stands out on the page. The following
    screenshot shows the message with these changes in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a little design tweak](graphics/8727_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One might argue that this design tweak went a little too far. Users might get
    a headache if they have to stare at those message colors all day. Rather than
    toning down the colors, let's use a little JavaScript to fade the message out
    after 5 seconds. Since we will be displaying the message every time the user visits
    this **Home** page, it might be nice to prevent them from having to stare at it
    for too long.
  prefs: []
  type: TYPE_NORMAL
- en: We'll make things easy on ourselves and take advantage of the fact that Yii
    comes shipped with the powerful JavaScript framework jQuery. **jQuery** is an
    open source, JavaScript library that simplifies the interaction between the HTML
    **Document Object Model** (the **DOM**) and JavaScript. It is outside the scope
    of this book to dive into the details of jQuery. It is well worth visiting its
    documentation to become a little more acquainted with its features. Since Yii
    comes shipped with jQuery, you can simply register jQuery code in the view files,
    and Yii will take care of including the core jQuery library for you.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also use the application helper component `CClientScript` to register
    our jQuery JavaScript code for us in the resulting web page. It will make sure
    that it has been placed in the appropriate place, and has been properly tagged
    and formatted.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s alter what we previously added to include a snippet of JavaScript
    that will fade out the message. Replace what we just added to `views/project/index.php`
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now if we reload our main projects listing page, we see the message fade out
    after 5 seconds. For more information on cool jQuery effects that you can easily
    add to your pages, take a look at the JQuery API documentation available at [http://api.jquery.com/category/effects/](http://api.jquery.com/category/effects/).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to convince yourself that everything is working as expected, you can
    add another system-wide message. Since this newer message will have a more recent
    `update_time` property, it will be the one to display on the projects listing
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have introduced the concept of a Yii module, and demonstrated
    its practicality by using one to create an administrative section of the site.
    We demonstrated how to create a new module, how to change the layout and theme
    of a module, how to add application functionality within the module, and even
    how to take advantage of an existing RBAC model, to apply authorization access
    controls to functionality within a module. We also demonstrated how to use jQuery
    to add a dash of UI flare to our application.
  prefs: []
  type: TYPE_NORMAL
- en: With the addition of this administrative interface, we now have all of the major
    pieces of the application in place. Though the application is incredibly simple,
    we feel it is time to get it ready for production. The next chapter will focus
    on preparing our application for production deployment.
  prefs: []
  type: TYPE_NORMAL
