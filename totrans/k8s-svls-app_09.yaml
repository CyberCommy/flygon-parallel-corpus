- en: Looking at OpenFaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final platform we are going to be looking at is called OpenFaaS. This is
    a relatively new project and has only gained support for Kubernetes, so we will
    not be going into too much detail. However, the project is gaining a lot of traction
    and supporters, so I believe it is important we mention it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will look at:'
  prefs: []
  type: TYPE_NORMAL
- en: What is OpenFaaS and who made it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing OpenFaaS locally using Minikube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to OpenFaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenFaaS was started in December 2016 by Alex Ellis, just over a year to the
    day before I am writing this. Initially, it was designed to work with Docker swarm.
  prefs: []
  type: TYPE_NORMAL
- en: Docker swarm is Docker's own clustering technology; it allows you to link some
    hosts running the Docker Engine together. On the face of it, Docker swarm is quite
    similar to Kubernetes. However, the further you delve into the workings of both
    technologies, you will find that they not only work differently, but also have
    been designed to fill different gaps.
  prefs: []
  type: TYPE_NORMAL
- en: Since its first commit in December 2016, OpenFaaS has gotten a lot of attention
    from the Docker world. Ellis and the other OpenFaaS community members have spoken
    at DockerCon Europe, Moby Summit, KubeCon, and Gluecon, as well as numerous meetups
    over the course of the last 12 months. OpenFaaS was also included in the InfoWorld
    Bossie Awards 2017 as one of the best cloud-computing software projects of 2017.
  prefs: []
  type: TYPE_NORMAL
- en: OpenFaaS is probably the most feature-rich Function as a Service offering, and
    it supports Docker swarm, so it made sense that a Kubernetes version of the software
    would eventually be releasedâ€”this Kubernetes version is called **faas-netes**
    and it had its first commit in July 2017.
  prefs: []
  type: TYPE_NORMAL
- en: Running OpenFaaS locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rather than looking at OpenFaaS on Docker swarm and doing a comparison between
    running the service on Kubernetes and Docker swarm, we are going to dive straight
    in and install OpenFaaS on Kubernetes. Like all of the tools we have covered,
    we are going to need a command-line client, so we are going to start by installing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenFaaS command-line client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenFaaS command-line client is available for our three operating systems.
    Let's work through installing it on each, starting with macOS High Sierra.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may have already guessed, we are going to be using Homebrew for this.
    To install the client, simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For Ubuntu 17.04, the CLI can be installed using the OpenFaaS CLI installation
    script, which you can run directly from GitHub by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This script will also update the installed version of faas-cli if you are running
    an older version.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the CLI on Windows 10 Professional, first of all open a PowerShell
    window as the admin user; you can do this by selecting Run as Administrator from
    the PowerShell menu in the taskbar. Once open, you should see that you are in
    the `C:\WINDOWS\system32` folder, if you aren''t, then run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are in the `C:\WINDOWS\system32` folder, you can download the OpenFaaS
    CLI by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can find details on the latest release of the OpenFaaS CLI on the project's
    GitHub release page, which is at [https://github.com/openfaas/faas-cli/releases/](https://github.com/openfaas/faas-cli/releases/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, you should be able to run the following command to confirm
    the version number of the CLI installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/755b0199-5cc8-4cd0-8698-12a3e276678e.png)'
  prefs: []
  type: TYPE_IMG
- en: Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next up, we need to locally install Docker. Although I said at the start of
    this section that we would not be installing on Docker swarm, OpenFaaS still uses
    the Docker Engine, so we need it installed locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are running Ubuntu 17.04, you can install Docker using the installation
    script by Docker, by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Docker on macOS High Sierra, we can install it using Homebrew and
    Cask, by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For Windows 10 Professional users, you can use Chocolatey and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once you have installed Docker for macOS and Docker for Windows, you will need
    to open the Docker application to complete the installation. If you don't, then
    Docker will not start and none of the examples we are going to be using Docker
    for later in the chapter will work. It will take a few minutes to start at first
    as it needs to download and configure a small virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Minikube cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have the OpenFaaS CLI installed, we can go ahead and launch a single-node
    Kubernetes cluster using Minikube. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start the cluster and configure our local Kubernetes CLI to communicate
    with it, unless you have Windows 10 Professional installed, and then you might
    see a message like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a9ca19c0-9696-454a-903a-0fe6de27f3c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Part of the Docker for Windows installation enables Hyper-V, and as we found
    out in [Chapter 3](7836cfd9-bce3-4d77-9331-f8dda5a31999.xhtml), *Installing Kubernetes
    Locally*, when we installed Minikube originally, you cannot run VirtualBox and
    Hyper-V at the same time. To get around this, we need to configure Minikube to
    use Hyper-V to power the virtualization rather than VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, open the Hyper-V Manager, select the Virtual Switch Manager, and
    then create a new external virtual switch. Call it `minikube` as in the following
    screenshot, and make sure that the Allow management operating system to share
    this network adapter checkbox is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4cccc3ff-5003-4021-a6f2-155c57d1eee4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have created the virtual switch, reboot your machine. Once your machine
    is back online, open a PowerShell window with administrator privileges and run
    the following command to start the single-node Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Hyper-V Manager, you should be able to see your `minikube` VM has a
    status of Running, alongside the Docker VM, which is listed as `MobyLinuxVM`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0fa3f169-963a-4e0c-a308-eeeba8f82d05.png)'
  prefs: []
  type: TYPE_IMG
- en: You should now be able to proceed with the rest of the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenFaaS using Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we have the cluster launched, we need to install the OpenFaaS components.
    We are going to be using Helm for this. If you didn''t install Helm during the
    previous chapter please refer to the installation instructions there. As with
    a Helm installation, we need to initialize it, which installs the server-side
    component Tiller. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have Helm configured on our local, single-node Kubernetes cluster,
    we need to download a copy of the faas-netes code repository from GitHub. To do
    this, run either of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can also download a copy as a ZIP file from [https://github.com/openfaas/faas-netes](https://github.com/openfaas/faas-netes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded, we can install OpenFaaS with Helm using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return quite a bit of output, but the only part that you really to
    need to pay attention to is the last line, which should contain something similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fe5b30fa-a8f5-4736-809d-94d7e9feeee1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After a minute or two, you can check the status of the installation by running
    the command at the end of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like the following Terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f5e2ab89-6887-493d-a321-260e301d43d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have OpenFaaS installed and available, we can look at launching
    a hello world example.
  prefs: []
  type: TYPE_NORMAL
- en: Hello world!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like the other services we have covered, we will be running a quick hello world
    example. This will introduce you to the difference between OpenFaaS and the other
    tools. We will also find out why we needed to install Docker. To start with, run
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a folder called `hello` and then within it, a file called
    `hello.yml` and a few folders will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/97bc33e6-f93c-4191-ad65-571393f4f11b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to log into a Docker Hub account. To do this, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not have a Docker Hub account, you can sign-up for one at [https://hub.docker.com/](https://hub.docker.com/)
    for free:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/44b3b777-a1a9-4342-8432-c6ab97d093d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Opening `hello.yml` in a text editor will show you the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Edit the file so that the `image` reads `your-dockerhub-username/hello`. In
    my case, this was `russmckendrick/hello`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once edited, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will build a container locally, using your local Docker Engine installation
    containing the code in the `/hello` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff59dada-a3d9-4e38-bfee-d58b5a02f201.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we have the container image built, which you can see by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/9145c33e-e82d-4e8c-8942-8bb53f190389.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now push the image to our Docker Hub account by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/f757aea0-a857-4e24-a72b-02eb57ce3bb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have the container image containing our function uploaded to the
    Docker Hub, you can see this at [https://hub.docker.com/r/russmckendrick/hello/](https://hub.docker.com/r/russmckendrick/hello/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/559b3361-a14c-44c8-8f59-0e9532aeb1b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can launch our function, but to do this, first of all we need to put the
    IP address of our Minikube VM into a variable so when we run the OpenFaaS CLI,
    it knows where it is connecting to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can launch our function using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/a63b1b53-b601-43de-8ee6-41e64d3ec566.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can invoke the function by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This should return the word `test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1ada0bc1-891a-4eaa-9188-e094f01868ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also check the status of the function by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/a5dd67fd-8896-4dbb-b242-e61614d8df70.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have a single copy of the function running, and it has been
    called once. Before we move onto the next section, run the function a few more
    times.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenFaaS UI and store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenFaaS comes with a web-based user interface, which can be accessed by running
    the following command on macOS and Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Windows users can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open the OpenFaaS web UI, where you should see the `hello` function
    we created in the previous section. Selecting the function, entering some text
    in the Request Body form field, and then clicking on INVOKE will call the function,
    as you can see from the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/24a2b453-9d34-4971-b127-5e8b4697d243.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The OpenFaaS UI also includes a store, where you can deploy community-curated
    functions directly to your OpenFaaS installation. To access the store, click on
    the Deploy New Function button and you will be presented with a list of functions
    that you can deploy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9ef526f6-3ee4-46c4-9adc-ed9bedd0f095.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the `mememachine` function, and click on the DEPLOY button. Once deployed,
    you should see a function called `mememachine` under your `hello` function, select
    this and in the Request Body form field enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Select Download and then click INVOKE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/685d551a-0eb9-4ad3-b25d-aeebf9f2b90f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After a second or two, a file will be downloaded and on opening it you should
    see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6964eb6f-b4f3-4a65-a6d3-dcfd31702831.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have the success baby meme, which is defined in the image
    field with the URL [http://i.imgflip.com/qiefv.jpg](http://i.imgflip.com/qiefv.jpg),
    and the two lines of text we passed to the `top` and `bottom` variables.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for the function can be found at [https://github.com/faas-and-furious/openfaas-mememachine/](https://github.com/faas-and-furious/openfaas-mememachine/).
    As you can see, it is a Node.js container that downloads the image, adds the text,
    and then returns the content of the new image. The source for most of the functions
    available in the OpenFaaS store can be found on the *FaaS and Furious* GitHub
    repository at [https://github.com/faas-and-furious/](https://github.com/faas-and-furious/).
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we first launched OpenFaaS, you may have noticed that one of the deployments
    was called Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus is one of the Cloud Native Computing Foundation projects we have
    been discussing in previous chapters. Originally built by SoundCloud, it has quickly
    become the new standard for collecting metrics on container-based installationsâ€”you
    can find out more at the project's website at [https://prometheus.io/](https://prometheus.io/).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is logging some basic stats for the OpenFaaS gateway we have been calling
    throughout the chapter; you can open Prometheus by running one of the two commands
    (remember, `open` does not work on Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Once opened, you will be presented with a blank page. Enter the following into
    the textbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'After clicking the Execute button, you will see a graph, which breaks down
    the number of times each function has been called, along with the HTTP status
    of each function call:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/02f14ab3-6331-44ed-94d9-1cbd16893c6e.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding graph, there were a few errors when I ran
    the `mememachine` function because the image size was too big, causing the function
    to crash. There are plenty of other metrics being captured. I would recommend
    having a click around and looking at some of the graphs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have finished with your OpenFaaS installation, you can remove the
    installation by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenFaaS is a fast-growing Functions as a Service platform, and as already mentioned,
    it is getting a lot of community support behind it. It is unique in that it interacts
    with Docker locally to build and push images to the Docker Hub, where the other
    tools we have been using are using Kubernetes to inject our functions into containers
    and runtime.
  prefs: []
  type: TYPE_NORMAL
- en: This is the advantage of being able to easily distribute container images for
    use with OpenFaaS, as demonstrated by the `mememachine` example we worked through
    and the other functions in the OpenFaaS store.
  prefs: []
  type: TYPE_NORMAL
- en: One of the things we didn't do in this chapter is launch Kubernetes cluster
    in a public cloud and deploy OpenFaaS. One of the reasons for this is, to be able
    to access it, we would have had to make it available to our host machine via a
    public IP address, which would have exposed our installation to the world. In
    the next chapter, we are going to look at the security considerations of running
    our Kubernetes clusters in public clouds, among other things.
  prefs: []
  type: TYPE_NORMAL
