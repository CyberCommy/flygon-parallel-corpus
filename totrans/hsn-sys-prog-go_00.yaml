- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will provide good, in-depth explanations of various interesting Go
    concepts. It begins with Unix and system programming, which will help you understand
    what components the Unix operating system has to offer, from the kernel API to
    the filesystem, and allow you to familiarize yourself with the basic concepts
    of system programming.
  prefs: []
  type: TYPE_NORMAL
- en: Next, it moves on to cover the application of I/O operations, focusing on the
    filesystem, files, and streams in the Unix operating system. It covers many topics,
    including reading from and writing to files, among other I/O operations.
  prefs: []
  type: TYPE_NORMAL
- en: This book also shows how various processes communicate with one another. It
    explains how to use Unix pipe-based communication in Go, how to handle signals
    inside an application, and how to use a network to communicate effectively. Also,
    it shows how to encode data to improve communication speed.
  prefs: []
  type: TYPE_NORMAL
- en: The book will, toward the end, help you to understand the most modern feature
    of Go—concurrency. It will introduce you to the tools the language has, along
    with sync and channels, and how and when to use each one.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for developers who want to learn system programming with Go. Although
    no prior knowledge of Unix and Linux system programming is necessary, some intermediate
    knowledge of Go will help you to understand the concepts covered in the book.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](27b19b4d-7890-4fdc-9619-5204d0a7a60d.xhtml), *An Introduction to
    System Programming*, introduces you to Go and system programming and provides
    some basic concepts and an overview of Unix and its resources, including the kernel
    API. It also defines many concepts that are used throughout the rest of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](1c402360-b565-4d0b-b201-fdd6baaa5c5c.xhtml), *Unix OS Components*,
    focuses on the Unix operating system and the components that you will interact
    with—files and the filesystem, processes, users and permissions, threads, and
    others. It also explains the various memory management techniques of the operating
    system, and how Unix handles resident and virtual memory.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](602a92d5-25f7-46b8-83d4-10c6af1c6750.xhtml), *An Overview of Go*,
    takes a look at Go, starting with some history of the language and then explaining,
    one by one, all its basic concepts, starting with namespaces and the type system,
    variables, and flow control, and finishing with built-in functions and the concurrency
    model, while also offering an explanation of how Go interacts and manages its
    memory.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](0b73653d-6073-4708-b015-fe6a43cb9f37.xhtml), *Working with the
    Filesystem*, helps you to understand how the Unix filesystem works and how to
    master the Go standard library to handle file path operations, file reading, and
    file writing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](0509e4ee-683c-4beb-b6b1-125c4067baca.xhtml), *Handling Streams*,
    helps you to learn about the interfaces for the input and output streams that
    Go uses to abstract data flows. It explains how they work and how to combine them
    and best use them without leaking information.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](05967583-574d-4164-8ab5-33937bed756a.xhtml), *Building Pseudo-Terminals*,
    helps you understand how a pseudo-terminal application works and how to create
    one. The result will be an interactive application that uses standard streams
    just as the command line does.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](d5c51539-6d21-45e6-a50d-f9ac886afe38.xhtml), *Handling Processes
    and Daemons*, provides an explanation of what processes are and how to handle
    them in Go, how to start child processes from a Go application, and how to create
    a command-line application that will stay in the background (a daemon) and interact
    with it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](0fc5a09e-89ae-4b1e-b794-5b0fbda9df27.xhtml), *Exit Codes, Signals,
    and Pipes*, discusses Unix inter-process communication. It explains how to use
    exit codes effectively. It shows you how signals are handled by default inside
    an application, and how to manage them with some patterns for effective signal
    handling. Furthermore, it explains how to connect the output and input of different
    processes using pipes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](75bf8ac9-5cbe-475f-815c-53fb6eb3ec4d.xhtml), *Network Programming*,
    explains how to use a network to make processes communicate. It explains how network
    communication protocols work. It initially focuses on low-level socket communication,
    such as TCP and UDP, before moving on to web server development using the well-known
    HTTP protocol. Finally, it shows how to use the Go template engine.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](345f9a5f-93e0-47f6-a832-8e79d591cccc.xhtml), *Data Encoding Using
    Go*, explains how to leverage the Go standard library to encode complex data structures
    in order to facilitate process communications. It analyzes both text-based protocols,
    such as XML and JSON, and binary-based protocols, such as GOB.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](cbd47216-0772-47b9-b804-0d464cef810a.xhtml), *Dealing with Channels
    and Goroutines*, explains the basics of concurrency and channels and some general
    rules that prevent the creation of deadlocks and resource-leaking inside an application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](7d7f27fa-3ef5-4751-baca-dd6169979d01.xhtml), *Synchronization
    with sync and atomic*, discusses the synchronization packages of the `sync` and `sync/atomic` standard
    libraries, and how they can be used instead of channels to achieve concurrency
    easily. It also focuses on avoiding the leaking of resources and on recycling
    resources.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](7d4313bd-dde3-4720-843a-723a324ea295.xhtml), *Coordination Using*
    *Context*, discusses `Context`, a relatively new package introduced in Go that
    offers a simple way of handling asynchronous operations effectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](31e3b336-a08e-4d11-9e78-abf119b555e2.xhtml), *Implementing Concurrency
    Patterns*, uses the tools from the previous three chapters and demonstrates how
    to use and combine them to communicate effectively. It focuses on the most common
    patterns used in Go for concurrency.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](8b90e793-c794-4ce3-b32f-f4946d3914de.xhtml), *Using Reflection*,
    explains what reflection is and whether you should use it. It shows where it''s
    used in the standard library and guides you in creating a practical example. It
    also shows how to avoid using reflection where there is no need to.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](68daff9d-f1c6-4f48-9c3c-f4ea9ef2b538.xhtml), *Using CGO*, explains
    how CGO works and why and when you should use it. It explains how to use C code
    inside a Go application, and vice versa.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some basic knowledge of Go is required to try the examples and to build modern
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Each chapter includes a set of questions that will help you to gauge your understanding
    of the chapter. The answers to these questions are provided in the *Assessments*
    section of the book. These questions will prove very beneficial for you, as they
    will help you revisit each chapter at a glance.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from this, each chapter provides you with instructions on how to run the
    code files, while the GitHub repository of the book provides the requisite details.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-System-Programming-with-Go](https://github.com/PacktPublishing/Hands-On-System-Programming-with-Go). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781789804072_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781789804072_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visit the following link to check out videos of the code being run: [http://bit.ly/2ZWgJb5](http://bit.ly/2ZWgJb5).
  prefs: []
  type: TYPE_NORMAL
- en: Playground examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the course of the book you will find many snippets of code followed by a
    link to [https://play.golang.org](https://play.golang.org), a service that allows
    you to run Go applications with some limitations. You can read more about it at
    [https://blog.golang.org/playground](https://blog.golang.org/playground).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to see the full source code of such examples, you need to visit the
    Playground link. Once on the website, you can press the Run button to execute
    the application. The bottom part of the page will show the output. The following
    is an example of the code running in the Go Playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea782ebb-71ed-4d93-a9bb-3211d5d063b3.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want, you have the possibility of experimenting by adding and editing
    more code to the examples, and then running them.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "This type of service includes `load`, which adds a program
    to memory and prepares for its execution before passing control to the program
    itself, or `execute`, which runs an executable file in the context of a pre-existing
    process."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For example, words in menus or dialog boxes appear in the text like this.
    Here is an example: "In the meantime, systems started to get distributed, and
    applications started to get shipped in containers, orchestrated by other system
    software, such as **Kubernetes**."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
