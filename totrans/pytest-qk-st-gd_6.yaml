- en: Wrapping Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned a number of techniques that can be used
    to convert `unittest`-based suites to pytest, ranging from simply starting using
    it as a runner, all the way to porting complex existing functionality to a more
    pytest-friendly style.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the final chapter in this quick-start guide, and we will discuss the
    following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: An overview of what we have learned
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pytest community
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next steps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Final summary
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of what we have learned
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following sections will summarize what we have learned in this book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should consider writing tests as your safety net. It will make you more
    confident in your work, allow you to refactor with confidence, and be certain
    that you are not breaking other parts of the system.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A test suite is a must-have if you are **porting a Python 2 code base to Python
    3**, as any guide will tell you, ([https://docs.python.org/3/howto/pyporting.html#have-good-test-coverage](https://docs.python.org/3/howto/pyporting.html#have-good-test-coverage)).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a good idea to write tests for the **external APIs** you depend on, if
    they don't have automated tests.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the reasons pytest is a great choice for beginners is because it is easy
    to get started; write your tests using simple functions and `assert` statements.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing and running tests
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Always use a **virtual environment** to manage your packages and dependencies.
    This advice goes for any Python project.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pytest **introspection features** make it easy to express your checks concisely;
    it is easy to compare dictionaries, text, and lists directly.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check exceptions with `pytest.raises` and warnings with `pytest.warns`.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare floating-point numbers and arrays with `pytest.approx`.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test organization; you can **inline your tests** with your application code
    or keep them in a separate directory.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select tests with the `-k` flag: `-k test_something`.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop at the **first failure** with `-x`.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remember the awesome **refactoring duo**: `--lf -x`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable **output capturing** with `-s`.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show the **complete summary** of test failures, xfails, and skips with `-ra`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `pytest.ini` for **per-repository configuration**.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marks and parametrization
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Create marks** in test functions and classes with the `@pytest.mark` decorator.
    To apply to **modules**, use the `pytestmark` special variable.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `@pytest.mark.skipif`, `@pytest.mark.skip` and `pytest.importorskip("module")` to
    skip tests that are not applicable to the **current environment**.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `@pytest.mark.xfail(strict=True)` or `pytest.xfail("reason")` to mark tests
    that are **expected to fail**.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `@pytest.mark.xfail(strict=False)` to mark **flaky tests**.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `@pytest.mark.parametrize` to quickly test code for **multiple inputs**
    and to test **different implementations** of the same interface.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixtures
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Fixtures** are one of the main pytest features, used to **share resources**
    and provide easy-to-use **test helpers**.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `conftest.py` files to **share fixtures** across test modules. Remember
    to prefer local imports to speed up test collection.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use **autouse** fixtures to ensure every test in a hierarchy uses a certain
    fixture to perform a required setup or teardown action.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixtures can assume **multiple scopes**: `function`, `class`, `module`, and
    `session`. Use them wisely to reduce the total time of the test suite, keeping
    in mind that high-level fixture instances are shared between tests.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixtures can be **parametrized** using the `params` parameter of the `@pytest.fixture`
    decorator. All tests that use a parametrized fixture will be parametrized automatically,
    making this a very powerful tool.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `tmpdir` and `tmpdir_factory` to create empty directories.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `monkeypatch` to temporarily change attributes of objects, dictionaries,
    and environment variables.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `capsys` and `capfd` to capture and verify output sent to standard out and
    standard error.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One important feature of fixtures is that they **abstract way dependencies**,
    and there's a balance between using **simple functions versus fixtures**.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugins
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use `plugincompat` ([http://plugincompat.herokuapp.com/](http://plugincompat.herokuapp.com/))
    and PyPI ([https://pypi.org/](https://pypi.org/)[) to search for new plugins.](https://pypi.org/)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plugins are **simple to install**: install with `pip` and they are activated
    automatically.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a huge number of plugins available, for all needs.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting unittest suites to pytest
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can start by switching to **pytest as a runner**. Usually, this can be done
    with **zero changes** in existing code.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `unittest2pytest` to convert `self.assert*` methods to plain `assert`.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Existing **set-up** and **teardown** code can be reused with a small refactoring
    using **autouse** fixtures.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex test utility **hierarchies** can be refactored into more **modular fixtures** while
    keeping the existing tests working.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are a number of ways to approach migration: convert **everything** at
    once, convert tests as you **change** existing tests, or only use pytest for **new**
    tests. It depends on your test-suite size and time budget.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pytest community
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our community lives in the `pytest-dev` organizations on GitHub ([https://github.com/pytest-dev](https://github.com/pytest-dev))
    and BitBucket ([https://bitbucket.org/pytest-dev](https://bitbucket.org/pytest-dev)).
    The pytest repository ([https://github.com/pytest-dev/pytest](https://github.com/pytest-dev/pytest))
    itself is hosted on GitHub, while both GitHub and Bitbucket host a number of plugins.
    Members strive to make the community as welcome and friendly to new contributors
    as possible, for people from all backgrounds. We also have a mailing list on `pytest-dev@python.org`,
    which everyone is welcome to join ([https://mail.python.org/mailman/listinfo/pytest-dev](https://mail.python.org/mailman/listinfo/pytest-dev)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Most pytest-dev members reside in Western Europe, but we have members from all
    around the globe, including UAE, Russia, India, and Brazil (which is where I live).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Getting involved
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because all pytest maintenance is completely voluntary, we are always looking
    for people who would like to join the community and help out, working in good
    faith with others towards improving pytest and its plugins. There are a number
    of ways to get involved:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Submit feature requests; we love to hear from users about new features they
    would like to see in pytest or plugins. Make sure to report them as issues to
    start a discussion ([https://github.com/pytest-dev/pytest/issues](https://github.com/pytest-dev/pytest/issues)).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Report bugs: if you encounter a bug, please report it. We do our best to fix
    bugs in a timely manner.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update documentation; we have many open issues related to documentation ([https://github.com/pytest-dev/pytest/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22status%3A+easy%22+label%3A%22type%3A+docs%22+](https://github.com/pytest-dev/pytest/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22status%3A+easy%22+label%3A%22type%3A+docs%22+)).
    If you like to help others and write good documents, this is an excellent opportunity
    to help out.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement new features; although the code base might appear daunting for newcomers,
    there are a number of features or improvements marked with an easy label ([https://github.com/pytest-dev/pytest/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22status%3A+easy%22](https://github.com/pytest-dev/pytest/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22status%3A+easy%22)),
    which is friendly to new contributors. Also, if you are unsure, feel free to ask!
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix bugs; although pytest has more than 2,000 tests against itself, it has known
    bugs as any software. We are always glad to review pull requests for known bugs
    ([https://github.com/pytest-dev/pytest/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22type%3A+bug%22](https://github.com/pytest-dev/pytest/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22type%3A+bug%22)).
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spread your love on twitter by using the `#pytest` hash tag or mentioning `@pytestdotorg`.
    We also love to read blog posts about your experiences with pytest.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At many conferences, there are members of the community organizing workshops,
    sprints, or giving talks. Be sure to say hi!
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy to become a contributor; you need only to contribute a pull request
    about a relevant code change, documentation, or bug-fix, and you can become a
    member of the `pytest-dev` organization if you wish. As a member, you can help
    answer, label, and close issues, and review and merge pull requests.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Another way to contribute is to submit new plugins to `pytest-dev`, either on
    GitHub or BitBucket. We love when new plugins are added to the organization, as
    this provides more visibility and helps share maintenance with other members.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: You can read our full contribution guide on the pytest website ([https://docs.pytest.org/en/latest/contributing.html](https://docs.pytest.org/en/latest/contributing.html)).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 2016 Sprint
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In June 2016, the core group held a big sprint in Freiburg, Germany. Over 20
    participants attended, over six days; the event was themed around implementing
    new features and fixing issues. We had a ton of group discussions and lightning
    talks, taking a one-day break to go hiking in the beautiful Black Forest.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: The team managed to raise a successful Indiegogo campaign ([https://www.indiegogo.com/projects/python-testing-sprint-mid-2016#/](https://www.indiegogo.com/projects/python-testing-sprint-mid-2016#/)),
    aiming for US $11,000 to reimburse travel costs, sprint venue, and catering for
    the participants. In the end, we managed to raise over US $12,000, which shows
    the appreciation of users and companies that use pytest.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: It was great fun! We are sure to repeat it in the future, hopefully with even
    more attendees.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Next steps
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After all we learned, you might be anxious to get started with pytest or be
    eager to use it more frequently.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few ideas of the next steps you can take:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Use it at work; if you already use Python in your day job and have plenty of
    tests, that's the best way to start. You can start slowly by using pytest as a
    test runner, and use more pytest features at a pace you feel comfortable with.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use it in your own open source projects: if you are a member or an owner of
    an open source project, this is a great way to get some pytest experience. It
    is better if you already have a test suite, but if you don''t, certainly starting
    with pytest will be an excellent choice.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contribute to open source projects; you might choose an open source project
    that has `unittest` style tests and decide to offer to change it to use pytest.
    In April 2015, the pytest community organized what was called Adopt pytest month
    ([https://docs.pytest.org/en/latest/adopt.html](https://docs.pytest.org/en/latest/adopt.html)),
    where open source projects paired up with community members to convert their test
    suites to pytest. The event was successful and most of those involved had a blast.
    This is a great way to get involved in another open source project and learn pytest
    at the same time.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contribute to pytest itself; as mentioned in the previous section, the pytest
    community is very welcoming to new contributors. We would love to have you!
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some topics were deliberately left out of this book, as they are considered
    a little advanced for a quick start, or because we couldn't fit them into the
    book due to space constraints.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: tox ([https://tox.readthedocs.io/en/latest/](https://tox.readthedocs.io/en/latest/)) is
    a generic virtual environment manager and command-line tool that can be used to
    test projects with multiple Python versions and dependencies. It is a godsend
    if you maintain projects that support multiple Python versions and environments.
    pytest and `tox` are brother projects and work extremely well together, albeit
    independent and useful for their own purposes.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: tox（https://tox.readthedocs.io/en/latest/）是一个通用的虚拟环境管理器和命令行工具，可用于测试具有多个Python版本和依赖项的项目。如果您维护支持多个Python版本和环境的项目，它就是一个救星。pytest和`tox`是兄弟项目，它们在一起工作得非常好，尽管它们是独立的，并且对于它们自己的目的非常有用。
- en: 'Plugins: this book does not cover how to extend pytest with plugins, so if
    you are interested, be sure to check the plugins section ([https://docs.pytest.org/en/latest/fixture.html](https://docs.pytest.org/en/latest/fixture.html))
    of the pytest documentation and look around for other plugins that can serve as
    an example. Also, be sure to checkout the examples section ([https://docs.pytest.org/en/latest/example/simple.html](https://docs.pytest.org/en/latest/example/simple.html)) for
    snippets of advanced pytest customization.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件：本书不涵盖如何使用插件扩展pytest，所以如果您感兴趣，请务必查看pytest文档的插件部分（https://docs.pytest.org/en/latest/fixture.html），并寻找其他可以作为示例的插件。此外，请务必查看示例部分（https://docs.pytest.org/en/latest/example/simple.html）以获取高级pytest自定义的片段。
- en: Logging and warnings are two Python features that pytest has built-in support
    for and were not covered in detail in this book, but they certainly deserve a
    good look if you use those features extensively.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录和警告是两个Python功能，pytest内置支持，本书没有详细介绍，但如果您经常使用这些功能，它们确实值得一看。
- en: Final summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终总结
- en: So, we have come to the end of our quick start guide. In this book, we had a
    complete overview, from using pytest on the command-line all the way to tips and
    tricks to convert existing test suites to make use of the powerful pytest features.
    You should now be comfortable using pytest daily and be able to help others as
    needed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们已经完成了快速入门指南。在本书中，我们从在命令行上使用pytest到将现有测试套件转换为利用强大的pytest功能的技巧和窍门，进行了全面的概述。您现在应该能够每天轻松使用pytest，并在需要时帮助他人。
- en: You have made it this far, so congratulations! I hope you have learned something
    and had fun along the way!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经走到了这一步，所以祝贺您！希望您在学习的过程中学到了一些东西，并且玩得开心！
