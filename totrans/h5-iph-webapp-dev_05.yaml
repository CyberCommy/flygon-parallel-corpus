- en: Chapter 5. Understanding HTML5 Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we take a look at forms using the latest HTML5 technology, including
    new input types and form attributes. We'll briefly review some of the new input
    types that we'll be using in our sample forms. From there we'll discuss some of
    the new attributes in the specification, while also looking at the `autocapitalize`
    attribute specifically for mobile devices. Before we dive into our sample forms,
    we consider the layout of forms on iOS devices and the limitations that come up
    when interacting with these forms. Finally, we create some sample forms, develop
    some simple validations, and then style our form specifically for iOS - and WebKit-supported
    browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Once we've reviewed all of these features and have gone through our sample forms,
    we should have a solid grasp on HTML5 forms and how they relate to developing
    a web application for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the topics that we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: New HTML5 input types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New HTML5 form-specific attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form layout for iPhone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form styling for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's start by going over the new standard HTML5 input types.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 input types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HTML5 introduces several new input types that speed up the development of our
    applications. In total there are 13 new input types introduced with the HTML5
    specification, including `datetime`, `datetime-local`, `date`, `month`, `time`,
    `week`, `number`, `range`, `email`, `url`, `search`, `tel`, and `color`. Unfortunately,
    only 10 of these new inputs are supported on iOS, but there''s no need to worry
    since the type defaults to text automatically. This doesn''t help us too much,
    but it does allow us to create polyfills for the types we need but aren''t supported.
    However, either way, following is a breakdown of all the input types supported
    on iOS and a description of what each does:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Input type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `button` | Represents a button with no additional semantics. |'
  prefs: []
  type: TYPE_TB
- en: '| `checkbox` | Represents a state or option that can be toggled. |'
  prefs: []
  type: TYPE_TB
- en: '| `date` | Represents a control for setting the element''s value to a string
    representing a date. |'
  prefs: []
  type: TYPE_TB
- en: '| `datetime` | Represents a control for setting the element''s value to a string
    representing a global date and time (with time zone information). |'
  prefs: []
  type: TYPE_TB
- en: '| `datetime-local` | Represents a control for setting the element''s value
    to a string representing a local date and time (with no time zone information).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `email` | Represents a control for editing a list of e-mail addresses. |'
  prefs: []
  type: TYPE_TB
- en: '| `file` | Represents a list of file items, each consisting of a filename,
    a file type, and a file body (the contents of the file). |'
  prefs: []
  type: TYPE_TB
- en: '| `hidden` | Represents a value that is not intended to be examined or manipulated
    by the user. |'
  prefs: []
  type: TYPE_TB
- en: '| `image` | Represents either an image from which the UA enables a user to
    interactively select a pair of coordinates and submit the form, or alternatively
    a button from which the user can submit the form. |'
  prefs: []
  type: TYPE_TB
- en: '| `month` | Represents a control for setting the element''s value to a string
    representing a month. |'
  prefs: []
  type: TYPE_TB
- en: '| `number` | Represents a precise control for setting the element''s value
    to a string representing a number. |'
  prefs: []
  type: TYPE_TB
- en: '| `password` | Represents a one-line plain-text edit control for entering a
    password. |'
  prefs: []
  type: TYPE_TB
- en: '| `radio` | Represents a selection of one item from a list of items (a radio
    button). |'
  prefs: []
  type: TYPE_TB
- en: '| `range` | Represents an imprecise control for setting the element''s value
    to a string representing a number. |'
  prefs: []
  type: TYPE_TB
- en: '| `reset` | Represents a button for resetting a form. |'
  prefs: []
  type: TYPE_TB
- en: '| `search` | Represents a one-line plain-text edit control for entering one
    or more search terms. |'
  prefs: []
  type: TYPE_TB
- en: '| `submit` | Represents a button for submitting a form. |'
  prefs: []
  type: TYPE_TB
- en: '| `tel` | Represents a one-line plain-text edit control for entering a telephone
    number. |'
  prefs: []
  type: TYPE_TB
- en: '| `text` | Represents a one-line plain text edit control for the input element''s
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| `time` | Represents a control for setting the element''s value to a string
    representing a time (with no time zone information). |'
  prefs: []
  type: TYPE_TB
- en: '| `url` | Represents a control for editing an absolute URL given in the element''s
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| `week` | Represents a control for setting the element''s value to a string
    representing a week. |'
  prefs: []
  type: TYPE_TB
- en: 'These details are available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/html-markup/input.html](http://www.w3.org/TR/html-markup/input.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/InputTypes.html#//apple_ref/doc/uid/TP40008055-SW1](http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/InputTypes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though there are plenty of inputs we can experiment with here, we will
    only be focusing on the new `email`, `number`, `datetime`, and `range` types.
    The sample forms in this book will also contain the regular types, including `text`,
    `password`, and `submit`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a good grasp of what is supported and have a reference of information
    for what types might fit our needs, let's go ahead and review the attributes we
    can also take advantage of.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 attributes for forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many attributes we can use in HTML5, but to keep this part simple
    we''ll focus on the new attributes we can use on inputs and forms alike. The following
    attributes are defined in the latest HTML5 specification, except for `autocapitalize`,
    and are also supported on iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Input attributes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `autocapitalize` | Specifies the auto-capitalization behavior of text elements.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `autocomplete` | Specifies whether the element represents an input control
    for which a UA is meant to store the value entered by the user (so that the UA
    can prefill the form later). |'
  prefs: []
  type: TYPE_TB
- en: '| `min` | The expected lower bound for the element''s value. |'
  prefs: []
  type: TYPE_TB
- en: '| `max` | The expected upper bound for the element''s value. |'
  prefs: []
  type: TYPE_TB
- en: '| `multiple` | Specifies that the element allows multiple values. |'
  prefs: []
  type: TYPE_TB
- en: '| `placeholder` | A short hint (one word or a short phrase) intended to aid
    the user when entering data into the control represented by its element. |'
  prefs: []
  type: TYPE_TB
- en: '| `required` | Specifies that the element is a required part of form submission.
    |'
  prefs: []
  type: TYPE_TB
- en: 'You can find details on these attributes at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/html-markup/global-attributes.html#global-attributes](http://www.w3.org/TR/html-markup/global-attributes.html#global-attributes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-SW2](https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/html-markup/form.html#form.attrs.autocomplete](http://www.w3.org/TR/html-markup/form.html#form.attrs.autocomplete)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all form attributes are listed in the preceding table; only the latest supported
    attributes that are defined in the HTML5 specification are listed. This is to
    give us a good idea of the latest and greatest. If, however, you would like to
    gain a broader sense of what's supported, I encourage you to review the preceding
    sources that detail out this information and provide a thorough explanation of
    each attribute in the specification.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a basic understanding of the latest attributes supported on iOS.
    We can now briefly review some design considerations and then jump straight into
    some sample HTML5 forms to see how the latest input types and attributes work
    together to simplify our development process.
  prefs: []
  type: TYPE_NORMAL
- en: Form layout for iPhone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we briefly cover some design considerations when we are creating
    a form for iOS. You may or may not have full control of the design of your form;
    however, to make it simpler to understand the limitations that may come up, the
    following table helps demonstrate the limited amount of screen real estate we
    have when working with forms. Hopefully, this will help you explain these limitations
    so that adjustments could be made. Let''s take a look at the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| UI control | Pixel dimensions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Status bar | 20 in Height |'
  prefs: []
  type: TYPE_TB
- en: '| URL text field | 60 in Height |'
  prefs: []
  type: TYPE_TB
- en: '| Form assistant | 44 in Height |'
  prefs: []
  type: TYPE_TB
- en: '| Keyboard | 216 in Portrait Height162 in Landscape Height |'
  prefs: []
  type: TYPE_TB
- en: '| Button bar | 44 in Portrait Height32 in Landscape Height |'
  prefs: []
  type: TYPE_TB
- en: The details regarding these controls can be found at [https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/DesigningForms/DesigningForms.html](https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/DesigningForms/DesigningForms.html).
  prefs: []
  type: TYPE_NORMAL
- en: Based on these values, we need to adjust our forms for certain dimensions when
    these controls appear. For example, if all of these controls appear, except for
    the button bar, and we have an available height of 480 pixels, then our screen
    real estate ends up being a whopping height of 140 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see it's a challenge to create usable forms for iOS, but not impossible.
    There are some interesting techniques that we can use to accommodate forms within
    our applications. But the best technique is simplicity. Make sure that you don't
    require your user to provide lots of information at once; so instead of requiring
    a name, e-mail, password, and password confirmation with a date of birth, you
    just require a username, password, and email address. Keeping it simple goes a
    long way in our applications and helps improve the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a fair understanding of the limitations that come up when designing
    forms for iOS, but now let's jump into functionality and see how we can create
    some simple forms.
  prefs: []
  type: TYPE_NORMAL
- en: Sample HTML5 forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we're going to take a close look at some code, including the markup, scripts,
    and styles. Some of this you may already know and for the most part the only emphasis
    here will be on the new HTML5 inputs and attributes. We'll look at how they get
    implemented into a form, what their effect is on the UI controls, and how to leverage
    this new technology into our scripts. But first, let's do some setup work so that
    everything is consistent across our pages.
  prefs: []
  type: TYPE_NORMAL
- en: Setup work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we need to do is open up the `index.html` file for our forms
    page. Once we have this open, you''ll see that we have the old template that we
    initially created at the beginning of this book. As our applications have evolved,
    we must update this template to reflect those changes, so let''s do the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Include the forms styling (`forms.css`) after our main styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the navigation to reflect our new menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include our navigation script (`App.Nav.js`) and our forms script (`App.Forms.js`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including our forms styling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently, we do not have any styling for this page, but we should include
    our page-specific stylesheet. When we do this, our head should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Updating the navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Again, as with the previous chapter, we need to update our navigation to reflect
    the new select menu. This helps us save screen real estate for our application.
    When we update our navigation, our markup will be updated to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Including our navigation and forms scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have our navigation in place, let''s include the navigation script
    and while we''re at it, let''s include the page-specific script for our forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see we are only including the necessary scripts for this page to
    function.
  prefs: []
  type: TYPE_NORMAL
- en: The forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be developing three different forms on the page, including a login,
    register, and profile form. They're pretty basic and will mostly demonstrate the
    implementation of forms. After each bit of code, we'll review the new inputs and
    give some background information on how they affect our markup and user interface.
    For this part, don't concern yourself with the overall structure; meaning don't
    worry about the containing `div` of the form or the section with the header. The
    structure won't be discussed and is mostly there as a guideline for you. So, let's
    start with our login form.
  prefs: []
  type: TYPE_NORMAL
- en: The login form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following is the structure for our **Login** form. Review this carefully,
    mostly focus on the `form` element and how it utilizes the `autocapitalize` attribute,
    and then look at how the required attribute is implemented across our username
    and password fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When we look at the final product, which is not at this point since we haven''t
    styled our form, it should look somewhat like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The login form](img/1024OT_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our login form
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have `autocapitalize` set to off on the `form` element. This
    basically tells mobile Safari to not capitalize any of the inputs within it. We
    could easily set this to `off` on each individual input, but for the simplicity
    of this demonstration we've kept it on the `form` element.
  prefs: []
  type: TYPE_NORMAL
- en: Another cool thing that's going on here is that we've set `required` on both
    username and password. This is great because it won't submit the form unless these
    fields are filled out. In the old days, we would need to set a class of `required`
    and then check it with JavaScript; now we don't with the advent of HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I know some of you may be shocked, but you won't receive any notice that a field
    is required in iOS. According to the developer documentation it's not supported.
    So why mention it here? Well because if we truly wanted to support multiple mobile
    devices, it's still a good idea to include this attribute so that our application
    is device-friendly, and if Apple chooses to support it in the future, we are future-proofing
    our application. Again, this has to be weighed by you and possibly by your team,
    but having this attribute conforms to the HTML 5 specification—it's just not supported
    on iOS, yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see that the `placeholder` attribute is being used to apply some
    default text to our text inputs. Keep in mind that `placeholder` is exactly that:
    a placeholder. It is not setting the value of our input, so the value is still
    empty.'
  prefs: []
  type: TYPE_NORMAL
- en: The registration form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we move on to our registration form. In this form we'll collect the user's
    name, username, e-mail, password, and confirmation password. Again, don't focus
    on structure. Concentrate on how the `autocorrect` attribute is implemented on
    the `form` element and then the use of the `email` input type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When we have completed this section and some of the preliminary styles, our
    form will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The registration form](img/1024OT_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our registration form
  prefs: []
  type: TYPE_NORMAL
- en: In this form, we've turned off `autocorrect` from all form fields. Again, we
    can do this individually with every element, but to make things simpler we've
    chosen to add it to the `form` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last point to take into account is the use of the input type, `email`.
    When we start using some of the customized input types, our user interface accommodates.
    For example, when we click on the `email` input type, we''ll see that the controls
    change to include the `@` symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The registration form](img/1024OT_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The email input type
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a closer look at some other input types to see how this affects
    our user interface.
  prefs: []
  type: TYPE_NORMAL
- en: The profile form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following form is a sort of combination of both the login and registration
    forms with some extra fields. However, there are a couple of differences, so let's
    focus on just what's changed. In this example, we'll see that we've changed `autocapitalize`
    to `sentences` and have set `autocorrect` to `off` on only the fields we want
    it to apply to. On top of that, we start using the `datetime`, `number`, and `range`
    input types. The last change we've made is to apply the `required` fields using
    a class instead of an attribute—this will be explained further in the implementation
    of our scripts. For now, review the markup and then read on to view the explanations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final product will look like this after our styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The profile form](img/1024OT_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our profile form
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we've set `autocapitalize` to `sentences` on the `form` element.
    This helps us out because now we've defined exactly what we want to be capitalized,
    and that is sentences only. This is described in Apple's documentation and can
    be further explored there. As for `autocorrect`, we've set it on the individual
    items because we may want it to correct on `textarea`. Again, we could have chosen
    to set `autocorrect` to `off` on the `form` element and then set it to `on` within
    the `textarea`, but this is a matter of choice and is completely up to you as
    the developer. Now let's review the several input types.
  prefs: []
  type: TYPE_NORMAL
- en: The datetime type
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this example we use `datetime` for the **Date of Birth** field. This is
    great because our UI accommodates exactly how we expect it to in order to provide
    exact information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The datetime type](img/1024OT_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The datetime input type
  prefs: []
  type: TYPE_NORMAL
- en: The number type
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `number` input type also manipulates our UI, so that we have a selection
    of numbers as defaults in our controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The number type](img/1024OT_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our number input type
  prefs: []
  type: TYPE_NORMAL
- en: The range type
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `range` input type is an extremely useful control within our forms. Again,
    this type provides a custom UI that allows us to use system defaults, instead
    of JavaScript, to provide the type of value we''re looking for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The range type](img/1024OT_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The range input type
  prefs: []
  type: TYPE_NORMAL
- en: Now we've finished reviewing some of the new input fields and attributes in
    HTML5 and how they affect our iOS web application's UI. Next is using JavaScript
    to validate our form. Again, this will be very basic and will introduce us to
    how we can set up a reusable component for forms and won't directly tie into these
    new inputs and attributes. This is because these custom inputs and attributes
    were part of the specification to help speed up development, thus your need to
    use scripts for validation should be limited. Either way, let's move forward and
    take a quick look into our scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Form validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we review the JavaScript written for this page. There's nothing
    that's really new or that pushes the boundary; it is explicitly meant to demonstrate
    how to use the framework we've developed in this book to create self-contained
    code that validates multiple forms and makes it easier for you to extend. So let's
    get started by reviewing the basic template.
  prefs: []
  type: TYPE_NORMAL
- en: The basic template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is the basic template we've been using. A standard namespacing
    technique that extends the `App` namespace with a `Form` class will contain all
    of our functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Just keep in mind that the code is self-contained in an immediately invoked
    function expression or IIFE/closure. When we initialize `App.Form` the `Form`
    constructor will be called and our public method, `init`, will initialize any
    code that we write within it. So let's get started there, by attaching the appropriate
    events.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing our forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to initialize our forms, but we don't really need to create a new object
    for each one. What we can do is have it event-driven and then handle our validation
    using the attributes we've written for each input. But let's look at our event
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: Attaching events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, let''s perform attaching events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code we've got a couple of things going on. First, we look
    for the submission of any form on the page. Then, we're going to call the `handleFormSubmission`
    method, which we'll write in a moment, when we submit the form. The following
    event listeners are basically a show/hide for the login and register buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Nothing new or groundbreaking here, we're basically doing some setup work and
    can always come back to this if we need to. The key here is that we have not created
    a new instance of an object for each form, instead we've generalized our code
    to just listen for the `submit` event on each form. Now let's create, or set up,
    our handlers and then write the functionality for them.
  prefs: []
  type: TYPE_NORMAL
- en: Event handlers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, let's take a look at the event handlers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We haven't done anything new here, the only steps we've taken are to stub out
    our code so that we know where each piece of functionality will exist. From here,
    we look at the validation code for the submission of each form. We will not be
    looking at the show/hide functionality of each form, but you do have the source
    code that accompanies this book in case you are curious about how that works.
  prefs: []
  type: TYPE_NORMAL
- en: Validating our input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to take a look at the `handleFormSubmission` method and go step-by-step
    in order to understand how we are validating our fields. If you feel confused
    at any step of the process, don't worry about it. We've all been here, and I myself
    struggle sometimes with form validation and how it should be handled on a project-by-project
    basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s start by caching the variables we''ll be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: These variables describe themselves, a standard practice since we want to understand
    what is going on and thus, attaching meaningful names to our variables is a must.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to prevent default behavior of our form; meaning we don''t want
    the form to submit just yet. To do this, let''s do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added `e.preventDefault`, which tells the event to prevent the event''s
    default behavior in the browser. Next, we want to define the target, empty out
    any previous error messaging, create an empty errors object, and then find all
    required elements. This can be done with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that our `errors` object contains two arrays: a `required` array and an
    `invalid` array. This `errors` array will keep track of what''s gone wrong; for
    example, if a field is `required` and the value is `empty`, then we''ll populate
    the `required` array within the `error` object, but if an input is filled out
    but is not valid, then we''ll to populate the `invalid` object within the `errors`
    object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, remember when we added the `required` class but not the `required` attribute
    to our profile form? Well the preceding code wouldn''t catch that, so we''ll run
    into issues. In order to prevent that, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This code helps solve our issue with the `required` class, but does have a
    logical flaw. Can you find that flaw? I''ll leave that up to you as possibly a
    teaser for you to solve. The next step in this process is to find all our `form`
    elements, and then find the `required` fields and check that they''ve been filled
    out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we are basically populating our `invalid` array inside the `error`
    object if the field is empty. If the field is empty, we collect the value of the
    label associated with that field and attach a customized message that will be
    presented to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, specific validation won't be covered, such as e-mail, numerical,
    and other constraints. However, there is room here for you to explore and add
    to this bit of code, but hopefully this is enough for you to understand validation,
    requirements, and how to handle these use cases in your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to check for errors, and if they do exist present these errors
    to the user so that they can correct them accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Our check is pretty simple, we essentially check if the `invalid` and `required`
    arrays are empty within the `error` object. If they are, we want to continue with
    the submission—which in this case would be an AJAX call. Otherwise, we want to
    create an unordered list containing the errors and then append them to the form,
    so that the user understands what went wrong without a page refresh.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this section has helped you understand the approach in validating
    a form. With the latest support of the HTML5 specification, much of the work is
    taken care of by the browser. This speeds up development by lessening the development
    of customized components and helps us focus on delivery. Now as a bonus feature,
    we move on to styling our form.
  prefs: []
  type: TYPE_NORMAL
- en: Form styling for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we look at styling our form. If we currently test out our form
    on an iOS device or even a desktop browser, it won't be pretty. In fact you might
    be a little upset at how ugly it really is. So, let's style it and make everyone
    happy. We'll start with basic styling that helps achieve a good look. Then we'll
    consider how we can customize our components using CSS3 features.
  prefs: []
  type: TYPE_NORMAL
- en: Basic styling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Styling forms is pretty easy. We can simply use the elements themselves, but
    there is a single "gotcha". You might notice the fact that we've specified `[type="datetime"]`
    in one of our selectors. This is because the `datetime` input type shows a select
    menu type of UI in iOS and thus, the typical input selector won't apply. Otherwise,
    there's not much to the basic styling that really pops out here, and it basically
    gives us the styles we've seen in the previous images when we discussed the input
    types used in our forms.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Custom styling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is where a lot of the magic happens. In this section, we use custom CSS3
    styles to customize our components. The following styles will customize our inputs,
    selects, and give us a more stylized form that matches our current styling. Some
    things you may want to keep in mind when reviewing the styling are the use of
    the CSS3 `gradient` properties as `background` and the use of `border-radius`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When we apply the preceding styles, we get the following UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom styling](img/1024OT_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The range input type
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we've given our form a completely new look and feel and have
    easily styled the select component, something that is not easily done on desktop
    browsers. Going on from these styles, I would recommend checking out the `–webkit-appearance`
    property that essentially allows you to further customize your form and gives
    you much more control in terms of how components can get styled. However, at this
    point you should have a solid foundation to build HTML5 forms for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have reviewed the latest HTML5 input types and attributes
    specifically for our sample application. We then discussed the layout of forms
    on iOS and its limitations. Finally, we developed a couple of forms and attached
    a very basic validation script that used these latest input and attributes to
    our advantage. As a bonus, we went into styling our forms specifically for WebKit
    browsers, including mobile Safari on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: We should now have a solid grasp of forms on iPhone and iPad, and how they can
    be used with the latest HTML5 technology for our advantage. This chapter helped
    to demonstrate the use of forms and the considerations we need to take in order
    to create a user-friendly form. On top of that, we now move into location awareness
    in our next chapter and will use some of the concepts learned here to extend the
    experience.
  prefs: []
  type: TYPE_NORMAL
