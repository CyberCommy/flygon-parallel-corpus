- en: Basic Networking - Socket Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about sockets and three internet protocols:
    `http`, `ftplib`, and `urllib`. You will also learn about the `socket` module
    in Python, which is used for networking. `http` is a package that is used for
    working with the **Hypertext Transfer Protocol** (**HTTP**). The `ftplib` module
    is used for performing automated FTP-related work. `urllib` is a package that
    handles URL-related work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Sockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `http` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ftplib` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `urllib` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about sockets. We are going to use Python's
    socket module. Sockets are endpoints for communication between machines, whether
    locally or across the internet. The socket module has a socket class, which is
    used to handle the data channel. It also has functions for network-related tasks.
    To use the functionality of the socket module, we first need to import the socket
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to create a socket. The socket class has a socket function,
    with two arguments: `address_family` and `socket type`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`address_family` controls the OSI network layer protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`socket type`** controls the transport layer protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python supports three address families: `AF_INET`, `AF_INET6`, and `AF_UNIX`.
    The most commonly used is `AF_INET`, which is used for internet addressing. `AF_INET6`
    is used for IPv6 internet addressing. `AF_UNIX` is used for **Unix Domain Sockets**
    (**UDS**), which is an inter-process communication protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two socket types: `SOCK_DGRAM` and `SOCK_STREAM`. The `SOCK_DGRAM` socket
    type is used for message-oriented datagram transport; these are associated with
    the UDP. Datagram sockets deliver individual messages. `SOCK_STREAM` is used for
    stream-oriented transport; these are associated with TCP. Stream sockets provide
    byte streams between the client and server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sockets can be configured as server and client sockets. When both TCP/IP sockets
    are connected, communication will be bi-directional. Now we are going explore
    an example of client-server communication. We will create two scripts: `server.py`
    and `client.py`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `server.py` script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we will write a script for the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `client.py` script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now we will run these two programs in two different Terminals. In the first
    Terminal, we'll run `server.py`, and in the second terminal, run `client.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Terminal 1:** `python3 server.py` | **Terminal 2:** `python3 client.py`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `student@ubuntu:~/work$ python3 server.py``Connection from: (''127.0.0.1'',
    35120)``from connected user: Hello from client`` -> Hello from server !` | `student@ubuntu:~/work$
    python3 client.py``-> Hello from client``Received from server: Hello from server
    !`` ->` |'
  prefs: []
  type: TYPE_TB
- en: The http package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about the `http` package. The `http`
    package has four modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http.client`: This is a low-level HTTP protocol client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http.server`: This contains basic HTTP server classes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http.cookies`: This is used for implementing state management with cookies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http.cookiejar`: This module provides cookie persistence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we are going to learn about the `http.client` and `http.server`
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: The http.client module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to see two `http` requests: `GET` and `POST`. We are also going
    to make an `http` connection.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are going explore an example of making an `http` connection. For
    that, create a `make_connection.py` script and write the following content in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we made a connection with the URL mentioned on port
    80 for a specific timeout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will see the `http` `GET` request method; using this `GET` request method,
    we will see an example where we get a response code as well as a header list.
    Create a `get_example.py` script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used `HTTPSConnection`, as the website is served
    over the `HTTPS` protocol. You can use `HTTPSConnection` or `HTTPConnection`,
    depending on the website you use. We provided a URL and checked the status with
    the connection object. After that, we got a header list. This header list contains
    information regarding the type of data sent back from the server. The `getheaders()` method
    will get list of headers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will see an example of a `POST` request. We can post data to the URL
    using `HTTP POST`. For that, create a `post_example.py` script and write following
    content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we first created an `HTTPSConnection` object. Next,
    we created a `post_text` object, which posts `Hello World`. After that, we wrote
    a `POST` request, to which we received a response.
  prefs: []
  type: TYPE_NORMAL
- en: The http.server module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about a module from the `http` package,
    the `http.server` module. This module defines the classes used for implementing
    `HTTP` servers. It has two methods: `GET` and `HEAD`. By using this module, we
    can share files over a network. You can run the `http` server on any port. Make
    sure the port number is greater than `1024`. The default port number is `8000`.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use `http.server` as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, navigate to your desired directory and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open your browser and write `localhost:9000` in your address bar and press
    *Enter*. You will get the output following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The ftplib module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ftplib` is a module in Python that provides all the functionality needed to
    perform various actions over the FTP protocol. `ftplib` contains the FTP client
    class, as well as some helper functions. Using this module, we can easily connect
    to an FTP server to retrieve multiple files and process them. By importing the `ftplib`
    module, we can use all the functionality it provides.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to cover how to do FTP transfers by using the `ftplib`
    module. We are going see various FTP objects.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about downloading files from another
    machine using `ftplib`. For that, create a `get_ftp_files.py` script and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we retrieved multiple files from the host by using
    the `ftplib` module. First, we mentioned the IP address, username, and password
    of the other machine. To get all the files from the host, we used the `ftp.nlst()`
    function, and to download those files to our computer, we used the `ftp.retrbinary()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting a welcome message using getwelcome():'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once an initial connection is established, a server usually returns a welcome
    message. This message comes via the `getwelcome()` function, and sometimes includes
    disclaimers or helpful information that may be relevant to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will see an example of `getwelcome()`. Create a `get_welcome_msg.py` script
    and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we first mentioned the IP address, username, and password
    of the other machine. We used the `getwelcome()` function to get information after
    the initial connection was established.
  prefs: []
  type: TYPE_NORMAL
- en: Sending commands to the server using the sendcmd() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about the `sendcmd()` function. We can
    use the `sendcmd()` function to send a simple `string` command to the server to
    get the String response. The client can send FTP commands such as `STAT`, `PWD`,
    `RETR`, and `STOR`. The `ftplib` module has multiple methods that can wrap these
    commands. The commands can be sent using the `sendcmd()` or `voidcmd()` methods.
    As an example, we are going to send a `STAT` command to check the status of a
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `send_command.py` script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we first mentioned the IP address, username, and password
    of the other machine. Next, we used the `sendcmd()` method for the `STAT` command
    to the other machine. Then, we used `sendcmd()` for the `PWD` command.
  prefs: []
  type: TYPE_NORMAL
- en: The urllib package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like `http`, `urllib` is also a package that has various modules for working
    with URLs. The `urllib` module allows you to access several websites via your
    script. We can also download data, parse data, modify headers, and more using
    this module.
  prefs: []
  type: TYPE_NORMAL
- en: '`urllib` has a few different modules, which are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`urllib.request`: This is used for opening and reading URLs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`urllib.error`: This contains exceptions raised by `urllib.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`urllib.parse`: This is used for parsing URLs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`urllib.robotparser`: This is used for parsing `robots.txt` files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we are going to learn about opening a URL using `urllib` and
    how to read `html` files from the URL. We are going to see a simple example of
    the use of `urllib`. We will import `urllib.requests`. Then we assign the opening
    of the URL to a variable, then we will use a `.read()` command to read the data
    from the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `url_requests_example.py` script and write the following content in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the `read()` method, which returns the byte
    array. This prints the HTML data returned by the `Imdb` home page in a non-human-readable
    format, but we can use the HTML parser to extract some useful information from
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Python urllib response headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can get response headers by calling the `info()` function on the response
    object. This returns a dictionary, so we can also extract specific header data
    from the response. Create a `url_response_header.py` script and write the following
    content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about sockets, which are used for bi-directional
    client-server communication. We learned about three internet modules: `http`,
    `ftplib`, and `urllib`. The `http` package has modules for the client and server: `http.client`
    and `http.server` respectively. Using `ftplib`, we downloaded files from another
    machine. We also looked at welcome messages and sending `send` commands.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be covering building and sending emails. We will
    learn about message formats and adding multimedia content. Also, we are going
    to learn about SMTP, POP, and IMAP servers.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is socket programming?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is RPC?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the different ways to import to user-defined modules or files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a list and a tuple ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we have duplicate keys in a dictionary?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the differences between the `urllib`, `urllib2`, and `requests` modules?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ftplib` documentation: [https://docs.python.org/3/library/ftplib.html](https://docs.python.org/3/library/ftplib.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xmlrpc` documentation: [https://docs.python.org/3/library/xmlrpc.html](https://docs.python.org/3/library/xmlrpc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
