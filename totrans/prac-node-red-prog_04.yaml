- en: '*Chapter 3*: Understanding Node-RED Characteristics by Creating Basic Flows'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll actually create a flow using Node-RED Flow Editor. By
    creating a simple flow, you will understand how to use the tool and its characteristics.
    For a better understanding, we will create some sample flows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'From now on, you will create applications called flows using Node-RED. In this
    chapter, you will learn how to use Node-RED and how to create an application as
    a flow. To do this, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED Flow Editor mechanisms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Flow Editor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a flow for a data handling application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a flow for a web application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing and exporting a flow definition
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have mastered how to use Node-RED Flow
    Editor and know how to build a simple application with it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED (v1.1.0 or above).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code for this chapter can be found in `Chapter03` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node-RED Flow Editor mechanisms
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you learned in the previous chapters, Node-RED has two logical parts: a
    development environment called the Flow Editor and an execution environment for
    executing the application that''s been created there. These are called the runtime
    and the editor, respectively. Let''s take a look at them in more detail:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**Runtime**: This includes a Node.js application runtime. It is responsible
    for running the deployed flows.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editor**: This is a web application where the user can edit their flows.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main installable package includes both components, with a web server to
    provide Flow Editor as well as a REST Admin API for administering the runtime.
    Internally, these components can be installed separately and embedded into existing
    Node.js applications, as shown in the following diagram:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Node-RED overview'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.1_B16353.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – Node-RED overview
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand the mechanisms of Node-RED, let's immediately learn
    how to use the Flow Editor.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Using the Flow Editor
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at the main functions of the Flow Editor.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'The main features of the Flow Editor are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**Node**: The main building block of Node-RED applications, they represent
    well-defined pieces of functionality.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flow**: A series of nodes wired together that represent the series of steps
    messages pass through within an application.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The panel on the left is the palette**: A collection of nodes that are available
    within the editor that you can use to build your application.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deploy button**: Press this button to deploy your apps once you''ve edited
    them.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sidebar**: A panel for displaying various functions, such as processing parameter
    settings, specifications, and debugger display.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sidebar tabs**: Settings for each node, standard output, change management,
    and so on.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Main menu**: Flow deletion, definition import/export, project management,
    and so on.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These functions are arranged on the screen of the Flow Editor like so:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Node-RED Flow Editor'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.2_B16353.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Node-RED Flow Editor
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: You need to understand what is contained in the Flow menu before you start using
    Node-RED. Its contents may differ, depending on the version of Node-RED you're
    using, but it has some setting items such as **Project management of flow**, **Arrange
    view**, **Import / export of flow**, **Installation of node published in library**,
    and so on that are universal. For more information on how to use Node-RED, it's
    a good idea to refer to the official documentation as needed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Node-RED User Guide: [https://nodered.org/docs/user-guide/](https://nodered.org/docs/user-guide/).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows all these Flow Editor menu options inside Node-RED:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Node-RED Flow Editor menu'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.3_B16353.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – Node-RED Flow Editor menu
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – Node-RED流编辑器菜单
- en: With that, you are ready to use Node-RED to build an application. So, let's
    get started!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，你就可以使用Node-RED来构建一个应用程序了。所以，让我们开始吧！
- en: First of all, you need to run Node-RED in your environment. Please refer to
    [*Chapter 2*](B16353_02_ePub_AM.xhtml#_idTextAnchor034)*, Setting Up the Development
    Environment*, to learn how to set it up with your environment, such as Windows,
    Mac, or Raspberry Pi, if you haven't done so already.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要在你的环境中运行Node-RED。如果你还没有这样做，请参考[*第2章*](B16353_02_ePub_AM.xhtml#_idTextAnchor034)*，设置开发环境*，了解如何在你的环境中设置它，比如Windows、Mac或树莓派。
- en: With Node-RED running, let's move on to the next section, where we'll be making
    our first flow.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED运行后，让我们继续下一节，我们将制作我们的第一个流程。
- en: Making a flow for a data handling application
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作数据处理应用程序的流程
- en: In this section, you will create a working application (called a flow in Node-RED).
    Whether it is the **internet of things** (**IoT**) or server processing as a web
    application, the basic operation that Node-RED performs is sequentially transferring
    data.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将创建一个工作应用程序（在Node-RED中称为流程）。无论是**物联网**（**IoT**）还是作为Web应用程序的服务器处理，Node-RED执行的基本操作都是顺序传输数据。
- en: Here, we'll create a flow where JSON data is generated in a pseudo manner, and
    the data is finally output to standard output via some nodes on Node-RED.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个流程，其中JSON数据是以伪方式生成的，最终通过Node-RED上的一些节点将数据输出到标准输出。
- en: 'There are many nodes on the left-hand side of the palette. Please pay attention
    to the **common** categories here. You should be able to easily find the **inject**
    node, as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 调色板的左侧有许多节点。请注意这里的**常用**类别。你应该能够很容易地找到**注入**节点，如下面的截图所示：
- en: '![Figure 3.4 – Inject node'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 – 注入节点'
- en: '](img/Figure_3.4_B16353.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.4_B16353.jpg)'
- en: Figure 3.4 – Inject node
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 注入节点
- en: 'This node can inject a message into the next node. Let''s get started:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个节点可以将消息注入到下一个节点。让我们开始吧：
- en: Drag and drop it onto the palette of Flow 1 (the default flow tab).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其拖放到Flow 1（默认流程标签）的调色板上。
- en: You will see that the node is labeled with the word **timestamp**. This is because
    its default message payload is a timestamp value. We can change the data type,
    so let's change it to a JSON type.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到节点上标有**时间戳**这个词。这是因为它的默认消息载荷是一个时间戳值。我们可以改变数据类型，所以让我们把它改成JSON类型。
- en: Double-click the node and change its settings when the **Properties** panel
    of the node is opened:![Figure 3.5 – Edit inject node Properties panel
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当节点的**属性**面板打开时，双击节点并更改其设置：![图3.5 – 编辑注入节点属性面板
- en: '](img/Figure_3.5_B16353.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.5_B16353.jpg)'
- en: Figure 3.5 – Edit inject node Properties panel
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 编辑注入节点属性面板
- en: Click the drop-down menu of the first parameter and select **{}JSON**. You can
    edit the JSON data by clicking the **[…]** button on the right-hand side.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击第一个参数的下拉菜单，选择**{}JSON**。你可以通过点击右侧的**[…]**按钮编辑JSON数据。
- en: Click the **[…]** button, and the JSON editor will open. You can make JSON data
    with a text-based editor or a visual editor.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**[…]**按钮，JSON编辑器将打开。你可以用基于文本的编辑器或可视化编辑器制作JSON数据。
- en: 'This time, let''s make JSON data with an item called `{"name" : "Taiji"}`.
    You should replace my name with your name:![Figure 3.6 – JSON editor'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '这次，让我们用一个名为`{"name" : "太极"}`的项目来制作JSON数据。你应该用你的名字替换我的名字：![图3.6 – JSON编辑器'
- en: '](img/Figure_3.6_B16353.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.6_B16353.jpg)'
- en: Figure 3.6 – JSON editor
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – JSON编辑器
- en: Great – you have successfully made some sample JSON data!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了 - 你成功地制作了一些示例JSON数据！
- en: Click the **Done** button and close this panel.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**按钮并关闭此面板。
- en: Similarly, place a **Debug** node on the palette.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，在调色板上放置一个**调试**节点。
- en: After placing it, wire the **Inject** and **Debug** nodes to it.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放置后，将**注入**和**调试**节点连接到它。
- en: 'Once you execute this flow, the JSON data that was passed from the **Inject**
    node will be output to the debug console (standard output) by the **Debug** node.
    You don''t need to configure anything on the **Debug** node:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你执行了这个流程，从**注入**节点传递的JSON数据将被**调试**节点输出到调试控制台（标准输出）。你不需要在**调试**节点上配置任何东西：
- en: '![Figure 3.7 – Placing the Debug node and wiring it'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.7 – 放置调试节点并连接它'
- en: '](img/Figure_3.7_B16353.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.7_B16353.jpg)'
- en: Figure 3.7 – Placing the Debug node and wiring it
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 – 放置调试节点并连接它
- en: Finally, you need to deploy the flow you created. In Node-RED Flow Editor, we
    can deploy all our flows on the workspace to the Node-RED runtime by clicking
    the **Deploy** button in the top-right corner.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你需要部署你创建的流程。在Node-RED流编辑器中，我们可以通过点击右上角的**部署**按钮将所有的流程部署到Node-RED运行时。
- en: Before running the flow, you should select the **Debug** tab from the node menu's
    side panel to enable the debug console, as shown in the following screenshot:![Figure
    3.8 – Enabling the debug console
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行流程之前，你应该从节点菜单的侧边栏中选择**调试**选项卡，以启用调试控制台，如下面的截图所示：![图3.8 – 启用调试控制台
- en: '](img/Figure_3.8_B16353.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.8_B16353.jpg)'
- en: Figure 3.8 – Enabling the debug console
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 – 启用调试控制台
- en: 'Let''s run this flow. Click the switch of the **Inject** node to see the result
    of executing the flow on the debug console:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行这个流程。点击**注入**节点的开关，看看在调试控制台上执行流程的结果：
- en: '![Figure 3.9 – Executing the flow and checking the result'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.9 – 执行流程并检查结果'
- en: '](img/Figure_3.9_B16353.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.9_B16353.jpg)'
- en: Figure 3.9 – Executing the flow and checking the result
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9 – 执行流程并检查结果
- en: This is a very simple and easy data handling flow sample. In the latter half
    of this book, we will also experiment with data handling by actually connecting
    IoT devices and passing data obtained from a web API. In this section, it is enough
    that you understand how to handle data in Node-RED. Next, we're going to experiment
    with making a flow for a web application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单和容易的数据处理流程示例。在本书的后半部分，我们还将通过实际连接物联网设备并传递从Web API获取的数据来实验数据处理。在本节中，你只需要了解如何在Node-RED中处理数据就足够了。接下来，我们将实验制作一个用于Web应用程序的流程。
- en: Making a flow for a web application
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will create a new flow for a web application. We'll create
    this flow in the same way we created the previous data handling flow.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create it in the workspace of the same flow (Flow 1), but to make things
    clear and simple, let''s create a new workspace for the flow by following these
    steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Select **Flows | Add** from the **Flow** menu. Flow 2 will be added to the right-hand
    side of Flow 1\. These flow names, such as "Flow 1" and "Flow 2," are default
    names that are provided upon creation. You can rename the flow so that it has
    a more specific name if you want to:![Figure 3.10 – Adding a new flow
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_3.10_B16353.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.10 – Adding a new flow
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Select the **http in** node from the **network** category on the palette, and
    then drag and drop it onto the palette of Flow 2 (the new flow tab you just added):![Figure
    3.11 – An http in node
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_3.11_B16353.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – An http in node
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Double-click the node to open its **Edit** dialog.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the URL (path) of the web application you will create.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This path will be used as part of the URL for the web application you will
    be creating, under the Node-RED URL. In this case, if your Node-RED URL is `http://localhost:1880/`,
    your web application URL will be `http://localhost:1880/web`. An example of this
    can be seen in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Setting the path of the URL'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.12_B16353.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – Setting the path of the URL
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: To send a request via HTTP, an HTTP response is required. So, place an **http
    response** node on the workspace of your Node-RED.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can find this node in the **network** category of the palette, next to
    the **http in** node. Here, the **http response** node simply returns the response,
    so you don''t need to open the configuration panel. You can leave it as-is. If
    you want to include a status code in the response message, you can do so from
    the **settings** panel, as shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – An http response node'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.13_B16353.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.13 – An http response node
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: After placing an **http response** node on the palette, add a wire from the
    **http in** node to the **http response** node.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This completes the flow for the web application, since we''ve allowed an HTTP
    request and response. You will see a light blue dot in the top-right corner of
    each node, which indicates that they haven''t been deployed yet – so please make
    sure you click the **Deploy** button:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Wired nodes'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.14_B16353.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.14 – Wired nodes
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Once it's been successfully deployed, open a new tab in your browser.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, access the URL of the web application shown in the `http://localhost:1880/web`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should find that only **{}** is displayed on your screen. This is not a
    mistake. It is a result of sending an HTTP request and returning a response to
    it. Right now, since we have not set the content to be passed to the response,
    an empty JSON is passed as message data. This looks as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Web application result'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.15_B16353.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.15 – Web application result
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'This isn''t great, so let''s create some content. Let''s do something very
    simple and implement some simple HTML code. So, where should I code this? The
    answer is simple. Node-RED has a template node that allows you to specify the
    HTML code as-is as output. Let''s use this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Drag and drop a **template** node between the **http in** node and the **http
    response** node on the wire, so that the **template** node will be connected on
    it:![Figure 3.16 – Placing a "template" node on the wire between our two existing
    nodes
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_3.16_B16353.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.16 – Placing a "template" node on the wire between our two existing
    nodes
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, double-click the `<h1>` tag. Arrange the contents resembling the menu
    with the `<h2>` tag. The code will look like this:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: You can also get this code from this book's GitHub repository at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/tree/master/Chapter03](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/tree/master/Chapter03).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从本书的GitHub存储库中获取此代码[https://github.com/PacktPublishing/-Practical-Node-RED-Programming/tree/master/Chapter03](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/tree/master/Chapter03)。
- en: Once you have finished editing the **template** node, click the **Done** button
    to close it.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成**模板**节点的编辑后，单击**完成**按钮关闭它。
- en: 'The following screenshot shows what your template node will look like as you
    edit it:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了您编辑模板节点时的外观：
- en: '![Figure 3.17 – Code in the Template area'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.17-模板区域中的代码'
- en: '](img/Figure_3.17_B16353.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.17_B16353.jpg)'
- en: Figure 3.17 – Code in the Template area
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17-模板区域中的代码
- en: 'With that, we have finished preparing the HTML to be shown on our page. Please
    make sure you click the `http://localhost:1880/web` once more. You should now
    see the following output:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们已经完成了准备要显示在我们页面上的HTML。请确保再次单击`http://localhost:1880/web`。现在您应该看到以下输出：
- en: '![Figure 3.18 – Web application result'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.18-Web应用程序结果'
- en: '](img/Figure_3.18_B16353.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.18_B16353.jpg)'
- en: Figure 3.18 – Web application result
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18-Web应用程序的结果
- en: At this point, you should understand how to make a web application on Node-RED.
    I imagine it has been nice and easy so far. Now that we have built up some momentum,
    let's continue learning. In the next section, we will import and export the flow
    definition that we have created.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您应该了解如何在Node-RED上制作Web应用程序。我想到目前为止一切都很顺利。现在我们已经积累了一些动力，让我们继续学习。在下一节中，我们将导入和导出我们创建的流程定义。
- en: Importing and exporting a flow definition
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入和导出流程定义
- en: In this section, you will import and export the flow definition you have created.
    Usually, when developing, it is necessary to back up the source code and version
    control. You may also import source code created by others, or export your own
    source code and pass it on to others. Node-RED has a similar concept. In Node-RED,
    it is a normal practice to import and export the flow itself instead of importing
    or exporting the source code (for example, the template node described previously).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，您将导入和导出您创建的流程定义。通常，在开发时，需要备份源代码和版本控制。您还可以导入他人创建的源代码，或者导出自己的源代码并传递给他人。Node-RED有类似的概念。在Node-RED中，导入和导出流本身是一种正常的做法，而不是导入或导出源代码（例如，前面描述的模板节点）。
- en: 'So, first, let''s export the flow we have created so far. This is easy to do:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先让我们导出到目前为止创建的流程。这很容易做到：
- en: Simply select **Export** from the **Edit** dialog under the **Main** menu of
    the Node-RED Flow Editor.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需在Node-RED Flow Editor的**Main**菜单下的**Edit**对话框中选择**导出**。
- en: When the **Export** menu is displayed, you can only select the current flow
    or all your flows. You can also select raw JSON, without indentation, or formatted
    JSON, with indentation.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示**导出**菜单时，您只能选择当前流或所有流。您还可以选择原始JSON（无缩进）或格式化JSON（带缩进）。
- en: Here, select the current flow and select **Formatted**.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，选择当前流并选择**格式化**。
- en: Now, you can select how to save the exported JSON data – `flows.json` in the
    downloads location of your machine.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以选择如何保存导出的JSON数据-在计算机的下载位置中保存`flows.json`。
- en: Open this file in a text editor so that you can check the contents of the JSON
    file.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开此文件，以便检查JSON文件的内容。
- en: With that, we have learned how to export.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们已经学会了如何导出。
- en: 'Next, we need to import this definition (`flows.json`) into our Node-RED Flow
    Editor. Do this by following these steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将此定义（`flows.json`）导入到我们的Node-RED Flow Editor中。请按照以下步骤操作：
- en: Simply select **Import** from the **Flow** menu in the Node-RED Flow Editor.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需在Node-RED Flow Editor的**Flow**菜单中选择**导入**。
- en: When the **Import** menu is displayed, you can select **Paste flow json** or
    **Select a file based import**. You can also select a **current flow** or a **new
    flow** from the flow tab. If you select **new flow**, a new flow tab will be added
    automatically.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 显示**导入**菜单时，您可以选择**粘贴流json**或**选择基于文件的导入**。您还可以从流选项卡中选择**当前流**或**新流**。如果选择**新流**，将自动添加一个新的流选项卡。
- en: Here, please choose `flows.json` you exported to your local machine.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，请选择您导出到本地计算机的`flows.json`。
- en: Once the file has loaded, click the **Import** button:![Figure 3.20 – Import
    operation
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件加载完成后，单击**导入**按钮：![图3.20-导入操作
- en: '](img/Figure_3.20_B16353.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.20_B16353.jpg)'
- en: Figure 3.20 – Import operation
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.20-导入操作
- en: You now have the new tab, named Flow 2, next to the same flow on the old Flow
    2 tab. It has been imported completely, but it hasn't been deployed yet, so click
    the **Deploy** button, as follows:![Figure 3.21 – Adding the new flow
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您有了新的选项卡，名称为Flow 2，与旧的Flow 2选项卡上相同的流。它已完全导入，但尚未部署，因此请单击**部署**按钮，如下所示：![图3.21-添加新流
- en: '](img/Figure_3.21_B16353.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.21_B16353.jpg)'
- en: Figure 3.21 – Adding the new flow
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.21-添加新流
- en: With that, we've successfully prepared what will be shown on our web page using
    the flow we imported. Please make sure you click **Deploy** button.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们已经成功地准备好了我们导入的流程将显示在我们的网页上。请确保单击**部署**按钮。
- en: Access the web page again by going to `http://localhost:1880/web`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://localhost:1880/web`再次访问网页。
- en: Here, you will see that this web page has the same design as the web page you
    exported. Great work!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将看到此网页与您导出的网页具有相同的设计。干得好！
- en: '![Figure 3.22 – Result of the web application'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.22-Web应用程序的结果'
- en: '](img/Figure_3.22_B16353.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.22_B16353.jpg)'
- en: Figure 3.22 – Result of the web application
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.22-Web应用程序的结果
- en: Now, let's wrap this chapter up.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们结束这一章。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to use Node-RED Flow Editor to make basic flows
    and import/export flows. Now that you know how to use Node-RED Flow Editor, you'll
    want to learn about more of its features. Of course, Node-RED doesn't only have
    basic nodes such as **Inject**, **http**, and **template**, but also more attractive
    nodes such as **switch**, **change**, **mqtt**, and **dashboard**. In the next
    chapter, we'll try to use several major nodes so that we can code JavaScript,
    catch errors, perform data switching, delay functions, use the CSV parser, and
    more.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用Node-RED Flow Editor制作基本流程并导入/导出流程。现在您已经知道如何使用Node-RED Flow Editor，您会想要了解更多其功能。当然，Node-RED不仅具有诸如**Inject**、**http**和**template**等基本节点，还有更吸引人的节点，如**switch**、**change**、**mqtt**和**dashboard**。在下一章中，我们将尝试使用几个主要节点，以便我们可以编写JavaScript，捕获错误，执行数据切换，延迟功能，使用CSV解析器等。
