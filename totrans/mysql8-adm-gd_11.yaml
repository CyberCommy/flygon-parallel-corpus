- en: MySQL 8 – Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In previous chapters, we learned about the scalability of MySQL 8 and how to
    troubleshoot challenges when scaling MySQL 8\. Apart from that, we also learned
    how to make MySQL 8 highly available for use. Nowadays, security is important
    for any application, right? When we talk about security, it includes account management,
    roles, privileges, and more. Considering these aspects, we will cover all of these
    topics in this chapter. This chapter mainly focuses on MySQL 8 database security
    and its related features. The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of security for MySQL 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common security issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access control in MySQL 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account management in MySQL 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption in MySQL 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of security for MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The term security is not bound to a specific topic; it covers a wide range
    of topics related to MySQL 8\. Before starting a detailed discussion on it, let''s
    mention some important points related to security:'
  prefs: []
  type: TYPE_NORMAL
- en: Consider security within a database where users and their privileges related
    to various database objects need to manage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password security for users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security configuration during the installation process, which includes various
    types of files, such as log files, data files, and many more. These files must
    be protected for their read/write operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To handle system level failure scenarios, you must have a backup and recovery
    plan. This includes all the required files, such as database files, configuration
    files, and many more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage network security of the system where MySQL 8 was installed, which permits
    a limited number of hosts for the connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now your ride begins with another important and very interesting topic. Here
    we go.
  prefs: []
  type: TYPE_NORMAL
- en: Common security issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before going into detail on complex issues, you must first understand some basic
    points that will help you prevent misuse or attacks.
  prefs: []
  type: TYPE_NORMAL
- en: General guidelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In MySQL 8, all connections, queries, and operations performed by the user
    are based on the **Access Control Lists** (**ACLs**) security. The following are
    some general guidelines related to security:'
  prefs: []
  type: TYPE_NORMAL
- en: Don't allow access to the `user` table to any user except the root account.
    Manage user privileges with `GRANT` and `REVOKE` statements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use encrypted protocol, such as SSH or SSL, in the case of data transfer over
    the internet. MySQL 8 supports SSL connections for that.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use proper defensive programming techniques at the time when the client is entering
    data into MySQL using an application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a hashing function to store passwords into the MySQL 8 database; don't store
    plain text as a password. As the same way for password recovery consider some
    string as salt and use `hash(hash(password)+salt)` values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a proper password policy to protect it from break down. This means your
    system should accept only those passwords which follow your rules/conventions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of a firewall reduces the chance of failure by 50% and provides more protection
    to your system. Define MySQL under a demilitarized zone or behind a firewall to
    protect from distrusted hosts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Linux based system provides the `tcpdump` command to perform tasks of transferring
    in a more secure way. This command works on the network layer to provide security.
    For example, using the following command, you can check whether MySQL data streams
    are encrypted or not:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Guidelines for a secure password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we describe guidelines for securing passwords with respect
    to different users and cover how to manage it during the logging process. MySQL
    8 provides the `validate_password` plugin to define the policy for acceptable
    passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Guidelines for end users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section describes various methods to define your password, as an end user,
    in the safest way. It explains how to make your password more secure. The safest
    way is to define the password in a protected option file or prompt for the password
    in a client program. See the following different ways to define your password:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide the password using the command line with the following options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding two commands, you have to specify your password in the command
    line itself, which is not preferable. MySQL 8 provides another secure way to connect
    with the command line for that. Execute the following command, which will prompt
    you for the password. Once you enter the password, MySQL shows the asterisk (`*`)
    sign for each password character:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a more secure way than the previous two, where you define the password
    in the command-line argument:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `MYSQL_PWD` environment variable to define your password. This method
    is insecure as compared to other methods because there is a possibility that the
    environment variable is accessible by the other users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define the password using the `mysql_config_editor` utility, which is a provided
    option to store the password into an encrypted login path file, named `named.mylogin.cnf`.
    MySQL 8 will use this file later to connect with the MySQL server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the option file to store your password. When you define your credentials
    into the file, make sure this file is not accessible by any other user. For example,
    in a UNIX-based system, you define the password in the option file under the client
    section as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To make your file safe or to set an access mode on it, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Guidelines for administrators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For a database administrator, the following guidelines should be followed to
    secure passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `validate_password` to apply the policy on accepted passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 uses the `mysql.user` table to store user passwords, so configure the
    system in a way that only administrative users can access this table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should be allowed to reset account passwords in the case of expired passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply protection on the log file if it contains passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage access to the plugin directory and the `my.cnf` file, because it can
    modify capabilities provided by the plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password and logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL 8 allows you to write passwords as plain text in SQL statements, such
    as `CREATE USER`, `SET PASSWORD`, and `GRANT`. If we execute these statements,
    MySQL 8 will write passwords as text in log files, and they are visible to all
    the users that have access to the log files. To overcome this problem, avoid direct
    updates on grant tables using the mentioned SQL statements.
  prefs: []
  type: TYPE_NORMAL
- en: Secure MYSQL 8 against attackers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To secure MySQL 8 against attackers, strongly consider the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Set a password for all MySQL accounts. Never define an account with no password,
    because this permits access to your account by any user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make a connection with MySQL 8, use secure protocols/channels, such as compressed
    protocols, MySQL 8 internal SSL connections, or SSH for encrypted TCP/IP connections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a Unix-based system, set read/write privileges on the data directory for
    the Unix account which is used for running `mysqld`. Don't use the root user to
    start the MySQL 8 server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `secure_file_priv` variable to specify the directory for read and write
    permission. Using this variable, you can restrict non-administrative users from
    accessing important directories. Use this variable to set permissions on `plugin_dir`;
    it is very important. In the same way, do not provide `FILE` privileges to all
    the users, because it permits users to write files anywhere in the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `max_user_connections` variable to restrict the number of connections
    per account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the time of creating grant table entries, use wildcards properly. It is preferable
    to use IPs instead of DNS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow security guidelines during stored program and view creation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security options and variables provided by MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following `mysqld` options and variables are provided by MySQL 8 for security:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Cmd-Line** | **Option File** | **System Var** | **Status Var**
    | **Var Scope** | **Dynamic** |'
  prefs: []
  type: TYPE_TB
- en: '| `allow-suspicious-udfs` | Yes | Yes |   |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| `automatic_sp_privileges` |   |   | Yes |   | Global | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `chroot` | Yes | Yes |   |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| `des-key-file` | Yes | Yes |   |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| `local_infile` |   |   | Yes |   | Global | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `old_passwords` |   |   | Yes |   | Both | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `safe-user-create` | Yes | Yes |   |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| `secure-auth` | Yes | Yes |   |   | Global | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `- Variable: secure_auth` |   |   | Yes |   | Global | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `secure-file-priv` | Yes | Yes |   |   | Global | No |'
  prefs: []
  type: TYPE_TB
- en: '| `- Variable: secure_file_priv` |   |   | Yes |   | Global | No |'
  prefs: []
  type: TYPE_TB
- en: '| `skip-grant-tables` | Yes | Yes |   |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| `skip-name-resolve` | Yes | Yes |   |   | Global | No |'
  prefs: []
  type: TYPE_TB
- en: '| `- Variable: skip_name_resolve` |   |   | Yes |   | Global | No |'
  prefs: []
  type: TYPE_TB
- en: '| `skip-networking` | Yes | Yes |   |   | Global | No |'
  prefs: []
  type: TYPE_TB
- en: '| `- Variable: skip_networking` |   |   | Yes |   | Global | No |'
  prefs: []
  type: TYPE_TB
- en: '| `skip-show-database` | Yes | Yes |   |   | Global | No |'
  prefs: []
  type: TYPE_TB
- en: '| `- Variable: skip_show_database` |   |   | Yes |   | Global | No |'
  prefs: []
  type: TYPE_TB
- en: Reference: [https://dev.mysql.com/doc/refman/8.0/en/security-options.html](https://dev.mysql.com/doc/refman/8.0/en/security-options.html)
  prefs: []
  type: TYPE_NORMAL
- en: Security guidelines for client programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Don''t trust any data entered by the application user, because there is the
    possibility that the user has entered a `drop` or `delete` statement for the MySQL
    database. So, there is always the risk of security leaks and data loss. As an
    administrator of a MySQL database, the following checklist should be followed:'
  prefs: []
  type: TYPE_NORMAL
- en: The size of the data must be checked before passing it to MySQL 8.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make MySQL 8 more restrictive, enable the strict MySQL mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For numeric fields, enter characters, special characters, and spaces instead
    of numeric itself. Change field values to their original forms by your application
    before sending them to the MySQL 8 server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use two different users for application connection to the database and for database
    administration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify datatypes from numeric to character types by adding quotes in the case
    of dynamic URLs and web forms. Also add %22 ("), %23 (#), and %27 (') in dynamic
    URLs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previously defined functionalities are available built in to all of the programming
    interfaces. For example, Java JDBC provides prepared statements with placeholders,
    and Ruby DBI provides the `quote()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Access control in MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Privileges are mainly used to authenticate users and will verify user credentials
    and check if a user is allowed for the requested operation or not. When we connect
    with the MySQL 8 server, it will first check the identity of the user by the provided
    host and user name. After connection, when a request comes in, the system will
    grant privileges according to the user''s identity. Based on this understanding,
    we can say that access control contains two stages when we try to connect with
    the MySQL 8 server using the client program:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stage 1**: The MySQL server will either accept or reject the connection,
    based on the provided identity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stage 2**: After getting a connection from the MySQL server, when the user
    sends a request for performing any operation, the server will check whether sufficient
    privileges are available for the user or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are some limitations of the MySQL 8 privilege system:'
  prefs: []
  type: TYPE_NORMAL
- en: User is not allowed to set a password on specific objects, such as a table or
    a routine. MySQL 8 allows it globally at the account level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an admin user, we cannot specify privileges in a way that create/drop table
    is allowed but create/drop database of that table is not allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You are not allowed to restrict user access explicitly, which means that explicitly
    matching the user and refusing its connection is not possible. MySQL 8 manages
    the content of grant tables in memory, so in the case of `INSERT`, `UPDATE`, and
    `DELETE` statements, execution on grant tables requires the server to restart
    for effect. To avoid server restarts, MySQL has provided a command for flushing
    privileges. We can execute this command in three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: By issuing `FLUSH PRIVILEGES`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `mysqladmin reload`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `mysqladmin flush-privileges`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we reload grant tables, it will work as per the following mentioned points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table and column privileges**: Changes of these privileges will be available
    from the next client''s request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database privileges**: Changes of these privileges will be available the
    next time the client executes a `USE dbname` statement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global privileges and passwords**: Changes of these privileges are unaffected
    for a connected client; it will be applicable from the subsequent connections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privileges provided by MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Privileges define which operations are permissible to the user accounts. Based
    on the level of operation and the context in which it is applied, it will work.
    It is mainly classified as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Database privileges**: Applied on the database, and all objects of the database
    within it. It can be granted to a single database or defined globally to apply
    on all databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Administrative privileges**: It is defined at the global level, so not restricted
    to a single database. It enables users to manage operation of the MySQL 8 server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database object''s privileges**: It is used to define privileges on the database
    objects, such as tables, views, indexes, and stored routines. It can be applied
    on a specific object of the database, can be applied on all objects of a given
    type in a database, or can be applied globally for all the objects of a given
    type in all databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL 8 will store account privilege related information into grant tables
    and store the contents of these tables into memory upon server start-up for better
    performance. Privileges are further classified in terms of static and dynamic
    privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static privileges**: These are available built in with the server and cannot
    be unregistered. These privileges are always available for the user to be granted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic privileges**: These privileges can be registered or unregistered
    at runtime. If privileges are not registered, then they are not available to be
    granted for user accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grant tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Grant tables contain information related to user accounts and granted privileges
    for that user. MySQL 8 automatically inserts data into these tables when we execute
    any account management statements in the database, such as `CREATE USER`, `GRANT`,
    and `REVOKE`. MySQL allows insert, update, or delete options on grant tables to
    the admin user, but it''s not a preferable approach. The following tables of the
    MySQL 8 database contain grant information:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user`: It contains details related to user accounts, global privileges, and
    other non-privilege columns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password_history`: It contains history of password changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`columns_priv`: It contains column level privileges'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`procs_priv`: It contains privileges related to stored procedures and functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies_priv`: It contains privileges for proxy users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tables_priv`: It contains table level privileges'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`global_grants`: It contains details related to dynamic global privileges assignments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`role_edges`: It contains edges for role subgraphs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db`: It contains privileges at the database level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_roles`: It contains details related to default user roles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Grant tables contain scope and privilege columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scope column:** This column defines the scope of rows in the tables, which
    means the context under which the row applies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privilege column:** This column indicates which operation is permitted to
    the user. The MySQL server combines information from the various grant tables
    to build a complete detail of a user''s privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From MySQL 8.0 onward, grant tables use the `InnoDB` storage engine by managing
    transactional states, but before that, MySQL used the `MyISAM` engine by managing
    nontransactional states. This change enables users to manage all account management
    statements in the transactional mode, so in the case of multiple statements, either
    all of them are successfully executed or none of them are executed.
  prefs: []
  type: TYPE_NORMAL
- en: Verification of access control stages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL 8 performs access control checks in two different stages.
  prefs: []
  type: TYPE_NORMAL
- en: Stage 1 - Connection verification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the connection verification stage, so after verification, MySQL 8 will
    either accept or reject your connection request. Verification will be performed
    with the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: Based on a user's identity, with its password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whether a user's account is locked or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The server will deny access if either of these cases fails. Here, the identity
    contains the username and hostname from which the request is coming. MySQL performs
    a locking check on the `account_locked` column of the user table and a credential
    check on the three columns of the user table scope: `Host`, `User`, and `authentication_string`.'
  prefs: []
  type: TYPE_NORMAL
- en: Stage 2 - Request verification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a connection is established with the MySQL server, stage 2 comes into the
    picture, where the MySQL server checks which operation you want to perform and
    whether that is permissible to you or not. For this verification, MySQL uses the
    privilege columns of the grant tables; it might be coming from `user`, `db`, `tables_priv`, `columns_priv`,
    or `procs_priv` tables.
  prefs: []
  type: TYPE_NORMAL
- en: Account management in MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name implies, this topic describes how to manage user accounts in MySQL
    8\. We will describe how to add new accounts, how to remove accounts, how to define
    usernames and passwords for the accounts, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Add and remove user accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 provides two different ways to create accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using account management statements**: These statements are used to create
    users and set their privileges; for example, with `CREATE USER` and `GRANT` statements,
    which inform the server to perform modifications on the grant table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using manipulation of grant tables**: Using `INSERT`, `UPDATE`, and `DELETE`
    statements, we can manipulate the grant table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Out of these two approaches, account management statements are preferable,
    because they are more concise and less error-prone. Now, let''s see an example
    of using the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding commands perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`#1` command creates `''user1''` and command `#2` assigns full privileges to
    `''user1''`. But `''user1''@''localhost''` indicates that `''user1''` is allowed
    to connect with `localhost` only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#3` command creates `''user2''` and command `#4` assigns full privileges to
    `''user2''`, the same as `''user1''`. But in #4, `''user2''@''%''` is mentioned,
    which indicates that `''user2''` is allowed to connect with any host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#5` creates `''adminuser''` and allows it to connect with `localhost` only.
    In `#6`, we can see that only `RELOAD` and `PROCESS` privileges are provided to
    the `''adminuser''`. It allows `''adminuser''` to execute the `mysqladmin reload`, `mysqladmin
    refresh`, `mysqladmin flush-xxx` commands, and the `mysqladmin processlist` command,
    but it has no access on any database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#7` creates the `''tempuser''` account without a password and allows the user
    to connect with `localhost` only. But no grant is specified for `''tempuser''`,
    so this user is not able to access the database nor perform any administrative
    commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#8` creates `''user4''` and allows the user to access the database using `''host4''`
    only. `#10` indicates `''user4''` has grant on `''db1''` for all the mention operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To remove a user account, execute the `DROP USER` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This command will drop the `'user1'` account from the system.
  prefs: []
  type: TYPE_NORMAL
- en: Security using roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The same as a user account role having privileges, we can also say that a role
    is a collection of privileges. As an admin user, we can grant and revoke privileges
    from the roles. MySQL 8 provides the following commands, functions, and variables
    related to role configuration.
  prefs: []
  type: TYPE_NORMAL
- en: SET ROLE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`SET ROLE` changes the active roles within the current session. Refer to the
    following commands related to `SET ROLE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first command will deactivate all roles for the user in the current session.
    You can see the effect with the `CURRENT_ROLE();` function. In the second command,
    we are setting the `'developer_read'` role as default, and then checking the current
    role using the predefined function again.
  prefs: []
  type: TYPE_NORMAL
- en: CREATE ROLE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`CREATE ROLE` is used to create a role; refer to the following command, which
    will create a role with the name `''developer_role''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: DROP ROLE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`DROP ROLE` is used to remove a role. Refer to the following command, which
    will remove the `''developer_role''` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: GRANT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`GRANT` assigns privileges to roles and assigns roles to accounts. For example,
    the following command assigns all privileges to the developer role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, to assign roles to the user account, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This command assigns the `''developer_role''` role to the `developer1` account.
    MySQL 8 also provides a feature to assign `GRANT` from user to user and role to
    role. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `user1` and `role1` is created and `GRANT` is applied on them
    in a simple way by using the `GRANT` command. Now, for `user2` and `role2`, we
    have applied `GRANT` from the `user1` and `role1`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: REVOKE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`REVOKE` is used to remove privileges from the role and remove a role assignment
    from the user account. Refer to the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first command is used to remove `'developer_role'` for `user1`, and the
    second command is used to remove insert and update privileges from the `'role1'`
    on `'app_db'`.
  prefs: []
  type: TYPE_NORMAL
- en: SET DEFAULT ROLE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`SET DEFAULT ROLE` indicates which roles are active by default, whenever user
    login default roles are available to the user. To set a default root, execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After setting the default role, restart the server and execute the `current_role()`
    function to check whether a role is assigned or not.
  prefs: []
  type: TYPE_NORMAL
- en: SHOW GRANTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`SHOW GRANTS` lists down privileges and role assignments related to accounts
    and roles. For a role, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This command shows the grant available on the `''app_developer''` role. In
    the same way, to check grants on a user, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command lists down all the access available with the user root:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CURRENT_ROLE ()`: This function is used to list current roles within the current
    session. As described in the default role command, it shows currently assigned
    roles of the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activate_all_roles_on_login`: This is a system variable used to automatically
    activate all granted roles at the time of user login. By default, automatic activation
    of roles is disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mandatory_roles`: This is a system variable used to define mandatory roles.
    Remember that roles which are defined as mandatory can''t be deleted using the
    `drop` command. Define your mandatory roles in the server file `my.cnf` as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To persist and set these roles at runtime, use the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This statement applies changes on the running MySQL 8 instance and also saves
    it for subsequent restarts. If you want to apply changes for the running instance
    and not for other restarts, then use the keyword `GLOBAL` instead of `PERSIST`.
  prefs: []
  type: TYPE_NORMAL
- en: Password management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 provides the following password management related capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Password expiration**: Used to define periods for password expiration so
    that users can change it periodically. MySQL 8 allows for setting password expiration
    manually for accounts, along with an expiration policy. For an expiration policy,
    the `mysql_native_password`, `sha256_password`, or `caching_sha2_password` plugins
    can be used. To set a password manually, execute the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This will mark a password as expired for the mentioned user. For password policies,
    you have to define the duration in terms of the number of days. MySQL uses the
    system variable `default_password_lifetime`, which contains a positive integer
    number to define the number of days. We can define it in the `my.cnf` file or
    can define it at runtime using the `PERSIST` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Password reuse restrictions**: Used to prevent the use of old passwords again.
    MySQL 8 defines this restriction based on two parameters - the number of changes
    and time elapsed; they can be used separately or in combination. MySQL 8 defines `password_history` and `password_reuse_interval` system
    variables, respectively, to apply restrictions. We can define these variables
    in the `my.cnf` file, or can persist them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password_history`: This variable indicates that new passwords cannot be set/duplicated
    from the old passwords. Here, consider the most recent old passwords as per the
    specified number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password_reuse_interval`: This variable indicates that the password cannot
    be set/duplicated from the old password. Here, interval defines the specific period
    and MySQL 8 will check new password with all the passwords which were falls under
    that period for a user. For example, if the interval is set as 20 days, then the
    new password should not have existed in the last 20 days of changed data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password strength assessment**: Used to define strong passwords. It is implemented
    using the `validate_password` plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption in MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When there is a need to transfer data over the network, it is a must to use
    encryption for the connection. If you are using unencrypted data, then someone
    who has access to the network can easily watch all of your traffic and can see
    what data is transferred between the client and server. To protect your data over
    the network, use encryption. Make sure the encryption algorithm used contains
    security elements to protect your connection from known attacks, like changing
    the order of a message or replay twice on data. Based on your application requirements,
    you can choose either an encrypted or unencrypted type connection. MySQL 8 performs
    encryption per connection using **Transport Layer Security** (**TLS**) protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring MySQL 8 to use encrypted connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes how to configure the server and client for the encrypted
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side configuration for encrypted connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the server side, MySQL 8 uses the `–ssl` option to specify properties related
    to encryption. The following options are used at the server side to configure
    encryption:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--ssl-ca`: This option specifies the path name of the **Certificate Authority**
    (**CA**) certificate file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ssl-cert`: This option specifies the path name of the server public key
    certificate file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ssl-key`: This option specifies the path name of the server private key
    file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the above options by specifying them in the `my.cnf` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `--ssl` option is enabled by default, so on server startup, MySQL 8 will
    try to find the certificate and key file under the data directory, even though
    you have not defined it in the `my.cnf` file. If those files are found, then MySQL
    8 will provide an encrypted connection, or else continue without an encrypted
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side configuration for encrypted connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the client side, MySQL uses the same `–ssl` options used at the server side
    to specify the certificate and key file, but apart from that, it has `–ssl-mode`
    options. By default, the client is allowed to set up an encrypted connection with
    the server if the server permits it. For further control, the client program uses
    the following `–ssl-mode` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--ssl-mode=REQUIRED`: This option indicates that an encrypted connection must
    be established, and fails if it is not established'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ssl-mode=PREFFERED`: This option indicates the client program can establish
    an encrypted connection if the server permits it, or else establish an unencrypted
    connection without a fail'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ssl-mode=DISABLED`: This option indicates the client program is unable to
    use an encrypted connection, and only an unencrypted connection is allowed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ssl-mode=VERIFY_CA`: This option is the same as `REQUIRED`, but in addition
    to that, it verifies the CA certificate against the configured CA certificate
    and returns a fail if no matches are found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ssl-mode=VERIFY_IDENTITY`: It is the same as the `VERIFY_CA` option, but
    in addition to that, it will perform the hostname identity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command options for encrypted connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following options are available in MySQL 8 for an encrypted connection.
    You can use these options on the command line, or you can define them in an option
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Format** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `--skip-ssl` | Do not use encrypted connection |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl` | Enable encrypted connection |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-ca` | File that contains a list of trusted SSL Certificate Authorities
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-capath` | Directory that contains trusted SSL Certificate Authority
    certificate files |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-cert` | File that contains X509 certificate |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-cipher` | List of permitted ciphers for connection encryption |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-crl` | File that contains certificate revocation lists |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-crlpath` | Directory that contains certificate revocation list files
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-key` | File that contains X509 key |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-mode` | Security state of connection to server |'
  prefs: []
  type: TYPE_TB
- en: '| `--tls-version` | Protocols permitted for encrypted connections |'
  prefs: []
  type: TYPE_TB
- en: Reference: [https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-options.html](https://dev.mysql.com/doc/refman/8.0/en/encrypted-connection-options.html)
  prefs: []
  type: TYPE_NORMAL
- en: Connect with MySQL 8 remotely from Windows with SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To connect remotely with MYSQL 8 by using SSH from the Microsoft Windows system,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the SSH client on your local system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After starting the SSH client, set the hostname and user ID by which you want
    to connect with the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure port forwarding as follows and save the information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**For remote forwarding configure**: `local_port:3306`, `remote_host:mysqlservername_or_ip`,
    `remote_port:3306`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For local forwarding configure**: `local_port:3306`, `remote_host:localhost`,
    `remote_port:3306`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log in to the server with the created SSH session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your local Microsoft Windows machine, start any ODBC application, such as
    Microsoft Access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your local system, create new file and try to link with MySQL server using
    the ODBC driver. Make sure you have defined `localhost` in the connection instead
    of `mysqlservername`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL 8 provides several plugins to implement security. These plugins provide
    various features related to authentication protocols, password validation, secure
    storage, and much more. Let's discuss the various types of plugins in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following list of authentication plugins, with their details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Native pluggable authentication**: To implement native authentication, MySQL
    8 uses the `mysql_native_password` plugin. This plugin uses a common name in server
    and client both the side and inbuilt provided by MySQL 8 for both the server and
    client program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA-256 pluggable authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To implement SHA-256 hashing MySQL 8 provides two different plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sha256_password`: This plugin is used to implement basic SHA-256 authentication.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`caching_sha2_password`: This plugin implements SHA-256 authentication along
    with caching for better performance, and has some additional features as compared
    to the basic plugin.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This plugin is inbuilt available with MySQL 8 server and client program with
    the same name as `sha256_password`. In the client, it is located under the `libmysqlclient` library.
    To use this plugin for an account, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: SHA-2 pluggable authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SHA-2 pluggable authentication is the same as the SHA-256 pluggable plugin,
    except its plugin name is `caching_sha2_password`**.** When compare to `sha256_password`,
    this plugin has the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Unix socket-file and shared-memory protocols, then support
    is provided for client connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In-memory caching is available in SHA-2 plugins, which provides faster re-authentication
    for users who have connected previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This plugin provides RSA-based password exchange, which works regardless of
    the SSL library provided by MySQL 8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Client-side cleartext pluggable authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This plugin is used to send passwords to the server without hashing or encryption.
    It is available at the client side with the name `mysql_clear_password`. MySQL
    8 provides it built-in within the client library.
  prefs: []
  type: TYPE_NORMAL
- en: No-login pluggable authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a server-side plugin used to prevent all client connections to any
    account that uses it. The plugin name is `''mysql_no_login''`, and it''s not a
    built-in MySQL plugin, so we must use the `mysql_no_login.so` library. To make
    it usable, put the library file under the plugin directory first, then perform
    either of these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the plugin on server startup by adding the `--plugin-load-add` parameter
    in the `my.cnf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To register the plugin at runtime, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To uninstall this plugin, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: If the plugin was installed on the server startup by using `--plugin-load-adoption`,
    then restart the server by removing the option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the plugin was installed using the `INSTALL PLUGIN` command, then use the
    uninstall command to remove it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Socket peer-credential pluggable authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The server-side plugin named `auth_socket` is used to authenticate clients
    which are connected from the local host using the Unix socket file. It is only
    used for a system that supports the `SO_PEERCRED` option. `SO_PEERCRED` is used
    to obtain information about the user running the client program. This is not a
    built-in plugin; we must use the `auth_socket.so` library with this plugin. To
    make it usable, put the library file under the plugin directory first, and then
    perform either of these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the plugin on server startup by adding the `--plugin-load-add` parameter
    in the `my.cnf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Register the plugin at runtime by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To uninstall this plugin, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: If the plugin was installed on server startup using `--plugin-load-addoption`,
    then restart the server by removing the option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the plugin was installed using the `INSTALL PLUGIN` command, then use the
    `UNINSTALL` command to remove it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Test pluggable authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A test plugin is provided by MySQL 8 to check account credentials and log successes
    or failures on the server logs. It is not a built-in plugin and needs to be installed
    before use. This is available for both the server and client side, and is named `test_plugin_server`
    and `auth_test_plugin`, respectively. MySQL 8 uses the `auth_test_plugin.so` library for
    this plugin. To install and uninstall this plugin, perform the same steps mentioned
    in the preceding plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The connection-control plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL 8 uses these plugins to introduce an increasing delay in the server response
    to the client after some specific number of failed connection attempts. MySQL
    has provided two plugins for connection control.
  prefs: []
  type: TYPE_NORMAL
- en: CONNECTION_CONTROL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This plugin will check all the incoming requests of connections and, based
    on that, add a delay in the server response if required. This plugin uses some
    system variables for configuration, and status variables for monitoring purposes.
    It also uses some other plugins, event classes, and processes, like audit plugin,`MYSQL_AUDIT_CONNECTION_CLASSMASK`
    event class, `MYSQL_AUDIT_CONNECTION_CONNECT`, and `MYSQL_AUDIT_CONNECTION_CHANGE_USER` processes
    for checking whether the server should have added a delay before attending any
    client connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This plugin implements uses of the `INFORMATION_SCHEMA` table to provide details
    on monitoring of the failed connections.
  prefs: []
  type: TYPE_NORMAL
- en: Plugin installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We must use the `connection_control.so` library with this plugin. To make it
    usable, put the library file under the plugin directory first, and then perform
    either of the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the plugin on server startup by adding the `--plugin-load-add`parameter
    in the `my.cnf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Register the plugin at runtime by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Variables related to CONNECTION-CONTROL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following variables are provided by `CONNECTION-CONTROL` plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Connection_control_delay_generated`: This is a status variable, mainly used
    to manage the counter. It indicates how many times the server added a delay in
    its response on failed connection attempts. It also depends on the `connection_control_failed_connections_threshold`
    system variable, because this status variable does not increment the count unless
    the number of attempts reaches the limit defined by the threshold variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_control_failed_connections_threshold`: This is a system variable
    which indicates how many consecutive failed attempts are allowed to clients before
    the server adds a delay on each attempt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_control_max_connection_delay`: This is a system variable which
    defines the maximum delay time in milliseconds for the server response on failed
    connections attempts. MySQL 8 will consider this variable once the threshold variable
    contains a value higher than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection_control_min_connection_delay`:  This system variable defines the
    minimum delay time in milliseconds for the server to failed connection attempt.
    MySQL 8 will consider this variable once the threshold variable contains a value
    higher than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The password validation plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For password validation, MySQL provides a plugin named `validate_password`.
    It is mainly used to test passwords and improve security. The following are the
    two major capabilities of this plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VALIDATE_PASSWORD_STRENGTH()`: An SQL function used to find the strength of
    a password. It takes a password as an argument and returns an integer value between
    0 and 100\. Here, 0 indicates a weak password and 100 indicates a strong password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check password as per policy in SQL statements**: For all the SQL statements
    which use a password as a clear text value, the plugin will check the provided
    password against the policy of the password and, based on that, return a response.
    In the case of a weak password, the plugin will return an `ER_NOT_VALID_PASSWORD` error.
    `ALTER USER`, `CREATE USER`, `GRANT`, `SET PASSWORD` statements, and the `PASSWORD()`
    function are always checked by this plugin if the password is defined as clear
    text in an argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install password validation plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We must use the `validate_password.so` library with this plugin. To make it
    usable, put the library file under the plugin directory first, and then perform
    either of these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the plugin on server startup by adding the `--plugin-load-add` parameter
    in the`my.cnf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Register the plugin at runtime by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Variables and options related to the password validation plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL 8 provides following system variables, status variables and options related
    to password validation plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '`validate_password_check_user_name`: This is a system variable, and is enabled
    by default in MySQL 8\. As the name implies, it is used to compare a password
    with the username of the currently effective user. If the password matches with
    the username or its reverse, MySQL 8 will reject the password, irrespective of
    the `VALIDATE_PASSWORD_STRENGTH()` function value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate_password_dictionary_file`: This system variable contains the pathname
    of the directory which is used by the `validate_password` plugin. You can set
    it at runtime without a server restart, and it is available once the plugin is
    installed. Set the password policy value as 2(strong), if you define the directory
    for the password check. Possible values for password policy is describe under `validate_password_policy` system
    variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate_password_length`: This system variable is available once a plugin
    is installed and is used to define the minimum number of characters for a password
    to check with the `validate_password` plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate_password_mixed_case_count`: This system variable is available once
    a plugin is installed and is used to define the minimum number of lowercase and
    uppercase characters for a password check.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate_password_number_count`: This system variable is available once the
    plugin is installed and is used to define the minimum number of digits for the
    password check.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate_password_special_char_count`: This system variable is available once
    a plugin is installed and is used to define the minimum number of non-alphanumeric
    characters in a password check.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate_password_policy`: This system variable is available once a plugin
    is installed, and it indicates how a plugin should behave in the case of other
    system variables. The following values of this variable describe the behavior
    of the `validate_password` plugin:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Policy** | **Tests Performed** |'
  prefs: []
  type: TYPE_TB
- en: '| 0 or LOW | Length |'
  prefs: []
  type: TYPE_TB
- en: '| 1 or MEDIUM | Length; numeric, lowercase/uppercase, and special characters
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2 or STRONG | Length; numeric, lowercase/uppercase, and special characters;
    dictionary file |'
  prefs: []
  type: TYPE_TB
- en: Reference:[https://dev.mysql.com/doc/refman/8.0/en/validate-password-options-variables.html](https://dev.mysql.com/doc/refman/8.0/en/validate-password-options-variables.html)
  prefs: []
  type: TYPE_NORMAL
- en: '`validate_password_dictionary_file_last_parsed`: This is a status variable
    used to indicate the time when a directory file was last parsed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate_password_dictionary_file_words_count`: This is a status variable
    used to indicate the number of words read from the directory file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--validate-password[=value]`: This option is used to define how a server loads
    the `validate_password` plugin on startup. This option is available only if the
    plugin was registered with `INSTALL PLUGIN` or if it is loaded with the `--plugin-load-add`
    feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 keyring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL 8 provides a keyring service, which allows the MySQL server's internal
    components and plugins to store their sensitive information for later use. For
    this feature, MySQL 8 uses the `keyring_file` plugin, which will store data into
    the file located on the server host. This plugin is available in all distributions
    of MySQL, such as the Community Edition and Enterprise Edition.
  prefs: []
  type: TYPE_NORMAL
- en: Install keyring plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We must use the `keyring_file.so` library with this plugin. To make it usable,
    put the library file under the plugin directory first, and then perform either
    of these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the plugin on server startup by adding the `--plugin-load-add` parameter
    in the `my.cnf` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Register the plugin at runtime by executing the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: System variables related to keyring plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 provides below system variable related to keyring plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '`keyring_file_data`: This system variable is available once a plugin is installed
    and is used to define a pathname of the data file which is used by the `keyring_file` plugin
    to store secure data. Keyring operations are transactional, so this plugin uses
    a backup file during write operation to handle a rollback scenario. In this case,
    the backfile is also named with the same naming convention as defined in the `keyring_file_data`
    system variable, with the suffix as `.backup`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started with an overview of security, and then the ride
    began with the MySQL 8 security related features. First we discussed some common
    security issues, then we showed how to assign privileges and how to manage access
    control in MySQL 8\. Encryption was also covered in this chapter, to secure your
    sensitive data. And finally, we covered some important security plugins, which
    are useful to implement security in MySQL 8.
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to move on to our next chapter, where we will be configuring MySQL
    8 for optimization. For optimization, we will cover different areas of the database,
    such as optimizing queries, optimizing tables, optimizing buffering and caching,
    and much more. Apart from server configuration, it also covers how to configure
    a client for optimization.
  prefs: []
  type: TYPE_NORMAL
