- en: Deploying WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we worked on building a playbook that installs and
    configures a basic LAMP stack. In this chapter, we are going to be building on
    top of the techniques we used there in order to create a playbook that installs
    a LEMP stack and WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our initial playbook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and installing the WordPress CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in to your WordPress installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we start, we should quickly cover what WordPress is. It is likely that
    at some point in the last 48 hours, you have visited a website that is powered
    by WordPress. It is an open source **content management system** (**CMS**) that
    is powered by PHP and MySQL and is used by around 19,545,516 websites according
    to the CMS usage statistics provided by BuiltWith.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, a fresh copy of the CentOS 7 Vagrant box we have launched in the previous
    chapters will be used. This does mean that packages will need to be downloaded
    again, along with WordPress. You can find a complete copy of the playbook at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter05/lemp](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter05/lemp).
  prefs: []
  type: TYPE_NORMAL
- en: Preinstallation tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the previous chapter, a LEMP stack is composed of the following
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux**: In our case, this will be CentOS 7 again'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NGINX**: If you remember, it is pronounced as *engine-x*, and replaces Apache
    in our stack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MariaDB**: As we have seen, this will be the database component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PHP**: We will be using PHP 7.2 again for this'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we install WordPress, we need to install and configure these components.
    Also, as this playbook is eventually going to be executed against publicly available
    cloud servers, we need to think about some best practices around our NGINX configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by getting the initial structure of the playbook set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the basic layout, we need to put some content in the `Vagrantfile`
    and `.gitignore` files. `Vagrantfile` contains the following, similar to the previous
    chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you may have spotted, we are using a different IP address for this Vagrant
    box; the `.gitignore` file should contain a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the basics configured, we can make a start by writing the playbook
    to deploy and configure our initial software stack.
  prefs: []
  type: TYPE_NORMAL
- en: The stack-install command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to start by creating a role called `stack-install`using `ansible-galaxy
    init`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will install our initial software stack. Once installed, we hand over to
    a second role, which will then configure the software stack before a third role
    starts the WordPress installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'So what packages do we need? WordPress has the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: PHP 7.2 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MariaDB 10.0 or greater, or MySQL 5.6 or greater
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NGINX or Apache with the `mod_rewrite` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTPS support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We know from the previous chapter that the IUS repository can provide PHP 7.2
    and MariaDB 10.1, so we will use that as the source for those packages, but what
    about NGINX? There are NGINX packages in the EPEL repository. However, we are
    going to be using the main NGINX repository so we can get the latest and greatest
    version.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start our playbook by enabling the three repositories we need in order
    to install our software stack and then, once those repositories are enabled, we
    should do a `yum update` to make sure that the base operating system is up to
    date.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `roles/stack-install/defaults/main.yml` file requires the following content
    to achieve this. First, we have the locations for the RPM packages that enable
    EPEL and IUS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we have the following nested variable, which contains all of the
    information we need to use the `yum_repository` module in order to create a `.repo`
    file for the NGINX repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the defaults in place, we can add the tasks to the `roles/stack-install/tasks/main.yml`
    file; these are as follows, with the first task being already familiar as all
    it does is install our two packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The next task creates a repository file called `nginx.repo` in `/etc/yum.repos.d/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following Terminal output, the content of the file
    is pointing toward the NGINX repository, and we can get more information on the
    NGINX package by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0acb7dd0-336e-4be1-9d47-664069f25d1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following task should also look familiar, as we used it in the previous
    chapter to update the installed packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our source repositories set up and the already installed packages
    updated, we can proceed with the remainder of the package installations.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to create four lists of packages; these are in the `roles/stack-install/defaults/main.yml`
    file. As per the previous chapter, we first need to uninstall a preinstalled MariaDB
    package, so our first list includes packages to remove:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we have the packages needed to allow Ansible to interact with services
    such as SELinux and MariaDB, as well as installing the Postfix package, which,
    we know from the last time, is removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we have all of the packages that make up our core software stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have a few nice-to-haves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The tasks to remove the packages and then install them should be placed in
    the `roles/stack-install/tasks/main.yml` file, starting with the task to remove
    the packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can install all of the packages in one go using the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we are combining the three remaining lists of packages in a single
    variable. We are doing this so we do not have to repeat the `yum` task any more
    than we have to. It also allows us to override, say, just `extra_packages` elsewhere
    in the playbook and not have to repeat the entire list of required packages needed
    for other parts of the stack.
  prefs: []
  type: TYPE_NORMAL
- en: The stack-config role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next role will configure the software stack we have just installed, so
    let''s create the role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the files needed for the role, we can make a start on planning
    what we need to configure. We will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a user for our WordPress to run under
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure NGINX as per the best practices on the WordPress Codex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure PHP-FPM to run as the WordPress user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do the initial configuration for SELinux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start by creating the WordPress user.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress system user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The defaults for the WordPress system user, which should be placed in `roles/stack-config/defaults/main.yml`,
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We are referring to this as the system user as we will be creating a user in
    WordPress later in the chapter. This user's details will also be defined in Ansible,
    so we do not want to get the two different users confused.
  prefs: []
  type: TYPE_NORMAL
- en: 'The task that uses these variables, found in `roles/stack-config/tasks/main.yml`,
    should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are not adding a key to the user this time as we don't want
    to be logging in to the user account to start manipulating files and other actions.
    This should all be done within WordPress itself or by using Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: NGINX configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to be using several template files for our NGINX configuration.
    The first template is called `roles/stack-config/templates/nginx-nginx.conf.j2`,
    and it will replace the main NGINX configuration deployed by the package installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The content of the file itself is pretty much the same as the initial file,
    except that we are updating `worker_processes` so that it uses the number of processors
    detected by Ansible when the `setup` module runs, rather than a hardcoded value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The task to deploy the configuration file is as you would expect and it should
    be placed in `roles/stack-config/tasks/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are notifying the `restart nginx` handler, which is stored
    in the following `roles/stack-config/handlers/main.yml`  file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we have the default site template, `roles/stack-config/templates/nginx-confd-default.conf.j2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: To help identify where the template files will be placed on the target host,
    I am naming them so that the full path is in the filename. In this case, the filename
    is `nginx-confd-default.conf.j2` and it will be deployed to `/etc/nginx/conf.d/..`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next two templates we are deploying are going into a folder that doesn''t
    exist. So, we first need to create the destination folder. To do this, we need
    to add the following to `roles/stack-config/tasks/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the following command will copy the files to the `global` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'As we are not making any replacements in the `nginx-global-restrictions.conf`
    file, we are using the `copy` module rather than `template` here; the file is
    stored in `roles/stack-config/files/` and has the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As we are setting `php.upstream` as a variable, we are using the `template`
    module to make sure that our configuration contains the correct value, the file
    `roles/stack-config/templates/nginx-global-wordpress_shared.conf.j2` contains
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The final part of the NGINX configuration is to copy the main configuration
    for the WordPress site. The task in `roles/stack-config/tasks/main.yml` looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As we are setting a few variables, such as the path and domain name, we have
    the following template file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using a few variables we haven't defined yet, `php.ip`
    and `php.port`. We are going to look at configuring PHP-FPM next.
  prefs: []
  type: TYPE_NORMAL
- en: PHP and PHP-FPM configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw in the last section, there are a few variables defined for PHP in
    `roles/stack-config/defaults/main.yml`, and these are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The first configuration task is to deploy the PHP-FPM configuration; this is
    what the template looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have a few replacements in this file. Starting at the top
    between the square brackets, we are defining the PHP-FPM pool name; we are using
    the content of the `wordpress_system.user` for this. Next up, we have the user
    and group we want our pool to run under; here, we are using `wordpress_system.user`
    and `wordpress_system.group`. Finally, we are setting the IP address and port
    we want our PHP-FPM pool to listen on by using the `php.ip` and `php.port` variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The task in `roles/stack-config/tasks/main.yml` to deploy the template looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The handler to restart PHP-FPM in **`roles/stack-config/handlers/main.yml`**
    is just:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The next task in `roles/stack-config/tasks/main.yml` uses the `lineinfile`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: What we are doing here is taking the content of `php.ini` and looping through
    it by looking for the value defined by the `regexp` key. Once we find the value,
    we are replacing it with the content of the `replace` key. If there are changes
    to the file, we are making a `backup` first, just in case. Also, we are using
    `backrefs` to ensure that if there is no matching regex in the file, then it will
    be left unchanged; if we didn't use them, the `restart php-fpm` handler would
    be called every time the playbook runs, and we do not want PHP-FPM to be restarted
    if there is no reason to.
  prefs: []
  type: TYPE_NORMAL
- en: Starting NGINX and PHP-FPM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our stack installed and configured, we need to start the two
    services rather than waiting until the end of the playbook run. If we don''t do
    this now, our upcoming role to install WordPress will fail. The two tasks in `roles/stack-config/tasks/main.yml`
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: MariaDB Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MariaDB configuration is going to closely match that of the last chapter,
    minus a few of the steps, so I am not going to go into too much detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default variables for this part of the role in `roles/stack-config/defaults/main.yml`
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are now using a nested variable, and we have removed root
    access on the host wildcard, the `%`, as the first part of the task in `roles/stack-config/tasks/main.yml`
    binds MariaDB to the localhost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'From there, we then start MariaDB, set the root password, configure the `~/.my.cnf`
    file, and then remove the anonymous user and test database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The template used for the `.my.cnf` file, which can be found in `roles/stack-config/templates/my.cnf.j2`,
    now looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This means that we will not need to pass the root username and password with
    each database-related task from where we copied the `.my.cnf` file.
  prefs: []
  type: TYPE_NORMAL
- en: SELinux configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final task of the role is to set HTTP in SELinux to be permissive; to do
    this, we have the following variable in `roles/stack-config/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The task in `roles/stack-config/tasks/main.yml` has a condition that runs if
    `selinux.http_permissive` equals `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We will be looking more at SELinux in a later chapter; for now, we are just
    allowing all HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress installation tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the roles that prepare our target Vagrant box completed, we
    can proceed with the actual WordPress installation; this will be split into a
    few different parts, starting with downloading `wp_cli` and setting up the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we progress, we should create the role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: WordPress CLI installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**WordPress CLI** (**WP-CLI**) is a command-line tool used to administer your
    WordPress installation; we will be using it throughout the role, so the first
    thing our role should do is download it. To do this, we need to download the following
    variables in `roles/wordpress/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'As you probably have gathered from the two variables, we are going to be downloading
    the file from `wp_cli.download` and copying it to `wp_cli.path`. The task in `roles/wordpress/tasks/main.yml`
    to do this looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are downloading the `.phar` file, moving it, and then setting
    permissions so that it can be executed by anyone logged in to the server—this
    is important as we will be running a lot of the installation commands as the `wordpress`
    user.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the WordPress database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next part of the role creates the database our WordPress installation will
    use; as per the other tasks in this chapter, it uses a nested variable, which
    can be found in `roles/wordpress/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The tasks in `roles/wordpress/tasks/main.yml` to create the database and user
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we are using the `mariadb.hosts` variable from the previous role.
    Now that we have the database created, we can make a start on downloading and
    installing WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading, configuring, and installing WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have everything in place to install WordPress, we can make a start,
    first by setting some default variables in `roles/wordpress/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our variables, we can start our download if we need to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the first task uses the `stat` module to check for the presence
    of an `index.php` in our system user's home directory, which is also the webroot.
    The second task uses the `shell` module to issue the `wp core download` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few arguments we should work through before moving on to the next
    task. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`args` and `chdir`: You can pass additional arguments to the `shell` module
    using `args`. Here, we are passing `chdir`, which instructs Ansible to change
    to the directory we specify before running the `shell` command we provide.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`become_user`: The user we want to run the command as. If we do not use this,
    the command will run as the root user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`become`: This instructs Ansible to execute the task as the defined user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next task in the playbook sets the correct permissions on the user''s home
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that WordPress is downloaded, we can start the installation. First, we
    need to check whether this has already been done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is no `wp-config.php` file, then the following task will be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our `wp-config.php` file created, with the database credentials
    in place, we can install WordPress. First, we need to check whether WordPress
    has already been installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the presence of the `ignore_errors` option, if WordPress
    is not installed, this command will give us an error. We are then using this to
    our advantage when registering the results, as you can see from the following
    task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Now we have a basic WordPress site installed, we can progress with installing
    the plugins and theme files.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress plugins and theme installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last part of our WordPress installation is downloading and installing the
    plugins and theme files we defined in the `wordpress.plugins` and `wordpress.theme`
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the tasks that install the plugins, so we don''t end up rerunning
    the task that installs the plugins. When we need to, we will be building a little
    logic into the tasks. First of all, we run a task to see if all of the plugins
    are already installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'If the plugins are not installed, then this task should fail, which is why
    we have the `ignore_errors` in there. As you can see, we are registering the results
    of the entire task, because if you remember we are installing several plugins,
    as `wp_plugin_installed`. The next two tasks take the results of `wp_plugin_installed`
    and use the `setfact` module to set a fact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are setting `wp_theme_installed_skip` to be `true` or `false`:
    if the fact is set to `false`, then the next task will loop through installing
    the plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'If we add another plugin to the list but leave the others in place, it will
    show an error, causing the plugin to be installed. We are going to be using this
    same logic to figure out whether the theme file we have defined as `wordpress.theme`
    needs to be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the plugins and theme installed, we can have a go at running
    our playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Running the WordPress playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the playbook and install WordPress, we need a few things, starting with
    the inventory file called `production`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it takes into account the updated IP address of the Vagrant
    box we defined at the start of the chapter. Also, we need the playbook itself;
    `site.yml` should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, start the Vagrant box by running one of the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Once your Vagrant box is up and running, we can start the playbook run with
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'When the playbook is first executed, you should see something like the following
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: As you can see during the playbook, we have fatal errors for the check to see
    whether we need to install WordPress, and also for the plugin and theme checks,
    as we have accounted for these in the tasks the playbook ran as expected and installed
    the software stack, WordPress, plugins, and theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rerunning the playbook gives us the following results for the sections we errored
    previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that WordPress is installed, we should be able to access in a browser by
    going to `http://192.168.50.5.nip.io/`. As you can see here, the theme we defined
    is running rather than the WordPress default theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ec278635-7e4c-4990-8332-6cc6f14e3c40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, if you go to `http://192.168.50.5.nip.io/wp-admin/`, you should be able
    to log in to WordPress using the username and password we defined:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Username: `ansible`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: `password`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once logged in, you should see a few messages about the plugins we installed
    during the playbook run needing to be configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7cc6369b-51f5-4525-ad38-0eada8f26699.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Feel free to have a play with the WordPress installation; also, you can remove
    the Vagrant box by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Then bring up a fresh copy and redeploy it using the commands at that start
    of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have reused a lot of the same principles we covered in the
    previous chapter and moved on to deploying a full application. What is good about
    this is that the process is both repeatable and just a single command.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have been targeting a CentOS 7 Vagrant box. If we ran our playbook
    against an Ubuntu Vagrant box, the playbook would give an error. In the next chapter,
    we will look at how we can target multiple operating systems using the same playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which fact gathered during `setup` module execution can we use to tell our playbook
    how many processors our target host has?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Using `backref` in the `lineinfile` module makes sure that no
    changes are applied if the regular expression is not matched.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain why we would want to build the logic into the playbook to check whether
    WordPress is already installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which module do we use to define variables as part of a playbook run?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which argument do we pass to the `shell` module to have the command we want
    to run executed in a directory of our choosing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Setting MariaDB to bind to `127.0.0.1` will allow us to access
    it externally.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the theme of your WordPress site to one of your choice; see [https://wordpress.org/themes/](https://wordpress.org/themes/)
    for some options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find out more information on the technologies we have covered in this
    chapter at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NGINX**: [http://nginx.org/](http://nginx.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WordPress**: [https://wordpress.org/](https://wordpress.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WP-CLI**: [http://wp-cli.org](http://wp-cli.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CMS statistics from BuiltWith**: [https://trends.builtwith.com/cms](https://trends.builtwith.com/cms)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The WordPress NGINX Codex**: [https://codex.wordpress.org/Nginx](https://codex.wordpress.org/Nginx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Sydney WordPress theme**: [https://en-gb.wordpress.org/themes/sydney/](https://en-gb.wordpress.org/themes/sydney/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The project pages for the plugins we installed can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jetpack**: [https://en-gb.wordpress.org/plugins/jetpack/](https://en-gb.wordpress.org/plugins/jetpack/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WP Super Cache**: [https://en-gb.wordpress.org/plugins/wp-super-cache/](https://en-gb.wordpress.org/plugins/wp-super-cache/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yoast SEO**: [https://en-gb.wordpress.org/plugins/wordpress-seo/](https://en-gb.wordpress.org/plugins/wordpress-seo/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wordfence**: [https://en-gb.wordpress.org/plugins/wordfence/](https://en-gb.wordpress.org/plugins/wordfence/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NGINX Helper**: [https://wordpress.org/plugins/nginx-helper/](https://wordpress.org/plugins/nginx-helper/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
