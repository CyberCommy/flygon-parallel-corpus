- en: Twitter Clone Using OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will have a look at how easy it is to create a basic Twitter
    clone using ASP.NET Core MVC. We will be performing the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your application on Twitter using Twitter's Application Management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ASP.NET Core MVC application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading your Home Timeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting a tweet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can imagine, Twitter functionality does not come as standard in .NET
    (let alone in .NET Core).
  prefs: []
  type: TYPE_NORMAL
- en: Please be aware that you will need to create a Twitter account in order to perform
    the tasks in this chapter. You can do this by going to [https://twitter.com/](https://twitter.com/)
    and registering.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily for us, there are many dedicated and passionate developers out there
    who give their code away for free. You will usually find their code hosted on
    GitHub, and that is just the place that we will be looking at for a bit of code
    to integrate into our ASP.NET Core MVC application in order to give it that Twitter
    functionality. This chapter is by no means an endorsement of the particular Twitter
    library we're going to use. However, this library is by far one of the best I
    have used. It is also (at the time of writing) constantly being updated.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at Tweetinvi.
  prefs: []
  type: TYPE_NORMAL
- en: Using Tweetinvi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Point your browser to [https://github.com/linvi/tweetinvi](https://github.com/linvi/tweetinvi).
    The description of this library says it all:'
  prefs: []
  type: TYPE_NORMAL
- en: Tweetinvi, the best Twitter C# library for the REST and Stream API. It supports
    .NET, .NETCore, UAP and Portable Class Libraries (Xamarin)...
  prefs: []
  type: TYPE_NORMAL
- en: In other words, this library is exactly what we need to create our Twitter clone
    application. Tweetinvi is really well documented and has an active community that
    supports it.
  prefs: []
  type: TYPE_NORMAL
- en: The ASP.NET Core MVC Twitter clone application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a fully-fledged Twitter clone application is a lot of workâ€”more work
    than this chapter would allow me, I'm afraid. I will therefore just illustrate
    how to read the tweets in your main feed (the tweets of the people you follow
    on Twitter). I will also show you how to post a tweet from the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will be dispensing with all the fancy UI elements in this application, and
    instead will give you a fantastic basis to carry on developing a fully-fledged
    Twitter clone. You can consider adding the following functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: Deleting tweets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retweeting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following someone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfollowing someone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending private messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing profile information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a lot of additional functionality you can add; feel free to build in
    any missing functionality you would like to see. I for one would like a better
    way to curate and save tweets that I find interesting.
  prefs: []
  type: TYPE_NORMAL
- en: I know that some of you might wonder why liking a tweet won't suffice, and here
    is my reason why. Liking tweets has lately become a shorthand way for someone
    to let another person know that they have seen their tweet. This is especially
    true when you are mentioned in a tweet. Instead of just replying (especially to
    rhetorical questions), Twitter users simply like the tweet.
  prefs: []
  type: TYPE_NORMAL
- en: Liking a tweet is also not a curation tool. Everything you like is found under
    your likes. There is no way to differentiate. Aha! I hear some of you say, *What
    about moments?* Again, moments live on Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Think moments, but moments that come to you. Anyway, there are a lot of improvements
    that one can make to a custom Twitter clone such as this to truly make it your
    own. For now, let's start with the basics.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your application on Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can begin creating our Twitter clone, we need to register it on the
    Twitter Application Management console.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the Application Management console, point your browser to [https://apps.twitter.com](https://apps.twitter.com):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Sign in link, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b1c9c978-2f75-45c7-8715-45b3c2f095d2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Sign in with your Twitter credentials on the login screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22c606a1-74a5-4827-9963-efe62080246c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have created any applications before, you will see them listed. All
    the apps that you create are listed under your Twitter Apps section. Click on
    the Create New App button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d7eb52c-076c-4a7d-935f-d4b8495724cc.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will now see the Create an application form. Give your application a suitable
    Name and Description. Provide a Website for your application, and lastly, supply
    a Callback URL value. I have simply used `http://localhost:50000/` and I will
    show you how to configure this in your application later. This is shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/92af6414-677f-436c-86cf-015bebd7a280.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If localhost gives you problems during the callback, try using `127.0.0.1` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the option that you understand the Twitter Developer Agreement and then
    click on Create your Twitter application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5df80045-da9a-437f-9f7f-7af9c50f89f5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you will see a summary of the Application Settings you just created.
    At the top of the screen, click on the Keys and Access Tokens tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/87dd3be5-a457-40ef-9817-72f388a910ee.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will take you to your Application Settings, where the Consumer Key and
    Consumer Secret is provided. Be sure to make a note of these keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77855b94-ce50-4fa7-8c31-6711470f6aa7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the bottom of the page, you will see a button called Create my access token.
    Click on this button. This creates the token that will allow you to make API calls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54daa0fb-d530-48b0-bccb-bbb4db1cf460.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the token is generated, the Access Token and Access Token Secret are
    displayed for you. Make a note of these too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5404e2dc-a57b-47cf-82db-c9c2ac6f079d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That is all there is to registering your application on Twitter's Application
    Management console. The next thing we need to do is create our ASP.NET Core MVC
    Application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ASP.NET Core MVC Application and adding the NuGet package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now begin to create the ASP.NET Core MVC application and add Twitter
    functionality to it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio 2017, create a new ASP.NET Core Web Application. I just called
    my application the same as what I called it when I registered it on Twitter. Click
    on the OK button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4c2185b-49f0-4bc4-9a45-66f6060b0404.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, ensure that you have the Web Application (Model-View-Controller)
    template selected and that you have selected ASP.NET Core 2.0 from the dropdown.
    I mention this explicitly, because I get feedback from readers where it turns
    out that they never selected ASP.NET Core 2.0\. Click on the OK button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/023ecb2a-d397-4638-9e79-044f588fa480.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When your project has been created, it will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3f46e8e-0d10-4635-895c-dd17082fac13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now want to go and grab the Tweetinvi NuGet package, so right-click on the
    project and select Manage NuGet Packages from the context menu, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0de4387c-d49e-44df-9c0d-5d8b202505bc.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Browse tab, search for `tweetinvi` and select the project by the developer
    called Linvi. Click on the Install button to add it to your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca830e52-68f5-4bf3-9da2-7e3370071284.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After a short while, the progress will display finished in the Output window
    of Visual Studio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a1551d6a-9c59-4e23-8b26-e89cc659f32f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next thing we want to do is set our URL to the callback URL set in the
    Twitter Application Management console earlier. To do this, right-click your project
    and click on Properties from the context menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/92027103-c226-424b-b6ae-37f7a05d41fe.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Debug tab and then enter the callback URL in the App URL field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d68b5fc-75e7-4702-88d2-a0b4f0aae335.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you set the `localhost` portion of the callback URL to `127.0.0.1` in the
    Application Management console, you need to set it here to `127.0.0.1` too.
  prefs: []
  type: TYPE_NORMAL
- en: Save your settings and return to your code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From a setup perspective, this should be all you need in order to start writing
    your code and wiring everything up. Let's start doing that next.
  prefs: []
  type: TYPE_NORMAL
- en: Let's code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the code for this project will be available on GitHub. Point your browser
    to [https://github.com/PacktPublishing/CSharp7-and-.NET-Core-2.0-Blueprints](https://github.com/PacktPublishing/CSharp7-and-.NET-Core-2.0-Blueprints)
    and grab the code to work through it as you read through the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the classes and settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing I want to do is create a class that will store my settings.
    For this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `Classes` and, in this folder, create a class called
    `CoreTwitterSettings`. Then, add a second class called `TweetItem` to the `Classes`
    folder (we will be using this class later). While you are at it, create another
    folder calledÂ `css`,Â which we will be using in a minute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you have done this, your project will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aadebeb3-b567-4a58-bdfe-eb62b292f4ed.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `CoreTwitterSettings` class and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing we want to do is locate our `appsettings.json` file. This file
    will be in the root of your project, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a68f93de-f0da-4575-a7bf-5179b708fdee.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on the `appsettings.json` file to open it for editing. The default
    content of the file should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Modify the file to include the settings you want to store. The `appsettings.json`
    file's purpose is to store all of your application's settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add your Consumer Key and your Consumer Secret keys to the file. Also, note
    that I have used a setting for the base URL, which is the Callback URL set earlier.
    This is sometimes handy to have around in a setting. I have also created a setting
    called `TweetFeedLimit` to limit the tweets returned to the home timeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your Consumer Key and Consumer Secret will definitely differ to the values in
    my example. So, be sure to change these accordingly in your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have modified your `appsettings.json` file, it will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you have a look at the `CoreTwitterSettings` class, you will see that it
    slightly resembles the JSON in the `appsettings.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your Visual Studio solution, locate the `Startup.cs` file and open that
    for editing. You will see that Visual Studio 2017 has already added a lot of boilerplate
    code to this class for you already. Take special note of the `ConfigureServices`
    method. It should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Since ASP.NET Core 1.1, we have been able to use `Get<T>`, which worked with
    entire sections. To make the settings available in our ASP.NET Core MVC application,
    change the code in this method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that we are getting the `CoreTwitter` section defined in the
    `appsettings.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the TweetItem class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `TweetItem` class is simply going to contain the URL to a particular tweet.
    It isn''t a very complex class at all, but its usefulness will become clear later
    on in the chapter. For now, just add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The URL it will store will be the URL to a particular tweet.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to use the `<blockquote>` HTML tag for a tweet, you will want to add
    a CSS file to your `CSS` folder. In our example, we will not be using it, but
    as you build out your application even further, you would want to use this CSS
    to style your `<blockquote>` tweets.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are just playing around for now, and don''t intend on building this
    application any further after completing this chapter, you can skip this section
    on adding the CSS file. If you want to go further with this application, then
    read on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click the `css` folder in your solution and add a new item to it. Call
    the file `site.css` and click on the Add button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/160d4c0c-075c-4e35-a9dd-5a2538fb490a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Delete the contents of the `site.css` file and add the following `css` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To complement this section, you can read through the Twitter Developer Documentation
    at [https://dev.twitter.com/web/overview/css](https://dev.twitter.com/web/overview/css)
    and have a look at the CSS overview.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now need to start adding our controllers. Controllers are responsible for
    responding to requests made to your application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To the `Controllers` folder, add another controller called `TwitterController`.
    This controller will be responsible for composing a new tweet and for publishing
    a new tweet. We will get back to this controller later on. For now, just create
    the class. After you have added it, your solution should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf5d9ef8-381a-4114-b7dd-ddfc01a724b4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, Visual Studio hasÂ `HomeController`Â added for you when you created
    your ASP.NET Core MVC application. OpenÂ `HomeController` and look at the contents
    of the class. Be sure to add the following `using` statements to your `HomeController`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first thing I want to do is make my application settings stored in the `appsettings.json`
    file available in my class. You will remember that we modified the `Startup.cs`
    file to inject the settings at startup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the `HomeController` class,Â add the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Directly underneath that line, add a constructor that brings the `CoreTwitterConfiguration`
    class into scope for our controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now modify the `Index` action of the `HomeController`Â class to check
    whether we have an access token or an access secret. You will remember seeing
    that we left these blank in the `appsettings.json` file earlier. If these are
    empty, then the user has not been authenticated and we then redirect the user
    to the `AuthenticateTwitter` action onÂ `HomeController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let's now go and create the `AuthenticateTwitter` action. For this, we need
    the consumer credentials, which we copied from our Twitter Application Management
    console earlier and added to our `appsettings.json` file. We then made these settings
    available throughout our application; now we can see the benefit of having our
    settings stored in the `appsettings.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `AuthenticateTwitter` action, we simply pass the `ConsumerCredentials`
    object the consumer key and consumer secret. When we are validated, we are routed
    to the `ValidateOAuth` action, which we will create next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we have been redirected to Twitter to authenticate the user
    via OAuth and have been redirected back to our ASP.NET Core application via the
    Callback URL. The code is really straightforward. One thing to note though is
    thatÂ `userCredentials.AccessToken` andÂ `userCredentials.AccessTokenSecret` are
    returned from the `userCredentials` object. I just added these to the configuration
    settings for the application, but in reality, you might want to store these elsewhere
    (such as encrypted in a database). This will then allow you to use the application
    without having to authenticate yourself every time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Seeing as this controller action is called `ValidateOAuth`, let's go and create
    a view with the same name so that we can route to a page that informs the user
    that they have been authenticated successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Views and traditional HTML pages are not the same thing. The pages of the ASP.NET
    Core MVC application are represented by views. As I pointed out earlier, controllers
    receive a request and handle that request. The controller can redirect you to
    another controller action, but it can also return a view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now go ahead and create the views for our application. Expand the `Home`
    folder and add a new view called `ValidateOAuth` to the `Home` folder. Just create
    these views without models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93d5351d-0ec7-4612-bab1-9243680d8d64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add another folder to the `Views` folder called `Twitter` and add two views
    to that folder called `ComposeTweet` and `HomeTimeline`. After you have done that,
    your application will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0176b51a-53c5-4631-8feb-6a76996d894d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `ValidateOAuth` view and add the following markup to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Having a look at the markup, you will notice that all it does is notify the
    user of the authentication status. If authenticated, the user can check out their
    home feed, which is all the tweets of the people they follow on Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: 'I want to call your attention here to the way I call theÂ `GetHomeTimeline`Â action
    on the `Home` controller. You will see in the button link, the following `href`
    exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This is one way to route the user to an action on a controller. A little later,
    I will show you another nicer method to do this.
  prefs: []
  type: TYPE_NORMAL
- en: So, we are allowing a successfully authenticated user to view the tweets of
    the people they follow by clicking on the `Home` link. This calls an action called
    `GetHomeTimeline`. Let's go and modifyÂ `HomeController` to add this action.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying HomeController
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Swing back toÂ `HomeController` and add another action called `GetHomeTimeline`.
    This then takes the user credentials to find the home timeline tweets of the authenticated
    user. The user credentials consist of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Consumer key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consumer secret
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access secret
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will notice that these are all coming from the `CoreTwitterConfiguration`
    object. The twitter feed only consists of the limit set in the settings. I set
    mine to `10`, so this should only contain 10 tweets. For every tweet in the feed,
    I extract the URL of the tweet and add it to a list of type `TweetItem` (the class
    we created earlier). If everything runs smoothly, I route to the `HomeTimeline`
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Add the following code to your `GetHomeTimeline` action.
  prefs: []
  type: TYPE_NORMAL
- en: You should be getting an error on the code that references the `TwitterViewModel`
    instance called `homeView`. We will rectify this next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your action should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned earlier, you will see some errors. This is because we don't yet
    have a model called `TwitterViewModel`. Let's create that next.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the TwitterViewModel class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `TwitterViewModel`Â class is just a really simple class that takes a collection
    of `TweetItem` as a property called `HomeTimelineTweets`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding a model to our project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click your `Models` folder and add a class calledÂ `TwitterViewModel`Â to
    the folder. Then, add the following code to that class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Also, add the `using` statement `using CoreTwitter.Classes;` to the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is all that is needed. As you expand the `TweetItem` class later on (if
    you decide to add functionality to this app), this model will be responsible for
    passing that information through to our view for use in the Razor.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the HomeTimeline view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thinking back to the `HomeController` action we created earlier called `GetHomeTimeline`,
    you will remember that we routed to a view called `HomeTimeline`. We have already
    created this view, but now we need to add some logic to it to render the tweets
    in our home timeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'We, therefore, need to add a view for our home timeline, which we will add
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `HomeTimeline.cshtml` file and add the following markup to the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The first thing you need to notice is the `@model TwitterViewModel` statement
    at the top of the file. This allows us to use the values stored inside that model
    in our view. What our view does is loop through the collection of tweets contained
    in the `HomeTimelineTweets` property of the model and build up a list of tweets
    to display on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing I want to draw your attention to is the tag helpers `asp-controller`
    and `asp-action` on the Tweet link. This is a cleaner way of routing to a specific
    action on a specific controller (as opposed to doing it in the `href` as we saw
    in the `ValidateOAuth` view earlier).
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, you might be wondering what the `widgets.js` reference is doing there.
    Well, I didn''t want to style my tweets myself, so I decided to use Twitter to
    do it for me:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the markup, head over to [https://publish.twitter.com/#](https://publish.twitter.com/#):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/62b13e2c-04bd-441d-9a90-355c75e29b6e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the dropdown, selectÂ A Tweet as the option of the thing you are trying
    to embed, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b4af95e-1794-4878-a582-d45f1ebc3fbf.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then be given some sample code to use. You can just click on the Copy
    Code button. This is just the way I did it, but you are welcome to go your own
    way without going through this step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb2c4055-8b95-41f4-8ce2-2c0c8ef713cc.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code that you copied might look something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Take that and modify it to be styled according to your page. Do this in a loop
    so that you can output all the tweets individually below each other. The code
    you should end up with is just:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It just contains the link to the Twitter URL.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the TwitterController class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we come to the part where we allow the user to send a tweet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the `TwitterController` class and add two actions called `ComposeTweet`
    and `PublishTweet`. The `TwitterController` class is really simple. It just contains
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `ComposeTweet` action simply returns the user to a view where they can compose
    a tweet. You will remember that we created the `ComposeTweet` view earlier. The
    `PublishTweet` action is just as simple. It takes the text of what I am tweeting
    and passes it to the `PublishTweet` method of the `Tweetinvi.Tweet` class. After
    that, it makes sense to redirect back to the home timeline where we will expect
    to see the tweet we just created.
  prefs: []
  type: TYPE_NORMAL
- en: The last task we need to complete is to modify the `ComposeTweet` view. Let's
    do that next.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing upâ€”the ComposeTweet view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To finish up, we use the `ComposeTweet`Â view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the `ComposeTweet` view and add the following markup to the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that once again, I am making use of Tag Helpers to define the
    controller and action to call. Only this time, I am doing it on the `<form>` tag.
    At this point, you are ready to run your application for the first time. Let's
    have a look at how it performs.
  prefs: []
  type: TYPE_NORMAL
- en: Running the CoreTwitter application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perform a build of your project to make sure everything builds correctly. Then,
    start debugging your application. Because you have not been authenticated, you
    will be redirected to Twitter to be authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a page that I am sure you are used to seeing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Many web applications use OAuth for authentication. To continue, click on the
    Authorize app button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7c31e5d1-519d-4726-a8f2-996748b2be0b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then see a redirection notice. This could take a few moments to redirect
    you. It all depends on your internet connection speed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/16d5aebc-76d9-43e1-b267-30d566c50e9c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have been redirected to your CoreTwitter application, you will see
    the OAuth Authentication Succeeded message displayed. Following that, click on
    the Home button to go to `HomeTimeline`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae259f22-b22d-4cef-b8f6-4e87510b8b07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`HomeController` jumps into action as the `GetHomeTimeline` action is called
    and redirects you to the `HomeTimeline` view. You will see your tweets loaded
    in the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee698277-a488-4be4-a2f5-1246e1641e58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you scroll through the tweets (remember, I only returned 10), you will see
    that there are videos included that will play when you click on the play button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a119557-0548-44a6-a578-f49a8673137b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Media-rich tweets give you previews on articles too, and you will also see
    the plain old text tweets in your timeline. All the links are fully active and
    you can click on them to view the article:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8d90cfd-55c3-4dcf-84e5-3637faca8b6a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you scroll right to the bottom of the timeline (this should have been at
    the top, but I told you that I wasn''t going to do much around the UI), you will
    see the Tweet button. Click on that to compose a new tweet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe82dbad-3609-4813-95ea-095decbb86f8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the `ComposeTweet` view, you can enter anything into the tweet field and
    click on the Submit QueryÂ button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1ddd9137-2214-4353-8c49-cae23fbc20b2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Your tweet is then posted on Twitter and you are redirected to the home timeline
    again, where you will see your newly posted tweet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e99f2e9-4d04-448f-badb-dba999404f06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And, just for the sake of it, you can view that specific tweet by going to
    the following URL: [https://twitter.com/DirkStrauss/status/973002561979547650](https://twitter.com/DirkStrauss/status/973002561979547650).'
  prefs: []
  type: TYPE_NORMAL
- en: Yes, it really is 3:07 AM right now. `#thatisall`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Looking back at the chapter, we really did a lot. I encourage you to go through
    the code on GitHub as well as the Tweetinvi documentation available at [https://github.com/linvi/tweetinvi](https://github.com/linvi/tweetinvi).
    In this chapter, we saw how to register our application on Twitter's Application
    Management console. We saw that we could easily add Twitter functionality to our
    ASP.NET Core MVC app by using a NuGet package called Tweetinvi. We had a look
    at routing as well as controllers, models, views, and storing the settings in
    the `appsetting.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: We were able to authenticate ourselves with OAuth and read the last 10 tweets
    from our home timeline. Lastly, we were able to post a tweet and view it in our
    home timeline.
  prefs: []
  type: TYPE_NORMAL
- en: There is still a lot of work that can be done inside of our Twitter Clone application.
    I hope that you have found it an interesting chapter and hope that you continue
    to work on it to improve it for your specific workflow and make it your own.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be taking a look at Docker and what it means to
    you as a software developer. We will also see how to run our ASP.NET Core MVC
    application inside a Docker container.
  prefs: []
  type: TYPE_NORMAL
