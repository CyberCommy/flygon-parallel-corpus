- en: Chapter 8. Working with Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Removing text from a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using script parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding a loop in a script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locking a file for only one use at a time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting introduced to Perl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing how to write scripts will allow you to run your system(s) much more
    efficiently. Script writing is easy; you don't need a degree in Computer Science
    or anything like that. Even better, everything you need to create and run scripts
    is already available on your Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: The main thing to remember while programming is to think like the computer does.
    Try to understand what each step does. If you run into a problem, look at the
    line in question carefully. The computer will do exactly what you tell it to do,
    every time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be writing `Bash` shell scripts in these examples. It is good programming
    practice to begin each script with a line indicating which shell is being used.
    This is done with a line that starts in the first column such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Use a text editor to create scripts. I have seen people attempting to use a
    word processor for script writing but I don't recommend it. Word processors are
    cumbersome and always seem to insert bad characters into the file (even though
    they claim not to). If you don't already know by now, learn how to use `EMACS`,
    `vi`, or some other text editor (see [Chapter 3](ch03.html "Chapter 3. Files and
    Directories"), *Files and Directories*). You will be glad you did.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to execute the script as a command, you need to change the permissions
    on the file. For example, if you have created and saved a text file named `mycmd`,
    you can make it executable by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you have not done much script writing, to be on the safe side, I would suggest
    using a user account when creating and running scripts. When you get comfortable
    (or if you already are), you can run as root. You will probably have to at some
    point, especially if you are a systems administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Several script examples have been given in the following paragraphs. These should
    give a good idea of what can scripts be used for and how to write them.
  prefs: []
  type: TYPE_NORMAL
- en: Removing text from a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A script can be written to do almost anything you can imagine. The following
    is one such example.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is the listing for a script that can be used to cut the line numbers
    off the examples. You can then run them as is on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Script 1 – removing line numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's discuss what the previous given lines do.
  prefs: []
  type: TYPE_NORMAL
- en: The first line tells the OS what shell this script is for.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 2 has a `#` in the first column. This is called a comment line. Here I
    have the date the script was written.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `$1` variable is the first parameter you gave after the name of the command.
    If no parameter is given, it will be equal to the empty string (`""`). The `Usage`
    text will be displayed and the script will exit at line 8.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a parameter was indeed given, this script assumes it's a filename and so,
    processing will continue with line 10.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 10 uses the `cat` command to stream the contents of the file. In this case,
    the stream is being piped to the `cut` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `cut` command would normally keep the first five characters of each line
    and discard the rest. However, since I used the `--complement` flag, it does just
    the opposite. Many Linux commands have this option or something similar to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you would like to try this on your system, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a text editing session, for example `vi removelines.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put `vi` into Insert mode by pressing *I.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the text of the script from the book and paste it into `vi`. Save the
    file and exit: `wq`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then make it executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If all went well, the usage screen should appear. You can now use this script
    on the rest of the examples in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using script parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we show how to count and show the number of parameters given to a script.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the script listing:'
  prefs: []
  type: TYPE_NORMAL
- en: Script 2 – parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You already know what lines 1 to 3 do. The `$#` built-in variable contains the
    number of parameters that were given to the script. In line 4, we set the variable
    `N` to that value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 5 displays the value of `N`. Note that to access a variable, you must precede
    it with a `$` character.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In line 6, we test `N` to see if any parameters were given. If not, we display
    the `Usage` message and exit at line 8.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 10 is an example of a `for` loop. Note the syntax, and don't forget the
    `done` command at the end of the loop. Note that `$*` is a built-in variable that
    contains a list of all the parameters given to the script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In line 11, we display the value of the `i` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make this an executable script on your system by following the example in the
    previous section with the only change in its naming as `parameters`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run it: `parameters` (you may need to run this as .`/parameters` on your system).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the `Usage` message. Now run it with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It should display the number 3 and then each parameter on a line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try it with some other numbers. Also try some wildcard characters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Variables require a bit more explanation. For example, the following are numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You test numbers in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is another case where it helps to remember that it's backwards. Use letters
    such as `-eq` to test numbers, and `=` and other numeric operators to test strings.
  prefs: []
  type: TYPE_NORMAL
- en: Coding a loop in a script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our previous scripts were commands that ran quickly to completion. Here is an
    example of a script that runs until you decide to terminate it. Note that if no
    parameters are required, a `Usage` section is probably not needed (but be sure
    to state what the script does in the comment section).
  prefs: []
  type: TYPE_NORMAL
- en: This script monitors the state of the network connection by pinging the provider
    once a minute. Failures are logged to a file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the program listing:'
  prefs: []
  type: TYPE_NORMAL
- en: Script 3 - loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Line 4 is your provider's IP address or domain name. For this example, I used
    my `bigtwo` machine. Note that this variable could instead be placed in your `.bashrc`
    file (see [Chapter 1](ch01.html "Chapter 1. Using the Terminal / Command Line"),
    *Using the Terminal / Command Line*). That way you would only have to change it
    in one place if you get a new provider in the future.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 5 clears the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 6 might look a little strange. Yes, that is what is known as an infinite
    loop. However, the script can still be terminated by pressing *Ctrl* and *C*,
    by issuing a kill command to it, or by having it watch for a file (more on that
    later).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In line 7, remember that a `while` statement needs a statement after it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 10 uses the `ping` command. The `-c 1` variable tells it to ping only once.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 11 saves the error code from the previous command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ping` command returns `0` if there are no errors. In case errors are present,
    line 14 appends the system date to the `log1.txt` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 15 then appends the text to the log file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 17 waits for 60 seconds and then the loop starts the back up again at line
    6.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have been running this script since January 2007\. I have used the `log1.txt`
    file on more than one occasion to convince my provider to improve their service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the script running on my Fedora 17 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3008OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to run this script:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the file as in the previous sections. You may name it whatever you want,
    as long as it does not conflict with another script or program. I named mine `loop1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal on your system. I suggest making it rather small as in the previous
    screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You do not need to be root to run this script. So, simply type the name you
    gave it to start it up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remember that this script is in a loop; it will run until you terminate it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From time to time you should look at the `log1.txt` file to see how reliable
    your Internet connection is. Note that if your connection goes down a lot, this
    file may get very large.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scripts such as this one are used quite frequently, especially when performing
    system administration duties to monitor the resources of the network.
  prefs: []
  type: TYPE_NORMAL
- en: One word of caution, use services such as `ping` with care. For example, do
    not ping your provider an excessive number of times. Once a minute is fine. When
    developing a script like this, use a local ping address for testing until you
    get it just right.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up your system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automating tasks is what makes scripts really powerful. You can spend some time
    getting a script just right and then let it do its thing. I easily have at least
    ten scripts running on each of my Fedora systems right now.
  prefs: []
  type: TYPE_NORMAL
- en: Here's what I call my *poor man's* backup utility. In the past, I have tried
    some *store-bought* programs only to be disappointed with the quality of the software.
    There's nothing worse than needing your backup files and then discovering there
    aren't any! This script is called by a `cron` job every night at 3 a.m. We cover
    cron in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to try and use this script, be sure you understand what is going
    on. The backup directories must be created manually first, along with the `filenum1`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: This script, as written, must run as root.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I use the following script to make a backup copy of my files:'
  prefs: []
  type: TYPE_NORMAL
- en: Script 4 – making backups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Line 4 changes to my backup directory. You would want to change this on your
    system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 7 appends the current date to the `datelog.txt` file. I check this from
    time to time to make sure everything looks okay.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 8 looks really weird; what are those backticks for? The `filenum1` file
    contains a number which is the next directory to copy the backup files to (7 in
    all). As you know, if you were to `cat` this file, it would display its contents
    on the screen. Well, the backticks mean to run this command, but place the resulting
    expression into a variable. This sounds complicated, but you will get used to
    it very quickly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The variable `T` now has the number of the next directory to use. Line 9 uses
    the `expr` command to evaluate the expression and add `1` to `T`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 10 checks to see if `T` is greater than `7`, and if so, sets it back to
    `1`. Yes, I make seven backups, one for each day of the week. Call me paranoid!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 13 copies the new value of `T` back to `filenum1` for the next use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 14 sets up the `TDIR` variable, which contains the backup directory we
    are going to copy the files to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 16 changes to `TDIR`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 17 displays the current working directory. I had put this in when writing
    this script and got used to it being there, so left it in. This is completely
    optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 18 removes the previous compressed backed up files. I strongly suggest
    you comment this line when first trying out this script. Then, after being sure
    that everything is okay, you can put it back in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 20 sets up a date timestamp. Again, the backtick operators are being used
    to put the value of date into a variable (`X` in this case).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 22 changes to `/`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lines 23, 24, and 25 back up the directories `/lewis`, `/temp`, and `/root`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 26 changes to `/home`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 27 tars up my `/home/guest1` directory. The parameters on `tar` tell it
    which directories to exclude from the archive. See the `tar man` page for more
    information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 28 displays the script version, line 29 goes back to the backup directory,
    line 30 displays the directory name, and line 31 shows the file listing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This script is more of an example than a true backup program, but it's a good
    place to start from. The real one I use is similar to this, but also copies the
    files to an external USB drive and to another computer off-site (using unattended
    `scp`). Whenever I want to create a new Linux machine, I just copy these files
    to it and extract them, configure and source my `.bashrc`, and I am ready to run.
  prefs: []
  type: TYPE_NORMAL
- en: Locking a file for only one use at a time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This comes up often enough for me to mention it. There may be times when you
    want to edit a file in a terminal by running a simple script. However, if the
    file has already been opened in another terminal, there is the possibility that
    updates made in one session will get overwritten in the other. The following script
    should help prevent that from occurring.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is an easy way to prevent the same file from being edited by more than
    one terminal at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: Script 5 – file locking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Line 3 sets the variable `FN1` to the name of the lock file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 4 checks to see if the lock file exists. If it does, it displays the contents
    of the lock file and exits the script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We get to line 9 if the lock file does not exist. The lock file is now created
    by redirecting the output of the `tty` command to the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In line 11, you can perform whatever action(s) you desire. In my case, I edit
    `/tmp/todo.txt` here using `kw`, my text editor. Even after the editor session
    is closed, the processing of the script continues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 12 removes the lock file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is simple and works really well. I use a version of this script to edit
    several of my important files. The `todo` script can be run from anywhere on my
    system and the `todo.txt` file is displayed in my text editor. If I go off to
    another session or window later while the file is still being edited, and try
    to run `todo` again, it will not allow the edit. It also tells me if `tty` is
    in the original session. This can help me find it again more quickly, which is
    very useful as I always have a lot of workspaces and terminals open.
  prefs: []
  type: TYPE_NORMAL
- en: Getting introduced to Perl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perl is a programming language that can be used for text manipulation, web development,
    network programming, system administration, development of GUIs, and a whole lot
    more. It was designed to be easy to use and efficient, and you can use either
    a traditional procedural or object oriented approach in your scripts. Perl also
    has a rather large list of third-party add-on modules that give it even more functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will cover just the very basics of Perl. Most typical Linux
    systems come with it and the documentation already installed. To see a brief introduction,
    run `perldoc perlintro` on your system. The Perl introduction should come right
    up.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to run a Perl script, you can use the following Perl command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `.pl` parameter is the usual extension given to Perl scripts. You can also
    place the path to Perl in the script similar to how we did with `bash`. First
    run `which perl` to see where Perl is located and then put that in as the first
    line of your script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: That's the correct path on Fedora. As with `bash` scripts, use a text editor
    to create them and use `chmod 755 filename.pl` to make it executable. Now, you
    can just type the name of the command to run it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a small Perl script I wrote when I was first starting out
    learning the language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Line 1 tells the shell which interpreter to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 3 tells the compiler to be rather severe with the syntax. Always use this
    line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 4 says to show all warnings. Always use this too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lines 5 to 9 are a subroutine. Line 7 puts the first parameter to the subroutine
    into the variable message. Line 8 displays it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 10 clears the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 11 tells us what this script is supposed to be. Note the `\n` parameter
    at the end of the line. This stands for newline, and signifies continuing the
    next print output on to the next line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 12 sets the variable name to `Jim`. Note the `$` symbol in front of name.
    Don't forget it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 13 displays the variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 14 creates an array of numbers. Note the `@` character.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 15 displays the first element in the array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 16 displays the last element by using the special Perl syntax of `$#numbers`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 17 checks to see if element `0` really is equal to `23` or not. Note the
    double equal sign.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 21 creates the variable `count` and sets it to `0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 22 is another special Perl convention. The `foreach` command means to traverse
    through the array one element at a time. This is a very handy feature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 24 shows how the special `$_` construct works to display each element of
    an array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 25 increments the count by `1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next lines are a way to handle files in Perl. It attempts to open the `input.txt`
    file for reading and `output.txt` for writing. The `input.txt` file must exist
    or else the program will error out and stop right here. The contents of `input.txt`
    are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Line 30 opens the output file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lines 31 through 35 read each line from `input.txt` and write it to `output.txt`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lines 36 and 37 close the files. Don't forget this step in your scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 38 uses the subroutine we created earlier to display a message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 39 creates and sets the `key` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 40 resets the `count` variable back to `1` again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 41 starts a `while` loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lines 43 through 46 are a way to read a key from the keyboard in Perl. If this
    looks convoluted to you, I couldn't agree more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remaining lines are self-explanatory. When the user presses `q` to quit,
    the `count` variable is increased to `10000`. This causes the `while` loop at
    line 41 to finish early, effectively ending the script. You could have instead
    used a loop control variable here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the previous script running on my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3008OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although this is an extremely trivial script, you can do an incredible amount
    of things with Perl. Many years ago, when I was first starting out with home computers,
    there was a text-mode game we could play based on Star Trek. I obtained a copy
    of this game in BASIC and eventually rewrote it in C. A few months ago, I decided
    to rewrite it again, this time in Perl. It's not done yet, probably because I
    am too busy writing this book, but it is getting there.
  prefs: []
  type: TYPE_NORMAL
- en: Good books on Perl should be easy to locate. I have bought a few and find them
    to be very valuable as I attempt to learn it in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: There are several hundred standard Linux utilities that can be used standalone
    or in scripts. The following is a short list of some of the most common ones.
    Whenever you need to perform any task, check here to see if you can incorporate
    some of the given commands into your script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following utilities are located in `/bin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`awk`, `gawk`: These are used for pattern scanning and processing language'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`basename`: It is used to strip directory and suffix from filenames'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bash`: It is a GNU bourne-again shell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cat`: It is used to concatenate files and print on the standard output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chmod`: It is used to change file mode bits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chown`: It is used to change the file owner and group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cp`: It is used to copy files and directories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cut`: It is used to remove sections from each line of files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date`: It is used to print or set the system date and time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dmesg`: It is used to print or control the kernel ring buffer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`echo`: It is used to display a line of text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find`: It is used to search for files in a directory hierarchy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grep`, `egrep`, `fgrep`: These are used to print lines matching a pattern'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hostname`: It is used to show or set the system''s host name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ls`: It is used to list the directory contents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mkdir`: It is used to make directories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mktemp`: It is used to create a temporary file or directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mv`: It is used to move (rename) files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ping`, `ping6`: These are used to send `ICMP ECHO_REQUEST` to network hosts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ps`: It is used to report a snapshot of the current processes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pwd`: It is used to print the name of the current/working directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rm`: It is used to remove files or directories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sed`: It is used to invoke the stream editor for filtering and transforming
    text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sleep`: It represents the delay for a specified amount of time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort`: It is used to sort the lines of text files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tar`: It is used to combine and optionally compress files together into a
    single archive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touch`: It is used to change file timestamps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following utilities are located in `/usr/bin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`diff`: It is used to compare files line by line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dirname`: It is used to strip the last component from the filename'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expr`: It is used to evaluate expressions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file`: It is used to determine the file type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flock`: It is used to manage locks from shell scripts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stat`: It is used to display file or filesystem status'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tee`: It is used to read from the standard input and write to standard output
    and files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time`: It is used to time a simple command or give the resource usage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tty`: It is used to print the filename of the terminal connected to standard
    input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uniq`: It is used to report or omit repeated lines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unzip`: It is used to list, test, and extract compressed files in a `ZIP`
    archive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`who`: It is used to show who is logged on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xargs`: It is used to build and execute command lines from the standard input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following commands are built into the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cd`: It is used to change the directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`echo`: It is used to display a line of text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exit`: It causes the shell to exit (with an optional return code)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`export`: It is used to set an environment variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kill`: It is used to send a signal to or terminate a process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read`: It is used to get a string from the keyboard and place it into a variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
