- en: ES7 classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in the last chapter, we have our socket `join` listener but
    the problem is that the information inside the listener. It gets lost once the
    callback is complete, things like the username and the room name, they are not
    persisted anywhere. We're going to need that information to complete our event
    listeners. `createMessage` is going to need to know the user's name as well as
    the room name to send that message to the specific room, and same is the case
    with `createLocationMessage`. We'll discuss that in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with learning the ES6 class syntax and using it in creating `users`
    class and some other methods. We'll also see wiring up the users list, updating
    the people list when any user joins or leaves the chat. We'll also look into sending
    messages to a specific room and not to all the users.
  prefs: []
  type: TYPE_NORMAL
- en: Storing users with ES6 classes – Part I
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We don't have access to the data (username and room name) that is inside `join`,
    but we do have access to one common thing, and that is the socket ID. We have
    access to the socket variable, `socket.id`, and we also have access to it inside
    our other event listeners. And this is going to be what we use inside of a data
    structure we're about to create. We're going to create an array of users where
    we can store this information, when we want to look up a user like we might want
    to do in `createMessage` and `createLocationMessage`. We'll simply pass the ID
    to some function, get back the name and the room name, and emit the event as we
    want.
  prefs: []
  type: TYPE_NORMAL
- en: Now in order to get that done, we are going to make a brand new file in `utils`.
    We're going to call this file `users.js`, and this is where we're going to store
    everything related to that user's data structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s going to be an array of objects, and on each object, we''re going to
    have the ID, which will be the socket ID, some sort of really long string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also have our name. This is the display name for the user, mine might
    be `Andrew`; and finally the room the user joined, this could be something like
    `The Office Fans`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is all the information we need to store in our data structure for a user
    to be able to wire everything up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the real work is going to come inside the methods that we''ll be creating
    to manipulate the array. We''re going to have four methods:'
  prefs: []
  type: TYPE_NORMAL
- en: We want to be able to add a user via an `addUser` method; this is going to take
    three pieces of information, the ID, the name, and the room name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're also going to want to have a method for removing a user when they leave
    a room; remember we want to update that People list in the left-hand sidebar in
    the chatroom. We're going to need a way to remove them as well as add them, `removeUser`,
    and we're going to be removing users by the socket ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next up, we're going to have a way to fetch a user, this is going to come in
    handy when we're trying to send a message like we do inside the `createMessage`
    listener. We're going to want access to the user's name as well as the room in
    order to fire off the `newMessage` event. That is going to happen via a `getUser`
    method, which is going to take an ID and it will return the object we have defined
    up above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last one we're going to be adding is `getUserList`. The `getUserList` method
    is going to take the room name, figure out exactly which users are in that room,
    and return an array of names and will print those names to the client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These four methods are all we need to get this done. Now there are a couple
    of ways we could do this. We might make an array called `users`, setting it equal
    to an empty array and then we might define our functions. We''ll add `var addUser`
    and we''ll set that equal to a function that takes `id`, `name` and `room`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then inside the function, we''ll do something like manipulate `users` array
    with `users.push`, pushing on some object. Then we''ll export it using `modules.export`,
    exporting the `addUser` function as the `addUsers` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then we would call `addUser` over in `server.js`. This approach works fine,
    but we're not going to be using this approach. Here, we have a `users` array and
    we can manipulate the array. It does get the job done but what we're going to
    do instead is use the ES6 class syntax. This is going to let us create a `users`
    class. We'll be able to make a new instance of that class and fire all of our
    methods, which we'll be defining.
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to do this as opposed to creating ad hoc functions that all work with
    one piece of information. Now to get this done we are going to have to learn something
    new; we're going to be learning about ES6 classes.
  prefs: []
  type: TYPE_NORMAL
- en: The ES6 class syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to talk about ES6 classes, let's go ahead and simply create one. Now
    the syntax for creating a new class is going to look a little strange at first,
    it is unique to what we're about to do. But I promise that once you make one or
    two classes and add a few methods, you'll get really used to defining the methods
    and the classes themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ES6 class for a person
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To kick things off, we're going to create a simple class for a person. This
    means that we're making a set of data and a set of methods that are useful to
    manipulate `Person`. Now in order to get started, we are going to use the `class`
    keyword followed by the class name, `Person`. We're going to use an uppercase
    first letter for our class definition since we are going to be creating new instances
    of them with the new keyword. You do not need to use an uppercase P; this is just
    common convention across JavaScript. If a function is meant to be used with `new`,
    like `new Person`, `new Object`, or anything else, it should have an uppercase
    first letter; this is just a styling convention.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now right after our name we can simply open and close some curly braces and
    there we have it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a brand new class and we can even make an instance of it. We can make
    a variable called `me` and set it equal to `new Person` calling it as a function
    just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now we have a new instance of the class and we can do whatever we like with
    it. Currently, it doesn't do anything but we do have an instance created.
  prefs: []
  type: TYPE_NORMAL
- en: The constructor function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now one of the first things about a class that's really great is the ability
    to add a constructor function. A constructor function is a special function, it
    is specific to the class, automatically fires, and lets you initialize the instance
    of your class. In this case, we want to do something to customize an individual
    person when a `new Person` is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a constructor function we start with the name, `constructor`, but
    instead of adding a colon or anything else, we simply go right to our function
    arguments and right into the curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is our function, it's just like a regular function. The code inside is
    going to get executed and the brackets are our arguments, but the syntax for setting
    it up does look pretty different than what we would do on an object or on anything
    else.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now this `constructor` function gets called by default. You do not need to
    manually call it, and that actually gets called with the arguments that you specify
    right in `Person`, which means that we could have our `Person` constructor function
    take two arguments; maybe we want to initialize a new person with `name` and `age`.
    That means we would pass in name and age, I can say that name is a string, I''m
    going to set it as my name and age is a number like `25`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `constructor` function is now going to get called with this data, and we
    can prove this by using `console.log` to print out the name, and as the second
    argument the age:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s go ahead and run this file and see what we get; it''s sitting in
    `server/utils`. I''m going to shut down `nodemon` and run it using following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When I run the file, we get `Andrew 25` because the arguments were properly
    passed into the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d620617-2270-45be-9412-155d5f193d34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now passing data in really isn''t useful, what we want to do is modify the
    specific instance. We want to set this person''s name and age not the name and
    age for all people. In order to do that, we''re going to use the `this` keyword.
    In class methods and in the constructor function, `this` refers to the instance
    as opposed to the class, which means we can set a property on this individual
    person, `this.name = name`, just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And we can do the exact same thing for age, `this.age = age`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this is how we customize the individual instance. Now what we have is
    an object, and we can actually access those properties. The `me` variable we defined
    is identical to the `this` variable, which means that we can actually access those
    properties. We''ll add `console.log`, I''m going to print the string `this.name`
    for formatting only, and then I''m going to reference the actual `me.name` property.
    And we can do the exact same thing for age; we''re going to print what we had
    put in as `this.age`, only we''re going to access it via `me.age`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now rerun the file using, `nodemon server/utils/users.js`, and we get
    exactly what we''d expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1cbce7c5-ca5b-4dbe-9b3e-0a95e2fcceea.png)'
  prefs: []
  type: TYPE_IMG
- en: The individual person was updated; `this.name` was set to `Andrew` and it is
    indeed showing. Now that we have a basic idea as to how we can initialize a class,
    let's go ahead and talk about methods.
  prefs: []
  type: TYPE_NORMAL
- en: The method function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Methods can be any function, they could take arguments, maybe they won''t take
    arguments, and to define them all we do is the following. Without adding a comma,
    another quirk of the class syntax, we specify our method name. I''m going to create
    one called `getUserDescription`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This one is not going to take any arguments so we can leave that arguments
    list empty. Inside the function itself, we''re going to go ahead and return a
    description, since the method after all is called `getUserDescription`. We''re
    going to `return` a template string injecting some values inside there, the general
    flow is going to be `Jen is 1 year(s) old`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what we want to print, but we want to use those specific values for
    this individual person, and to do that we''re going to access those properties
    once again. Instead a static name, we''re going to inject `this.name`; and instead
    of a static age, we''re going to inject the age, `this.age`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can go ahead and actually test out `getUserDescription` by calling it
    down below. We can make a variable called `description`, set it equal to `me.getUserDescription`,
    and can go ahead and do something with the return value, like print it to the
    screen using `console.log`. Inside the log argument list, I''m just going to pass
    in `description`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can save the file and we should see over inside the Terminal our `description`;
    in this case, `Andrew` and `25`, `Andrew is 25` years old. When I save the file
    `nodemon` is going to restart, and right here we get just that `Andrew is 25 year(s)
    old` printed to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35ba3e85-cce3-4855-88e8-008cbb5a2c20.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the very basics of classes, there's a ton of class-related features
    we won't be exploring just yet, but for now this gives us everything we need in
    order to get started. Instead of a `Person` class, we're going to create a `users`
    class, and instead of methods like `getUserDescription`, we're going to create
    the custom methods. We're also going to be adding test cases as we go to make
    sure they work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the users class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we're going to get started adding the `users` class and `then`. We'll
    finish it up adding all the methods. For now though, we can start defining the
    class, I am going to comment out the `Person` class we just added, since we do
    want it in place as documentation. But we're not going to exactly use it inside
    the app. We'll delete it a bit later once we are more comfortable with classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''re going to start by creating our `users` class using the `class`
    keyword, `class Users`. We''re then going to go ahead and open up and close our
    curly braces, and inside here we can specify any methods we like, such as the
    `constructor` function. We are going to define a `constructor` function, although
    they are completely optional when creating classes. We''re going to set up our
    `constructor` function by name, then we''ll have our arguments list followed by
    the opening and closing curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the constructor function for users, unlike person, is not going to take
    any arguments. When we make a new `users` instance, we just want to start with
    an empty array of users. We''re going to be making this new instance over inside
    `server.js` when we first start the app, that is going to happen up top of the
    code. And down below, we''ll actually be using the methods when someone joins
    a room, leaves a room, or manipulates a room in whatever way they want. That means
    that all we need to do is set `this.users`, the `users` property, equal to an
    empty array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This is going to be the array we''ve defined at the top of the `users.js` file.
    The next thing we''re going to do, now that we have our `constructor` function
    in place, is create the `addUser` method. We''re going to create that just below
    the `constructor` function by defining it like we did for `getUserDescription`.
    We''re going to set up the arguments list, this one is going to take some arguments
    we''ll specify those in a moment, and we''re going to open and close our curly
    braces for the actual function code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The three arguments we're going to require is `id`, `name`, and `room`. In order
    to add a user to the `users` array, we need those three pieces of information.
    Once we have them actually adding them to the list is going to be really easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m going to get started by creating a variable `user` so we can make an object
    to push on to the array. In `users`, we''ll set an `id` property equal to the
    `id` argument, and we''ll do the same thing for `name` and finally for `room`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have a `user` object with those three properties we can go ahead and
    push it on the array, `this.users.push`, to add an object on to the end, and the
    thing we''re going to be adding on to our array is the `user` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have this in place, we are basically done. The last thing I''m
    going to do is go ahead and return the successfully created user, `return user
    just like this`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: And there we go, `addUser` is complete. We're not going to wire it up just yet
    but we can add a test case for `addUser`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the test case for addUser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll add the test case over inside a brand new file called `users.test.js`.
    In here, we'll be able to load in users, test it, and do whatever else we might
    need to do. Now, the first step is going to be to actually export users.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, inside the `user.js` file we have defined the class, but we do not
    export it. Exporting it is going to be the same as exporting anything else, there's
    nothing special there.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add `module.exports`, and we''re going to go ahead and export, inside
    of curly braces, an object where the users property equals the `Users` class definition
    we have, making sure to match the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have this in place, we can actually require our class and make new
    instances of it over inside the `users.test` file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new instances in the users.test file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started by loading in `expect`, `const expect = require(''expect'')`,
    and we can also go ahead and load in our users file, `const`. Using ES6 destructuring
    we''re going to grab `Users`, and we''re going to get that via the local file
    `./users`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for the moment, we''re just going to add a test case for adding a user.
    We''ll make a quick `describe` block, most of the heavy lifting is going to happen
    later in the section. We''ll `describe` our `Users` class, we can then add our
    arrow function and we can go ahead and add a test case, `it`, inside quotes, `should
    add new user`. I''m going to go ahead and set up the function for this one. It''s
    going to be a synchronous function so there''s no need for the `done` argument,
    and we can create a new instance of users, `var users`, equals a `new Users`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now since we don't take any arguments in the `constructor` function, we're not
    going to pass any in when we actually create our instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing we''re going to do is make a user, then we''ll be passing its
    properties to `addUser` making sure the appropriate thing shows up in the end.
    Let''s go ahead and make a variable `user` and we''ll set that equal to an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m going to go ahead and set on this object three properties, an `id` equal
    to something like `123`, a `name` property equal to some name like `Andrew`, and
    you can go ahead and use your first name for example, `Andrew`, and a room name.
    I''m going to use `The Office Fans`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have the user in place and we can go ahead and call that method that
    we just created, the `addUser` method with the three necessary arguments, `id`,
    `name`, and `room`. I''m going to store the response in a variable called `resUser`,
    and we''ll set it equal to `users.addUser` passing in those three pieces of information,
    `user.id`, `user.name`, and `user.room` as the third argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: With the call in place we can now start making our assertions.
  prefs: []
  type: TYPE_NORMAL
- en: Making the assertions for the users call
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One assertion we want to make is that the actual `users` array was updated,
    it should have been updated when we called `this.users.push`. I''m going to expect
    that by calling `expect`. We''re going to expect something about `users.users`:
    the first user refers to the `users` variable and the second one actually accesses
    the `users` array as defined in `users` file. Then we''re going to call `toEqual`.
    Remember for arrays and objects, you have to use `toEqual` as opposed to `toBe`.
    We''re going to `expect` it to be an array with just one item. The item should
    look just like the `user` object we have defined in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If this passes, then we know our user was indeed added to the `users` array.
    I'm going to go ahead and save the file and shut down `nodemon`.
  prefs: []
  type: TYPE_NORMAL
- en: Running the addUser test case
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''m going to clear the Terminal output and run `npm test` to make sure our
    brand new test case is passing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77a31d7e-dcaa-4e09-9a13-69043b428168.png)'
  prefs: []
  type: TYPE_IMG
- en: When I run it, it does indeed pass. We have our `Users` block and `should add
    new user` is working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the removeUser, getUser, and getUserList methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can integrate users into our application, let's go ahead and finish
    building it out. We have three more methods to add and test. The first one is
    `removeUser`, which is going to take an argument, the ID of the user you want
    to remove. This is also going to return the user that was just removed, so if
    I remove the user with an ID of 3, I want to get rid of it from the list but I
    do want to return the object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll leave a little note about that, `return user that was removed`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the next method that we''re going to be filling out is `getUser`. The `getUser`
    method is going to take the exact same arguments as `removeUser`. We''re going
    to find a user by ID returning the user object, but we''re not going to be removing
    it from the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The final one that we''re going to create, as specified up above, is a method
    called `getUserList`. This is going to get a list of all the users, just their
    names by the room name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that we''re going to iterate through the `users` array looking for
    all the users whose room matches the room specified. This is going to return an
    array, something like: `''Mike'', ''Jen'', ''Caleb''`, assuming those are the
    people inside of the room:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now, notice here that we're not specifying the room or the ID property; we're
    just returning an array of strings.
  prefs: []
  type: TYPE_NORMAL
- en: Adding seed data for the test file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's go ahead and add one thing to our test file. In order to get these
    methods to work, we're going to need seed data, we're going to need users that
    already exist otherwise we can't remove one or get one, and we definitely can't
    get a list of the rooms these non-existent users are in.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to fix that over inside `user.test.js`, we''re going to add a `beforeEach`
    call, which we''ve used in the past. The `beforeEach` call, as we know, is going
    to get called before every single test case. It''s going to help us initialize
    some data. Now the data we''re going to initialize is going to be defined just
    above the `beforeEach` call, in a variable called `users`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The reason I'm defining it outside of `beforeEach` is so it's accessible inside
    of `beforeEach` and it's accessible inside of the test cases, we have defined
    down below.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of `beforeEach` we''re going to set `users` equal to `new Users`, and
    we''re also going to set the `users.users` array. Here we can specify an array
    of objects, and this is going to let us add some initializing data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go ahead and provide three objects. The first one will have an `id`
    property equal to `2`, we''ll set the `name` property equal to something like
    `Mike`, and we can go ahead and set the `room` property equal to whatever we like,
    I''m going to go ahead and use a room name of `Node Course`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We can take this object and copy it two more times. I''m going to add a comma,
    paste in what I just copied and do the same thing again, comma followed by a paste.
    I''m going to change it to an id of `2` for the second user, we''ll change the
    name to something like `Jen` and we''ll change the room name to `React Course`.
    Now for the last user, we are going to change `id` and `name`, we''ll make `id`
    equals `3`, and we''ll make the name something like `Julie`, but we''re going
    to leave the room as `Node Course` so we can test that our `getUserList` function
    does indeed return the correct results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The test cases aren''t going to be required to use our `users` variable as
    defined here. We can still define a custom one as we defined in case of adding
    new user. If I run the `test-watch script`, `npm run test-watch`, we''re going
    to see that our one test case is still passing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6bfc1d7-d005-4608-ae6e-44f8f791cc78.png)'
  prefs: []
  type: TYPE_IMG
- en: I'm going to save the file to rerun the test suite, and right here we have 6
    passing test cases. Regardless of whether or not we use this, we can still use
    a custom test case.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have this in place, we can go ahead and start filling out some of
    these methods. We're going to fill out `getUserList` together, and you're going
    to be responsible for `removeUser` and `getUser`.
  prefs: []
  type: TYPE_NORMAL
- en: Filling the getUserList
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now in order to fill out `getUserList`, we''re going to start by finding all
    of the users whose room matches the `room` argument specified. In order to do
    that we''re going to use the `filter` method on arrays, which we''ve used in the
    past. Let''s make a variable, we''ll call it `users` and we''ll set it equal to
    `this.users`, which is the array of `users.filter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you remember `filter` takes a function as its argument. This function
    gets called with each individual user. We can return `true` to keep this item
    in the array or we can return `false` to have it removed from the array. I''m
    going to go ahead and return `user.room`, and we''re going to check if that equals,
    using three equal signs, the `room` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If they are equal, `user.room === room` is going to result in `true` that value
    will get returned; if they''re not equal it''s going to result in `false` and
    the user will not be added to the list above. Now we can go ahead and use the
    shortcut for our ES6 arrow function. Instead of adding the `return` keyword and
    specifying the actual arrow, we''ll use the shorthand like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s the exact same functionality just a different technique. Now we have
    a list of all the users who do match the criteria. The next step in the process
    is to take that array of objects and convert it to an array of strings. All we
    care about is getting that list of names. In order to do that, we''re going to
    use map. I''m going to create a variable called `namesArray` and we''re going
    to set this equal to `users.map`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have used `map` in the past, as we know `map` also takes a function
    similar to `filter`. It also gets called with the individual item. In this case,
    an individual user, but `map` lets us return the value we want to use instead.
    So we''re going to get an object, it is going to have the `id` property, the `room`
    property and the `name` property, and all we want is the `name` property, so we''re
    going to return `user.name`. And we can simplify that even further using the shorthand
    for the arrow function. `user.name` is going to be implicitly returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our `namesArray` array, all we need to do is go ahead and
    return it by returning `namesArray`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now this is going to get the job done, before we simplify it any further let's
    go ahead and write a test case to make sure it works.
  prefs: []
  type: TYPE_NORMAL
- en: Adding test case for getUserList
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Inside `users.test.js` we can add the test case below our other test case,
    `it (''should return names for node course'')`. We''re going to write the case
    that returns all of the users inside the Node course, we should get the two users
    back, `Mike` and `Julie`. We''ll make a variable, we''ll call that variable `userList`,
    and what we''re going to do is call the `users` variable defined already:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the one with our seed data. We do not need to create a custom one like
    we do for the other test case, `users.getUserList`. And we know `getUserList`
    takes one argument, the name of the room you want to fetch the list for, this
    one is called `Node Course`. Make sure your capitalization lines up. Then we can
    go ahead and add a semicolon at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing to do is add our assertion, making sure that what we get back
    is what''s expected. We''ll `expect` that `userList` equals, using `toEqual`,
    the following array. It''s going to be an array where the first item is `Mike`
    and the second item is `Julie`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: If that assertion passes, we know `getUserList` worked as expected because that's
    exactly what we have defined up above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can go ahead and copy this test case. Doing the exact same thing for
    the React Course should return names for `react` course, we''ll change `Node`
    to `React` and we''re going to go ahead and update what we `expect`. The React
    Course has just one user, that user has `name` equal to `Jen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now this is a pretty good test case. If we save `users.test.js` it''s going
    to rerun the entire test suite. We should see we have our three tests under the
    `users` describe block, and they should all be passing, that is indeed the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbd16203-7351-4ff7-95ff-db8fc7ec2c6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next two methods that we''re going to be creating are `removeUser` and
    `getUser`. Let''s go ahead and write the `it` statements for the test cases together,
    and you''ll be responsible for actually filling out the method and filling out
    the test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This method is going to take the ID of one of our seed users, whether it''s
    1, 2 or 3\. It''s going to pass it to the function `removeUser`, and your job
    is going to be to assert that the user was indeed removed. Next up, `it(''should
    not remove user'')`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In this case, I want you to pass in an ID that is not part of our seed `user`
    array, that means something like 44, 128, or basically any string that's not 1,
    2, or 3\. In this case, you should be asserting that the array has not changed;
    we should still have those three items.
  prefs: []
  type: TYPE_NORMAL
- en: Now those are the two test cases for our `removeUser` method, next up is `getUser`.
    We're going to add two similar test cases. First up, `it('should find user')`,
    you should pass in a valid ID and you should get the user object back. And the
    other one is going to be `it ('should not find user')`, just like `it('should
    not remove a user')`. Pass in an invalid ID and make sure you do not get a user
    object back.
  prefs: []
  type: TYPE_NORMAL
- en: Filling the getUser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''m going to start off with `getUser`, the goal here is to return the user
    object whose ID matches the ID of argument passed in `getUser`. To get that done,
    I am going to be using `filter`. We''re going to return the result from `this.users.filter`,
    we''re going to be filtering by ID, and here we filter by room. We''re going to
    pass in our arrow function using the expression syntax, the argument will be `user`,
    and we are going to go ahead and return `true` if the user''s `id` property equals
    the ID of the argument. If that is the case, we do want to keep this `user` in
    the array. And in the end, we should have just one user or 0 users, and all we''re
    going to do is return the first item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: If there's one user in the array we're going to get its object back; if there's
    no users we're going to get undefined, which is exactly what we want. Now that
    we have `getUser` in place we can write the test case for that. We have two test
    cases, `it('should find user')` and `it('should not find user')`.
  prefs: []
  type: TYPE_NORMAL
- en: Test case – should find user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For `it(''should find user'')`, I''m going to get started by making a variable
    called `userId` and I''m going to set this equal to the ID I want to use. I need
    a valid ID so I''m going to go ahead and use `2`. `1`, `2`, or `3` would have
    worked here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up I am going to go ahead and make a `user` variable, this is going to
    be the return result from `getUser`. I''ll set it equal to `users.getUser`, and
    we''re going to try to fetch a user whose ID is `2` by passing in `userId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the next thing we''re going to do is make an assertion about what we get
    back, we should have gotten our object back and we can `expect` that `user.id`
    equals, using `toBe`, and the ID, the `userId` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m going to go ahead and save the test suite, and you can see all our test
    cases are still passing, which is fantastic. If it does not equal the ID, maybe
    the ID is `3`, you''re going to see the test case fail, and we do get a pretty
    clear error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2bfa11b2-203d-4ed0-b43f-e1e2348bb5a4.png)'
  prefs: []
  type: TYPE_IMG
- en: We get `Expected 2 to be 3`, which clearly is not the case. This is the final
    test case though and we can move on to `it('should not find user')`.
  prefs: []
  type: TYPE_NORMAL
- en: Test case – should not find user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this case, we''re going to follow a very similar format as in case of should
    find user, creating the `userId` variable and setting it equal to a user ID that
    does not exist inside of our built-in users; something like `99` would get the
    job done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we''ll be making a `user` variable, once again to store the return
    result from `getUser`, `users.getUser`, passing in our `userId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in this case, we would expect that undefined comes back, `filter` should
    return nothing and if you try to fetch the first item in an empty array, you''re
    going to get undefined. We can prove that over in the Terminal by running `node`,
    and inside our little console we can create an empty array and we can access the
    first item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We get back `undefined`. I''m going to shut that down, restart our test suite,
    and over `inside users.test.js` file we are going to go ahead and make our assertion.
    We''re going to `expect(user).toNotExist`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m going to save the file and all of our test cases should still be passing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a29742c-939b-4ebd-842b-3a90f7cbb0bb.png)'
  prefs: []
  type: TYPE_IMG
- en: That's great. Next up, we need to write the `removeUser` method and we also
    need to fill out the test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Filling the removeUser method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Over inside `user.js`, we can get started by finding the user, if any. That
    means, we''re going to use a similar technique to what we have in the `getUser`
    method. I''m going to actually copy the following line from the `getUser` method
    and paste it just right inside of `removeUser`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating a variable called `user`, setting it equal to the preceding line.
    Now you could also go ahead and actually call `getUser`. I could call `this.getUser`,
    passing in `id` just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Both of those solutions are going to work as expected. Next up, if there is
    a user, we want to remove it, `if(user)`, we''re going to do something special,
    and regardless of whether or not a user did exist, we are going to return the
    `user` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: If it didn't exist we're going to return undefined, which is great, if it did
    exist after we remove user, we'll be returning the object, also what we want.
    All we need to do is figure out how to remove it from the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, I''m going to set `this.users` equal to `this.users`, and we''re
    going to call `filter` finding all users whose ID does not match the one specified
    up above. We''re going to call filter passing in our arrow function, we''re going
    to get the individual `user`, and all we''re going to do inside our arrow expression
    syntax is add `user.id` does not equal `id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This is going to create a new array, setting it equal to `this.users`, and we're
    going to have the item removed, if any. If there was no item that's fine; this
    statement is never going to run and will be able to continue on returning undefined.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have this in place, we can go ahead and write a test case that makes
    sure it works as expected. I'm going to save `user.js` and right inside `users.test`,
    we're going to fill both `it ('should remove a user')` and `it ('should not remove
    user')` test cases. Let's get started with `should remove a user`.
  prefs: []
  type: TYPE_NORMAL
- en: Test case – should remove a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''m going to make a variable `userId` to store the ideal ID, which would be
    `1`, `2` or `3`, I''ll go with `1`, then we can go ahead and actually remove it
    storing the return result in a `user` variable. I''m going to call `users.removeUser`
    passing in my `userId` variable, which is `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the potentially removed user we should be able to go ahead
    and assert some stuff. We''re going to `expect` that the `user` object exists.
    We''re also going to expect that its `id` equals the `id` we have up above, and `expect`
    that the user removed has an `id` property using `toBe(userId)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we''re going to make sure that the user was removed from the array.
    We''re going to `expect(users.users.length).toBe)` in this case `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: It should have been `3` in the beginning and once we removed a user, it should
    have been `2`.
  prefs: []
  type: TYPE_NORMAL
- en: Test case – should not remove user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In case of should not remove user, we''re going to do some similar stuff, we''re
    just going to tweak `userId`. I can actually copy the contents of our first test
    case, paste it into the second one, and all we need to do is make a few tweaks.
    I''m going to change the ID to an invalid ID like `99`. We are still going to
    call `removeUser` with the ID. In this case, though instead of expecting `user`
    to have an `id` property, we''re going to expect that `user` does not exist using
    `toNotExist`. Next up, we''re going to `expect` the length has not changed, and
    we''re going to make sure that the length still equals `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Now I can go ahead and save the `users.test` file. This is going to restart
    everything inside `nodemon`, and what we should get is a test suite that''s passing.
    It looks like it did already run although the content didn''t change so it''s
    a little hard to figure out if anything happened. I''m going to shut that down
    and run `npm test` just to verify, and right here you can see all 12 test cases
    are passing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41065d67-9bad-45ed-9369-decf75a28d6a.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have all of the methods we need to persist a user across the different
    event listeners; whether they're sending a message, a location message, whether
    they're connecting or leaving, we're going to be able to keep track of them and
    send the right thing to the right people.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up user list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we're going to start wiring up that users class we created,
    and to kick things off, we're going to wire up the `People` list, which means
    that we need to do something when a user joins, and when a user leaves. We want
    to keep that list up to date and every time we update it, we want to give a fresh
    copy of the list to the client. This means that the server is going to need to
    emit an event to the client, the client is then going to listen for that event
    and it's going to update the markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can view exactly where this is going to happen by starting up the server
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, I''m going to head over to `localhost:3000` and open up a chat page.
    I''m going to enter `Andrew` for Display name and `LOTR` for Room name. Now once
    we''re in, we have our People list, currently it should show us, since we are
    in the room, and when a new user joins it should automatically show that user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a23fef41-72e4-4105-a876-ec2dfc51fc20.png)'
  prefs: []
  type: TYPE_IMG
- en: Right now none of this is happening, but with our new event in place it's all
    going to happen.
  prefs: []
  type: TYPE_NORMAL
- en: Adding People list in the chat room
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now the first thing we're going to do is figure out exactly what this event
    is going to look like. Over inside `chat.js` we can add a listener figuring out
    what works for us, what does the client really need to get this done? Then we
    can go ahead and wire up the server to fulfill those needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right inside of `chat.js`, just below `disconnect`, we''re going to add a new
    listener, `socket.on`, and we''re going to listen for a brand new event. This
    one is going to be called `updateUserList`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Now `updateUserList` is going to need to get passed some information. We're
    going to need the list of users to show instead of the currently displayed ones,
    which means we're going to expect one argument, a `users` array. And this `users`
    array is going to just be an array of names exactly like what we returned from
    `getUserList` over inside of the `users` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back inside of `chat.js`, for the moment, all we''re going to do is log the
    list to the screen when it comes through, `console.log(''Users list'')`, and the
    second argument will be the actual `users` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Once we have this wired up, all we need to do is add some jQuery to update the
    DOM. The harder part is going to be getting an updated and up-to-date list back
    to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Adding jQuery to update the DOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over inside `server.js` step one to that process is going to be to import the
    class that we've been working so hard to create. I'm going to go ahead and get
    this done, just below where we load in `isRealString.`
  prefs: []
  type: TYPE_NORMAL
- en: 'We can make a constant and I''m going to go ahead and pull off the `users`
    property, which is the one we export at the bottom of `users.js`, and we can import
    that using `require`. I''m going to require the local file `./`. It''s in the
    `utils` folder and this one is called `users`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have `Users` in place we can make a new instance of it. This is
    going to be the `users` instance. We need a way to run these methods, so right
    below our `io` variable, we can make a new variable called `users` setting it
    equal to `new Users`, just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Now we're going to be able to call all of our user methods to add, remove, fetch,
    and otherwise manipulate that data.
  prefs: []
  type: TYPE_NORMAL
- en: Adding user to the user's list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step in the process is going to be to add a user to the list when
    they join a chatroom. We can do that right after our call to `socket.join`. I''m
    going to remove the old comments, although you can choose to keep yours around
    if you find they are a good reference. Just below `socket.join`, we''re going
    to call `users.addUser`, adding our brand new user, and we need to pass in those
    three pieces of information, the socket ID, `socket.id` is where that''s stored,
    the name, that''s on `params.name`, and finally we''re going to go ahead and pass
    in the room name, `params.room`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Now as you notice this code is not supposed to run if there is a validation
    error, meaning that the name or the room name is not provided, but currently that''s
    not the case. We don''t actually stop the function execution, I''m going to use
    `return` to make sure none of the code down below ever fires if the data is not
    valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Adding users with unique ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step in the process is going to be to make sure that there is already
    no user with the same ID. I''m going to call `users.removeUser` to get that done,
    passing in the only argument requires the `socket.id` just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: That means that user joins the room, and we remove them from any potential previous
    rooms. Finally, we add them to the new one. Now that we have this in place we
    can actually go ahead and emit that event.
  prefs: []
  type: TYPE_NORMAL
- en: Emitting the event to the clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to emit the event the client expects, `updateUserList` with the
    `users` array. If we don't emit the event, the client is never going to get the
    new list and we just updated the list, so we definitely want them to get a fresh
    copy. This means we want to emit an event to everyone in the chat room via `io.to`.
    We're going to pass in the room name and then we're going to call `emit`, emitting
    the event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can go ahead and fill out to first, we want to pass in the room name,
    `params.room` has that information, and next up we want to emit the event, the
    event name as we just defined over in `chat.js` is `updateUserList`. And the last
    thing we need to do is get the user list. We already have that, `users.getUserList`,
    passing in the name of the room we want to get the list for. Once again, `params.room`,
    that''s going to be the only argument we pass in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: With this call in place, we should be able to actually view this over inside
    the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to save this file, which is going to restart the server in the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the users list in the chatroom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Inside the browser I can open up the Developer Tools to view the `console log`
    statements, and I''m going to give the app a refresh. If I do refresh the application
    we see a `Users` list and we have `Andrew` printing twice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e313227-7562-4e1d-b97e-efc032137bee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If I refresh the page for a second time, we have `Andrew` printing three times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7244f884-2b2e-4a86-8102-2b362a216ec8.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see this is happening because we're not removing users from the list
    when they leave the chat application. That's the second goal in this section.
    We currently have a user list. All we need to do is update it when a user leaves
    as well, that's going to happen inside of Atom down near the bottom in the `disconnect`
    listener.
  prefs: []
  type: TYPE_NORMAL
- en: Removing users when they leave the chatroom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Inside the disconnect listener, we want to remove the user and then we want
    to update the list once again. I''m going to do that by doing a few separate things.
    First up, we''re going to make a variable called `user`, storing any potentially
    removed users, remember the `removeUser` method does return the user removed,
    `users.removeUser` passing in the ID, `socket.id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we only want to do something if we actually removed a user, if the person
    hadn''t joined a room, there''s no reason to actually do anything. If a user was
    removed we are going to emit two events, and we''re going to emit them to every
    single person connected to the chatroom, which means that we''re going to be using
    `io.to().emit`, just like we did in the preceding code. We''re going to do this
    two times, so I''m going to copy this line and paste it, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Updating the users list when someone left the chatroom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first one is going to update the `user` list and the second one is going
    to print a little message, like `Andrew has left the room`. The first one is going
    to take the user room property as the only argument, `user.room` stores the room
    string, we're going to provide that for both, and now we can start emitting our
    events.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m going to emit the `updateUserList` event first, inside quotes, `updateUserList`,
    and we''re going to go ahead and call the exact same method we did right up above,
    `users.getUserList`, passing in the room, `user.room`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Now when someone leaves a room they're going to be removed from that list and
    we're not going to see those duplicates that we had over inside of the web developer
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Emitting custom message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing that we want to do is emit a message. We''re going to emit a
    message from the admin to everybody, kind of like we did up above. We greeted
    the user and we told all other users that someone joined, right here we''re going
    to `emit(''newMessage'')`, and we''re going to call `generateMessage` like we''ve
    done in the past. We''re going to pass in those two arguments, the first one is
    `Admin`. This is going to be an admin message, and the second one can be a template
    string, we''re going to inject the user''s name, `user.name`, and then we''re
    going to say that user has left:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have this in place everything should be working as expected. Hopefully
    over inside of Chrome we no longer get those duplicates. I''m going to give the
    page a refresh and we see we have a users list with just one user, `Andrew`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80b8d679-53e0-46c1-842b-3498cdb7ec5e.png)'
  prefs: []
  type: TYPE_IMG
- en: If I refresh the page, we no longer get the duplicates because when I leave
    I get removed and when I come back. When the page finally finishes refreshing,
    I get added. Now the same thing is going to be true if I add a new user. For the
    moment, I'm going to switch the browser to just take up half the width on my screen.
    I'm going to open up a second tab and drag that to the other half so we can view
    both of these side by side. I'm also going to open up the Developer Tools for
    this second tab, and we're going to join the exact same room.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to `localhost:3000`, I''m going to join as `Mike`, and the room name
    is going to be the same, `LOTR`. Now as soon as I click on Join, I should see
    an updated list in both consoles. I''m going to click on Join. Inside the right
    browser window, we get `Andrew`, `Mike`, and inside the left browser window we
    also have `Andrew`, `Mike`, which is fantastic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79533352-84c4-4905-a57f-b8a9f5082987.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I also get a little message saying Mike has joined, that was in place earlier;
    the real test is what happens when a user leaves. I''m going to kick Andrew out
    of the chat room, and over here inside our other chat window, we have Andrew has
    left printing to the screen, and we have our new user list with just one user,
    `Mike`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6dc39bb-ea14-475d-97f3-9002282eb5cb.png)'
  prefs: []
  type: TYPE_IMG
- en: This is fantastic. We're now keeping track of users as they come and go, which
    lets us do really cool things like printing custom messages and updating the People
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the users name to the chatroom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing to get done is to actually render the names to the screen. Instead
    of just printing them in the console, we want to go ahead and take these names
    and add them to the list, that's going to happen over inside of our event listener
    in `server.js`. We're going to use a jQuery like we have in the past. Inside `chat.js`
    we're going to do something with those `users`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a jQuery to add the users to the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First up let''s go ahead and make a new jQuery element. We''re going to make
    a variable called `ol`. This is going to store a new element using jQuery. We''re
    going to create an ordered list. We''ll create that `ol` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to iterate over every user doing something with that user, `users.forEach`
    is going to let us get that done. We''re going to pass in our function and inside
    of that function we can add the individual user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The argument for the function is the name, the `user` string, and all we''re
    going to do is append something to our ordered list up above. That''s going to
    be `ol.append`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Now what exactly do we want to append? Well we want to append a list item,
    the list item is going to have a `text` property equal to the name and that''s
    going to get everything rendering just right. We can use jQuery to create a new
    list item by opening and closing our list item tag. Then right after the closing
    parenthesis for jQuery we are going to call `text` so we can safely set the `text`
    property equal to the user''s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Now we have an updated list but it's not actually getting rendered to the screen,
    the last step is to render it by adding it to the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the updated People list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now over inside `chat.html` we do have a place for that. It''s the `div` tag
    with an `id` of `users`, which means that we can select it, `jQuery`, the selector
    is going to start with the hash sign(`#`) since we''re selecting by ID, and we''re
    selecting `users`, then we can go ahead and actually add the list. I''m going
    to set the `html` property equal to our ordered list, `ol`, as opposed to using
    append, we don''t want to update a list, we want to completely wipe the list replacing
    it with the new version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Now we can save `chat.js` and test things out.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the users name in the chatroom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Over inside of the browser I''m going to go ahead and close the console, refresh
    the page and we see the number 1 followed by Mike:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87de5892-268f-4519-bf94-eaca35f620a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now number 1 is coming from the fact that we''re using an ordered list. If
    I add a second user we''re going to see that second user. Let''s create a second
    user, we''re going to give it a display name of `Jen`, then we''ll go to the same
    room, `LOTR`, and when we join we get a little message and we get our two users,
    and the same thing is showing up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb5367fe-c3ff-476f-a035-defaaca28e77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now I''m going to go to the second tab and I''m going to close the first. When
    I do that your list automatically updates and we also get our message saying that
    Mike has left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a30ad407-5eac-41f1-957d-f8a318bf4db3.png)'
  prefs: []
  type: TYPE_IMG
- en: With this in place we are one step closer to being complete. The messages are
    still going to everybody, they're not specific to the room, but that is something
    we're going to take care of in the next section. For now we are done. I am going
    to make a commit, it has been a little while and we do have a completed feature,
    so let's go ahead and do that.
  prefs: []
  type: TYPE_NORMAL
- en: Making a commit for updated users list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First up, we''ll run `git status`, we have some new files as well as some existing
    ones, I''ll be using `git add .` to add all of those to the next commit. Finally,
    we can use `git commit` to actually make the commit, I''m going to use the `-m`
    flag to add our message, and right inside of quotes `Add Users class and updateUserList
    event`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: We can go ahead and make this commit and push it up to GitHub, feel free to
    push to Heroku if you want, I'm going to hold off a little bit longer, everything
    should be working there as well as locally.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section we're going to be making sure the messages, whether it's
    a text message or a location message, only gets sent to the people in the room.
  prefs: []
  type: TYPE_NORMAL
- en: Sending messages to room only
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last section, we wired up that People list making sure that as new users
    come and go the list gets updated. In this section, we''re going to make sure
    that our text and location messages only get sent to users in the same room. Currently,
    it gets sent to everybody. We can prove that by opening up a new connection, I''m
    going to use `Mike` and we''re going to join a different room, `The Office Fans
    works`. When I join the room you can see that the People lists are indeed correct,
    a user in one room does not update the People list for a user in another room.
    The difference though is that the text messages do not follow those rules, neither
    do the location-based messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98912105-c010-4812-94a9-a6b8615dceed.png)'
  prefs: []
  type: TYPE_IMG
- en: We'll have a text message and a location message as well, if I go over to the
    chat app for the other room we get both of those. And this is a problem. We also
    have the name problem, currently User displays for the text message and Admin
    displays for the location message, we want to make sure to use the actual user's
    name, whether it's Jen or whether it's Andrew. In order to get that done we are
    going to need to make some changes to both `server.js`. We have our event listeners
    for `creatMessage` and `createLocationMessage`, and we're also going to be making
    some updates inside of `chat.js`, and this is actually where we're going to start.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the chat.js and server.js files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, the name `User`, the incorrect name we see inside of the browser
    that comes from `socket.emit` function in `chat.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The client originally sent the name but this is no longer going to be the case,
    the name is stored by the server so we're going to remove this as a required property
    from `createMessage`, we're just going to be sending the text across.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Now with this in place we can modify the event listener over inside of `server.js`.
    Inside `server.js`, `createMessage` takes those two properties and it stuffs them
    right in to `generateMessage`. Instead, we're going to find the user using `users.getUser`
    and we're going to do something with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right in `createMessage` we can go ahead and delete our `console.log` statement
    for `createMessage`, and we''re going to make a variable user, setting it equal
    to `users.getUser`. This is the method we created in `users.js`, `getUser`, which
    takes the `id` parameter. We can pass in the ID `socket.id like this`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can do something with `user`. We only want to do something if a user
    actually exists, which means that we''re going to check if the user exists using
    `if` statement, and we''re also going to make sure that the text that got passed
    along was a real string, using, after `&&`, `isRealString`. We''ll then pass in
    `message.text`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'This means if someone tries to send across an empty message or just a bunch
    of spaces, it''s not going to get sent to everybody else. Now inside the `if`
    statement, all we''re going to do is actually emit the message. We know it''s
    valid so we do want to emit something, and we''re going to take `io.emit` line,
    cut it out, and paste it in `if` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Now currently the `io.emit` line emits to everybody, not just the room that
    user is connected to, but we also use `message.from`. We really want to use the
    `name` property on user. We're now going to make those two changes, emit this
    event just to the room the user is connected to, and make sure to provide their
    name as opposed to `message.from`.
  prefs: []
  type: TYPE_NORMAL
- en: Emitting event to the individual room
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First up, we want to emit to just a specific room and we know we can tack on
    a to call right in the `io.emit` line to get that done, passing in the room name,
    with access to that on the `user` object `user.room`. Now that we''re emitting
    to just the individual room, we also do want to change the name we use. Instead
    of `message.from`, we''re going to access the name on the `user` object, `user.name`,
    and there we go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have a much better system for sending those text messages. I''m going
    to refresh my first tab and my second tab, and we''re going to send some text
    messages around. I''m going to send the number `1` from my second tab and we do
    get Andrew and we do see the number 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/940a763e-af6b-46b6-ae6c-aae91eec9a44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Over inside our other tab the message is nowhere to be found because we''re
    just emitting it to users in `The Office Fans` room:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0141c09-2445-4ec2-9565-36d339746a6a.png)'
  prefs: []
  type: TYPE_IMG
- en: If I try to send a message from this first tab, we're going to see it there
    with the name Jen, and the second tab also looks good; we're not seeing that message
    from Jen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now I can go ahead and join a room again. I''m going to use the name `Mike`
    and we''re going to join `The Office Fans` one more time. When I join the room
    I do see Andrew and Mike both connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd895204-c18d-460d-bdb3-daab3743d7b1.png)'
  prefs: []
  type: TYPE_IMG
- en: If I send a message like `Should work` I see it there, and I also see it in
    the tab of the other user connected to `The Office Fans` room. Once again it's
    not visible to someone else connected to a different room. That is all we need
    to do to get our messages sending correctly. The last thing to do is to wire that
    up for `createLocationMessage`.
  prefs: []
  type: TYPE_NORMAL
- en: Now as we just saw we were also able to fix the validation issue, if I try to
    hit *enter* right now, nothing happens. I don't get moved out of the box, the
    focus doesn't change and no message is sent, which is great.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up createLoactionMessage for individual room
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we're going to fix `createLocationMessage`. You're going to want to find
    the user just like we do above, incase of createMessage. If there is a user you're
    going to want to emit the location to just people in the same room. Instead of
    providing `Admin` as the name you're also going to want to use the user's real
    name. We need to make sure it still gets sent to users in the same room and make
    sure it does not get sent to users in other rooms.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this one, I am going to start by fetching the user since we are going
    to need to use the information on that object. We''re going to make a variable
    user calling `users.getUser`, and we''re going to pass in that socket ID, `socket.id`.
    This is identical to the line we used above in `createMesssage`. Now we only want
    to emit a message if we do find a user, so I''m going to check if the user object
    exists. If it does, we can take `io.emit` line, cut it out, and copy it inside
    the `if` statement. If it does exist, we are going to emit `newLocationMessage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we do still need to emit it to just a specific room by adding on a call
    to `to` and passing in the room name, `user.room` stores that information, and
    last but not least we do want to update the name. Instead of sending the static
    `Admin` name, we''re going to use the user''s real name, `user.name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place `createLocationMessage` is now wired up to be private and
    to send across the correct information. Over inside Chrome, I''m going to go through
    my tabs one at a time giving them a refresh, and on the second tab I am going
    to be sending the location. This is going to take just a couple of seconds to
    actually fetch it, and I see it right there with the name showing up correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/acf17b34-bdc3-468c-bbc2-3acee666f394.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have Andrew and we have a link to view the location inside of Google Maps.
    Now if I go to the second tab, the user who is also connected to `The Office Fans`,
    I see the exact same location message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26922a5e-a18e-4dc4-80e3-36eab19773de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If I go to the first one, you can see that Jen does not have access to that
    message because she''s in a different room:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/610c178d-3376-4d3e-97ef-74e18c941dc5.png)'
  prefs: []
  type: TYPE_IMG
- en: She can always share her location with anybody in her room, that happens to
    be nobody, this message is not going to show up anywhere because no one else is
    connected to `LOTR`.
  prefs: []
  type: TYPE_NORMAL
- en: With that in place we are now done, our messages are private, they're only going
    to be visible to folks in the same room. Let's go ahead and wrap this one up by
    committing our changes.
  prefs: []
  type: TYPE_NORMAL
- en: Committing the individual room changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''m going to shut down the `nodemon` server, use `clear`, and we can run `git
    status` to see what kind of changes we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/494fbbcd-6e75-4209-9e78-e3af2d70bcaf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we just have two files. They''re modified, which means we can use `git
    commit` with the `-am` flag, whether it''s separate or the same they have identical
    feature sets, and then we provide our message string, `Send messages to only people
    in same room`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: With this in place we can go ahead and use `git push` to push this up to GitHub,
    and I'm also going to go ahead and deploy to Heroku using `git push heroku master`.
    Once it's deployed on Heroku, we can take just a quick moment to make sure all
    of those features we just added are still working as expected. I expect they will
    still work but it's definitely worth checking out because the environments are
    a little different and there's always a chance something can go wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if something does go wrong, as a reminder you can always use `heroku logs`,
    this is going to show you the logs on the server, it''s usually kind of cryptic
    but when an error occurs you''re going to see a really big block. It''s usually
    pretty easy to spot and it usually contains useful information as to what went
    wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0e11bc9-b0fc-4b21-9656-d4871c8e964a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It looks like our app deployed successfully, so I can use `heroku open` to
    open it up inside my browser, and once it''s open we can actually visit some chat
    rooms. I''m going to close down my localhost tab and I''m going to join as `Andrew`,
    the room `Philadelphia`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5920ceb-3354-4ee7-95c0-135a8393a6d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once I''m in the room, I am going to send a message, and then I''m going to
    add a second user to the room. We want to visit our Heroku app website. I''m going
    to visit that, we''ll join the room as `Vikram`, and we can join the exact same
    room `Philadelphia`. When I join, I see the People list updates for both and sending
    messages does still work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/abb82a8b-9020-4ea3-976a-42be923d7ccb.png)'
  prefs: []
  type: TYPE_IMG
- en: Messages from the second tab do appear in first tab, this is great. All this
    is possible because we wired up `server.js`, keeping track of users over time.
    When they first join we add them to the list, when they send messages we make
    sure to use their information, and when they leave we remove them from the list.
    This ensures that the People list is always up to date and that messages are only
    getting sent to others in the same room.
  prefs: []
  type: TYPE_NORMAL
- en: New feature ideas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our People list in place and our messages are only getting
    sent to the users in the same chatroom, we are done. But that doesn't mean you
    have to stop developing the chat app, students always like to add on new features.
  prefs: []
  type: TYPE_NORMAL
- en: I'd like to give you a few ideas as to what you can build right now. You might
    get stuck while adding these features. It might be a real pain in the neck and
    it might take forever, but I promise you're going to learn so much along the way
    when you're doing something on your own. Now you have all the skills to do these
    features so let's just go down the list really quick.
  prefs: []
  type: TYPE_NORMAL
- en: One awesome idea would be to make chatrooms case-insensitive. Currently, if
    I go to `LOTr` with a lowercase `r`, I'm not actually in the same chatroom as
    my friend who's in `LOTR` uppercase `R`. It would be nice if regardless of case
    we were all in the same room.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next up, I''d like to make usernames unique. Currently, I can copy the URL
    and paste it in a new tab, and now I have two people with the name of Jules:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/23488be5-dfa2-4487-8987-83fe4a1e7ccd.png)'
  prefs: []
  type: TYPE_IMG
- en: It would be cool to reject new users who also have the same name as an existing
    user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next up, one idea is to add a list of the currently active chatrooms down below.
    This could be a select drop-down, it's going to repopulate kind of like the People's
    list repopulates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is by far the hardest feature but I think it would be really cool. That
    means I would see a drop-down between the Join button and the Room name input
    box, and it would have the two currently active rooms, `LOTr` and `LOTR` with
    an uppercase R, although hopefully if you implement that first feature we would
    only see one room. Then instead of typing in a `room` name, I could just pick
    one from the drop-down, type in a name and join that way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just a few ideas of how you can continue on with the chat app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how we can create classes in ES6 using the `class`
    keyword. We made a `Person` class, which was just an example, and we made our
    `Users` class, which we'll actually be using throughout the book. We looked at
    adding custom methods as well as setting up our `constructor` function. Then,
    we created `removeUser`, `getUser`, and `getUserList` methods in the similar manner.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we looked into wiring up the `users` class we created and updated the
    `People` list when a user joins or left the chatroom. Then we looked into sending
    messages to a particular room and not to all the users. At last, we added a few
    ideas, which you can look into to enhance the features of the chatroom.
  prefs: []
  type: TYPE_NORMAL
- en: In the chapter, we are going to learn about Async/Await project setup.
  prefs: []
  type: TYPE_NORMAL
