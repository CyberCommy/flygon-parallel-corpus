- en: Chapter 2. Configuring a Secure and Optimized Kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements for building and using a kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a USB boot media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving a kernel source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and building a kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and booting from a kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing and debugging a kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a console for debugging using Netconsole
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging a kernel on boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For all Linux distributions, including Ubuntu, CentOS, and Fedora, a kernel
    is vital. It is by default installed for most Linux versions when the OS is installed,
    hence we generally don't have to compile the kernel. Even when there is a critical
    update to be installed in the kernel, it can be done using `apt-get` or `yum`
    on the Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there might be few situations where we have to compile the kernel
    from a source ourselves. A few of these situations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling experimental features in the kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling new hardware support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging the kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the kernel source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements for building and using a kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start building the Linux kernel, we must ensure that a working
    boot media exists for the Linux system. This can be used to boot into the Linux
    system if the boot loader is not configured properly. You will learn how to create
    a USB boot media, retrieve a kernel source, configure and build a kernel, and
    perform installation and booting from a kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a USB boot media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A USB boot media can be created on any USB media device that is formatted as
    ext2, ext3, or VFAT. Also, ensure that enough free space is available on the device,
    varying from 4 GB required for the transfer of a distribution DVD image, 700 MB
    in the case of a distribution CD image, or just 10 MB to transfer a minimal boot
    media image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before carrying out the steps, we need to have an image file of the Linux installation
    disk, which we can name `boot.iso`, and a USB storage device, as specified previously.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the USB boot media, we need to perform these commands as the root:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we need to install the `syslinux` boot loader by executing the following
    command on the USB storage device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create mount points each for the `boot.iso` file and the USB storage device
    by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, mount the `boot.iso` file on the mount point created for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command the `-o loop` option is used to create a pseudo device,
    which acts as a block-based device. It treats a file as a block device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will mount the USB storage device on the mount point created for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once both `boot.iso` and the USB storage device are mounted, we will copy the
    `isolinux` files from the `boot.iso` to the USB storage device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the command to use the `isolinux.cfg` file from `boot.iso` as the
    `syslinux.cfg` file for the USB storage device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once done with the previous command, unmount `boot.iso` and the USB storage
    device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, reboot the system, and then try to boot with the USB boot media to verify
    that we are able to boot with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we copy the required files from the `boot.iso` file to the USB storage
    media and use the `isolinux.cfg` file from `boot.iso` in the USB storage media
    as the `syslinux.cfg` file, it converts the USB storage media into a bootable
    media device, which can be used to boot the Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving a kernel source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most Linux distributions include kernel sources in them. However, these sources
    may tend to be a bit out of date. Due to this, we may need to get the latest sources
    when building or customizing the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the Linux kernel developer community uses the **Git** tool to manage
    source code. Even Ubuntu has integrated Git for its own Linux kernel source code,
    hence enabling kernel developers to interact better with the community.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install the `git` package using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Linux kernel source code can be downloaded from various sources, and we
    will discuss the methods used to download from these sources:'
  prefs: []
  type: TYPE_NORMAL
- en: We can find the Linux source code in the form of a complete tarball and also
    as an incremental patch on the official web page of Linux kernel at [http://www.kernel.org](http://www.kernel.org).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is always recommended that you use the latest version unless you have a specific
    reason to work with an older version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ubuntu''s kernel source can be found under Git. Each release code of the kernel
    is separately maintained on [kernel.ubuntu.com](http://kernel.ubuntu.com) in its
    own Git repository, which is located at:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git://kernel.ubuntu.com/ubuntu/ubuntu-<release>.git` or [http://kernel.ubuntu.com/git-repos/ubuntu/](http://kernel.ubuntu.com/git-repos/ubuntu/)'
  prefs: []
  type: TYPE_NORMAL
- en: We can clone the repository using Git to get a local copy. The command will
    get modified as per the Ubuntu release we are interested in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To obtain the precise tree execute the command shown in the following screenshot:![How
    to do it…](img/B04234_02_01.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The precise tree will get downloaded using the command in the preceding image.
    To download any other tree, the syntax of the command will be: git clone `git://kernel.ubuntu.com/ubuntu/ubuntu-<release>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The downloaded file would be in either the GNU zip (`.gzip`) format or the
    `.bzip2` format. After downloading the source file, we need to uncompress it.
    If the tarball is in `.bzip2`, use this command for it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If it is in the compressed GNU `.gz` format, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the different methods that are mentioned in the preceding section, we
    are able to download the source code of the Linux kernel. Using any option depends
    on the user's choice and preference.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and building a kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The need to configure the kernel could arise due to many reasons. We may want
    to resize the kernel to run only the necessary services, or we may have to patch
    it to support new hardware that was not supported earlier by the kernel. This
    could be a daunting task for any system administrator, and in this section, we
    take a look at how we can configure and build the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is always recommended that you have ample space for kernels in the boot partition
    of any system. We can either choose the whole disk install option or set aside
    a minimum of 3 GB of disk space for the boot partition.
  prefs: []
  type: TYPE_NORMAL
- en: After installing the Linux distribution and configuring development packages
    on the system, enable the root account as well as sudo for our user account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, before we start with the installation of any packages, run the following
    command to update the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, check whether the `build-essential` package is already installed
    or not. If not, we can install it using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This package is used to build the Linux kernel on a x86_64 system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need a few other requirements to compile the kernel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest version of `gcc` should be installed using this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the `ncurses` development package using this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A few other packages may also be needed to cross-compile the Linux kernels:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install `ncurses-dev`, which is required to run make `menuconfig`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we are done with the steps in the *Getting Ready* section, we can move
    on to the process of configuring and building the kernel. This process will take
    a lot of time, so be prepared:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Linux kernel by visiting the [http://www.kernel.org](http://www.kernel.org),
    as shown in this screenshot:![How to do it…](img/B04234_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It can also be downloaded using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the download is completed, move to the directory where the download has
    been saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the downloaded file has been saved in the `Downloads` folder, the following
    command should be executed:![How to do it…](img/B04234_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, extract the downloaded `.tar` file to the `/usr/src/` location using the
    following command:![How to do it…](img/B04234_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, switch to the directory where the extract has been made using this command:![How
    to do it…](img/B04234_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, run the command to configure the Linux kernel so that it can be compiled
    and installed on the system.![How to do it…](img/B04234_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may have to use `sudo` before the preceding command if your account doesn't
    have admin privileges.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the preceding command is executed, a pop-up window will appear, containing
    a list of menus. Select the items of the new configuration.![How to do it…](img/B04234_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to check for the **File systems** menu.![How to do it…](img/B04234_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under it, check whether `ext4` is chosen or not, as shown in following screenshot.
    If it is not selected, you need to select it now.![How to do it…](img/B04234_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, save the configuration.![How to do it…](img/B04234_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, compile the Linux kernel. The compile process will take around 40 to 50
    minutes to complete, depending on the system configuration. Run the command, as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first download the Linux kernel source, and then, after extracting it at
    a particular location, we configure the kernel for the compilation process.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and booting from a kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After having spent a lot of time configuring and compiling the kernel, we can
    now start the process of installing the kernel on the local system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting the installation of the kernel, make sure to back up all your
    important data on the system. Also, make a copy of `/boot/` on an external storage
    that is formatted in the FAT32 filesystem. This will help with repairing the system
    if the installation process fails for any reason.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After completing the compilation of the kernel, we can then start following
    the commands required to proceed with the installation of the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Install drivers by running the following command:![How to do it…](img/B04234_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding command will copy the modules to a subdirectory of`/lib/`modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run the following command to install the actual kernel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This command executes `/sbin/installkernel`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new kernel will be installed in `/boot/vmlinuz-{version}`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a symbolic link already exists for `/boot/vmlinuz`, it will get refreshed
    by linking `/boot/vmlinuz` to the new kernel.
  prefs: []
  type: TYPE_NORMAL
- en: The previously installed kernel will be available as `/boot/vmlinuz.old`. The
    `config` and `System.map` files will also be available at the same location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will copy the kernel to the `/boot` directory by running this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now build the initial RAM disk.![How to do it…](img/B04234_02_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to copy `System.map`, which contains a list of kernel symbols
    and their corresponding address. For this, run the following command, appending
    the kernel's name to the destination file.![How to do it…](img/B04234_02_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create `symlink /boot/System.map`, which will point to `/boot/System.map-YourKernelName`
    `if /boot` is on a filesystem that supports symlinks.![How to do it…](img/B04234_02_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If `/boot` is on a filesystem that does not support symlinks, just run this
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the configuration and the compilation of the kernel have been completed,
    we start with the process of installing the kernel. The first command will copy
    the modules to a subdirectory of `/lib/`modules.
  prefs: []
  type: TYPE_NORMAL
- en: The second command executes `/sbin/installkernel`. Also, the new kernel will
    be installed in `/boot/vmlinuz-{version}`. While doing this, if a symbolic link
    already exists for `/boot/vmlinuz`, it will get refreshed by linking `/boot/vmlinuz`
    to the new kernel. The previously installed kernel will be available as `/boot/vmlinuz.old`.
    The same is applied to the `config` and `System.map` files.
  prefs: []
  type: TYPE_NORMAL
- en: Once everything is done, we can reboot the system to boot from the new kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Testing and debugging a kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important part of any open or closed **Software Development Cycle** (**SDC**)
    is testing and debugging. This also applies to the Linux kernel. The end goal
    of testing and debugging is to ensure that the kernel is working as it did earlier,
    even after installing a new kernel source code.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a console for debugging using Netconsole
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to capture a kernel panic, it becomes hard once the system has been
    rebooted as there are no logs created for this. To solve this issue, we can use
    Netconsole.
  prefs: []
  type: TYPE_NORMAL
- en: A kernel module helps by logging kernel print messages over UDP. This becomes
    helpful with debugging problems when logging on to the disk fails.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before starting the configuration of Netconsole, we need to know the MAC address
    of the system where the UDP packets will be sent. This system is referred to as
    a receiver, and it may be in the same subnet or a different one. These two cases
    are described here:'
  prefs: []
  type: TYPE_NORMAL
- en: The first case is when the receiver is in the same subnet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The IP address of the receiver in this example is `192.168.1.4`. We will send
    UDP packets to this IP address.![Getting ready](img/B04234_02_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's find the MAC address of the receiver system by executing this command.
    In the following case, the IP address is of the receiver system.![Getting ready](img/B04234_02_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see in the preceding example, `90:00:4e:2f:ac:ef` is the MAC address
    we need.
  prefs: []
  type: TYPE_NORMAL
- en: The second case is when the receiver is not in the same subnet. In this case,
    we need to first find the default gateway. To do so, we run this command:![Getting
    ready](img/B04234_02_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, the default gateway is `192.168.1.1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to find the MAC address of the default gateway. First, send a packet
    to the default gateway in this way:![Getting ready](img/B04234_02_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's find the MAC address.![Getting ready](img/B04234_02_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, `c0:3f:0e:10:c6:be` is the MAC address of the default gateway that we
    need.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the MAC address of the receiver, we can start with the configuration
    process of Netconsole.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin with, we need to change the kernel options at boot time. If you are
    using Grub as the bootloader, it will, by default, boot the kernel with the `quiet
    splash` option. However, we don't wish this to happen. So, we need to change the
    kernel options.
  prefs: []
  type: TYPE_NORMAL
- en: First, create a backup of Grub at the `/etc/default/grub` location using the
    command shown in the following screenshot:![How to do it…](img/B04234_02_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open any editor of your choice to edit `/etc/default/grub`.![How to do
    it…](img/B04234_02_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the line `GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"` and replace it with
    `GRUB_CMDLINE_LINUX_DEFAULT="debug ignore_loglevel"`.![How to do it…](img/B04234_02_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, run this command to update Grub accordingly:![How to do it…](img/B04234_02_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we have implemented the preceding commands, we need to initialize Netconsole
    at boot time. For this, we first need to know the IP address and the interface
    of the sender system. This can be done using the command shown in the following
    screenshot:![How to do it…](img/B04234_02_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also need the IP address and MAC address of the receiver system, which we
    took a look at in the *Getting Ready* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's start initializing Netconsole. First, let's get `netconsole` to load
    on boot by adding the module to `/etc/`modules.![How to do it…](img/B04234_02_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we'll make sure that it has the appropriate options configured as well.
    For this, we will add the module options to the `/etc/modprobe.d/netconsole.conf`
    file and run the command shown in this screenshot:![How to do it…](img/B04234_02_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the preceding command, the part that starts with Netconsole has the following
    syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We have used `6666` for both `<LOCAL_PORT>` and `<REMOTE_PORT>`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to set up the receiver.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending on which version of Linux is being used as the receiver, the command
    used to set up it up may vary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Try setting up the receiver without an IP address if the preceding command
    doesn''t work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If you are using a variant of Linux that has a different version of Netcat,
    the following error message will be printed when you try using the preceding commands:![How
    to do it…](img/B04234_02_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you get the preceding error message, you can try out the command shown in
    this screenshot:![How to do it…](img/B04234_02_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let the preceding command keep running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to check whether everything is working properly. Reboot the sender
    system, and then execute the command shown in this screenshot:![How to do it…](img/B04234_02_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you need to check the receiver system to take a look at whether the kernel
    messages have been received or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once everything is done, press *Ctrl* + *C.* Then, you can check for the messages
    in `~/netconsole.log`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To capture kernel panic messages, we configure Netconsole, which logs messages
    over the network. To do this, we need one more system on the network that serves
    as a receiver. Firstly, we try to find the MAC address of the receiver system.
    Then, we change the kernel boot options. After updating Grub, we start initializing
    Netconsole on the sender system that we want to debug. Finally, we then we set
    up the receiver system to start receiving kernel messages.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using a Windows system as a receiver, then you can use **Netcat**
    for Windows, which is available at [http://joncraton.org/files/nc111nt.zip](http://joncraton.org/files/nc111nt.zip).
    Execute the following steps to set up a Windows receiver:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the file from the given link and extract it in a specified location
    (that is, `C:\Users\Tajinder\Downloads\nc>`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open Command Prompt. Then, move to the folder where you have extracted
    Netcat.![There's more…](img/B04234_02_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, run the command shown here:![There's more…](img/B04234_02_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, `192.168.1.3` is the same as `<RECEIVER_IP_ADDRESS>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let the preceding command run and continue along with the commands mentioned
    in step 9\. Once this is done, press *Ctrl* + *C*. You will find messages in `netconsole.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debugging a kernel on boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, your system might fail to boot changes within the kernel. Hence,
    it is important that when you're creating reports about these failures, all the
    appropriate information about debugging is included. This will be useful for the
    kernel team in order to resolve the issue.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are trying to capture error messages that appear during boot, then it
    is better to boot the kernel with the `quiet` and `splash` options removed. This
    helps you to see messages, if any, that appear on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To edit the boot option parameters, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Boot the machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the BIOS screen, press the *Shift* key and hold it down. You should see
    the Grub menu after the BIOS loads.![How to do it…](img/B04234_02_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the kernel entry that you want to boot and press *e*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, remove the `quiet` and `splash` keywords (these can be found in the line
    starting with Linux)![How to do it…](img/B04234_02_37.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *x* to boot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can see error messages, if any, on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the type of error messages you encounter, there are other boot
    options you could try. For example, if you notice ACPI errors, try booting with
    the `acpi=off` boot option.
  prefs: []
  type: TYPE_NORMAL
