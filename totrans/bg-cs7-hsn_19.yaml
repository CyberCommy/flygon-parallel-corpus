- en: Using the Nullable Feature to Make Apps More Stable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about using the *nullable* keyword to ensure
    that records that have missing values can still be brought, for example, into
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Show People button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Crank up Visual Studio, and make a project. What we will do first is to put
    a simple button into the HTML page. For this, go to Toolbox, grab a `Button` control,
    and drop it below the line that begins with `<form id=...`. Change the text on
    the button to say `Show People`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will make a class called `Person`, and you will make that class from the
    database. To do this, go to the View menu and open SQL Server Object Explorer.
    Remember that we made a database called `People`, and it is comprised of these
    fields: `Id`, `NAME`, and `DATEADDED`.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a field to the people database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s add one more field. Right-click on the dbo.People table icon, and
    select View Code. To make an additional field, type the following after `DATEADDED`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a new field type, `decimal (18,2)` means a field that is 18 units wide
    and has 2 decimals; that is, it''s a total of 18 units wide with 2 to the right
    and 16 units to the left for a total of 18 units altogether. Next, click on Update
    and then the Update Database button in the dialog box that appears. Now, as you
    can see in the SQL Server Object Explorer pane, this field has been added, as
    shown in *Figure 19.4.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0032eaf-f582-4ff0-82b8-b6fd4108f467.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.4.1: The Salary field has been added to dbo.People'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the dbo.People table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, with that in place, you can modify the table. Right-click on the dbo.People
    table icon and go to View Data. To illustrate the concept, enter some salary amounts
    in a few of the rows and leave the others as NULL. Thus, a combination of databases
    will get NULL information. The dbo.People now looks like *Figure 19.4.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fdc3c83-7993-4dac-a0dc-8598419a01de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.4.2: Salaries are entered into the table'
  prefs: []
  type: TYPE_NORMAL
- en: If you reload it by clicking the Refresh(![](img/cb8f5266-5c08-4e5c-ae3e-351bde05611e.png))
    button, it confirms that it's saved.
  prefs: []
  type: TYPE_NORMAL
- en: If you double-click on the Salary Column heading, it expands the column to fit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, if you enter something such as `77777777777777777777` for Salary, an
    error message is displayed indicating Invalid value for cell (row, column). So,
    just keep in mind that if you try to enter something like `788777.988888`—it will
    round it automatically to two decimal places as `788777.99`. So, that''s basically
    how `decimal (18,2)` works: it imposes restrictions on the data that can be entered.'
  prefs: []
  type: TYPE_NORMAL
- en: Writing the code for this project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, go to the Design view, and double-click on the Show People
    button. This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. The
    relevant portion of the starting code for this project should look like *Figure
    19.4.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d51ceffc-e93f-4be9-9733-d184bc069751.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.4.3: The starting code section for this project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will write code. Let''s go through the creation of the code, step-by-step.
    First, near the top of the file under `using System`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll use this line to make a list of people. Then, also enter the following
    just below it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating the person class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now for the next stage; we''ll make a class called `Person`; so, enter the
    following just above the line that begins with `public partial class _Default...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Making the properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will make two properties. So, enter the following lines between a
    set of curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Because the information referenced by public decimal could be missing, you put
    in a `?` symbol. This is a *nullable* quantity, which we'll call `Salary`. This
    is the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to make use of this, you have to take the following typical steps. First,
    you want to clear the output from the label any time somebody clicks on the button,
    so enter the following between a set of curly braces under the line that begins
    with `protected void Button1_Click...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Making the list of people
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, we''ll make a list of people, so enter the following under
    this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we call this as `peopleList` and set that equal to a new list of persons.
  prefs: []
  type: TYPE_NORMAL
- en: Building the connection string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, you need to get the connection string, so, on the following
    line, you start by entering `string connString =`, followed by the `@` symbol
    to make it a verbatim string, and then you put the `""` symbols. Now to get the
    connection string, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on View in the menu bar and select SQL Server Object Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the People database and select Properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Properties pane, double-click on Connection String to select it with
    its long description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then right-click on the long description and copy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the description between the set of `""` symbols.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The connection string line should then look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can now close the SQL Server Object Explorer and Properties panes.
  prefs: []
  type: TYPE_NORMAL
- en: Entering the SQL-related code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s go to SQL-related code. First, enter the following below the connection
    string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We'll call the SQL connection, `conn`, and we will initialize the new SQL connection
    with the connection string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s make a command; enter the following between a set of curly braces
    below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you open a connection by entering the following just below that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, enter the following below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Adding people to the list from the table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the next stage in the process, start by entering the following between
    a set of curly braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'While this condition returns `True`, we will make objects using the information
    from the table in the database. In order to do that, enter the following between
    a set of curly braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, the first part of this line gets the column at index 1, converts it to
    a string, and then, assigns it to the name property of each object. Then, we say
    `Salary = reader[3]`, and because this is the one that could be missing a value,
    we say `decimal?`—as a nullable decimal, in other words.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are getting close at this point; the last stage, of course, is to display
    the records to see the effect of the nullable. Outside all of the curly braces
    beneath the `peopleList.Add...` line (as shown as follows), enter the following
    `foreach` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, enter the following between a set of curly braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is the heart of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Before running this application, once again note that an interesting piece is
    the `Salary` property in `...Salary = reader[3] as decimal? })`. The question
    mark after `as decimal` indicates that it's a nullable decimal. A decimal value
    could be missing, which is a different situation. If you just put `as decimal`,
    the tool tip would say that it's an error.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, crank this up in your browser. Click on the Show People button. Let''s
    examine the results, as shown in *Figure 19.4.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef146936-e850-432d-9c98-84c2b567dfcc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.4.4: The results of running our program'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that when there's no salary, it displays just the name—it doesn't give
    anything else, nor does it crash. So, it's pretty good.
  prefs: []
  type: TYPE_NORMAL
- en: This is a practical application of that little symbol, the question mark, after
    our data type and nullable.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about using the *nullable* keyword to ensure that
    records that have missing values can still be brought, for example, into an application.
    You added a field to the `People` database, modified the `dbo.people` table, created
    a `Person` class, made a list of people, built a connection string, entered SQL-related
    code, and added people to the list from the `dbo.people` table.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about dragging charts into the page and
    then making them work with some simple tables inside the SQL Server through C#
    as the language that connects the page and the database.
  prefs: []
  type: TYPE_NORMAL
