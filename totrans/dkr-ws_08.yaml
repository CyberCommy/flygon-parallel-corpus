- en: 8\. CI/CD Pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces **Continuous Integration and Continuous Delivery** (**CI/CD**),
    the most crucial step before going to production. This is the intermediate stage
    between development and production. This chapter will demonstrate how Docker is
    a robust technology for CI and CD, and how easily it integrates with other widely
    used platforms. By the end of the chapter, you will be able to configure GitHub,
    Jenkins, and SonarQube and incorporate them to publish your images for production
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, you learned how to write `docker-compose` files and explored
    the networking and storage of the Services. In this chapter, you will learn how
    to integrate the various microservices of an application and test it as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: '**CI/CD** stands for **Continuous Integration and Continuous Delivery**. Sometimes,
    **CD** is used for **Continuous Deployment** as well. Deployment here means making
    an application publicly accessible from a specific URL through an automated pipeline
    workflow, while delivery means making the application ready to be deployed. In
    this chapter, we will focus on the concept of CI/CD.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter discusses how Docker integrates into the CI/CD pipeline in step-by-step
    exercises. You will also learn how to install and run Jenkins as a Docker container.
    Jenkins is an open-source automation server. You can use it to build, test, deploy,
    and facilitate CI/CD by automating parts of software development. The installation
    of Jenkins is merely one Docker command. Installing Jenkins on Docker is more
    robust than installing it as an application, and it won't be tightly coupled to
    a specific operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have accounts on GitHub and Docker Hub, please create them. You
    can do so for free at the following links: [www.github.com](http://www.github.com)
    and [http://hub.docker.com](http://hub.docker.com).'
  prefs: []
  type: TYPE_NORMAL
- en: What Is CI/CD?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CI/CD is a method that helps application development teams to provide code changes
    to users more frequently and reliably. CI/CD introduces automation into the stages
    of code deployment.
  prefs: []
  type: TYPE_NORMAL
- en: When several developers collaborate and contribute to the same application (each
    of them responsible for a certain microservice or fixing a specific bug), they
    use a code version control provider to aggregate the application using the latest
    code versions that the developers have uploaded and pushed. GitHub, Bitbucket,
    and Assembla are examples of version control systems. The developers and testers
    push the application code and Docker files to automation software to build, test,
    and deploy the CI/CD pipeline. Jenkins, Circle CI, and GitLab CI/CD are examples
    of such automation platforms.
  prefs: []
  type: TYPE_NORMAL
- en: After passing the testing, a Docker image is built and published to your repository.
    These repositories can be either Docker Hub, your company's **Docker Trusted Register**
    (**DTR**), or Amazon **Elastic Container Registry** (**ECR**).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, as in *Figure 8.1*, we will use a GitHub repository for the
    code version control. Then, we will use Jenkins to build and publish the framework
    and Docker Hub as a registry.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: CI/CD pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.1: CI/CD pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: You must build the Docker image before the production stage since there is no
    `build` keyword in the `docker-stack.yml` file that is used in production. The
    image will then be deployed to production in an integrated and automated target
    environment. In production, the operations (or DevOps) people configure the orchestrators
    to pull the images from the registry. Kubernetes, Docker Swarm, and Google Kubernetes
    Engine are examples of production orchestrators and management services that can
    be used to pull images from the registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize, we have three main steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Upload the code to GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a project in Jenkins and enter the GitHub and Docker Hub credentials.
    Jenkins will automatically build the image and push it for you to the Docker Hub
    account. When you push the code to GitHub, Jenkins automatically detects, tests,
    and builds the image. If no errors are generated, Jenkins pushes the image to
    the registry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the image is on your Docker Hub account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next exercise, you will install Jenkins as a container that will be used
    to build the image. Jenkins is one of the most popular platforms for testing and
    is in great demand in the market. Jenkins has several project types. In this chapter,
    we will use the Freestyle project type.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please use `touch` command to create files and `vim` command to work on the
    file using vim editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.01: Installing Jenkins as a Container'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will install Jenkins, finish its setup, and install the
    preliminary plugins. You will install the Git and GitHub plugins that will be
    used throughout this chapter. Perform the following steps to successfully install
    Jenkins as a container:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to pull the Jenkins image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2: Output of the docker run command'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.2: Output of the docker run command'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are many Jenkins images on Docker Hub. Feel free to pull any of them and
    play with the ports and shared volume, but pay attention to the deprecated images
    as the Jenkins official image is now deprecated for the `Jenkins/Jenkins:lts`
    image. So, read the documentation of the images carefully. However, do not worry
    if one does not work. It might not be your mistake. Look for another and follow
    the instructions of the documentation carefully.
  prefs: []
  type: TYPE_NORMAL
- en: Open the browser and connect to the Jenkins service at `http://localhost:8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If it gives you an error message stating it cannot reach the Docker daemon,
    add Jenkins to the `docker` group using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If your machine's operating system is Windows, the localhost might not be resolved.
    Run the `ipconfig` command in Windows PowerShell. In the second section of the
    output, `ipconfig` displays the information of the `switch` network. Copy the
    IPv4 address, and use it instead of the localhost throughout the exercises.
  prefs: []
  type: TYPE_NORMAL
- en: You can also get the IP address from `Control Panel` > `Network and Sharing
    Center` and then clicking on `Details` for your Ethernet or Wi-Fi connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, Jenkins will ask for an `Administrator password` to unlock
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3: Getting started with Jenkins'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.3: Getting started with Jenkins'
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins autogenerates a password for you to use to unlock the application. In
    the next step, you will see how to get this password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `docker container ls` command to get the list of the currently running
    containers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the details of the container that is crafted from the `jekinsci/blueocean`
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the container ID and run the `docker logs` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the log file, you will find six lines of asterisks. The password
    will be in between them. Copy it and paste it in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4: Output of the docker logs command'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.4: Output of the docker logs command'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select `Install suggested plugins`. Then, click `Skip and continue as admin`.
    Click `Save and Finish`:![Figure 8.5: Installing plugins to customize Jenkins'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.5: Installing plugins to customize Jenkins'
  prefs: []
  type: TYPE_NORMAL
- en: In the suggested plugins, there are Git and GitHub plugins that Jenkins will
    install automatically for you. You will need these plugins for all the coming
    exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In *Exercise 8.04*, *Integrating Jenkins and Docker Hub,* you will need to install
    more plugins so Jenkins can push the image to the Docker Hub registry. This will
    be discussed in detail later, as well as how to manage Jenkins plugins in a step-by-step
    lab.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, it will display `Jenkins is ready!`. Click `Start using
    Jenkins`:![Figure 8.6: Setting up Jenkins'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.6: Setting up Jenkins'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Create a job` to build the software project:![Figure 8.7: Welcome
    page of Jenkins'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.7: Welcome page of Jenkins'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot verifies that you have successfully installed Jenkins
    on your system.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we will follow the CI/CD pipeline in this chapter. The
    first step is uploading the code to GitHub and then integrating Jenkins with GitHub
    so that Jenkins can pull the code and build the image automatically. The final
    step will be to integrate Jenkins with the registry to push that image to the
    registry without any manual interference.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating GitHub and Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing Jenkins, we will create our first job and integrate it with
    GitHub. In this section, as in *Figure 8.8*, we will focus solely on GitHub and
    Jenkins. Docker Hub will be discussed a little later.
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 8.8: Integrating GitHub and Jenkins'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.8: Integrating GitHub and Jenkins'
  prefs: []
  type: TYPE_NORMAL
- en: We will use a simple Python application to count the number of hits on a website.
    Every time you refresh the page, the counter will increment, resulting in an increase
    in the number of hits on the website.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for the `Getting Started` application can be found at the following
    link: [https://github.com/efoda/hit_counter](https://github.com/efoda/hit_counter).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The application consists of four files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.py`: This is the Python application code. It uses `Redis` to keep track
    of the counts of the number of hits on a website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requirments.txt`: This file contains the dependencies needed for the application
    to work properly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dockerfile`: This builds the image with the required libraries and dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker-compose.yml`: It is essential to have the YAML file when two or more
    containers are working together.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this simple application, we also have two services, `Web` and `Redis`, as
    shown in *Figure 8.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9: The hit_counter application architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.9: The hit_counter application architecture'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not know how to upload this application to your GitHub account, don't
    worry. The next exercise will guide you through this process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.02: Uploading the Code to GitHub'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use GitHub to save your code and projects. In this exercise, you will
    learn how to download and upload the code to GitHub. You can do that by forking
    the code on the GitHub website or pushing the code from Command Prompt. In this
    exercise, you will do it from Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to upload the code to GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the GitHub website, create a new empty repository with the name `hit_counter`.
    Open a terminal and clone the code by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the code is downloaded to your local machine by listing the directories.
    Then, open the application directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will find the application files downloaded to your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize and configure Git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your username and email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify the names of the Git accounts, `origin` and `destination`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all the content in the current path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add a specific file instead of all the files by typing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify a `commit` message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Push the code to your GitHub account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It will ask you for your username and password. Once you''ve logged in, the
    files will be uploaded to your GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10: Pushing the code to GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.10: Pushing the code to GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: Check your GitHub account. You will find the files are uploaded there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have finished the first step in the CI/CD pipeline and have uploaded
    the code to GitHub, we will integrate GitHub with Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Starting from this point and going forward, replace the GitHub username, `efoda`,
    with your username.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.03: Integrating GitHub and Jenkins'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You installed Jenkins as a container in *Exercise 8.01*, *Installing Jenkins
    as a Container*. In this exercise, you will create a job in Jenkins and configure
    it with GitHub. You will check Jenkins'' `Output Console` to verify that it has
    built the image successfully. You will then modify the `Dockerfile` on GitHub
    and ensure that Jenkins has detected the change in the `Dockerfile` and rebuilt
    the image automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to Jenkins in the browser. Click on `Create a job`:![Figure 8.11: Creating
    a job in Jenkins'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.11: Creating a job in Jenkins'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the `Enter an item name` textbox by providing the name of the project.
    Click `Freestyle project` and then click `OK`:![Figure 8.12: Selecting Freestyle
    project'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.12: Selecting Freestyle project'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see six tabs: `General`, `Source Code Management`, `Build Triggers`,
    `Build Environment`, `Build`, and `Post-build Actions`, as in *Figure 8.13*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `General` tab, select the `Discard old builds` option so that the old
    builds do not eat up your disk space. Jenkins will do the housekeeping for you
    as well:![Figure 8.13: Selecting the Discard old builds option'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.13: Selecting the Discard old builds option'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Source Code Management` tab, select `Git`. In `Repository URL`, enter
    `https://github.com/<your GitHub username>/hit_counter`, as in *Figure 8.14*.
    If you do not have Git, check your plugins and download the Git plugin. We will
    talk about managing plugins in *Exercise 8.04*, *Integrating Jenkins and Docker
    Hub*:![Figure 8.14: Entering the GitHub repository URL'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.14: Entering the GitHub repository URL'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Build Triggers` tab, select `Poll SCM`. This is where you specify how
    often you want Jenkins to perform the tests. If you enter `H/5` with four asterisks
    and spaces in between each asterisk, this means that you want Jenkins to perform
    the test every minute, as in *Figure 8.16*. If you enter it as `H * * * *`, this
    means the polling will be done every hour. If you do it as `H/15 * * * *`, the
    polling will be done every 15 minutes. Click your mouse outside the textbox. If
    you entered the code correctly, Jenkins will show the message stating when it
    will execute the next job. Otherwise, it will display an error in red.![Figure
    8.15: Building triggers'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.15: Building triggers'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Build` tab. Click `Add build step`. Select `Execute shell`, as in
    *Figure 8.17*:![Figure 8.16: Selecting Execute shell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.16: Selecting Execute shell'
  prefs: []
  type: TYPE_NORMAL
- en: 'A textbox will be displayed. Write the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then click `Save`, as in *Figure 8.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17: Entering the docker build command in the Execute shell command
    box'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.17: Entering the docker build command in the Execute shell command
    box'
  prefs: []
  type: TYPE_NORMAL
- en: 'A screen similar to the following screenshot should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18: Successful creation of the hit_count project'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.18: Successful creation of the hit_count project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before doing anything further in Jenkins, check the images that you currently
    have in your host. In a terminal, run the `docker images` command to list the
    images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you cleaned your lab before this chapter, you will have only the `jenkinsci/blueocean`
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Go back to Jenkins. Click on `Build Now` from the menu on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you get the Permission Denied error while connecting to the Docker
    daemon, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. If not already exists, add a Jenkins user to the docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ sudo useradd jenkins`'
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Add the Jenkins user to the docker group:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ sudo usermod -aG docker jenkins`'
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Obtain the docker group ID from `/etc/group` that is, `998`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ sudo cat /etc/group | grep docker`'
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Use `docker exec` command to create a bash shell in the running Jenkins
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ docker container ls`'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ docker exec -it -u root <CONTAINER NAME | CONTAINER ID> /bin/bash`'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Edit the `/etc/group` file inside the Jenkins container:'
  prefs: []
  type: TYPE_NORMAL
- en: '`# vi /etc/group`'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Replace the docker group ID with the ID obtained from the host, and add
    the Jenkins user to the docker group:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker:x:998:jenkins`'
  prefs: []
  type: TYPE_NORMAL
- en: '7\. Save the `/etc/group` file and close the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '`:wq`'
  prefs: []
  type: TYPE_NORMAL
- en: '8\. Exit from the Jenkins container:'
  prefs: []
  type: TYPE_NORMAL
- en: '`# exit`'
  prefs: []
  type: TYPE_NORMAL
- en: '9\. Stop the Jenkins container:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ docker container ls`'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ docker container stop <CONTAINER NAME | CONTAINER ID>`'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '10\. Restart the Jenkins container:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ docker container ls`'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ docker container start <CONTAINER NAME | CONTAINER ID>`'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the job will build successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Back to Dashboard`. The following screen will appear. In the bottom-left
    corner, you will see the `Build Queue` and `Build Executor Status` fields. You
    can see that one build has started with `#1` beside it, as in *Figure 8.19*:![Figure
    8.19: Checking the Build Queue'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.19: Checking the Build Queue'
  prefs: []
  type: TYPE_NORMAL
- en: There is no success or failure of the build yet. When the build is done, its
    status will be displayed on the screen. After some time, you will observe that
    two builds have been done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the small arrow beside `#2` under the `Last Success` field. A drop-down
    menu will appear, as shown in the following figure. Select `Console Output` to
    check what Jenkins did automatically for us, as in *Figure 8.20*:![Figure 8.20:
    Selecting Console Output'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.20: Selecting Console Output'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Console Output`, you will find that Jenkins executed the `docker build`
    command you entered in the `Build` step during project configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down to the bottom of `Console Output` to see the result of the execution.
    You will see that the image has been built successfully. You will also find the
    image ID and tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.21: Verifying that the image is built successfully'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.21: Verifying that the image is built successfully'
  prefs: []
  type: TYPE_NORMAL
- en: Verify the image ID and tag from the terminal. Re-run the `docker images` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You will find that the `hit_counter` image has been created for you. You will
    also find the `python:3.7-alpine` image as this is the base image in the `Dockerfile`
    and Jenkins has pulled it automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: With this step, you can confirm that Jenkins was able to pull the files from
    your GitHub successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will make the desired changes in the GitHub code. But first, verify
    that you did not commit any changes to the code yet. Return to Jenkins, scroll
    up and click `Back to Project` in the left-hand menu at the top. Then click on
    `Recent Changes`, as in *Figure 8.22*:![Figure 8.22: Selecting Recent Changes'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.22: Selecting Recent Changes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Jenkins will display that there are no changes in any of the builds, as you
    can see in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.23: Verifying changes in the code'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.23: Verifying changes in the code'
  prefs: []
  type: TYPE_NORMAL
- en: Go to GitHub and edit the `Dockerfile` by changing the base image's tag from
    `3.7-alpine` to `alpine` only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also do the same from the terminal as before by editing the file using
    any text editor. Then run the `git add` and `git push` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Scroll down and commit your changes to GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to Jenkins. Remove the `hit_counter` and `python:3.7-alpine` images
    to make sure that Jenkins is not using previous local images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Click `Build Now` again to start building the job instantly. Refresh the `Recent
    Changes` page. It will display a message stating that a change has occurred.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you click on the change that has occurred, it will forward you to GitHub,
    showing you the differences between the old code and the new code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click back into the browser to return to Jenkins. Check `Console Output` again
    to see the base image that Jenkins has used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom, you will find that Jenkins built the image successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the terminal and check the images again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You will find that `hit_counter` and `python:alpine` are on the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Clean your lab for the next exercise by removing all the images listed except
    `jenkinsci/blueocean`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In this exercise, you learned how to integrate Jenkins with GitHub. Jenkins
    was able to pull the code from GitHub automatically and build the image.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to push this image to your registry
    without manual interference to complete your CI/CD pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Jenkins and Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, as in *Figure 8.31*, we will focus on the last step of our
    CI/CD pipeline, which is integrating Jenkins with Docker Hub. As we mentioned
    before, there are plenty of registries out there. We will use Docker Hub because
    it is free and easy to use. At your workplace, your company will probably have
    a private local registry. You will need to ask the operations or IT admins to
    create an account for you and grant you some privileges so that you are able to
    access the registry and push your images to it.
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 8.24: Integrating Jenkins and Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.24: Integrating Jenkins and Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: In the following exercise, you will learn how to integrate Jenkins with Docker
    Hub and how to push the image that Jenkins built in the previous exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.04: Integrating Jenkins and Docker Hub'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will integrate Jenkins with Docker Hub and push that
    image to your repository. First, you will install the `Docker`, `docker-build-step`,
    and `Cloudbees Docker Build and Publish` plugins so that Jenkins can connect to
    Docker Hub. Then, you will learn how to enter your Docker Hub credentials in Jenkins
    so that Jenkins can access your Docker Hub account automatically and push your
    images to it. Finally, you will check your images in Docker Hub to verify that
    the pipeline was executed correctly. At the end of this exercise, you will verify
    that the image is successfully pushed to the repository by checking your Docker
    Hub account:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Manage Jenkins` in the left-hand menu to install the plugins:![Figure
    8.25: Clicking on Manage Jenkins'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.25: Clicking on Manage Jenkins'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Plugin Manager`. Four tabs will appear. Click on the `Available`
    tab and select the `Docker`, `docker-build-step`, and `Cloudbees Docker Build
    and Publish` plugins:![Figure 8.26: Installing the Docker, docker-build-step,
    and Cloudbees'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker Build and Publish plugins
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.26: Installing the Docker, docker-build-step, and Cloudbees Docker
    Build and Publish plugins'
  prefs: []
  type: TYPE_NORMAL
- en: Click `Install without restart`. After installation, check `Restart Jenkins
    when installation is complete and no jobs are running`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Jenkins will take an extended period of time to restart, depending upon your
    disk space, memory, and internet connectivity speed. Wait until it is done, and
    the dashboard is shown. Click on the project''s name, that is, `hit_count`:![Figure
    8.27: Jenkins Dashboard showing the hit_count project'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.27: Jenkins Dashboard showing the hit_count project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `Configure` in the left-hand menu to modify the project configurations:![Figure
    8.28: The Configure option in the left-hand menu'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.28: The Configure option in the left-hand menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the details in the `Build` tab only. Click on it and select `Add build
    step`. A larger menu than the one you saw before will show up. If you see `Docker
    Build and Publish` in that menu, it verifies that your plugins were installed
    successfully. Click `Docker Build and Publish`:![Figure 8.29: Selecting Docker
    Build and Publish from the menu'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.29: Selecting Docker Build and Publish from the menu'
  prefs: []
  type: TYPE_NORMAL
- en: In `Registry Credentials`, click `Add`. Then select `Jenkins` from the drop-down
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A pop-up box will appear. Enter your Docker Hub username and password. Then,
    click `Add`:![Figure 8.30: Adding Jenkins credentials'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.30: Adding Jenkins credentials'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in `Registry Credentials`, click the first drop-down menu and select the
    credentials that you entered in the previous step. Then, enter `<your Docker Hub
    username>/<image name>` in the `Repository Name` field. Remove the `Execute Shell`
    option that you entered in *Exercise 8.02*, *Uploading the Code to GitHub*, by
    clicking the Red `X` at the top right. Now, you will have only one build step,
    which is the `Docker Build and Publish` step. Click `Save` to save the new configuration:![Figure
    8.31: The Docker Build and Publish step'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.31: The Docker Build and Publish step'
  prefs: []
  type: TYPE_NORMAL
- en: Click `Build Now` again in the left-hand menu and in the `Build History` option,
    follow the progress of the image build. It will have the same name that you specified
    in `Repository Name` in the previous step. Jenkins will add the `docker build`
    step by itself because you chose it from the plugins. If the image passed the
    build successfully, Jenkins will use your Docker credentials and automatically
    connect to Docker Hub or any registry you specify in `Repository Name`. Finally,
    Jenkins will push the new image automatically to your registry, which is your
    Docker Hub registry in this exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As a further check, while the image is being built and before it is done, go
    to the terminal and list the images you have using the `docker images` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Because you cleaned your lab at the end of the last exercise, you should find
    the `jenkinsci/blueocean` image only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, check your Docker Hub account to verify whether the `hit_counter` image
    is built. You will not find the `hit_counter` image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.32: Checking your Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.32: Checking your Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the job is successfully built, you will find a blue ball beside the image
    name. If it is a red ball, this means that there was an error. Now, click on the
    arrow beside the image name and select `Console Output`:![Figure 8.33: Selecting
    Console Output'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.33: Selecting Console Output'
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following image, you will find that Jenkins built the image
    successfully and pushed it to your Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.34: In Console Output, verify that Jenkins has built and pushed
    the image'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.34: In Console Output, verify that Jenkins has built and pushed the
    image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the terminal and rerun the `docker images` command to list the images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You will find an image with `<your Docker Hub Username>/hit_count`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser, refresh the Docker Hub page. You will find your image at the
    top; Jenkins pushed it for you automatically:![Figure 8.35: Verifying that Jenkins
    has pushed the image to your Docker Hub automatically'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.35: Verifying that Jenkins has pushed the image to your Docker Hub
    automatically'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we finished the last phase of our CI/CD pipeline and integrated
    Jenkins with Docker Hub. Jenkins pushed the image it built to Docker Hub. You
    also verified that the image was pushed correctly by checking the Docker Hub account.
  prefs: []
  type: TYPE_NORMAL
- en: In the next activity, we will apply the same method of installing extra plugins
    to integrate Jenkins with SonarQube. SonarQube is another powerful tool that can
    analyze code and generate reports about its quality and detect bugs, code smells,
    and security vulnerabilities in a vast number of programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 8.01: Utilizing Jenkins and SonarQube'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usually, you will be asked to evaluate the quality of your code before submitting
    it to testers. You can utilize Jenkins for further code inspection by generating
    reports about debugging bugs, code smells, and security vulnerabilities by adding
    the SonarQube plugin.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, we will utilize Jenkins and the SonarQube plugin for our `hit_count`
    Python example.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps**:'
  prefs: []
  type: TYPE_NORMAL
- en: Install and run SonarQube in a container, as you did in *Exercise 8.01*, *Installing
    Jenkins as a Container*. Use the default port `9000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the SonarQube plugin in Jenkins. Log in to SonarQube using `admin/admin`
    and generate the authentication token. Do not forget to copy the token and keep
    it in a text file. You cannot retrieve the token after this step. If you lose
    your token, remove the SonarQube container, re-craft it from the SonarQube image
    as in *step 1*, and re-do the steps again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Jenkins, add SonarQube's authentication token to the `Global Credentials`
    domain as secret text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate Jenkins with SonarQube by adjusting the `Global System Configuration`
    and the `Configure System` options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the fields in the `Build Environment` tab by enabling the `Prepare SonarQube
    scanner` environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the `Build` step and add the `Analysis Properties`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser, go to the SonarQube window, and check its report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should be like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.36: The expected SonarQube output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.36: The expected SonarQube output'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor339).
  prefs: []
  type: TYPE_NORMAL
- en: In the next activity, you will integrate Jenkins and SonarQube with our Panoramic
    Trekking application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 8.02: Utilizing Jenkins and SonarQube in the Panoramic Trekking Application'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Panoramic Trekking Application also has a frontend and backend, like the
    `hit_counter` application. In this activity, you will create a new project in
    Jenkins that is linked to the Panoramic Trekking application on GitHub. Then,
    you will run SonarQube to get a detailed report about its bugs and security vulnerabilities,
    if the trekking application has any.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new item called `trekking` in Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select it as a `FREESTYLE` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `General` tab, select `Discard Old Builds`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Source Code Management`, select `GIT`. Then enter the URL `http://github.com/efoda/trekking_app`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Build Triggers`, select `Poll SCM` and set it to be analyzing and testing
    every 15 minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Build` tab, enter the `Analysis properties` code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and click `Build Now`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the report in the `SonarQube` tab in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should look like the following at SonarQube:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.37: Expected output of Activity 8.02'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.37: Expected output of Activity 8.02'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor340).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has provided hands-on experience integrating your code using the
    CI/CD pipeline. CI helps developers to integrate code into a shared and easily
    accessible repository. CD helps developers to deliver the code stored in the repository
    to production. The CI/CD approach also helps to keep the product up to date with
    the latest technology and to provide the latest version to customers with a fast
    turnaround for new features and bug fixes.
  prefs: []
  type: TYPE_NORMAL
- en: Once this chapter's defined three phases of the CI/CD pipeline are completed
    successfully, you will only need to focus on editing your code on GitHub. Jenkins
    will then be your automated assistant, and it will automatically handle the rest
    of the phases for you and make the images available for production.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about Docker swarm mode and how to perform
    service discovery, clustering, scaling, and rolling updates.
  prefs: []
  type: TYPE_NORMAL
