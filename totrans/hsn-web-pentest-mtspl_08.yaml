- en: Vulnerability Scanning Using WMAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vulnerability assessment is the process of identifying, ranking, and classifying
    the vulnerabilities in a network or an application. It provides an organization
    with an understanding of their assets and the risks they face. When using Metasploit,
    vulnerability scanning can be done using separate auxiliary modules or using the
    available plugins. The Metasploit Framework also allows us to add our own custom
    plugin if we have our own vulnerability scanner (in-house).
  prefs: []
  type: TYPE_NORMAL
- en: WMAP is a Metasploit plugin that gives users the freedom to perform vulnerability
    scanning on a target with respect to the Metasploit modules used in the scan.
    One of the best features of this plugin is the ability to use as many Metasploit
    modules (including custom modules) for a vulnerability scan as required by the
    tester. The tester can create multiple profiles to fit different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be learning about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding WMAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The WMAP scanning process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WMAP module execution order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding modules to WMAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clustered scanning using WMAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Metasploit Framework ([https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *nix-based system or Microsoft Windows system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The WMAP plugin for Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding WMAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**WMAP** is a web application *scanner* plugin that is used for scanning web
    application vulnerabilities. It''s not a real scanner like Burp Suite or Acunetix,
    but it does have its own advantages. Before going into detail about WMAP, let''s
    try to understand its architecture first.'
  prefs: []
  type: TYPE_NORMAL
- en: The WMAP architecture is simple yet powerful. WMAP is a mini-framework that
    is loaded into MSF as a plugin. It connects with the Metasploit database to fetch
    the results of any previously completed scans. The results loaded from the database
    (such as hostnames, URLs, IPs, and so on) will then be used in the web application scan.
    WMAP uses Metasploit modules (as we can see in the following diagram) to run the
    scan and the modules can be of any type – auxiliary, exploits, and so on. Once
    WMAP starts the scanning of the targets, all the artifacts and crucial information
    found gets stored in the MSF database. One of the most powerful features of WMAP
    is its distributed (clustered) scanning feature (covered in the *Clustered scanning
    using WMAP* section of this chapter), which helps WMAP to scan any number of web
    applications through *n* number of nodes (MSF slave).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f0e2571-82d4-43d8-b1ae-f2d64273b510.png)'
  prefs: []
  type: TYPE_IMG
- en: Before going into detail about how to use WMAP, let's understand the process
    first.
  prefs: []
  type: TYPE_NORMAL
- en: The WMAP scanning process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using WMAP is quite easy. We have defined a process in this section for beginners
    who want to learn how to use this plugin. The scanning process can be categorized
    into four phases – **Data Reconnaissance**, **Loading the scanner**, **WMAP configuration**,
    and **Launch**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c82f7da4-5c77-4725-87c3-41cc241700bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's look at the first phase – data reconnaissance.
  prefs: []
  type: TYPE_NORMAL
- en: Data reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this phase, information related to the target is gathered using a crawler,
    proxies, and any other sources. The data is then saved in the MSF database for
    further use. The data can be fetched using any third-party tool, such as Burp
    Suite or Acunetix. The data can be imported into MSF using the `db_import` command
    as MSF supports many third-party tools. Let's look at an example of how a Burp
    scan can be imported into Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the `db_import` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08c4d6cc-0cfc-467e-b51d-b43750ead426.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the steps to export the Burp Suite data and import it into
    Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a previously completed scan of a domain name. It could be either active
    or passive. In our case, we will use an example of a passive scan of [prod.packtpub.com](https://www.packtpub.com/in/).
    The **Issues** tab in the following screenshot shows various issues discovered
    by Burp:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37c9bd5a-bb81-40e4-8591-5f5129e8a3c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will then select the issues we want to transfer to Metasploit and right-click.
    Then, we choose the Report selected issues option, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef205eb2-3506-4913-9cf2-df2ada166d01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A new window will open that asks us to choose the format for the report. We
    choose XML and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d67cba3-7ccf-4a59-8fdc-79c0243c86d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next step, we can specify the details we want in our report and click
    Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e0177741-3a97-4c63-be4f-30ca1c932cd2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then we choose whether we want to include requests and responses for our selected
    issues from the scanner. We choose both of them and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6be9aec2-0f03-4679-9498-0df9a9d37019.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, it will ask us to select all the issues we want to export. We choose
    the ones we need and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/043ec93e-6fd7-4101-a0ea-b71485a1285b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the final step, we choose the destination path and filename and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/df71def4-7c78-40b0-a671-a16ebea1cdf5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The report will now be exported and we can close the window once the export
    is complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e889d21b-1d47-4f8b-b356-dac2ea24903b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To import the Burp Suite report into Metasploit, we can simply use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/512555e5-3c08-4fed-8e30-34e458375036.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the import is complete, we can view all the hosts in the report by using
    the `hosts` command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b07927dc-cbd9-476d-a745-31fed3c3b146.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see the vulnerabilities imported from the Burp Suite scanner, we can use
    the `vulns` command, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ce941dcb-54f9-480c-b236-7ddd7d926ce6.png)'
  prefs: []
  type: TYPE_IMG
- en: As the information is now imported into Metasploit, WMAP will automatically
    detect and load the same information too, which means the hosts in Metasploit
    will now automatically be added as sites in the WMAP module.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned earlier, WMAP is actually a plugin that is loaded in the MSF.
    You can view a complete list of the plugins on the MSF by typing the `load` command
    and pressing the *Tab* key, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b72d574b-ed9a-4aa7-bdfe-46d72177c230.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To begin with the loading process, following are the steps that are to be followed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s load the WMAP plugin using the `load wmap` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f638269-1723-4c07-ae13-3ec2e3736b5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the plugin is loaded, you can view the help section using the `?` or `help` command,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/627fdbbf-3eb5-44e7-b039-24033371096c.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will look at WMAP configuration.
  prefs: []
  type: TYPE_NORMAL
- en: WMAP configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have learned how to automatically add targets into WMAP in the data reconnaissance
    phase. There''s another way to load data into WMAP, and that is by manually defining
    the targets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a new site or a workspace to perform our scan. Let''s
    look at all the options available to us for site creation. Type `wmap_sites -h`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b67d7216-7520-4363-ba22-a6b55ca38446.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now add the sites. There are two ways of adding sites – one is by going
    directly through the URL or IP. This can be done using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a02c7f92-2c8c-4e45-8715-7b3bb68a0e17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second way is by using virtual hosts. This is very useful when we have
    to scan multiple virtual hosts. To add virtual hosts, we can use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/773cf787-2e54-4eda-bd85-a35e37c46bd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the sites are added, we can add the targets in a similar way, either by
    IP/domain or by virtual host (virtual host/domain). To add a target via IP, we
    can use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a46ef0c7-a418-4e60-bbb1-e568b6e226dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add a target via a virtual host, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f62fa43f-8d36-4503-8d5f-577b0c60aef8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the list of all the modules that will be run by WMAP, we can use the `wmap_modules
    -l` command. The output of the command is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ceb4af93-7df2-4cee-bd1c-84ccbf69cbb1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the modules for file/directory testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/372aa366-a906-4d73-ade6-4a4906333fb6.png)'
  prefs: []
  type: TYPE_IMG
- en: This phase also includes the WMAP scanning nodes, which can be configured so
    that you can perform distributed WMAP scanning. The nodes can be managed and configured
    using the `wmap_nodes` command. More about this will be discussed in the *Clustered Scanning
    using WMAP *section of this chapter. After the final configuration is done, the
    next phase is to launch WMAP.
  prefs: []
  type: TYPE_NORMAL
- en: Launching WMAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, WMAP runs all the modules on the target but you can change the
    order in which the modules are executed (this is covered in the next topic):'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run WMAP, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7612dd18-1fe0-4cf7-84d3-abb68db0f4bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the preceding command is executed, the execution of the loaded modules
    will begin. There's no pause or resume option in WMAP, so you either have to wait
    for the scan to finish or you can interrupt the scanning process by pressing *Ctrl *+ *C*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the `wmap_run` command, you can execute the `wmap_run -h` command
    to see the other available options that can be used at the time of launch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7288d4c7-fc33-43ab-83fd-1fab75d5b628.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can even launch the WMAP scan based on modules using keyword strings or
    regex. In this case, we used a string that will search for any `version `keyword
    in the list of loaded modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d19d169-16d6-4a59-a8ff-ac114b952897.png)'
  prefs: []
  type: TYPE_IMG
- en: We can use a regular expression according to our needs. We have now learned
    about the different phases of the WMAP scanning process. In the next section,
    we will learn about execution order in WMAP.
  prefs: []
  type: TYPE_NORMAL
- en: WMAP module execution order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WMAP runs loaded modules in a specific order. The order is defined by a numeric
    value. By default, the first module to run for web scanning is `http_version`,
    which has the `OrderID=0` and `open_proxy` module with `OrderID=1`. This also
    means that the `http_version` module will execute first and `open_proxy` will
    run after that. A tester can change the default behavior of the module execution
    by changing the `OrderID` accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: The module execution order can be changed according to our needs. We can obtain
    the `OrderID` by executing the `wmap_modules -l` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5873a26b-4a50-4a01-94cc-0124ec4b7f64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `OrderID` is set in the Metasploit module code. Let''s see the `OrderID`
    for the `http_version` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a615294e-6a77-4085-beb7-bf5d987084f2.png)'
  prefs: []
  type: TYPE_IMG
- en: The execution order for WMAP modules can be adjusted using the `register_wmap_options()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use this method to change the `OrderID` for the `http_version` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f68ed1e0-0c1e-4b3a-959c-30e883e396c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s reload the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e7213e5-dbfc-418e-9cf0-0e9cdc28b75a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the reload is done, we list the modules using the `wmap_modules -l` command
    to see the updated module execution order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fb6d6b1d-8ed6-441c-87ab-eee5d3f0b655.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that the `OrderID` has now been changed.
    Now that we have gone through the module execution order, let's add a module to
    WMAP in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a module to WMAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WMAP allows us to add our own modules. This could be modules from the MSF or
    we can make our own module entirely from scratch. Let''s use an example of the
    SSL module. The following screenshot shows that we have two modules that are currently
    being used by WMAP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3048bafb-ed99-49d5-8d73-1aa2f951bf38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can add another SSL-based scanner module as well (apart from the SSL Labs
    modules that are available in the MSF):'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `ssllabs_scan` module, which will perform an SSL scan using
    Qualys SSL Labs'' online SSL scanner via the public API provided by Qualys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a58652e-4bbc-4216-9b2c-9a5634eac3f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now edit the source code of this module so that we can add the necessary
    library and methods that can be used in the scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/949c388f-d114-4a8b-95f7-2a8d0d0cbf06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We add the following line below the `MetasploitModule` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The aforementioned WMAP library provides methods for WMAP SSL scanner modules
    that are included in the scan. This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0bf01544-0647-460d-955d-90cee289b593.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Just adding the library won''t suffice; running the module with just the library
    added will result in an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/951d7ab6-2094-48a9-af2d-c004db2c5508.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The reason is this is the `HOSTNAME` datastore, which is the `ssllabs_scan`
    module option, and it is not picked up by the WMAP plugin at all. The plugin only
    has the following methods defined (refer to the `metasploit-framework/lib/msf/core/auxiliary/wmapmodule.rb`
    file):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f12637ea-e809-4b66-a1e2-84b8ebeefde8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, we need to find a way for WMAP to identify the `HOSTNAME` datastore
    for the `ssllabs_scan` module. There could be many workarounds, but we''ll use
    this one as it''s convenient for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7ab1b1c-c6ad-4e7a-8d71-28b2e4b22fa9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We change the datastore to be used from `datastore[''HOSTNAME'']` to `datastore[''VHOST'']`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41cfd927-e255-4abd-88ac-2b67f1090152.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The variable that was storing the data from the `HOSTNAME` datastore will save
    the data from the `VHOST` datastore. At the same time, WMAP will recognize the
    `VHOST` datastore through the `wmap_target_vhost()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba6c51a3-0128-449a-9bf7-189146eee632.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we save the code and go back to our Metasploit console and reload the module
    by typing `reload`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0bbfedbf-cda2-4c90-8b51-0b015c690255.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We also reload the WMAP modules using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa0cf6f4-0ebd-43d3-8dcb-82a4d9e5d881.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s list the modules now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c16b8210-783e-4272-9143-d0428c3c58f0.png)'
  prefs: []
  type: TYPE_IMG
- en: The module is loaded!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the types of mixins that can be used in any module:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Mixins** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **WmapScanSSL** | Runs the scan against the SSL service once |'
  prefs: []
  type: TYPE_TB
- en: '| **WmapScanServer** | Runs the scan against a web service once |'
  prefs: []
  type: TYPE_TB
- en: '| **WmapScanDir** | Runs the scan for every directory found in the target |'
  prefs: []
  type: TYPE_TB
- en: '| **WmapScanFile** | Runs the scan for every file found in the target |'
  prefs: []
  type: TYPE_TB
- en: '| **WmapScanUniqueQuery** | Runs the scan for every unique query found in each
    request of the target |'
  prefs: []
  type: TYPE_TB
- en: '| **WmapScanQuery** | Runs the scan for every query found in each request of
    the target |'
  prefs: []
  type: TYPE_TB
- en: '| **WmapScanGeneric** | Modules to be run after the completion of the scan
    (passive analysis) |'
  prefs: []
  type: TYPE_TB
- en: 'Update the WMAP module in action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70b42d1e-692d-4ba0-b9c5-7c74342b5a64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The vulnerabilities found by the modules are saved in the database, which can
    be viewed by executing the `wmap_vulns -l` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/957d009a-359f-4547-a573-3bbb5fd51955.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will look at the distributed scanning feature of WMAP.
  prefs: []
  type: TYPE_NORMAL
- en: Clustered scanning using WMAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WMAP can also be used to perform a distributed assessment of a target. This
    feature allows multiple instances of WMAP running on different servers to work
    together in a master-slave model, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac8c7517-bd02-414e-b365-7a32af79d0fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The WMAP master takes the target and distributes it across the slaves automatically
    in the form of jobs. The jobs, when completed, report back to the master with
    results that are stored in the master''s database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a site for scanning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab4ab1aa-1782-4c28-bd3a-d18146283184.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use the crawler on the site using the `auxiliary/scanner/http/crawler` module;
    set the options accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c8c5b0d-d211-4663-824a-9542f360af52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the crawler to gather the forms and pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/20210f40-6890-42a9-b769-5f941603cfe9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Confirm the number of pages/forms found from crawling using the `wmap_sites
    -l` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/355c8523-4ea1-44bb-a17d-fe8d8d73ecbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s set up the WMAP nodes for distributed scanning. We will run `msfrpcd`
    on the nodes using the `msfrpcd -U <user> -P <password>` command. This command
    will start the RPC server in the background for WMAP to interact with Metasploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1dbec482-1a53-4d29-9d71-7a6538ff7575.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the nodes are configured, we will use the `wmap_nodes` command to manage
    and utilize these nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b16830b8-b948-49e6-8d83-02ee119eef68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use the following command to add the nodes to WMAP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/688f0888-7136-4396-aa52-6d8d35b0abcb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the nodes are connected, we can list the nodes using the `wmap_nodes -l`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/51b815d3-b8d9-491d-91f4-8c8aa2ab9655.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Everything is set now. We just need to define the target for the scanner to
    begin scanning. This can be done using the `wmap_targets` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/905131a1-cec9-494a-93e7-77a1bc6c0f28.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, we used the `-d` switch to add the target based on the ID. the
    ID can be retrieved by using the `wmap_sites -l` command. The issue with the current
    setup is that all the modules executed on the nodes will save the data on the
    nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to save the data on the nodes, you need to connect the nodes to
    your local MSF database. This can be done using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60acf6d3-8476-44ef-a267-e98b79e71e1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s run WMAP now using the `wmap_run -e` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b1d8f76a-87c6-45cd-ba7a-5d3f6a4a0f2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Every module loaded by the WMAP will be distributed and executed on the nodes
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: WMAP has a limit of **25 jobs per node**. This is done to prevent nodes from
    being over-burdened.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the list of connected nodes by typing `wmap_nodes -l`, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43943310-effc-4806-a765-3bd2760b9a21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also use WMAP to run only one single module; for example, if we want
    to run the `dir_scanner` module, we can do it by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4f6ac23-f36e-4b35-962c-92fddf67382c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the output of the discovered directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4e22c65-1b53-48aa-8357-da525dd9dab8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, the module starts listing the directories
    found. To view the output in a tree structure, use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a42133a9-5e66-4a55-8a1e-4252229114b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the current jobs assigned to the nodes, we can use the command shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35fb3358-59be-4936-aa07-021560c45a48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To remove a node, we can use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will delete node 1 from the list.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about WMAP, its architecture, and the scanning process.
    Next, we learned how to import output from different tools such as Burp Suite
    into Metasploit and moved onto loading, configuring, and performing a scan using
    the WMAP module. At the end of the chapter, we looked at how we can use clustered
    scanning in WMAP.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at pen testing for WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How many instances of WMAP can be used for distributed scanning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does the WMAP plugin support reporting?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can I import other server logs and reports in Metasploit that I want to use
    in WMAP?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I want to customize WMAP further for my organization's environment. How can
    I do that?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How many jobs per node does WMAP support?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on the WMAP web scanner, visit the following link:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/](https://www.offensive-security.com/metasploit-unleashed/wmap-web-scanner/)'
  prefs: []
  type: TYPE_NORMAL
