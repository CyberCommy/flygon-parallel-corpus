- en: Chapter 3. Functions and Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how to declare and define an array and covered
    multiple types of arrays such as the indexed array, associative arrays, and so
    on. We also saw the various operations that can be performed on an array.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will identify how to define and call functions. We will
    also learn how to create classes, and how to use the classes and functions together.
  prefs: []
  type: TYPE_NORMAL
- en: Functions are blocks of code that are packaged into reusable code. A function
    is a piece of code that returns a value by doing some processing, taking one or
    more outputs.
  prefs: []
  type: TYPE_NORMAL
- en: A class is a blueprint for an object. Classes form the structure of data and
    the actions that utilize the information to create objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Define and call functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define classes and create instances of the class using the `new` keyword
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement and call `public` and `static` class functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functions are like a machine with a fix defined logic. On one end, it takes
    a parameter, processes it, and returns a value based on the input and function
    definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Functions are used to reuse a particular block of code again and again instead
    of defining it when needed all the time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Functions](graphics/3_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To define a function, we use the keyword `function,` followed by the name that
    we want to give the function; and, within curly brackets, we define the operation
    of the function. For example, if we want to create a function to print out, "Hello
    World," we write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If we were to write this function in a new file and run it, it wouldn't display
    anything, and that's because we haven't called the function; we have only defined
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To call the function, we add the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When creating functions, you sometimes need to have additional parameters passed
    to your function; this can be done when defining your new function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the previous example to accept a `name` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To pass the name, we define a variable within the parentheses following the
    function name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when we call the function, we can pass whatever value we want through
    that variable, and it will be printed out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, when we create a function, we know that there will be cases where
    we won't pass a value. In those cases, we will want a default value to be passed
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set a default value, you should assign it to the specified variable when
    you set it, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Functions can be used not only to print messages to the screen but also to
    return a value back, which can be stored in a variable or used in another function.
    For example, if you create an addition function, you might want to return the
    sum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a function that can return a value, let''s see how to use
    it to store a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In your program, you may sometimes need to dynamically call a function with
    efficiency. PHP gives you a helpful tool to do just that - `call_user_func_array`.
    The `call_user_func_array` function allows you to call a function by passing its
    name as the first parameter, and provide arguments as an array through the second
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Simple Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to create a simple function that will calculate
    the discount of a given percentage. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your code editor and create a new file, `function.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the new file, create your open and close php tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to create two new variables: `$sweaterPrice` and `$precentOff.
    T`hey will store the original price of the product, as well as the percent off:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our variables, we can define our function. Our function is
    simple; it accepts a price and discount percentage. Inside of the function, we
    multiply the price by the discount percentage and return the product:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can go ahead and print our message about the discount to our users,
    using our newly created function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have an understanding of functions, you should be comfortable with
    developing reusable code and applying them. In the next section, we will learn
    about classes. Classes will give us a better understanding of structuring code
    and properties into a neat package.
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you are going to learn about classes. Classes fall into a type
    of programming called object-oriented programming, which simply means organizing
    your code into what is known as an object. Objects allow you to create a base
    package that has its own variables and methods, exclusive to the object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Think of a class as a blueprint for an object. There is only one class, but
    you can have many instantiations. This can be compared to the blueprint for a
    house. Many new homes can be built from the same blueprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s suppose that we want to create a class that holds our student''s information.
    We would define it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is the basic student class, in its simplest form. We start by using the
    keyword class, followed by the name of our class, which, in this case, is `Student`.
    Next, we create a code block with open and close parentheses. Within the open
    and close parenthesis, we add the contents of our class.
  prefs: []
  type: TYPE_NORMAL
- en: 'This leads to the next section for classes: member variables. We worked with
    variables in [Chapter 1](ch01.html "Chapter 1. Getting Started with PHP"), *Getting
    Started with PHP*, of this book. As a refresher, variables act as a container
    that allows you to store data temporarily. Member variables have the same function,
    but are scoped within the boundaries of a given class or class instance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will extend our `Student` class to store the student''s `name`, `age`, and
    `major`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You should notice the `public` keyword that we use when defining our variables.
    This is important, as it tells the program how the data can be accessed. The `public`
    keyword simply states that you can access this data directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our class ready, we can create a new instance of the class
    and assign it to a variable that we can use to interact with the class''s properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we create a new instance of the student class by using the
    `new` keyword and assign it to a variable that we call `Michael`. Then, using
    the arrow syntax, we can access the public values to set the name, age, and major.
  prefs: []
  type: TYPE_NORMAL
- en: 'With classes, we sometimes have cases where we want to instantiate a new instance
    of a class with values. We can do this with a function called a constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This function is the default function that is called when you use the `new`
    keyword to instantiate a new class. For passing values, we would define the values
    within the construct function.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to set the student''s info, we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can provide the student''s info:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Along with the `public` variables, you can also define `private` variables.
    The `private` keyword makes variables accessible only by methods themselves. This
    means that the only time that you can access those types of variables is through
    the `constructor`, `getter` functions, and `setter` functions, which gives us
    a great insight into class functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Class functions allow you to create local functionality for a class to `set`,
    `get`, and mutate the data held within the class itself. For example, if we take
    our previous class definition and replace the `public` variables with `private`
    variables, it will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'What if we want to change these values, or to put these values somewhere else
    in the program? We define functions, of course:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 3.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that using `set` and `get` in the name of the function isn't required;
    you can use whatever name you want to - something that allows you to easily remember
    what each function does. As you can see in the code example, you can update the
    `private` values using the respective `set` functions, and retrieve those values
    using the respective `get` functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, suppose that Michael changed his major:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to see what his major is, we can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Classes are a very powerful tool when it comes to any type of programming, mainly
    due to the idea of inheritance. Inheritance allows you to create a `base` class
    that defines general functions and variables and will be used by all of the children
    of the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a simple example, let''s define an `Animal` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This base class has a variable that holds the animal name and the sound that
    the animal makes. Additionally, it has a `public` function, `speak`, that will
    print the sound that the animal makes.
  prefs: []
  type: TYPE_NORMAL
- en: We can extend different types of animals from the `base` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s suppose that we want to define a `Dog` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We simply change the value of the name and sound variables, and we have our
    `dog` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'When developing child classes, one thing to keep in mind is that you can extend
    the base constructor by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Another useful section, when it comes to classes, are `static` functions. Static
    functions don''t require that an instance of a class is created in order to be
    used. This comes in handy when you build a class to house utility functions. To
    create a `static` function, you simply use the `static` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we create a static about function that will give
    a little description of the class, when called. You can use this function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity: Calculate the Monthly Pay of an Employee'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have been assigned to calculate the monthly pay of an employee. The salary
    should be calculated and displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this activity is for you to learn how to calculate the discount from
    a given percentage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to perform this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your code editor and create a new file, `class.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the new file, create your open and close `php` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, define a base employee class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 3.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'From this base class, we can go ahead and create an `employee` class that extends
    the base class. In this extended class, we will add an additional function, which
    will calculate the monthly pay of an employee:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 3.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we will use the new class to print the monthly pay:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 3.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about functions and classes. We covered how to define
    and call functions. We also covered how to define classes and use classes and
    functions together. As we begin to build larger and more complex projects, functions
    and classes will help us to create highly organized code and maintain best practices.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover data operations like input and output data,
    catching and handling errors using error handling, and we will also cover the
    basics of MySQL.
  prefs: []
  type: TYPE_NORMAL
