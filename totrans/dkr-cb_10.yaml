- en: Chapter 10. Getting Help and Tips and Tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will see the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Starting Docker in debug mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Docker binary from the source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building images without using cached layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your own bridge for container communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the default execution driver of Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the logging driver for containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting real-time Docker events for containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll become more curious as we learn more about Docker. Mailing lists and
    IRC channels are the best places to get help, learn, and share knowledge about
    Docker. Docker has a few IRC channels on the free node, such as `#docker` and
    `#docker-dev`, to discuss Docker in general and dev-related stuff respectively.
    Similarly, Docker has two mailing lists:'
  prefs: []
  type: TYPE_NORMAL
- en: The Docker user list available at [https://groups.google.com/forum/#!forum/docker-user](https://groups.google.com/forum/#!forum/docker-user)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker dev list available at [https://groups.google.com/forum/#!forum/docker-dev](https://groups.google.com/forum/#!forum/docker-dev)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While working on Docker, if you find any bugs, you can report them on GitHub
    at [https://github.com/docker/docker/issues](https://github.com/docker/docker/issues).
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, if you have fixed a bug, you can send the pull request, which will
    get reviewed and then get merged to the code base.
  prefs: []
  type: TYPE_NORMAL
- en: Docker also has a forum and a YouTube channel, which are great learning resources
    and can be found at [https://forums.docker.com/](https://forums.docker.com/) and
    [https://www.youtube.com/user/dockerrun](https://www.youtube.com/user/dockerrun)
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: There are many Docker meet up groups around the world, where you meet like-minded
    individuals and learn by sharing experiences at [https://www.docker.com/community/meetups/](https://www.docker.com/community/meetups/).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I'll also put down a few tips and tricks, which will help you
    to work better with Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Docker in debug mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can start Docker in debug mode to debug logs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install Docker on the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the Docker daemon with the debug option `-D`. To start from the command
    line, you can run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can also add the `--debug/-D` option in the Docker configuration file to
    start in debug mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The preceding command would start the Docker in the daemon mode. You will see
    lots of useful messages as you start the daemon, such as loading up existing images,
    settings for firewalls (iptables), and so on. If you start a container, you will
    see messages like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Building a Docker binary from the source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes it becomes necessary to build a Docker binary from the source for
    testing a patch. It is very easy to build the Docker binary from the source.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Download the Docker source code using `git`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `make` on Fedora:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Make sure Docker is running on the host on which you are building the code and
    you can access it through the Docker client, as the build we are discussing here
    happens inside a container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go inside the cloned directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `make` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This will create a container and compile the code inside that from the master
    branch. Once finished, it will spit out the binary inside `bundles/<version>/binary`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the source code, you can build the documentation as well:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also run tests with the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Look at the documentation on the Docker website [https://docs.docker.com/contributing/devenvironment/](https://docs.docker.com/contributing/devenvironment/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building images without using cached layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, when we build an image, Docker will try to use the cached layers
    so that it takes less time to build. However, at times it is necessary to build
    from scratch. For example, you will need to force a system update such as `yum
    -y update`. Let's see how we can do that in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Get a Dockerfile to build the image.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While building the image, pass the `--no-cache` option as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `--no-cache` option will discard any cached layer and build one Dockerfile
    by following the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, we also want to discard the cache after only a few instructions.
    In such cases, we can add any arbitrary command which doesn't affect the image,
    such as creation or setting up an environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Building your own bridge for container communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, when the Docker daemon starts, it creates a bridge called `docker0`
    and all the containers would get the IP from it. Sometimes we might want to customize
    those settings. Let's see how we can do that in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I am assuming you already have a Docker set up. On the Docker host, stop the
    Docker daemon. On Fedora, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove the default `docker0` bridge, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To create the custom bridge, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the Docker configuration file to start with the bridge we created earlier.
    On Fedora, you can update the configuration file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To start the Docker daemon, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding steps will create a new bridge and it will assign the IP from
    192.168.2.0 subnet to the containers.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can even add an interface to the bridge.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation on the Docker website at [https://docs.docker.com/articles/networking/](https://docs.docker.com/articles/networking/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the default execution driver of Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, libcontainer is the default execution driver. There is legacy support
    for LXC userspace tools ([https://linuxcontainers.org/](https://linuxcontainers.org/)).
    Keep in mind that LXC is not the primary development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install Docker on the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the Docker daemon with the `-e lxc` option, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can also add this option in the configuration file of Docker, depending
    on the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker uses LXC tools to access kernel features, such as Namespaces and Cgroups
    to run containers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#docker-exec-driver-option](https://docs.docker.com/reference/commandline/cli/#docker-exec-driver-option)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the logging driver for containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the release of Docker 1.6, a new feature has been added to select the
    logging driver while starting the Docker daemon. Currently, three types of logging
    drivers are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: none
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: json-file (default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: syslog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install Docker 1.6 or above on the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the Docker daemon with the required logging driver as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can also add this option in the configuration file of Docker, depending
    on the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The `docker logs` command will just support the default logging driver JSON
    file.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on the log driver configuration, Docker daemon selects the corresponding
    logging driver.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is work in progress to add `journald` as one of the logging drivers. It
    will be available from Docker 1.7 at [http://www.projectatomic.io/blog/2015/04/logging-docker-container-output-to-journald/](http://www.projectatomic.io/blog/2015/04/logging-docker-container-output-to-journald/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation on the Docker website [http://docs.docker.com/reference/run/#logging-drivers-log-driver](http://docs.docker.com/reference/run/#logging-drivers-log-driver)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting real-time Docker events for containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we will be running many containers in production, it will helpful if we can
    watch the real-time container events for monitoring and debugging purposes. Docker
    containers can report events, such as create, destroy, die, export, kill, oom,
    pause, restart, start, stop, and unpause. In this recipe, we will see how to enable
    event logging and then use filters to select specific event types, images or containers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the Docker daemon is running on the host and you can connect through
    the Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the Docker events logging with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: From the other terminal, do some container/image-related operation and you will
    see a result similar to the following screenshot on the first terminal:![How to
    do it…](../Images/image00414.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the events collection started, I created a container to just echo something.
    As you can see from the preceding screenshot, a container got created, started,
    and died.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Docker events, Docker starts listing different events.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the `--since` or `--until` option with Docker events to narrow
    down results for a selected timestamp:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With filters, we can further narrow down the events log based on the event,
    container, and image as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To list only the start event, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To list events only from image CentOS, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To list events from the specific container, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation on the Docker website [https://docs.docker.com/reference/commandline/cli/#events](https://docs.docker.com/reference/commandline/cli/#events)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
