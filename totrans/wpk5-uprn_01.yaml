- en: Introduction to Webpack 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is aimed at experienced JavaScript developers, designed to take you
    through the development and production of a specific example project through step-by-step
    processes. By the time you get to the end of this guide, you should be able to
    fully set up and deploy a working bundled application.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will introduce you to Webpack—specifically, Webpack version 5\.
    It will include an overview of the central concepts around Webpack and how it
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is aimed at programmers who are new to Webpack and Webpack 5\.
    The initial setup will be covered in this chapter, as well as an overview of the
    process, and you will be shown how to deploy your first bundled application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The fundamentals of Webpack 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a sample project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the code used in all of the chapters in this book at [https://github.com/PacktPublishing/Webpack-5-Up-and-Running](https://github.com/PacktPublishing/Webpack-5-Up-and-Running):'
  prefs: []
  type: TYPE_NORMAL
- en: To use this guide, you will need a fundamental knowledge of JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you have the latest version of Webpack 5 installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need the use of a command line, such as Command Prompt or another command-line
    utility of your choice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need Node.js, the JavaScript runtime environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you've installed the latest version of Node.js; otherwise, you may
    encounter a lot of issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need `npm` installed on your local machine with administrator-level
    privileges. Webpack and Webpack 5 run in the Node.js environment, which is why
    we need its package manager—npm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As of the time of writing, the most current release is Webpack version 5\. Visit [https://webpack.js.org](https://webpack.js.org) to
    find the most current version for you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fundamentals of Webpack 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Essentially, Webpack is a module bundler for JavaScript applications. Webpack
    takes a series of JavaScript files, along with dependencies such as image files,
    which make up an application, and constructs something called a dependency graph.
    A dependency graph is a representation of how these files and dependencies are
    ordered and linked within an application and shows how the files interact with
    each other.
  prefs: []
  type: TYPE_NORMAL
- en: This dependency graph then forms a template that the bundler follows when taking
    all of the dependencies and files to compress them into a smaller set. Webpack
    is then able to bundle these files into a larger, but usually less-numerous, set
    of files. This eliminates problems such as unused code, repetitive code, and the
    need for rewriting. To some extent, the code can be formatted more succinctly.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack recursively builds every module in your application, then packs all
    those modules into a small number of bundles. For the most part, a bundled application
    will contain a script that is ideal to be read by a program, such as a web browser,
    but too complicated for a programmer to use. The developer, therefore, will take
    a set of source files and make changes to this area of the program, then bundle
    this source into an output—a bundled application.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling was originally intended to improve browser-reading performance, but
    it also has many other advantages. Once a set of source files is bundled by Webpack,
    it will usually follow a systematic and conventional filing structure. Errors
    within the code can halt a bundling operation; this book will instruct you on
    how to overcome these problems.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's explore the general concepts around Webpack 5.
  prefs: []
  type: TYPE_NORMAL
- en: General concepts behind Webpack 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we will begin to understand the key concepts and the purpose of Webpack,
    rather than expect you to have any prior understanding of it. Bundling is carried
    out locally on a desktop using Node.js or `npm` and the **command-line interface**
    (**CLI**), usually Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack is a build tool that puts all of your assets into a dependency graph.
    This includes JavaScript files, images, fonts, and **Cascading Style Sheets** (**CSS**).
    It will take **Sassy CSS** (**SCSS**) and TypeScript files and place them into
    CSS and JavaScript files, respectively. Webpack will only be able to do this when
    the code is compatible with the latter format.
  prefs: []
  type: TYPE_NORMAL
- en: When programming in JavaScript and other languages, the source code will often
    use a statement such as `require()`, which points one file to another. Webpack
    will detect this statement and determine the file that is needed as a dependency.
    This will decide how the files are processed in your final JavaScript bundle.
    This will also include replacing a URL path to a **content delivery network** (**CDN**)—which
    is, essentially, a network of proxy servers—with a local file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram is a representation of the general purpose of Webpack,
    which is to take a set of files or dependencies and output the content in an optimized
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a69b6e79-5bb7-4de7-acd2-f0cf6cd10d25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's take a closer look at some of the terminology, which you may be unfamiliar
    with but can be considered common parlance when using Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Terminology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will cover the terminology used in Webpack 5\. This will include
    native terms, as well as some more unusual acronyms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Assets**: This is a term frequently used in Webpack to prevent conflations
    of concepts. It refers to image files, or even data or script files, collated
    by the software when producing a bundled application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bundle: **This refers to the application that is output once Webpack has
    compiled an application. This is an optimized version of the original or source
    application—the reasons for this will be discussed in detail in later chapters.
    The bundler will combine these files into one file, which makes unpicking and
    hacking very difficult. It also improves browser performance. It does this by
    ensuring that processors are kept to an optimal level and removing any coding
    structure that does not conform to a standard. This also encourages the developer
    to adopt conventions a lot more diligently. Should there be any insecure programming,
    these locations are more easily identified, isolated, and corrected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SASS: **A version of CSS that has enhanced features. Webpack handles this
    code as it does CSS; however, it is a phrase that may come up and leave you stumped,
    so it is worth knowing about.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SCSS:** This is simply the name for the syntax version used to give SASS
    extra functionality. It is useful to know that Webpack is capable of transpiling
    both syntaxes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transpiling**: This is the process where Webpack 5 takes a set of input source
    code and changes it into a more optimized output distribution code. This is done
    by removing unused or duplicated code. Transpiling is used to convert one set
    of files into a simpler set. For instance, SCSS often contains script that can
    be easily stored inside a CSS file. You might also transpile SCSS to CSS, or TypeScript
    to JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TypeScript**: For the uninitiated, TypeScript is a type of code that is similar
    to JavaScript in many ways. Browsers, for instance, most commonly run JavaScript,
    so it may be more appropriate to use JavaScript, where possible. Webpack 5 will
    transpile TypeScript into JavaScript whenever the former allows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CDN:** A CDN is a network of proxy servers that provides high availability
    and high performance. Some examples are Google APIs, such as Google Fonts, and
    other similar tools that all JavaScript developers are, no doubt, familiar with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependency graphs**: In Webpack 5, a dependency graph is a directed graph
    representing the dependency of several assets to each other. Webpack 5 maps a
    list of assets and dependencies itself and records how they depend on each other
    in an application. It uses this to derive an appropriate output file structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Though JavaScript is the entry point, Webpack appreciates that your other asset
    types—such as HTML, CSS, and SVG—each have dependencies of their own, which should
    be considered as part of the build process.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack is comprised of **input** and **output**. The output can be made of
    one or more files. As well as bundling modules, Webpack can carry out a lot of
    functions on your files. The input refers to the original files when they are
    in their original structure, before bundling. The output refers to the resulting
    bundled files in their new and optimized filing structure. Inputs, therefore,
    are comprised of the source files and outputs can be comprised of development
    files or production files.
  prefs: []
  type: TYPE_NORMAL
- en: There is often a conflation between the terms input and output and source code
    and development code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Source code** refers to the original application before it is bundled. **Development
    code** refers to the application after it is placed in the Node.js environment
    and bundled in developmental mode. A more "tightly packed" version of the bundle
    is produced in production mode, but this version is difficult to work on. Therefore,
    the development code can be altered to some degree after it is bundled, which
    is very useful, for example, in a case where you are altering a database''s connection
    configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: When working with Webpack 5, these phrases may present themselves and it is
    important that you don't get too confused by them.
  prefs: []
  type: TYPE_NORMAL
- en: Most other terminology will be explained as we encounter it, or it is so common
    that we assume you understand these terms if you are familiar with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: That summarizes the bulk of the terminology you will come across when using
    Webpack. Now, we will explore how the software works.
  prefs: []
  type: TYPE_NORMAL
- en: How Webpack works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack works by generating a dependency graph of assets in a set of source
    files, which it transpiles an optimized set of distribution files from. These
    source and distribution files contain source code and distribution code, respectively.
    This distributed code forms the output. Distribution is simply another name for
    the output or bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack begins by finding an entry point in the source files and from there,
    it builds a dependency graph. The selection of an entry point is optional in Webpack
    5 and the choice of selection will alter the nature of the build process, either
    in terms of speed or output optimization.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack 5 is capable of transforming, bundling, or packaging just about any
    resource or asset.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered a good overview of how the software works; experienced users
    of previous Webpack versions may consider this overview rudimentary, so let's
    have a look at what is new in this current version.
  prefs: []
  type: TYPE_NORMAL
- en: What's new in Webpack 5?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The popular Webpack module bundler has undergone a massive update for the release
    of version 5\. Webpack 5 offers massive performance improvements, more dynamic
    scalability, and basic backward compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack 5 takes over from version 4, where backward compatibility wasn't always
    possible with many of the various loaders available, which were often more compatible
    with version 2, which meant that a developer would often encounter deprecation
    warnings in the command line if version 2 wasn't used. Webpack 5 has now addressed
    this issue.
  prefs: []
  type: TYPE_NORMAL
- en: Another big selling point of version 5 is federated modules. We will discuss
    this in more detail in a later [Chapter 6](c8eb858d-110e-459c-aaa9-c6b8f48aef50.xhtml), *Production,
    Integration, and Federated Modules*. However, to sum it up, federated modules
    are essentially a way for a bundled application to utilize and interact with modules
    and assets in remotely stored separate bundles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of Webpack 5 are summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Webpack 5 offers control over HTTP requests, which improves speed and performance,
    and also alleviates security concerns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webpack 5 has some advantages over rival bundlers such as Browserify and systemjs—namely,
    speed. The build time directly depends on the configuration but it's faster than
    its nearest rivals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Little or no configuration is required to use Webpack 5, but you always have
    it as an option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be more complicated to use than alternatives, but this is mainly due to
    its versatility and scope and it is well worth overcoming.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webpack 5 has optimization plugins that remove unused code fantastically well.
    It also has many related features, such as tree shaking, which we will discuss
    in more detail later in this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is more flexible than Browserify, allowing the user to select more entry
    points and use different types of assets. It's also better, when it comes to speed
    and flexibility, for bundling large web applications and for single-page web applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webpack is now considered an incredibly important tool for application development
    and web development, transforming the structure and optimizing the loading time
    for all of your web assets, such as HTML, JS, CSS, and images. Let's now get to
    grips with using Webpack practically. To do that, the first thing we will look
    at that may be new to you—if you have, perhaps, only worked with Vanilla JavaScript
    up to now—is modes.
  prefs: []
  type: TYPE_NORMAL
- en: Modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have understood the general concepts, the first thing you need to learn
    about when running a build is modes. Modes are central to how Webpack works and
    compiles projects, so it is best to cover this brief but important topic before
    we go any further.
  prefs: []
  type: TYPE_NORMAL
- en: Modes use the CLI, a process that we will cover in more detail later. If you
    are used to using Vanilla JavaScript, this may be new to you. However, rest assured
    it is not a complex topic to get your head around.
  prefs: []
  type: TYPE_NORMAL
- en: 'Webpack ships with two configuration files, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Development config**: This uses `webpack-dev-server` (hot reloading), debugging
    enabled, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Production config**: This will spit out an optimized, minimized (uglify JS),
    source-mapped bundle that is used in production environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the release of version 5, Webpack takes care of the mode features by default
    by simply adding a `mode` argument to the command. Webpack can't use `package.json` alone
    to find the mode to determine the correct build path.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a grasp of the fundamentals, it's time to progress to the practical
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book follows the development of a sample project step by step, and I am
    sure you will find this a simple way to learn how to use Webpack 5.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack 5 packages all its dependencies within the application you wish to bundle
    on a local machine. Theoretically, this can be done remotely, but to save any
    confusion for first-time users, I will emphasize the use of a local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing packages locally is recommended for most projects. It makes things
    easier when upgrade or break changes are introduced.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin with the `npm` installation. npm is the package manager that you
    will use with Webpack 5\. Once this is installed on your local machine, you will
    be able to use the `npm` command using a CLI, such as Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have installed `npm`, you can move on to the next step, which is to
    open your CLI. There are many to choose from, but for the sake of this tutorial,
    we will use Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break this down step by step so that you can follow along:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the `npm` package manager, which you will use with Wepback 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the CLI (in this tutorial, we will be using Command Prompt) and type the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let's break down the code block. The preceding command will first create a new
    directory on your local machine, called `webpack5`. It will then identify the
    current directory (`cd`) as `webpack5`. This means any further commands made through
    the CLI will be made with respect to that directory. The next command is to initialize
    `npm`. A full list of these basic commands and what they mean can be found in
    the *Further reading* section at the end of this chapter. This section makes for
    some interesting reading and I'm sure you will learn something new. Then, we locally
    install Webpack and install `webpack-cli`—this is the tool used to run Webpack
    on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, install the latest release, or a specific version of Webpack, and run
    the following command. However, on the second line, replace `<version>` with the
    version of your choice, such as `5.00`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The next command is `npm install`, which will install Webpack 5 in the directory
    and save the project in a development environment. It is important to note that
    there is a difference between the development and production environments (or
    modes):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The following lines are a code snippet from the `package.json` file. We need
    these in the input files to generate a `webpack.config.js` file, which holds the
    configuration information for your Webpack bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must take care to ensure that the `package.json` file is coded as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When using Webpack 5, you can access its binary version by running `npx webpack`
    in the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: We should also decide which type of installation we need; any re-installation
    will overwrite the previous one, so don't worry if you have already followed the
    preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: Let's do that installation now, if applicable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two types of installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Global**: A global installation will lockdown your installation to a specific
    version of Webpack.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following `npm` installation will make Webpack available globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Local**: A local installation will allow you to run Webpack in the project
    directory. This needs to be done via the `npm` script:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You will need to carry out all of the preceding steps every time you begin a
    new project on a new local machine. Once you have completed the installation,
    it is time to revert your attention to building a project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a sample project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we'll create an experimental project with the following directory structure,
    files, and their contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block refers to a folder on your local machine. It illustrates
    the format and naming conventions typically used in Webpack. You should follow
    this format to ensure your project aligns with this tutorial, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by setting up the **project tree**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The project tree shows us the files that we will work on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now take a closer look at the index files as they will be key to our
    frontend, starting with `src/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`index.js` contains our JS. The `index.html` file that follows is our user''s
    frontend.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It will also need setting up, so let''s open and edit `index.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note the preceding `<script src="img/lodash@4.16.6">` tag. This refers to the
    use of the `lodash` library. The `index.js` file (not the `index.html` file) requires
    this library to be called. Webpack will take whatever modules it needs from the
    library and use them to build a dependency graph for the bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Lodash is a JavaScript library that provides functional programming tasks. It
    was released under the MIT license and essentially makes things easier when working
    with numbers, arrays, strings, and objects.
  prefs: []
  type: TYPE_NORMAL
- en: Something to be aware of is that if it is not made clear that your code depends
    on an external library, the application will not function properly. For example, dependencies
    could be missing or included in the wrong order. Conversely, the browser will
    download unnecessary code if a dependency is included but not used.
  prefs: []
  type: TYPE_NORMAL
- en: We can manage these scripts by using Webpack 5.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need to adjust your `package.json` file to mark your package
    as private, as well as removing the main entry point. This is to prevent accidentally
    publishing your code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can see how to make these alterations from the bold text in the preceding
    code. Note that our entry point will be set as `index.js`. This is the first file
    that Webpack will read when beginning a bundle compilation (see the previous definition
    of a dependency graph).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about the `package.json` file, go to [https://docs.npmjs.com/getting-](https://docs.npmjs.com/getting-started/)[started/](https://docs.npmjs.com/getting-started/),
    which gives you information about `npm`.
  prefs: []
  type: TYPE_NORMAL
- en: We have now finished with the source code for the first demonstration application
    bundle. This constitutes the input or source files that we will now run through
    Webpack to produce our first bundled application.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling your first project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web packing simply means bundling the project. It is the essence of Webpack
    and starting with this very simple introduction is an excellent way to begin learning
    about the application.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we need to separate the source code from our distribution code by altering
    our directory structure slightly. This source code is used to write and edit and the
    distribution code is the minimized and optimized bundle that is the result of
    our build process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now go through each step for building our first project in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin by structuring the project and the directories. First, note the
    `/src` and `/dist` terms; they refer to the source code and distribution code,
    respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To bundle the `lodash` dependency with `index.js`, we need to install the library
    locally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When installing a package that will be bundled to your production bundle, you
    should use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re installing a package for development purposes (for example, a linter,
    testing libraries, and so on), you should use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s import `lodash` into our script using **`src/main.js`**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Next, update your `dist/index.html` file. We will remove the inclusion of the
    `lodash` library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is done because we will be installing the library locally for bundling
    and no longer need to make a remote call to the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will use the command line to run `npx webpack`. The `npx` command
    ships with Node 8.2/npm 5.0.0 or higher and runs the Webpack binary (`./node_modules/.bin/webpack`).
    This will take our script at `src/index.js` as the entry point and will generate
    `dist/main.js` as the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If there are no errors, the build can be considered successful.
  prefs: []
  type: TYPE_NORMAL
- en: Note that a warning is not considered an error. The warning is simply shown
    because no mode has yet been set.
  prefs: []
  type: TYPE_NORMAL
- en: I wouldn't be concerned about this as Webpack will default to production mode.
    We will handle the setting of modes later in this guide.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the following text when you open `index.html` in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Huzzah—we have completed our first application bundle and I bet you're very
    proud of yourself! This was a fundamental step to begin with; we will move on
    to more complex elements of Webpack in later chapters and begin applying them
    to existing projects that need bundling.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To summarize, Webpack 5 is an incredibly versatile bundler that uses almost every
    conceivable method to optimize the size of applications and improve the overall
    performance. It is very worthwhile getting to grips with it and this guide will
    show you everything you need to know to do so.
  prefs: []
  type: TYPE_NORMAL
- en: You should now understand the basic concepts behind Webpack, as well as the
    fundamental terminology. You should also now know how to install the prerequisites,
    such as Node.js, and set up and deploy—as well as make—your first bundle using
    the command line.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will elaborate on modules and code splitting, as well
    as some of the more salient and interesting aspects of Webpack 5 that are key
    to understanding Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are a series of questions related to this chapter that you should
    try to answer to aid your learning. The answers can be found under the *Assessments*
    section in the back matter of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Webpack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a bundle in Webpack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the latest version of Webpack, according to this guide?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which environment does Webpack work in?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a dependency graph?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When bundling, what entry is missing from the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm --save lodash`'
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of the package manager that we use with Webpack 5?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you remove the `lodash` library using the command line?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between source code and distribution code when working
    with Webpack 5?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When setting up your project, why might you adjust the `package.json` file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
