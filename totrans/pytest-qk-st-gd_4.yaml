- en: Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we explored one of the most important features of
    pytest: fixtures. We learned how we can use fixtures to manage resources and make
    our lives easier when writing tests.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: pytest is constructed with customization and flexibility in mind, and allows
    developers to write powerful extensions called **plugins**. Plugins in pytest
    can do all sorts of things, from simply providing a new fixture, all the way to
    adding command line options, changing how tests are executed, and even running
    tests written in other languages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to find and install plugins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a taste of what plugins the ecosystem has to offer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding and installing plugins
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned at the beginning of the chapter, pytest is written from the ground
    up with customization and flexibility in mind. The plugin mechanism is at the
    core of the pytest architecture, so much so that many of pytest's built-in features
    are implemented in terms of internal plugins, such as marks, parametrization,
    fixtures—nearly everything, even command-line options.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: This flexibility has led to an enormous and rich plugin ecosystem. At the time
    of writing, the number of plugins available is over 500, and that number keeps
    increasing at an astonishing rate.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Finding plugins
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Given the large number of plugins, it would be nice if there was a site that
    showed all pytest plugins along with their descriptions. It would also be nice
    if this place also showed information about compatibility with different Python
    and pytest versions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, the good news is that such a site exists, and it is maintained by the
    core development team: pytest plugin compatibility ([http://plugincompat.herokuapp.com/](http://plugincompat.herokuapp.com/)).
    On it, you will find a list of all the pytest plugins available in PyPI, along
    with Python- and pytest-version compatibility information. The site is fed daily
    with new plugins and updates directly from PyPI, making it a great place to browse
    for new plugins.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Installing plugins
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Plugins are usually installed with `pip`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, to install `pytest-mock`, we execute the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: No registration of any kind is necessary; pytest automatically detects the installed
    plugins in your virtual environment or Python installation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: This simplicity makes it dead easy to try out new plugins.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: An overview of assorted plugins
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will take a look at some useful and/or interesting plugins. Of course,
    it is not possible to cover all plugins here, so we will try to cover the ones
    that cover popular frameworks and general capabilities, with a few obscure plugins
    thrown in. Of course, this barely scratches the surface, but let's get to it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: pytest-xdist
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a very popular plugin and is maintained by the core developers; it allows
    you to run tests under multiple CPUs, to speed up the test run.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing it, simply use the `-n` command-line flag to use the given
    number of CPUs to run the tests:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And that's it! Now, your tests will run across four cores and hopefully speed
    up the test suite quite a bit, if it is CPU intensive, thought I/O-bound tests
    won't see much improvement, though. You can also use `-n auto` to let `pytest-xdist`
    automatically figure out the number of CPUs you have available.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that when your tests are running concurrently, and in random order,
    they must be careful to avoid stepping on each other's toes, for example, reading/writing
    to the same directory. While they should be idempotent anyway, running the tests
    in a random order often brings attention to problems that were lying dormant until
    then.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: pytest-cov
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pytest-cov` plugin provides integration with the popular coverage module,
    which provides detailed coverage reports for your code when running tests. This
    lets you detect sections of code that are not covered by any test code, which
    is an opportunity to write more tests to cover those cases.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, you can use the `--cov` option to provide a coverage report
    at the end of the test run:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `--cov` option accepts a path to source files that should have reports generated,
    so you should pass your `src` or package directory depending on your project's
    layout.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `--cov-report` option to generate reports in various formats:
    XML, annotate, and HTML. The latter is especially useful to use locally because
    it generates HTML files showing your code, with missed lines highlighted in red,
    making it very easy to find those uncovered spots.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: This plugin also works with `pytest-xdist` out of the box.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `.coverage` file generated by this plugin is compatible with many
    online services that provide coverage tracking and reporting, such as `coveralls.io`
    ([https://coveralls.io/](https://coveralls.io/)[) and `codecov.io` (](https://coveralls.io/)[https://codecov.io/](https://codecov.io/)[).](https://coveralls.io/)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: pytest-faulthandler
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This plugin automatically enables the built-in `faulthandler` ([https://docs.python.org/3/library/faulthandler.html](https://docs.python.org/3/library/faulthandler.html))
    module when running your tests, which outputs Python tracebacks in catastrophic
    cases such as a segmentation fault. After installed, no other setup or flag is
    required; the `faulthandler` module will be enabled automatically.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: This plugin is strongly recommended if you regularly use extension modules written
    in C/C++, as those are more susceptible to crashes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: pytest-mock
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pytest-mock` plugin provides a fixture that allows a smoother integration
    between pytest and the `unittest.mock` ([https://docs.python.org/3/library/unittest.mock.html](https://docs.python.org/3/library/unittest.mock.html))
    module of the standard library. It provides functionality similar to the built-in
    `monkeypatch` fixture, but the mock objects produced by `unittest.mock` also record
    information on how they are accessed. This makes many common testing tasks easier,
    such as verifying that a mocked function has been called, and with which arguments.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin provides a `mocker` fixture that can be used for patching classes
    and methods. Using the `getpass` example from the last chapter, here is how you
    could write it using this plugin:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that besides replacing `getpass.getpass()` and always returning the same
    value, we can also ensure that the `getpass` function has been called with the
    correct arguments.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The same advice on how and where to patch the `monkeypatch` fixture from the
    previous chapter also applies when using this plugin.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: pytest-django
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, this plugin allows you to test your `Django` ([https://www.djangoproject.com/](https://www.djangoproject.com/))
    applications using pytest. `Django` is one of the most famous web frameworks in
    use today.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin provides a ton of features:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: A very nice Quick Start tutorial
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line and `pytest.ini` options to configure Django
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility with `pytest-xdist`
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database access using the `django_db` mark, with automatic transaction rollback
    between tests, as well as a bunch of fixtures that let you control how the database
    is managed
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixtures to make requests to your application: `client`, `admin_client`, and
    `admin_user`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `live_server` fixture that runs a `Django` server in a background thread
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All in all, this is one of the most complete plugins available in the ecosystem,
    with too many features to cover here. It is a must-have for `Django` applications,
    so make sure to check out its extensive documentation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: pytest-flakes
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This plugin allows you to check your code using `pyflakes` ([https://pypi.org/project/pyflakes/](https://pypi.org/project/pyflakes/)),
    which is a static checker of source files for common errors, such as missing imports
    and unknown variables.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'After installed, use the `--flakes` option to activate it:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will run the flake checks alongside your normal tests, making it an easy
    and cheap way to keep your code tidy and prevent some errors. The plugin also
    keeps a local cache of files that have not changed since the last check, so it
    is fast and convenient to use locally.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: pytest-asyncio
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `asyncio` ([https://docs.python.org/3/library/asyncio.html](https://docs.python.org/3/library/asyncio.html))
    module is one of the hot new additions to Python 3, providing a new framework
    for asynchronous applications. The `pytest-asyncio` plugin lets you write asynchronous
    test functions, making it a snap to test your asynchronous code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'All you need to do is make your test function `async def` and mark it with
    the `asyncio` mark:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The plugin also manages the event loop behind the scenes, providing a few options
    on how to change it if you need to use a custom event loop.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: You are, of course, free to have normal synchronous test functions along with
    the asynchronous ones.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: pytest-trio
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Trio's motto is Pythonic async I/O for humans ([https://trio.readthedocs.io/en/latest/](https://trio.readthedocs.io/en/latest/)).
    It uses the same `async def`/`await` keywords of the `asyncio` standard module,
    but it is considered simpler and more friendly to use, containing some novel ideas
    about how to deal with timeouts and groups of parallel tasks in a way to avoid
    common errors in parallel programming. It is definitely worth checking out if
    you are into asynchronous development.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '`pytest-trio` works similarly to `pytest-asyncio`: you write asynchronous test
    functions and mark them using the `trio` mark. It also provides other functionality
    that makes testing easier and more reliable, such as controllable clocks for testing
    timeouts, special functions to deal with tasks, mocking network sockets and streams,
    and a lot more.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: pytest-tornado
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tornado ([http://www.tornadoweb.org/en/stable/](http://www.tornadoweb.org/en/stable/))
    is a web framework and asynchronous network library. It is very mature, works
    in Python 2 and 3, and the standard `asyncio` module borrowed many ideas and concepts
    from it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '`pytest-asyncio` was heavily inspired by `pytest-tornado`, so it works with
    the same idea of using a `gen_test` to mark your test as a coroutine. It uses
    the `yield` keyword instead of `await`, as it supports Python 2, but otherwise
    it looks very similar:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: pytest-postgresql
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This plugin allows you to test code that needs a running PostgreSQL database.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a quick example of it in action:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It provides two fixtures:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '`postgresql`: a client fixture that starts and closes connections to the running
    test database. At the end of the test, it drops the test database to ensure tests
    don''t interfere with one another.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postgresql_proc`: a session-scoped fixture that starts the PostgreSQL process
    once per session and ensures that it stops at the end.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also provides several configuration options on how to connect and configure
    the testing database.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: docker-services
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This plugin starts and manages Docker services you need in order to test your
    code. This makes it simple to run the tests because you don't need to manually
    start the services yourself; the plugin will start and stop them during the test
    session, as needed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'You configure the services using a `.services.yaml` file; here is a simple
    example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will start two services: `postgres` and `redis`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'With that, all that''s left to do is to run your suite with the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The plugin takes care of the rest.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: pytest-selenium
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium is a framework targeted to automating browsers, to test web applications
    ([https://www.seleniumhq.org/](https://www.seleniumhq.org/)). It lets you do things
    such as opening a web page, clicking on a button, and then ensuring that a certain
    page loads, all programmatically. It supports all the major browsers out there
    and has a thriving community.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '`pytest-selenium` provides you with a fixture that lets you write tests that
    do all of those things, taking care of setting up `Selenium` for you.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a basic example of how to visit a page, click on a link, and check
    the title of the loaded page:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`Selenium` and `pytest-selenium` are sophisticated enough to test a wide range
    of applications, from static pages to full single-page frontend applications.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: pytest-html
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`pytest-html` generates beautiful HTML reports of your test results. After
    installing the plugin, simply run this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will generate a `report.html` file at the end of the test session.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Because pictures speak louder than words, here is an example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f71502c4-fb19-427a-8299-7d04fbb01c59.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: The reports can be served in a web server for easier viewing, plus they contain
    nice functionality such as checkboxes to show/hide different types of test results,
    and other plugins such as `pytest-selenium` are even able to attach screenshots
    to failed tests, as in the previous image.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: It's definitely worth checking out.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: pytest-cpp
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To prove the point that pytest's framework is very flexible, the `pytest-cpp`
    plugin allows you to run tests written in Google Test ([https://github.com/google/googletest](https://github.com/google/googletest))
    or Boost.Test ([https://www.boost.org](https://www.boost.org)[)](https://www.boost.org),
    which are frameworks for writing and running tests in the C++ language.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'After they are installed, you just need to run pytest as normal:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Pytest will find executable files containing test cases, detecting  automatically
    whether they are written in `Google Test` or `Boost.Python`. It will run the tests
    and report results normally, with neat formatting that is familiar to pytest users.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Running those tests with pytest means that they now can make use of several
    features, such as parallel running with `pytest-xdist`, test selection with `-k`,
    JUnitXML reports, and so on. This plugin is particularly useful for code bases
    that use Python and C++ because it allows you to run all tests with a single command,
    and you can obtain a unique report.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: pytest-timeout
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pytest-timeout` plugin terminates tests automatically after they reach
    a certain timeout.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'You use it by setting a global timeout in the command-line:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Or you can mark individual tests with the `@pytest.mark.timeout` mark:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It works by using one of the two following methods to implement its timeout
    mechanism:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '`thread`: during test setup, the plugin starts a thread that sleeps for the
    desired timeout period. If the thread wakes up, it will dump the tracebacks of
    all the threads to `stderr` and kill the current process. If the test finishes
    before the thread wakes up, then the thread is cancelled and the test run continues.
    This is the method that works on all platforms.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`signal`: a `SIGALRM` is scheduled during test setup and canceled when the
    test finishes. If the alarm is triggered, it will dump the tracebacks of all threads
    to `stderr` and fail the test, but it will allow the test run to continue. The
    advantage over the thread method is that it won''t cancel the entire run when
    a timeout occurs, but it is not supported on all platforms.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method is chosen automatically based on platform, but it can be changed
    in the command line or per-test by passing the `method=` parameter to `@pytest.mark.timeout`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: This plugin is indispensable in large test suites to avoid having tests hanging
    the CI.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: pytest-annotate
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pyannotate ([https://github.com/dropbox/pyannotate](https://github.com/dropbox/pyannotate)) is
    a project that observes runtime type information and can use that information
    to insert type annotations into the source code, and `pytest-annotate` makes it
    easy to use with pytest.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get back to this simple test case:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After installing `pytest-annotate`, we can generate an annotations file passing
    the `--annotations-output` flag:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will run the test suite as usual, but it will collect type information
    for later use.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'Afterward, you can call `PyAnnotate` to apply the type information directly
    to the source code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It is very neat to quickly and efficiently annotate a large code base, especially
    if that code base is well covered by tests.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: pytest-qt
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pytest-qt` plugin allows you to write tests for GUI applications written
    in the `Qt` framework ([https://www.qt.io/](https://www.qt.io/)), supporting the
    more popular sets of Python bindings for `Qt`: `PyQt4`/`PyQt5`, and `PySide`/`PySide2`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'It provides a `qtbot` fixture that has methods to interact with a GUI application,
    such as clicking on buttons, entering text in fields, waiting for windows to pop
    up, and others. Here''s a quick example showing it in action:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we create a window, click on the about button, wait for the about box
    to show up, and then ensure it shows the text we expect.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'It also contains other goodies:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Utilities to wait for specific `Qt` signals
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic capturing of errors in virtual methods
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic capturing of `Qt` logging messages
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pytest-randomly
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tests ideally should be independent from each other, making sure to clean up
    after themselves so they can be run in any order and don't affect one another
    in any way.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '`pytest-randomly` helps you keep your test suite true to that point, by randomly
    ordering tests, changing their order every time you run your test suite. This
    helps detect whether the tests have hidden inter-dependencies that you would not
    find otherwise.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: It shuffles the order of the test items at module level, then at class level,
    and finally at the order of functions. It also resets `random.seed()` before each
    test to a fixed number, which is shown at the beginning of the test section. The
    random seed can be used at a later time to reproduce the same order with the `--randomly-seed`
    command line to reproduce a failure.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: As an extra bonus, it also has special support for `factory boy` ([https://factoryboy.readthedocs.io/en/latest/reference.html](https://factoryboy.readthedocs.io/en/latest/reference.html)),
    `faker` ([https://pypi.python.org/pypi/faker](https://pypi.python.org/pypi/faker)),
    and `numpy` ([http://www.numpy.org/](http://www.numpy.org/)) libraries, resetting
    their random state before each test.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: pytest-datadir
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, tests need a supporting file, for example a CSV file containing data
    about comedy series, as we saw in the last chapter. `pytest-datadir` allows you
    to save files alongside your tests and easily access them from the tests in a
    safe manner.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you have a file structure such as this:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In addition to this, you have a `series.csv` file that you need to access from
    tests defined in `test_series.py`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'With `pytest-datadir` installed, all you need to do is to create a directory
    with the name of the test file in the same directory and put the file there:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `test_series` directory and `series.csv` should be saved to your version-control
    system.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, tests in `test_series.py` can use the `datadir` fixture to access the
    file:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`datadir` is a Path instance pointing to the data directory ([https://docs.python.org/3/library/pathlib.html](https://docs.python.org/3/library/pathlib.html)).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: One important thing to note is that when we use the `datadir` fixture in a test,
    we are not accessing the path to the original file, but a temporary copy. This
    ensures that tests can modify the files inside the data directory without affecting
    other tests because each test has its own copy.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: pytest-regressions
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is normally the case that your application or library contains functionality
    that produces a data set as the result.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing these results is often tedious and error-prone, producing tests such
    as this:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This gets old very quickly. Also, if any of the assertion fails, then the test
    stops at that point, and you won't know whether any other asserts after that point
    would also have failed. In other words, you don't get a clear picture of the overall
    failures. Most of all, this is also heavily unmaintainable because if the data
    returned by `obtain_series()` ever changes, you are in for a tedious and error-prone
    task of updating all the code.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '`pytest-regressions` provides fixtures to solve this kind of problem. General
    data such as the previous example is a job for the `data_regression` fixture:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The first time you execute this test, it will fail with a message such as this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'It will dump the data passed to `data_regression.check()` in a nicely formatted
    YAML file into the data directory of the `test_series.py` file (courtesy of the
    `pytest-datadir` fixture we saw earlier):'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The next time you run this test, `data_regression` now compares the data passed
    to `data_regressions.check()` with the data found in `test_obtain_series.yml`
    inside the data directory. If they match, the test passes.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'If the data is changed, however, the test fails with a nicely formatted text
    differential  between the new data and the recorded one:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In some cases, this might be a regression, in which case you can hunt down the
    bug in the code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'But in this case, the new data is *correct;* you just need to run pytest with
    the `--force-regen` flag and `pytest-regressions` will update the data file with
    the new content for you:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, the test passes if we run it again, as the file contains the new data.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: This is an immense time saver when you have dozens of tests that suddenly produce
    different but correct results. You can bring them all up to date with a single
    pytest execution.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: I use this plugin myself, and I can't count the hours it has saved me.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Honorable mentions
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are just too many good plugins to fit into this chapter. The previous
    sample is really just a small taste, where I tried to strike a balance between
    useful, interesting, and showing the flexibility of the plugin architecture.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few other plugins that are worth mentioning:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '`pytest-bdd`: a behavior-driven development for pytest'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-benchmark`: a fixture to benchmark code. It outputs benchmark results
    with color output'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-csv`: outputs test status as CSV files'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-docker-compose`: this manages Docker containers, using Docker compose
    during test runs'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-excel`: outputs test status reports in Excel'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-git`: provides a git fixture for tests that need to deal with git repositories'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-json`: outputs test statuses as json files'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-leaks`: detects memory leaks, by running tests repeatedly and comparing
    reference counts'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-menu`: lets the user select tests to run from a menu in the console'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-mongo`: process and client fixtures for MongoDB'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-mpl`: plugin that tests figures output from Matplotlib'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-mysql`: process and client fixtures for MySQL'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-poo`: replaces the `F` character for failing tests with the "pile of
    poo" emoji'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-rabbitmq`: process and client fixtures for RabbitMQ'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-redis`: process and client fixtures for Redis'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-repeat`: repeats all tests or specific tests a number of times to find intermittent
    failures'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-replay`: saves test runs and allows the user to execute them later,
    so as to reproduce crashes and flaky tests'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-rerunfailures`: this marks tests that can be run more than once to
    eliminate flaky tests'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-sugar`: changes the look and feel of the pytest console, by adding
    progress bars, emojis, instant failures, and so on'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-tap`: toutputs test reports in TAP format'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-travis-fold`: folds captured output and coverage reports in the Travis
    CI build log'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-vagrant`: pytest fixture that works with vagrant boxes'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-vcr`: automatically manages `VCR.py` cassettes ([https://vcrpy.readthedocs.io/en/latest/](https://vcrpy.readthedocs.io/en/latest/)),
    using a simple mark'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-virtualenv`: this provides a virtualenv fixture to manage virtual environments
    in tests'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-watch`: this continuously watches for changes in the source code and
    reruns pytest'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytest-xvfb`: this runs `Xvfb` (a virtual frame buffer) for your UI tests'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tavern`: is tan automated test for APIs using a YAML-based syntax'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xdoctest`: rewrite of the built-in doctests module, to make doctests easier
    to write and simpler to configure'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, at the time of writing, the number of pytest plugins available is
    over 500, so make sure to browse the list of plugins so that you can find something
    to your liking.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在撰写本文时，pytest插件的数量已经超过500个，所以一定要浏览插件列表，以便找到自己喜欢的东西。
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how easy it is to find and install plugins. We
    also have been shown some plugins that I use daily and find interesting. I hope
    this has given you a taste of what's possible in pytest, but please explore the
    vast number of plugins to see whether you can find any that are useful.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了查找和安装插件是多么容易。我们还展示了一些我每天使用并且觉得有趣的插件。我希望这让你对pytest的可能性有所了解，但请探索大量的插件，看看是否有任何有用的。
- en: 'Creating your own plugins is not a topic that is covered in this book, but
    if you are interested, here are some resources to get you started:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自己的插件不是本书涵盖的主题，但如果你感兴趣，这里有一些资源可以帮助你入门：
- en: 'The pytest documentation: writing plugins ([https://docs.pytest.org/en/latest/writing_plugins.html](https://docs.pytest.org/en/latest/writing_plugins.html)).'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pytest文档：编写插件（[https://docs.pytest.org/en/latest/writing_plugins.html](https://docs.pytest.org/en/latest/writing_plugins.html)）。
- en: Brian Okken's wonderful book about pytest Python testing with pytest, which
    delves deeper than this book does, has an excellent chapter on how to write your
    own plugins.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Brian Okken的关于pytest的精彩书籍《Python测试与pytest》，比本书更深入地探讨了如何编写自己的插件。
- en: In the next chapter, we will learn how to use pytest with existing `unittest`-based
    test suites, including tips and suggestions on how to migrate them and incrementally
    use more of pytest's features.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何将pytest与现有的基于`unittest`的测试套件一起使用，包括有关如何迁移它们并逐步使用更多pytest功能的提示和建议。
