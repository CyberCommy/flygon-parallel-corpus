- en: Chapter 7. Organizing and Backing Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Versions of source control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a versioning client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting a host to save your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding source control to your code – committing and updating your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving conflicts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us consider that we need to work on a project that has many developers.
    If every developer is working on different source files, one (rather horrible)
    way to work is to get the newly updated source file in an e-mail or an FTP client
    and replace it in your project. Now what if the developers, including yourself,
    are working on the same source file. We can still follow this horrible way and
    add the parts that we have worked on to the file we received via FTP, but very
    soon this is going to become very cumbersome and make it almost impossible to
    work. So we have a system of saving the files to some central repository or distributed
    repository, and then have the means to update and send the code so that every
    developer is working with the latest copy. There are various ways to perform this
    and it is commonly referred to as versioning the code.
  prefs: []
  type: TYPE_NORMAL
- en: Versions of source control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Revision control is a very effective way to share files across developers. There
    are various version control systems and each has its own merits and drawbacks.
    We will be looking at the three most popular version control systems out there.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To work through this recipe, you will need a machine running Windows. No other
    prerequisites are required.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will see the different types of source control available
    to us:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to this link and download for an SVN client: [http://tortoisesvn.net/downloads.html](http://tortoisesvn.net/downloads.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to this link and download for a GIT client: [https://desktop.github.com](https://desktop.github.com)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to this link and download for a Mercurial client: [http://tortoisehg.bitbucket.org/download/index.html](http://tortoisehg.bitbucket.org/download/index.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are various types of SVN clients available to us. Each has its own merits
    and drawbacks.
  prefs: []
  type: TYPE_NORMAL
- en: SVN has a lot of features that fix issues relating to atomic operations and
    source corruption. It is free and open source. It has lots of plugins for different
    IDEs. However, one of the major drawbacks of this tool is that is comparatively
    very slow in its operations.
  prefs: []
  type: TYPE_NORMAL
- en: GIT was made primarily for Linux but it improves the operation speed a lot.
    It does work on UNIX systems as well. It has cheap branch operations but it is
    not totally optimized for a single developer and its Windows support is limited
    compared to Linux. However, GIT is extremely popular and many prefer GIT over
    SVN.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a versioning client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are plenty of versioning clients. However, we are going to look at an
    SVN client. **Tortoise SVN** is by far the most popular among SVN users. Although
    GIT is another system that is immensely popular, we will look at Tortoise SVN
    for this recipe. Tortoise SVN provides a very friendly and intuitive interface,
    so it is very easy for beginners to grasp as well. Within a few hours, a total
    newbie can understand the basics of using Tortoise SVN.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need a Windows machine. No other prerequisite is needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will find out how easy it is to install and use Tortoise
    SVN:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to this link: [http://tortoisesvn.net/downloads.html](http://tortoisesvn.net/downloads.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install the correct version, based on whether you are using a 32-bit
    or a 64-bit Windows machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that a new command called **SVN Checkout…** is now available for use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After we go the download site and install the package, it gets installed on
    the system and also lots of shell and kernel commands are added. So when we right-click
    on the folder, the **SVN Checkout…** command is now added as a property for any
    new folder. There is also another command called **Tortoise SVN** available to
    us, which has even more commands. After we check out a project, the **SVN Checkout…**
    gets replaced with **SVN Update** or **SVN Commit**. We just need to make sure
    that we have added the correct installer to the machine, based on the OS version
    we are using.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a host to save your data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start versioning our code, we need to decide where we need to
    save our code files to. There are quite a few ways to do this, but we will discuss
    the two most popular ways. The first way is to save the files locally and treat
    your personal computer as a server to host data. The second method is to use a
    cloud service to host the data files for us.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to have a working Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will find out how easy it is to host the files locally or
    on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the files saved on the cloud follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the following link: [https://xp-dev.com](https://xp-dev.com).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Plans** and select a plan most suitable to your needs. There is also
    a free plan for 10 MB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After selecting a plan, you will be redirected to create a name for the current
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new project will now show up on the dashboard. You can create multiple projects
    based on your plan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on a project. This should open up more tabs. The most important ones
    currently are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Repository**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project Tracking**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activity**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Settings**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Repository** to create a new repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The link generated can now be used to version our files in the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To add users to the project, click on **Settings** and invite users to the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the files saved on the local server:'
  prefs: []
  type: TYPE_NORMAL
- en: Save the new project or an empty project on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download **Visual SVN Server** from here: [https://www.visualsvn.com/server/](https://www.visualsvn.com/server/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then create a project from the existing project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your project is now ready to be version controlled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To add users, click on **Users** and add a username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we create a project on `xp-dev`, what actually happens is that `xp-dev`
    creates a cloud space for us on their server, based on whatever plan we have chosen.
    After that, for each iteration of the file, it saves a copy on the server. On
    the dashboard, once we create one repository, we can create a new repository and
    the URL generated will now be the URL of the project. In that way, we can revert
    back to any iteration or restore a file if we mistakenly delete it. When we commit
    a file, a new copy of the file is now saved on the server. When we update the
    project, the latest version on the server is now pushed to your local machine.
    In this way, `xp-dev` saves the entire history of activities for all updates and
    commits. The drawback of the system is that if the `xp-dev` client is down, then
    all the cloud services will also be down. Hence, the project will suffer due to
    you not being able to do any updates or commits.
  prefs: []
  type: TYPE_NORMAL
- en: The other way to host is to use your own local machine. Visual SVN Server basically
    turns your computer into a server. After that, the process is pretty similar to
    how `xp-dev` handles all updates and commits.
  prefs: []
  type: TYPE_NORMAL
- en: What we could also do is take some space from Amazon or Azure and use that space
    as a server. In that case, the steps are pretty similar to the second method (local
    server). After logging in to Amazon space or Azure space, treat that as your machine
    and then repeat the steps for the local server.
  prefs: []
  type: TYPE_NORMAL
- en: Adding source control – committing and updating your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important things that you can do to files when working on a
    collaborative project or individually is to add source control. The biggest advantage
    of doing so is that the files are always backed up and versioned. Let's say that
    you made some local changes and there are lots of crashes. As a result of those
    crashes, what will you do? One option is to retrace your steps and change them
    back to what they were before. This is a time-wasting process and there is also
    risk involved. If your files are backed up, all you need to do is a revert operation
    to a particular revision and the code is restored to that point. Similarly, if
    we delete a file by mistake, we can always update the project and it will pull
    the most current file from the server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need a Windows machine and an installed version of
    an SVN client. A data hosting service should already be integrated by now and
    you should have a URL. No other prerequisites are required.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will find out how easy it is to add source control:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder on the machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it to whatever you want to call it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and check whether the SVN command is showing up as one of the options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **SVN Checkout**. Use the URL you received from `xp-dev` or your local
    server or cloud server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a file into the new folder. It can be in any format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the file and select **Tortoise SVN** |**Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the root folder and select **SVN** | **Commit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **SVN** | **Update**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make some changes to the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **SVN** | **Commit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then select **Tortoise SVN** and then **Revert to this revision** (revision
    `1`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the SVN checkout is successful, the project is either copied from the
    local machine to the server or copied from the server to the local machine, based
    on which is the most up to date. Once we add the file into the folder, we have
    to remember that the file is still local. Only we can see it and have access to
    it. Others who are working on that project will have no idea about it. Now, one
    of the common mistakes that a new programmer may make at this stage is to forget
    to add the file to the SVN. When you commit the project, that file will not show
    up. There is a checkbox in the commit section for **Show unversioned files**.
    However, I will not recommend that approach, as all temporary files will also
    be shown in this case. A better approach is to right-click on the file and go
    to **Tortoise SVN** | **Add**. This will add the file for revisioning. Now we
    can do an SVN commit and the file will be stored on the server.
  prefs: []
  type: TYPE_NORMAL
- en: When we delete the file, we again have to remember that we have just deleted
    the file locally. The instance of it still exists on the server. So when we perform
    an SVN update, the file will again be restored. We have to be careful not to do
    a **Tortoise SVN** | **Delete and Commit**. This will remove it from the server
    for that revision. Now if we make some changes to the file, we can **SVN Commit**
    it. We no longer need to select **Tortoise SVN** | **Add**. This creates a new
    version of the file on the server. Both versions of the file are now present.
    We can have as many versions as we need. To access any revision, we need to select
    either the root folder or any particular file and perform a **Revert to this revision**
    `(number)`. The server then looks up the version that we requested and pushes
    the correct copy to us.
  prefs: []
  type: TYPE_NORMAL
- en: Resolving conflicts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us consider a single source file that has been worked on by multiple programmers.
    You might have some local changes. When you try to update, it may happen that
    the SVN client is smart enough to merge the files together. However, in most cases
    it will not be able to merge properly and we need to resolve conflicts effectively.
    The SVN client, however, will show the files that are in conflict.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need a Windows machine and an installed version of
    an SVN client. A versioned project is also necessary.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will find out how easy it is to resolve conflicts:'
  prefs: []
  type: TYPE_NORMAL
- en: Take a project that is already versioned and committed to SVN.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a file in an editor and make changes to the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the **SVN Update** operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The files now show a conflict.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See the differences between the two files using the **Diff tool** or **Win Merge**
    (you may need to install Win Merge separately).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generally, the left-hand side will be the local revision and the right-hand
    side will be the version on the server. However, these could be swapped as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After looking at the differences, you may resolve the conflicts in two ways:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the portions that you want from the server and the portions that you
    want from the local changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Resolve conflict using "mine"** or select **Resolve conflict using
    "theirs"**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What happens in a conflict is that the client on its own cannot make a decision
    on whether the local copy or the server copy should be treated as the correct
    working version. Most good clients will show this as an error once we do an update.
    Other clients will insert both sections in the code, generally with an `r>>>>>`
    or an `m>>>>` notation, to denote which section is the server and which section
    is ours. On the Tortoise SVN, if we choose to ignore conflicts, then these notations
    may be displayed as separate files or included in the file. A better approach
    is to always resolve conflicts. If we use a tool such as Win Merge, it will show
    us the two revisions side by side and we can compare and choose the sections we
    need, or the whole file. After that, once we have taken the changes and committed
    them, that file will become the updated version on the server. So others updating
    their code will also get the changes we made.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us consider that we are making a game which is due for release at the end
    of the year. However, we also need to showcase a polished version of the game
    for GDC or E3\. At that point, the producer might ask us to make a build specific
    to E3 or GDC. This GDC or E3 build can be polished and made stable, whereas the
    main build may continue to be experimented with by adding new features.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To work through this recipe, you will need a machine running Windows with an
    installed version of an SVN client. A versioned project is also required. No other
    prerequisites are needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will find out how easy it is to create a branch:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the versioned project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the repo browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the root folder from which you want to create the branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the destination.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A branch is now created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check out the created branch onto the machine by using the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we create a branch from a root folder, a mirror copy of that folder and
    consequent subfolders is created. From then on, the two can work independently.
    The main root has a URL, and the branch also has its own URL. We can update and
    commit to the branch as we would for the root folder. Also, all other functionalities
    are available for the branch as usual. Sometimes, after we make changes to the
    branch, we might need to push them back to the root. Although the SVN client,
    Tortoise SVN, provides us with a tool to merge the branches, it is rarely successful
    and more often than not we need to do the merge manually.
  prefs: []
  type: TYPE_NORMAL
