- en: '*Chapter 2*: RHEL8 Advanced Installation Options'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to install **Red Hat Enterprise Linux**,
    or **RHEL**, on a physical or virtual machine so that we use it while we're reading
    this book. In this chapter, we will review how to use RHEL *instances in the cloud*
    and the main differences that appear when doing so.
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn not just how to deploy a system, but the best choices to
    do so, and be able to perform the deployment in an *automated fashion*.
  prefs: []
  type: TYPE_NORMAL
- en: To complete the installation, a section on *best practices* has been included
    so that you can start avoiding long-term issues from day one.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics that will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Automating RHEL deployments with Anaconda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying RHEL on the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will review the automated installation process using **Anaconda**.
    For that, you will need to use the *RHEL8 deployment* we created in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We will also create cloud instances, for which you will need to create an account
    in the cloud environment of your choice. We will be using **Google Cloud Platform**.
  prefs: []
  type: TYPE_NORMAL
- en: Automating RHEL deployments with Anaconda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have finished your first deployment of RHEL locally, you can log in
    as root on the machine and list the files that the `root` user has in their folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You will find the `anaconda-ks.cfg` file. This is an important file, called
    a `kickstart`, and it contains the responses given to the installer, **Anaconda**,
    during the installation process. Let's review the content of this file.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In cloud images, there is no `anaconda-ks.cfg` file.
  prefs: []
  type: TYPE_NORMAL
- en: This file can be reused to install other systems with the same options as the
    ones we used for this installation. Let's review the options that we added during
    our previous installation.
  prefs: []
  type: TYPE_NORMAL
- en: Lines starting with `#` are comments and have no effect on the installation
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The comment specifying the version that is being used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, a type of installation was performed. It can be `graphical` or `text`
    (for headless systems, it is common to use the second one):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The software source for installing application packages, or any other package,
    is specified with the `repo` entry. As we were using the ISO image, it was accessed
    (mounted, in Linux parlance) as if it were a *CDROM*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Sections are specified with the `%` symbol. In this case, we will enter the
    `packages` section with the list of packages to be installed and use the `%end`
    special tag to close them. There are two selections: a group of packages that
    is defined by it starting with the `@^` symbol (in this case, `minimal-environment`)
    and the name of a package that doesn''t require any prefix (in this case the package
    is `kexec-tools`, which are responsible for installing the `kdump` capability
    we explained previously):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We continue to click options without a section. In this case, we have the keyboard
    layouts and system language support. As you can see, we added the *English US
    American keyboard* (marked as `us`) and the *Spanish*, *Spain* one (marked as
    `es`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For the system language, we also added English US American (`en_US`) and Spanish,
    Spain (`es_ES)`. There are several ways to manage, store, and represent text in
    operating systems. The most common one nowadays is `UTF-8`, which enables us to
    have many character sets under one single standard. That''s why the system language
    has`.UTF-8` appended to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '**Unicode (or Universal Coded Character Set) Transformation Format – 8-bit**,
    or UTF-8 for short is a character encoding that extends the capabilities of previous
    ones in order to support Chinese, Cyrillic, or Arabic (among many others) in the
    same text (like the one representing a web page or a console). UTF-8 was presented
    in 1993 and is used by 95.9% of the world-wide web''s pages. Previous character
    sets supported US English or Latin characters only, such as the **American Standard
    Code for Information Interchange**, or **ASCII**, published in 1963\. To learn
    more about character encodings and their evolution, check out the Wikipedia pages
    for both UTF-8 and ASCII.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to configure the network interface. In this case, we only have
    one, named `enp1s0`. The configuration uses IPv4 with the `rhel8.example.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to define the installation media. In this case, we used an emulated
    CDROM/DVD using the ISO image file we downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The option for `firstboot` is enabled by default. In this case, as the installation
    does not include a *graphical interface*, it won''t be run, but will be added
    to the `kickstart` file. We can safely remove it, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s configure the disks. First, to be safe, we will instruct the installer
    to ignore all the disks except for the target one; in this case, `vda`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The disk's name will vary, depending on the platform you are running on. Typically,
    it will be `vda`, `xda`, or `sda`. In this example, we show the `vda` disk that
    was defined by the installer, Anaconda, as we used in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we must install the bootloader to enable the system to boot. We will do
    so in the `vda`, and we will instruct it to use the `crashkernel` option, which
    enables the `kdump` mechanism (this dumps memory in case of a system crash):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we must partition the disk. In this case, this will be fully automated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Space to be used by the system must be declared. We will clear the whole disk
    for this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s set the time zone to Madrid, Europe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will set the root password and create a user (note that the encrypted
    password was redacted for security purposes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'The generated Anaconda file from the previous chapter contains an example of
    the encrypted password hash. If we want to change it, a new encrypted password
    hash, to be included here, can be generated if we run the `python -c ''import
    crypt,getpass;pw=getpass.getpass();print(crypt.crypt(pw) if (pw==getpass.getpass("Confirm:
    ")) else exit())''` command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need a special section where we can configure `kdump` so that we can
    reserve memory automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need a special section specifying the password policy that will be
    used for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: And with this, our `kickstart` file to reinstall our system is complete.
  prefs: []
  type: TYPE_NORMAL
- en: To use it, we will need to pass the kickstart option to the installer. To do
    so we edit the kernel parameters. Let's see how is it done.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by pressing *Tab*, during boot, while the line **Install Red Hat Enterprise
    Linux 8.3** is selected. The boot line, starting with **vmlinuz**, will appear
    at the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – RHEL8 Installer – Editing the boot line'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_02_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – RHEL8 Installer – Editing the boot line
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s remove the `quiet` option and add the one that lets the installer know
    where the kickstart is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – RHEL8 Installer – Adding the kickstart option to the boot line'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_02_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – RHEL8 Installer – Adding the kickstart option to the boot line
  prefs: []
  type: TYPE_NORMAL
- en: 'The option we''ve added is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three parts to it that we can take a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hd`: The kickstart will be in a disk, such as a second USB drive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sdc1`: The device that hosts the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/anaconda-ks.cfg`: The path to the kickstart file in the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this, we can reproduce the full installation we have done.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'The *Red Hat Enterprise Linux 8 Customizing Anaconda* guide provides detailed
    options you can follow if you wish to create your own *Anaconda Kickstart* file
    or further customize this one. It can be accessed here: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/customizing_anaconda/index](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/customizing_anaconda/index).'
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, it is very easy to create a kickstart file and automate the
    deployment of Red Hat Enterprise Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s move and look at a different way to make a RHEL 8 instance available:
    in the cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying RHEL on the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Deploying Red Hat Enterprise Linux on the cloud** has some differences from
    the previous deployments we''ve done. Let''s look at what these differences are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We won''t use an ISO image or Anaconda to perform a deployment, but a preconfigured
    image, usually prepared and made available by the cloud provider:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- The image can be later customized and adapted to our needs.'
  prefs: []
  type: TYPE_NORMAL
- en: We will not be able to choose the configuration details of our system (such
    as selecting a time zone, for example) during installation time, but will be able
    to after.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An automated mechanism will be in place to change settings, such as adding
    a user and their credentials to access the system or configure network:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- The most extended and well-known mechanism used by cloud providers to do
    so is `cloud-init`.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Some of the images that are delivered by the cloud provider include the `cloud-init`
    software.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Systems are usually accessed remotely using the `ssh` protocol and the SSH
    keys that are generated by the user in the cloud provider (please check out [*Chapter
    8*](B16799_08_Final_SK_ePub.xhtml#_idTextAnchor119), *Administering Systems Remotely*,
    for more details on how to access a system).'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to creating RHEL images, it's possible to create our own for the
    cloud or virtualization. To do so, we can use the Red Hat Enterprise Linux image
    builder ([https://developers.redhat.com/blog/2019/05/08/red-hat-enterprise-linux-8-image-builder-building-custom-system-images/](https://developers.redhat.com/blog/2019/05/08/red-hat-enterprise-linux-8-image-builder-building-custom-system-images/)).
    However, it is not part of RHCSA, so it will not be covered in this book. Instead,
    we will follow the approach of taking the default image and customizing it.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud providers propose an initial getting started offer where you try their
    services at no cost. It's a good way to get started with RHEL and cloud services.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we'll be using Google Cloud as an example, so other clouds will
    not be covered. We will provide a brief example of how a Red Hat Enterprise Linux
    8 instance can be created and modified in this cloud environment. To do so, we
    will use **Google Cloud** (it provides, as of December 2020, an initial credit
    that could last the whole duration required to complete this book).
  prefs: []
  type: TYPE_NORMAL
- en: 'To follow this chapter, you will need to complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have a Google account, you will need to create one (if you use
    Gmail and/or an Android phone, you will have one already).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log into your Google account at [https://accounts.google.com](https://accounts.google.com)
    (or check you have already logged in). You will be required to sign in for a free
    trial, at which point you will have to provide a credit card number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://cloud.google.com/free](https://cloud.google.com/free) and claim
    your free credits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the cloud console at [https://console.cloud.google.com](https://console.cloud.google.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Projects** menu, which is shown here as **No organization** at the
    top bar, to show the projects for the new account:![Figure 2.3 – RHEL8 in Google
    Cloud – Organization menu access
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – RHEL8 in Google Cloud – Organization menu access
  prefs: []
  type: TYPE_NORMAL
- en: Click on **NEW PROJECT**:![Figure 2.4 – RHEL8 in Google Cloud – Organization
    menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – RHEL8 in Google Cloud – Organization menu
  prefs: []
  type: TYPE_NORMAL
- en: Name it `RHEL8` and click **CREATE**:![Figure 2.5 – RHEL8 in Google Cloud –
    Organization menu; create new project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – RHEL8 in Google Cloud – Organization menu; create new project
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Depending on how your Google account is configured, you may need to enable billing
    after this step.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the top-left menu (also called **Hamburger Menu**, with three horizontal
    lines next to it), click on **Compute Engine**, and then click on **VM Instances**:![Figure
    2.6 – RHEL8 in Google Cloud – Access the VM Instances menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – RHEL8 in Google Cloud – Access the VM Instances menu
  prefs: []
  type: TYPE_NORMAL
- en: Once **Compute Engine** is ready (this may take a few minutes), click on **Create**:![Figure
    2.7 – RHEL8 in Google Cloud – create new VM instance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – RHEL8 in Google Cloud – create new VM instance
  prefs: []
  type: TYPE_NORMAL
- en: We will name the instance `rhel8-instance`:![Figure 2.8 – RHEL8 in Google Cloud
    – Create new VM instance; name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – RHEL8 in Google Cloud – Create new VM instance; name
  prefs: []
  type: TYPE_NORMAL
- en: Select the most convenient region (or leave the one already provided):![Figure
    2.9 – RHEL8 in Google Cloud – Create new VM instance, region, and zone
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – RHEL8 in Google Cloud – Create new VM instance, region, and zone
  prefs: []
  type: TYPE_NORMAL
- en: Set the machine family and type to **General purpose** | **e2-medium**:![Figure
    2.10 – RHEL8 in Google Cloud – Create new VM instance, type, and size
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_010.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 – RHEL8 in Google Cloud – Create new VM instance, type, and size
  prefs: []
  type: TYPE_NORMAL
- en: Click **Change** next to boot disk:![Figure 2.11 – RHEL8 in Google Cloud – Changing
    the boot disk
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.11 – RHEL8 in Google Cloud – Changing the boot disk
  prefs: []
  type: TYPE_NORMAL
- en: Change **Operating system** to **Red Hat Enterprise Linux** and **Version**
    to **Red Hat Enterprise Linux 8**. Then, click **Select**:![Figure 2.12 – RHEL8
    in Google Cloud – Create new VM instance, image selection, and disk size
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.12 – RHEL8 in Google Cloud – Create new VM instance, image selection,
    and disk size
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create** and wait for the instance to be created:![Figure 2.13 – RHEL8
    in Google Cloud – VM instance list
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.13 – RHEL8 in Google Cloud – VM instance list
  prefs: []
  type: TYPE_NORMAL
- en: Later, we will learn how to connect via `SSH`. Now, click on the triangle next
    to `SSH`, under **Connect**, and select **Open in browser window**, as follows:![Figure
    2.14 – RHEL8 in Google Cloud – VM instance, access console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16799_02_014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.14 – RHEL8 in Google Cloud – VM instance, access console
  prefs: []
  type: TYPE_NORMAL
- en: 'With that, your fresh RHEL8 instance will be deployed, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.15 – RHEL8 in Google Cloud – VM instance, console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_02_015.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.15 – RHEL8 in Google Cloud – VM instance, console
  prefs: []
  type: TYPE_NORMAL
- en: It takes some time to get set up in the cloud, configure your account, and find
    the `SSH` key (which will be shown in [*Chapter 8*](B16799_08_Final_SK_ePub.xhtml#_idTextAnchor119),
    *Administering Systems Remotely*) but once it's all set up, it's easy to get a
    new instance up and running.
  prefs: []
  type: TYPE_NORMAL
- en: 'To become an administrator, you only need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can check the time configuration with `timedatectl` and change it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also change the language configuration with `localectl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To change `locale` or language support, you will need to install its *language
    package* first, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have a machine configured that you can use throughout this book. These
    locale changes are not needed to proceed, just to create a machine with the same
    configuration as in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to automatically redeploy VMs using Anaconda and how to
    get instances in the cloud, let's move on and look at some of the best practices
    to be taken into account when performing installations.
  prefs: []
  type: TYPE_NORMAL
- en: Installation best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Red Hat Enterprise Linux installations** have many options you can choose
    from, and what you choose should be tailored for your specific use case. However,
    some common recommendations apply. Let''s look at the most common types.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first type is **blueprints**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Standardize the core installation and create a blueprint for it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- This blueprint shall be minimal enough to serve as the base for all other
    blueprints and deployments.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build a set of blueprints for common cases when needed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- Try to use an automation platform to build extended cases (that is, Ansible).'
  prefs: []
  type: TYPE_NORMAL
- en: '- Try to make the cases modular (that is, App Server; database blueprints can
    be combined into one single machine).'
  prefs: []
  type: TYPE_NORMAL
- en: '- Be aware of the requirements you must apply to your templated blueprints
    and adapt to the environments you will use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second type is **software**:'
  prefs: []
  type: TYPE_NORMAL
- en: The less software that's installed, the smaller the attack surface. Try to keep
    servers with the minimal set of packages required on it for it to run and operate
    (that is, try not to add a graphical user interface to your servers).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standardize the installed tools where possible to be able to react quickly in
    case of emergency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package your third-party applications so that you have healthy life cycle management
    (whether with RPM or in containers).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish a patching schedule.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The third type is **n****etworking**:'
  prefs: []
  type: TYPE_NORMAL
- en: In virtual machines, try not to overuse the number of network interfaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In physical machines, use interface teaming/bonding whenever possible. Segment
    networks using VLANs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The fourth type is **storage**:'
  prefs: []
  type: TYPE_NORMAL
- en: For servers, use `/boot` or `/boot/efi`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you think you will need to reduce your filesystems, use *ext4*; otherwise,
    go for the default of *xfs*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Partition the disk carefully:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- Keep the default boot partition with its default size. If you change it,
    enlarge it (you may need space there during upgrades).'
  prefs: []
  type: TYPE_NORMAL
- en: '- The default swap partition is the safest bet, unless the third-party software
    has specific requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: '- For long-lived systems, have at least separate partitions for `/` (root)
    `/var`, `/usr`, `/tmp`, and `/home`, and consider even a separate one for `/var/log`
    and `/opt` (for ephemeral cloud instances or short-lived systems, this does not
    apply).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The fifth type is **security**:'
  prefs: []
  type: TYPE_NORMAL
- en: Do not disable *SELinux*. It has been improved a lot in the latest versions
    and it's very likely that it won't interfere with your system (if required, set
    it in permissive mode instead of fully disabling it).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not disable the firewall. Automate port opening with the service deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirect logs to a central location whenever possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standardize the security tools and configuration that you want to install to
    check system integrity and audit (that is, *AIDE*, *logwatch*, and *auditd*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review software install (*RPM*) *GPG* keys, as well as ISO images, to ensure
    integrity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to avoid using passwords (especially for your root account) and use strong
    ones where needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review your systems with *OpenSCAP* to check on security (if needed, create
    your own hardware SCAP profile with help from your security team).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, we will look at the **miscellanea** type:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep system time synchronized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review *logrotate* policies to avoid "disk full" errors due to logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following these best practices will help you avoid issues and make the installed
    base more manageable. With that, you know how to deploy Red Hat Enterprise Linux
    on a system in a structured, repeatable manner while providing services to other
    teams in a fast and resilient fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we mentioned how to prepare a machine that we can work
    with throughout this book. An alternative to that is using cloud instances, with
    which we could be consuming virtual machine instances from the public cloud, which
    may simplify our consumption and provide us with enough free credit to prepare
    for *RHCSA*. Also, once the self-training process is complete, the machines can
    be still used to provide your own public services (such as deploying a blog).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the need to standardize your environments and the impact of doing
    so is also important when you're working with Linux as a professional. It is key
    to start with a good set of practices (automating installations, keeping track
    of installed software, reducing the attack surface, and so on) from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you've completed this chapter, you are ready to continue with the rest
    of this book, since you now have an instance of Red Hat Enterprise Linux 8 available
    to work and practice with. In the next chapter, we will review the basics of the
    system to make ourselves comfortable and gain confidence in using the system.
  prefs: []
  type: TYPE_NORMAL
