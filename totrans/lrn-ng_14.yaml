- en: SystemJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SystemJS is a module loader found at the following GitHub link [https://github.com/SystemJS/SystemJS](https://github.com/systemjs/systemjs).
  prefs: []
  type: TYPE_NORMAL
- en: It is built on top of the original ES6 module loader polyfill. It's meant to
    solve the basic problem of loading modules in the browser, which currently doesn't
    work unless the browser gets some help from a library, such as SystemJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this appendix, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The SystemJS itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A practical SystemJS example with the quickstart repository for Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SystemJS introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SystemJS loads the files from top to bottom, and thereafter instantiates from
    bottom to top. What does that mean, though? Well, it means that if you have a
    file you need to load called `Module1` that has a dependency on `Module2`, then
    `Module1` will be loaded first. So much for loading, then we have the part on
    executing the code that takes the reverse direction. In this case it will execute
    `Module2`, to get an instance of it and pass it to `Module1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical usage of SystemJS will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'There are different steps that SystemJS undertakes when processing a script:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Normalizing file paths**: Paths can be relative, absolute, and aliased, and
    SystemJS is turning all those into one format'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**XHR or serve it up**: When a module is asked for them, one of two things
    can happen; either it is loaded from the internal registry if it''s already been
    preloaded before, or an XHR request is made for it'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ready it for use**: In this last step, the module will be executed, added
    to the registry, and it will resolve its promise'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A flying start with the quickstart repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with the `quickstart` repository, you need to grab a copy of
    that project by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will copy down all the needed files from GitHub and place them in a directory
    called `quickstart`. Now, navigate into that directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The project will have specified a bunch of libraries it is dependent on. You
    need to install these. That is accomplished by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we need to serve up the application, that is, display it in a browser.
    That is done by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Worth mentioning is that this repository uses SystemJS as a module loader and
    for bootstrapping our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the parts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being given a GitHub repository or using a scaffolder tool is great. You get
    started quickly, and you will feel productive almost instantly. There is a *but* to
    this, though. If something goes wrong, how do we fix it? To be able to do that,
    we need to have a better understanding of what's going on under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: The essential concepts that makes out any Angular project set up with SystemJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the concepts making up the core of your application. They will be
    there for every project:'
  prefs: []
  type: TYPE_NORMAL
- en: Starter web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node Package Manager** (**npm**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SystemJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript setup and TypeScript definition files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discuss these concepts to give an introduction to the set up.
  prefs: []
  type: TYPE_NORMAL
- en: All web projects will need a starter web page.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is JavaScript on the server side. In the context of an *Angular build*,
    Node.jsis used to pull in a lot of libraries (from npm) to help with tasks such
    as bundling, testing, and minification. It is essential to have at least a decent
    grasp on how to work with Node.js and its echo system. A more detailed description
    of this follows in a following subsection.
  prefs: []
  type: TYPE_NORMAL
- en: As for SystemJS, it is a module bundler. Projects in JavaScript aren't written
    in just one file any more; sometimes, they're written in 1,000s of files. How
    these files relate to one another is by using a module system, and SystemJS is
    one of many module bundlers out there. The Angular team has chosen TypeScript
    as the *lingua franca* for writing Angular apps, which means we need to set up
    TypeScript properly in terms of compiling it and make sure TypeScript knows how
    to consume dependent libraries written in ES5.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, linting is about ensuring we follow best practices when it comes to
    writing our code, both for consistency and to avoid bugs.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's dive into these concepts in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Starter web page - index.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of this file is to be presented to the web server, which ultimately
    renders it into an app. It will contain some markup, but, most importantly, the `script` tags
    needed for our app to run.
  prefs: []
  type: TYPE_NORMAL
- en: The `index.html` also consists of a lot of `script` tags. These `script` tags
    are needed for your project to run.
  prefs: []
  type: TYPE_NORMAL
- en: Core files - that Angular is dependent on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of browsers out there lack some capabilities that come with ES2015\. To
    fix that, we can augment our browser with this missing functionality by adding
    something called a polyfill. Aside from polyfills to leverage modern JavaScript,
    Angular is using a whole new way of detecting changes in the app and does so by
    using the `zone.js` library. Lastly, the Angular teams have decided to use Rxjs
    for handling HTTP requests. They have even taken it one step further to integrate
    it into a lot of things, such as dealing with forms and routing. These three things
    are what make up the core functionality that we need to import for our app to
    work.
  prefs: []
  type: TYPE_NORMAL
- en: core-js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This file brings ES2015 capabilities to ES5 browsers. As you will be using
    quite a few ES2015 constructs, this is necessary for everything to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: zone.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This file is used by Angular to handle change detection and data binding, without
    this library nothing would work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: rxjs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RxJS is the async library that Angular uses heavily to deal with everything
    from HTTP requests to forms and routing.
  prefs: []
  type: TYPE_NORMAL
- en: SystemJS - our module loader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SystemJS is the library you are using to handle the loading of modules and
    consists of two links:'
  prefs: []
  type: TYPE_NORMAL
- en: SystemJS core files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SystemJS configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The former is needed for SystemJS to run and the latter is you instructing SystemJS
    what files to load and where to find your app and accompanying assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'This points out the core SystemJS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And this points out how to configure SystemJS. You need to call this file `SystemJS.config.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A look at `SystemJS.config.js` shows the following configuration call being
    made:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It looks quite long and daunting, but let''s break the different parts down
    which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`paths`:Alias where system files are located. Noteworthy here is that we create
    an alias to `node_modules` by typing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This will serve us later when we need to mention all the libraries that our
    app needs to function.
  prefs: []
  type: TYPE_NORMAL
- en: '`map`: This is where we need to tell SystemJS where it can find all the parts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code snippets show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Where to find our app, the key called app
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to find the Angular files, key called `@angular/...`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to find supporting libraries, these libraries consist of angular libraries
    (the framework is split up in many smaller libraries) as well as the core libraries
    mentioned in the last section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can see our alias `npm `in use when referring to `@angular/core`,
    which means the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Is using the following full path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`packages`: It is the last part of the configuration file. This instructs what
    files in the app folder should be loaded first, aka `main`, and also provides
    the `defaultExtension`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js setup - package.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A `package.json` is a description file for a Node.js project. It consists of
    metadata information such as name, author, and description, but it also contains
    a `script` property that will allow us to run scripts that carry out work for
    us, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing linting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To run one of the commands in the `script` tag, you need to type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Your app will depend on a number of libraries to build and run. Libraries listed
    in either `dependencies` or `devDependencies` will be downloaded using npm, by
    you typing `npm install`.
  prefs: []
  type: TYPE_NORMAL
- en: There is a semantic difference between what libraries should be listed in `dependencies` and `devDependencies`, respectively.
    Anything that will help make the app ultimately run will end up in `dependencies`*,* Angular
    libraries, as well as supporting libraries, will end up here. `devDependencies` is
    somewhat different, though; what you put here is more of a supportive nature.
    Examples are TypeScript, Linter, testing libraries, and different tools used to
    process CSS and create the bundle itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the angular bits in the `dependencies`, these are pure Angular dependencies
    denoted with `@angular`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@angular/common`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/compiler`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/forms`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/http`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/platform-browser`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/platform-browser-dynamic`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/router`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The remaining dependencies are the following list, which we mentioned under
    *Core files - that Angular is dependent on* in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '`core-js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reflect-metadata.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rxjs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zone.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `tsconfig.json` is a file the TypeScript compiler will process and determine
    how compilation should happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the essential settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned in the preceding code comments, `emitDecoratorMetadata` and `experimentalDecorators` need
    to be set to `true`, as Angular uses these features heavily.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix introduced SystemJS and described how it processes files and in
    what order, due to it being a module loader. Thereafter, the official quickstart
    repo was introduced. We then looked at the different parts that SystemJS either
    needed or problems it needed to solve. At this point, we were ready to dive into
    how to use SystemJS to set up an Angular application. We also looked at what core
    parts the Angular framework needed the SystemJs to load and in what order. Leaving
    this appendix, we now have a clearer understanding of what problems SystemJS solves
    and how it can be made to set up Angular applications. It should be noted that
    most Angular applications are using Angular CLI or webpack, but this is definitely
    a good option that will be supported for some time.
  prefs: []
  type: TYPE_NORMAL
