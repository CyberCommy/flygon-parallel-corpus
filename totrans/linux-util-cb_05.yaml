- en: Chapter 5. Permissions, Access, and Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and managing user accounts – useradd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with file permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with firewalls and router settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Secure Linux **–** SELinux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using sudo to secure a system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The /tmp directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will serve as a brief review of Linux file permissions, and how
    access to the machine is handled by the password system. It will also show how
    to work with the security features in the firewall and router, and mentions SELinux
    and sudo.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and managing user accounts – useradd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will show you how to add a user account using the `useradd`
    program.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These commands should not be destructive to your system; however, you will need
    to be the root user.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In most Linux distributions there are two versions of this command, `useradd`
    and `adduser`. They do not always do the same thing, so consult your `man` page
    (and/or the `file` command) to make sure you are running the proper one. On Fedora,
    `adduser` is a symbolic link to `useradd` and so they are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we will run the `useradd` command to add a user and the `passwd` command
    to set the password. There is more discussion of `passwd` in the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we will be changing `/etc/passwd`, so let’s make a backup copy of
    it. Run the following command: `cp /etc/passwd /tmp/passwd.orig`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let’s create a user named `test1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It should have returned silently back to the command line. Now let’s try it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the prompt change. Run `whoami,` it should say `test1`. Be sure
    to run this every time you use `su`. Now let’s change the password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It will say something like **Changing password for user test1**. But then it
    prompts for the current password. What does this mean? What password does it want?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I don’t really know the answer to this and the **man** pages are useless. They
    always skip this step, which is rather odd. There are ways to do this using the
    crypto function and some other complicated procedures. However, the following
    is my approach:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press *Ctrl + C* to come out of the `passwd` command and run `exit` to return
    to the root account. Now `edit /etc/passwd` and go to the bottom line. `1003`
    below will probably be different on your system, but you should see a line similar
    to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the `x`, so that the line now looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and exit. If you get a permission error remember you have to be
    root for this procedure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run `su` to become the `test1` user again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Run `passwd`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hey, cool, it’s not asking for the current password this time. So go ahead and
    create one now as we really don’t want an open account on the system. If you plan
    to keep this account I suggest writing this password down or even better putting
    it into an encrypted file somewhere safe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After entering the same new password twice you should get a message similar
    to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We now have a new user. Note that in general this user can perform most of the
    activities on the command line that he has the proper permissions for. However,
    depending on the Linux distribution, the user may not be able to access all resources
    (the sound system, for example).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of useradd –help taken on my Fedora 17 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008OS_05_00.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `useradd` command can do a whole lot more than just create new accounts.
    You can change how an existing account works, or when it expires. You can even
    give a user system authority so he has almost has much power as root. Consult
    the man pages or use the `–help` option for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Working with passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I mentioned the `passwd` command in the previous recipe. It is used to update
    a user’s authentication tokens. You will need to be the root user for this example.
    We will use the `test1` user created in the above section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s work with the `passwd` command a little:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From a user account, login to `test1` to make sure that still works as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Enter the password when prompted. This should work without errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let’s lock this account. Exit back to root and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: From a user account run `su - test1` and enter the password again. It should
    fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to root and unlock the account using the command `passwd -u test1`.
    Log in again to make sure it works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let’s expire the account. This will force the user to create a new password.
    As root run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now as a guest user, log into `test1` using the command `su - test1`. Enter
    your password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be told to create a new password. Be careful here as you have to enter
    the old (current) password again, and then the new one two times. Yes, it does
    seem odd that we have to type the old password again, since we just did that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that you can delete a password for a user account by running `passwd -d
    test1`. This is easier than editing the `/etc/passwd` file directly as we did
    in the above section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can set a lot of other things on a user account. These include the amount
    of time for the account to remain active, and when to start warning the user to
    change their password. See the man pages for more info.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A word about passwords**'
  prefs: []
  type: TYPE_NORMAL
- en: In the old days, we would pick a relatively simple password and keep it forever.
    We didn’t need to change it all the time, and could use it for everything, so
    it was not necessary to write it down. Unfortunately, that has now changed. Passwords
    usually need to be a combination of uppercase letters, numbers, and maybe even
    special characters. They have to be a lot longer in length as well. You can’t
    always use them for everything because the password rules on one system may differ
    from the rules on another. For these reasons I suggest using a different password
    for every account when reasonable, and record it somewhere safe. You will most
    likely have to change this password at regular intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Working with file permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Linux was designed to be a multiuser operating system, every file has
    file permissions and ownership associated with it. This is to prevent one user
    from overwriting the files of another (either intentionally or unintentionally).
    The root user can (usually) access every file in the system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a quick review of basic file system permissions. For this example, it
    is assumed `umask` is set to `0022`. Run `umask` to make sure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following `ls -la` listing of my backup script b:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Starting from the left, the first position indicates what kind of file this
    is. A `-`, as shown, means this is a regular file. A `d` there would mean a directory,
    and an `l` would indicate it’s a link. The next three sets of three letters are
    the file permissions and can be referred to in either symbolic or numeric mode.
    We are going to use numeric (octal) mode.
  prefs: []
  type: TYPE_NORMAL
- en: The first three sets, `rwx`, are the settings for the owner (`guest1`) of this
    file. The next three, `r-x`, are the settings for the group (`root`). The third
    set is for all others. `r` means the file is readable, `w` means it’s writeable,
    and `x` means it’s executable.
  prefs: []
  type: TYPE_NORMAL
- en: The `chmod` command accepts one to four octal digits. If a digit is missing
    it is assumed to be a leading zero. The first digit sets the user ID, group ID,
    or the sticky bit. The second digit selects the permissions for this user, and
    the third selects the permissions for the others.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s now change some permissions on a temporary file and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s work with some file permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s change to the `/tmp` directory by using the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If the file `f1` exists remove it using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Using a guest account (in my case `jklewis`) create a temporary file by using
    the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It should show something like the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Those are the default permissions based on the `umask` command. This indicates
    that owner and group have read and write privileges, and others have only read.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So how do we change these? By using the `chmod` command. Suppose this is a
    script and we wanted to make it executable. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run `ls -la f1`; it should now look like the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Those `x`s show that every user can run the file. Let’s do one more. Run `chmod
    000 f1`and then `ls -la f1`, it will show the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Wow! No one will be able to do anything with this file now, right? Well, no,
    the owner of the file can still change the permissions. Speaking of ownership,
    the `chown` command is used to change that field. It is normally run as the root
    user.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I did not mention the `setuid`, `setgid`, or `sticky` bits. Consult the `chmod`
    man page for information on these settings. The restricted deletion bit is mentioned
    in *The /tmp directory* section.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the firewalls and router settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A firewall is used to prevent unauthorized network access to a machine(s) while
    still allowing normal (or legal) traffic to pass through. The `iptables` command
    is used to set up, configure, and view the tables of the IPv4 rules in the kernel.
    It is somewhat complicated and so this will serve as just a simple overview.
  prefs: []
  type: TYPE_NORMAL
- en: '`iptables` uses one or more tables. Each table has a number of pre-made chains
    and can also contain user-created chains. A chain is a list of rules, and a rule
    specifies what to do with a packet that matches. This “match” is called a **target**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When a packet does not match, the next rule in the chain is looked at. If it
    does match, one of the following can be specified for the packet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ACCEPT`: It allows the packet to pass on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DROP`: It rejects the packet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QUEUE`: It passes the packet on to the user space'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RETURN`: It stops the running of this chain and continues at the next rule
    in the calling chain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are a few `iptable` commands. Do not run these commands on your system;
    this is an example only:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete all existing rules, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To block a specific IP address, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To allow loopback access, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s talk about routers. Most routers have a firewall built-in that can
    be managed by a web browser. While it does not replace `iptables`, it is usually
    easier to configure and can work across your entire network.
  prefs: []
  type: TYPE_NORMAL
- en: The web page for a typical home router usually has a `192.168.1.1` address.
    Try it in your browser now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of my router on the **Security** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You may have to enter an ID and password. Consult your router documentation
    for the defaults if you haven’t already changed them. Go to the **Security** (or
    equivalent) tab to access those features.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a whole lot more to `iptables`, enough to fill an entire book. For
    more information refer to the man pages, or a book on firewalls. There are also
    quite a few good websites on the topic.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Secure Linux – SELinux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will serve as an overview of **Security Enhanced Linux** (**SELinux**).
    In the *Working with file permissions* section, we discussed how standard Linux
    provides protection for the system. This method is called **Discretionary Access
    Control** (**DAC**), and has some limitations. For example, a typical user could
    open his files up, either accidentally or on purpose, for any other user to read
    or write. This could allow unauthorized access to sensitive information. To provide
    more security, SELinux uses **MAC** (**Mandatory Access Control**).MAC uses a
    security policy that covers all processes and files in the system. All files in
    SELinux have labels that contain security-relevant information.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following is a normal listing of a file under DAC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Same file, but with the Z (security context) option to `ls`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`unconfined_u` is the user, `object_r` is the role, `default_t` is the type,
    and `s0` is the level. This info is used to make access control decisions. Note
    that the normal DAC rules are checked first, if they do not allow the action then
    the SELinux rules are not used.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are only going to run some commands as root and view some of the settings.
    We will not be making any changes to the configuration. This example will assume
    you are already running SELinux in Enforcing mode. To determine if this is so
    run the `sestatus` command. The output should be similar to the following screenshot
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3008OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, so let’s run some SELinux commands.
  prefs: []
  type: TYPE_NORMAL
- en: Run `getenforce`; it should report enforcing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let’s view the list of mappings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the SELinux contexts for processes run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the context for user run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `sealert` command is used to view the complete SELinux message when an error
    occurs. Check your `/var/log/messages` file to see if any alerts have been generated,
    and if so can run `sealert -l` on the number to get a detailed view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To get a detailed list of the SELinuxBooleans with descriptions run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the list but without the descriptions run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To check if files and directories have the correct SELinux context run the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As I mentioned SELinux is normally installed by default in most distributions.
    In some cases you may not even realize it is there. However, at times it will
    get in your way. If you try to install a service, for example, `vsftpd`, it may
    fail because it will violate the SELinux policy. It will usually pop up a fairly
    decent error message. The message may even tell you how to fix the problem, however,
    I have found in practice that it doesn’t work. You perform the action(s) it gives,
    it seems to run without error, but then the access is still denied. In these cases
    I use the `setenforce` command to put SELinux into Permissive mode and then carry
    on with my activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note that this only works until the next reboot.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on SELinux there is a rather excellent guide on the Fedora
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Using sudo to secure a system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times, especially if you are a system administrator, when you would
    like to give a user more access to the computer, but not actually root authority.
    This can be done by modifying the`/etc/sudoers` file and having your users invoke
    the `sudo` command.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps should not harm your system. We will perform these with
    a user account made above. You will need to be the root user for this section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we will work with the `/etc/sudoers` file:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a backup copy of your `/etc/sudoers file`**:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You don’t edit this file directly, the `visudo` command is used. This is poorly
    named as any text editor can be used if you export the `EDITOR` variable accordingly.
    Set the variable if desired then run the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This command makes a temporary copy of the `sudoers` file and edits it. If all
    goes well it then copies the temporary file over the original when you are done.
    So, let’s take a look at this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read the section on aliases. They are divided into groups for things such as
    **networking, software, services, locate**, and others. For now let’s just jump
    in and see how this works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But first let’s try something. Open another session as a guest user. I’ll use
    my `jklewis` account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the `jklewis` account type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file using the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now try to copy that file to `/usr/bin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: You should have received an error. This is correct of course, a normal user
    can’t normally write to the `/usr/bin` directory. Now go back to your `visudo`
    session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need the hostname for your machine. For this example we will use the
    numeric IP. You can obtain that from the `ifconfig` command if needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just after the lines that mention the shutdown command we are going to add
    a line for our guest user. The syntax is username, hostname, commands, and options,
    so add the line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and close the `visudo` session. Now try this command again. While
    still in the `/tmp` directory run `cpf1 /usr/bin`. It should still give the error
    message. Now try it like the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Ah, it’s asking for a password, right? Yes, and it’s asking for the user’s password,
    not the one for root. This can be easy to confuse (well, it was for me anyway).
    The best way to remember this is you probably aren’t supposed to know what the
    root password is. Enter yours.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this is the first time `sudo` is being used by this user an interesting notice
    may pop up. Read it and understand it to avoid the wrath of your system admin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After all of this the command should proceed without error this time. Pretty
    cool, huh? Since we used `ALL` in the line we added to the `sudoers` file it effectively
    has given this user full access. Note that some things will still not work the
    same, redirection for one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Okay, so we probably don’t really want this `jklewis` jerk messing up our system,
    so let’s fine tune this a bit. Run `visudo` again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down or search for **Processes**. Uncomment the `# Cmnd_Alias PROCESSES`
    line by removing the `#` mark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll back down to the `jklewis` line we added earlier. Change it to read:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Now we need a process to kill. As root start up a `vi` session. Something like
    `vi mybook` will work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your user session run `psauxw | grep”vi mybook”` and remember the process
    number (**PID**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also in your user session run `kill -9` on the above PID. It will give an error.
    Now run it again but with like the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The process with `vi` should be killed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the screen stays blue or some other color just run `the ls command.` That
    should clear it up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of my `/etc/sudoers` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can see from the `sudoers` file that a lot of fine tuning can be performed
    on it. Users can be given very little extra authority, or a whole lot. For more
    information run `man sudoers`.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s my two cents on `sudo`. There are many computer users who can be trusted
    to run as root without harming the system. However, there are exceptions. If you
    set up `sudo` you might spend a whole lot of time trying to get it just right,
    only to find that you are always having to add more things. Your users will get
    upset because they can’t do their work until you make the changes. Then, when
    you think you finally have it just right, someone, using `sudo`, will still mess
    up and mess up bad. It has been my experience that if a user makes this mistake
    once, he will do it again and again.
  prefs: []
  type: TYPE_NORMAL
- en: The /tmp directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `/tmp` directory is somewhat special as by default it allows all users
    to write files to it. Here is what the listing for`/tmp` looks like on my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You can see this is open for everyone. The `t` in the permissions indicates
    that the restricted deletion bit is set on the directory. So what does this actually
    mean? For directories, it prevents normal users from removing or renaming a file
    in the directory that they don’t have the proper permissions for.
  prefs: []
  type: TYPE_NORMAL
- en: As a normal user you still need to be careful when writing to `/tmp`, as there
    are some restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s try a few things to get an idea of how `/tmp` works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: If there are any temporary `.txt` files lying around from earlier sections clean
    them up; an `rm *.txt` file should do it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In another session, as a guest user (I’ll use `jklewis`), run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This should work without error. Now try:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: You should have received the **Permission denied** error. Why? Because even
    though normal users can all write to the `/tmp` directory, the normal file system
    (DAC) permissions must still be followed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the reasons outlined above I would suggest not using the `/tmp` directory
    for anything except for truly temporary files. In addition, most distributions
    routinely clean out `/tmp` and so anything not owned by root is going to get deleted.
    Remember all of this when generating temporary files especially when writing scripts
    (more on that in [Chapter 8](ch08.html "Chapter 8. Working with Scripts"), *Working
    with Scripts*).
  prefs: []
  type: TYPE_NORMAL
