- en: Chapter 7. Working with Django Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all know about HTML forms. This is a `<form>` tag that contains the `<input>`
    and `<select>` tags. The user can fill in or edit these items and return them
    to the server. This is the preferred way to store data provided by the client.
    Frameworks such as Django seized the HTML form to make it better.
  prefs: []
  type: TYPE_NORMAL
- en: A Django form is inherited from the `Form` class object. It is an object in
    which we will set properties. These properties will be the fields in the form,
    and we will define their type.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle the data sent by a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Django form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate and manipulate data sent from a Django form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create forms based on models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize error messages and use widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The advantages of Django forms are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Protection against CSRF vulnerabilities can be easily implemented. We'll talk
    about CSRF vulnerabilities thereafter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data validation is automatic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forms are easily customizable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But the best way to compare a standard HTML form and a Django form is to practice
    it with an example: the form to add a developer.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a developer without using Django forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how to add a developer without using Django
    forms. This example will show the time that can be saved by using Django.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following URL to your `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Template of an HTML form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a template before the view. Indeed, we are going to fill the
    view with the template that contains the form. We do not put all the fields in
    the model because the code is too long. It is better to learn using shorter code.
    The following is our template in `template/en/public/create_developer.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that the template is impressive and yet it is a minimalist form.
  prefs: []
  type: TYPE_NORMAL
- en: The view using the POST data reception
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot shows the web page that we will create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The view using the POST data reception](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The view that will process this form will be as follows. Save the view in the
    file `views/create_developer.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this view, we haven't even checked whether the supervisor exists. Even if
    the code is functional, note that it requires a lot of lines and we haven't verified
    the contents of the transmitted data.
  prefs: []
  type: TYPE_NORMAL
- en: We used the `HttpResponse()` method so that we do not have to create additional
    templates. We also have no details about client errors when a field is entered
    incorrectly.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to verify whether your code works properly, do not forget to check
    the data in the administration module.
  prefs: []
  type: TYPE_NORMAL
- en: 'To try this form, you can add the following line in the block `article_content`
    of the `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Adding a developer with Django forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django forms work with an object that inherits from the `Form` class. This object
    will handle much of the work we have done manually in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: When displaying the form, it will generate the contents of the form template.
    We may change the type of field that the object sends to the template if needed.
  prefs: []
  type: TYPE_NORMAL
- en: While receiving the data, the object will check the contents of each form element.
    If there is an error, the object will send a clear error to the client. If there
    is no error, we are certain that the form data is correct.
  prefs: []
  type: TYPE_NORMAL
- en: CSRF protection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Cross-Site Request Forgery** (**CSRF**) is an attack that targets a user
    who is loading a page that contains a malicious request. The malicious script
    uses the authentication of the victim to perform unwanted actions, such as changing
    data or access to sensitive data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps are executed during a CSRF attack:'
  prefs: []
  type: TYPE_NORMAL
- en: Script injection by the attacker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An HTTP query is performed to get a web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Downloading the web page that contains the malicious script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Malicious script execution.![CSRF protection](img/00021.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this kind of attack, the hacker can also modify information that may be critical
    for the users of the website. Therefore, it is important for a web developer to
    know how to protect their site from this kind of attack, and Django will help
    with this.
  prefs: []
  type: TYPE_NORMAL
- en: 'To re-enable CSRF protection, we must edit the `settings.py` file and uncomment
    the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This protection ensures that the data that has been sent is really sent from
    a specific property page. You can check this in two easy steps:'
  prefs: []
  type: TYPE_NORMAL
- en: When creating an HTML or Django form, we insert a CSRF token that will store
    the server. When the form is sent, the CSRF token will be sent too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the server receives the request from the client, it will check the CSRF
    token. If it is valid, it validates the request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Do not forget to add the CSRF token in all the forms of the site where protection
    is enabled. HTML forms are also involved, and the one we have just made does not
    include the token. For the previous form to work with CSRF protection, we need
    to add the following line in the form of tags and `<form> </form>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The view with a Django form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will first write the view that contains the form because the template will
    display the form defined in the view. Django forms can be stored in other files
    as `forms.py` at the root of the project file. We include them directly in our
    view because the form will only be used on this page. Depending on the project,
    you must choose which architecture suits you best. We will create our view in
    the `views/create_developer.py` file with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This screenshot shows the display of the form with the display of an error
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The view with a Django form](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Template of a Django form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We set the template for this view. The template will be much shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As the complete form operation is in the view, the template simply executes
    the `as_table()` method to generate the HTML form.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous code displays data in tabular form. The three methods to generate
    an HTML form structure are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`as_table`: This displays fields in the `<tr> <td>` tags'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`as_ul`: This displays the form fields in the `<li>` tags'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`as_p`: This displays the form fields in the `<p>` tags'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, we quickly wrote a secure form with error handling and CSRF protection through
    Django forms. In the [Appendix](part0090.html#page "Appendix A. Cheatsheet"),
    *Cheatsheet*, you can find the different possible fields in a form.
  prefs: []
  type: TYPE_NORMAL
- en: The form based on a model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ModelForms are Django forms based on models. The fields of these forms are automatically
    generated from the model that we have defined. Indeed, developers are often required
    to create forms with fields that correspond to those in the database to a non-MVC
    website.
  prefs: []
  type: TYPE_NORMAL
- en: These particular forms have a `save()` method that will save the form data in
    a new record.
  prefs: []
  type: TYPE_NORMAL
- en: The supervisor creation form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To broach, we will take, for example, the addition of a supervisor. For this,
    we will create a new page. For this, we will create the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Our view will contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen in the line `exclude = (''date_created'', ''last_connexion'', )`, it
    is possible to restrict the form fields. Both the `exclude` and `fields` properties
    must be used correctly. Indeed, these properties receive a tuple of the fields
    to exclude or include as arguments. They can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`exclude`: This is used in the case of an accessible form by the administrator.
    Because, if you add a field in the model, it will be included in the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fields`: This is used in cases in which the form is accessible to users. Indeed,
    if we add a field in the model, it will not be visible to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, we have a website selling royalty-free images with a registration
    form based on ModelForm. The administrator adds a credit field in the extended
    model of the user. If the developer has used an `exclude` property in some of
    the fields and did not add credits, the user will be able to take as many credits
    as he/she wants.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will resume our previous template, where we will change the URL present
    in the attribute action of the `<form>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This example shows us that ModelForms can save you a lot of time in development
    by having a form that can be customized (by modifying the validation, for example).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to be faster with the class-based views.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced usage of Django forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have studied the basics of the forms that allow you to create simple forms
    with little customization. Sometimes, it is useful to customize aspects such as
    data validation and error display, or use special graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the validation form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is useful to perform specific validation of the form fields. Django makes
    this easy while reminding you of the advantages of the forms. We will take the
    example of the addition of a developer form, where we will conduct an audit of
    the password.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we will change the form in our view (in the `create_developer.py`
    file) in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With this example, we can see that Django is very flexible in the management
    of forms and audits. It also allows you to customize the display of errors.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the display of errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, it may be important to display user-specific error messages. For
    example, a company may request for a password that must contain certain types
    of characters; for example, the password must contain at least one number and
    many letters. In such cases, it would be preferable to also indicate this in the
    error message. Indeed, users read more carefully the error messages than help
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you must use the `error_messages` property in the form fields and
    set the error message as a text string.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to define different messages depending on the type of error.
    We will create a dictionary of the two most common mistakes and give them a message.
    We can define this dictionary as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We will modify the name field of the `Form_inscription` form of `create_developer.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, if the user doesn''t fill the `name` field, he/she will see the following
    message: **You must type a name!**.'
  prefs: []
  type: TYPE_NORMAL
- en: To apply this message to ModelForm, we have to go to the `models.py` file and
    modify the line that contains the `name` field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: When editing `models.py`, we should not forget to specify the `error_name` dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: These error messages improve the quality of the website by informing the user
    of his/her mistakes. It is very important to use custom errors on fields when
    validation is complex. However, do not overdo it on the basic fields as this would
    be a waste of time for the developer.
  prefs: []
  type: TYPE_NORMAL
- en: Using widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Widgets are an effective way to customize the display of the form elements.
    Indeed, in some cases, it may be helpful to specify a text area field with particular
    dimensions in ModelForm.
  prefs: []
  type: TYPE_NORMAL
- en: To learn the practice of using widgets and continue the development of our application,
    we will create the page of the creation of projects. This page will contain a
    Django form, and we'll set the `description` field in the HTML `<textarea>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add the following URL to the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create our view in the `create_project.py` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It is possible to take one of the templates that we have created and adapted.
    This form will work the same way as all the Django forms that we have created.
    After copying a template that we have already created, we only need to change
    the title and URL of the `action` property of the `<form>` tag. By visiting the
    page, we notice that the widget works well and displays a text area more suitable
    for long text.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other widgets to customize forms. A great quality of Django is
    that it is generic and totally adaptable with time.
  prefs: []
  type: TYPE_NORMAL
- en: Setting initial data in a form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two ways to declare the initial value of form fields with Django.
    The following examples take place in the `create_developer.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: When instantiating the form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following code will display `new` in the `name` field and will select the
    first supervisor in the `<select>` field that defines the supervisor. These fields
    are editable by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This line must replace the following line in the `create_developer.py` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When defining fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get the same effect as in the previous section, display `new` in the `name`
    field and select the first supervisor in the corresponding field; you must change
    the declaration `name` and `supervisor` fields with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use Django forms. These forms allow you to
    save a lot of time with automatic data validation and error display.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go further into the generic actions and save even
    more time with the forms.
  prefs: []
  type: TYPE_NORMAL
