- en: The Core Network Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at the core network modules that ship with
    Ansible. Due to the requirements of these modules, we will only be touching upon
    the functionality these modules provide with some use cases and examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The core network modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with a server's local firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with a network device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be launching a Vagrant box running a software firewall.
    You will need Vagrant installed and access to the internet; the Vagrant box is
    around a 400-MB download. A complete version playbook we will be working through
    in this chapter can be accessed at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter07/vyos](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter07/vyos).
  prefs: []
  type: TYPE_NORMAL
- en: Manufacturer and device support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been looking at modules that interact with servers. In our case,
    they have all been running locally. In later chapters, we will be communicating
    with remotely hosted servers. Before we start interacting with remote servers,
    we should cover the core network modules.
  prefs: []
  type: TYPE_NORMAL
- en: These modules have all been designed to interact with and manage the configuration
    of various network devices, from traditional top-of-rack switches and fully virtualized
    network infrastructure, to firewalls and load balancers. There are quite a lot
    of very different devices supported by Ansible, from open source virtual appliances
    all the way through to solutions that can potentially cost over $500,000, depending
    on your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have listed each of the devices and operating systems here. For each of them,
    there is a shorthand name, which is highlighted in bold. Each of these is the
    prefix for the module. For example, in the first device, there is a module called
    **a10_server**, which is used to manage **Server Load Balancer** (**SLB**) objects
    using the aXAPIv2 API.
  prefs: []
  type: TYPE_NORMAL
- en: A10 Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **A10** modules support A10 Networks AX, SoftAX, Thunder, and vThunder devices.
    These are all application delivery platforms, which provide load balancing. Among
    other features, the half-dozen modules allow you to manage load balancing and
    virtual hosts on both the physical and virtual devices.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco Application Centric Infrastructure (ACI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The 50+ **ACI** modules are used to manage all aspects of Cisco's ACI, which
    is to be expected of Cisco's next generation API-driven networking stack.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco AireOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The two **AireOS** modules allow you to interact with the Cisco Wireless LAN
    Controllers running AireOS. One of the modules allows you to run commands directly
    on the devices, and the other is for managing the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Apstra Operating System (AOS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dozen or so **AOS** modules are all marked as deprecated, as they don't
    support AOS 2.1 or later. The modules will be replaced before they are removed
    in an upcoming Ansible release, Version 2.9 to be exact.
  prefs: []
  type: TYPE_NORMAL
- en: Aruba Mobility Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are just two **Aruba** modules. These allow you to manage the configuration
    and execute commands on the Aruba Mobility Controllers from Hewlett Packard.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco Adaptive Security Appliance (ASA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the three **ASA** modules, you can manage access lists, as well as run
    commands and manage the configuration of both the physical and virtual Cisco ASA-powered
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Avi Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, there are 65 **Avi** modules, which allow you to interact
    with all aspects of the Avi application services platform, including the load-balancing
    and **web application firewall** (**WAF**) features.
  prefs: []
  type: TYPE_NORMAL
- en: Big Switch Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are three Big Switch Network modules. One, the **Big Cloud Fabric** (**BCF**),
    allows you to create and delete BCF switches. The other two modules allow you
    to create **Big Monitoring Fabric** (**Big Mon**) service chains and policies.
  prefs: []
  type: TYPE_NORMAL
- en: Citrix Netscaler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is currently a single deprecated **Netscaler** module. It is due to be
    removed for Ansible 2.8\. This gives you plenty of time to move over to the new
    modules. The single module has been replaced by 14 others, which allow you to
    manage a lot more of the features in the load balancer and the security devices
    from Citrix.
  prefs: []
  type: TYPE_NORMAL
- en: Huawei CloudEngine (CE)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are over 65 **CE** modules that allow you to manage all aspects of these
    powerful switches from Huawei, including BGP, access control lists, MTU, static
    routes, VXLANs, and even SNMP configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Arista CloudVision (CV)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a single module that allows you to provision an Arista **CV** server
    port using a configlet.
  prefs: []
  type: TYPE_NORMAL
- en: Lenovo CNOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are over 15 modules that allow you to manage devices running the **CNOS**
    operating system from Lenovo; they allow you to manage everything from BGP and
    port aggregation to VLAG, VLANs, and even factory reset devices.
  prefs: []
  type: TYPE_NORMAL
- en: Cumulus Linux (CL)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of the eight **CL**, seven of them have been deprecated in favor of a single
    module that communicates with your Cumulus Linux-powered device using the **Network
    Command Line Utility** (**NCLU**).
  prefs: []
  type: TYPE_NORMAL
- en: Dell operating system 10 (DellOS10)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**DellOS10** has three modules, which allow you to execute commands, manage
    the configuration, and gather facts on devices running Dell''s networking operating
    system. There are also modules for **Dell operating system 6** (**DellOS6**) and
    **Dell operating system 9** (**DellOS9**).'
  prefs: []
  type: TYPE_NORMAL
- en: Ubiquiti EdgeOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are modules for **EdgeOS** that allow you to manage the configuration,
    execute ad hoc commands, and gather facts on devices that are running EdgeOS,
    such as the Ubiquiti EdgeRouter.
  prefs: []
  type: TYPE_NORMAL
- en: Lenovo Enterprise Networking Operating System (ENOS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are three modules for the Lenovo **ENOS**. Like other devices, these allow
    you to gather facts, execute commands, and manage the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Arista EOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are sixteen modules that allow you to manage your devices running **EOS**.
    These modules let you configure interfaces, VLANs, VRFs, users, link aggregation,
    static routes, and even logging. There is also a module that allows you to gather
    facts from each device.
  prefs: []
  type: TYPE_NORMAL
- en: F5 BIG-IP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are 65 modules, all prefixed with **BIG-IP**, that allow you to manage
    all aspects of your F5 BIG-IP Application Delivery Controller.
  prefs: []
  type: TYPE_NORMAL
- en: FortiGate FortiManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a single module that allows you to add, edit, delete, and execute scripts
    against your FortiGate devices, using **FortiManager** (**fmgr**).
  prefs: []
  type: TYPE_NORMAL
- en: FortiGate FortiOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of the core network modules, there are three that enable you to manage
    the addresses, configuration, and IPv4 policy objects on your FortiGate **FortiOS**-powered
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: illumos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**illumos** is a fork of the OpenSolaris operating system. It has several powerful
    networking features that make it the perfect candidate for deploying as a self-built
    router or firewall. There are three prefixes used: `dladm`, `flowadm`, and `ipadm`.
    These modules allow you to manage the interfaces, NetFlow, and tunnels. Also,
    as illumos is a fork of OpenSolaris, your playbook should work on OpenSolaris-based
    operating systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Cisco IOS and IOS XR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are around 25 modules that allow you to manage your Cisco **IOS** and
    **IOS XR**-powered devices. With them, you can gather facts on your devices, as
    well as configure users, interfaces, logging, banners, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Brocade IronWare
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are the usual three modules that assist you in managing your Brocade **IronWare**-powered
    devices; you can configure, run ad hoc commands, and gather facts.
  prefs: []
  type: TYPE_NORMAL
- en: Juniper Junos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are 20 modules that enable you to interact with Juniper devices running
    **Junos** from within your playbooks. These range from the standard command, configuration,
    and fact-gathering modules to ones that allow you to install packages and copy
    files to your devices.
  prefs: []
  type: TYPE_NORMAL
- en: Nokia NetAct
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a single module that allows you to upload and apply your Nokia **NetAct**-powered
    core and radio networks.
  prefs: []
  type: TYPE_NORMAL
- en: Pluribus Networks Netvisor OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are over ten modules that allow you to manage your **Pluribus Networks**
    (**PN**) Netvisor OS-powered devices, from creating clusters and routers, to running
    commands on your white-box switches.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco Network Services Orchestrator (NSO)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a handful of modules that allow you to interact with your Cisco **NSO**-managed
    devices. You can execute NSO actions, query data from your installation, and verify
    your configuration alongside service synchronization and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Nokia Nuage Networks Virtualized Services Platform (VSP)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a single module that allows you to manage enterprises on your Nokia
    **Nuage** Networks VSP.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco NX-OS (NXOS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can imagine, there are a lot of modules for managing devices running
    Cisco **NXOS**—over 70\. A few of them are in the process of being deprecated.
    With that many modules, you get quite large coverage of all the functions of this
    powerful network-operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Mellanox ONYX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There over a dozen modules that allow you to interact with the **ONYX**, the
    switch operating system from Mellanox. You can manage BGP, L2 and L3 interfaces,
    and also LDAP.
  prefs: []
  type: TYPE_NORMAL
- en: Ordnance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two modules for the **Ordnance** Router as a Service; they allow you
    to apply configuration changes and also gather facts.
  prefs: []
  type: TYPE_NORMAL
- en: Open vSwitch (OVS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are three modules that allow you to manage bridges, ports, and databases
    on your **OVS** virtual switches.
  prefs: []
  type: TYPE_NORMAL
- en: Palo Alto Networks PAN-OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are over 20 modules that let you configure, manage, and audit your Palo
    Alto Networks devices running PAN-OS (**panos**). Currently, there are a few modules
    that are being deprecated; they will stop being distributed as a core module from
    Ansible 2.5.
  prefs: []
  type: TYPE_NORMAL
- en: Radware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A small number of modules, which have recently been introduced, allow you to
    manage your Radware devices via a **vDirect** server.
  prefs: []
  type: TYPE_NORMAL
- en: Nokia Networks Service Router Operating System (SROS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are three modules that allow you to run commands against, configure, and
    roll-back changes to your Nokia Networks **SROS** devices.
  prefs: []
  type: TYPE_NORMAL
- en: VyOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a dozen or so modules that allow you to manage most aspects of your
    **VyOS** open source Linux-based router and firewall. We are going to take a look
    at VyOS in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are also several generic **net** modules that allow you to manage interfaces,
    Layer2 and Layer3 configuration, NETCONF, routing, and also LLDP services on Linux-based
    network devices.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with a network device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As already mentioned at the start of the chapter, we are going to use Vagrant
    to launch a network device, and then run a playbook to apply a basic configuration.
    The device we will be launching is a VyOS. While the device will be a full VyOS
    installation, we will be applying only a test configuration to give you an idea
    of how the modules we mentioned in the previous section can be used.
  prefs: []
  type: TYPE_NORMAL
- en: There is a full copy of this playbook in the GitHub repository that accompanies
    this title.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the network device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To do this, we are going to use a VyOS Vagrant box. If you are following along,
    we first need to create a folder called `vyos`. This will hold our playbook and
    `Vagrantfile`. To create the folder structure and blank files needed for the playbook,
    run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following code into the empty `Vagrantfile` we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `Vagrantfile` doesn't look that much different from the
    others we have been using in previous chapters. Let's now take a look at the `vyos_firewall`
    role. There are some differences in the approach to executing and writing the
    role, which we should discuss before we launch anything.
  prefs: []
  type: TYPE_NORMAL
- en: The VyOS role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we go into the tasks, let''s take a look at the variables we will be
    using. First of all, the content of `roles/vyos-firewall/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are setting just two key values. The first, `motd_asciiart`, is a multiline
    banner that will be configured to be displayed whenever we log in to the VyOS
    device. We are setting the variable as a multiline by using the `|` after declaring
    the key. The next key, `vyos_nameservers`, is a list of DNS resolvers to use.
    Here, we are using Google's Public DNS resolvers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some other variables used in the playbook; these can be found in
    `group_vars/common.yml` as shown in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, these are the bulk of the variables that could change depending
    on where our playbook is being run. To start off with, we are setting the details
    of our device and its basic configuration in a nested variable called `vyos`.
    You might have noticed that we are passing the details of the IP address and username
    for our VyOS device in here, rather than our host inventory file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, our host inventory file, called `production`, should just contain
    the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What this means is that when our playbook is executed, it will not be executed
    against our VyOS device. Instead, the playbook will target our Ansible controller,
    and the module will then target the VyOS device. This approach is common among
    all the core network modules. As we have already discussed, Ansible is an agentless
    platform; it requires only an SSH or WinRM connection by default.
  prefs: []
  type: TYPE_NORMAL
- en: However, not every networking device has SSH or WinRM access; some may have
    only web-based APIs, while others may use a proprietary access method. Others,
    such as VyOS, may appear to have SSH access; however, you are SSHing into a custom
    shell that is designed to run only a few firewall commands. For this reason, most
    of the core network modules manage their connection and communication away from
    the host inventory file.
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the variables in the `group_vars/common.yml` fileset up some
    basic firewall rules, which we will look at shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The task for the role, which can be found at `roles/vyos-firewall/tasks/main.yml`,
    contains four parts. First of all, we are using the `vyos_config` module to set
    the hostname. Take a look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are passing the details of our VyOS device using the `provider`
    option; then we are passing a single `vyos` command to set the hostname. The `vyos_config`
    module also accepts template files, which we will be using in a moment to fully
    configure our device.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next task configures the DNS resolvers using the `vyos_system` module.
    Take a look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we are going to set the **message of the day** (**MOTD**) using the
    `vyos_banner` module. Take a look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we are going to apply our main firewall configuration using the following
    task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Rather than providing commands using `lines`, this time we are giving the name
    of a template file using `src`. We are also instructing the module to make a backup
    of the current configuration; this will be stored in the `roles/vyos-firewall/backup`
    folder, which is created when the playbook runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The template can be found at `roles/vyos-firewall/templates/firewall.j2`. This
    template contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a lot of commands in the template, the bulk of which are just applying
    some basic settings on the device. The ones we are interested in are the three
    `for` loops. The first loop is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will simply loop through each of the IP addresses we have provided in
    the `whitelist_ips` variable, in a similar way to how we have been using `with_items`
    in previous playbooks. This is better demonstrated by the next loop, which takes
    the variables from the `firewall` variable and creates both the NAT and firewall
    rules. Take a look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the rule is included only if we have set `action` to `set`
    in the variable; the final loop takes care of any rules where we have set the
    `action` to `delete`, as shown in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have been following along, you should have content in all of the files
    we initially created, apart from the `site.yml` file. This should contain the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have all of the parts of our playbook together, we are able to launch
    the VyOS Vagrant box and run the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Running the playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To launch the Vagrant box, make sure you are in the `vyos` folder we created
    at the start of this section and run one of the following two commands to start
    the box with your chosen hypervisor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once your Vagrant box has launched, you can run the playbook using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for this playbook run should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once complete, you should be able to SSH into your VyOS device by running the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see that the login banner has been updated to the one we defined,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2a2c0127-ca93-4a8a-a093-e690236f322e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While logged in, you should be able to see the VyOS configuration by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be able to spot all of the changes we have made with the playbook
    run, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/afa4ed4f-cbf4-4710-8702-fae627fc826c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To stop viewing the configuration, press *Q*. You can type `exit` to leave
    the SSH session. You can remove the VyOS Vagrant box by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned at the start of this section of the chapter, this exercise has
    not been about configuring a fully functional VyOS installation using Ansible;
    instead, it gives a practical example of how you could potentially go about configuring
    a network device using Ansible modules, which both effect change and also apply
    configuration using a template.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have taken a brief look at the various network modules provided
    as part of the Ansible core set of modules. We also applied a configuration to
    a virtual VyOS device to get a feel for how the network modules differ from the
    modules we have covered in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at launching cloud-based server instances
    using Ansible and then applying some of our playbooks to them.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'True or False: You have to use `with_items` with a `for` loop within a template.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which character is used to split your variable over multiple lines?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or False: When using the VyOS module, we do not need to pass details of
    our device in the host inventory file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you roll back your VyOS configuration to the earliest backup you have stored?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are details on each of the devices and technologies currently supported
    by the core network modules at each of the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A10 Networks**: [https://www.a10networks.com/](https://www.a10networks.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cisco ACI**: [https://www.cisco.com/c/en_uk/solutions/data-center-virtualization/application-centric-infrastructure/index.html](https://www.cisco.com/c/en_uk/solutions/data-center-virtualization/application-centric-infrastructure/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cisco AireOS**: [https://www.cisco.com/c/en/us/products/wireless/wireless-lan-controller/index.html](https://www.cisco.com/c/en/us/products/wireless/wireless-lan-controller/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AOS**: [http://www.apstra.com/products/aos/](http://www.apstra.com/products/aos/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aruba Mobility Controller**: [http://www.arubanetworks.com/en-gb/products/networking/controllers/](http://www.arubanetworks.com/en-gb/products/networking/controllers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cisco ASA**: [https://www.cisco.com/c/en/us/products/security/adaptive-security-appliance-asa-software/index.html](https://www.cisco.com/c/en/us/products/security/adaptive-security-appliance-asa-software/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avi Networks**: [https://avinetworks.com/](https://avinetworks.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Big Switch Networks**: [https://www.bigswitch.com](https://www.bigswitch.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Citrix Netscaler**: [https://www.citrix.com/products/netscaler-adc/](https://www.citrix.com/products/netscaler-adc/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Huawei CloudEngine**: [http://e.huawei.com/uk/products/enterprise-networking/switches/data-center-switches](http://e.huawei.com/uk/products/enterprise-networking/switches/data-center-switches)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arista CloudVision**: [https://www.arista.com/en/products/eos/eos-cloudvision](https://www.arista.com/en/products/eos/eos-cloudvision)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lenovo CNOS and ENOS**: [https://www3.lenovo.com/gb/en/data-center/networking/-software/c/networking-software/](https://www3.lenovo.com/gb/en/data-center/networking/-software/c/networking-software/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cumulus Linux**: [https://cumulusnetworks.com/products/cumulus-linux/](https://cumulusnetworks.com/products/cumulus-linux/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dell operating system 10**: [http://www.dell.com/en-us/work/shop/povw/open-platform-software/](http://www.dell.com/en-us/work/shop/povw/open-platform-software/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ubiquiti EdgeOS**: [https://www.ubnt.com/edgemax/edgerouter/](https://www.ubnt.com/edgemax/edgerouter/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arista EOS**: [https://www.arista.com/en/products/eos](https://www.arista.com/en/products/eos)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**F5 BIG-IP**: [https://f5.com/products/big-ip](https://f5.com/products/big-ip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FortiGate FortiManager**: [https://www.fortinet.com/products/management/fortimanager.html](https://www.fortinet.com/products/management/fortimanager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FortiGate FortiOS**: [https://www.fortinet.com/products/fortigate/fortios.html](https://www.fortinet.com/products/fortigate/fortios.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**illumos**: [http://www.illumos.org/](http://www.illumos.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cisco IOS**: [https://www.cisco.com/c/en/us/products/ios-nx-os-software/ios-software-releases-listing.html](https://www.cisco.com/c/en/us/products/ios-nx-os-software/ios-software-releases-listing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cisco IOS XR**: [https://www.cisco.com/c/en/us/products/ios-nx-os-software/ios-xr-software/index.html](https://www.cisco.com/c/en/us/products/ios-nx-os-software/ios-xr-software/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Brocade IronWare**: [https://www.broadcom.com/](https://www.broadcom.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Juniper Junos**: [https://www.juniper.net/uk/en/products-services/nos/junos/](https://www.juniper.net/uk/en/products-services/nos/junos/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nokia NetAct**: [https://networks.nokia.com/solutions/netact](https://networks.nokia.com/solutions/netact)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pluribus Networks Netvisor OS**: [https://www.pluribusnetworks.com/products/white-box-os/](https://www.pluribusnetworks.com/products/white-box-os/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cisco NSO**: [https://www.cisco.com/c/en/us/solutions/service-provider/solutions-cloud-providers/network-services-orchestrator-solutions.html](https://www.cisco.com/c/en/us/solutions/service-provider/solutions-cloud-providers/network-services-orchestrator-solutions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nokia Nuage Networks VSP**: [http://www.nuagenetworks.net/products/virtualized-services-platform/](http://www.nuagenetworks.net/products/virtualized-services-platform/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cisco NX-OS**: [https://www.cisco.com/c/en/us/products/ios-nx-os-software/nx-os/index.htm](https://www.cisco.com/c/en/us/products/ios-nx-os-software/nx-os/index.htm)l'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mellanox ONYX**: [http://www.mellanox.com/page/mlnx_onyx?mtag=onyx_software](http://www.mellanox.com/page/mlnx_onyx?mtag=onyx_software)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ordnance**: [https://ordnance.co/](https://ordnance.co/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open vSwitch**: [https://www.openvswitch.org/](https://www.openvswitch.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Palo Alto Networks PAN-OS**: [https://www.paloaltonetworks.com/documentation/80/pan-os](https://www.paloaltonetworks.com/documentation/80/pan-os)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radware**: [https://www.radware.com](https://www.radware.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nokia Networks Service Router Operating System**: [https://networks.nokia.com/products/sros](https://networks.nokia.com/products/sros)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VyOS**: [https://vyos.io/](https://vyos.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
