- en: MongoDB Tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Features, stability, and great driver support are all important; however, there
    is another area that is key to a software product succeeding, and that is the
    ecosystem built around it. MongoDB (originally under the name 10gen Inc.) introduced
    the MMS more than 8 years ago, in 2011, and it was seen as an innovation at the
    time. In this chapter, we will go through the following suite of different tools
    that are available for MongoDB and explore how they can improve productivity:'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Enterprise Kubernetes Operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB Mobile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB Stitch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB Sync
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MongoDB Monitoring Service** (**MMS**) is a mostly free **Software as a Service** (**SaaS**)
    solution that can monitor and access the diagnostics of any database that is signed
    up to it. When it was introduced, it greatly helped 10gen''s engineers to troubleshoot
    any problems that the customers had. Since then, tooling has been a centerpiece
    of MongoDB''s evolution.'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Atlas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB Atlas is MongoDB's **Database as a Service** (**DBaaS**) offering. It
    is available as a multi-cloud offering, supporting **Amazon Web Service** (**AWS**),
    Microsoft Azure, and Google Cloud Platform.
  prefs: []
  type: TYPE_NORMAL
- en: Using DBaaS, patches and minor version upgrades are applied automatically, without
    any downtime. Using the **graphical user interface** (**GUI**), a developer can
    deploy geographically distributed database instances to avoid having any single
    point of failure. For websites with significant traffic, this can also help by
    placing database servers closer to the users who are accessing their data. This
    is a key part of MongoDB's strategy and offering as they embrace having data close
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to most DBaaS offerings, Atlas allows users to scale a deployment using
    a GUI. Every deployment lives on its own **Virtual Private Cloud** (**VPC**) and
    can leverage MongoDB Enterprise Server features such as encryption key management,
    **Lightweight Directory Access Protocol** (**LDAP**), and auditing features.
  prefs: []
  type: TYPE_NORMAL
- en: The live migration service can be used to migrate datasets from existing deployments
    on-premises, in any of the three supported cloud providers or other DBaaS services,
    such as **mLab**, **Compose**, and **ObjectRocket**, using the same GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating a new cluster using MongoDB Atlas is as simple as clicking and selecting
    through configuration options. In the following screenshot, we can see all the
    options that are available when creating a new cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd6861db-5e28-4df0-947d-1c276c700cce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows Zone configuration summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bce328e1-6820-4a6a-a483-919dc3d5e484.png)'
  prefs: []
  type: TYPE_IMG
- en: One of the game-changing settings in MongoDB Atlas is the ability to instantly
    provision geographically distributed servers across different zones and date centers
    (for all three major cloud providers) with the goal of having our data closest
    to our users. This can be useful for performance and regulatory reasons (such
    as **General Data Protection Regulation** (**GDPR**), for the European Union).
  prefs: []
  type: TYPE_NORMAL
- en: By enabling global writes, we can start configuring this setting. Using any
    of the two templates—global performance or excellent global performance—an admin
    can create server configurations that will be less than 120 or less than 80 milliseconds
    from any user around the world. An administrator can also define their own custom
    assignments from regions to data centers.
  prefs: []
  type: TYPE_NORMAL
- en: In Zone configuration summary, we can see an overview of how our settings will
    affect performance. M30 is the shard-enabled MongoDB Atlas plan and this configuration
    is creating (under the hood) a shard per zone. We can create more shards per zone
    but this is not recommended at this time.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling configure local reads in all zones will create local read-only replica
    set nodes in every region other than the zone that is used to write data to. So,
    if we have three zones (*A*, *B*, and *C)*, we end up with writes for *A* going
    to *A,* but reads from *A* happening either from a server in zone *A*, or *B*
    or *C*, depending on which server is geographically closer to the user. The same
    goes for zones *B* and *C*.
  prefs: []
  type: TYPE_NORMAL
- en: This section is probably the most important for complex, multi-region deployments
    and should be treated with extreme care.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next section is configuring the servers that we want to use for our clusters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bb9b097-6595-41af-9dfe-06cf6e2bca3f.png)'
  prefs: []
  type: TYPE_IMG
- en: This is similar to how we will select servers in EC2 or Microsoft Azure. The
    main point to note is that we can select custom IOPS (the number of I/O operations
    per second) performance, and that we should select the Auto-expand Storage option
    to avoid running out of disk capacity. Together with this option, it's always
    useful to keep an eye on storage allocation to avoid excessive charges at the
    end of a billing cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next panel, we can configure backup and advanced options for our cluster.
    The following screenshot shows Additional Settings for continuous backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56ffb570-80cb-4f6b-aa62-5a39e447282c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the Advanced Settings option for enabling BI
    Connector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ad297ed-73fb-406d-90f0-018948a81e54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows More Configuration Options that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15ca0080-fc75-4d04-b01d-41697b6f5d7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Important notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MongoDB has provided some useful tips for in MongoDB Atlas, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the latest version of MongoDB whenever possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the latest **Transport Layer Security** (**TLS**) version available, which
    is 1.3 at the time of writing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption at rest cannot be used together with continuous backups. We need
    to select cloud provider snapshots to be able to use this feature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's probably a good idea to disable server-side JavaScript, unless we know
    why we need it, for example, when we have legacy MapReduce jobs in place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requiring indexes for all queries can be useful if we have a well-defined business
    case and requirements for how we will use the database, and/or we expect our dataset
    to be so large that querying without indexes is practically impossible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we get to select the name of our cluster. This cannot be changed after
    creation so it's important to agree with fellow team members before we click on
    the Create Cluster button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After a bit of waiting, our cluster will be operational, and we will be able
    to connect to it via a plain old MongoDB URI.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Cloud Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Formerly known as **MongoDB Management Service** (**MMS**) and before that as
    **MongoDB Monitoring Service** (**MMS**), Cloud Manager is a managed SaaS for
    on-premises MongoDB deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Atlas as a DBaaS solution can provide an end-to-end solution for database management.
    For many use cases this may not be feasible. In this case, it may make sense to
    use some of the features in a pay-as-you-go fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Manager has a limited free tier and several paid ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the key features of Cloud Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: Automated backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 100 database metrics and **Key Performance Indicators** (**KPIs**)
    that can be used to track MongoDB's performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customized alerts that integrate with third-party systems such as PagerDuty,
    email, and SMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A unified operations view, either via directly querying its JSON API, or by
    integrating it with popular performance tracking solutions such as New Relic ([https://www.newrelic.com](https://www.newrelic.com))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Premium plans also offer advice around performance and indexing. Cloud Manager's
    only requirement is to install the required agents in our application.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Ops Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ops Manager is, in many ways, different to Cloud Manager. In contrast to Cloud
    Manager, it is a downloadable executable for Windows Server, **Red Hat Enterprise
    Linux** (**RHEL**), or Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: Following on this, users need to install and manage the service within their
    own infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Aside from this difference, Ops Manager can also help achieve similar goals
    to Cloud Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring on more than 100 performance metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation on installing and upgrading clusters; plus index maintenance can
    be achieved with zero downtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For continuous, incremental backups with point-in-time recovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index suggestions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A sample Ops Manager topology is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3cfdade5-29d8-4951-b2f9-f9d735320e56.png)'
  prefs: []
  type: TYPE_IMG
- en: Aside from the Ops Manager and the MongoDB nodes, we also need snapshot storage
    if we have enabled backups.
  prefs: []
  type: TYPE_NORMAL
- en: Ops Manager can be a better alternative to Cloud Manager if we want an on-premises
    solution for security, or for other reasons. This is included as part of the MongoDB
    Enterprise Server paid solution.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB Charts is a tool to generate visualizations from MongoDB data. It enables
    non-technical people to query a MongoDB database using a GUI and share the results
    with colleagues.
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB Charts can create a series of charts, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A column and bar chart reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A line and area chart reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Grid charts:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A heatmap reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scatter chart reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A donut chart reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Text charts: Number chart reference'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like Ops Manager, it's a standalone executable utilizing Docker that needs to
    be installed and managed on-premises.
  prefs: []
  type: TYPE_NORMAL
- en: Use replica set secondaries for charts queries. Ideally, use a secondary, hidden,
    non-electable node as an analytics node in replica sets.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Compass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB Compass is similar to MongoDB Charts, with less functionality around
    charting, but more heavily oriented towards running ad hoc queries and connecting
    to our database without the need for a command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: Compass provides the ability to query MongoDB through a GUI and visually construct
    queries. It can provide rich visualizations on result datasets, and help with
    constructing aggregation queries through a point and click interface.
  prefs: []
  type: TYPE_NORMAL
- en: Compass also provides visualizations for most administrative queries around
    query and index performance, so that it can be used to monitor and troubleshoot
    clusters from a database administrator perspective. It exposes an API that can
    be used to import or develop plugins.
  prefs: []
  type: TYPE_NORMAL
- en: A useful feature for non-technical users is the ability to download a read-only
    edition so that we can limit access to non-destructive operations. There is also
    an isolated edition of this tool that can be used to restrict connections to a
    single chosen server. These requests will also be TLS-encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: Compass is available for Windows, OSX, Red Hat, and Ubuntu as an executable
    download. MongoDB Compass has a limited free edition, and the full feature set
    is available via a MongoDB subscription package.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Connector for Business Intelligence (BI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB Connector for BI is one of the most useful tools for non-developers.
    It is a part of the MongoDB Enterprise Advanced subscription and enables integration
    with BI tools using standard SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: It enables MongoDB integrations with enterprise tools such as Tableau, Qlik,
    Spotfire, Cognos, MicroStrategy, and SAP BusinessObjects.
  prefs: []
  type: TYPE_NORMAL
- en: It is available as an executable download for Amazon Linux, Debian, OSX, Red
    Hat, SUSE, Ubuntu, and Windows platforms, and can work with both on-premises databases
    and MongoDB Atlas. Once installed and configured correctly, it can provide an
    **Open Database Connectivity** (**ODBC**) **Data Source Name** (**DSN**) that
    most BI tools can use to connect to.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes ([https://kubernetes.io](https://kubernetes.io)) is an open source
    container-orchestration system for automating deployment, scaling, and the management
    of containerized applications. In layman's terms, we can use Kubernetes (often
    referred to as k8s) to manage applications deployed via containers. Kubernetes
    was initially developed at Google and is now maintained by the **Cloud Native
    Computing Foundation** (**CNCF**).
  prefs: []
  type: TYPE_NORMAL
- en: The most widely-used container technology is probably Docker. We can download
    and install Docker on any PC and, through a few commands, install a Docker image
    that will be isolated from our host system and contain our application code. Docker
    performs operating system level virtualization, where all containers are run by
    the host's operating system kernel. This results in containers being more lightweight
    than a full virtual machine (VM).
  prefs: []
  type: TYPE_NORMAL
- en: Multiple Docker containers can be orchestrated using **Docker Swarm**. This
    is similar to Kubernetes and sometimes the two systems are directly compared with
    each other.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB provides tools that can help administrators deploy and manage MongoDB
    clusters using Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Kubernetes Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from MongoDB 4.0, the MongoDB Enterprise Operator for Kubernetes enables
    a user to deploy and manage MongoDB clusters directly from the Kubernetes API.
    This circumvents the need to directly connect to Cloud Manager or Ops Manager,
    and simplifies the deployment and management of Kubernetes clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Manager is, in most aspects, the SaaS equivalent of Ops Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Kubernetes Operator can be installed using Helm, the package manager
    for Kubernetes. First, we have to clone the GitHub repository from MongoDB: [https://github.com/mongodb/mongodb-enterprise-kubernetes.git](https://github.com/mongodb/mongodb-enterprise-kubernetes.git).
  prefs: []
  type: TYPE_NORMAL
- en: 'After we change the directory to our local copy, we can issue the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will then have the local copy installed; the next step is to configure it.
  prefs: []
  type: TYPE_NORMAL
- en: 'By configuring our local installation, we need to apply a Kubernetes `ConfigMap`
    file. The configuration settings that we need to copy from Ops Manager or Cloud
    Manager are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Base URL**: The URL of your Ops Manager or Cloud Manager. For Cloud Manager,
    this will be [http://cloud.mongodb.com](http://cloud.mongodb.com); for Ops Manager,
    this should be similar to `http://<MY_SERVER_NAME>:8080/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project ID**: The ID of an Ops Manager project that the Enterprise Kubernetes
    Operator will deploy into. This should be created within the Ops Manager or Cloud
    Manager, and is a unique ID to organize a MongoDB cluster and provide a security
    boundary for the project. It should be a 24-digit hexadecimal string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User**: An existing Ops Manager username. This is the email of a user in
    Ops Manager that we want the Enterprise Kubernetes Operator to use when connecting
    to Ops Manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Public API key**: This is used by the Enterprise Kubernetes Operator to connect
    to the Ops Manager REST API endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is created by clicking on the username on the Ops Manager console and selecting
    Account. On the next screen, we can click on Public API Access, and then click
    on the Generate key button and provide a description. The next screen will display
    the public API key that we need.
  prefs: []
  type: TYPE_NORMAL
- en: This is the only chance that we will ever have to view this API key, so we need
    to write it down, otherwise, we will need to regenerate a new key.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have these values, we can create the Kubernetes `ConfigMap` file with
    any name we want, as long as it's a `.yaml` file. In our case, we will name it
    `mongodb-project.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its structure will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can apply this file to Kubernetes using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step we need to take is to create the Kubernetes secret. This can
    be done using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We need to note down the credentials name as we will need it in the subsequent
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are ready to deploy our replica set using Kubernetes! We can create
    a `replica-set.yaml` file with the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We apply the new configuration using `kubectl apply`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will be able to see our new replica set in Ops Manager.
  prefs: []
  type: TYPE_NORMAL
- en: To troubleshoot and identify issues in MongoDB using Kubernetes we can use
  prefs: []
  type: TYPE_NORMAL
- en: '`kubectl logs` to inspect logs, and `kubectl exec` to shell into one of the
    containers that is running MongoDB.'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MongoDB Mobile is the mobile version of the MongoDB database. It''s aimed at
    smartphones and IoT sensors via Embedded MongoDB. MongoDB Mobile has two core
    parts:'
  prefs: []
  type: TYPE_NORMAL
- en: A MongoDB database server that runs locally on the device, enabling offline
    access to data. This database is a stripped-down version of the MongoDB Server
    Community Edition, without any of the features that are not needed for Mobile
    (for example, replication).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native Java and Android SDKs to provide low-level access to the database and
    interact with the local Mobile database and any MongoDB Stitch backend.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile SDK has two modes of operation. In local mode, the SDK only allows access
    to the local Mobile database, and cannot sync with any external source in Atlas.
    In remote mode, the SDK can access both MongoDB Atlas and MongoDB Mobile databases
    and Sync between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some limitations of MongoDB Mobile over the server version:'
  prefs: []
  type: TYPE_NORMAL
- en: No support for replication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No support for sharding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No database authentication; however, the MongoDB Mobile database only accepts
    connections originating from the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No SSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No encryption at rest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No change streams support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No server-side JavaScript evaluation (this is for performance reasons)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No multi-document ACID transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To set up MongoDB Mobile, we need to download and install the MongoDB Stitch
    SDK first. Then, creating and querying a local MongoDB database is as easy as
    a few lines of code (this example is in Android):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize the database as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, get a reference to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert `document` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, find the first document by using `first()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: MongoDB Mobile is most powerful when used in conjunction with MongoDB Stitch,
    which we will explore in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Stitch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MongoDB Stitch is MongoDB''s serverless platform offering. It is based on four
    distinct areas of functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: The first area is QueryAnywhere. QueryAnywhere allows client-side applications
    to access MongoDB using its query language. We can define data access rules on
    the Stitch server on a per collection basis to allow us to filter results based
    on user data (`userId`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second area is Stitch functions. These are simple JavaScript functions that
    can execute without a server inside the Stitch platform. By using Stitch functions,
    we can implement application logic, expose APIs, and build integrations with third-party
    services. This service is mostly similar to Amazon's AWS Lambda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third area is Stitch triggers. Similar to MongoDB server's change streams
    and triggers as they are used in relational databases, Stitch triggers execute
    user-defined functions in real time by responding to changes in database state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, there is Stitch Mobile Sync, which bridges the Stitch serverless offering
    with Mobile MongoDB. By using it, we can develop a Mobile service with a local
    MongoDB database residing in the smartphone, which is perfectly synced with our
    MongoDB Atlas-powered database in the cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This way, we can query data locally in the app with no lag, or even while being
    offline, and rely on Stitch Mobile Sync to keep our data store up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Stitch can be used on the web (JavaScript), Android, and macOS (Swift).
  prefs: []
  type: TYPE_NORMAL
- en: QueryAnywhere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QueryAnywhere allows querying MongoDB server data directly from a client application.
    A key differentiation and functionality that allows us to do this securely is
    the ability to define data access rules to filter results based on the content
    of a document or the logged-in user.
  prefs: []
  type: TYPE_NORMAL
- en: Rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB rules are a combination of a role, and the permissions assigned to that
    role. Roles define a set of users that will have the same read/write access to
    a document. Roles in Stitch can be defined with an **apply-when** rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be defined using the `%%` variable notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Each role can have one or more permissions that define which fields they can
    read and/or write in a document.
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB Stitch also offers four templates that have predefined roles and permissions
    around the most common use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Users can only read and write their own data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can read all data, but only write their own data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can only read all data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can read and write their own data. Users that belong to a sharing list
    can read that data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorization is applied before the rules. If a user is not authorized to access
    a collection, their rules will not be evaluated at all.
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stitch functions can be used to execute server-side application logic. They
    are written in JavaScript ES6+ and don't require server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some key limitations of functions:'
  prefs: []
  type: TYPE_NORMAL
- en: They stop execution once they return
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They can run for up to 60 seconds, using up to 256 MB of memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They cannot import modules or use some of the core JavaScript functionality,
    such as global object types, mathematical, number, string, array, and object APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stitch functions can be imported via the CLI or from Stitch UI. For a simple
    function that we have named `multiply`, we could add this code in the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And then we could call it from another function, webhook, or trigger within
    Stitch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also trigger its execution within a Stitch JSON expression using `%function`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even call this function from our client application using Stitch SDK
    (JavaScript, Android, or macOS):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Triggers are building upon Stitch functions to execute when a database collection
    changes for database triggers, or execute authentication logic when a user is
    modified using authentication triggers.
  prefs: []
  type: TYPE_NORMAL
- en: Database triggers can execute on one or more of the `INSERT`, `UPDATE`, `REPLACE`,
    and `DELETE` database operations.
  prefs: []
  type: TYPE_NORMAL
- en: These values all need to be case sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: We need to define the **linked function**, which is the function that will execute
    once the trigger fires. An interesting option for the `UPDATE` operation is `fullDocument`.
    When set to `true`, this will include the full result of the operation. This is,
    as always, subject to the 16 MB document size limit, so updates to documents really
    close to the 16 MB limit may fail as the result will exceed the limit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Authentication triggers, on the other hand, allow us to execute custom code
    on authentication events. These can be triggered on `CREATE`, `LOGIN`, and `DELETE`
    operation types from the following providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`oauth2-google`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oauth2-facebook`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`custom-token`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local-userpass`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api-key`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`anon-user`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication operation types are case sensitive and need to be all uppercase. Up
    to 50 triggers per second can be concurrently executed. If we try to invoke more,
    they will get into a queue to be processed in a **first-in first-out** (**FIFO**)
    fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Triggers are quite similar to RDBMS trigger functionality, with the added bonus
    that they are easy and flexible to manage via the Stitch trigger's GUI console.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile Sync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the newest additions in MongoDB Stitch Mobile Sync can be used to sync
    data seamlessly between MongoDB Mobile and the server''s backend (at the moment
    of writing this, it has to be hosted on MongoDB Atlas). Mobile Sync is also based
    on change streams to listen to data changing between local and remote databases.
    As data changes in the local Mobile database, we may run into conflicts between
    the local and remote state. This is why we need to define some handlers to specify
    what should happen in that case. There are three interfaces that we need to implement
    for our models:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ConflictHandler`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ErrorListener`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChangeEventListener`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConflictHandler` has a method that arguments `documentId` of the document
    that conflicts the local and remote events, returns a resolution to the conflict
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`ErrorListener` does not return anything and is called when an error happens
    for `documentId` and non-network related exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, `ChangeEventListener` also does not return any values and is called
    when any change `event` happens for the given `documentId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through different MongoDB tools and learned how to
    use them to increase productivity. Starting from MongoDB Atlas, the hosted DBaaS
    solution, we followed on with Cloud Manager and Ops Manager, and explored how
    they differ from each other.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we dived into MongoDB Charts and MongoDB Compass—the GUI-driven MongoDB
    administration tools. We learned about MongoDB Connector for BI and how can it
    prove to be useful for our purposes. Then we discussed Kubernetes, how it compares
    to Docker and Docker Swarm, and how we can use Kubernetes with MongoDB Enterprise
    Operator. The next section was dedicated to MongoDB Mobile and Stitch—two major
    enhancements in MongoDB 4.0\. We introduced practical examples of using Stitch's
    functionality, especially around QueryAnywhere, triggers, and functions. Finally,
    we briefly introduced Mobile Sync, one of the latest additions to MongoDB's arsenal,
    and looked at how it can be used to sync our Mobile applications with a cloud-based
    database.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to switch gears and deal with how we can use
    big data with MongoDB to ingest and process large streaming and batch datasets.
  prefs: []
  type: TYPE_NORMAL
