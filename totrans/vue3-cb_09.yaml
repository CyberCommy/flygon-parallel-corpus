- en: Creating Beautiful Applications Using UI Frameworks
  prefs: []
  type: TYPE_NORMAL
- en: Using UI frameworks and libraries is a good way to increase productivity and
    help the development of your application. You can focus more on the code and less
    on the design.
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to use such frameworks means that you know how these frameworks
    behave and work. This will help you in the process of developing an application
    or a framework in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Here, you will learn more about the usage of frameworks when creating user registration
    forms and all the components that are needed for a page. In this chapter, we will
    learn how to create a layout, a page, and a form using Buefy, Vuetify, and Ant-Design.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a page, a layout, and a user form with Buefy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a page, a layout, and a user form with Vuetify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a page, a layout, and a user form with Ant-Design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using Node.js and Vue-CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention Windows users: you need to install an `npm` package called `windows-build-tools`.
    To do so, open PowerShell as administrator and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `Vue-CLI`, you need to open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a page, a layout, and a user form with Buefy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bulma was one of the first frameworks to be used for rapid prototyping and web
    development that didn't require a JavaScript library attached to it. All the special
    components that needed to be coded were the responsibility of the developer using
    the framework.
  prefs: []
  type: TYPE_NORMAL
- en: With the advent of JavaScript frameworks and the community that was created
    around the Bulma framework, a wrapper for Vue was created. This wrapper takes
    all the responsibility of JavaScript component development and delivers a complete
    solution for developers to use the Bulma framework within their applications,
    without the need to re-invent the wheel.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the Buefy framework with Vue and how
    to create a layout, a page, and a user registration form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Vue-CLI project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a Vue-CLI project with the Buefy framework, we need to create a Vue-CLI
    project first and then add the Buefy framework to the project. We will divide
    this recipe into four parts: creating the Vue-CLI project, adding the Buefy framework
    to the project, creating the layout and the page, and finally creating the user
    registration form.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Vue-CLI project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here we will create the Vue-CLI project to be used in this recipe. This project
    will have custom settings to be able to work with the Buefy framework:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Vue-CLI will ask for you to choose a preset – select `Manually select features`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the Vue-CLI will ask for the features, and you will need to select `CSS
    Pre-processors` as an additional feature on top of the default ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here the Vue-CLI will ask which CSS pre-processor you want to use; select `Sass/SCSS
    (with node-sass)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue this process by selecting a linter and formatted. In our case, we
    will select the `ESLint + Airbnb` config:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Choose the additional features of the linter (here, `Lint and fix on commit`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Select where you want to place the linter and formatter configuration files
    (here, `In dedicated config files`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the Vue-CLI will ask you whether you want to save the settings for
    future projects; you should select `N`. After that, Vue-CLI will create the folder
    and install the dependencies for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Adding Buefy to the Vue-CLI project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To use Bulma in a Vue project, we are going to use the Buefy UI library. This
    library is a wrapper around the Bulma framework and provides all the components
    that are available with the original framework and some additional components
    to use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the folder that you created for your Vue-CLI project, open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Vue-CLI will ask whether you want to choose a style to work with Buefy; we
    will go with `scss`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, Vue-CLI will ask whether you want to include the Material Design icons; for
    this project, we won''t use them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now Vue-CLI will ask whether you want to include Font Awesome icons; we will
    add them to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Creating the layout and a page with Buefy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create a page, we need to create a layout structure and the base components
    for the page, such as a header menu, a footer, and the hero section of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the header menu component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In our design, we will have a header menu, with a basic combination of links
    and call-to-action buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `top-menu.vue` in the `src/components` folder and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` section of the single file component, we will export a `default`
    JavaScript object, with the `name` property defined as `TopMenu`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` section of the single file component, create a `section`
    HTML element with the `section` class, and add a child `div` HTML element with
    the `container` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a `b-navbar` component as a child of the `div.container` HTML element,
    and add as a child a `template` placeholder component, with the named slot as
    `brand`. Inside that, add a `b-navbar-item` component with the `href` attribute
    defined as `#` and add an `img` HTML element as a child:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After this `template` placeholder, create another `template` placeholder with
    the named slot as `start`. Inside it, create two `b-navbar-item` components with
    the `href` attribute defined as `#`. Create, as a sibling component, a `b-navbar-dropdown`
    component with the `label` attribute defined as `Info`. In this component, add
    two `b-navbar-item` components as children with the `href` attribute defined as
    `#`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create another `template` placeholder with the named slot as `end`.
    Create a `b-navbar-item` component as a child component with the `tag` attribute
    defined as `div`, and add a `div` HTML element as a child of this component with
    the `buttons` class. In the `div` HTML element, create an `a` HTML element with
    the `button is-primary` class, and another `a` HTML element with the `button is-light` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Creating the hero section component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We will create a hero section component. A hero component is a full-width banner
    that provides visual information on the page to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `hero-section.vue` in the `src/components` folder and
    open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object, with the `name` property defined as `HeroSection`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` section of the single file component, create a `section`
    HTML element with the `hero is-primary` class, then add  a `div` HTML element
    as a child, with the `hero-body` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `div.hero-body` HTML element, create a child `div` HTML element
    with the `container` class. Then, add an `h1` HTML element as a child with the
    `title` class and an `h2` HTML element with the `subtitle` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating the footer component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The final component that we are going to use in our layout is the footer component.
    This will be displayed as the footer of our page:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `Footer.vue` in the `src/components` folder and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object, with the `name` property defined as `FooterSection`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` section of the single file component, create a `footer`
    HTML element with the `footer` class, and then add a `div` HTML element with the
    `content has-text-centered` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `div.content` HTML element, create a `p` HTML element for the initial
    footer line, and create a second `p` HTML element for the second line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Creating the layout component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To create the layout component, we are going to use all the created components,
    and add a slot that will hold the page content:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `layouts` in the `src` folder, and create a new file
    named `Main.vue` and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` section of the single file component, import the `footer-section`
    component and the `top-menu` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will export a `default` JavaScript object, with the `name` property defined
    as `Mainlayout`, and define the `components` property with the imported components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `<template>` section of the single file component, create a
    `div` HTML element with the child `top-menu` component, a `slot` placeholder,
    and the `footer-section` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Creating the user registration form with Buefy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we are going to create the user registration form and make the final page.
    In this step, we will join the outputs of all the other steps into a single page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `App.vue` file in the `src` folder. In the `<script>` section of the
    single file component, import the `main-layout` component and the `hero-section` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will export a `default` JavaScript object with the `name` property
    defined as `App`, then define the `components` property with the imported components.
    Add the `data` property to the JavaScript object, with the `name`, `username`,
    `password`, `email`, `phone`, `cellphone`, `address`, `zipcode`, and `country`
    properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` section of the single file, add the imported `main-layout`
    component and add `hero-section` as a child component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `hero-section` component, create a sibling `section` HTML element,
    with the `section` class, and add a child `div` HTML element with the `container` class. In
    this `div` HTML element, create a `h1` HTML element with the `title is-3` class and
    a sibling `hr` HTML element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a `b-field` component as a sibling of the `hr` HTML element, with
    `Name` for `label`, and add a child `b-input` with the `v-model` directive bound
    to `name`. Do the same for the `email` field, changing `label` to `Email`, and
    the `v-model` directive bound to `email`. In the email `b-input`, add a `type`
    attribute defined as `email`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `b-field` component as a sibling of the `b-field` component, with
    the `grouped` attribute. Then, as child components, create the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `b-field` component with the `expanded` attribute and `label` defined as `Phone`*.* Add
    a child `b-input` component with the `v-model` directive bound to `phone` and `type`
    as `tel`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `b-field` component with the `expanded` attribute and `label` defined as `Cellphone`.
    Add a child `b-input` component with the `v-model` directive bound to `cellphone` and `type` as `tel`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create an `h1` HTML element as a sibling of the `b-field` component with
    the `title is-3` class, and add an `hr` HTML element as a sibling. Create a `b-field`
    component with `label` defined as `Address`, and add a `b-input` component with
    the `v-model` directive bound to `address`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `b-field` component as a sibling of the `b-field` component, with
    the `grouped` attribute. Then, as child components, create the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A child `b-field` component with the `expanded` attribute and `label` defined
    as `Zipcode`. Add a `b-input` component with the `v-model` directive bound to `zipcode`
    and the `type` attribute defined as `tel`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A child `b-field` component with the `expanded` attribute and `label` defined
    as `Country`*. *Add a `b-input` component with the `v-model` directive bound to `country` and
    the `type` attribute defined as `tel`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create an `h1` HTML element as a sibling of the `b-field` component,
    with the `title is-3` class, and add an `hr` HTML element as a sibling. Create
    a `b-field` component with the `grouped` attribute. Create a child `b-field` component
    with the `expanded` attribute and `label` defined as `username`, and add a `b-input` component
    with the `v-model` directive bound to `username`. Do the same for the `Password`
    input, changing `label` to `Password`, in the `b-input` component defining the `v-model` directive
    as bound to `password`, and adding the `type` attribute as `password`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a `b-field` component as a sibling of the `b-field` component,
    with the `position` attribute defined as `is-right` and the `grouped` attribute.
    Then, create two `div` HTML element with the `control` class. In the first `div`
    HTML element, add a `button` HTML element as a child with the `button is danger
    is-light` class,  and in the second `div` HTML element, create a child `button`
    HTML element with the `button is-success` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we create a Vue-CLI project, with the basic configurations, and the additional
    CSS pre-processor `node-sass`. Then, we were able to add the Buefy framework to
    our project, using Vue-CLI and the Buefy plugin. Using the Buefy framework, we
    created a layout page component, with a header menu component and a footer component.
  prefs: []
  type: TYPE_NORMAL
- en: For the page, we used the Bulma CSS container structure to define our page,
    and place our user registration form on a default grid size. Then, we added the
    hero section component, for the page identification, and finally, we created the
    user registration form and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of the final project up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b1d76a75-1cbf-4562-813c-d15ac38a51b1.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about Bulma at [http://bulma.io/](http://bulma.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Find more information about Buefy at [https://buefy.org/](https://buefy.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a page, a layout, and a user form with Vuetify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vuetify is on the top three list of the most well-known UI frameworks for Vue.
    Based on Material Design by Google, this framework was initially designed by John
    Leider and is now gathering ground in the Vue ecosystem as the go-to UI framework
    for the initial development of an application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use Vuetify to create a layout component
    wrapper, a page, and a user registration form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Vue-CLI project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will divide this recipe into four main sections. The first and second sections
    are dedicated to the creation of the project and the installation of the framework
    and the last two sections are dedicated to the creation of the user registration
    page and the components needed to create it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Vue-CLI project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To use Vuetify with a Vue-CLI project, we need to create a custom Vue-CLI project
    with pre-defined configurations, so that we are able to take full advantage of
    the framework and the styling options it provides:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)and
    execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'First, Vue-CLI will ask for you to choose a preset; select `Manually select
    features` using the space bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now Vue-CLI will ask for the features, and you will need to select `CSS Pre-processors` as
    an additional feature on top of the default ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, Vue-CLI will ask which `CSS pre-processor` you want to use; select `Sass/SCSS
    (with node-sass)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue this process by selecting a linter and formatted. In our case, we
    will select the `ESLint + Airbnb` config:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Choose the additional features of the linter (here, `Lint and fix on commit`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Select where you want to place the linter and formatter configuration files
    (here, `In dedicated config files`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, Vue-CLI will ask you whether you want to save the settings for future
    projects; you will select `N`. After that, Vue-CLI will create a folder and install
    the dependencies for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Adding Vuetify to the Vue-CLI project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To use Vuetify in a Vue project, we will use the Vue-CLI plugin installation
    of the framework:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the folder that you created your Vue-CLI project in, open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows)and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Vue-CLI will ask whether you want to choose an installation preset. Choose
    the default preset. Then, Vue-CLI will finish the installation of the framework
    on the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: After the installation is finished, Vuetify will have configured the files inside
    your project to load the framework. Now you are ready to use it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the layout with Vuetify
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using Vuetify as the UI framework, we are using the Material Design guide as
    a base, because by using Material Design, we can follow a design guideline to
    create our design structure, which will mean a more appealing structure. You can
    find the Material Design guidelines at [https://material.io/design/introduction#goals](https://material.io/design/introduction#goals).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the top bar component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `top-bar` component that will be used in the
    layout of our page:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/components` folder, create a file named `TopBar.vue` and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object, with the `name` property defined as `TopBar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `<template>` section, create a `v-app-bar` component with the `app`,  `dark`,
    and `dense` attributes defined as `true`, and the `color` attribute defined as
    `primary`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the component, create a `v-app-bar-nav-icon` component with an event
    listener on the `click` event, sending an event `''open-drawer''` when the button
    is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, as a sibling of the `v-app-bar-nav-icon` component, add a `v-toolbar-title`
    component with the title of the page or application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Creating the drawer menu component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Inside a Material Design application, we have a drawer menu that pops up over
    the page. This menu will be opened when the user clicks on the button we have
    just created in the `TopBar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/components` folder, create a file named `DrawerMenu.vue` and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object with three properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `name` property, defined as `DrawerMenu`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `props` property, defined as a JavaScript object, with a property called
    `value`. This property will be another JavaScript object, with the `type`, `required`,
    and `default` properties. The `type` property is defined as `Boolean`, the `required`
    property as `true`, and the `default` property as `false`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `data` property, as a singleton function returning a JavaScript object.
    This object will have a `menu` property, which we will define as an array of the
    menu items that will be used. The array will contain Javascript objects with the
    `name`, then `link`, and `icon` properties. The first menu item will have `name`
    defined as `Home`, then `link` defined as `*#*`, and `icon` defined as `mdi-home`. The
    second menu item will have `name` defined as `Contact`, then `link` defined as
    `#`, and `icon` defined as `mdi-email`. Finally, the third menu item will have `name`
    defined as `Vuetify`, then `link` defined as `#`, and `icon` defined as `mdi-vuetify`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` section, create a `v-navigation-drawer` component with
    the `value` attribute as a variable attribute bound to the `value` props, the
    `app` attribute defined as `true`, and the event listener on the `click` event, sending
    an `''input''` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `v-list` component with the `dense` attribute defined as `true`. As
    a child element, create a `v-list-item` component and define the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `v-for` directive iterating over the `menu` items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `key` attribute with `index` of the item menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `link` attribute defined as `true`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside `v-list-item`, create `v-list-item-action` with a `VIcon` child, with
    the inner text as `item.icon`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create, as a sibling of `v-list-item-action`, a `v-list-item-content` component
    with `v-list-item-title` as a child element, with `item.name` as the inner text:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Creating the layout component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To create the layout component, we are going to use all the created components
    and add a slot that will hold the page content:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/components` folder, create a new file named `Layout.vue` and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` section of the single file component, import the `top-bar` component
    and the `drawer-menu` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will export a `default` JavaScript object, with the `name` property defined
    as `Layout`, then create the `components` property with the imported components.
    Finally, add the `data` property as a singleton function returning a JavaScript
    object, with the `drawer` property with the value defined as `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `<template>` section, create a `v-app` component. As the first child,
    add the `top-bar` component, with the event listener on the `open-drawer` event
    listener, changing the `drawer` data property as the negation of the `drawer` property.
    Then, as a sibling of `top-bar`, create a `drawer-menu` component with the `v-model`
    directive bound to `drawer`. Finally, create a `v-content` component with a child
    `<slot>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Creating the user registration form with Vuetify
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, with the layout component ready, we will create the user registration form.
    Because Vuetify has built-in validation in forms, we will be using that to validate
    some fields in our form.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will create the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src` folder, open the `App.vue` file and clear its contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `layout` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will export a `default` JavaScript object, with a `name` property defined
    as `App`, then define the `components` property with the imported component. Define the `computed` and `methods` properties
    as an empty JavaScript object. Then create a `data` property defined as a singleton
    function returning a JavaScript object. In the `data` property, create the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `valid` property with the value defined as `false`;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `name`, `username`, `password`, `email`, `phone`, `cellphone`, `address`,
    `zipcode`, and `country` properties defined as empty strings:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `computed` property, create a property called `nameRules`; this property
    is a function that returns an array, with an anonymous function that receives
    a value and returns the verification of the value or the error text. Do the same
    for the `passwordRules` and `emailRules` properties. In the `emailRules` property,
    add another anonymous function to the returned array that checks whether the value
    is a valid email through a regular expression, and if the value is not a valid
    email it returns the error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, inside the `methods` property, create a new property named `register` that
    is a function that calls the `$refs.form.validate` function. Also, create another
    property named `cancel` that is another function that calls the `$refs.form.reset`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It''s time to create the `<template>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src` folder, open the `App.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<template>` section, create a `layout` component element, and add a
    `v-container` component as a child with the `fluid` attribute defined as `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `v-container` component, create a child HTML `h1` element with the
    page title and a sibling `v-subheader` component with the page description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a `v-form` component with the `ref` attribute defined as
    `form` and the `lazy-validation` attribute as `true`. Then, the `v-model` directive
    of the component gets bound to the `valid` variable. Create a child `v-container`
    component with the `fluid` attribute defined as `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `v-container` component, create a `v-row` component, and then add
    a `v-col` component as a child with the `cols` attribute defined as `12`. Inside
    the `v-col` component, create a `v-card` component with the `outlined` attribute and
    `flat` defined as `true`, and `class` defined as `mx-auto`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'As a child element of the `v-card` component, create a `v-card-title` component
    with the card title, then as a sibling element create a `v-divider` component.
    After that, create a `v-container` element with the `fluid` attribute defined
    as `true`. Inside the `v-container` element, create a child `v-row` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `v-row` component, create a child `v-col` element with the `cols` attribute
    defined as `12`. Then inside the `v-col` component, create `v-text-field` with
    the `v-model` directive bound to the `name` variable, the `rules` variable attribute defined
    as the `nameRules` computed property, the `label` attribute defined as `Name`,
    and finally, the `required` attribute defined as `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'As a sibling of the `v-col` component, create another `v-col` component with
    the `cols` attribute defined as `12`. Then, add the `v-text-field` component as
    a child, with the `v-model` directive bound to the `email` variable, the `rules`
    variable attribute defined as the `emailRules` computed property, the `type` attribute
    as `email`, the `label` attribute as `E-mail`, and finally, the `required` attribute
    defined as `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Create a `v-col` component as a sibling of the `v-col` component, and define
    the `cols` attribute as `6`. Then, add as a child component the `v-text-field`
    component, with the `v-model` directive bound to the `phone` variable and the
    `label` attribute defined as `Phone`. Do the same for the `Cellphone` input; you
    must change the `v-model` directive bound to the `cellphone` variable and the
    `label` to `Cellphone`*:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will create the `Address` card, as a sibling of `v-col` in the `v-row`
    component. Create a `v-col` component with the `cols` attribute defined as `12`.
    Inside the `v-col` component, create a `v-card` component with the `outlined` attribute and `flat` defined
    as `true`, and `class` defined as `mx-auto`. As a child element of the `v-card` component,
    create a `v-card-title` component with the card title; then, as a sibling element,
    create a `v-divider` component. After that, create a `v-container` element with
    the `fluid` attribute defined as `true`. Inside the `v-container` element, create
    a child `v-row` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `v-row` component in the `v-container` component, create a `v-col`
    component with the `cols` attribute defined as `12`. Then, add  `v-text-field`
    as a child component with the `v-model` directive bound to the `address` variable
    and the `label` attribute defined as `Address`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'As a sibling element, create a `v-col` component with the `cols` attribute
    defined as `6`. Add a `v-text-field` component as a child. Define the `v-model`
    directive of the `v-text-field` component bound to the `zipcode` variable and
    the `label` attribute defined as `Zipcode`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a `v-col` component with the `cols` attribute defined as `6`.
    Add a `v-text-field` component as a child with the `v-model` directive bound to
    the `country` variable and the `label` attribute defined as `Country`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will create the `user Information` card as a sibling of `v-col` in the
    `v-row` component. Create a `v-col` component with the `cols` attribute defined
    as `12`. Inside the `v-col` component, create a `v-card` component with the `outlined` attribute and `flat` defined
    as `true`, and `class` defined as `mx-auto`. As a child element of the `v-card` component,
    create a `v-card-title` component with the card title; then, as a sibling element,
    create a `v-divider` component. After that, create a `v-container` element with
    the `fluid` attribute defined as `true`. Inside the `v-container` element, create
    a child `v-row` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `v-row` component in the `v-container` component, create a `v-col` component
    with the `cols` attribute defined as `6`. Then, add  `v-text-field` as a child
    component with the `v-model` directive bound to the `username` variable and the `label` attribute
    defined as `username`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'As a sibling create a `v-col` component with the `cols` attribute defined as `6`,
    and add a `v-text-field` component as a child with the `v-model` directive bound
    to the `password` variable, the `rules` variable attribute defined as the `passwordRules`
    computed property, and the `label` attribute defined as `Password`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will create the action buttons. As a sibling of the `v-col` on the top `v-row`
    component, create a `v-col` component with the `cols` attribute defined as `12` and
    the `class` attribute defined as `text-right`. Inside the `v-col` component, create
    a `v-btn` component with the `color` attribute defined as `error`, the `class`
    attribute as `mr-4`, and the `click` event listener attached to the `cancel` method.
    Finally, create a `v-btn` component as a sibling, with the `disabled` variable
    attribute as the negation of the `valid` variable, the `color` attribute as `success`,
    the `class` attribute as `mr-4`, and the  `click` event listener attached to the
    `register` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to create a user registration page with Vuetify
    and Vue-CLI. To create this page, we first needed to create the project using
    the Vue-CLI tool and then add the Vuetify plugin to it, so that the framework
    was available to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we created the `top-bar` component, which holds the application title
    and the menu button toggle. To use the menu, we created the `drawer-menu` component
    to hold the navigation items. Finally, we created the `layout` component to hold
    together the `top-bar` and `drawer-menu` components and added a `<slot>` component
    to place the page content.
  prefs: []
  type: TYPE_NORMAL
- en: For the user registration form page, we created three cards that hold the input
    forms, which were bound to the variables on the component. Some of the inputs
    on the form are attached to a set of validation rules that checks for required
    fields and email validation.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the user registration form is checked to see whether it's valid before
    sending the data to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of the final project up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3a8d48ee-0302-4b60-83f6-e827179bf7bc.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Vuetify at [https://vuetifyjs.com/en/](https://vuetifyjs.com/en/).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about Material Design at [https://material.io/](https://material.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a page, a layout, and a user form with Ant-Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ant-Design framework was created by the AliBaba group, specifically by the
    tech team behind AliPay and Ant Financial. It's an ecosystem design that is being
    mainly used by Asian tech giants and it has a large presence in the React and
    Vue communities. Focused on the back office UI, the main core of the framework
    is its solutions for custom data inputs and data tables.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will learn how to create a user registration form using the Ant-Design
    and Vue, by creating a top bar component, a drawer menu, a layout wrapper, and
    a user registration page with a form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Vue-CLI project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a user registration form using the Ant-Design
    framework. To do so, we will create a layout wrapper and the components needed
    for the wrapper, and finally, we will create the page that will hold the user
    registration form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Vue-CLI project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to create a Vue-CLI project to be able to install the Ant-Design plugin
    and start developing the user registration form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'First, Vue-CLI will ask for you to choose a preset; select `Manually select
    features` using the space bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Now Vue-CLI will ask for the features, and you will need to select `CSS Pre-processors` as
    an additional feature on top of the default ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, Vue-CLI will ask which `CSS pre-processor` you want to use; select `Less`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue this process by selecting a linter and formatted. In our case, we
    will select `ESLint + Airbnb` config:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Choose the additional features of the linter (here, `Lint on save`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Select where you want to place the linter and formatter configuration files
    (here, `In dedicated config files`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the CLI will ask you whether you want to save the settings for future
    projects; you should select `N`. After that, Vue-CLI will create a folder and
    install the dependencies for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Adding Ant-Design to the Vue-CLI project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add the Ant-Design framework to a Vue-CLI project, we need to use the Vue-CLI
    plugin to install the framework as a project dependency and have it available
    in the global scope of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the folder that you created your Vue-CLI project in, open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Vue-CLI will ask you how the import of the Ant-Design component should occur;
    we will select the `Fully import` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Vue-CLI will ask you whether you want to overwrite the Ant-Design `LESS` variables;
    we will choose `N`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, Vue-CLI will ask about the main language Ant-Design will use in the
    project; we will select `en_US`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Creating the layout with Ant-Design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To be able to create a user registration form, we will create a base layout
    that will wrap the page content and the form. Here, we will create the `top-bar`
    component, the `drawer-menu` component, and the `layout` wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the top-bar component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the `layout` wrapper, we will have a `top-bar` component that will hold
    the breadcrumbs for where the user currently is. Now we will create the `top-bar`
    component and make it available for the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/components` folder, create a new file called `TopBar.vue` and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object, with a `name` property defined as `TopBar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<style>` section of the single file component, we will make the `<style>`
    section `scoped` and create a class named `header-bread`. Now, `background-color` will
    be defined as `#f0f2f5` with a class named `bread-menu` with the margin defined
    as `16px 0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` section of the single file component, we will create an
    `a-layout-component` component with the `class` attribute defined as `header-bread`.
    Also, add an `a-breadcrumb` component as a child element with the `class` attribute
    as `bread-menu`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'As a child of the `a-breadcrumb` component, create two `a-breadcrumb-item`
    components and add to each the directions for the user''s location. In our case,
    the first one will be `user` and the second `Registration Form`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Creating the drawer menu
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the layout design, we will have a drawer menu component as a navigation
    menu for the user. Here we will create the `Drawer` component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/components` folder, create a file named `Drawer.vue` and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` section of the single file component, we will export a `default` JavaScript
    object with two properties. The `name` property, defined as `Drawer`, and the `data` property,
    as a `singleton` function returning a JavaScript object. In the `data` property,
    create the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `drawer` property defined as `false`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `menu` property, which we will define as an array of the menu items that
    will be used. The menu array will have three JavaScript objects with the `name` and
    `icon` properties. This array will have:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A JavaScript object with the properties `name` defined as `Home` and `icon` defined
    as `home`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A JavaScript object with the properties `name` defined as `Ant Design Vue` and `icon` defined
    as `ant-design`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A JavaScript object with the properties `name` defined as `Contact` and `icon` defined
    as `mail`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` section of the single file component, create an `a-layout-sider`
    component, with the `v-model` directive bound to the `drawer` variable and the
    `collapsible` attribute defined as `true`. As a child, create a `a-menu` component
    with the `default-selected-keys` variable attribute defined as `[''1'']`, the
    `theme` attribute defined as `dark`, and the `mode` attribute as `inline`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, inside the `a-menu` component, create an `a-menu-item` component,
    with the `v-for` directive iterating over the `menu` variable, and create the `item`
    and `index` temporary variables. Then, define the `key` variable attribute as
    `index`. Create a child `AIcon` component with the `type` variable attribute as
    `item.icon` with a sibling `span` HTML element and the content as `item.name`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Creating the layout component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will create the `layout` component. This component will join together
    the `top-bar` component and the `Drawer` menu component to make a wrapper for
    the user registration page:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/components` folder, create a new file named `Layout.vue` and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` section of the single file component, import the `top-bar` component
    and the `drawer-menu` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will export a `default` JavaScript object, with a `name` property,
    defined as `layout`*.* Then define the `components` property with the imported
    components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` section of the single file component, create an `a-layout`
    component with the `style` attribute defined as `min-height: 100vh`. Then, add
    the `Drawer` component as a child. As a sibling of the `drawer` component, create
    an `a-layout` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'To the `a-layout` component, add the `top-bar` component and a sibling `a-layout-content`
    component with the `style` attribute defined as `margin: 0 16px`. As a child of
    that component, create a `div` HTML element with the `style` attribute defined
    as `padding: 24px; background: #fff; min-height: auto;`, and add a `slot` placeholder.
    Finally, create an `a-layout-footer` component with the `style` attribute defined
    as `text-align:center;` with the footer text of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Creating the user registration form with Ant-Design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we will create the user registration page and form that will be placed inside
    the layout that was created in the preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we will create the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src` folder, open the `App.vue` file and clear its contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `layout` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will export a `default` JavaScript object, with the `name` property defined
    as `App`, define the `components` property with the imported component, and finally
    define the `data` property as a singleton function returning a JavaScript object.
    In the `data` property, create the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `labelCol` property defined as a JavaScript object, with the `span` property and
    the value `4`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `wrapperCol` property defined as a JavaScript object, with the `span` property and
    the value `14`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `form` property defined as a JavaScript object, with the `name`, `username`,
    `password`, `email`, `phone`, `cellphone`, `address`, `zipcode`, and `country`
    properties all defined as empty strings:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It''s time to create the `<template>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src` folder, open the `App.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<template>` section, create a `layout` component element and add an `a-form-model` component as
    a child with the `model` variable attribute bound to `form`, the `label-col` variable
    attribute bound to `labelCol`, and the `wrapper-col` variable attribute bound
    to `wrapperCol`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, as a sibling of the `layout` component, create an `h1` HTML element with
    the page title `User Registration`, and a `p` HTML element with the `Main user
    registration form` page subtitle. Then, create an `a-card` element with the `title`
    attribute defined as `Personal Information`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `a-card` component, create an `a-form-model-item` component as a child
    element with the `label` attribute defined as `Name`, and add a child `a-input`
    component with the `v-model` directive bound to the `form.name` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, as a sibling, create an `a-form-model-item` component with the `label` attribute defined
    as `Email` and add a child `a-input` component with the `v-model` directive bound
    to the `form.email` variable and the `type` attribute defined as `email`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an element an `a-form-model-item` component with the `label` attribute defined
    as `Phone`, and add a child `a-input` component with the `v-model` directive bound
    to the `form.phone` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `a-form-model-item` component with the `label` attribute defined
    as `Cellphone`, and add a child `a-input` component with the `v-model` directive
    bound to the `form.cellphone` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'As a sibling of the `a-card` component, create an `a-card` component with the
    `title` attribute defined as `Address` and the `style` attribute as `margin-top:
    16px;`. Then, add a child `a-form-model-item` component with the `label` attribute defined
    as `Address`, and add a child `a-input` component with the `v-model` directive
    bound to the `form.address` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, as a sibling of the `a-card` component, create an `a-form-model-item` component
    with the `label` attribute defined as `Zipcode`, and add a child `a-input` component
    with the `v-model` directive bound to the `form.zipcode` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `a-form-model-item` component with the `label` attribute defined
    as `Country`, and add a child `a-input` component with the `v-model` directive
    bound to the `form.country` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'As a sibling of the `a-card` component, create an `a-card` component with the `title` attribute
    defined as `User Information` and the `style` attribute as `margin-top: 16px;`.
    Then, add a child `a-form-model-item` component with the `label` attribute defined
    as `username`, and add a child `a-input` component with the `v-model` directive
    bound to the `form.username` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `a-form-model-item` component with the `label` attribute defined
    as `Password`, and add a child `a-input-password` component with the `v-model` directive
    bound to the `form.password` variable, the `visibility-toggle` attribute defined
    as `true`, and the `type` attribute defined as `password`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, as a sibling of the `a-card` component, create `a-form-model-item` with
    the `wrapper-col` variable attribute defined as a JavaScript object, `{span: 14,
    offset: 4}`. Then, add a child `a-button` with `type` defined as `primary` with
    the text `Create` and another `a-button` with the `style` attribute defined as
    `margin-left: 10px;` and the text `Cancel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to create a user registration page with Ant-Design
    and Vue-CLI. To create this page, we first needed to create a project using Vue-CLI
    and add the Ant-Design of Vue plugin to it, so that the framework was available
    to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we created the `top-bar` component, which holds the navigation breadcrumbs.
    For user navigation, we created a custom `Drawer` component that has an inline
    toggle button at the bottom. Finally, we created the `layout` component to hold
    together both the components and we added a `<slot>` component to place the page
    content.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we created the user registration form page, with three cards that hold
    the input forms that are bound to the variables on the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of the final project up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b9e35ec5-200d-4c1a-9ae4-feed1cb1bb07.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Ant-Design and Vue at [https://vue.ant.design/](https://vue.ant.design/).
  prefs: []
  type: TYPE_NORMAL
