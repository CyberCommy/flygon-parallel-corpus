- en: Handling Files, Directories, and Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The system administrator performs tasks such as handling various files, directories,
    and data. In this chapter, we will learn about the `os` module. The `os` module
    provides the functionality to interact with the operating system. Python programmers
    can easily use this `os` module for performing file and directory operations.
    The `os` module provides tools for programmers that deal with files, paths, directories,
    and data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `os` module to work with directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying, moving, renaming, and deleting data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with paths, directories, and files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pattern matching files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Metadata: data about data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compressing and restoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a `tarfile` module to create TAR archives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a `tarfile` module to examine the contents of TAR files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the os module to work with directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A directory or folder is a collection of files and sub-directories. The `os`
    module provides various functions that allow us to interact with the operating
    system. In this section, we will learn about some functions that can be used while
    working with directories.
  prefs: []
  type: TYPE_NORMAL
- en: Get the working directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start working with directories, first, we will get the name of our current
    working directory. The `os` module has a `getcwd()` function, using which we can
    get the current working directory. Start the `python3` console and enter the following
    commands to get the directory name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Changing the directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the `os` module, we can change the current working directory. For that,
    the `os` module has the `chdir()` function, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Listing files and directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Listing the directory contents is easy in Python. We are going to use the `os`
    module that has a function named `listdir()`, which will return the names of files
    and directories from your working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Renaming a directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `os` module in Python has a `rename()` function that helps in changing
    the name of the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Copying, moving, renaming, and deleting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be learning about the four basic operations that system administrators
    perform on data, which are copy, move, rename, and delete. Python has a built-in
    module called `shutil`, which can perform these tasks. Using the `shutil` module,
    we can perform high-level operations on the data as well. To use the `shutil`
    module in your program, just write the `import shutil` import statement. The `shutil`
    module offers a few functions that support file copy and remove operations. Let's
    learn about these operations one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Copying the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how we can copy files using the `shutil` module.
    For that, first, we will create a `hello.py` file and write some text in it.
  prefs: []
  type: TYPE_NORMAL
- en: '`hello.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will write the code for copying into the `shutil_copy_example.py` script.
    Write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Check the presence of the `welcome.py` script and you will find the contents
    of `hello.py` are copied successfully in `welcome.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Moving the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will see how we can move the data. We will use `shutil.move()` for
    this purpose. `shutil.move(source, destination)` will move the file from source
    to destination. Now, we will create a `shutil_move_example.py` script and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this script, our file to move is `sample.txt`, which is in the `/home/student`
    directory. `/home/student` is our source folder and `/home/student/Desktop` is
    our destination folder. So, after running the script, `sample.txt` will be moved
    from `/home/student` to the `/home/student/Desktop` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we learned how we can use `shutil.move()` to move
    files from source to destination. Using `shutil.move()`, files can be renamed.
    Create a `shutil_rename_example.py` script and write the following content in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: Now, check that your filename will be renamed `hello_renamed.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will learn how to delete files and folders using the `os` module in Python.
    The `remove()` method of the `os` module will delete a file. If you try to remove
    a directory using this method, it will give you an `OSError`. To remove directories,
    use `rmdir()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a `os_remove_file_directory.py` script and write the following
    content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Working with paths
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are going to learn about `os.path()`. It is used for path manipulations.
    In this section, we will look at some of the functions that the `os` module offers
    for pathnames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the `python3` console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`os.path.absname(path)`: Returns the absolute version of your pathname.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`os.path.dirname(path)`: Returns the directory name of your path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`os.path.basename(path)`: Returns the base name of your path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`os.path.exists(path)`: Returns `True` if path refers to the existing path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`os.path.getsize(path)`: Returns the size of the entered path in bytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`os.path.isfile(path)`: Checks whether the entered path is an existing file
    or not. Returns `True` if it is a file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`os.path.isdir(path)`: Checks whether the entered path is an existing directory
    or not. Returns `True` if it is a directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Comparing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we are going to learn about how to compare data in Python. We will use
    a `pandas` module for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas is an open source data analysis library that provides data structures
    and data analysis tools that are easy to use. It makes importing and analyzing
    data easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting with the example, make sure you have `pandas` installed on
    your system. You can install pandas as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We will study an example of comparing data using pandas. Initially, we will
    create two `csv` files: `student1.csv` and `student2.csv`. We will compare the
    data of these two `csv` files and in output it should return the comparison. Create
    two `csv` files as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `student1.csv` file content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `student2.csv` file content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will create a `compare_data.py` script and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we are comparing the data between the two `csv` files:
    `student1.csv` and `student2.csv`. We first converted our dataframes (`df1`, `df2`)
    into sets (`s1`, `s2`). Then, we used the `symmetric_difference()` set. So, it
    will check the symmetric difference between `s1` and `s2` and then we will print
    the result.'
  prefs: []
  type: TYPE_NORMAL
- en: Merging data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to learn about how to merge data in Python. For that, we are going
    to use Python's pandas library. To merge the data, we are going to use two `csv`
    files that already created in the previous section, `student1.csv` and `student2.csv`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a `merge_data.py` script and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Pattern matching files and directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about pattern matching for files and directories.
    Python has the `glob` module, which is used to find the names of files and directories
    that match specific patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will look at an example. First, create a `pattern_match.py` script and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, we used Python's `glob` module for pattern matching.
    `glob` (pathname) will return the list of names that matches with the pathname.
    In out script, we have passed three pathnames in three different `glob()` functions.
    In the first `glob()`, we passed the pathname as `*.txt;` this will return all
    the filenames with `.txt` extensions. In the second `glob()`, we passed `[0-9].txt`;
    this will return filenames that start with a digit. In the third `glob()`, we
    passed `**/*.txt`, which will return filenames as well as directory names. It
    will also return the filenames from those directories. In the fourth `glob()`,
    we passed `**/`, which will return directory names only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metadata: data about data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going learn about the `pyPdf` module, which helps in
    extracting the metadata from a `pdf` file. But first, what is metadata? Metadata
    is data about data. Metadata is structured information that describes primary
    data. Metadata is a summary of that data. It contains the basic information regarding
    your actual data. It helps in finding a particular instance of your data.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have the `pdf` file present in your directory from which you want
    to extract the information.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to install the `pyPdf` module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will write a `metadata_example.py` script and we will see how we get
    the metadata information from it. We are going to write this script in Python
    2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, we used the `pyPdf` module of Python 2\. First, we
    created a `file_name` variable that stores the path of our `pdf`. Using `PdfFileReader()`,
    data gets read. The `pdf_data` variable will hold the information about your `pdf`.
    Lastly, we wrote a for loop to get the metadata information.
  prefs: []
  type: TYPE_NORMAL
- en: Compressing and restoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about the `make_archive()` function
    of the `shutil` module, which will compress an entire directory. For that, we
    are going to write a `compress_a_directory.py` script and write the following
    content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, in `shutil.make_archive()` function, we passed the
    first argument as a name to our compressed file. `zip` will be our compression
    technique. And the, `work/` will be the name of the directory that we want to
    compress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to restore the data from the compressed file, we are going to use the `unpack_archive()`
    function from the `shutil` module. Create an `unzip_a_directory.py` script and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now, check your directory. You will get all the contents after unzipping the
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Using the tarfile module to create TAR archives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will help you to learn about how we can create tar archives using
    Python's `tarfile` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `tarfile` module is used to read and write tar archives using `gzip`, `bz2`
    compression techniques. Make sure the necessary files and directories are present.
    Now, create a `tarfile_example.py` script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Now, check your present working directory; you will see `work.tar.gz` has been
    created.
  prefs: []
  type: TYPE_NORMAL
- en: Using a tarfile module to examine the contents of TAR files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about how we can examine the contents of a created
    tar archive without actually extracting that tar file. We will do it using Python's
    `tarfile` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `examine_tar_file_content.py` script and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: In previous example, we used the `tarfile` module to examine the contents of
    the created tar file. We used the `getnames()` function to read the data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Python scripts for handling files and directories.
    We also learned how to use the `os` module to work with directories. We learned
    how to copy, move, rename, and delete files and directories. We also learned about
    the pandas module in Python, which is used in comparing and merging data. We learned
    about creating tar files and reading the contents of tar files using the `tarfile`
    module. We also did pattern matching while searching files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about `tar` archives and ZIP creations.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How to deal with different path regardless of different OS (Windows, Llinux)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are different arguments available for `print()` in python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the use of `dir()` keyword in python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is dataframe, series in `pandas` ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is list comprehension?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we do set comprehension and dictionary comprehension? If yes how?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to print first/last `N` rows using pandas dataframe?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program using list comprehension for printing the odd numbers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the type of `sys.argv`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) set
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b) list
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c) tuple
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d) string
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`pathlib` documentation: [https://docs.python.org/3/library/pathlib.html](https://docs.python.org/3/library/pathlib.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas` documentation: ](https://pandas.pydata.org/pandas-docs/stable/)[https://pandas.pydata.org/pandas-docs/stable/](https://pandas.pydata.org/pandas-docs/stable/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`os` module documentation: [https://docs.python.org/3/library/os.html](https://docs.python.org/3/library/os.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
