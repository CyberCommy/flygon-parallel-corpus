- en: Chapter 9. Tooling for an ECSS Approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter we will look at some of the free and open-source tooling
    that's available to facilitate writing sane and maintainable style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: When authoring the CSS for an enduring project, the technology employed to produce
    the CSS should be largely immaterial. We should always be aware that a better
    or more efficient tool may become available to achieve our aims and when possible,
    and if preferable, it should be embraced.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it shouldn't matter whether Sass, PostCSS, LESS, Stylus, Myth or
    any other CSS processor is employed to author the style sheets. The authored style
    sheets should be as easy to migrate to another meta-language as possible, if and
    when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the CSS processor employed should best serve the needs of the project
    as a whole and not merely the preferences of any individual author. That said,
    there are some necessary capabilities for the CSS processor so we will cover that
    briefly next.
  prefs: []
  type: TYPE_NORMAL
- en: CSS requisites for CSS processors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I consider a CSS processor for style sheet authoring essential. This allows
    a differentiation between *authoring* style sheets (the style sheets that the
    author writes in their CSS processor of choice) and the *resultant* CSS (the compiled
    and minified CSS that gets served to the user).
  prefs: []
  type: TYPE_NORMAL
- en: 'Despite stating that a CSS processor is essential, the requisite features needed
    are fairly trivial:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variables**: To mitigate human errors with colour picking and specifying
    constants like grid measures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partials**: To facilitate one-to-one parity of authoring style sheets with
    a feature branch, template or logic file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Colour manipulations**: To allow consistent manipulation of the aforementioned
    variables e.g. being able to adjust or easily adjust the alpha of a colour'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All other abilities are considered non-essential and should be appraised particular
    to the needs of the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building CSS from authoring style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A build system of some sort is required to compile the authoring style sheets
    into plain CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many tools available to perform this task e.g Grunt, Gulp, and Brocolli
    to name just a few. However, just as there is no universally *right* CSS processor,
    or CSS methodology, so there is no universally *right* build tool.
  prefs: []
  type: TYPE_NORMAL
- en: Besides merely compiling authoring style sheets into CSS, good tooling can provide
    further benefits.
  prefs: []
  type: TYPE_NORMAL
- en: '**Linting**: To enable code conformity and prevent non-working code reaching
    deployment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aggressive minification**: Rebasing z-indexes, converting length values to
    smaller length values e.g. (while *1pt* is equivalent to *16px* it is one less
    character), merging alike selectors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autoprefixer**: To enable fast and accurate vendor prefixing and prevent
    vendor prefixes being present in the authoring style sheets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For considerations of what is deemed essential, syntax-wise, in style sheet
    authoring, refer to [Chapter 8](ch08.html "Chapter 8. The Ten Commandments of
    Sane Style Sheets"), *The Ten Commandments of Sane Style Sheets*.
  prefs: []
  type: TYPE_NORMAL
- en: Save to compile, the journey of an ECSS style sheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In terms of tooling, at the time of writing, I currently write ECSS with the
    help of Gulp and PostCSS plus its many and varied plugins. It's a process that
    has worked well so I'll document it briefly here.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the very curious, a little more on my *journey from Sass to PostCSS can
    be found here* ([https://benfrain.com/breaking-up-with-sass-postcss/](https://benfrain.com/breaking-up-with-sass-postcss/)).
  prefs: []
  type: TYPE_NORMAL
- en: The style sheet authors write into a partial CSS file (with a `*.css` file extension),
    using a syntax that is very similar to Sass.
  prefs: []
  type: TYPE_NORMAL
- en: On saving an authoring style sheet, the Gulp watch task notices the file change
    and first runs the linting task. Then, providing all is well, it compiles the
    partial authoring style sheets to a CSS file, then auto-prefixes that CSS file
    and finally BrowserSync injects the changed CSS directly into the webpage I'm
    working on. Typically, a source map file is also created as some authors find
    working with source maps in the developer tools easier for debugging. All this
    happens before I can *Alt* + *Tab* into my browser window or even move my gaze
    from text editor to browser window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example `gulpfile.js` that demonstrate how PostCSS might be setup
    in a Gulp based build tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With Gulp the build choices are fairly limitless, this is merely an illustration.
    However, note how the the first thing the `styles` task does, is run the `lint-styles` task.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned in previous chapters, the linting of style sheets is a very important
    step on a project where multiple style sheets authors are involved. Let's look
    a little more at that next.
  prefs: []
  type: TYPE_NORMAL
- en: Stylelint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Stylelint is a node based linting tool for the static analysis of style sheets.
    In layman's terms it will analyse your style sheets for the things you specifically
    care about and warn you of any problems.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you use Sass you should check out *scss-lint* ([https://github.com/brigade/scss-lint](https://github.com/brigade/scss-lint))
    which provides similar functionality for Sass files.
  prefs: []
  type: TYPE_NORMAL
- en: The linting job fails the build if any authoring errors are found. Typically
    it's most beneficial to have linting running in two places. In the text editor
    (e.g. Sublime) and in the build tool (e.g. Gulp). This way, if an author has the
    requisite text editor then the *editor based linting* ([https://github.com/kungfusheep/SublimeLinter-contrib-stylelint](https://github.com/kungfusheep/SublimeLinter-contrib-stylelint))
    indicates problems before an author even clicks *save*.
  prefs: []
  type: TYPE_NORMAL
- en: Even if a user doesn't have in-editor linting available, the linting job runs
    via Gulp on save. The build step prevents compiled code making its way to production
    (as continuous integration software would also fail the build).
  prefs: []
  type: TYPE_NORMAL
- en: This is a massive time saver and has proved invaluable when it comes to peer-reviewing
    code and performing quality assurance tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example `.stylelintrc` configuration for Stylelint (this is for
    v5 of Stylelint so future/previous versions may vary slightly):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is just an example, you can set whichever rules you care about from the
    *ever expanding list* ([http://stylelint.io/user-guide/rules/](http://stylelint.io/user-guide/rules/)).
    If using these sort of tools for the first time, you might also find it useful
    to download/clone *ecss-postcss-shell* ([https://github.com/benfrain/ecss-postcss-shell](https://github.com/benfrain/ecss-postcss-shell)).
    It's a basic Gulp setup to run the authored style sheets through PostCSS and lints
    the styles with Stylelint.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I've even contributed a little code to the Stylelint project, helping to add
    a rule called `selector-max-specificity` for controlling the maximum level of
    selector specificity any selector can have. If you are involved with controlling
    a CSS codebase, it's a great project to get involved in.
  prefs: []
  type: TYPE_NORMAL
- en: 'If that wasn''t enough, Stylelint is extensible. It''s easy to add additional
    functionality. For current builds ECSS projects in my workplace we have additional
    Stylelint rules to:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure only overrides and media queries can be nested (prevents nests that don't
    use a parent (`&`) selector)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that key selectors match ECSS naming conventions (Stylelint now has a
    `selector-class-pattern` rule to help with this)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent key selectors from being compound (e.g. `.ip-Selector.ip-Selector2 {}`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure key selectors are singular (e.g. `.ip-Thing not .a-Parent .ip-Thing {}`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These offer bespoke quality assurance that would be time consuming and error
    prone to perform *by hand*.
  prefs: []
  type: TYPE_NORMAL
- en: In case I'm not making it clear I want you to know that I love Stylelint and
    think linting is an indispensable piece of tooling for large CSS projects with
    multiple authors. I simply cannot recommend it highly enough.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's a little more about Stylelint in *this blog post* ([https://benfrain.com/floss-your-style-sheets-with-stylelint/](https://benfrain.com/floss-your-style-sheets-with-stylelint/))
    or via the official *Stylelint* ([http://stylelint.io/](http://stylelint.io/))
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Optimisation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When CSS is heading for production, it takes an extra step through *cssnano* ([http://cssnano.co/](http://cssnano.co/)).
    It's a fantastic and modular CSS minifier by the extraordinarily talented Ben
    Briggs. Highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the more obvious minification step that cssnano provides, there are
    a number of micro-optimisations you can perform on your CSS just by incorporating
    plugins from the PostCSS eco-system. For example, by consistently ordering your
    CSS declarations, Gzip can compress the style sheet more effectively. That's not
    a job I want to do manually but the *postcss-sorting* ([https://github.com/hudochenkov/postcss-sorting](https://github.com/hudochenkov/postcss-sorting))
    plugin can do it for free. Here's comparison of Gzip file sizes using the various
    declaration sorting configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'To exemplify, I took a large test CSS file, and unsorted once Gzipped it was
    37.59 kB. Here are the file sizes of that same file when Gzipped after using the
    other declaration sorting configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'postcss-sorting: 37.54'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CSSComb: 37.46'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Yandex: 37.48'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Zen: 37.41'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So at best we gain a saving of just under 1% of the original size. A tiny economy
    but one you can effectively get for free.
  prefs: []
  type: TYPE_NORMAL
- en: There are other such economies such as grouping alike media queries but I'll
    leave these micro-optimisations for you to explore should they pique your interest.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we've covered tooling to facilitate constant code quality and
    an improved style sheet authoring experience. However, you should be aware that
    out of everything we have covered, the specific tools listed here are likely to
    be the most short-lived. Tooling technology moves at a blistering pace. In just
    three years I went from vanilla CSS, to Sass (with *scss-lint* ([https://github.com/brigade/scss-lint](https://github.com/brigade/scss-lint))),
    to PostCSS and Stylelint while also moving from GUI build tools like CodeKit to
    JavaScript build tools Grunt, then Gulp and now NPM scripts.
  prefs: []
  type: TYPE_NORMAL
- en: I have no idea what the best choice will be in 6 months time so the take away
    is to think about how tooling and approaches can improve the style sheet authoring
    experience across your teams, not necessarily what the current tools are.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *Be monogamous in your personal relationships and a philandering whore
    in your choice of tools and techniques* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*The Way Of Pragmatic Coding ([https://benfrain.com/be-better-front-end-developer-way-of-pragmatic-coding/](https://benfrain.com/be-better-front-end-developer-way-of-pragmatic-coding/))*
    |'
  prefs: []
  type: TYPE_TB
- en: The closing curly brace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now my friends we have reached the end of this little book.
  prefs: []
  type: TYPE_NORMAL
- en: While I'd hope that some of you might be able to take ECSS *off the peg* and
    start implementing it wholesale, I'll be just as happy if it merely provokes your
    own journey of discovery.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the outset I was trying to find an approach to scaling CSS that dealt with
    the following problems:'
  prefs: []
  type: TYPE_NORMAL
- en: To allow the easy maintenance of a large CSS codebase over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To allow portions of CSS code to be removed from the codebase without effecting
    the remaining styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be possible to rapidly iterate on any new designs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the properties and values applied to one visual element should not
    unintentionally effect others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any solution should require minimal tooling and workflow changes to implement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where possible, W3C standards such as ARIA should be used to communicate state
    change within the user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECSS answers all of those problems:'
  prefs: []
  type: TYPE_NORMAL
- en: Compartmentalizing CSS into modules allows easy removal of deprecated features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The unique naming convention avoids global naming collisions, reduces specificity
    and prevents unwanted changes to unrelated elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As all new modules are *greenfield* it's simple to build out new designs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Despite some tooling to accommodate globbing imports and linting, we are still
    writing CSS in CSS files, making on-boarding developers a far easier process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also embrace ARIA as a means to control and communicate state change,
    not just for assistive technology but in a wider sense too
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The considerations of scaling CSS are a somewhat niche pursuit. In time, we
    will have things like *CSS Scoping* ([http://www.w3.org/TR/css-scoping-1/#scope-atrule](http://www.w3.org/TR/css-scoping-1/#scope-atrule))
    but until then we must use the tools and techniques at our disposal to bend existing
    technology to our will.
  prefs: []
  type: TYPE_NORMAL
- en: I've mentioned it numerous times but there are many ways to skin this cat. Other
    methods may be preferable. What follows is a list of people and resources, in
    no particular order that may help in your own odyssey.
  prefs: []
  type: TYPE_NORMAL
- en: Until next time dear reader, I wish you the most fruitful of adventures.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *Absorb what is useful, reject what is useless, add what is specifically
    your own.* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Bruce Lee* |'
  prefs: []
  type: TYPE_TB
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some folks that often talk or write about CSS architecture/scaling:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thierry Koblentz: [http://cssmojo.com/](http://cssmojo.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicolas Gallagher: [http://nicolasgallagher.com/](http://nicolasgallagher.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kaelig Deloumeau-Prigent: [http://kaelig.fr/](http://kaelig.fr/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicole Sullivan:[http://www.stubbornella.org/content/](http://www.stubbornella.org/content/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Harry Roberts: [http://csswizardry.com/](http://csswizardry.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jonathan Snook: [https://snook.ca/](https://snook.ca/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Micah Godbolt: [http://www.godbolt.me/](http://www.godbolt.me/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a discussion about using inline-styles via JavaScript: *Shop Talk show
    #180* ([http://shoptalkshow.com/episodes/180-panel-on-inline-styles/](http://shoptalkshow.com/episodes/180-panel-on-inline-styles/))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interesting approaches/projects around CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Radium for React: [https://github.com/FormidableLabs/radium](https://github.com/FormidableLabs/radium)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'React Native for Web: [https://github.com/necolas/react-native-web](https://github.com/necolas/react-native-web)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS Modules: [https://github.com/css-modules](https://github.com/css-modules)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Atomic CSS: [http://acss.io/](http://acss.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
