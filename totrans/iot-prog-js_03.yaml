- en: Chapter 3. Connecting Sensors - Measure the Real Things
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The objectives of this book are to build a Home Security System, control domestic
    appliances by electronically controlled systems with sensors, and monitor them
    from a dashboard. First, we need to consider that our sensors are connected to
    an end device that can read the signals and transmit them to the network.
  prefs: []
  type: TYPE_NORMAL
- en: For the end devices, we will use Arduino boards to acquire the readings from
    the sensors. We can see that the Raspberry Pi doesn't have analog inputs. For
    this reason, we use an Arduino board to read that signals.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter, we talked about how to connect devices to the Raspberry
    Pi; in this section, we will see how to interface sensors with Arduino boards
    to see how to read real signals from different applications for real measurements.
    We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a flow sensor to calculate the volume of water
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring the concentration of gas with a sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring the level of alcohol with a sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting fire with a sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring the humidity for plants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring the level of water in a recipient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring temperature, humidity and light and display data in an LCD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting motion with a PIR sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting if the door is open with a reed switch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting who can get in the house with a fingerprint sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's important to consider the fact that we need to communicate our system to
    the real world. Since we are working on building a home security system, we need
    to learn how to connect and interact with some necessary sensors to use them in
    our system.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover the sensors that you will need to read the
    data you use in the domotics and security system.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring flow sensor to calculate the volume of water
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to take automatic measurements from the water that we're using in the
    home. For this project, we will use a sensor to perform this reading and make
    the reading of measurement automatic.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this project, we need the following materials:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Flow Water Sensor and Arduino UNO board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring flow sensor to calculate the volume of water](graphics/image_03_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hardware connections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we have the connections for out flow sensor. We can see that it has three
    pins -- the red pin is connected to **+VCC 5** volts, the black one is connected
    to **GND,** and the yellow pin is connected to pin number **2** of the Arduino
    board as seen in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware connections](graphics/image_03_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Reading the sensor signal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An interrupt is used for the pulses generated by the passage of water to be
    accounted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The interruption is of type `RISING` counts the pulses that pass from a low
    state to a high:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Reading and counting pulses with Arduino
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this part of the code, we explain that it counts the signals from the sensor
    using an interrupt, executes, and we have configured it as `RISING`, so it counts
    the pulses from digital signal zero to digital signal one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the Arduino Serial Monitor, and blow air through the water flow sensor
    using your mouth. The number of pulses per second will be printed on the Arduino
    Serial Monitor for each loop, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading and counting pulses with Arduino](graphics/B05170_03_03-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Calculating water flow rate based on the pulses counted
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this part, we measure the pulses and convert them to the flow of water using
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new Arduino IDE, and copy the following sketch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify and upload the sketch on the Arduino board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code will calculate the pulses that are reading from the sensor;
    we divide the number of pulses counted in one second, and we have pulses per liter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Open the Arduino Serial Monitor, and blow air through the water flow sensor
    using your mouth. The number of pulses per second and the water flow rate in milliliters
    per second will be printed on the Arduino Serial Monitor for each loop, as shown
    in the following screenshot:![Calculating water flow rate based on the pulses
    counted](graphics/B05170_03_04-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Calculating flow and volume of water:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can now either copy the code inside a file called `Flow_sensor_measure_volume.ino`,
    or just get the complete code from the folder for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this part, we calculate the flow and volume from the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We set up the interrupt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the interrupt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we display the flow rate of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We calculate the volume of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the volume in milliliters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The function to count the pulses is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The result can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Calculating flow and volume of water:](graphics/B05170_03_05-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Displaying the parameters measured on an LCD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can add an LCD screen to your newly built water meter to display readings
    rather than displaying them on the Arduino serial monitor. You can then disconnect
    your water meter from the computer after uploading the sketch onto your Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define the LCD library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we define the variables that we will use in the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the LCD pins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the interrupt for sensing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we display the message on LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We now define the interrupt in the main loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the value on the LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we display the value of the flow rate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We now display the value of the volume:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we define the function for counting the pulses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Connections with the water flow are shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying the parameters measured on an LCD](graphics/image_03_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following picture shows the measurements on an LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying the parameters measured on an LCD](graphics/image_03_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see some information on the LCD screen, such as pulses per second, water
    flow rate, and the total volume of water from the beginning of the time.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring the concentration of gas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's important to have in our system a sensor that detects gas so we can apply
    it in our home in order to detect a gas leak. Now we´re going to describe how
    to connect to an Arduino board and read the concentration of gas.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will use a gas sensor and Methane CH4\. In this case, we
    will use an MQ-4 sensor that can detect concentrations from 200 to 10000 ppm.
  prefs: []
  type: TYPE_NORMAL
- en: 'This sensor has an analog resistance in its output and can connect to an ADC;
    it needs a coil energize of 5 volts. The image for the sensor can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the concentration of gas](graphics/B05170_03_08-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can find information for the MQ-4 sensor at [https://www.sparkfun.com/products/9404](https://www.sparkfun.com/products/9404).
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the concentration of gas](graphics/B05170_03_09-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Connections with the sensor and Arduino board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'According to the preceding diagram, we will now see the connections made in
    the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connections with the sensor and Arduino board](graphics/B05170_03_10-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the Arduino IDE, and copy the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We see the following results on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connections with the sensor and Arduino board](graphics/B05170_03_11-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Measuring the level of alcohol with a sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will build a very cool project: Your very own **Alcohol**
    **Breath Analyser**. To do that, we are going to use a simple Arduino Uno board
    along with an ethanol gas sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the level of alcohol with a sensor](graphics/B05170_03_12-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following diagram shows the connection of the sensor with the Arduino:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the level of alcohol with a sensor](graphics/B05170_03_13-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are now going to write the code for the project. Here, we are simply going
    to go over the most important parts of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now either copy the code inside a file called `Sensor_alcohol.ino`,
    or just get the complete code from the folder for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'When it doesn''t detect alcohol, we can see the number of values that the Arduino
    reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the level of alcohol with a sensor](graphics/B05170_03_14-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If it detects alcohol, we see values from the analog read from Arduino as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the level of alcohol with a sensor](graphics/B05170_03_15-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Detecting fire with a sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If there's a fire in our home, it's vital to detect it; so in the next section,
    we will create a project that detects fire with a sensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following image, we see of the fire sensor module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting fire with a sensor](graphics/B05170_03_16-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now either copy the code inside a file called `Sensor_fire.ino`, or
    just get the complete code from the folder for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the variables for our program at the beginning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the output signals and the serial communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we display the value of the digital signal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we compare: If the value detects a high logic state, it turns off the
    output; if it reads the opposite, it turns on the digital signal; this means that
    it has detected fire:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'When the Arduino board detects fire, it will read `*1*` in the digital input,
    which means no fire detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting fire with a sensor](graphics/B05170_03_17-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If it detects fire, the digital input reads `*0*` logic from the digital input:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting fire with a sensor](graphics/B05170_03_18-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Measuring the humidity for plants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Measuring the humidity for plants](graphics/B05170_03_19-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this section, we will see the testing of humidity inside a plant and the
    soil using a sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the humidity for plants](graphics/B05170_03_20-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'I will now go through the main parts of this first piece of code. Then we set
    up the serial communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the main loop, we will read the analog signal from the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We compare the value of the sensor and display the result on the serial interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the screenshot shows the results of the readings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the humidity for plants](graphics/B05170_03_21-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows that the plant doesn''t require water;  because
    it has enough moisture in the soil already:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the humidity for plants](graphics/B05170_03_22-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Measuring the level of water in a recipient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Somtimes, we need to measure the level of water in a recipient, or if you want
    to see the level of water in a tank, it is a requirement to measure the levels
    of water that it has; so in this section, we will explain how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sensor is Normally Open. When the water is over the limit, the contact
    opens, and it sends a signal to the Arduino board. We use pin number `2`, which
    is a digital input:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the level of water in a recipient](graphics/B05170_03_23-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We declare the variables and `const` in the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We also define the states of the digital signals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We configure the signals of the program, inputs, and outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We read the state of the digital input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We make the comparisons for the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If the sensor detects a **LOW** level, the recipient is empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the result when the recipient is empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the level of water in a recipient](graphics/B05170_03_24-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The water is over the limit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Measuring the level of water in a recipient](graphics/B05170_03_25-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Measuring temperature, humidity, and light and displaying data on an LCD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, I will teach you how to monitor temperature, humidity, and
    light detection on an LCD screen.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware and software requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, you will use an Arduino UNO board; but you can also use an
    Arduino MEGA, which also works perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: For temperature reading,  we require a DHT11 sensor, a resistor of 4.7k, a photoresistor
    (light sensor), and a 10k resistor.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also requires a 16 x 2 LCD screen, where you performed the tests; I used
    an I2C communication module for the screen interfaced with Arduino card. I recommend
    using this communication since only two pins of Arduino are required for sending
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](graphics/B05170_03_26-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, it requires a breadboard and male-male and female-male cables for connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the list of components for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino UNO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temperature and humidity sensor DHT11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LCD Screen 16 x 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Module I2C for LCD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We connect the different components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](graphics/B05170_03_27-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can see the image of the temperature and humidityDHT11 sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](graphics/B05170_03_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then connect the pin number **1** of the **DHT11 sensor (VCC)** sensor to the
    red line on the breadboard and pin **4** (GND) to the blue line. Also, connect
    pin number **2** of the sensor to pin number **7** of the Arduino board. To end
    the DHT11 sensor, connect the resistance of 4.7k Ohms between pin number **1**
    and **2** of the sensor.
  prefs: []
  type: TYPE_NORMAL
- en: Place in series with the 10k Ohm resistance in the breadboard. Then connect
    the other end of the photoresistor to red on the breadboard and the other end
    of the resistance to the blue line (ground). Finally, connect the common pin between
    the photoresistor and resistance to the Arduino analog pin **A0**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s connect the LCD screen. Since we are using an LCD screen with an
    I2C interface, there are only two cables needed to connect to the signal and two
    for energy. Connect the pin of the I2C module called **VDC** to the red line on
    the breadboard and **GND** pin to the blue line on the breadboard. Then connect
    the **SDA** pin module to Arduino pin **A4,** and **A5 SCL** pin to pin the Arduino:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](graphics/B05170_03_29-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is an image of the project, fully assembled, so you can have an idea as
    to what the whole project will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](graphics/B05170_03_30-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Testing sensors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the hardware project is fully assembled, we will test the different
    sensors. To do this, we will write a simple sketch in Arduino. We're just going
    to read the sensor data and print these data on the serial port.
  prefs: []
  type: TYPE_NORMAL
- en: You can now either copy the code inside a file called `Testing_sensors_Temp_Hum.ino`,
    or just get the complete code from the folder for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we define the libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the type of sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we configure the serial communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We read the sensor values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the values on the serial interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Download the code onto the Arduino board, and open the serial monitor to display
    the data sent. It is important to check the transmission speed serial port, which
    must be to 9600\. Here is what you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing sensors](graphics/B05170_03_31-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Displaying data on the LCD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now the next step is to integrate our information to display on the LCD screen.
    The portion of sensor readings will be the same, only detailed with regard to
    communication and to display data on the LCD. The following is the complete code
    for this part, together with an explained.
  prefs: []
  type: TYPE_NORMAL
- en: You can now either copy the code inside a file called `LCD_sensors_temp_hum.ino`,
    or just get the complete code from the folder for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We include the libraries for the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the LCD address for the LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We start the LCD screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the beginning of the `dht` sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We read the sensor and save the values in the variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the values on the LCD screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to download the example on the Arduino board; wait a little
    bit, and you will get display readings on the LCD. Here is an image of the project
    in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying data on the LCD](graphics/B05170_03_32-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Detecting motion with a PIR sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will build a project with a common home automation sensor: a motion sensor
    (PIR). Have you ever noticed those little white plastic modules that are in the
    top corners in some rooms of the houses, the modules that change color to red
    when someone walks in front of them? That''s exactly what we will do in this project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The motion sensor must have three pins: two for the power supply and one for
    the signal. You should also use a 5V voltage level to be compatible with the Arduino
    card, which also operates at 5V. The following image shows a simple motion sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting motion with a PIR sensor](graphics/B05170_03_33-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For practical purposes, we will use the signal input 8 for connecting the motion
    sensor, the signal voltage of 5 volts and ground **GND.**
  prefs: []
  type: TYPE_NORMAL
- en: PIR sensor interfaced with Arduino
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PIR sensors detect body heat (infrared energy). Passive infrared sensors are
    the most widely used motion detectors in home security systems. Once the sensor
    warms up, it can detect heat and movement in the surrounding areas, creating a
    protective grid. If a moving object blocks too many grid zones and the infrared
    energy levels change rapidly, the sensors are tripped.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we will test the communication between the Arduino and the motion
    sensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the variable and the serial communication, define digital pin 8,
    input signal, read the state of the signal, and display the status signal of the
    sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Detecting if the door is open with a reed switch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An example has been added as an option to implement a magnetic sensor in order
    to detect when a door or window is open or closed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting if the door is open with a reed switch](graphics/B05170_03_34-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The sensor outputs a `0` when it detects the magnetic field and when the field
    is far away the output would be a `1`; so you can determine when the door is open
    or closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The program in the Arduino is performed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the input signal of the sensor, and configure the serial communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We read the state of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'It compares the digital input and displays the status of the door in the serial
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Detecting who can get in the house with a fingerprint sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create a project that can help us make a complete
    security system. In this project, the fingerprint access will be addressed by
    reading the fingerprint using a fingerprint sensor as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting who can get in the house with a fingerprint sensor](graphics/B05170_03_35-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this part, we will see how to connect and configure our hardware in order
    to activate our relay.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hardware configuration:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual, we will use an Arduino Uno board as the brain of the project. The
    most important part of this project is the fingerprint sensor.
  prefs: []
  type: TYPE_NORMAL
- en: We are first going to see how to assemble the different parts of this project.
    Let's start by connecting the power supply. Connect the **5V** pin from the Arduino
    board to the red power rail and the **GND** from Arduino to the blue power rail
    on the breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's connect the fingerprint sensor. First, connect the power by connecting
    the cables to their respective color on the breadboard. Then, connect the white
    wire from the sensor to Arduino pin 3 and the green wire to pin number 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we are going to connect the relay module. Connect the **VCC** pin
    to the red power rail, **GND** pin to the blue power rail, and the **EN** pin
    to Arduino pin 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware configuration:](graphics/B05170_03_36-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the fingerprint:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following example is presented to register the ID's fingerprints directly
    from the library `Adafruit_Fingerprint`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we define the libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the ID of the reading and the function of the enroll process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the serial communication with the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We declare the instance of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We set up and display if the sensor is being configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the sensor confirmation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'We identify the sensor if it detects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the enrolling ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The function for enrolling is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'If the sensor successfully reads the image you see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: If it cannot find the fingerprint features, you see the following:Serial.println("Could
    not find fingerprint features");
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the fingerprint sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Image for the fingerprint sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'If it is correct, you see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the result of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Testing the sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the serial monitor, then type the ID number saved in the previous step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the sensor](graphics/B05170_03_37-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot indicates that you should put the same finger on the
    sensor again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the sensor](graphics/B05170_03_38-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows that the sensor responses indicates that the
    digital fingerprint has been successfully saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the sensor](graphics/B05170_03_39-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to interact with different sensors connected to
    the Arduino board, such as flow current for energy consumption, detecting a risk
    in the home, implementing a gas sensor, implementing flow water sensor to measure
    the water volume, making a security system, and controlling access with a fingerprint
    sensor. All of these sensors can be integrate a complete system for monitoring
    and controlling everything you work on any project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to integrate everything for monitoring
    and controlling a complete system, and reading the sensors and actuators in a
    dashboard using your Arduino board and the Raspberry Pi Zero as a central interface.
  prefs: []
  type: TYPE_NORMAL
