- en: Chapter 4. Advanced Nmap Scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be completely able to run Nmap scans against a variety of hosts.
    That's great! Knowing how to run a basic scan will get you through many situations,
    but there are a few notable exceptions—and different scan types—that are vital
    to become a power user.
  prefs: []
  type: TYPE_NORMAL
- en: We will now specifically cover different methods for host detection (so that
    you know what to scan), how to run scans against devices that are trying to hide
    themselves, scanning UDP, different verbosity options, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Running a ping sweep
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a ping agnostic scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning UDP services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running different TCP flags on scans—such as the Xmas Tree scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating system detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increasing verbosity in Nmap output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing packet tracing in scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Host detection methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to scan a host effectively, it's important to first understand how
    to detect hosts that are "alive" or online. Because many system administrators
    try to hide their systems from the Internet, certain hosts will appear to be offline
    until further probed. Fortunately for us, Nmap has several ways to detect which
    hosts are online.
  prefs: []
  type: TYPE_NORMAL
- en: The most straightforward way to detect hosts is to run a ping sweep. A ping—or
    an ICMP echo request that machines are designed to respond to—is a simple "are
    you there?" question and answer conversation.
  prefs: []
  type: TYPE_NORMAL
- en: Pings were named after sonar—the underwater "pings" that submarines send to
    detect other ships and submersibles in the area—and work in a similar way for
    computers. While you can test the ping command very easily by simply typing `ping
    google.com`, using Nmap for ping sweeps can allow significant efficiency gains
    across larger target network scopes.
  prefs: []
  type: TYPE_NORMAL
- en: It's easy to run a `ping only` sweep with Nmap using the `-sn` flag. This makes
    sure to run only a ping sweep, rather than a full port scan—which is excellent
    just to find out which hosts are online.
  prefs: []
  type: TYPE_NORMAL
- en: '![Host detection methods](img/4065OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, which was run as a `-sn`, (ping sweep) scan, you
    can clearly see that out of the 256 IP addresses scanned, 18 were "up," or responding
    to a ping.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, however, you need to take this scanning methodology a step further.
    In order to "hide" from scans, system administrators will often make their systems
    ignore ping requests. This is often an effective way to hide from network scans!
  prefs: []
  type: TYPE_NORMAL
- en: Running a ping agnostic scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a system is hiding from ping sweeps, it can be difficult to know what's
    online. Fortunately, Nmap provides a ping agnostic method for scanning that can
    be very beneficial to figure out some of these issues.
  prefs: []
  type: TYPE_NORMAL
- en: When Nmap runs a "normal" scan, it will first run a ping sweep and then follow
    up with actual port scans (of whatever port ranges specified). If hosts are not
    responding to a ping, they won't be fully scanned—which means that even if they
    have services online, those services will not be detected. When running a port
    scan, missing services or hosts is a very serious problem!
  prefs: []
  type: TYPE_NORMAL
- en: By running a scan with the `-Pn` flag, Nmap will completely skip running the
    initial ping sweep, and will scan all hosts in the specified target range. Although
    this generally takes longer to run—since scanning hosts that are really offline
    is a big waste of time—it is extremely useful to find hosts that may otherwise
    have been missed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a ping agnostic scan](img/4065OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can easily see in the preceding screenshot that `dshaw.net`—my personal
    web page, which for the purposes of this scan was configured to not respond to
    a ping—was still scanned in this ping agnostic scan. When scanning large ranges—such
    as a Class B network—being able to detect hosts that are trying to appear offline
    can be invaluable to the security professional.
  prefs: []
  type: TYPE_NORMAL
- en: Although it's not a specific type of scan, it can also be useful to use the
    Nmap's `-sL` flag—or the ability to conduct a simple list scan—to either ping
    or scan the target ranges. This is useful to get reverse DNS lookups, and to understand
    how many hosts are online in a specified range.
  prefs: []
  type: TYPE_NORMAL
- en: By scanning—or rather by not scanning—this way, excellent results can be achieved.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a ping agnostic scan](img/4065OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you can see that the range Nmap "list scanned"
    points to the `1e100.net` domains, which are owned by Google. This is called **zero
    packet reconnaissance**, since no probes were actually sent to any of the domains
    in question, but full DNS PTR record lookups were achieved.
  prefs: []
  type: TYPE_NORMAL
- en: The last great Nmap feature that assists in host detection and discovery is
    the TCP SYN ping scan. Instead of sending an ICMP ping request (which many administrators
    disable responses to), the TCP SYN scan can treat hosts online if they respond
    to a SYN request at a given port. For example, if you're scanning a block of IP
    addresses that usually run SSL web servers, invoking the `-PS 443` flag would
    treat hosts online if there is a response to attempt a connection on port 443\.
    This is extraordinarily useful, and is one of the most valuable features in the
    Nmap host detection arsenal.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning UDP services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we've mentioned UDP services, but haven't talked about how to actually
    scan them. UDP services are connectionless, which makes scanning them more difficult
    than traditional port scans—sometimes connections need to be protocol based in
    order to receive any response, and even when most services receive an actual response,
    it can take a large amount of time—in other words, scanning UDP services is generally
    slower and less reliable than their TCP counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: That said, though, it's very important to be able to scan services that only
    listen on UDP. Many VPNs, for example, have their listening ports as UDP only.
    NTP and DNS, similarly, often listen exclusively on UDP ports. For this reason,
    it's important to understand how to scan them.
  prefs: []
  type: TYPE_NORMAL
- en: The caveat here is that it's generally best to do the first "round" of scanning
    as TCP only and the second sweep as UDP. This is important because having an entire
    scan forced to wait for UDP responses can make what should have been a five-minute
    scan, take more than five hours!
  prefs: []
  type: TYPE_NORMAL
- en: The flag to scan UDP services is to simply invoke `-sU`. Make sure you do so
    with caution, and when you have plenty of time to spare while waiting for scans!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As an additional note, UDP scanning does require root privileges in order to
    run.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scanning UDP services](img/4065OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This scan of `tick.ucla.edu`, a public NTP server, shows that port `123`—**Network
    Time Protocol** (**NTP**)—is accepting connections from anywhere on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Special TCP scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already covered the two basic scan types that Nmap suggests—TCP connect
    scans (`-sT`) and the SYN stealth scan (`-sS`). These "full" and "half" connection
    scans will get you through almost any situation, and are absolutely the "go-to"
    scan types for almost every security professional, system administrator, network
    engineer, and hobbyist.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, despite the flexibility that these types of scans can produce, there
    are occasional reasons to try different flags on packets. For these scans, we
    will introduce three new scan types: **FIN**, **Xmas Tree**, and **Null** scans.'
  prefs: []
  type: TYPE_NORMAL
- en: The driving concept behind running these scans is that a closed port will attempt
    to reset the connection by issuing a RST (reset) packet, whereas an open port
    will just drop the connection entirely. This is useful because many **Intrusion
    Detection Systems** (**IDS**) are on the lookout for SYN scans—and the stealthy
    penetration tester never wants to get caught!
  prefs: []
  type: TYPE_NORMAL
- en: '![Special TCP scans](img/4065OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first of these three new options, the FIN scan, starts by sending a FIN
    packet to each port.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding example scan, when running a FIN scan (`-sF`)
    against my own web server, there was no response to the FIN request—this makes
    sense because there is an active service running on port 80 of `dshaw.net`.
  prefs: []
  type: TYPE_NORMAL
- en: The next scan type is called the Xmas Tree scan—so-called because it is as if
    a packet is lit up like a Christmas tree! The Xmas Tree scan (`-sX`) works by
    flagging FIN, URG, and PUSH flags on a packet header.
  prefs: []
  type: TYPE_NORMAL
- en: The last of these three scan types is the null scan, which sets no flags on
    the packet header sent to the target port. This scan can be launched by using
    the `-sN` option. Make sure that if you're launching a null scan, you capitalize
    `N`—otherwise, you'll be accidentally running a ping swing (which we covered in
    *Host detection methods* section).
  prefs: []
  type: TYPE_NORMAL
- en: Although these scan types can often be very useful, it's worth noting that FIN,
    Xmas, and NULL scans are known to not work against Microsoft Windows hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Operating system detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it's very useful to be able to scan ports—and to use different packet
    headers in order to produce the best, most accurate results—there are a few things
    that simple port scanning cannot always achieve reliably. One of the most important
    of these elements is operating system detection.
  prefs: []
  type: TYPE_NORMAL
- en: When attempting to identify and attack a target, one of the most useful pieces
    of information is what operating system that machine is running. Because many
    pieces of software can run on multiple operating systems, this was traditionally
    a "hard" thing to solve. However, the developers at Nmap—with the help of the
    information security community at large—have been able to compile a database of
    the most common (and even some very rare) operating system fingerprints, which
    can consistently help to identify what operating system a target is running. It's
    an easy flag to remember—you simply have to invoke a scan with the `-O` flag.
  prefs: []
  type: TYPE_NORMAL
- en: '![Operating system detection](img/4065OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, this scan of a Cisco security appliance easily identified several
    parts of the key information. First, we can see the MAC address—and who creates
    that device. Remember, though, that as we learned in [Chapter 2](ch02.html "Chapter 2. Network
    Fundamentals"), *Network Fundamentals*, we can only see MAC addresses if we''re
    scanning on a local area network—not over the Internet. Secondly, we can see the
    OS CPE—and even the OS details: a Cisco SA520 firewall, running the Linux 2.6
    kernel. This is absolutely one of the most valuable pieces of information we can
    pull out of a port scan.'
  prefs: []
  type: TYPE_NORMAL
- en: Although it would be wonderful if operating system detection was always as straightforward
    and concise as it is in this example, which is not the case. The good news, though,
    is that once you start an operating system scan, Nmap will attempt to gauge how
    confident it is in the results it gives. In the following example, you can see
    that although Nmap isn't completely sure what operating system my machine is running
    (which makes sense when you consider how frequently patches change the way the
    underlying OS works), it can still give us a pretty good idea!
  prefs: []
  type: TYPE_NORMAL
- en: '![Operating system detection](img/4065OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Increasing verbosity in scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have probably noticed throughout the book, more information is almost
    always better when running scans. Fortunately, Nmap developers allow us to quickly
    and easily retrieve information about a scan while it's running, by starting the
    scan with increased verbosity.
  prefs: []
  type: TYPE_NORMAL
- en: Verbosity lets timing, parallelism, and internal debugging information to display
    straight to the console while scans run. This can be great to figure out when
    we need to try to optimize scans in one of the several ways (which we'll learn
    about in the next chapter). When running a scan in increased verbosity, you can
    also hit *Enter* to see how far the scan has progressed, and how far it has to
    go before completing its current target file. There are several different levels
    of verbosity, but I usually use the third-level.
  prefs: []
  type: TYPE_NORMAL
- en: The first level of verbosity gives a very basic information about a scan's progress,
    and can be invoked by using the `-v` flag. The second level of verbosity gives
    more information, including some network and packet information, and can be invoked
    by using `-vv` as a flag. Lastly, triple verbosity—which gives out the most information
    of a scan—can be invoked with the `-vvv` flag. If you want to make Nmap less verbose
    than normal, you can also use the `--reduce-verbosity` flag.
  prefs: []
  type: TYPE_NORMAL
- en: '![Increasing verbosity in scans](img/4065OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see in the preceding screenshot that on this single-port scan, there
    is significantly more timing and packet information shown. This can be extremely
    useful, especially during long scans—such as those that include over 1,000 hosts—to
    understand better what Nmap is doing at the time. More importantly, this information
    can be used to determine if timing, parallelism, or other performance adjustments
    need to be made. For example, if a scan is progressing normally, but only a few
    hosts are being completed at a time, we know to increase parallelism to make the
    overall scan go faster. If, however, we're receiving network timeout errors, we
    know that we're scanning too fast—in that case, we'd want to use a slower `timing`
    flag.
  prefs: []
  type: TYPE_NORMAL
- en: Packet tracing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to increasing the verbosity of a scan, it is invaluable to understand
    the network hops that occur between hosts—and to see the actual network traffic
    passing through. Although it's possible to use system tools such as **traceroute**
    and **tcpdump** to find out where on a network target servers land, it can be
    a painful (and time-consuming) process to do this to many hosts simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using outside tools, Nmap allows packet tracing for each scan—which
    shows the exact information we need. Instead of looking at this as a security
    feature (although it certainly does have security-related uses), it's best to
    think of this as a tool for system administrators and network engineers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Packet tracing](img/4065OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This packet tracing example shows tcpdump-style output from Nmap to target machines.
    Although it doesn't provide excessive value in this simple one-port scan, the
    information can be great to understand network congestion, packet drop, offline
    hosts, and so on, on larger scans.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how to choose a target, run a default scan, check
    service versions, log scans (and what the different log types mean), specify special
    scan ranges, and learn the reasoning for Nmap results.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about how to ensure your scans are running
    at peak performance. Nmap has several features that can help scans run quickly,
    and deliver the results as accurately as possible. Each of these timing, parallelism,
    and performance improvements will be categorized and explained in the next chapter.
  prefs: []
  type: TYPE_NORMAL
