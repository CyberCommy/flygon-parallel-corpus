- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1: Go Serverless
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the advantages of using the serverless approach?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NoOps: no management or configuration overhead and faster time to market.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Autoscaling and HA: enhanced scalability and elasticity based on load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost-optimization: pay only for the compute time your consume.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Polygot: leverage the power of nanoservices architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What makes Lambda a time-saving approach?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: You pay per execution and you don''t pay for idle resources, while
    with EC2 instances, you pay also for unused resources.'
  prefs: []
  type: TYPE_NORMAL
- en: How does serverless architecture enable microservices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Microservices is the approach of breaking down a monolithic application
    into a collection of smaller and modular services. Serverless computing is a key
    enabled for microservices-based applications. It makes infrastructure even-driven
    and completely controlled by the needs of each service that makes up an application.
    Moreover, serverless means functions, and a microservice is a set of functions.'
  prefs: []
  type: TYPE_NORMAL
- en: What is the maximum time limit for an AWS Lambda function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: By default, each Lambda function has a 3 seconds timeout; the maximum
    duration you can set, is 5 minutes.'
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following are supported event-sources for AWS Lambda?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Kinesis Data Streams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon RDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CodeCommit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CloudFormation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Answer**: Amazon Kinesis Data Streams, AWS CodeCommit and CloudFormation are
    supported event-sources for AWS Lambda. The list of all supported event sources
    can be found on the following url: [https://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html](https://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Explain what a goroutine is in Go. How can you stop goroutines?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: A goroutine is lightweight thread; it uses a resource called **channel**
    to communicate. Channels, by design, prevent race conditions from happening when
    accessing shared memory using goroutines. To stop a goroutine, we pass signal
    channel. That signal channel is used to push a value. The goroutine polls that
    channel regularly. As soon as it detects a signal, it quits.'
  prefs: []
  type: TYPE_NORMAL
- en: What's Lambda@Edge in AWS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Lambda@Edge allows you to run Lambda functions at the edge locations
    of CloudFront in order to customize the content returned to your end users at
    the lowest latency.'
  prefs: []
  type: TYPE_NORMAL
- en: What's the difference between Function as a Service and Platform as a Service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Both PaaS and FaaS allow you to easily deploy an application and
    scale it without worrying about the underlying infrastructure. However, FaaS saves
    you money because you pay only for the compute time used to handle the incoming
    requests.'
  prefs: []
  type: TYPE_NORMAL
- en: What's an AWS Lambda cold start?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Cold start happens when a new event is triggered; AWS Lambda creates
    and initialize a new instance or container to handle the request, which takes
    longer (Startup latency) compared to warm starts, where the container is reused
    from a previous event.'
  prefs: []
  type: TYPE_NORMAL
- en: Can AWS Lambda functions be stateless or stateful?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Lambda functions must be stateless to leverage the power of autoscaling
    due to increasing rate of incoming events.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2: Getting Started with AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which format is not supported by the AWS CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Answer**: The support values are JSON, table, and text. The default output
    is JSON.'
  prefs: []
  type: TYPE_NORMAL
- en: Is it recommended to use the AWS root account for everyday interaction with
    AWS? If yes, why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: AWS root account has the ultimate authority to create and delete
    AWS resources, change the billing, and even close the AWS account. Hence, it is
    strongly recommended to create an IAM user for everyday tasks with only the needed
    permissions.'
  prefs: []
  type: TYPE_NORMAL
- en: What environment variables do you need to set to use the AWS CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: The following are the required environment variables to configure
    the AWS CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AWS_ACCESS_KEY_ID`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS_SECRET_ACCESS_KEY`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS_DEFAULT_REGION`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you use the AWS CLI with named profiles?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: `AWS_PROFILE` can be used to set the CLI profile to use. The profile
    is stored in the credentials file. By default, AWS CLI uses the `default` profile.'
  prefs: []
  type: TYPE_NORMAL
- en: Explain the GOPATH environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: The `GOPATH` environment variable specifies the location of your
    Go workspace. Default value is `$HOME/go`.'
  prefs: []
  type: TYPE_NORMAL
- en: Which command-line command compiles a program in Go?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`go build`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`go run`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`go fmt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`go doc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Answer**: The as-mentioned commands do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build`: It is a compile package and dependencies and generate a single binary.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run`: It is a compile and run Go program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fmt`: It is a reformat package resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc`: It is a show documentation for a package or function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the Go workspace?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: A Go workspace is a directory where you will load and work with
    Go code. The directory must have the following hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src`: It contains Go source files.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin`: It contains executable files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pkg`: It contains package objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 3: Developing a Serverless Function with Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What's the command-line command to create an IAM role for an AWS Lambda function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Create an IAM role with the below command; it allows Lambda function
    to call AWS services under your account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `assume-role-lambda.json` file contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What's the command-line command to create a new S3 bucket in the Virginia region
    (`us-east-1`) and upload a Lambda deployment package to it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: The following command can be used to create an S3 bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To upload the deployment package to the bucket, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What are the Lambda package size limits?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 10 MB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 50 MB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 250 MB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Answer**: AWS Lambda deployment package has a total maximum of 50MB zipped
    and 250MB uncompressed.'
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda Console supports editing Go source code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Answer**: False; Go is a recently added language, and the developers behind
    it haven''t added the capability for an inline editor yet. Hence, you must provide
    an executable binary in a ZIP file format or reference an S3 bucket and object
    key where you have uploaded the deployment package.'
  prefs: []
  type: TYPE_NORMAL
- en: What's the underlying AWS Lambda execution environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Linux Image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Answer**: AWS Lambda execution environment is based on Amazon Linux AMI.'
  prefs: []
  type: TYPE_NORMAL
- en: How are events represented in AWS Lambda?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Events in AWS Lambda are represented in a JSON format.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5: Managing Data Persistence with DynamoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implement an update handler to update an existing movie item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: The handler expects a movie item in a JSON format; the input will
    be encoded to a `Movie` struct. The `PutItem` method is used to insert the movie
    to the table as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Create a new PUT method in API Gateway to trigger the update Lambda function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Expose a `PUT` method on the `/movies` resource and configure the
    target to be the Lambda function defined earlier. The following screenshot illustrates
    the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4defec5-5386-4f7b-bbbd-3a1e12cb4449.png)'
  prefs: []
  type: TYPE_IMG
- en: Implement a single Lambda function to handle all type of events (GET, POST,
    DELETE, PUT).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Update the `findOne` handler to return a proper response code for a valid request
    but an empty data (for example, no movie for the ID requested).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: When handling input of a user (movie ID in our case), validation
    is mandatory. Hence, you need to write a regular expression to ensure the ID given
    in parameter is properly formed. The following are examples of regular expressions
    to validate an ID:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pattern for alphanumeric ID: `[a-zA-Z0-9]+`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pattern for digits only ID: `[0-9]+`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a pagination system on the `findAll` endpoint using a Range header
    and using a Query string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Use the Limit option in the `ScanRequest` method to limit number
    of returned items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The number of items to return can be read from the request headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 7: Implementing a CI/CD Pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implement a CI/CD pipeline for other Lambda functions with CodeBuild and CodePipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: The CI/CD pipeline for `FindAllMovies` Lambda function can be implemented
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The CI/CD pipeline for `InsertMovie` Lambda function can be implemented as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The CI/CD pipeline for `Updatemovie` Lambda function can be implemented as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The CI/CD pipeline for `DeleteMovie` Lambda function can be implemented as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Implement a similar workflow using Jenkins Pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: We can use Jenkins parallel stages feature to run chunks of code
    in parallel as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Implement the same pipeline with CircleCI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: CircleCI workflow option can be used to define a collection of
    build jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Add a new stage to the existing pipeline to publish a new version if the current
    git branch is the master.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Configure the pipeline to send a notification on a Slack channel every time
    a new Lambda function is deployed or updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: You can use the Slack API to post a message to a Slack channel
    at the end of the deployment step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 9: Building the Frontend with S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implement a Lambda function that takes the movie category as input and returns
    a list of movies that corresponds to that category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Implement a Lambda function that takes a movie's title as input and returns
    all movies that have the keyword in their title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Implement a delete button on the web application to delete a movie by calling
    the `DeleteMovie` Lambda function from API Gateway.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Update the MoviesAPI service to include the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Implement an edit button on the web application to allow the user to update
    movie attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Implement a CI/CD workflow with either CircleCI, Jenkins, or CodePipeline to
    automate the generation and deployment of the API Gateway documentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 10: Testing Your Serverless Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a unit test for the `UpdateMovie` Lambda function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Write a unit test for the `DeleteMovie` Lambda function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Modify the `Jenkinsfile` provided in previous chapters to include the execution
    of automated unit tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Note the usage of `go test` command in the **Test** stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Modify the `buildspec.yml` definition file to include the execution of unit
    tests, before pushing the deployment package to S3 using AWS CodeBuild.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Write a SAM template file for each Lambda function implemented in previous chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: The following is a SAM template file for the `FindAllMovies` Lambda
    function; the same resources can be used to create other functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 12: Securing Your Serverless Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrate a user in a user pool with an identity pool to allow users to log
    in with their Facebook account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: In order to integrate Facebook with Amazon Cognito identity pools,
    you must follow the given procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Facebook Application from the Facebook Developers portal ([https://developers.facebook.com/](https://developers.facebook.com/)).
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the App ID and secret.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure Facebook as a provider in Amazon Cognito Console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/864936ac-5f65-4091-a8c1-232c253e4be6.png)'
  prefs: []
  type: TYPE_IMG
- en: Follow the Facebook Guide ([https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.3](https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.3))
    to add the Facebook login button to the web application.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the user is authenticated, a Facebook session token will be returned; this
    token must be added to the Amazon Cognito credentials provider to fetch a JWT
    token.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, add the JWT token to the API Gateway request `Authorization` header.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate a user in a user pool with an identity pool to allow users to log
    in with their Twitter account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Amazon Cognito doesnot support Twitter as an authentication provider
    out of the box. Hence, you will need to use **OpenID Connect** to extend Amazon
    Cognito:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1757cff-eb06-4cd3-92e4-013582ded7e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Integrate a user in a user pool with an identity pool to allow users to log
    in with their Google account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To enable Google Sign in, you will need to create a new project from Google
    Developers Console ([https://console.developers.google.com/](https://console.developers.google.com/))
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable the Google API under APIs and auth, and then create an OAuth 2.0 client
    ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure Google in the Amazon Cognito Console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/17e34035-a524-48f4-8340-7827d5cd4be1.png)'
  prefs: []
  type: TYPE_IMG
- en: Follow the Google documentation for Web ([https://developers.google.com/identity/sign-in/web/sign-in](https://developers.google.com/identity/sign-in/web/sign-in))
    to add the Google sign in button.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the user is authenticated, an authentication token will be generated, which
    can be used to retrieve the JWT token.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a form to allow users to create an account on a web application so
    that they are able to log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: A Go based Lambda function might be created to handle the account
    creation workflow. The function''s entry point is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Implement a forgotten password flow for an unauthenticated user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: A Go based Lambda function might be created to reset user password.
    The function''s entry point is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Chapter 14:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a Terraform template to create the `InsertMovie` Lambda function resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Setup execution role for the Lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create the Lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Expose a `POST` method on `/movies` resources in the REST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Update the CloudFormation template to trigger the defined Lambda function with
    API Gateway in response to incoming HTTP request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Add the following properties to the `Resources` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Write a SAM file to model and defines all the resources needed to build the
    Serverless API we built through this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Configure Terraform to store the generated state file in a remote S3 backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: Create an S3 bucket with the following AWS CLI command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable server side encryption on the bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The encryption mechanism is set to AES-256:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure Terraform to use the bucket defined earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Create a CloudFormation template for the Serverless API we built through this
    book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Create a Terraform template for the Serverless API we built through this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Answer**: In order to avoid duplication of code and keep the template file
    clean and easy to follow and maintain, `Loops`, `conditions`, `maps` and `list`
    can be used to create the IAM roles for the defined Lambda functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Same can be applied to create the required Lambda functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the RESTful API can be created as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
