- en: Booting the System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered the common hardware settings we manage on
    a daily basis. We touched on some commands that can be used to identify the hardware
    within a Linux system. This chapter continues from there and takes a further step,
    this time focusing on the process of booting the system. It looks at the GRUB
    and GRUB2 configuration files, focusing on the timer, default boot entry, and
    passing arguments to the GRUB/GRUB2 boot menu. It also covers the `chkconfig`,
    `pstree`, `ps`, `systemctl`, and `dmeg` commands, and the various start/stop scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The boot process explained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding GRUB and GRUB2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with GRUB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with GRUB2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The boot process explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Linux, during boot up, the looks for the boot sector on the hard disk. Once
    it finds the boot sector, it then searches for a boot loader. The boot loader
    in turn loads the boot manager. In Linux, this will usually be either GRUB or
    GRUB2\. After this stage, the user is presented with a boot menu. Finally, the
    user is given the opportunity to either select an operating system to load or
    edit an existing entry. The options available are usually going to be different
    versions of the Linux kernel. Sometimes, it might may an entirely different Linux
    distribution. However, in mixed environments, you may be come into contact with
    another operating system, such as Microsoft Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the user selects a Linux kernel, depending on the Linux distribution
    release, a single process is started, known as `init`, which stands for *initialization*.
    `init` is often referred to as *System V init* or SysV, because System V was the
    first commercial Unix operating system. Most early Linux distributions were identical
    to the System V operating system. The other daemon used to manage a Linux distribution
    is known as `systemd`, which stands for System Management Daemon. The following
    is a simple flow of the process that we just discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Boot Sector > Boot Loader > Boot Menu  => OS loads*'
  prefs: []
  type: TYPE_NORMAL
- en: In Linux, you may come across the term **daemon**. Rest assured, that's simply
    referring to a process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we go deeper, let''s keep in mind one of the biggest differences between
    `init` and `systemd`: `init` starts scripts one at a time, whereas `systemd` starts
    multiple scripts parallel to each other. That being said, here is the output from
    the `pstree` command on a CentOS 5 system that uses `init`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.gif)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, we can see all of the processes originating from
    `init`; hence, they are considered child processes.
  prefs: []
  type: TYPE_NORMAL
- en: Note: Some output omitted for brevity has been removed throughout the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another command we can leverage to see the actual process number being used
    by `init` is the `ps` command in our CentOS 5 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can see that the first process started is `PID
    1`, and it is indeed the `init` process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some options that we can use with the `ps` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s turn our attention to `systemd`. We will run the `pstree` command
    on our Linux system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, we can see all other processes being spawned by the
    system. These are known as child processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also run the `pstree` command on the CentOS 7 distro, and see similar
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: On almost all newer Linux distributions, `systemd` has replaced `init.`
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s check which process number `systemd` is using on the Linux system
    by using the `ps` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can clearly see that the system is indeed listed
    as the first process started.
  prefs: []
  type: TYPE_NORMAL
- en: '`systemd` emulates `init`. For example, we can start/stop daemon(s) with the
    `service` command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in order for us to see the processes that have been started on the Linux
    distribution, we can run the `chkconfig` command on our CentOS 7 distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding output, we are only shown daemons that use `init`. This is
    useful on systems running native `init`, such as earlier Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the most commonly used options that can be passed with the `chkconfig`
    command for older Linux distributions that use `init`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `--level levels` | Specifies the runlevels an operation should pertain to.
    It is given as a string of numbers from 0 to 6.For example, `--level 35` specifies
    runlevels 3 and 5. |'
  prefs: []
  type: TYPE_TB
- en: '| `--add name` | This option adds a new service for management by `chkconfig`.
    When a new service is added, `chkconfig`.ensures that the service has either a
    start or a kill entry in every runlevel. If any runlevel is missing such an entry,
    `chkconfig` creates the appropriate entry as specified by the default values in
    the `init` script. Note that default entries in LSB-delimited `INIT INFO` sections
    take precedence over the default runlevels in the `initscript`; if any `required-start`
    or `required-stop` entries are present, the start and stop priorities of the script
    will be adjusted to account for these dependencies. |'
  prefs: []
  type: TYPE_TB
- en: '|  `--del name` | The service is removed from `chkconfig` management, and any
    symbolic links in `/etc/rc[0-6].d` which pertain to it are removed.Note that future
    package installs for this service may run `chkconfig --add`, that will re-add
    such links. To disable a service, run `chkconfig name off`. |'
  prefs: []
  type: TYPE_TB
- en: '| `--override name` | If the service name is configured exactly as it would
    be if the `--add` option had been specified with no override file in `/etc/chkconfig.d/name`,
    and if `/etc/chkconfig.d/name` now exists and is specified differently from the
    base `initscript`, this changes the configuration for the service name to follow
    the overrides instead of the base configuration. |'
  prefs: []
  type: TYPE_TB
- en: '| `--list name` | This option lists all of the services that `chkconfig` knows
    about, and whether they are stopped or started in each runlevel. If a name is
    specified, information is only displayed about the service name. |'
  prefs: []
  type: TYPE_TB
- en: 'For us to see the daemons started in newer Linux distributions, we will use
    the `systemctl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, we can see a variety of options that can be passed
    with the `systemctl` command; we will use the `list-unit-files` option with `systemctl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output is omitted for the sake of brevity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, we can see 392 units are listed. We can be more
    specific and look for only the services that are enabled/running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also see the status, the directory from where the daemon is being executed
    along with the **Process ID** (**PID**) for a daemon with the `systemctl` command.
    We will use the `status` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also stop, start, restart, enable, and disable a daemon with the `systemctl`
    command. Let''s say we want to stop the `ssd` service using the `systemctl` command.
    We would simply do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, as soon as we press *Enter* on the CentOS 7 system, we will get an authentication
    prompt because we are attempting to stop the `sshd` service as a standard user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`sshd` is considered to be a system service. Also, a unit in the context of
    `systemd` is a service and vice versa.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll enter the root password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And now the `sshd` service has been stopped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s recheck the status of the `sshd` service to confirm it has indeed
    stopped, using the `systemctl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code, we can conclude that the `sshd` service has been stopped.
  prefs: []
  type: TYPE_NORMAL
- en: DMESG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, when the system is booting, there are a number of messages relating to
    various aspects of our system, ranging from hardware to services, that fly across
    the screen quickly. It would be useful to be able to view those messages while
    troubleshooting. It's always useful to gather as much information as possible
    to aid troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can leverage yet another powerful command, the `dmesg` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the following output is omitted for the sake of brevity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can see various pieces of information, including
    CPU detection, PCI drivers, and Ethernet, to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: GRUB and GRUB2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we'll switch gears and discuss the boot managers whose jobs are to present
    the boot menu, from which the user has the options to select which operating system/Linux
    kernel to load or edit. First, we will focus on GRUB and then move on to GRUB2.
  prefs: []
  type: TYPE_NORMAL
- en: GRUB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GRUB stands for **Grand Unified Bootloader**. GRUB is primarily used for booting
    Linux distributions. However, GRUB can work with other boot loaders. A common
    use-case scenario is for dual booting with a Microsoft operating system, it does
    this by doing a hand-off to the Windows bootloader for Microsoft operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'GRUB uses the `/boot/grub/grub.conf` file. Sometimes you will see `/boot/grub/menu.lst`,
    but this file, is simply a symbolic link to `/boot/grub/grub.conf`. Using the
    CentOS 6.5 distro, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can see `/boot/grub/grub.conf` and also the symbolic
    link `/boot/grub/menu.lst`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can view the actual `/boot/grub/grub.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, the common options would be the following. `default=0` means
    it is the first entry to boot from the menu. `timeout=5` gives the amount of seconds
    (5 in that case) that the menu will be displayed for before the Linux kernel is
    booted or the Windows boot loader gets a hand-off from GRUB. `splashimage=(hd0,0)/grub/splash.xpm.gz`
    is the background image of the boot menu. `root (hd0,0)` refers to the first hard
    disk and the first partition on the first hard disk.
  prefs: []
  type: TYPE_NORMAL
- en: GRUB2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GRUB2 uses a more programmatic approach in the way the menu is presented. At
    first glance, GRUB2 may look intimidating, but rest assured that it''s not as
    complicated as it appears to be. The syntax is similar to a programming language,
    with lots of *if...then* statements. Here is what `/boot/grub/grub.cfg` on a CentOS
    7 system looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the following output is omitted for brevity. Following shows the last
    part of the `/boot/grub/grub.cfg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: So, to interpret the `/boot/grub/grub.cfg` file, we look for lines that start
    with `menuentry`. These lines start the actual menu entry for an operating system,
    such as a Linux distribution or a Windows OS.
  prefs: []
  type: TYPE_NORMAL
- en: Entries are enclosed within curly braces {}.
  prefs: []
  type: TYPE_NORMAL
- en: Working with GRUB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we''re going to interact with GRUB. We will add a custom boot entry. This
    will be presented upon reboot. We will use the `vi` command, which will open `/boot/grub/grub.conf` in
    the visual editor:'
  prefs: []
  type: TYPE_NORMAL
- en: Before you work with GRUB, always make a backup copy of your `/boot/grub/grub.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''re inside `vi`. We will press *I* on the keyboard to enter the insert
    mode, scroll down using the down-arrow key until we reach the last line, and press
    then *Enter* to go to a new line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will start our entry using the following keywords: `title`, `root`,
    `kernel`, and `initrd`. We will insert our own custom values, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will save and exit `vi`. We use `:wq` to save our change(s) and exit
    `vi`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, here is a breakdown of our custom entry:'
  prefs: []
  type: TYPE_NORMAL
- en: The `title` defines our customer boot entry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`root (hd0,0)` tells it to search for the first hard disk and the first partition
    on the first hard disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `kernel /vmlinuz-2.6.32-431.el6.x86 ro` tells GRUB to look for the location
    of the Linux kernel. In this case, it's `vmlinuz-2.6.32-431.el6.x86 ro` (`ro` means
    it loads the kernel as read-only).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inidrd /initramfs-2.6.32-431.el6.x86_64.img` specifies the initial RAM disk
    file to use (this aids the system boot up).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last step is to reboot our CentOS system and be presented with the GRUB
    boot menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding output, we can see our new custom boot entry is displayed
    in GRUB, which is awesome. We can interact in real time, right at the GRUB menu.
    Let''s say we wanted to tag on or remove an option from one of these entries.
    We would simply press the *E* key, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can press the *E* key once again to edit the entry. Let''s say we want
    to specify that the root filesystem resides in `/dev/`; we would do this as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can press the *Enter* key, which will save our changes, and the *Esc*
    key to return to the previous screen; we will see the new option added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.gif)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, we can see how easy it is to work in real-time at
    the GRUB boot menu and also how to add a custom boot entry in GRUB.
  prefs: []
  type: TYPE_NORMAL
- en: In GRUB, the first hard disk and the first partition are identified as `(hd0,
    0)`, whereas in the Linux shell, the first hard disk and first partition are identified
    as `(sda1)`.
  prefs: []
  type: TYPE_NORMAL
- en: Working with GRUB2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We add a custom boot entry in GRUB2 in a slightly different way from GRUB.
    In GRUB2, instead of editing the actual `/boot/grub/grub.cfg`, we work with `/etc/default/grub`
    and `/etc/grub.d`. Let''s do a listing of `/etc/grub.d` to see all of the available
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Before you work with GRUB2, always make a backup copy of your `/boot/grub/grub.cfg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding output, we can see a number of files. Their names start
    with a number, and the numbers are read in sequential order. Let''s say we want
    to add a custom boot entry in GRUB2\. We are going to create a custom entry and
    name it `/etc/grub/40_custom`. We will see the following code in `vi`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, we can see the syntax is a bit similar to programming.
    In GRUB2, it''s an entire programming language. The next step is to save our changes,
    then run `grub-mkconfig` (the name implies we''re talking about legacy GRUB, but
    we''re actually referring to GRUB2). This depends on the Linux distribution. In
    CentOS 7, you will see commands that start with `grub2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the following output is omitted for the sake of brevity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run this command, the `grub-mkconfig` command finds the custom entry.
    This then generates a new boot menu. Upon the the next reboot of the system, we
    will see the new boot menu. We can also change options in `/etc/default/grub`,
    including options such as the default OS, the timer, and so on. Here is the content
    of `/etc/default/grub`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, the timer value is set to `10`. Also, note that
    there is a default value of `0`. Continuing down the configuration file, we see
    the following code :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s reboot our Ubuntu system and check out the GRUB2 boot menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can now see our custom menu option in GRUB2\.
    We can even scroll through the entries and edit them by pressing the E key.
  prefs: []
  type: TYPE_NORMAL
- en: In GRUB2, the first hard disk starts with `0` and the first partition starts
    with `1`, unlike in legacy GRUB.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we took a look at the boot process. We then discussed `init`
    and `systemd.` We used the `pstree` command and saw the first process that is
    loaded. Also, we used the `ps` command to identify the process number. We then
    looked at the boot messages that would normally scroll across the screen using
    the `dmesg` command. The messages displayed offer us hints as to what was loaded
    upon boot up. Furthermore, we can use the messages displayed to assist us whilst
    troubleshooting. Next, we covered GRUB and GRUB2, looking at the structure of
    GRUB, particularly `/boot/grub/grub/conf`. We looked at adding a custom menu entry
    in GRUB. We looked at interacting with GRUB in real time at the boot menu. After
    that, we looked at GRUB2, focusing on the structure of `/boot/grub/grub.cfg`.
    Also, we looked at the other locations that play a role in the GRUB2 configuration:
    the `/etc/default/grub/` and the `/etc/grub.d/` directories. We then added a custom
    menu entry inside `/etc/grub.d/` using the `/etc/grub.d/40_custom` file. After
    that, we updated GRUB2 with `grub-mkconfig` (Ubuntu distribution). Finally, we
    interacted in real time with the GRUB2 boot menu.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on runlevels and boot targets. These are
    critical topics that we need to fully understand as Linux engineers. We will manage
    the system using various methods at the command line. Commands such as `runlevel`,
    `init`, and `systemctl`, to name a few, will be covered. There is a whole lot
    of useful information to be gained in the next chapter. It's essential to understand
    how runlevels work. Adding to this is the concept of boot targets. On most newer
    distributions, you will come into contact with boot targets. This will aid you
    in managing your Linux systems from a command-line environment. Your skill set
    will continue to grow as you work throughout the next chapter. This will further
    take you closer to success in your quest for certification.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where is the boot loader located on the hard disk?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. The boot sector
  prefs: []
  type: TYPE_NORMAL
- en: B. The secondary partition
  prefs: []
  type: TYPE_NORMAL
- en: C. The logical partition
  prefs: []
  type: TYPE_NORMAL
- en: D. None of the above
  prefs: []
  type: TYPE_NORMAL
- en: Which was the first commercial Unix operating system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. systemd
  prefs: []
  type: TYPE_NORMAL
- en: B. upstart
  prefs: []
  type: TYPE_NORMAL
- en: C. System X
  prefs: []
  type: TYPE_NORMAL
- en: D. System V
  prefs: []
  type: TYPE_NORMAL
- en: Which command displays the processes starting from the parent process followed
    by the child processes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `dnf`
  prefs: []
  type: TYPE_NORMAL
- en: B. `systemctl`
  prefs: []
  type: TYPE_NORMAL
- en: C. ` pstree`
  prefs: []
  type: TYPE_NORMAL
- en: D. `ps`
  prefs: []
  type: TYPE_NORMAL
- en: Which is the first process that is started on a CentOS 5 system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `systemd`
  prefs: []
  type: TYPE_NORMAL
- en: B. `init`
  prefs: []
  type: TYPE_NORMAL
- en: C. `kickstart`
  prefs: []
  type: TYPE_NORMAL
- en: D. `upstart`
  prefs: []
  type: TYPE_NORMAL
- en: What has replaced `init` in newer releases of the Linux kernel?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `telinit`
  prefs: []
  type: TYPE_NORMAL
- en: B. `systemctl`
  prefs: []
  type: TYPE_NORMAL
- en: C. `systemb`
  prefs: []
  type: TYPE_NORMAL
- en: D. `systemd`
  prefs: []
  type: TYPE_NORMAL
- en: Which command lists the processes that are running on a CentOS 7 distribution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `systemd list-unit-files`
  prefs: []
  type: TYPE_NORMAL
- en: B. `systemX list-unit-files`
  prefs: []
  type: TYPE_NORMAL
- en: C. `systemctl list-unit-files`
  prefs: []
  type: TYPE_NORMAL
- en: D. `service status unit-files`
  prefs: []
  type: TYPE_NORMAL
- en: Which command lists the hardware drivers that are loaded during system boot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `cat /var/log/messages`
  prefs: []
  type: TYPE_NORMAL
- en: B. `tail –f /var/log/startup`
  prefs: []
  type: TYPE_NORMAL
- en: C. `head /var/messages`
  prefs: []
  type: TYPE_NORMAL
- en: D. `dmesg`
  prefs: []
  type: TYPE_NORMAL
- en: Which directory is the GRUB configuration file located in a CentOS 5 distribution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `/boot/`
  prefs: []
  type: TYPE_NORMAL
- en: B. `/grub/boot/`
  prefs: []
  type: TYPE_NORMAL
- en: C. `/boot/grub/`
  prefs: []
  type: TYPE_NORMAL
- en: D. `/grub/grub-config/`
  prefs: []
  type: TYPE_NORMAL
- en: What starts a custom menu entry when adding an entry in GRUB?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `title`
  prefs: []
  type: TYPE_NORMAL
- en: B. `menu entry`
  prefs: []
  type: TYPE_NORMAL
- en: C. `Operating System`
  prefs: []
  type: TYPE_NORMAL
- en: D. `default =0`
  prefs: []
  type: TYPE_NORMAL
- en: What starts a custom menu entry when adding an entry in GRUB2?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `title`
  prefs: []
  type: TYPE_NORMAL
- en: B. `root = /vmlinuz/`
  prefs: []
  type: TYPE_NORMAL
- en: C. `menuentry`
  prefs: []
  type: TYPE_NORMAL
- en: D. `menu entry`
  prefs: []
  type: TYPE_NORMAL
- en: Which letter key is used to edit an entry in real-time at the GRUB boot menu?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. *C*
  prefs: []
  type: TYPE_NORMAL
- en: B. *E*
  prefs: []
  type: TYPE_NORMAL
- en: C. *B*
  prefs: []
  type: TYPE_NORMAL
- en: D. *A*
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can get more information about the CentOS distributions, such as installing,
    configuration best practices, and so on at [https://www.centos.org.](https://www.centos.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following website gives you a lot of useful tips and best practices from
    users in the Linux community, particularly for the Debian distributions, such
    as Ubuntu: [https://askubuntu.com.](https://askubuntu.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This following link gives you information in general that relates to various
    commands that work on both CentOS and Ubuntu. You can post your questions there
    and other community members will respond: [https://www.linuxquestions.org.](https://www.linuxquestions.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
