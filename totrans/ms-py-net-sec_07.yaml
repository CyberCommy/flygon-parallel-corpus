- en: Interacting with FTP, SSH, and SNMP Servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: his chapter will help you to understand the modules that allow us to interact
    with FTP, SSH, and SNMP servers. In this chapter, we will explore how the computers
    in a network can interact with each other. Some of the tools that allow us to
    connect with FTP, SSH, and SNMP servers can be found in Python, among which we
    can highlight FTPLib, Paramiko, and PySNMP.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning and understanding FTP protocols and how to connect with FTP servers
    with the `ftplib` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning and understanding how to build an anonymous FTP scanner with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning and understanding how to connect with SSH servers with the `Paramiko`
    module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning and understanding how to connect with SSH servers with the `pxssh`
    module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning and understanding SNMP protocol and how to connect with SNMP servers
    with the `PySNMP` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter7` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security).'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, examples are compatible with Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter requires quite a few third-party packages and Python modules,
    such as `ftplib`, `Paramiko`, `pxssh` and `PySNMP`. You can use your operating
    system''s package management tool for installing them. Here''s a quick how-to
    on installing these modules in an Ubuntu Linux operating system with Python 3\.
    We can use the following `pip3` and `easy_install3` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo apt-get install python3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo [pip3|easy_install3] ftplib`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo [pip3|easy_install3] paramiko`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo [pip3|easy_install3] pysnmp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting with FTP servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will review the `ftplib` module of the Python standard library,
    which provides us with the necessary methods to create FTP clients quickly and
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: The File Transfer Protocol (FTP)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FTP is a protocol that’s used to transfer data from one system to another and
    uses Transmission Control Protocol (TCP) port `21`, which allows clients and servers
    connected in the same network to exchange files. The protocol design is defined
    in such a way that it is not necessary for the client and server to run on the
    same platform; any client and any FTP server can use a different operating system
    and use the primitives and commands defined in the protocol to transfer files.
  prefs: []
  type: TYPE_NORMAL
- en: The protocol is focused on offering clients and servers an acceptable speed
    in the transfer of files, but it does not take into account more important concepts
    such as security. The disadvantage of this protocol is that the information travels
    in plain text, including access credentials when a client authenticates on the
    server.
  prefs: []
  type: TYPE_NORMAL
- en: The Python ftplib module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To know more about the `ftplib` module, you can query the official documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.python.org/library/ftplib.html](http://docs.python.org/library/ftplib.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '`ftplib` is a native library in Python that allows for connection with FTP
    servers and for the execution of commands on those servers. It is designed to
    create FTP clients with few lines of code and to perform admin server routines.'
  prefs: []
  type: TYPE_NORMAL
- en: It can be used to create scripts that automate certain tasks or perform dictionary
    attacks against an FTP server. In addition, it supports encrypted connections
    with TLS, using the utilities defined in the `FTP_TLS` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this screen capture, we can see the execution of the `help` command over
    the `ftplib` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d2ef454e-b939-44a7-8452-1ba78b959c30.png)'
  prefs: []
  type: TYPE_IMG
- en: Transferring files with FTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ftplib can be used for transferring files to and from remote machines. The constructor
    method of the FTP class (`method __init __ ()`), receives the `host`, `user`,
    and `key` as parameters, so that passing these parameters during any instance
    to the FTP saves the use of the connect methods (`host`, `port`, `timeout`) and
    a login (`user`, `password`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this screenshot, we can see more information about the `FTP` class and the
    parameters of the `init` method constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e3b5caed-940e-4d0b-8a59-9857396b050b.png)'
  prefs: []
  type: TYPE_IMG
- en: To connect, we can do so in several ways. The first is by using the `connect()`
    method and the other is through the FTP class constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4cecdc59-f643-40d2-8597-d1e69d152ae6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this script, we can see how to connect with an `ftp` server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `FTP()` class takes as its parameters: the remote server, the username,
    and the password of the `ftp` user.'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we connect to an FTP server in order to download a binary file
    from `ftp.be.debian.org server`.
  prefs: []
  type: TYPE_NORMAL
- en: In the following script, we can see how to connect with an **anonymous** FTP
    server and download binary files with no user and password.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename: `ftp_download_file.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using ftplib to brute force FTP user credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main uses that can be given to this library is to check if an FTP
    server is vulnerable to a brute-force attack using a dictionary. For example,
    with this script we can execute an attack using a dictionary of users and passwords
    against an FTP server. We test with all possible user and password combinations
    until we find the right one.
  prefs: []
  type: TYPE_NORMAL
- en: We will know that the combination is a good one if, when connecting, we obtain
    the "`230 Login successful`" string as an answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename:`ftp_brute_force.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Building an anonymous FTP scanner with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the `ftplib` module in order to build a script to determine if a
    server offers anonymous logins.
  prefs: []
  type: TYPE_NORMAL
- en: The function `anonymousLogin()` takes a hostname and returns a Boolean that
    describes the availability of anonymous logins. The function tries to create an
    FTP connection with anonymous credentials. If successful, it returns the value
    "`True`."
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename: `checkFTPanonymousLogin.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this screenshot we can see an example of executing the previous script over
    a server that allows **anonymous login**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8d8e37da-5b27-489a-a1ce-99005c35ff2b.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, the `ftplib` module is used to access FTP servers. In this
    example, a script has been created in which **shodan** is used to extract a list
    of FTP servers that allow anonymous authentication and then use ftplib for the
    contents of the root directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename:`ftp_list_anonymous_shodan.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Connecting with SSH servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will review the Paramiko and `pxssh` modules that provide
    us with the necessary methods to create SSH clients in an easy way.
  prefs: []
  type: TYPE_NORMAL
- en: The Secure Shell (SSH) protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH has become a very popular network protocol for performing secure data communication
    between two computers. Both of the parts in communication use SSH key pairs to
    encrypt their communications. Each key pair has one private and one public key.
    The public key can be published to anyone who may be interested in that. The private
    key is always kept private and secure from everyone except the owner of the key.
  prefs: []
  type: TYPE_NORMAL
- en: Public and private SSH keys can be generated and digitally signed by a certification
    authority (CA). These keys can also be generated with tools from the command line,
    such as `ssh-keygen`.
  prefs: []
  type: TYPE_NORMAL
- en: When the SSH client connects to a server securely, it registers the public key
    of the server in a special file that is stored in a hidden way called a `/.ssh/known_hosts`
    file. If it is on the server side, access must be limited to certain clients that
    have certain IP addresses, then the public keys of the allowed hosts can be stored
    in another special file called `ssh_known_hosts`.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Paramiko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Paramiko is a library written in Python that supports the SSHV1 and SSHV2 protocols,
    allowing the creation of clients and making connections to SSH servers. It depends
    on the **PyCrypto** and **cryptography** libraries for all encryption operations
    and allows the creation of local, remote, and dynamic encrypted tunnels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Among the main advantages of this library, we can highlight that:'
  prefs: []
  type: TYPE_NORMAL
- en: It encapsulates the difficulties involved in performing automated scripts against
    SSH servers in a comfortable and easy-to-understand way for any programmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports the SSH2 protocol through the `PyCrypto` library, which uses it
    to implement all those details of public and private key cryptography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows authentication by public key, authentication by password, and the
    creation of SSH tunnels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows us to write robust SSH clients with the same functionality as other
    SSH clients such as Putty or OpenSSH-Client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports file transfer safely using the SFTP protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may also be interested in using the `pysftp` module, which is based on Paramiko.
    More details regarding this package can be found at PyPI: [https://pypi.python.org/pypi/pysftp.](https://pypi.python.org/pypi/pysftp)
  prefs: []
  type: TYPE_NORMAL
- en: Installing Paramiko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can install Paramiko directly from the pip Python repository with the classic
    command: `pip install paramiko`. You can install it in Python 2.4 and 3.4+, and
    there are some dependencies that must be installed on your system, such as the `PyCrypto`
    and `Cryptography` modules depending on what version you are going to install.
    These libraries provide low-level, C-based encryption algorithms for the SSH protocol.
    In the official documentation, you can see how to install it and the different
    versions available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.paramiko.org](http://www.paramiko.org)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation details for Cryptography can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cryptography.io/en/latest/installation](https://cryptography.io/en/latest/installation)'
  prefs: []
  type: TYPE_NORMAL
- en: Establishing SSH connection with Paramiko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use the `Paramiko` module to create an SSH client and then connect it
    to the SSH server. This module will supply the `SSHClient()` class, which provides
    an interface to initiate server connections in a secure way. These instructions
    will create a new SSHClient instance, and connect to the SSH server by calling
    the `connect()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: By default, the `SSHClient` instance of this client class will refuse to connect
    a host that does not have a key saved in our `known_hosts` file. With the `AutoAddPolicy()`
    class, you can set up a policy for accepting unknown host keys. Now, you need
    to run the `set_missing_host_key_policy()` method along with the following argument
    on the `ssh_client` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this instruction, Paramiko automatically adds the fingerprint of the remote
    server to the host file of the operating system. Now, since we are performing
    an automation, we will inform Paramiko to accept these keys for the first time
    without interrupting the session or prompting the user for it. This will be done
    via `client.set_missing_host_key_policy`, then `AutoAddPolicy()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to restrict accepting connections only to specific hosts, then
    you can use the `load_system_host_keys()` method for adding the system host keys
    and system fingerprints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to connect to an SSH server is through the `Transport()` method
    that provides another type of object to authenticate against the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can query the `transport` submodule help to see the methods that we can
    invoke to connect and get more information about the SSH server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c067aa76-5003-4dab-9d30-69fc7217121e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the method used to authenticate the user and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c00488c6-1363-4ab1-b1f1-32b4d9a8c2a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `open_session` method allows us to open a new session against the server
    in order to execute commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/552a2b7b-c440-4bfb-a87e-84b0287f967f.png)'
  prefs: []
  type: TYPE_IMG
- en: Running commands with Paramiko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we are connected to the remote host with Paramiko, we can then run commands
    on the remote host using this connection. To execute command, we can simply call
    the `connect()` method along with the target `hostname` and the SSH login credentials.
    To run any command on the target host, we need to invoke the `exec_command()`
    method by passing the command as its argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The following code listing shows how to do an SSH login to a target host and
    then run an `ifconfig` command. The next script will make an SSH connection to
    the localhost and then run the `ifconfig` command that allows us to see the configuration
    of the network for the machine to which we are connecting.
  prefs: []
  type: TYPE_NORMAL
- en: With this script we could create an interactive shell **t**hat could automate
    many tasks. We create a function called `ssh_command`, which makes a connection
    to an SSH server and runs a single command.
  prefs: []
  type: TYPE_NORMAL
- en: To execute the command we use the `exec_command()` method of the `ssh_session`
    object that we have obtained from the open session when logging in to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename: `SSH_command.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we perform the same functionality as in the previous script,
    but in this case we use the `Transport` class to establish the connection with
    the SSH server. To be able to execute commands we have to open a session previously on
    the `transport` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename:`SSH_transport.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: SSH connection with brute-force processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we perform an **SSHConnection** class that allows us to initialize
    the `SSHClient` object and implement the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`def ssh_connect (self, ip_address, user, password, code = 0)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`def startSSHBruteForce (self, host)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first method tries to realize the connection to a specific IP address, with
    the user and password passed as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The second is a method that takes two read files as inputs (`users.txt`, `passwords.txt`)
    and through a brute-force process, tries to test all the possible combinations
    of users and passwords that it is reading from the files. We try a combination
    of username and password, and if you can establish a connection, we execute a
    command from the console of the server to which we have connected.
  prefs: []
  type: TYPE_NORMAL
- en: Note that if we have a connection error, we have an exception block where we
    perform a different treatment, depending on whether the connection failed due
    to an authentication error (`paramiko.AuthenticationException`) or a connection
    error with the server (`socket.error`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The files related to users and passwords are simple files in plain text that
    contain common default users and passwords for databases and operating systems.
    Examples of files can be found in the fuzzdb project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/fuzzdb-project/fuzzdb/tree/master/wordlists-user-passwd](https://github.com/fuzzdb-project/fuzzdb/tree/master/wordlists-user-passwd)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename:`SSHConnection_brute_force.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For the brute-force process, we can define one function that iterates over
    users'' and passwords'' files and tries to establish a connection with the `ssh`
    for each combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: SSH connection with pxssh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`pxssh` is a Python module based on Pexpect for establishing SSH connections.
    Its class extends `pexpect.spawn` to specialize setting up SSH connections.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pxssh` is a specialized module that provides specific methods to interact directly with
    SSH sessions such as `login()`, `logout()`, and `prompt()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**pxssh documentation**'
  prefs: []
  type: TYPE_NORMAL
- en: We can find official documentation on the `readthedocs` site for the `Pexpect`
    module at  [http://pexpect.readthedocs.io/en/stable/api/pxssh.html.](https://pexpect.readthedocs.io/en/stable/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we can get more information using the `help` command from a Python terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Running a command on a remote SSH server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This example imports the **getpass** module, which will prompt the host, user,
    and password, establish the connection, and run some commands on a remote server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename: `pxsshConnection.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We can create specific methods to establish the `connection` and `send` commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename: `pxsshCommand.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Connecting with SNMP servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will review the PySNMP module that provides us with the necessary
    methods to connect with SNMP servers in an easy way.
  prefs: []
  type: TYPE_NORMAL
- en: The Simple Network Management Protocol (SNMP)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SMNP is a network protocol that works over the User Datagram Protocol (UDP),
    mainly for the management and network device monitoring of routers, switches,
    servers, and virtual hosts. It allows for the communication of a device's configuration,
    performance data, and the commands that are meant for control devices.
  prefs: []
  type: TYPE_NORMAL
- en: SMNP is based on the definition of communities that group the devices that can
    be monitored, with the aim of simplifying the monitoring of machines in a network
    segment. The operations are straightforward, with the network manager sending
    GET and SET requests toward the device, and the device with the SNMP agent responding
    with the information per request.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding **security**, the SNMP protocol offers many levels of security depending
    on the protocol version number. In SNMPv1 and v2c, the data is protected by a
    pass phrase known as the community string. In SNMPv3, a username and a password
    are required for storing the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main elements of the SNMP protocol are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SNMP manager**: It works like a monitor. It sends queries to one or more
    agents and receives answers. Depending on the characteristics of the community,
    it also allows for the editing of values in the machines that we are monitoring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SNMP agent**: Any type of device that belongs to a community and can be managed
    by an SNMP manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SNMP community**: A text string that represents a grouping of agents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Management information base (MIB)**: Information unit that forms the basis
    of the queries that can be made against SNMP agents. It is like database information
    where each device''s information is stored. The MIB uses a hierarchical namespace
    containing an object identifier (OID).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object identifier (OID)**: Represents the information that can be read and
    fed back to the requester. The user needs to know the OID in order to query the
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PySNMP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python you can use a third-party library called PySNMP for interfacing with
    the **snmp daemon**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install the PySNMP module by using the following `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ pip install pysnmp`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this screenshot we can see the dependencies we need to install for this
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/100106a6-418e-4716-910b-e5d82c447a55.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the installation of PySNMP requires the `pyasn1` package. ASN.1
    is a standard and notation that describes rules and structures for representing,
    encoding, transmitting, and decoding data in telecommunication and computer networking.
  prefs: []
  type: TYPE_NORMAL
- en: pyasn1 is available in the PyPI repository: [https://pypi.org/project/pyasn1/](https://pypi.org/project/pyasn1/).  In
    the GitHub repository [https://github.com/etingof/pyasn1](https://github.com/etingof/pyasn1),
    we can see how to use this module to obtain record information when we are interacting
    with SNMP servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this module, we can find official documentation at the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://pysnmp.sourceforge.net/quick-start.html](http://pysnmp.sourceforge.net/quick-start.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main module for performing SNMP queries is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pysnmp.entity.rfc3413.oneliner.cmdgen`'
  prefs: []
  type: TYPE_NORMAL
- en: 'And here is the `CommandGenerator` class that allows you to query the SNMP
    servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/00c60189-fa6a-4a87-8098-2cc76611c06a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this code, we can see the basic use of the `CommandGenerator` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can perform SNMP using the `getCmd()` method. The result is unpacked into
    various variables. The output of this command consists of a four-value tuple.
    Out of those, three are related to the errors returned by the command generator,
    and the fourth one (`varBinds`) is related to the actual variables that bind the
    returned data and contains the query result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that **cmdgen** takes the following **parameters**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CommunityData():** Sets the community string as public.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UdpTransportTarget():** This is the host target, where the SNMP agent is
    running. This is specified in the pairing of the hostname and the UDP port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MibVariable:** This is a tuple of values that includes the MIB version number
    and the MIB target string (which in this case is `sysDescr`; this refers to the
    description of the system).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In these examples, we see some scripts where the objective is to **obtain the
    data from a remote SNMP agent**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename:`snmp_example1.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try to execute the previous script, we see the public data of the SNMP
    agent registered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2dbc8623-071f-4a68-8948-6d7f9f10b426.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find the following code in the filename:`snmp_example2.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try to execute the previous script, we see the public data of the SNMP
    agent registered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1c0ec4d8-545b-4dc6-aef6-d0b856801159.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find the following code in the filename:`snmp_example3.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try to execute the previous script, we see the public data of the SNMP
    agent registered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bcc8af0d-d614-4382-9daa-89e59139e964.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, we try to find communities for a specific SNMP server. For
    this task, we first get the file `wordlist-common-snmp-community-strings.txt`
    from fuzzdb that contains a list with communities available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/fuzzdb-project/fuzzdb/blob/master/wordlists-misc/wordlist-common-snmp-community-strings.txt](https://github.com/fuzzdb-project/fuzzdb/blob/master/wordlists-misc/wordlist-common-snmp-community-strings.txt)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the filename:` snmp_brute_force.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To obtain servers and SNMP agents, we can search in Shodan with the SNMP protocol
    and port `161`, and we obtain the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f5f7f1fe-e4fd-4ced-8d3f-5fd6802d5712.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An interesting tool to check for connection with SNMP servers and obtain the
    value of the SNMP variable is the `snmp-get` that is available for both Windows
    and Unix environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://snmpsoft.com/shell-tools/snmp-get/](https://snmpsoft.com/shell-tools/snmp-get/)'
  prefs: []
  type: TYPE_NORMAL
- en: With **SnmpGet** for Windows, we can obtain information about SNMP servers.
  prefs: []
  type: TYPE_NORMAL
- en: In the following screenshot, we can see command-line parameters for this tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3bbda7d1-2b15-454b-854c-ab28b72cb10c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, a similar tool is available for the Ubuntu operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://manpages.ubuntu.com/manpages/bionic/man1/snmpget.1.html](http://manpages.ubuntu.com/manpages/bionic/man1/snmpget.1.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the objectives of this chapter has been to describe the modules that
    allow us to connect with FTP, SSH, and SNMP servers. In this chapter, we have
    come across several network protocols and Python libraries, which are used for
    interacting with remote systems. Also, we explored how to perform network monitoring
    via SNMP. We used the PySNMP module to simplify and automate our SNMP queries.
  prefs: []
  type: TYPE_NORMAL
- en: In the next [chapter](ee538860-9660-4043-9296-143e62f27a61.xhtml), we will explore
    programming packages for working with Nmap scanners and obtain more information
    about services and vulnerabilities that are running on servers.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the way to connect to an FTP server using the ftplib module through
    the `connect()` and `login()` methods?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What method of the ftplib module allows it to list the files of an FTP server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What method of the Paramiko module allows us to connect to an SSH server and
    with what parameters (host, username, password)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What method of the Paramiko module allows us to open a session to be able to
    execute commands subsequently?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the way to log in against an SSH server with an RSA certificate from
    which we know your route and password?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the main class of the PySNMP module that allows queries on SNMP agents?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the instruction to inform Paramiko to accept server keys for the first
    time without interrupting the session or prompting the user?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the way to connect to an SSH server through the `Transport()` method
    that provides another type of object to authenticate against the server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the Python FTP module, based in Paramiko, that provides a connection
    with FTP servers in a secure way?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the method from ftplib we need to use to download files, and what is
    the `ftp` command we need to execute?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In these links you will find more information about mentioned tools and official
    Python documentation for searching into some of the mentioned modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.paramiko.org](http://www.paramiko.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://pexpect.readthedocs.io/en/stable/api/pxssh.html](http://pexpect.readthedocs.io/en/stable/api/pxssh.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://pysnmp.sourceforge.net/quick-start.html](http://pysnmp.sourceforge.net/quick-start.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For readers interested in deepening their understanding about how to create
    a tunnel to a remote server with Paramiko, you can  check the **sshtunnel** module
    available in the PyPI repository:[ https://pypi.org/project/sshtunnel/](https://pypi.org/project/sshtunnel/).
  prefs: []
  type: TYPE_NORMAL
- en: Documentation and examples are available in the GitHub repository: [https://github.com/pahaz/sshtunnel.](https://github.com/pahaz/sshtunnel)
  prefs: []
  type: TYPE_NORMAL
