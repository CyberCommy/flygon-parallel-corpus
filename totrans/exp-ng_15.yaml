- en: Integrating Bootstrap with Angular Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap is arguably the most popular frontend framework out there. Isn't Angular
    itself a frontend framework, you ask? Well, yes. Then why in the world do I need
    to use two frontend frameworks for the same app? The answer is, you don't. Bootstrap
    has been created by and for Twitter, and is incredibly popular. It allows you
    to manage many things, such as the disposition of HTML components on the page,
    using a system called the grid. This system, which I will explain at length in
    the following pages, allows you to divide the web page space into zones without
    explicitly using CSS. Moreover, everything will be responsive out of the box.
    Also, Bootstrap provides dynamic elements such as a carousel, Progress bar, form
    reaction to user input, and more. Simply put, Angular allows you to create the
    application structure and manages data presentation, while Bootstrap deals with
    the presentation of the graphics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bootstrap is based around three elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bootstrap.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`glyphicons`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, `bootstrap.css` contains the framework that allows the responsive division
    of space, while `bootstrap.js` is a JavaScript framework that makes your pages
    dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that `bootstrap.js` depends on the jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, `glyphicons` is a font containing all the icons you might need when
    using Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 10](847dfea0-b857-4423-84fc-e6f719237f1d.xhtml)*,* *Material Design
    in Angular*, you will learn how to create apps that manage dynamic elements, the
    carousel, and other Progress bars using the `Material Design` package provided
    as an official extension of Angular by Google (ng2-material). Bootstrap (by Twitter)
    and Material Design (by Google for Angular) ultimately tend to achieve the same
    thing: facilitate yourÂ life when it comes to strictly presenting pages to your
    user. For example, they both ensure cross-browser compatibility, prevent the repetition
    of code between projects, and add consistency in the code base.'
  prefs: []
  type: TYPE_NORMAL
- en: In my opinion, which one you should use is a personal choice, and I can see
    flame wars along the lines of C# versus Java or the PC versus the Mac ahead in
    the coming months. On the one hand, if you are already proficient with Bootstrap
    and use it everywhere, then you can use it here too. On the other hand, if Bootstrap
    is not part of your skill set, you can use this opportunity to pick it up and
    then choose the one you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third option will be to skip this chapter altogether if you have already
    picked the Material Design (by Google for Angular) approach. I will not mind,
    promise. The topics covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Bootstrap's grid system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bootstrap directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Without further ado, let's get started and install Bootstrap for Angular.
  prefs: []
  type: TYPE_NORMAL
- en: When using Bootstrap with a standard web application without a frontend framework
    such as Angular--you need to use **content delivery network** (**CDN**) to fetch
    the three parts that comprise the Bootstrap framework (`bootstrap.css`, `bootstrap.js`,
    and `glyphicons`). These calls, even when downloading minified files, still take
    time (for example, three HTTP requests, downloading, check summing, and so on)
    for your clients. With Angular, we could follow the same approach and simply add
    references to some CDN in `src/index.html`, but it would be a considerable mistake.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, if the user does not own a cached copy of the resource, then we
    will suffer the same side-effects as a standard web app, as our customers would
    have to wait for the CDNs to serve the Bootstrap framework, especially considering
    that our app is minified and served in a single file, thanks to the Angular CLI
    deployment processes. Secondly, we won't be able to easily control the Bootstrap
    components in our Angular components.
  prefs: []
  type: TYPE_NORMAL
- en: The better way to integrate Bootstrap with our Angular application is to use
    the `ng-bootstrap` package. This package allows us to use an Angular directive
    for Bootstrap and to manage them in our components. At the time of writing, this
    is the most comprehensive, well maintained, and well integrated package that allows
    us to use Bootstrap in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: To explore Bootstrap, we will build upon our JSON API for the Marvel Cinematic
    Universe used in [Chapter 7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml), *Asynchronous
    Programming Using Observables* and [Chapter 9](64f5991e-76eb-41dd-818c-0e46c41c168b.xhtml),
    *A**dvanced Forms in Angular*.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code for [Chapter 9](64f5991e-76eb-41dd-818c-0e46c41c168b.xhtml),
    *Advanced Forms in Angular* at [https://github.com/MathieuNls/mastering-](https://github.com/MathieuNls/mastering-angular2/tree/master/chap9)[angular](https://github.com/MathieuNls/mastering-angular2/tree/master/chap9)[/tree/master/chap9](https://github.com/MathieuNls/mastering-angular2/tree/master/chap9).
  prefs: []
  type: TYPE_NORMAL
- en: 'To clone this code into a new repository called `angular-bootstrap`, use the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: These commands pull the latest version of the GitHub repository containing the
    code for this book to a folder named `angular-bootstrap`. Then, we go into the
    `angular-bootstrap` folder and prune everything that is not inside the [Chapter
    9](64f5991e-76eb-41dd-818c-0e46c41c168b.xhtml), *Advanced Forms in Angular* directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s install the `ng-bootstrap` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in `src/app/app.module.ts`, import the package `import {NgbModule}` from
    `@ng-bootstrap/ng-bootstrap` and add `NgbModule.forRoot()` to the list of imports
    for the `AppModule` class. It should look like this, if you reused the code from
    [Chapter 9](64f5991e-76eb-41dd-818c-0e46c41c168b.xhtml), *Advanced Forms in Angular*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This package allows us to get rid of the jQuery and `bootstrap.js` dependencies,
    but, unfortunately, it does not include the `bootstrap.css`. It contains the required
    styles for the grid system and the components we are about to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [http://getbootstrap.com/](http://getbootstrap.com/) and import the following
    displayed link in your `src/index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Upon these small changes, we can already see that Bootstrap is taking over our
    style. In the following picture, the left side is what our form looked like at
    the end of [Chapter 9](64f5991e-76eb-41dd-818c-0e46c41c168b.xhtml), *Advanced
    Forms in Angular*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The right side, however, is what our form looks like now. As you can see, there
    are small differences here and there. For example, the `h1` tag, the error field,
    and the inputs have different styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/561f8ba8-175a-4af1-8272-060cfc726aee.png)Before and after Bootstrap.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use the Google Chrome inspection features, we can clearly see that the
    applied style for our `h1` markup comes from http://maxcdn.bootstrapcdn.com, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c2bdb3bf-3fb2-4cf5-9ec4-d3f546aa165b.png)Chrome inspect style.'
  prefs: []
  type: TYPE_NORMAL
- en: 'That is it: We''re done with the initialization of Bootstrap. Let''s learn
    how to use the Angular directives for Bootstrap.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the grid system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are more concerned with learning how to use the different
    Bootstrap directives for Angular than learning about Sass mixins and other presentation
    skills. In other words, the advanced features of the grid system fall outside
    the scope of this chapter. However, in this section, I'll quickly introduce what
    the grid system is and give an overview of how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: If you have used Bootstrap before, and, more particularly, have used the grid
    system, you can skip this section and go directly to the next one, where we learn
    how to use the accordion directive.
  prefs: []
  type: TYPE_NORMAL
- en: So, the grid system splits our presentation into twelve columns. The size of
    the columns can be extra small, small, medium, large, and extra large. The size
    of the columns can be manually set via the CSS class prefix (`col-xs`, `col-sm`,
    `col-md`, `col-lg`, and `col-xl` respectively) and corresponds to different screen
    widths (less than 540px, 540px, 720px, 960px, and 1140px, respectively).
  prefs: []
  type: TYPE_NORMAL
- en: 'To get an idea of how to leverage the grid system to separate our presentation,
    let''s add the following to `src/app/app.component.html` just after our `<h1>{{title}}</h1>`
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have several CSS classes at work here. First, let us look
    at the container. This one is mandatory and defines the space on which the Bootstrap
    grid system will be applied. Then, we have rows that contain `col- divs`. Each
    row occupies the full width of the screen and is divided into columns. The actual
    width of the columns depends on the number you used at the end of the column class
    declaration (4, 8, 6, and so on). Knowing that the rows are separated into 12
    columns, and that we used the `col-md` class prefix, we can extrapolate that the
    maximum size of a row is 720px. Consequently, each column is 60px wide. Within
    the first row, we use the `-1` suffix for our declaration; hence, we have 60px-wide
    column (that is, the size of the screen width divided by 12). On the second row,
    however, we use the `-8` and the `-4` suffixes.
  prefs: []
  type: TYPE_NORMAL
- en: This means that we will have one column that will be eight times the width of
    `a-1` column (480px) and another column that will be four times the width of `a-1`
    column (240px). In the third row, we use three four columns and, finally, in the
    fourth row, we have two six columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see what is happening, add the following to `app/app.component.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This piece of CSS will add a background and border to any `col` classes, regardless
    of the prefix or suffix they might have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d9fcdca8-0f31-4b77-8421-ecfb8de03649.png)The grid system in action.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding picture, the space is nicely divided as planned.
    Now, that's not the real strength of the grid system. The main strength is that
    the columns would automatically stack on top of each other if the screen width
    became smaller than 720px.
  prefs: []
  type: TYPE_NORMAL
- en: 'On an iPhone 6, for example, whose screen is 375px in width, all the columns
    will be stacked as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aab631a1-971c-48c6-8b31-1a25818857cc.png)The grid system on an iPhone
    6.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s another example from the official documentation, found at [https://v4-alpha.getbootstrap.com/layout/grid/](https://v4-alpha.getbootstrap.com/layout/grid/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'I will not go any further in detailing the grid system, but know that you can
    find a lot of awesome books about this topic in the Packt Library. Just look up
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Mastering Bootstrap 4*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bootstrap 4 Blueprints*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bootstrap directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to use some of the most commonly used Bootstrap
    directives to build your application.
  prefs: []
  type: TYPE_NORMAL
- en: Accordion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first directive we will overview is the accordion directive. Accordion allows
    you to create a different panel of content that can be displayed independently
    by clicking its respective header.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the form we made back in [Chapter 9](64f5991e-76eb-41dd-818c-0e46c41c168b.xhtml),
    *Advanced Forms in Angular*, which allows the user to add movies in the Marvel
    Cinematic Universe, to experiment with accordion. The goal here is to have one
    panel for the form and another panel for the enumeration of the movies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by studying the minimal HTML needed to have a Bootstrap accordion,
    which is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous HTML template will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3aa4acce-4fca-4bda-93d7-3a430b529a5d.png)A simple accordion.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Analyzing the preceding code snippet, we can see the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ngb-accordion` : This is the main accordion directive. It defines an accordion
    that will contain `ngb-panel`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ngb-panel:` This represents a single panel of the accordion. Its visibility
    can be toggled by clicking on the panel title. `ngb-panel` contains a template
    that can be used for the title or the content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<template ngbPanelContent>` : This contains the title or the content of a
    given panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<template ngbPanelTitle>:` This contains the title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So far, everything is fairly simple. Now, where it becomes powerful is when
    you manage it from your TypeScript component. First of all, the `ngb-accordion`
    directive has three different `@Input` properties that we leverage. The first
    one is `activeIds`, which is `string[]` and contains the IDs of the panel you
    wish to be opened. Panel IDs are auto-generated from `ngb-panel-0`. The panel
    IDs are generated with the format `ngb-panel-x`. The second `@Input` is a Boolean: `closeOthers`.
    This one allows you to specify whether only one panel should be opened at a time.
    Finally, the `string` type is used to specify the type of the accordion in terms
    of its style. In Bootstrap, four types are recognized: `success`, `info`, `warning`,
    and `danger`.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to these three `@Inputs`, the `ngb-accordion` directive provides
    an `@Output` named `panelChange`. This `@Output` will fire each time a panel's
    visibility is about to be toggled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s experiment with these `@Input` and `@Output` properties by transforming
    `app/app.component.html` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we used `[activeIds]="activeIds"`, `type="success"`, `closeOthers="true"`,
    and `(panelChange)=pannelChanged($event)` to bind to a variable named `activeIds`
    in our component, set the type of the form to `success`, and set `closeOthers`
    to true. Then, we bound a method named `pannelChanged` to the `panelChange` output.
    In the `app.component.ts`, we need to add the `activeIds` variable and the `pannelChanged`
    method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `private activeIds = ["ngb-panel-1"];` allows us to define that the `panel-1`
    (the second one) should be opened by default and the `pannelChanged` method should
    receive an event payload composed of a `panelId:string` and a `nextState:boolean`.
    We log both payload attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app now looks like the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9aea1b72-1074-4da4-9724-8c8a73dec9aa.png)A TypeScript--managed accordion.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you toggle the panels, it logs the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Alert
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next directive we will explore in this chapter is the `ng-alert`. In the
    Bootstrap vocabulary, alerts are important information that is displayed to the
    user in a colored `div`. There exist four types of alert: `success`, `info`, `warning`,
    and `danger`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a Bootstrap alert, the minimum viable HTML template is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this code is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/93c0e03c-2c1a-4d86-a030-0dab9b1456bf.png)A basic alert.'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the accordion, the alert directive provides some `@Input` and `@Output`.
    We can use as `@Input` the `dismissible:boolean`, which manages the dismissibility
    of the alert, and `type:string`, which accepts `success`, `info`, `warning`, and
    `danger`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make our form a bit more Bootstrappy, we can replace our error messages
    with alerts. For now, in the forms the error messages look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the objective is to have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For each of the fields in the preceding snippet, the aforementioned code will
    produce the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1e17b924-e47c-4332-b840-9f7d9bd9d425.png)Danger alert as form errors.'
  prefs: []
  type: TYPE_NORMAL
- en: Datepicker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next directive in this chapter is the datepicker. Regardless of the technology
    you use, dates are always somewhat finicky as every vendor proposes many formats.
    Also, date internationalization makes things even harder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, Bootstrap comes with a simple enough datepicker that allows the user
    to pick a date in a pop-up calendar graphically. The code for this is given as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Many things are going on here. First, we have a `formControl` input that has
    a placeholder set to `yyyy-mm-dd`. The placeholder you define is important as
    it will act as a mandatory formatter for the data your users pick. For the syntax
    of the formatter, you can use every classical symbol for dates (for example, d,
    D, j, l, N, S, w, z, and so on). In other words, the dates we enter will automatically
    match this pattern. Then, we have `ngbDatepicker #d="ngbDatepicker"`. The `ngbDatepicker`
    defines that our input is a `ngbDatepicker` and the `#dp="ngbDatepicker"` allows
    us to create a local reference to our input. This local reference, named `dp`,
    is used on the `(click)` event of the following `div: (click)="dp.toggle()"`.
    This `div` contains the image of the calendar. On clicking it, a dynamic calendar
    will pop up and we will be able to choose a date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This HTML will give us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/59629aed-ee64-4b4e-9b08-d5869cd5962a.png)datepicker.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, once the `click` event is triggered, the following will be displayed
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1c9dd50c-abfa-45a2-a4f8-ebe97a16cddc.png)datepicker clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To improve our management of the Marvel Cinematic Universe, we can change the
    `release_date` field to a datepicker. For now, the `release_date` field looks
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We have the input and the Bootstrap alert if the field is not valid. The Bootstrap
    alert is active by default (that is, when the field is empty). Let''s transform
    our input to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'What''s different here is that we link the input to our `formControl`. Indeed,
    in [Chapter 9](64f5991e-76eb-41dd-818c-0e46c41c168b.xhtml), *Advanced Forms in
    Angular,* we defined the form as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we have a `release_date` field that is mandatory. The HTML input defines
    a Two-way Data Binding to the `release_date` field with `[(ngModel)]="movie.release_date"`,
    and, in addition, we need to have the `formControlName="release_date"` attribute
    inside the input. After implementing that, the following will be displayed on
    the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/08e4e8c9-4218-4256-8dcc-68593dbfb171.png)datepicker for the MCU.'
  prefs: []
  type: TYPE_NORMAL
- en: Tooltip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next up, we have the tooltip directive, which allows us to display informative
    text at the left, right, top, or bottom of a given set of elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tooltip directive is one of the simplest ones. Indeed, you only have to
    add two attributes to the element you wish to enhance: placement and `ngbTooltip`.
    The value of placement can be top, bottom, left, or right, while the value of
    `ngbTooltip` is the text you wish to display.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the label for the `movie_id` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we kept the alert and the input as is. However, we added the placement
    and `ngbTooltip` attributes to the label. As a result, the text Title of your
    movie will be displayed on top of the `movie_id` label when we hover over it.
    This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f0fc6a9c-340f-43a5-8abf-2534c96c0043.png)A tooltip on movie_id.'
  prefs: []
  type: TYPE_NORMAL
- en: Progress bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There exist some other Bootstrap components that we could use to enhance our
    form; however, too many will quickly become a case of overkill in terms of usability.
    For example, it will be tricky to integrate a Progress bar in to our form. What
    we can do, however, is add a panel to our accordion for each new Bootstrap directive
    we want to test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a panel for the Progress bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `progressbar` directive is another simple directive. It takes two `@Input`
    attributes: type and value. As usual, the type can be a `success`, `danger`, `warning`,
    or `info`. The value attribute can be bound to a TypeScript variable instead of
    hardcoding 25, as I did.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cd71611f-8ba6-450d-a78f-66f416bd14f9.png)Progress bar on movie_id.'
  prefs: []
  type: TYPE_NORMAL
- en: Rating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The rating directive is also fairly well known. It allows users to rate something,
    or to display a given rate.
  prefs: []
  type: TYPE_NORMAL
- en: As expected, this directive is simple to understand. It has a rate input that
    you can hardcode (for example, `"rate"=25`), bind (`[rate]="someVariable"`), or
    apply Two-way Data Binding (`[(rate)]="someVariable"`). In addition to the rate
    input, you can use `[readonly]="read-only"` to make your rate bar non-modifiable.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the rating bar consists of 10 stars. The rate value can range from
    0 to 10, including decimal numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of a default rate bar inside a new panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/67f6dba3-16d6-4c86-929a-4351bed46fed.png)Rate bar.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw some of the most popular Bootstrap components out there.
    We learned how to use them with native Angular directives provided by the ng2-Bootstrap
    package. We did not, however, explore every single Bootstrap component there is.
    You can have a look at the official documentation hosted at [https://ng-bootstrap.github.io/](https://ng-bootstrap.github.io/).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to test your Angular application with
    unit testing.
  prefs: []
  type: TYPE_NORMAL
