- en: The Business Value of CI/CD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a clear understanding of what automation, **continuous integration**
    (**CI**), and **continuous delivery** (**CD**) are, we need to communicate the
    business value of these practices to business stakeholders, or else we risk building
    features without action items that incorporate these practices. This chapter is
    about convincing the stakeholders of these values, and we will discuss problems
    with communication, how to communicate pain points to team members, sharing responsibilities
    among different teams, knowing your key stakeholders, how to demonstrate why CI/CD
    is important, and how to get approval for CI/CD from your stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Problems with communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating pain points to team members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing responsibilities among different teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing your stakeholders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstrating why CI/CD is important
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting approval for CI/CD from your stakeholders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter assumes that you are already familiar with the concepts of automation
    and CI/CD; read [Chapter 1](69088250-887a-4306-ac24-fcda17be315b.xhtml), *CI/CD
    with Automated Testing*, and [Chapter 2](1f431ec3-84d5-4132-b542-01d1fe63a205.xhtml),
    *Basics of Continuous Integration*, before reading this chapter if you are unsure
    about these topics. This chapter will mainly be about how to communicate the values
    of these practices to stakeholders, so there won't be any code samples or installations
    to do.
  prefs: []
  type: TYPE_NORMAL
- en: Problems with communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any working environment, there are bound to be issues with communication,
    but in particular there are issues in Agile working environments. Some problems
    with communication are miscommunications of requirements, a lack of proper documentation,
    timezone differences, a lack of trust and mutual respect, cultural differences,
    language barriers, and long feedback loop cycles.
  prefs: []
  type: TYPE_NORMAL
- en: Miscommunication of requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a depiction of a requirements checklist. The purpose of a requirements
    checklist is to get all the necessary facts laid out for a particular feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/21ef4c87-e303-46a9-b1fc-53cd44be9461.png)'
  prefs: []
  type: TYPE_IMG
- en: The miscommunication of requirements is a common issue that occurs in sprint
    cycles in an Agile working environment. It is impossible to truly eliminate the
    miscommunication of requirements completely, but it is important to minimize the
    risk of this by making sure that you communicate with the end user or customer
    from the inception of the feature request.
  prefs: []
  type: TYPE_NORMAL
- en: It is important that the feature request that you are implementing is clearly
    stated and that each piece of functionality has a clear business intent. This
    is important because it helps developers, DevOps personnel, and QA/testers be
    better prepared during the implementation phase.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the critical business requirements up front will help reduce the
    miscommunication of requirements between teams, as missing requirements can easily
    create bottlenecks for development when certain actions are not anticipated. Any
    critical requirements information needs to be properly documented.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of proper documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The documentation needs to be written at the very moment that any requirements
    are defined and must be updated with additional information continuously while
    the feature is being worked on. It is only when everything is defined and stated
    as clearly as possible that you can start writing a plan to implement a specific
    feature. If a developer encounters an issue and requires clarification from a
    customer, then the answer needs to be put directly in the requirements for future
    reference.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid having multiple documents with requirements information, but instead have
    one document with the requirements information, or else you risk having out-of-date
    information; or worse, having different requirements scattered in different places
    that contradict each other.
  prefs: []
  type: TYPE_NORMAL
- en: There should be a single source of truth with the business requirements and
    they should be understood by all parties.
  prefs: []
  type: TYPE_NORMAL
- en: Timezone differences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As more and more teams are becoming distributed and global, differences in time
    zones can create communication bottlenecks. Developers working in drastic time
    zone differences need to ensure that good CI/CD practices are in play. Broken
    CI builds and configuration management issues can quickly become exacerbated with
    time zone differences as a team in one time zone will be left flapping in the
    wind with effective work able to be done. Communication is especially more important
    with distributed teams as the lack of face-to-face interaction can lead to communication
    failures, and at worst can create animosity between teams if not properly managed.
  prefs: []
  type: TYPE_NORMAL
- en: I once worked at a startup where there was a 3-hour time zone difference, which
    in itself is not an issue, but the standup was done at the end of the business
    day while the other team started the day at noon our time. Naturally, this led
    to days where changes done by the other team would block us until midday our time,
    when the other team was available.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of trust and mutual respect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a diagram depicting the fact that trust and mutual respect
    go hand in hand, and teams need this in order to operate efficiently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/85d635a9-3216-4a09-bde2-47af96e61527.png)'
  prefs: []
  type: TYPE_IMG
- en: Trust among teams is critical and is easily *lost* but *won* with difficulty.
    It is best if there is a good project manager who can facilitate communication
    between teams and help clarify issues that are bound to occur. Healthy teams will
    communicate openly when problems arise during feature work, and it is good to
    have retrospectives in place to help air out frustrations among team members and
    to build trust.
  prefs: []
  type: TYPE_NORMAL
- en: If possible, it is good to have team outing events where multiple teams can
    interact with each other and help build cooperation with each other. Some companies
    institute a quarterly meeting where teams can do fun events together, such as
    sports or games. Team-building exercises can also be scheduled often to keep people
    engaged and build a spirit of cooperation.
  prefs: []
  type: TYPE_NORMAL
- en: Cultural differences and language barriers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Agile working environments have become more global, global teams have become
    more common. Cultural differences among teams makes communication an even more
    important ingredient to the success of a project. Humor can be a double-edged
    sword as many teams can create division and enmity if the intended humor is taken
    out of context, so it is best if teams can be taught about cultural norms and
    customs to avoid miscommunication issues.
  prefs: []
  type: TYPE_NORMAL
- en: Language barriers can also create issues, as the requirements of a feature request
    can become misunderstood. It is best if a project manager can work as a liaison
    between teams to ensure that all the requirements are clearly understood between
    teams and to help clarify any communication bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: Long feedback loop cycles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a depiction of a feedback loop cycle. The greater the feedback
    loop is, the longer it takes to make changes. It is important to have a short
    feedback loop on the deployment pipeline to be effective, and so that you can
    make timely changes when necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/203a4e22-1a76-4b1b-8818-b4f449e3f43c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We spoke about long feedback loops in [Chapter 1](69088250-887a-4306-ac24-fcda17be315b.xhtml),
    *CI/CD with Automated Testing*, and in particular we spoke about the dangers of
    long feedback loops and how it is vital to shorten feedback loop cycles so that
    the right information is given to the right person at the right time. Likewise,
    long feedback loop cycles between teams can create issues and natural bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, teams would get the information they needed as quickly as possible,
    but this is not always a reality. A proper liaison or project manager can help
    shorten the feedback loop among teams, and teams need to properly document any
    processes and make sure that this documentation is visible and known to other
    teams, or else processes among teams can differ.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that short feedback loops lead to faster response times.
  prefs: []
  type: TYPE_NORMAL
- en: Communicating pain points to team members
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important that team members are able to effectively communicate the particular
    pain points or blockers that are inhibiting progress. There are several pain points
    we will discuss in this section, including waiting for requirement information,
    undocumented steps in the deployment pipeline, too many holders of keys to the
    kingdom, and too many communication channels.
  prefs: []
  type: TYPE_NORMAL
- en: Waiting for requirements information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is often the case that developers will start work on a particular story/feature
    and not have all the necessary requirements in order to complete their assigned
    work. This is especially problematic for developers because whatever code they
    work on might need to be scrapped and redone depending on how far off the requirements
    were from being done correctly. Developers need all the requirements up front
    before they can start on a story; there must exist processes for each feature
    to work in grabbing all the requirements, and each story ideally will have acceptance
    tests as an action item for the feature work to be considered done. In an ideal
    world, developers would have all the necessary information ready before they started
    their particular feature work, and the acceptance tests written for the story
    would pass when the feature was completed as was specified in the requirements
    document.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](69088250-887a-4306-ac24-fcda17be315b.xhtml), *CI/CD with Automated
    Testing*, we discussed, as an example, the Billy Bob's Machine Parts company.
    Now, imagine Tom from the development team has started work on showing a supplier
    name, and Tom discovers that the scope of this ticket appears massive and he may
    not be able to finish it in time. This scenario is also complicated by the fact
    that the requirements documentation is severely lacking and critical details were
    missing during development. Tom asks the product owner if he can provide feedback
    on some items but has to wait for several days before he gets this necessary information.
  prefs: []
  type: TYPE_NORMAL
- en: Undocumented steps in a deployment pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each step in the deployment pipeline process should be appropriately documented
    and automated. We spoke about the importance of automating as much as you can
    in the deployment pipeline in [Chapter 5](3e1059c7-00d0-48a6-882b-7d7dbdf8aa50.xhtml),
    *Installation and Basics of Jenkins*. To reiterate, manual processes are problematic
    because they are repeatable and reliable. Automation is important because it brings
    repeatability and reliability to the deployment pipeline. Anytime someone has
    to do a manual step, there is no assurance as to whether the process will be done
    correctly and in the same manner in each run; only with automation can you guarantee
    the repeatability of a deployment pipeline stage.
  prefs: []
  type: TYPE_NORMAL
- en: Alvin, who is part of the DevOps team, is working on the latest release for
    the software product and is running a complicated manual process in the deployment
    pipeline. Alvin types in the wrong command and ends up wiping out the production
    database. Luckily for Alvin, there is a backup that is a day old and he can restore
    the production database to this copy. If there had been automated process in place,
    this would not have occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Keys to the kingdom to select few
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram represents a key, and the main thing to remember about
    keys to the kingdom is about a select few having the access/key to the production
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/09ebaf30-d1aa-4797-9625-e2c3ac9fb5e7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is important to control who can make changes in a production environment,
    and many software companies will often elect a select few or maybe even one individual
    who can make changes in production. This can become problematic if this particular
    individual is not available or leaves the company, but some companies have instituted
    the practice of development teams owning a particular feature end to end, and
    the same developer who worked on the feature is responsible for fixing issues
    that are encountered in the deployment pipeline. At one company I worked for,
    we affectionately said, *only a select few have the keys to the kingdom*.
  prefs: []
  type: TYPE_NORMAL
- en: Alvin is one of the few DevOps personnel to hold the keys to the kingdom. A
    customer support representative pings the development team about a production
    outage and the development team is scrambling to get the production environment
    back up for customers. Alvin and one other member of DevOps are the only ones
    that can touch the production environment. This issue is exacerbated by the fact
    that neither Alvin or the other assigned DevOps person is available.
  prefs: []
  type: TYPE_NORMAL
- en: Too many communication channels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There should be a low signal-to-noise ratio when it comes to communication.
    If a developer is being alerted by email, SMS, voicemail, and Slack messaging
    about issues, they may soon tune out and not pay attention to issues. It is important
    to get the attention of the developer to fix issues as they are encountered, but
    you probably shouldn't be alerted like a military command center, where you are
    bombarded with notifications from many different sources.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that Bruce is a newer developer in the team and Bruce receives an alert
    about a low-priority ticket that he worked on. Bruce receives an email, text alert,
    Slack message, and phone call about this ticket. Bruce tends to get a lot of messages
    like this and soon decides to ignore them. On one particular afternoon, Bruce
    ignores a high-priority ticket because he figures that it is a senseless alert.
    Bruce has become desensitized to the alerts.
  prefs: []
  type: TYPE_NORMAL
- en: There is too much noise and not really any true signals in the alerting process
    with all of these alerts.
  prefs: []
  type: TYPE_NORMAL
- en: Pain-Driven Development (PDD)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If something in the CI/CD pipeline is causing you some degree of pain, then
    it might be a good idea to automate the process. If you have a 15-step process
    that is error prone in the deployment pipeline and is causing many issues during
    releases because of mistakes in execution, then this is a pain probably felt by
    others at some point or another. The idea is that the pain is what should guide
    you in the right direction to find a better solution. If you are having issues
    with a process, then you might need to automate the process. It is not always
    necessary to automate a task for the sake of automation; you need to evaluate
    your processes continuously and PDD can be an effective tool for finding processes
    that need to be improved.
  prefs: []
  type: TYPE_NORMAL
- en: Jimmy has been experiencing issues at every commit stage with linting failures.
    Jimmy forgets to check the lint task before he pushes code up to the repository.
    This is especially troublesome because Jimmy makes sure to run all the unit tests
    to check that they are passing but habitually forgets to check linting errors.
    Jimmy decides that the pain is enough and a new process needs to be put in place.
    Jimmy writes a pre-Git push hook script that runs the linter on each Git push
    to the master. Now every time someone pushes to the master, the script runs the
    linter to make sure that a linting error is not introduced into the codebase.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing responsibilities among different teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not always apparent where particular pain points or practices are occurring
    in other teams without some collaboration and transparency. It is good if teams
    are able to share responsibilities and practices with other teams. If possible,
    you should rotate team members, try to ask for feedback on development practices,
    and try to create cross-functional teams.
  prefs: []
  type: TYPE_NORMAL
- en: Rotating team members
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram symbolizes a rotation of team members. If possible, creating
    a team rotation where different team members can cycle through different job duties
    can help team members to share responsibilities and to build efficient processes,
    and has the possibility of sparking innovation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/957a4159-d0f7-4286-9e83-3b4b8d857885.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By rotating team members into different teams, you help shape their perspective
    and provide a broader understanding of development practices and increase their
    product knowledge. This isn't always possible, especially, with highly specialized
    teams, such as a security team or a machine learning team, as the level of ramp-up
    time necessary for any given developer to be effective can vary. If possible,
    rotating team members into related projects and technologies can help prevent developer
    burnout and can help developers learn from each other. It is easy to become complacent
    and become accustomed to how things are done, and it is often the case that a
    fresh pair of eyes can see things in a new light and help bring necessary changes
    into a development team.
  prefs: []
  type: TYPE_NORMAL
- en: Bruce works in the API development team and has been rotated into the network
    engineering team. The rotation period is about 3 to 6 months and Bruce has already
    learned some practices that will be helpful to the API development team. Some
    of the advantages of cross-training engineers is that skills they learn in other
    development teams can transfer back into other teams. Bruce learned some caching
    optimizations that he can apply in the network layer and in the OSI layer that
    will help the API development team. The **Open System Interconnection **(**OSI**)
    is a conceptual model that breaks down information sent over the wire, so to speak,
    into distinct layers. There are seven layers in the OSI model—the **Application
    layer** (seventh), the **Presentation layer** (sixth), the **Session layer** (fifth),
    the **Transport layer**, (fourth), the **Network layer** (third), the **Data Link**
    **layer** (second), and the **Physical layer** (first). Bruce has been utilizing
    optimization strategies in the Application layer, but with some new-found knowledge
    of the network layer, Bruce has come up with newer optimization strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Asking for feedback on development practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Communication among team members is critical for the long-term success of a
    team. Developers should not be afraid to ask for feedback on why things are done
    in a particular way and it is important to create a healthy environment where
    *constructive criticism* is welcomed. Team members can become complacent about
    team processes and may miss out on opportunities to optimize processes.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go back to our example company, Billy Bob's Machine Parts company. Let's
    say that Tom has recently joined the team and has noticed that the steps to get
    set up in the API repo are overly complicated and require many steps to get a
    particular environment up and running. Tom asks whether anyone has considered
    automating some of the steps using a build tool, and is told to work on automating
    any steps he thinks would be helpful. Tom decides to write a Makefile that can
    encapsulate all of the steps to get started for a particular environment by simply
    running the `make` command. Tom creates a pull request to the API repo and introduces
    this new functionality, which helps automate the steps to create a particular
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Creating cross-functional teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If possible, and if you have the resources, try to create cross-functional teams
    so that teams can share expertise among other team members. For example, a team
    could have two to three developers, one QA team member, a security team member,
    a DevOps team member, and a product owner who all work together and are able to
    develop efficiencies that would not otherwise occur if they were working in isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Back to our example company—imagine the following cross-functional team ensemble.
    Tom, Steven, and Bob are all the developers, Ricky is the security team member,
    Susan is the DevOps team member, and Nicky is the product owner. All work together
    in the same space and meet with each other for a morning standup everyday. Now,
    the team members are able to own the deployment pipeline stages end to end, as
    they can work together and help each other automate processes. Tom and Steven
    help write an automated test suite using a new library, and Ricky is able to add
    a tertiary build stage that runs security checks for changes that are made to
    the master branch. Susan has added monitoring and reporting metrics as each item
    is progressing through the deployment pipeline. Nicky quickly updates the requirements
    documentation for Bob, as he notices an edge case with his new feature work. The
    team members are openly communicating about each step in their process and are
    able to optimize processes because they openly collaborate with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing your stakeholders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important for a development team to know all of their stakeholders, as
    the stakeholders will hold critical information that can help a team succeed or
    fail. The development team should be able to communicate with project managers
    when necessary, communicate openly to members of the executive leadership team,
    and be able to speak with the end users.
  prefs: []
  type: TYPE_NORMAL
- en: Project managers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although a product owner might take on the role of a project manager and can
    help facilitate the duties of a scrum master, it is best if the roles are done
    by separate people. A project manager can be seen as an *agent of change* who
    adapts to a dynamic work environment. At the end of the day, the project manager
    wants to be able to get the deliverable shipped to the end users and can help
    open the channels of communication between different teams. It is important that
    developers are able to communicate openly and notify project managers of any issues
    they encounter during their feature work.
  prefs: []
  type: TYPE_NORMAL
- en: Some companies also employ an Agile program manager who is in charge of the
    workflow and methodologies in an Agile working environment. The Agile program
    manager will develop a roadmap for the sprint schedule and make sure that each
    developer in the development team is properly allocated work to their scheduled
    capacity. This type of manager will usually be more aware of all the team's work
    and will make sure that all the interested parties have all the tools and information
    that they need to accomplish their deliverables.
  prefs: []
  type: TYPE_NORMAL
- en: Executive leadership team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The company culture can largely be affected by the executive leadership teams,
    such as the **chief executive officer** *(***CEO**), **chief information officer**
    (**CIO**), **c****hief technical officer** (**CTO**), and **chief operating officer**
    (**COO**). It is not always possible to make broad company impact unless you operate
    at these executive levels. If development teams feel that decisions come down
    as edicts and that they have no say in the decisions made, they may not be able
    to prevent issues that would otherwise be preventable. Many companies state they
    have an open-door policy and welcome constructive feedback, but often a development
    team will not empowered to speak up when they fight with broken processes.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that Tom read a blog post over the weekend and has discovered a way
    to reduce the feedback loop in the automated acceptance test suite. This change
    that Tom wants to introduce requires a spike in work. Tom tries to mention this
    at the Monday morning standup but gets stonewalled by the team because there is
    higher value work to be done. Tom decides that this is important enough for upper
    management to become aware of. Tom proceeds to talk to the CTO about this using
    the open-door policy but gets verbally reprimanded the next day for not going
    through the proper leadership channels. In this way, Tom is not able to make the
    decisions that could most benefit the team as none of the team members feel empowered
    to make changes in their workflow processes.
  prefs: []
  type: TYPE_NORMAL
- en: End users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a depiction of an end user; at the end of the day, they are the most
    important stakeholder. The feedback that your end users have holds the most weight:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d742c79d-0ba3-41c9-97db-8541153205b0.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At the end of the day, the end user will be using the new functionality that
    you are adding to the product. In this sense, they can help clarify the necessary
    requirements for developers. It is often the case that the end user is not exactly
    clear on what they are looking for until it is right in front of them. It is important
    that the product owner gets all the necessary requirements up front from the customer
    if needs be, and some software organizations go as far as having tests written
    by product owner/customers that specify the requirements in code that must be
    implemented. In any case, the product owner and the end user must be in sync with
    the requested feature before the developer can start his or her work.
  prefs: []
  type: TYPE_NORMAL
- en: The development team is largely removed from the end user and will not interface
    with any end user. It is important, however, for the development team to be aware
    of the specific pain points that end users are encountering when working with
    the software system. Developers in this sense are the most capable of creating
    the changes in the system that will benefit end users, but if developers are not
    aware of such pain points, they will not be able to create the necessary changes
    to benefit the end users. It might be helpful to have developers work with a customer
    success team when appropriate to see how the end users work with the software
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Demonstrating why CI/CD is important
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The importance of a CI/CD pipeline cannot be understated and developers will
    need to demonstrate its importance by providing metrics, reporting, and in general
    educating leadership on the importance of automation.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics and reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram is a depiction of charts and graphs that you can use
    to demonstrate to your stakeholders why CI/CD is important. It is a good idea
    to develop graphs and charts as visuals are very convincing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/df01b582-5a29-4af5-9a50-4cdc238747ad.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Typically, at the executive level at companies, the numbers and the PowerPoint
    slides must demonstrate why something is important. Developers should be able
    to illustrate with metrics—charts, diagrams and any other visual forms—how CI/CD
    can improve existing processes. There exist enterprise solutions already that
    can help generate this information, but a development team can aggregate this
    information in an Excel spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that Bob from the development team has decided that enough is enough
    and the manual processes currently in place during release day are in desperate
    need of automation. Bob aggregates all the time spent in the last 6 months working
    on emergency fixes and the man hours wasted per developer on issues that creep
    up during a release day. Bob creates a nice visual diagram that helps convince
    management to create an Agile epic that deals with creating an automated deployment
    pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Educating leadership on automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A development team cannot assume that leadership understands what automation
    means and what areas are ripe for automation. It is best if a technology representative
    such as a CTO can help by being a proponent of automation and help to explain
    it to the executive leadership team. Someone such as a CTO can help be the agent
    of change to speak on behalf of developers, but regardless of who relays this
    information, the executive team must understand what automation is and what things
    are capable of being automated.
  prefs: []
  type: TYPE_NORMAL
- en: The leadership team tends to be far removed from what developers are doing on
    a daily basis. The leadership team has more global concerns for the company and
    will tend to work with other members, such as sales, marketing, operations, and
    project managers. It is still important for the executive leadership team to be
    educated on automation so that developers are given the necessary time to develop
    an automated deployment pipeline, and so they are given the time during each sprint
    to conduct testing and to continually add automation processes to a CI/CD build
    pipeline and to the deployment pipeline. There needs to be clear understanding
    about automation at the highest levels of an organization so that developers,
    system admins, and DevOps personnel can incorporate automation practices to the
    key deliverables in the company roadmap.
  prefs: []
  type: TYPE_NORMAL
- en: Getting approval for CI/CD from your stakeholders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even when stressing the importance of automation and educating your stakeholders
    on its importance, you might need to take action without official approval. Many
    software projects have started as a skunkworks project that a sole developer worked
    on without official approval. A developer can also work on a deployment pipeline
    automation task on his local machine or an unused machine if need be.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a skunkworks project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The origins of the term skunkworks project is open for debate, but the general
    idea is that it is a project that is worked on in secret by a select individual
    or select individuals that is intended to bring innovation and change to an organization.
    It is not always possible for developers to get approval for a given task and
    they may need to resort to alternative tactics to get their point across.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine Bob from the development team has an idea to write a CLI application
    that will help on-board third-party developers to utilize the company dashboard.
    Bob has tried communicating the idea to upper management but with no luck. Bob
    decides to write a CLI application over the next couple of weeks and has decided
    to write the CLI project using a newer programming language called **Rust**. Bob
    creates an intuitive CLI application that is easy to use and pluggable. Bob is
    able to showcase this new application to the team and in turn convince upper management
    to commit resources to work on the CLI project.
  prefs: []
  type: TYPE_NORMAL
- en: Starting CI/CD on your local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It may not be possible for a development team to get the financial approval
    to get started with a CI/CD pipeline. For the purposes of discovery and to convince
    others of the importance an automated CI/CD pipeline, a developer can replicate
    the deployment pipeline on his or her machine and demonstrate the benefits of
    building automated pipeline stages to the team and upper management.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible with big cloud providers today, such as Azure, AWS, and Google
    App Engine, to get free account plans to provision cloud services. In this way,
    a developer could easily set up a more realistic deployment pipeline, by showcasing
    a small project and showing all the stages in a CI/CD pipeline such as the commit
    stage, an automated acceptance test stage, and an optional security and capacity
    build stage.
  prefs: []
  type: TYPE_NORMAL
- en: Company presentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A company-wide presentation might be the most effective way to get approval
    for CI/CD in your organization. Some companies sponsor hackathons, and you could
    create a new automation process for the company on a sponsored hackathon. The
    advantage of doing this is that you can drive the message automation to the highest
    levels of an organization during a company presentation.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that Tommy from the development team is experimenting with Docker and
    has the idea to create a Docker image for each deployment pipeline. Tommy shows
    that the Docker container can be used as an isolated versioning system that QA
    can use to test versions of a software product, which also has the advantage of
    environment isolation. Tommy builds this automated process, and shows in the company
    presentation that this can save the QA department 25 hours of regression testing
    man hours. The CEO was not aware that QA spent many hours during deployment trying
    to get an environment set up to conduct regression testing. Tommy has shown the
    leadership via a convincing presentation why automation is important.
  prefs: []
  type: TYPE_NORMAL
- en: Lunch and learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram is just a depiction of a fork and knife, but the main
    point is that breaking bread with others is a good way to open channels of communication
    and to bring people together. You can incorporate an automation presentation into
    a company meeting over lunch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d9de0a26-ae79-4c6b-acb7-c6f394df6911.png)'
  prefs: []
  type: TYPE_IMG
- en: You can invite upper management and use diagrams and PowerPoint slides with
    metrics that help explain what automation is, and also show the money spent on
    manual processes. Usually, upper management are more interested in the monetary
    impact of an activity, and if you can show the cost of manual processes to them,
    they will be more inclined to listen.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Communicating the business value of CI/CD is very important, as this chapter
    has illustrated. We started this chapter by discussing the problems with communicating
    and talked about some strategies to communicate pain points to team members. We
    discussed sharing responsibilities among different team members, knowing your
    stakeholders, demonstrating why CI/CD is important to your stakeholders, and finally
    getting approval for CI/CD from your stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will be about getting Jenkins CI set up in your local environment.
    This chapter will introduce the first CI/CD tool of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why should you have all the requirements information in the beginning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is meant by pain-driven development?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is having many communication channels problematic?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some of the benefits of rotating team members?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a benefit of asking for feedback on existing development practices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How is using metrics and reporting useful in demonstrating the value of CI/CD
    to stakeholders?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do you need to educate leadership on automation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider reading *Continuous Integration, Delivery, and Deployment*, by *Packt
    Publishing*, as this book discusses the value of CI/CD for software organizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/continuous-integration-delivery-and-deployment](https://www.packtpub.com/application-development/continuous-integration-delivery-and-deployment)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
