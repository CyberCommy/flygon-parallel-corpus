- en: Appendix A – Virtual environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A *virtual environment* is a light-weight, self-contained Python installation.
    The main motivation for virtual environments is to allow different projects to
    have control over the versions of installed Python packages, without interfering
    with other Python projects installed on the same host. A virtual environment consists
    of a directory containing a symbolic link to (Unix), or a copy of (Windows), an
    existing Python installation, together with an empty `site-packages` directory
    into which Python packages specific to this virtual environment can be installed.
    A second motivation for virtual environments is that users can create a virtual
    environment without needing administrator rights on their system, making it easy
    for them to install packages locally. A third motivation is that different virtual
    environments can be based on different versions of Python, making it easier to
    test code on say Python 3.4 and Python 3.5 on the same computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using Python 3.3 or later, then you should already have a module
    called `venv` installed on your system. You can verify this by running it from
    the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t have `venv` installed, there is another tool - `virtualenv` - which
    works very similarly. You can get it from the [Python Package Index (PyPI)](https://pypi.python.org/pypi/virtualenv).
    We explain how to install packages from PyPI in Appendix C. You can use either
    `venv` or `virtualenv`, though we’ll use `venv` here, since it is built in to
    recent versions of Python.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a virtual environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using `venv` is very simple: You specify the path of a directory which is to
    contain the new virtual environment. The tool creates the new directory and populates
    it with the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Activating a virtual environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the environment is created you can *activate* it by using the `activate`
    script in the environment’s `bin` directory. On Linux or macOS you have to `source`
    the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'and on Windows you run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you do this your prompt will change to remind you that you’re in a virtual
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Python that will execute when you run `python` is from the virtual environment.
    In fact, using virtual environments is by far the best way to get a predictable
    version of Python when you invoke `python` rather than having to remember to use
    `python` for Python 2 and `python3` for Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: Once in the virtual environment you can work as normal, secure in the knowledge
    that package installations are isolated from the system Python and other virtual
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: Deactivating a virtual environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To leave a virtual environment use the `deactivate` command, which will return
    you to the parent shell from which the virtual environment was activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Other tools for working with virtual environments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you work with virtual environments a lot — we would advocate that you should
    almost always be working within one — managing a plethora of environments can
    itself become something of a chore. Integrated Development Environments such as
    *JetBrains’ PyCharm* contain excellent support for creating and using virtual
    environments. On the command line, we recommend a tool called [virtualenv wrapper](https://virtualenvwrapper.readthedocs.io/en/latest/)
    which makes switching between projects which rely on different virtual environments
    almost trivial, once you’ve done some initial configuration.
  prefs: []
  type: TYPE_NORMAL
