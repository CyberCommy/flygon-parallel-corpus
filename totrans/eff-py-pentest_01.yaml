- en: Chapter 1. Python Scripting Essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is still the leading language in the world of penetration testing (pentesting)
    and information security. Python-based tools include all kinds of tools (used
    for inputting massive amounts of random data to find errors and security loop
    holes), proxies, and even the exploit frameworks. If you are interested in tinkering
    with pentesting tasks, Python is the best language to learn because of its large
    number of reverse engineering and exploitation libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Over the years, Python has received numerous updates and upgrades. For example,
    Python 2 was released in 2000 and Python 3 in 2008\. Unfortunately, Python 3 is
    not backward compatible, hence most of the programs written in Python 2 will not
    work in Python 3\. Even though Python 3 was released in 2008, most of the libraries
    and programs still use Python 2. To do better penetration testing, the tester
    should be able to read, write, and rewrite Python scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Python being a scripting language, security experts have preferred Python as
    a language to develop security toolkits. Its human-readable code, modular design,
    and large number of libraries provide a start for security experts and researchers
    to create sophisticated tools with it. Python comes with a vast library (standard
    library) which accommodates almost everything, from simple I/O to platform-specific
    API  calls. Many of the default and user-contributed libraries and modules can
    help us in penetration testing with building tools to achieve interesting tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the scripting environment in different operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing third party Python libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with virtual environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python language basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the scripting environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your **scripting environment** is basically the computer you use for your daily
    work, combined with all the tools in it that you use to write and run Python programs.
    The best system to learn on is the one you are using right now. This section will
    help you to configure the Python scripting environment on your computer, so that
    you can create and run your own programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Mac OS X or Linux installation on your computer, you may have
    a Python interpreter pre-installed in it. To find out if you have one, open the
    terminal and type `python`. You will probably see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can see that `Python 2.7.6` is installed in this
    system. By issuing `python` in your terminal, you started Python interpreter in
    interactive mode. Here, you can play around with Python commands, and what you
    type will run and you'll see the outputs immediately.
  prefs: []
  type: TYPE_NORMAL
- en: You can use your favorite text editor to write your Python programs. If you
    do not have one, then try installing Geany or Sublime Text and it should be perfect
    for you. These are simple editors and offer a straightforward way to write as
    well as run your Python programs. In Geany, output is shown in a separate terminal
    window, whereas Sublime Text uses an embedded terminal window. Sublime Text is
    not free, but it has a flexible trial policy that allows you to use the editor
    without any stricture. It is one of the few cross-platform text editors that is
    quite apt for beginners and has a full range of functions targeting professionals.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up in Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Linux system is built in a way that makes it smooth for users to get started
    with Python programming. Most Linux distributions already have Python installed.
    For example, the latest versions of Ubuntu and Fedora come with Python 2.7\. Also,
    the latest versions of Redhat Enterprise (RHEL) and CentOS come with Python 2.6\.
    Just for the record, you might want to check this, though.
  prefs: []
  type: TYPE_NORMAL
- en: 'If it is not installed, the easiest way to install Python is to use the default
    package manager of your distribution, such as `apt-get`, `yum`, and so on. Install
    Python by issuing this command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Debian / Ubuntu Linux / Kali Linux users, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For Red Hat / RHEL / CentOS Linux users, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Geany, leverage your distribution''s package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Debian / Ubuntu Linux / Kali Linux users, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For Red Hat / RHEL / CentOS Linux users, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Setting up in Mac
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though Macintosh is a good platform to learn Python, many people using
    Macs actually run some Linux distribution or other on their computer, or run Python
    within a virtual Linux machine. The latest version of Mac OS X, Yosemite, comes
    with Python 2.7 pre-installed. Once you verify that it is working, install Sublime
    Text.
  prefs: []
  type: TYPE_NORMAL
- en: For Python to run on your Mac, you have to install GCC, which can be obtained
    by downloading XCode, the smaller command-line tool. Also, we need to install
    Homebrew, a package manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Homebrew, open terminal and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing Homebrew, you have to insert the Homebrew directory into your
    `PATH` environment variable. You can do this by including the following line in
    your `~/.profile` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to install Python 2.7\. Run the following command in your
    Terminal, which will do the rest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To install Sublime Text, go to Sublime Text's downloads page at [http://www.sublimetext.com/3](http://www.sublimetext.com/3),
    and click on the **OS X** link. This will get you the Sublime Text installer for
    your Mac.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up in Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows does not have Python pre-installed on it. To check if it is installed,
    open a command prompt and type the word `python`, and press *Enter*. In most cases,
    you will get a message that says Windows does not recognize `python` as a command.
  prefs: []
  type: TYPE_NORMAL
- en: We have to download an installer that will set Python for Windows. Then we have
    to install and configure Geany to run Python programs.
  prefs: []
  type: TYPE_NORMAL
- en: Go to Python's download page at [https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)
    and download the Python 2.7 installer that is compatible with your system. If
    you are not aware of your operating system's architecture, then download 32-bit
    installers, which will work on both architectures, but 64-bit will only work on
    64-bit systems.
  prefs: []
  type: TYPE_NORMAL
- en: To install Geany, go to Geany's download page at [http://www.geany.org/Download/Releases](http://www.geany.org/Download/Releases)
    and download the full installer variant, which has a description **Full Installer
    including GTK 2.16**. By default, Geany doesn't know where Python resides on your
    system. So we need to configure it manually.
  prefs: []
  type: TYPE_NORMAL
- en: For that, write a `Hello world` program in Geany, and save it anywhere in your
    system as `hello.py` and run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three methods you can use to run a Python program in Geany:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Build** | **Execute**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press **F5**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the icon with three gears on it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Setting up in Windows](img/image_01_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you have a running `hello.py` program in Geany perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Build** | **Set Build Commands**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then enter the python commands option with `C:\Python27\python -m py_compile
    "%f"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the command with `C:\Python27\python "%f"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you can run your Python programs while coding in Geany.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is recommended to run a Kali Linux distribution as a virtual machine and
    use this as your scripting environment. Kali Linux comes with a number of tools
    pre-installed and is based on Debian Linux, so you'll also be able to install
    a wide variety of additional tools and libraries. Also, some of the libraries
    will not work properly on Windows systems.
  prefs: []
  type: TYPE_NORMAL
- en: Installing third-party libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using many Python libraries throughout this book, and this section
    will help you to install and use third-party libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Setuptools and pip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most useful pieces of third-party Python software is **Setuptools**.
    With Setuptools, you can download and install any compliant Python libraries with
    a single command.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to install Setuptools on any system is to download the `ez_setup.py`
    file from [https://bootstrap.pypa.io/ez_setup.py](https://bootstrap.pypa.io/ez_setup.py)
    and run this file with your Python installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Linux, run this in the terminal with the correct path to `ez_setup.py` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For Windows 8, or old versions of Windows with PowerShell 3 installed, start
    the PowerShell with administrative privileges and run the following command in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For Windows systems without PowerShell 3 installed, download the `ez_setup.py`
    file from the preceding link using your web browser and *run* that file with your
    Python installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pip is a package management system used to install and manage software packages
    written in *Python*. After successful installation of Setuptools, you can install
    `pip` by simply opening a command prompt and running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you could also install `pip` using your default distribution
    package managers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Debian, Ubuntu, and Kali Linux:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'On Fedora:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you could run `pip` from command line. Try installing a package with `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Working with virtual environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtual environments help to separate dependencies required for different projects,
    by working inside a virtual environment it also helps to keep our global site-packages
    directory clean.
  prefs: []
  type: TYPE_NORMAL
- en: Using virtualenv and virtualwrapper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Virtualenv** is a Python module which helps to create isolated Python environments
    for our scripting experiments, which creates a folder with all necessary executable
    files and modules for a basic Python project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install `virtualenv` with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a new virtual environment, create a folder and enter the folder from
    the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will initiate a folder with the provided name in your current working directory
    with all Python executable files and `pip` library, which will then help to install
    other packages in your virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can select a Python interpreter of your choice by providing more parameters,
    such as the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a virtual environment with Python 2.7\. We have to activate
    it before starting to use this virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Using virtualenv and virtualwrapper](img/image_01_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, on the left side of the command prompt, the name of the active virtual
    environment will appear. Any package that you install inside this prompt using
    `pip` will belong to the active virtual environment, which will be isolated from
    all other virtual environments and global installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can deactivate and exit from the current virtual environment using this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Virtualenvwrapper** provides a better way to use `virtualenv`. It also organizes
    all virtual environments in one place.'
  prefs: []
  type: TYPE_NORMAL
- en: To install, we can use `pip`, but let's make sure we have installed `virtualenv`
    before installing `virtualwrapper`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux and OS X users can install it with the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, add these three lines to your shell startup file, such as `.bashrc` or
    `.profile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will set `Devel` folder in your home directory as the location of your
    virtual environment projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows users, we can use another package: `virtualenvwrapper-win`. This
    can also be installed with `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a virtual environment with `virtualwrapper`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This creates a folder with the provided name inside `~/Envs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To activate this environment, we can use the `workon` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This two commands can be combined with the single one as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can deactivate the virtual environment with the same deactivate command
    in `virtualenv`. To delete a virtual environment, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Python language essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will go through the idea of variables, strings, data types,
    networking, and exception handling. For an experienced programmer, this section
    will be just a summary of what you already know about Python.
  prefs: []
  type: TYPE_NORMAL
- en: Variables and types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python is brilliant in case of variables. Variables point to data stored in
    a memory location. This memory location may contain different values, such as
    integers, real numbers, Booleans, strings, lists, and dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Python interprets and declares variables when you set some value to this variable.
    For example, if we set *a = 1* and *b = 2*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we print the sum of these two variables with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The result will be `3` as Python will figure out that both *a* and *b* are numbers.
  prefs: []
  type: TYPE_NORMAL
- en: However, if we had assigned *a = "1"* and *b = "2"*. Then the output will be
    `12`, since both *a* and *b* will be considered as strings. Here, we do not have
    to declare variables or their type before using them as each variable is an object.
    The `type()` method can be used to get the variable type.
  prefs: []
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with any other programming language, strings are one of the important things
    in Python. They are immutable. So, they cannot be changed once defined. There
    are many Python methods which can modify strings. They do nothing to the original
    one, but create a copy and return after modifications. Strings can be delimited
    with single quotes, double quotes, or in case of multiple lines, we can use triple
    quotes syntax. We can use the `\` character to escape additional quotes which
    come inside a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Commonly used string methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string.count(''x'')`: This returns the number of occurrences of `''x''` in
    the string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string.find(''x'')`: This returns the position of character `''x''` in the
    string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string.lower()`: This converts the string into lowercase'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string.upper()`: This converts the string into uppercase'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string.replace(''a'', ''b'')`: This replaces all `a` with `b` in the string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, we can get the number of characters, including white spaces, in a string
    with the `len()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read more about the string function here: [https://docs.python.org/2/library/string.html](https://docs.python.org/2/library/string.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lists allow us to store more than one *variable* inside it and provide a better
    method for sorting arrays of objects in Python. They also have methods which help
    to manipulate the values inside them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print `2`, as Python index starts from 0\. To print out the whole
    list, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This will loop through all elements and print them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Useful list methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.append(value)`: This appends an element at the end of the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.count(''x'')`: This gets the number of `''x''` in the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.index(''x'')`: This returns the index of `''x''` in the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.insert(''y'',''x'')`: This inserts `''x''` at location `''y''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.pop()`: This returns the last element and also removes it from the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.remove(''x'')`: This removes first `''x''` from the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.reverse()`: This reverses the elements in the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.sort()`: This sorts the list alphabetically in ascending order, or numerical
    in ascending order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dictionaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Python dictionary is a storage method for key:value pairs. Python dictionaries
    are enclosed in curly braces, `{}`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This will output `20`. We cannot create multiple values with the same key. This
    will overwrite the previous value of the duplicate keys. Operations on dictionaries
    are unique. Slicing is not supported in dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can combine two distinct dictionaries to one by using the update method.
    Also, the update method will merge existing elements if they conflict:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete elements from a dictionary we can use the `del` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Networking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sockets are the basic blocks behind all network communications by a computer.
    All network communications go through a socket. So, sockets are the virtual endpoints
    of any communication channel that takes place between two applications which may
    reside on the same or different computers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The socket module in Python provides us a better way to create network connections
    with Python. So to make use of this module, we have to import this in our script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This script will get the response header from the server. We will discuss more
    about networking in our later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Handling exceptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even though we wrote syntactically correct scripts, there will be some errors
    while executing them. So, we have to handle the errors properly. The simplest
    way to handle exceptions in Python is by using `try-except`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to divide a number by zero in your Python interpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we can rewrite this script with `try-except` blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This will return the error `integer division or modulo by zero`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register to our website using your e-mail address and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover the mouse pointer on the **SUPPORT** tab at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Code Downloads & Errata**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the book for which you're looking to download the code files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose from the drop-down menu where you purchased this book from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Code Download**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also download the code files by clicking on the `Code Files` button
    on the book's webpage at the Packt Publishing website. This page can be accessed
    by entering the book's name in the **Search** box. Please note that you need to
    be logged in to your Packt account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR / 7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg / iZip / UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip / PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Effective-Python-Penetration-Testing](https://github.com/PacktPublishing/Effective-Python-Penetration-Testing).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have an idea about basic installations and configurations that we have
    to do before coding. Also, we have gone through the basics of the Python language,
    which may help us to speed up scripting in our later chapters. In the next chapter
    we will discuss more investigating network traffic with Scapy, packet sniffing,
    and packet injection.
  prefs: []
  type: TYPE_NORMAL
