- en: '*Chapter 8*: Introducing Kustomize for Kubernetes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to install, use, and create `kubectl`
    plugins.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, let's learn how to use Kustomize for Kubernetes. Kustomize
    allows us to patch Kubernetes templates without changing the application's original
    templates. We are going to learn about Kustomize and how to patch Kubernetes deployments
    with its help.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Kustomize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patching Kubernetes deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Kustomize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kustomize uses overlays for Kubernetes manifests to add, remove, or update configuration
    options without forking. What Kustomize does is take a Kubernetes template, patch
    it with specified changes in `kustomization.yaml`, and then deploy it to Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: It is a handy tool for patching non-complex applications, for example, with
    changes needed for different environments or resource namespacing.
  prefs: []
  type: TYPE_NORMAL
- en: Kustomize is available as a standalone binary and as a native command in `kubectl`
    since v.1.14.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a couple of Kustomize commands, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To show the generated modified templates on the terminal, use the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To deploy generated modified templates on Kubernetes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding examples, `base` is the folder that has the application files
    and `kustomization.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The preceding commands will fail as there is no `base` folder. This is just
    an example of the commands.
  prefs: []
  type: TYPE_NORMAL
- en: Patching a Kubernetes application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, let''s try to patch an application with Kustomize. For this
    example, we have a `kustomize` folder with the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Kustomize examples'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_08_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – Kustomize examples
  prefs: []
  type: TYPE_NORMAL
- en: The `base` folder has three files—`deployment.yaml`, `service.yaml`, and `kustomization.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check the `deployment.yaml` file by running the `$ cat base/deployment.yaml`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – The deployment.yaml file'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_08_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – The deployment.yaml file
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we have the `nginx` deployment template, which
    we are going to use with Kustomize.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get the `service.yaml` file''s content by running the `$ cat base/service.yaml`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – The service.yaml file'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_08_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – The service.yaml file
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we have the `nginx` service template that we are
    going to use with Kustomize.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we are using the `nginx` deployment and service template again
    so it will be easier for you to understand what Kustomize does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get the `kustomization.yaml.yaml` file''s content by running the `$
    cat base/kustomization.yaml` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – The kustomization.yaml file'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_08_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – The kustomization.yaml file
  prefs: []
  type: TYPE_NORMAL
- en: As we are already familiar with the `nginx` deployment and service, let's take
    a look into the `kustomization.yaml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following code from `kustomization.yaml`, we set a new tag for the
    `nginx` image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'images:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: nginx'
  prefs: []
  type: TYPE_NORMAL
- en: 'newTag: 1.19.1'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code sets which `resources` to apply the settings to. As `service`
    does not have images, Kustomize will only apply to the `deployment`, but we will
    need `service` in the later steps, so we are setting it anyway:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '- deployment.yaml'
  prefs: []
  type: TYPE_NORMAL
- en: '- service.yaml'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s check how Kustomize will change the deployment by running the `$kubectl
    kustomize base` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – kubectl kustomize base output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_08_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – kubectl kustomize base output
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding output, you can see that Kustomize generated `service` and
    `deployment` content. The contents of `service` did not change, but let''s take
    a look at `deployment`. Comparing the original file, `base/deployment.yaml`, with
    the preceding output, we see that `- image: nginx:1.18.0` got changed to `- image:
    nginx:1.19.1`, as was specified in the `kustomization.yaml` file.'
  prefs: []
  type: TYPE_NORMAL
- en: It's a nice and easy `image` tag change without modifying the original `deployment.yaml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Such tricks come handy, especially in real-world application deployments, where
    different environments might use different Docker image tags.
  prefs: []
  type: TYPE_NORMAL
- en: Kustomize overlays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a sysadmin, I want to be able to deploy different environments (development
    and production) of my web service with dedicated custom configurations, such as
    the number of replicas, allocated resources, security rules, or other configurations.
    I would like to do this without maintaining duplications of my core application
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, let's learn more advanced customizations using Kustomize to
    deploy to development and production environments and using different namespaces
    and NGINX Docker tags for each environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the `overlays` folder, we have the `development/kustomization.yaml` and `production/kustomization.yaml`
    files; let's check them. In the following screenshot, we have the `kustomization.yaml`
    file, which will be applied to the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get the `overlays/development/kustomization.yaml` file''s content by
    running the `$ cat overlays/development/kustomization.yaml` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – The development/kustomization.yaml content'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_08_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – The development/kustomization.yaml content
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we have the `kustomization.yaml` file, which will
    be applied to the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get the `overlays/production/kustomization.yaml` file''s content by
    running the `$ cat overlays/development/kustomization.yaml` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – The production/kustomization.yaml content'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_08_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.7 – The production/kustomization.yaml content
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we have the `kustomization.yaml` file, which will
    be applied to the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, let''s check the changes we are getting in the `development/kustomization.yaml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see how these changes will be applied to the development `deployment`
    and `service` by running the `$ kubectl kustomize overlays/development` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – The kubectl kustomize overlays/development output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_08_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – The kubectl kustomize overlays/development output
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the `deployment` and `service` names were changed, a namespace
    was added, and the `nginx` image tag was changed as per the `kustomization.yaml`
    file in the `base` folder specification. Great job so far!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s check the `production/kustomization.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The changes we want to apply are very similar to the ones made for `development`,
    but we also want a different Docker image tag to be set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how it is going to work out by running the `$ kubectl kustomize
    overlays/production` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – The kubectl kustomize overlays/production output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_08_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.9 – The kubectl kustomize overlays/production output
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, all the required changes were applied.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Kustomize merges all found `kustomization.yaml` files, and files from the `base`
    folder get applied first, then the files from the `overlay` folder. You can choose
    how to name your folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it is time to actually perform an installation using Kustomize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding commands, we have created the `nginx-prod` namespace and
    installed the `nginx` application with the help of the Kustomize-applied changes,
    which you can see it running.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have learned only some basic functionalities of Kustomize, as it is out
    of scope to cover everything about Kustomize in this book, so please refer to
    the following link for more information: [https://kustomize.io/](https://kustomize.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to install applications using Kustomize.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned how to apply Kustomize to `nginx` deployments and services,
    changing their names, adding namespace, and changing the image tag in the deployment.
    All that was done without changing the application's original templates by using
    `kustomization.yaml` files with Kustomize to make the required changes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to use Helm—the Kubernetes package
    manager.
  prefs: []
  type: TYPE_NORMAL
