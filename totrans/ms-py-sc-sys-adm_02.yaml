- en: Debugging and Profiling Python Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging and profiling play an important role in Python development. The debugger
    helps programmers to analyze the complete code. The debugger sets the breakpoints
    whereas the profilers run our code and give us the details of the execution time.
    The profilers will identify the bottlenecks in your programs. In this chapter,
    we'll learn about the `pdb` Python debugger, `cProfile` module, and `timeit` module
    to time the execution of Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Python debugging techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling (exception handling)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugger tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging basic program crashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling and timing programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making programs run faster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is debugging?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging is a process that resolves the issues that occur in your code and
    prevent your software from running properly. In Python, debugging is very easy.
    The Python debugger sets conditional breakpoints and debugs the source code one
    line at a time. We'll debug our Python scripts using a `pdb` module that's present
    in the Python standard library.
  prefs: []
  type: TYPE_NORMAL
- en: Python debugging techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To better debug a Python program, various techniques are available. We''re
    going to look at four techniques for Python debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: '`print()` statement: This is the simplest way of knowing what''s exactly happening
    so you can check what has been executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`logging`**: This is like a `print` statement but with more contextual information
    so you can understand it fully.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`pdb`** debugger: This is a commonly used debugging technique. The advantage
    of using `pdb` is that you can use `pdb` from the command line, within an interpreter,
    and within a program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IDE debugger: IDE has an integrated debugger. It allows developers to execute
    their code and then the developer can inspect while the program executes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling (exception handling)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to learn how Python handles exceptions. But first,
    what is an exception? An exception is an error that occurs during program execution.
    Whenever any error occurs, Python generates an exception that will be handled
    using a `try…except` block. Some exceptions can't be handled by programs so they
    result in error messages. Now, we are going to see some exception examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Terminal, start the `python3` interactive console and we will see some
    exception examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: These are some examples of exceptions. Now, we will see how we can handle the
    exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever errors occur in your Python program, exceptions are raised. We can
    also forcefully raise an exception using `raise` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to see a `try…except` block that handles an exception. In the `try`
    block, we will write a code that may generate an exception. In the `except` block,
    we will write a solution for that exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for `try…except` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A `try` block can have multiple except statements. We can handle specific exceptions
    also by entering the exception name after the `except` keyword. The syntax for
    handling a specific exception is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to create an `exception_example.py` script to catch `ZeroDivisionError`**.**
    Write the following code in your script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Debuggers tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many debugging tools supported in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '`winpdb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pydev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pydb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pdb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gdb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pyDebug`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we are going to learn about `pdb` Python debugger. `pdb` module
    is a part of Python's standard library and is always available to use.
  prefs: []
  type: TYPE_NORMAL
- en: The pdb debugger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pdb` module is used to debug Python programs. Python programs use `pdb`
    interactive source code debugger to debug the programs. `pdb` sets breakpoints
    and inspects the stack frames, and lists the source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will learn about how we can use the `pdb` debugger. There are three
    ways to use this debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: Within an interpreter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within a Python script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are going to create a `pdb_example.py` script and add the following content
    in that script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using this script as an example to learn Python debugging, we will see how we
    can start the debugger in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Within an interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start the debugger from the Python interactive console, we are using `run()`
    or `runeval()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start your `python3` interactive console. Run the following command to start
    the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Import our `pdb_example` script name and the `pdb` module. Now, we are going
    to use `run()` and we are passing a string expression as an argument to `run()`
    that will be evaluated by the Python interpreter itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To continue debugging, enter `continue` after the (`Pdb`) prompt and press *Enter*.
    If you want to know the options we can use in this, then after the (`Pdb`) prompt
    press the *Tab *key twice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, after entering `continue`, we will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: From a command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The simplest and most straightforward way to run a debugger is from a command
    line. Our program will act as input to the debugger. You can use the debugger
    from command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the debugger from the command line, source code will be loaded
    and it will stop the execution on the first line it finds. Enter `continue` to
    continue the debugging. Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Within a Python script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous two techniques will start the debugger at the beginning of a Python
    program. But this third technique is best for long-running processes. To start
    the debugger within a script, use `set_trace()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, modify your `pdb_example.py` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`set_trace()` is a Python function, therefore you can call it at any point
    in your program.'
  prefs: []
  type: TYPE_NORMAL
- en: So, these are the three ways by which you can start a debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging basic program crashes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to see the trace module. The trace module helps
    in tracing the program execution. So, whenever your Python program crashes, we
    can understand where it crashes. We can use trace module by importing it into
    your script as well as from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create a script named `trace_example.py` and write the following
    content in the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: So, by using `trace --trace` at the command line, the developer can trace the
    program line-by-line. So, whenever the  program crashes, the developer will know
    the instance where it crashes.
  prefs: []
  type: TYPE_NORMAL
- en: Profiling and timing programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Profiling a Python program means measuring an execution time of a program. It
    measures the time spent in each function. Python's `cProfile` module is used for
    profiling a Python program.
  prefs: []
  type: TYPE_NORMAL
- en: The cProfile module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed previously, profiling means measuring the execution time of a program.
    We are going to use the `cProfile` Python module for profiling a program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will write a `cprof_example.py` script and write the following code
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program and you will see the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'So, using `cProfile`, all functions that are called will get printed with the
    time spent on each function. Now, we will see what these column headings mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ncalls`:Number of calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`tottime`**:Total time spent in the given function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percall`: Quotient of `tottime` divided by `ncalls`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cumtime`: Cumulative time spent in this and all `subfunctions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percall`: Quotient of `cumtime` divided by primitive calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename:lineno(function)`: Provides the respective data of each function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: timeit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`timeit` is a Python module used to time small parts of your Python script.
    You can call `timeit` from the command line as well as import the `timeit` module
    into your script. We are going to write a script to time a piece of code. Create
    a `timeit_example.py` script and write the following content into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using `timeit`, we can decide what piece of code we want to measure the performance
    of. So, we can easily define the setup code as well as the code snippet on which
    we want to perform the test separately. The main code runs 1 million times, which
    is the default time, whereas the setup code runs only once.
  prefs: []
  type: TYPE_NORMAL
- en: Making programs run faster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are various ways to make your Python programs run faster, such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Profile your code so you can identify the bottlenecks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use built-in functions and libraries so the interpreter doesn't need to execute
    loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid using globals as Python is very slow in accessing global variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use existing packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the importance of debugging and profiling
    programs. We learned what the different techniques available for debugging are.
    We learned about the `pdb` Python debugger and how to handle exceptions. We learned
    about how to use the `cProfile` and `timeit` modules of Python while profiling
    and timing our scripts. We also learned how to make your scripts run faster.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about unit testing in Python. We
    are going to learn about creating and using unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To debug a program, which module is used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check how to use `ipython` along with all aliases and magic functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is **Global interpreted lock** (**GIL**)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the `PYTHONSTARTUP`, `PYTHONCASEOK`, `PYTHONHOME`, and `PYTHONSTARTUP`
    environment variables?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the output of the following code? a) `[0]`, b) `[1]`, c) `[1, 0]`, d)
    `[0, 1]`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Which of the following is an invalid variable?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) `my_string_1`
  prefs: []
  type: TYPE_NORMAL
- en: b) `1st_string`
  prefs: []
  type: TYPE_NORMAL
- en: c) `foo`
  prefs: []
  type: TYPE_NORMAL
- en: d) `_`
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How to handle GIL problems in python: [https://realpython.com/python-gil/](https://realpython.com/python-gil/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check how to use `pdb` module in command line: [https://fedoramagazine.org/getting-started-python-debugger/](https://fedoramagazine.org/getting-started-python-debugger/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
