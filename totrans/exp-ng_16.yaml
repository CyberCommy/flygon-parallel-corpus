- en: Testing Angular Apps Using Jasmine and Protractor Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jasmine和Protractor框架测试Angular应用程序
- en: Testing is one of the most important aspects in the modern application development
    process. We even have dedicated software development methodologies, primarily
    driven by a test-first approach.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是现代应用程序开发过程中最重要的方面之一。我们甚至有专门的软件开发方法论，主要是基于测试优先的方法。
- en: Along with the testing utilities provided by Angular, there are a few recommended
    frameworks, such as Jasmine, Karma, and Protractor, using which it's easy to create,
    maintain, and write test scripts. Test scripts written in Jasmine and Protractor
    save time and effort, and above all yield good returns by finding defects much
    earlier in the development process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Angular提供的测试工具之外，还有一些推荐的框架，如Jasmine、Karma和Protractor，使用这些框架可以轻松创建、维护和编写测试脚本。使用Jasmine和Protractor编写的测试脚本可以节省时间和精力，并且最重要的是在开发过程中更早地发现缺陷。
- en: 'In this chapter, you will learn all about testing Angular applications using
    Jasmine and Protractor. In this chapter, we will discuss the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用Jasmine和Protractor测试Angular应用程序。在本章中，我们将讨论以下内容：
- en: Learn about important concepts in testing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解测试中的重要概念
- en: Understanding Angular CLI for unit-testing specific environments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Angular CLI用于单元测试特定环境
- en: Introducing the Jasmine framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Jasmine框架
- en: Writing tests scripts using Jasmine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jasmine编写测试脚本
- en: Writing test scripts to test Angular components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写测试脚本来测试Angular组件
- en: 'Testing Angular components: an advanced example'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试Angular组件：一个高级示例
- en: Testing Angular services using Jasmine test scripts
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jasmine测试脚本测试Angular服务
- en: Learning about Protractor
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Protractor
- en: Writing E2E test scripts using Protractor
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Protractor编写E2E测试脚本
- en: Concepts in testing
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试中的概念
- en: 'Before we start testing our Angular applications, it''s important that we quickly
    brush up on and understand some of the most commonly used terms in testing:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始测试我们的Angular应用程序之前，重要的是我们快速复习并了解一些在测试中常用的术语：
- en: '**Unit test**: One can view a unit test as the smallest testable part of an
    application.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：一个单元测试可以被视为应用程序中最小的可测试部分。'
- en: '**Test case**: This is a set of test inputs, execution conditions, and expected
    results for achieving an objective. In the Jasmine framework, these are referred
    to as specs.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试用例**：这是一组测试输入、执行条件和期望结果，以实现一个目标。在Jasmine框架中，这些被称为规范。'
- en: '**TestBed**: TestBed is a method of testing a particular module in an isolated
    fashion by passing all the required data and objects.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TestBed**：TestBed是一种通过传递所有必需的数据和对象来以隔离的方式测试特定模块的方法。'
- en: '**Test suite**: This is a collection of test cases that are intended to be
    used to test a module end to end.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试套件**：这是一组旨在用于端到端测试模块的测试用例集合。'
- en: '**System test**: The tests conducted on a complete and integrated system to
    evaluate the system functionality.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统测试**：对完整和集成的系统进行的测试，以评估系统功能。'
- en: '**E2E test**: It is a testing method, which determines whether the behavior
    of the application is as required. We pass the data, required objects, and dependencies
    and is performed from start to finish under mocking the real-time use cases and
    scenarios.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端到端测试**：这是一种测试方法，用于确定应用程序的行为是否符合要求。我们传递数据、必需对象和依赖项，并在模拟实时用例和场景的情况下从头到尾执行。'
- en: Now that we know the preceding terms, let's learn about testing Angular applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道了前面的术语，让我们学习如何测试Angular应用程序。
- en: Understanding and setting up Angular CLI for testing
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解并设置Angular CLI进行测试
- en: So far, we have used Angular CLI for setting up our project, creating new components,
    services, and more. We will now discuss how to use the command-line tool to set
    and execute test suites to test our Angular applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'First things first, a quick recap on how to create a project quickly using
    Angular CLI:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using the preceding code snippet, we installed the Angular command-line tool.
    Now, let''s create a new directory named `test-app` and navigate inside the project
    directory:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It''s time to quickly create a new component called `test-app`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we will see the output as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/46868d9b-453f-4048-9c52-73bb40e9c73c.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: We should see the new directory and the corresponding files created in the directory.
    The command-line tool has created four files related to the component, including
    the `test-app.component.spec.ts` test script placeholder file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s get our application up-and-running:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At this point, we have our application up-and-running. Now it's time to get
    started with testing our Angular applications.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Jasmine framework
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jasmine is a behavior-driven development framework for testing JavaScript code.
    This is how the official site explains Jasmine:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Jasmine is a behavior-driven development framework for testing JavaScript code.
    It does not depend on any other JavaScript frameworks. It does not require a DOM.
    And it has a clean, obvious syntax so that you can easily write tests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax of a Jasmine test suite is given as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s analyze the preceding code snippet to understand the test suite syntax.
    The following steps have been followed:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Every Jasmine test suite will have a `describe` statement, where we can give
    a name.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the test suite, we create smaller tests cases using the `it` statement;
    each test case will have two parameters, a name and a function, which will have
    our application logic that needs be tested.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use the `expect` statements to verify the data to make sure that our application
    and the data are working as expected.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, you will learn about the Jasmine framework and the available
    methods and functions that we can use in our test scripts in detail.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: The Jasmine framework - Global methods we can use
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Jasmine framework supports and provides a lot of predefined methods for
    us to use and write our test suites. Jasmine has vast support for testing environments,
    spying on elements, and much more. Refer to the official website for complete
    help and documentation on available methods.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine框架支持并为我们提供了许多预定义的方法来使用和编写我们的测试套件。 Jasmine对测试环境、对元素进行间谍操作等提供了广泛的支持。请参阅官方网站以获取有关可用方法的完整帮助和文档。
- en: For writing test scripts, we will need a basic understanding and knowledge of
    some of the most commonly and frequently used methods in the Jasmine framework.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写测试脚本，我们需要对Jasmine框架中最常用和频繁使用的一些方法有基本的理解和知识。
- en: Commonly used methods in Jasmine
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jasmine中常用的方法
- en: 'Here''s a list of the most commonly used Jasmine global methods available to
    write test suites:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是编写测试套件可用的最常用的Jasmine全局方法列表：
- en: '| **Global Methods** | **Description** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **全局方法** | **描述** |'
- en: '| describe | The describe function is a block of code that implements the test
    suite |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| describe | describe函数是实现测试套件的代码块 |'
- en: '| it | Specs are defined by calling the global Jasmine function `it`, which
    as described takes a string and a function |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| it | 通过调用全局Jasmine函数`it`来定义规范，如所述，它接受一个字符串和一个函数 |'
- en: '| beforeEach | This method is called once before each spec in the describe
    in which it is called |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| beforeEach | 此方法在调用它的描述中的每个规范之前调用一次 |'
- en: '| afterEach | This method is called once after each spec |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| afterEach | 此方法在每个规范后调用一次 |'
- en: '| beforeAll | This method is called once before all specs in the describe |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| beforeAll | 此方法在描述中的所有规范之前调用一次 |'
- en: '| afterAll | This method is called only once after all the specs are called
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| afterAll | 此方法仅在所有规范调用后调用一次 |'
- en: '| xdescribe | This temporarily disables tests that you don''t want to execute
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| xdescribe | 这会暂时禁用您不想执行的测试 |'
- en: '| pending | Pending specs do not run; they are added to the pending results
    list |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| pending | 未运行的待定规范将被添加到待定结果列表中 |'
- en: '| xit | Any spec declared with xit is marked as pending |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| xit | 任何使用xit声明的规范都会被标记为待定 |'
- en: '| spyOn | A spy can stub any function and tracks calls to it and all arguments;
    this is used inside the describe or it statements |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| spyOn | 间谍可以替换任何函数并跟踪对它的调用和所有参数；这在描述或it语句内部使用 |'
- en: '| spyOnProperty | Every call to a spy is tracked and exposed on the calls property
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| spyOnProperty | 对间谍的每次调用都会被跟踪并暴露在calls属性上 |'
- en: For more details and complete documentation, refer to Jasmine framework documentation
    on GitHub.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和完整文档，请参阅GitHub上的Jasmine框架文档。
- en: Angular CLI and Jasmine framework - First test
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular CLI和Jasmine框架-第一个测试
- en: When we install Angular CLI, the Jasmine framework is automatically shipped
    with the tool.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Angular CLI时，Jasmine框架会自动与工具一起提供。
- en: 'In the preceding section, we saw the general syntax of writing a test in Jasmine.
    Now, let''s write a quick test script using the Jasmine framework:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们看到了在Jasmine中编写测试的一般语法。现在，让我们使用Jasmine框架编写一个快速的测试脚本：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following are the important things to note about the preceding test script:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于前面的测试脚本的重要事项：
- en: We write a `describe` statement to describe the test script.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们编写一个`describe`语句来描述测试脚本。
- en: We then define a test script using an `it` statement and a corresponding method.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们使用`it`语句和相应的方法定义一个测试脚本。
- en: In the `expect` statement, we assert two numbers, and using `toEqual` we test
    whether the addition of two numbers matches to `3`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`expect`语句中，我们断言两个数字，并使用`toEqual`测试两个数字的相加是否等于`3`。
- en: Testing Angular components with Jasmine
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jasmine测试Angular组件
- en: It's time to create our test suite using the Jasmine framework. In the first
    section, *Understanding and setting up Angular CLI for testing*, we created the
    component `TestAppComponent` and the `test-app.component.ts` file using the `ng`
    command. We will continue to use the same in this section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, add all the contents of the file with the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s analyze the preceding test suite step by step. The steps that have been
    followed in the code block are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: In the first step, we imported all the required modules for testing from `@angular/core/testing`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We imported the newly created component, `TestAppComponent`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a test suite by writing a `describe` statement with a name, `Testing
    App Component`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We wrote a test script using `it` and the corresponding method: `() =>`.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a `component` object of the `TestAppComponent` class.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then asserted whether the value returned is true or not. A value is `toBeTruthy`
    if the coercion of this value to a `boolean` yields the value true.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All test suites written will end with a `.spec.ts` extension, for example, `test-app.component.spec.ts`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: We are good so far! That's great, and now we will run our test suite and see
    its output.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'We are still using the Angular CLI tool; let''s run the tests using the `ng`
    command in the project directory, and run the following command in the terminal:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The command-line tool will build the entire application, open a new Chrome window,
    run the tests using Karma test runner, and run the Jasmine test suite.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Karma test runner spawns a web server that executes all the tests in the browser
    and watches all the configurations specified in `karma.conf.js`. We can use the
    test runner to run work with various frameworks, including Jasmine and Mocha.
    The web server collects the results from all of the captured browsers and displays
    them to the developers.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'We should see the output as shown in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b19a3651-feaf-4aae-a83c-120f0530538e.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: If you see the preceding screenshot, congrats. You have successfully executed
    the test suite, and note that the test script has passed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! Now, let's dig deep and create more complex test scripts for testing
    components and services.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular components with Jasmine
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our preceding example, we have seen a basic example of writing a test script
    and testing Angular components.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore writing best practices for testing Angular
    components. We will use the same component we created in the preceding section--`TestAppComponent`--and
    expand the test suite more by adding variables and methods.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨编写测试Angular组件的最佳实践。我们将使用在前一节中创建的相同组件--`TestAppComponent`--并通过添加变量和方法来扩展测试套件。
- en: 'In the `test-app.component.ts` file, let''s create a few variables and map
    them into the view:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在`test-app.component.ts`文件中，让我们创建一些变量并将它们映射到视图中：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s analyze the preceding code we have written in our `test-app.component.ts`
    file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析在我们的`test-app.component.ts`文件中编写的前面的代码：
- en: We created a component--`TestAppComponent`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个组件--`TestAppComponent`。
- en: We mapped the respective HTML and CSS files in `templateUrl` and `styleUrls`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`templateUrl`和`styleUrls`中映射了相应的HTML和CSS文件。
- en: We declared a public `variable` called `authorName` and assigned the value `'Sridhar'`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们声明了一个名为`authorName`的公共`变量`，并赋予了值`'Sridhar'`。
- en: 'Now, let''s move over to `test-app.component.spec.ts`. We will write our test
    suite and define a test case to verify that `authorName` matches the string passed:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到`test-app.component.spec.ts`。我们将编写我们的测试套件，并定义一个测试用例来验证`authorName`是否与传递的字符串匹配：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s analyze the preceding code snippet in the `test-app.component.spec.ts`
    file. The subsequent steps have been followed for the code block:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析在`test-app.component.spec.ts`文件中前面的代码片段。已遵循以下步骤来编写代码块：
- en: We imported all the required modules `async`, `componentFixture`, and `TestBed`
    for running the tests.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入了所有必需的模块`async`、`componentFixture`和`TestBed`来运行测试。
- en: We created a test suite by writing the `describe` statement and assigned the
    `Testing App Component` name.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过编写`describe`语句并分配`Testing App Component`名称来创建了一个测试套件。
- en: We created a test case and created a new instance of the component `TestAppComponent`
    class.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个测试用例，并创建了`TestAppComponent`类的新实例。
- en: In the `expect` statement, we asserted whether the `authorName` variable matches
    the string. The result will return true or false.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`expect`语句中，我们断言`authorName`变量是否与字符串匹配。结果将返回true或false。
- en: Great! So far, so good. Now, read on.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！到目前为止，一切顺利。现在，继续阅读。
- en: Time to take it to the next level. We will add new methods to the `component`
    class and test them in the `specs` file.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候将其提升到下一个级别了。我们将向`component`类添加新方法，并在`specs`文件中对它们进行测试。
- en: 'In the `test-app.component.ts` file, let''s add a variable and a method:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在`test-app.component.ts`文件中，让我们添加一个变量和一个方法：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's create the `test-app.component.spec.ts` file and test the variable and
    the method we defined in the `component` class.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`test-app.component.spec.ts`文件，并测试在`component`类中定义的变量和方法。
- en: 'In the `test-app.component.spec.ts` file, add the following lines of code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在`test-app.component.spec.ts`文件中，添加以下代码行：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s analyze the preceding code snippet in detail. The following steps have
    been adhered to:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码片段。已遵守以下步骤：
- en: We created a test case and created a `component` instance of the `TestAppComponent`
    class.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个测试用例，并创建了`TestAppComponent`类的`component`实例。
- en: In the `expect` statement, we asserted and verified that the string passed matches
    the return value of the `hiPackt` method.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`expect`语句中，我们断言并验证传递的字符串是否与`hiPackt`方法的返回值匹配。
- en: 'Before we run the preceding test script, let''s also quickly take a look at
    one more test case:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行前面的测试脚本之前，让我们也快速看一下另一个测试用例：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s analyze the preceding code snippet:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析前面的代码片段：
- en: We implemented the `beforeEach` Jasmine method. We are creating an instance
    of `AppComponent` before each test script.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们实现了`beforeEach` Jasmine方法。我们在每个测试脚本之前创建一个`AppComponent`的实例。
- en: We wrote a test script and used the instance of the component, that is, `this.app`,
    we get the value of the `publisherName` variable, and assert whether the value
    of the `publisherName` variable matches `toBe('Packt')`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们编写了一个测试脚本，并使用了组件的实例，也就是`this.app`，我们获取了`publisherName`变量的值，并断言`publisherName`变量的值是否与`toBe('Packt')`匹配。
- en: Now, the tests should autobuild or else invoke `ng test` to run the tests.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，测试应该自动构建，否则调用`ng test`来运行测试。
- en: 'We should see the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下截图：
- en: '![](assets/baf610e7-e3f7-4565-94bc-ab402e678f1f.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/baf610e7-e3f7-4565-94bc-ab402e678f1f.png)'
- en: Great! You learned to write test scripts to test our Angular components, both
    variables and methods.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您学会了编写测试脚本来测试我们的Angular组件，包括变量和方法。
- en: You learned to use some of the Jasmine framework's built-in methods, such as
    `beforeEach`, `expect`, `toBeTruthy`, and `toBe`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您学会了使用Jasmine框架的一些内置方法，比如`beforeEach`、`expect`、`toBeTruthy`和`toBe`。
- en: In the next section, we will continue to learn advanced techniques and write
    more test scripts to test Angular components in even more detail.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将继续学习高级技术，并编写更多的测试脚本，以更详细地测试Angular组件。
- en: Testing Angular components - Advanced
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Angular组件-高级
- en: In this section, we will delve more deeply and learn some more important and
    advanced aspects of testing Angular components.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更深入地探讨并学习测试Angular组件的一些更重要和高级的方面。
- en: 'If you observe, you can note the following in the example mentioned in the
    preceding section:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到，在前面部分的示例中可以注意到以下内容：
- en: We create an instance of the object individually each time in each test case.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在每个测试用例中单独创建了对象的实例。
- en: We have to inject all the providers individually for each test case.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须为每个测试用例单独注入所有的提供者。
- en: Instead, it will be great if we can define an instance of the component before
    each test script. We can achieve this by using `TestBed`--one of the most important
    utilities provided by Angular for testing.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果我们可以在每个测试脚本之前定义组件的实例，那将是很好的。我们可以通过使用`TestBed`来实现这一点--这是Angular提供的用于测试的最重要的实用程序之一。
- en: TestBed
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TestBed
- en: '`TestBed` is the most important testing utility provided by Angular. It creates
    an Angular testing module--an `@NgModule` class, which we can use for our testing
    purposes.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestBed`是Angular提供的最重要的测试实用程序。它创建了一个Angular测试模块--一个`@NgModule`类，我们可以用于测试目的。'
- en: Since it creates an `@NgModule`, we can define providers, imports, and exports--similar
    to our regular `@NgModule` configuration.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它创建了一个`@NgModule`，我们可以定义提供者、导入和导出--类似于我们常规的`@NgModule`配置。
- en: We can configure `TestBed` in either `async` or `sync` mode.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`async`或`sync`模式下配置`TestBed`。
- en: For configuring `TestBed` asynchronously, we will use `configureTestingModule`
    to define the metadata of the object
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了异步配置`TestBed`，我们将使用`configureTestingModule`来定义对象的元数据。
- en: For configuring `TestBed` synchronously, we will define object instances of
    the component as discussed in our preceding section
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了同步配置`TestBed`，我们将根据前面部分的讨论定义组件的对象实例。
- en: 'Now, let''s take a look at the code snippet as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下以下代码片段：
- en: '[PRE13]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The important things to note in the preceding code snippet:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中需要注意的重要事项：
- en: We defined `beforeEach`, which means that this piece of code will run before
    each test case.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了`beforeEach`，这意味着这段代码将在每个测试用例运行之前运行。
- en: We created a component instance using `TestBed`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`TestBed`创建了一个组件实例。
- en: Using `TestBed` sync way, we defined a `fixture` variable, which creates the
    component, `AppComponent`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`TestBed`同步方式，我们定义了一个`fixture`变量，它创建了组件`AppComponent`。
- en: Using `componentInstance`, we created a `comp` variable, which is a test instance
    of `AppComponent`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`componentInstance`，我们创建了一个`comp`变量，它是`AppComponent`的一个测试实例。
- en: Using the `debugElement` function, we can define and target a specific element
    in the view.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`debugElement`函数，我们可以在视图中定义和定位特定的元素。
- en: Using `debugElement`, we can target an individual element by the CSS element
    selector.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`debugElement`，我们可以通过CSS元素选择器来定位单个元素。
- en: Now, using the preceding `beforeEach` method, which has the component instance,
    we will create our test scripts for testing Angular components.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用前面的`beforeEach`方法，该方法具有组件实例，我们将创建用于测试Angular组件的测试脚本。
- en: Example - Writing test scripts with change detection
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 - 使用变化检测编写测试脚本
- en: In this section, we will continue to write some more test scripts unit tests
    with a twist. We will implement change detection and element tracking as well.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将继续编写一些带有变化的测试脚本单元测试。我们还将实现变化检测和元素跟踪。
- en: 'Let''s get started by creating a simple `app.component.ts` component:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一个简单的`app.component.ts`组件：
- en: '[PRE14]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s analyze the preceding code snippet:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析上述代码片段：
- en: We created a `AppComponent` component class.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个`AppComponent`组件类。
- en: We declared a `title` variable with a value.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们声明了一个具有值的`title`变量。
- en: We mapped the component's template and style files to their respective `templateUrl`
    and `styleUrls`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将组件的模板和样式文件映射到它们各自的`templateUrl`和`styleUrls`。
- en: 'In `app.component.html`, add the following code:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.component.html`中，添加以下代码：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, we are adding a `<h1>` tag and mapping the `title` variable.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在添加一个`<h1>`标签并映射`title`变量。
- en: 'Now, it''s time to create our test script with multiple assertions. However,
    before we write our test script, let''s understand the use cases:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建我们的测试脚本，其中包含多个断言。但在编写测试脚本之前，让我们了解用例：
- en: We will write the script to check whether `ChangeDetectTestComponent` is created.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将编写脚本来检查是否创建了`ChangeDetectTestComponent`。
- en: We will write the assertion to check whether `title` is equal to `Packt Testing
    works`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将编写断言来检查`title`是否等于`Packt Testing works`。
- en: Finally, we will check for a change detection and verify that the `h1` tag should
    be rendered and contains the value `Packt Testing works`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将检查变化检测并验证`h1`标记是否应呈现并包含值`Packt Testing works`。
- en: We will also make use of `querySelector` to target a specific element and match
    the value.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将利用`querySelector`来定位特定的元素并匹配值。
- en: 'Now, let''s take a look at the test scripts for the preceding use cases:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看前面用例的测试脚本：
- en: '[PRE16]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析上述代码片段：
- en: We import the required modules, namely `TestBed`, `ComponentFixture`, and `async`,
    from `angular/core/testing`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从`angular/core/testing`中导入所需的模块，即`TestBed`，`ComponentFixture`和`async`。
- en: We define `beforeEach` and initiate the variables fixture, `comp` and `de`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义`beforeEach`并初始化变量`fixture`，`comp`和`de`。
- en: In the first test script, we write a simple expect statement for the component,
    `tobeTruthy`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个测试脚本中，我们为组件编写了一个简单的期望语句，即`tobeTruthy`。
- en: In the second test script, we create an instance of the component via `TestBed.createComponent`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个测试脚本中，我们通过`TestBed.createComponent`创建了组件的实例。
- en: Using `debugElement`, we create the instance of the created component, that
    is, `app`.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`debugElement`，我们创建了已创建组件的实例，即`app`。
- en: Using the instance of the `app` component, we are able get the `title` of the
    component and assert `toEqual`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`app`组件的实例，我们能够获取组件的`title`并断言`toEqual`。
- en: In the last test script, we make use of the `async` method. We make use of the
    `debugElement` `nativeElement` method and target an element--`<h1>`, in our case--and
    check whether the title contain `Packt Testing Works`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一个测试脚本中，我们使用`async`方法。我们利用`debugElement`的`nativeElement`方法并定位一个元素--在我们的情况下是`<h1>`，并检查标题是否包含`Packt
    Testing Works`。
- en: The difference between the second and third test script is that we are making
    use of the `async` method and waiting for changes to be detected--`detectChanges`--in
    the third test script.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个和第三个测试脚本之间的区别在于我们使用了`async`方法，并等待变化被检测--`detectChanges`--在第三个测试脚本中。
- en: 'Run the tests, and we should see the output as shown in the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试，我们应该看到如下截图所示的输出：
- en: '![](assets/f5076db7-4e34-4f32-8a80-0c1723b18248.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f5076db7-4e34-4f32-8a80-0c1723b18248.png)'
- en: In this section, you learned how to create a component instance using `beforeEach`
    for all the test scripts and how to use `nativeElement` to target any element.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学会了如何使用`beforeEach`为所有测试脚本创建一个组件实例，以及如何使用`nativeElement`来定位任何元素。
- en: We used the `detectChanges` method to identify the changes happening in the
    element.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`detectChanges`方法来识别元素中发生的变化。
- en: In the subsequent sections, we will continue to learn more about the Jasmine
    framework for testing Angular services.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将继续学习有关Jasmine框架测试Angular服务的更多知识。
- en: Testing Angular services
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Angular服务
- en: In this section, we will learn about testing Angular services.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关测试Angular服务的知识。
- en: In most Angular applications, writing services is an important and core aspect
    as it performs the interactions with backend services; creating and sharing data
    between components and are easy to maintain in the long run. Hence, it's equally
    important to make sure that we are testing our Angular services thoroughly.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数Angular应用程序中，编写服务是一个重要且核心的方面，因为它执行与后端服务的交互；创建和共享组件之间的数据，并且在长期内易于维护。因此，确保我们彻底测试我们的Angular服务同样重要。
- en: Let's learn how to write test scripts for testing our services. In order to
    test a service, let's first create a service using the `ng` command.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何编写测试脚本来测试我们的服务。为了测试一个服务，让我们首先使用`ng`命令创建一个服务。
- en: 'Run the following command in your terminal:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的终端中运行以下命令：
- en: '[PRE17]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding command will generate the `test-app.service.ts` and `test-app.service.spec.ts`
    files in the `test-app` folder.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在`test-app`文件夹中生成`test-app.service.ts`和`test-app.service.spec.ts`文件。
- en: Services are injectable, which means that we have to import them into their
    respective components, add them to the providers list, and create an instance
    of the service in the component constructor.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是可注入的，这意味着我们必须将它们导入到它们各自的组件中，将它们添加到提供者列表中，并在组件构造函数中创建服务的实例。
- en: 'We modify `test-app.service.ts` and add the following code to it:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改`test-app.service.ts`并向其中添加以下代码：
- en: '[PRE18]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Note the following important things from the preceding code snippet:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码片段中注意以下重要事项：
- en: We imported the `injectable` from Angular core.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从Angular核心中导入了`injectable`。
- en: We defined the `@injectable` metadata and created a class for our service--`TestAppService`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了`@injectable`元数据，并为我们的服务创建了一个类--`TestAppService`。
- en: We defined the `getAuthorCount` method to return the count of author.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了`getAuthorCount`方法来返回作者的数量。
- en: We need to import and inject the service class into the component. To test the
    preceding service, we will write our tests scripts in the `test-app.service.specs.ts`
    file.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将服务类导入并注入到组件中。为了测试上述服务，我们将在`test-app.service.specs.ts`文件中编写我们的测试脚本。
- en: The way we write test scripts for testing services is similar to how we write
    for testing components.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写测试服务的方式与编写测试组件的方式类似。
- en: 'Now, let''s create the test suite for testing a service by adding the following
    code in the `test-app.service.spec.ts` file:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过在`test-app.service.spec.ts`文件中添加以下代码来创建测试套件以测试一个服务：
- en: '[PRE19]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'An analysis of the preceding code is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的分析如下：
- en: We import the required modules, `TestBed` and `inject`, into the `spec` file.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将所需的模块`TestBed`和`inject`导入到`spec`文件中。
- en: We import the `TestAppService` service into the `spec` file.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using **Dependency Injection**(**DI**), we create the `service` instance of
    `TestAppService`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We create a test case; we need to inject the service, invoke the `getAuthorCount`
    method, and assert whether the value matches to `4`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output when we run the tests:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8a77bcb2-5ef1-4267-a8d1-1c891a22616f.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: In this section, you learned about unit testing using Jasmine test scripts for
    Angular components and services.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: We have to inject the service using DI in every test case.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular services - Mocking backend services
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, you learned how to write test scripts to test our
    Angular services. In this section, we will write a test script and learn how to
    mock backend services in real-time projects.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the use cases we will writing our test scripts for:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Write a test script to test a method in service.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a test script to check whether the return value of the method contains
    a particular value.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a test script to mock the backend connection using `mockBackend` and also
    check whether the target URL is correct.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a test script to set the `mockResponse` for the request URL.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, call a method written in `service` and map the response, which should
    be equal to the `mockResponse`.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create our service `test.service.ts` file and add the following code
    to it:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The important things to note in the preceding code snippet are as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: We are importing the required module into the `spec` file, namely `injectable`
    from `Angular/core`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the required module into the `spec` file, namely `Http` from
    `Angular/http`.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the required module into the `spec` file, namely `Observable`
    from `Angular/rxjs`.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are creating the component class for `TestService`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are using the `@injectable` decorator, which will allow the service to be
    injected into any component or service.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the constructor, we are injecting the `HTTP` service and creating an instance
    HTTP.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are creating three methods: `getPublications`, `getProducts`, and `search`.'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `getProducts`, we are making an HTTP call, which, of course, we use to mock
    the server URL.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are mapping the response of the HTTP request to the `response` variable.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our service ready, we can start writing our test spec file
    to test the variables and methods.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we write our test scripts in the `spec` file, let''s create a `beforeEach`
    method, which will have all the initiations, and we register the providers before
    each test script:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Just as we defined the `beforeEach` method for testing Angular components, we
    define the `beforeEach` method for services. In the providers array configuration,
    we are registering the `XHRBackend` class.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Since services have dependencies on other modules and require providers, we
    need to define and register the required services using `configureTestingModule`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: We are defining a `beforeEach` method, which will be executed before each test
    script.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `TestBed`, we are configuring the test module using `configuringTestingModule`.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the parameters passed in `configureTestingModule` are similar to the metadata
    passed to the `@NgModule` decorator, we can specify providers and imports.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `imports`, we import the `HttpModule`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are configuring the required dependencies--`XHRBackend` and `TestService`--in
    the providers list.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are registering a provider, `XHRBackend` with an injection token and setting
    the provider to `XHRBackend`, so that, when we request the provider, the DI system
    returns a `XHRBackend` instance.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we can create the `spec` file, `test.service.spec.ts`, and add the following
    code to the file:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'It''s a long code snippet, so let''s break it down for analysis:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: We are importing the `TestService` service file into the `spec` file.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the required modules, `TestBed` and `inject`, from `@angular/core/testing`.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the modules, `MockBackend` and `MockConnection`, from `@angular/http/testing`.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the modules, `HttpModule`, `XHRBackend`, `ResponseOptions`,
    `Response`, and `RequestMethod`, from `@angular/http`.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We define a `mockResponse` variable, which has a temp `json` object.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also define a `mockResponseText` variable and assign it a value.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use the `beforeEach` method we defined earlier, through which we will
    register all the providers and dependencies.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the first test script, we are registering the `TestService` instance as `service`
    and the `XHRBackend` instance as `XHRBackend`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are calling the `service.getpublications()` method, which will return the
    array.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the result names, we are asserting the values to contain the strings passed
    as test data.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second test script, we are creating connections using `mockBackend` and
    passing the requests `method` and `url` using `subscribe`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `mockRespond` connection, we are setting the response value as `mockResponse`.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are also calling the `getbooks` method, mapping the response, and asserting
    the `toEqual` value to `mockResponse`.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the tests; we should see the output shown in the following screenshot:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2b790ded-b7b3-4404-8546-71ff4121305a.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
- en: If you see the preceding screenshot, that's great.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: So far, in this section, you have learned and explored the Jasmine framework
    and its built-in methods available for testing Angular components and services.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'We discussed testing Angular components: testing the variables and methods.
    We also discussed how to write the `beforeEach` method to be executed before each
    test script and how to create an instance of the component and access its properties.
    We also covered testing Angular services using the Jasmine framework and testing
    Angular services and their properties: variables and methods.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: For testing Angular services, you learned how to create a `beforeEach` method,
    which will be executed before each test script and will have the providers and
    dependencies created once before each test script.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: You learned to test the backend services by mocking the services. This is really
    useful when you are independently developing Angular services and components.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about using the Protractor framework for
    testing the end-to-end tests.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Protractor framework
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding sections, you learned about unit testing using Jasmine. In
    this section, you will learn about using the Protractor framework for the end-to-end
    testing of Angular applications.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the official site explains Protractor:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Protractor is an end-to-end test framework for Angular and AngularJS applications.
    Protractor runs tests against your application running in a real browser, interacting
    with it as a user would.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: 'Protractor framework is packaged in the Angular CLI tool, and we can find the
    `e2e` folder created in our main project directory:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c51d099a-d28f-4094-9f14-6c1d83c3bea4.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
- en: You will learn to write end-to-end tests for your Angular applications and keep
    them under the `e2e` folder.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Remember that it's a best practice to create separate E2E scripts for each functionality
    or page.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Protractor - A quick overview
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Protractor is a wrapper around Selenium WebDriver that provides a lot of built-in
    classes and methods, which we can use for writing end-to-end testing.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Protractor API exposes various classes and methods mainly around `Browser`,
    `Element`, `Locators`, and `ExpectedConditions`.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: The Protractor supports the two latest major versions of Chrome, Firefox, Safari,
    and IE--which means we can write our test scripts and run them on any/all of the
    leading browsers available.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: For writing end-to-end tests, we will need to target the elements in the page,
    read their properties, update the attributes, and invoke methods attached to the
    elements or send and verify the data.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss various classes and methods available in the Protractor framework
    using which we can automate our application functionality by writing end-to-end
    testing.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Let's learn about the methods and classes available, which we can employ using
    the Protractor framework.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Protractor and DOM
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about interacting with DOM elements in the page
    using Protractor.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Protractor API supports and exposes classes and methods for targeting element(s)
    in the page. We need to mention explicitly whether we need to target a specific
    element or if we are expecting a group of elements to be returned.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: The `element` function is used to find HTML elements on your webpage. It returns
    an `ElementFinder` object, which can be used to interact with the element or get
    information about the properties and methods attached to it.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: We will need to find, edit, remove, and add elements and their properties in
    the page dynamically. However, to implement these use cases, we need to first
    define and find the target elements.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define target element(s) using the following methods:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '`element`: This method will return a single/specific element:'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`element.all`: This method returns a collection of elements:'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Using the aforementioned methods, we can target any and all elements in the
    page. In next section, you will learn about available methods we can use to find
    elements along with the `element` or `element.all` methods.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Some methods available to select element(s)
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, we saw a list of the most frequently used methods
    to select or target an element or multiple elements in the page.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: To use the previously discussed methods, you need to mention explicitly whether
    you need to target a specific element or if we are expecting a group of elements
    to be returned.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: In this section, let's learn about available methods and ways to target/select
    elements in our test script. We can target one or more elements in one go.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: We can use almost all attributes, properties, and custom directives to target
    specific elements.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some of the ways we can target elements in the test script:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '`by.css`: We can pass the CSS selector to select a element(s):'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: CSS `selectors` are the most commonly and frequently used method for targeting
    and selecting elements.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '`by.model`: We use this to select or target an element using the `ng-model`
    name bound to the element:'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note that the official documentation still suggests using CSS selectors instead
    of model.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '`by.repeater`: We use this method to select elements displayed using the `ng-repeat`
    directive:'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`by.id`: We use this method to select an element using it''s ID:'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`by.binding`: Use this to select elements associated with one-way or two-way
    Angular binding:'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`by.xpath`: Use this to select element(s) by traversing through `xpath`:'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`first()`, `last()`, or specific elements: We use these methods to get elements
    at specific locations or indices:'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We learned about some of the methods we can use to target elements by using
    their properties and information. For a complete list of methods available, refer
    to the official documentation for Protractor on GitHub.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about various built-in methods we can use
    to write test scripts to automate the application logic.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Protractor API
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about various built-in classes and methods available
    in the Protractor API, which we can use for writing our test scripts.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: The Protractor API has a lot of predefined built-in properties and methods for
    `Browser`, `Element`, `Locators`, and `ExpectedConditions` support.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: It provides a lot of built-in methods ranging from click events to setting the
    data for inputs forms, from getting text to getting URL details and much more,
    to simulate actions and events in the application page.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at some of the available built-in methods to simulate
    user interactions:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '`click`: Using this method, we can schedule a command to click on this element.
    The method is used to simulate any click events in the page:'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`getTagName`: This gets the tag/node name of the element:'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`sendKeys`: Using this method, we can schedule a command to type a sequence
    on the DOM element:'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`isDisplayed`: Using this method, we can schedule a command to test whether
    this element is currently displayed in the page:'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`Wait`: Using this method, we can execute a command to wait for a condition
    to hold or promise to be resolved:'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`getWebElement`: Using this method, we can find the web element represented
    by this `ElementFinder`:'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`getCurrentUrl`: Using this method, we can retrieve the URL of the current
    application page. This method is used with the `browser` module:'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: For a complete list of properties and methods, refer to the official documentation
    of Protractor on GitHub.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about some of the available methods you can use
    for writing your test scripts and automating application workflows in the page.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: We will learn to use some of the built-in methods in the following sections
    through examples. In the next section, we will start writing test scripts using
    Protractor.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Protractor - First steps
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's start writing test scripts using Protractor. We will
    make use of the methods that we saw earlier in the chapter and element targeting
    to write our test scripts.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: 'A general syntax of a Protractor framework test suite is as follows:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Analyze the preceding code snippet, and you will realize that it's very similar
    to the one we created for Jasmine test scripts. Bingo!
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: The test suites written for Jasmine and Protractor look similar. The major difference
    is that we make use of the `element` and `browser` modules through which we can
    target any specific DOM elements in the page.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the `app.e2e-specs.ts` file, we write our first end-to-end test script;
    add the following code snippet to the file:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Let''s analyze the preceding code snippet in detail. The subsequent steps have
    been followed:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: We are importing the required modules, `element`, `by`, and `browser`, from
    the `protractor` library into our test script.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `describe` statement, we assign a name for our end-to-end test specs
    and we write our `specDefinitions` for it.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We define a test script using the `it` statement, and in the function we use
    `browser` to navigate to the home page and checking the `<H1>` tag and value to
    be equal to `Testing E2E`.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have defined our `e2e` test scripts; now let''s run the tests using the
    `ng` command, as follows:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The preceding command will run, invoke the browser, execute the `e2e` test scripts,
    and then close the browser.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the following results in the terminal:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/88c5d8ec-f9ec-4a0a-a16e-054e5253330c.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
- en: If you see all test scripts passed, all our E2E tests have passed. Congrats!
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: The command needs to be run in the parent directory of the project directory.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: Writing E2E tests using Protractor
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, you learned to write your first test script using
    Protractor. In this section, we will extend our example and add more meat to it.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the use cases we will automate in our example:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: We will check whether our home page has the title `Testing E2E`.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will check whether the element with the `firstPara` ID is displayed on the
    page.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will assert that the `class` attribute of the element with the `firstPara`
    ID is equal to `'custom-style'`.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we read the current URL of the page and check whether it's equal to
    the value we pass in the assertion.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s now write our E2E spec for this. In the `app.e2e.spec.ts` file, add
    the following lines of code:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'A breakdown and analysis of the preceding code are as follows:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: We imported the required modules, `element`, `by`, and `browser`--from `protractor`.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We wrote a `describe` statement to create a test suite with the name `'Form
    automation Example'`.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the first test script, we told `protractor` using `browser` to navigate
    to the `/first-test` URL using the method `get`.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We received the element with the `id` as `firstPara` and its text and checked
    whether the value is equal to `Testing E2E`.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second test script, we navigated to the URL `/first-test` using the `get`
    method and received the same element with the `id` as `firstPara`.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `getAttribute` method, we now take the `class` attribute of the element
    and check whether its value matches to `'custom-style'`.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the third test script, we told `protractor` using `browser` to navigate to
    the `/first-test` URL using the `get` method.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `isDisplayed` method, we checked whether the element is displayed
    on the page or not.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the fourth test script, we told `protractor`, using the `browser` method
    `getCurrentUrl`, to get the `currentUrl` of the page
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We checked whether the `currentUrl` matches the value passed in the test script.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run end-to-end tests, we will use the `ng` commands. In the project directory,
    run the following command:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following screenshot shows the output that we will see once all the tests
    have passed:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b9c29aa5-9c76-4e54-a0bf-2b88ffa01b5b.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
- en: How easy and simple is it to create and run tests, right?
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: This is good start, and we will continue to learn to write more test scripts
    using advanced techniques.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and plug your logic, and write automated test scripts for your applications.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Writing E2E tests using Protractor - Advanced
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, in earlier sections, we have covered installing, using, and writing
    test scripts using the Protractor framework. We have learned and implemented built-in
    methods and classes exposed by the Protractor API.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover writing advanced test scripts, which will have
    interactions in the page, and test the elements thoroughly.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the use cases that we will cover:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: We will test our array values.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will target our element using the class attribute.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will check the heading of the page.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will simulate the `click` event attached on a button and then verify the
    text changes of another element.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's get started with writing our test scripts.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to first create our `test-app.component.html` file. Create the
    file, and add the following code to the file:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The analysis of the preceding code snippet is as follows:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: We defined an `h3` title tag and assigned a `class` attribute with a value as
    `packtHeading`.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a `input` type `checkbox` element with an ID as `sendEmailCopy`.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a paragraph `p` tag with a `class` attribute as `afterClick` and
    bound the value inside `{{ }}`.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `button` and attached a `click` event to call the `sendMail` method.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The purpose of the `sendMail` method is to change the text inside the `paragraph`
    tag.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our template file defined, it's time for us to create our component
    file.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `test-app.component.ts` file, and add the following code snippet
    to it:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: We imported the `Component` and `Oninit` modules from `@angular/core`.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also imported `FormsModule` from `@angular/forms`.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created `Component` and associated the HTML and CSS files to `templateUrl`
    and `stylesUrl`, respectively.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined the `myModel`, `authorName`, `publisherName`, and `afterClick` variables.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We assigned values to the variables defined.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `hiPackt` method, which will display `Hello Packt`.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `sendMail` method, which when invoked will update the value of
    the `afterClick` variable.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So far, so good. Stay with me on this; we are going to write beautiful test
    scripts very soon.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: Now, we got our template file defined and implemented our component file; we
    know the functionality of the component very well. It's time to get the testing
    part started.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the test spec `app.e2e.spec.ts` file, and add the following code
    snippet to it:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Let''s take a detailed look at what''s happening in our test specifications:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: We define a `beforeEach` method, which will be executed before the test script
    and will open the browser URL as defined.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now write a test script to test the `title` value of the `h1` tag using the
    assertion `toEqual`.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second test script, we get a `button` element using `tagName` and invoke
    the `click` method.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the method was `clicked`, the value of the paragraph has been updated.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will retrieve the paragraph element using `by.css` and get the text `value`
    of the paragraph inside it.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We assert whether the newly updated `value` is equal to `Element is clicked`.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the third test script, using the `isSelected` method we check whether the
    `input` element type `checkbox` was checked.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `click` method, we now toggle the `checkbox` and check the value again.
    This test script is to show you how to play with form elements.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, in the last test script, we get the URL of the current page using `getCurrentUrl`
    and check whether it matches to `/test-app`.
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it, all done. Now, we have our template file in place, we have created
    the component, and we have our test spec file as well.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s show time. Let''s run the app, and we should see the output shown in
    the following screenshot:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a305d2c-67c0-4fbe-82f6-05e59467efef.png)'
  id: totrans-429
  prefs: []
  type: TYPE_IMG
- en: In this section, you learned to write test scripts using the Protractor framework.
    We explored all the built-in available methods in the framework for us to use
    while writing scripts.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: We noted that test scripts written are similarly to Jasmine test scripts. We
    also saw how to target a specific element or collection of elements using various
    methods, such as `by.css`, `by.binding`, and `by.id`.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: We discussed event handling and bindings using the Protractor framework.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-433
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is one of the most crucial and important aspects of application development.
    In this chapter, you learned how to use Angular CLI, Jasmine, and Protractor framework.
    Automation testing using Jasmine and Protractor can help you save time and effort.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: You learned about writing unit test scripts for Angular components and services
    and also how to write E2E test cases for workflow automation testing. You explored
    in detail Jasmine framework and the Protractor framework methods and variables
    built-in to functions.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: We delved into targeting specific elements as well as retrieving collections
    of elements together to read, update, and edit properties and values. Go ahead
    and automate your applications using these great testing frameworks.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about design patterns in Angular. Typescript
    is an object-oriented programming language and, as such, we can leverage decades
    of knowledge on object oriented architecture. You will also explore some of the
    most useful object-oriented design patterns and learn how to apply them in an
    Angular way.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
