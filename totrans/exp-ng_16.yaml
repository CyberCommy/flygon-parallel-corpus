- en: Testing Angular Apps Using Jasmine and Protractor Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is one of the most important aspects in the modern application development
    process. We even have dedicated software development methodologies, primarily
    driven by a test-first approach.
  prefs: []
  type: TYPE_NORMAL
- en: Along with the testing utilities provided by Angular, there are a few recommended
    frameworks, such as Jasmine, Karma, and Protractor, using which it's easy to create,
    maintain, and write test scripts. Test scripts written in Jasmine and Protractor
    save time and effort, and above all yield good returns by finding defects much
    earlier in the development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn all about testing Angular applications using
    Jasmine and Protractor. In this chapter, we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn about important concepts in testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Angular CLI for unit-testing specific environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Jasmine framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing tests scripts using Jasmine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing test scripts to test Angular components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Testing Angular components: an advanced example'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Angular services using Jasmine test scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about Protractor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing E2E test scripts using Protractor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concepts in testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start testing our Angular applications, it''s important that we quickly
    brush up on and understand some of the most commonly used terms in testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unit test**: One can view a unit test as the smallest testable part of an
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test case**: This is a set of test inputs, execution conditions, and expected
    results for achieving an objective. In the Jasmine framework, these are referred
    to as specs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TestBed**: TestBed is a method of testing a particular module in an isolated
    fashion by passing all the required data and objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test suite**: This is a collection of test cases that are intended to be
    used to test a module end to end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System test**: The tests conducted on a complete and integrated system to
    evaluate the system functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**E2E test**: It is a testing method, which determines whether the behavior
    of the application is as required. We pass the data, required objects, and dependencies
    and is performed from start to finish under mocking the real-time use cases and
    scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we know the preceding terms, let's learn about testing Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and setting up Angular CLI for testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have used Angular CLI for setting up our project, creating new components,
    services, and more. We will now discuss how to use the command-line tool to set
    and execute test suites to test our Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'First things first, a quick recap on how to create a project quickly using
    Angular CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding code snippet, we installed the Angular command-line tool.
    Now, let''s create a new directory named `test-app` and navigate inside the project
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s time to quickly create a new component called `test-app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will see the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/46868d9b-453f-4048-9c52-73bb40e9c73c.png)'
  prefs: []
  type: TYPE_IMG
- en: We should see the new directory and the corresponding files created in the directory.
    The command-line tool has created four files related to the component, including
    the `test-app.component.spec.ts` test script placeholder file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s get our application up-and-running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have our application up-and-running. Now it's time to get
    started with testing our Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Jasmine framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jasmine is a behavior-driven development framework for testing JavaScript code.
    This is how the official site explains Jasmine:'
  prefs: []
  type: TYPE_NORMAL
- en: Jasmine is a behavior-driven development framework for testing JavaScript code.
    It does not depend on any other JavaScript frameworks. It does not require a DOM.
    And it has a clean, obvious syntax so that you can easily write tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax of a Jasmine test suite is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet to understand the test suite syntax.
    The following steps have been followed:'
  prefs: []
  type: TYPE_NORMAL
- en: Every Jasmine test suite will have a `describe` statement, where we can give
    a name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the test suite, we create smaller tests cases using the `it` statement;
    each test case will have two parameters, a name and a function, which will have
    our application logic that needs be tested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use the `expect` statements to verify the data to make sure that our application
    and the data are working as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, you will learn about the Jasmine framework and the available
    methods and functions that we can use in our test scripts in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The Jasmine framework - Global methods we can use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Jasmine framework supports and provides a lot of predefined methods for
    us to use and write our test suites. Jasmine has vast support for testing environments,
    spying on elements, and much more. Refer to the official website for complete
    help and documentation on available methods.
  prefs: []
  type: TYPE_NORMAL
- en: For writing test scripts, we will need a basic understanding and knowledge of
    some of the most commonly and frequently used methods in the Jasmine framework.
  prefs: []
  type: TYPE_NORMAL
- en: Commonly used methods in Jasmine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s a list of the most commonly used Jasmine global methods available to
    write test suites:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Global Methods** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| describe | The describe function is a block of code that implements the test
    suite |'
  prefs: []
  type: TYPE_TB
- en: '| it | Specs are defined by calling the global Jasmine function `it`, which
    as described takes a string and a function |'
  prefs: []
  type: TYPE_TB
- en: '| beforeEach | This method is called once before each spec in the describe
    in which it is called |'
  prefs: []
  type: TYPE_TB
- en: '| afterEach | This method is called once after each spec |'
  prefs: []
  type: TYPE_TB
- en: '| beforeAll | This method is called once before all specs in the describe |'
  prefs: []
  type: TYPE_TB
- en: '| afterAll | This method is called only once after all the specs are called
    |'
  prefs: []
  type: TYPE_TB
- en: '| xdescribe | This temporarily disables tests that you don''t want to execute
    |'
  prefs: []
  type: TYPE_TB
- en: '| pending | Pending specs do not run; they are added to the pending results
    list |'
  prefs: []
  type: TYPE_TB
- en: '| xit | Any spec declared with xit is marked as pending |'
  prefs: []
  type: TYPE_TB
- en: '| spyOn | A spy can stub any function and tracks calls to it and all arguments;
    this is used inside the describe or it statements |'
  prefs: []
  type: TYPE_TB
- en: '| spyOnProperty | Every call to a spy is tracked and exposed on the calls property
    |'
  prefs: []
  type: TYPE_TB
- en: For more details and complete documentation, refer to Jasmine framework documentation
    on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Angular CLI and Jasmine framework - First test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we install Angular CLI, the Jasmine framework is automatically shipped
    with the tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding section, we saw the general syntax of writing a test in Jasmine.
    Now, let''s write a quick test script using the Jasmine framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the important things to note about the preceding test script:'
  prefs: []
  type: TYPE_NORMAL
- en: We write a `describe` statement to describe the test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then define a test script using an `it` statement and a corresponding method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `expect` statement, we assert two numbers, and using `toEqual` we test
    whether the addition of two numbers matches to `3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing Angular components with Jasmine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to create our test suite using the Jasmine framework. In the first
    section, *Understanding and setting up Angular CLI for testing*, we created the
    component `TestAppComponent` and the `test-app.component.ts` file using the `ng`
    command. We will continue to use the same in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, add all the contents of the file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding test suite step by step. The steps that have been
    followed in the code block are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the first step, we imported all the required modules for testing from `@angular/core/testing`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We imported the newly created component, `TestAppComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a test suite by writing a `describe` statement with a name, `Testing
    App Component`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We wrote a test script using `it` and the corresponding method: `() =>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a `component` object of the `TestAppComponent` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then asserted whether the value returned is true or not. A value is `toBeTruthy`
    if the coercion of this value to a `boolean` yields the value true.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All test suites written will end with a `.spec.ts` extension, for example, `test-app.component.spec.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: We are good so far! That's great, and now we will run our test suite and see
    its output.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are still using the Angular CLI tool; let''s run the tests using the `ng`
    command in the project directory, and run the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The command-line tool will build the entire application, open a new Chrome window,
    run the tests using Karma test runner, and run the Jasmine test suite.
  prefs: []
  type: TYPE_NORMAL
- en: Karma test runner spawns a web server that executes all the tests in the browser
    and watches all the configurations specified in `karma.conf.js`. We can use the
    test runner to run work with various frameworks, including Jasmine and Mocha.
    The web server collects the results from all of the captured browsers and displays
    them to the developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should see the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b19a3651-feaf-4aae-a83c-120f0530538e.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see the preceding screenshot, congrats. You have successfully executed
    the test suite, and note that the test script has passed.
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! Now, let's dig deep and create more complex test scripts for testing
    components and services.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular components with Jasmine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our preceding example, we have seen a basic example of writing a test script
    and testing Angular components.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore writing best practices for testing Angular
    components. We will use the same component we created in the preceding section--`TestAppComponent`--and
    expand the test suite more by adding variables and methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `test-app.component.ts` file, let''s create a few variables and map
    them into the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code we have written in our `test-app.component.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a component--`TestAppComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We mapped the respective HTML and CSS files in `templateUrl` and `styleUrls`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We declared a public `variable` called `authorName` and assigned the value `'Sridhar'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s move over to `test-app.component.spec.ts`. We will write our test
    suite and define a test case to verify that `authorName` matches the string passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in the `test-app.component.spec.ts`
    file. The subsequent steps have been followed for the code block:'
  prefs: []
  type: TYPE_NORMAL
- en: We imported all the required modules `async`, `componentFixture`, and `TestBed`
    for running the tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a test suite by writing the `describe` statement and assigned the
    `Testing App Component` name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a test case and created a new instance of the component `TestAppComponent`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `expect` statement, we asserted whether the `authorName` variable matches
    the string. The result will return true or false.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great! So far, so good. Now, read on.
  prefs: []
  type: TYPE_NORMAL
- en: Time to take it to the next level. We will add new methods to the `component`
    class and test them in the `specs` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `test-app.component.ts` file, let''s add a variable and a method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let's create the `test-app.component.spec.ts` file and test the variable and
    the method we defined in the `component` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `test-app.component.spec.ts` file, add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail. The following steps have
    been adhered to:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a test case and created a `component` instance of the `TestAppComponent`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `expect` statement, we asserted and verified that the string passed matches
    the return value of the `hiPackt` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we run the preceding test script, let''s also quickly take a look at
    one more test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We implemented the `beforeEach` Jasmine method. We are creating an instance
    of `AppComponent` before each test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We wrote a test script and used the instance of the component, that is, `this.app`,
    we get the value of the `publisherName` variable, and assert whether the value
    of the `publisherName` variable matches `toBe('Packt')`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the tests should autobuild or else invoke `ng test` to run the tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/baf610e7-e3f7-4565-94bc-ab402e678f1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Great! You learned to write test scripts to test our Angular components, both
    variables and methods.
  prefs: []
  type: TYPE_NORMAL
- en: You learned to use some of the Jasmine framework's built-in methods, such as
    `beforeEach`, `expect`, `toBeTruthy`, and `toBe`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will continue to learn advanced techniques and write
    more test scripts to test Angular components in even more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular components - Advanced
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will delve more deeply and learn some more important and
    advanced aspects of testing Angular components.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you observe, you can note the following in the example mentioned in the
    preceding section:'
  prefs: []
  type: TYPE_NORMAL
- en: We create an instance of the object individually each time in each test case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have to inject all the providers individually for each test case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instead, it will be great if we can define an instance of the component before
    each test script. We can achieve this by using `TestBed`--one of the most important
    utilities provided by Angular for testing.
  prefs: []
  type: TYPE_NORMAL
- en: TestBed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`TestBed` is the most important testing utility provided by Angular. It creates
    an Angular testing module--an `@NgModule` class, which we can use for our testing
    purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: Since it creates an `@NgModule`, we can define providers, imports, and exports--similar
    to our regular `@NgModule` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: We can configure `TestBed` in either `async` or `sync` mode.
  prefs: []
  type: TYPE_NORMAL
- en: For configuring `TestBed` asynchronously, we will use `configureTestingModule`
    to define the metadata of the object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For configuring `TestBed` synchronously, we will define object instances of
    the component as discussed in our preceding section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the code snippet as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The important things to note in the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We defined `beforeEach`, which means that this piece of code will run before
    each test case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a component instance using `TestBed`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `TestBed` sync way, we defined a `fixture` variable, which creates the
    component, `AppComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `componentInstance`, we created a `comp` variable, which is a test instance
    of `AppComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `debugElement` function, we can define and target a specific element
    in the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `debugElement`, we can target an individual element by the CSS element
    selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, using the preceding `beforeEach` method, which has the component instance,
    we will create our test scripts for testing Angular components.
  prefs: []
  type: TYPE_NORMAL
- en: Example - Writing test scripts with change detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will continue to write some more test scripts unit tests
    with a twist. We will implement change detection and element tracking as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started by creating a simple `app.component.ts` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a `AppComponent` component class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We declared a `title` variable with a value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We mapped the component's template and style files to their respective `templateUrl`
    and `styleUrls`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `app.component.html`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are adding a `<h1>` tag and mapping the `title` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to create our test script with multiple assertions. However,
    before we write our test script, let''s understand the use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: We will write the script to check whether `ChangeDetectTestComponent` is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will write the assertion to check whether `title` is equal to `Packt Testing
    works`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we will check for a change detection and verify that the `h1` tag should
    be rendered and contains the value `Packt Testing works`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will also make use of `querySelector` to target a specific element and match
    the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the test scripts for the preceding use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We import the required modules, namely `TestBed`, `ComponentFixture`, and `async`,
    from `angular/core/testing`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We define `beforeEach` and initiate the variables fixture, `comp` and `de`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the first test script, we write a simple expect statement for the component,
    `tobeTruthy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second test script, we create an instance of the component via `TestBed.createComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `debugElement`, we create the instance of the created component, that
    is, `app`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the instance of the `app` component, we are able get the `title` of the
    component and assert `toEqual`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the last test script, we make use of the `async` method. We make use of the
    `debugElement` `nativeElement` method and target an element--`<h1>`, in our case--and
    check whether the title contain `Packt Testing Works`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The difference between the second and third test script is that we are making
    use of the `async` method and waiting for changes to be detected--`detectChanges`--in
    the third test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the tests, and we should see the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f5076db7-4e34-4f32-8a80-0c1723b18248.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, you learned how to create a component instance using `beforeEach`
    for all the test scripts and how to use `nativeElement` to target any element.
  prefs: []
  type: TYPE_NORMAL
- en: We used the `detectChanges` method to identify the changes happening in the
    element.
  prefs: []
  type: TYPE_NORMAL
- en: In the subsequent sections, we will continue to learn more about the Jasmine
    framework for testing Angular services.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about testing Angular services.
  prefs: []
  type: TYPE_NORMAL
- en: In most Angular applications, writing services is an important and core aspect
    as it performs the interactions with backend services; creating and sharing data
    between components and are easy to maintain in the long run. Hence, it's equally
    important to make sure that we are testing our Angular services thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: Let's learn how to write test scripts for testing our services. In order to
    test a service, let's first create a service using the `ng` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will generate the `test-app.service.ts` and `test-app.service.spec.ts`
    files in the `test-app` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Services are injectable, which means that we have to import them into their
    respective components, add them to the providers list, and create an instance
    of the service in the component constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'We modify `test-app.service.ts` and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the following important things from the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We imported the `injectable` from Angular core.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined the `@injectable` metadata and created a class for our service--`TestAppService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined the `getAuthorCount` method to return the count of author.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to import and inject the service class into the component. To test the
    preceding service, we will write our tests scripts in the `test-app.service.specs.ts`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The way we write test scripts for testing services is similar to how we write
    for testing components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create the test suite for testing a service by adding the following
    code in the `test-app.service.spec.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'An analysis of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We import the required modules, `TestBed` and `inject`, into the `spec` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We import the `TestAppService` service into the `spec` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using **Dependency Injection**(**DI**), we create the `service` instance of
    `TestAppService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We create a test case; we need to inject the service, invoke the `getAuthorCount`
    method, and assert whether the value matches to `4`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output when we run the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8a77bcb2-5ef1-4267-a8d1-1c891a22616f.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, you learned about unit testing using Jasmine test scripts for
    Angular components and services.
  prefs: []
  type: TYPE_NORMAL
- en: We have to inject the service using DI in every test case.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular services - Mocking backend services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, you learned how to write test scripts to test our
    Angular services. In this section, we will write a test script and learn how to
    mock backend services in real-time projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the use cases we will writing our test scripts for:'
  prefs: []
  type: TYPE_NORMAL
- en: Write a test script to test a method in service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a test script to check whether the return value of the method contains
    a particular value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a test script to mock the backend connection using `mockBackend` and also
    check whether the target URL is correct.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a test script to set the `mockResponse` for the request URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, call a method written in `service` and map the response, which should
    be equal to the `mockResponse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create our service `test.service.ts` file and add the following code
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The important things to note in the preceding code snippet are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We are importing the required module into the `spec` file, namely `injectable`
    from `Angular/core`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the required module into the `spec` file, namely `Http` from
    `Angular/http`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the required module into the `spec` file, namely `Observable`
    from `Angular/rxjs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are creating the component class for `TestService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are using the `@injectable` decorator, which will allow the service to be
    injected into any component or service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the constructor, we are injecting the `HTTP` service and creating an instance
    HTTP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are creating three methods: `getPublications`, `getProducts`, and `search`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `getProducts`, we are making an HTTP call, which, of course, we use to mock
    the server URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are mapping the response of the HTTP request to the `response` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our service ready, we can start writing our test spec file
    to test the variables and methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we write our test scripts in the `spec` file, let''s create a `beforeEach`
    method, which will have all the initiations, and we register the providers before
    each test script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Just as we defined the `beforeEach` method for testing Angular components, we
    define the `beforeEach` method for services. In the providers array configuration,
    we are registering the `XHRBackend` class.
  prefs: []
  type: TYPE_NORMAL
- en: Since services have dependencies on other modules and require providers, we
    need to define and register the required services using `configureTestingModule`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We are defining a `beforeEach` method, which will be executed before each test
    script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `TestBed`, we are configuring the test module using `configuringTestingModule`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the parameters passed in `configureTestingModule` are similar to the metadata
    passed to the `@NgModule` decorator, we can specify providers and imports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `imports`, we import the `HttpModule`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are configuring the required dependencies--`XHRBackend` and `TestService`--in
    the providers list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are registering a provider, `XHRBackend` with an injection token and setting
    the provider to `XHRBackend`, so that, when we request the provider, the DI system
    returns a `XHRBackend` instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we can create the `spec` file, `test.service.spec.ts`, and add the following
    code to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s a long code snippet, so let''s break it down for analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: We are importing the `TestService` service file into the `spec` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the required modules, `TestBed` and `inject`, from `@angular/core/testing`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the modules, `MockBackend` and `MockConnection`, from `@angular/http/testing`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing the modules, `HttpModule`, `XHRBackend`, `ResponseOptions`,
    `Response`, and `RequestMethod`, from `@angular/http`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We define a `mockResponse` variable, which has a temp `json` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also define a `mockResponseText` variable and assign it a value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use the `beforeEach` method we defined earlier, through which we will
    register all the providers and dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the first test script, we are registering the `TestService` instance as `service`
    and the `XHRBackend` instance as `XHRBackend`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are calling the `service.getpublications()` method, which will return the
    array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the result names, we are asserting the values to contain the strings passed
    as test data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second test script, we are creating connections using `mockBackend` and
    passing the requests `method` and `url` using `subscribe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `mockRespond` connection, we are setting the response value as `mockResponse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are also calling the `getbooks` method, mapping the response, and asserting
    the `toEqual` value to `mockResponse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the tests; we should see the output shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2b790ded-b7b3-4404-8546-71ff4121305a.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see the preceding screenshot, that's great.
  prefs: []
  type: TYPE_NORMAL
- en: So far, in this section, you have learned and explored the Jasmine framework
    and its built-in methods available for testing Angular components and services.
  prefs: []
  type: TYPE_NORMAL
- en: 'We discussed testing Angular components: testing the variables and methods.
    We also discussed how to write the `beforeEach` method to be executed before each
    test script and how to create an instance of the component and access its properties.
    We also covered testing Angular services using the Jasmine framework and testing
    Angular services and their properties: variables and methods.'
  prefs: []
  type: TYPE_NORMAL
- en: For testing Angular services, you learned how to create a `beforeEach` method,
    which will be executed before each test script and will have the providers and
    dependencies created once before each test script.
  prefs: []
  type: TYPE_NORMAL
- en: You learned to test the backend services by mocking the services. This is really
    useful when you are independently developing Angular services and components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about using the Protractor framework for
    testing the end-to-end tests.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Protractor framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding sections, you learned about unit testing using Jasmine. In
    this section, you will learn about using the Protractor framework for the end-to-end
    testing of Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the official site explains Protractor:'
  prefs: []
  type: TYPE_NORMAL
- en: Protractor is an end-to-end test framework for Angular and AngularJS applications.
    Protractor runs tests against your application running in a real browser, interacting
    with it as a user would.
  prefs: []
  type: TYPE_NORMAL
- en: 'Protractor framework is packaged in the Angular CLI tool, and we can find the
    `e2e` folder created in our main project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c51d099a-d28f-4094-9f14-6c1d83c3bea4.png)'
  prefs: []
  type: TYPE_IMG
- en: You will learn to write end-to-end tests for your Angular applications and keep
    them under the `e2e` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that it's a best practice to create separate E2E scripts for each functionality
    or page.
  prefs: []
  type: TYPE_NORMAL
- en: Protractor - A quick overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Protractor is a wrapper around Selenium WebDriver that provides a lot of built-in
    classes and methods, which we can use for writing end-to-end testing.
  prefs: []
  type: TYPE_NORMAL
- en: Protractor API exposes various classes and methods mainly around `Browser`,
    `Element`, `Locators`, and `ExpectedConditions`.
  prefs: []
  type: TYPE_NORMAL
- en: The Protractor supports the two latest major versions of Chrome, Firefox, Safari,
    and IE--which means we can write our test scripts and run them on any/all of the
    leading browsers available.
  prefs: []
  type: TYPE_NORMAL
- en: For writing end-to-end tests, we will need to target the elements in the page,
    read their properties, update the attributes, and invoke methods attached to the
    elements or send and verify the data.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss various classes and methods available in the Protractor framework
    using which we can automate our application functionality by writing end-to-end
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Let's learn about the methods and classes available, which we can employ using
    the Protractor framework.
  prefs: []
  type: TYPE_NORMAL
- en: Protractor and DOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about interacting with DOM elements in the page
    using Protractor.
  prefs: []
  type: TYPE_NORMAL
- en: Protractor API supports and exposes classes and methods for targeting element(s)
    in the page. We need to mention explicitly whether we need to target a specific
    element or if we are expecting a group of elements to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: The `element` function is used to find HTML elements on your webpage. It returns
    an `ElementFinder` object, which can be used to interact with the element or get
    information about the properties and methods attached to it.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to find, edit, remove, and add elements and their properties in
    the page dynamically. However, to implement these use cases, we need to first
    define and find the target elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define target element(s) using the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`element`: This method will return a single/specific element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`element.all`: This method returns a collection of elements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using the aforementioned methods, we can target any and all elements in the
    page. In next section, you will learn about available methods we can use to find
    elements along with the `element` or `element.all` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Some methods available to select element(s)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, we saw a list of the most frequently used methods
    to select or target an element or multiple elements in the page.
  prefs: []
  type: TYPE_NORMAL
- en: To use the previously discussed methods, you need to mention explicitly whether
    you need to target a specific element or if we are expecting a group of elements
    to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, let's learn about available methods and ways to target/select
    elements in our test script. We can target one or more elements in one go.
  prefs: []
  type: TYPE_NORMAL
- en: We can use almost all attributes, properties, and custom directives to target
    specific elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some of the ways we can target elements in the test script:'
  prefs: []
  type: TYPE_NORMAL
- en: '`by.css`: We can pass the CSS selector to select a element(s):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: CSS `selectors` are the most commonly and frequently used method for targeting
    and selecting elements.
  prefs: []
  type: TYPE_NORMAL
- en: '`by.model`: We use this to select or target an element using the `ng-model`
    name bound to the element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note that the official documentation still suggests using CSS selectors instead
    of model.
  prefs: []
  type: TYPE_NORMAL
- en: '`by.repeater`: We use this method to select elements displayed using the `ng-repeat`
    directive:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`by.id`: We use this method to select an element using it''s ID:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '`by.binding`: Use this to select elements associated with one-way or two-way
    Angular binding:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`by.xpath`: Use this to select element(s) by traversing through `xpath`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`first()`, `last()`, or specific elements: We use these methods to get elements
    at specific locations or indices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We learned about some of the methods we can use to target elements by using
    their properties and information. For a complete list of methods available, refer
    to the official documentation for Protractor on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about various built-in methods we can use
    to write test scripts to automate the application logic.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Protractor API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about various built-in classes and methods available
    in the Protractor API, which we can use for writing our test scripts.
  prefs: []
  type: TYPE_NORMAL
- en: The Protractor API has a lot of predefined built-in properties and methods for
    `Browser`, `Element`, `Locators`, and `ExpectedConditions` support.
  prefs: []
  type: TYPE_NORMAL
- en: It provides a lot of built-in methods ranging from click events to setting the
    data for inputs forms, from getting text to getting URL details and much more,
    to simulate actions and events in the application page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at some of the available built-in methods to simulate
    user interactions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`click`: Using this method, we can schedule a command to click on this element.
    The method is used to simulate any click events in the page:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '`getTagName`: This gets the tag/node name of the element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`sendKeys`: Using this method, we can schedule a command to type a sequence
    on the DOM element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '`isDisplayed`: Using this method, we can schedule a command to test whether
    this element is currently displayed in the page:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`Wait`: Using this method, we can execute a command to wait for a condition
    to hold or promise to be resolved:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`getWebElement`: Using this method, we can find the web element represented
    by this `ElementFinder`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`getCurrentUrl`: Using this method, we can retrieve the URL of the current
    application page. This method is used with the `browser` module:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: For a complete list of properties and methods, refer to the official documentation
    of Protractor on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about some of the available methods you can use
    for writing your test scripts and automating application workflows in the page.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn to use some of the built-in methods in the following sections
    through examples. In the next section, we will start writing test scripts using
    Protractor.
  prefs: []
  type: TYPE_NORMAL
- en: Protractor - First steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's start writing test scripts using Protractor. We will
    make use of the methods that we saw earlier in the chapter and element targeting
    to write our test scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'A general syntax of a Protractor framework test suite is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Analyze the preceding code snippet, and you will realize that it's very similar
    to the one we created for Jasmine test scripts. Bingo!
  prefs: []
  type: TYPE_NORMAL
- en: The test suites written for Jasmine and Protractor look similar. The major difference
    is that we make use of the `element` and `browser` modules through which we can
    target any specific DOM elements in the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the `app.e2e-specs.ts` file, we write our first end-to-end test script;
    add the following code snippet to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail. The subsequent steps have
    been followed:'
  prefs: []
  type: TYPE_NORMAL
- en: We are importing the required modules, `element`, `by`, and `browser`, from
    the `protractor` library into our test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `describe` statement, we assign a name for our end-to-end test specs
    and we write our `specDefinitions` for it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We define a test script using the `it` statement, and in the function we use
    `browser` to navigate to the home page and checking the `<H1>` tag and value to
    be equal to `Testing E2E`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have defined our `e2e` test scripts; now let''s run the tests using the
    `ng` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will run, invoke the browser, execute the `e2e` test scripts,
    and then close the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the following results in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/88c5d8ec-f9ec-4a0a-a16e-054e5253330c.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see all test scripts passed, all our E2E tests have passed. Congrats!
  prefs: []
  type: TYPE_NORMAL
- en: The command needs to be run in the parent directory of the project directory.
  prefs: []
  type: TYPE_NORMAL
- en: Writing E2E tests using Protractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, you learned to write your first test script using
    Protractor. In this section, we will extend our example and add more meat to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the use cases we will automate in our example:'
  prefs: []
  type: TYPE_NORMAL
- en: We will check whether our home page has the title `Testing E2E`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will check whether the element with the `firstPara` ID is displayed on the
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will assert that the `class` attribute of the element with the `firstPara`
    ID is equal to `'custom-style'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we read the current URL of the page and check whether it's equal to
    the value we pass in the assertion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s now write our E2E spec for this. In the `app.e2e.spec.ts` file, add
    the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'A breakdown and analysis of the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We imported the required modules, `element`, `by`, and `browser`--from `protractor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We wrote a `describe` statement to create a test suite with the name `'Form
    automation Example'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the first test script, we told `protractor` using `browser` to navigate
    to the `/first-test` URL using the method `get`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We received the element with the `id` as `firstPara` and its text and checked
    whether the value is equal to `Testing E2E`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second test script, we navigated to the URL `/first-test` using the `get`
    method and received the same element with the `id` as `firstPara`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `getAttribute` method, we now take the `class` attribute of the element
    and check whether its value matches to `'custom-style'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the third test script, we told `protractor` using `browser` to navigate to
    the `/first-test` URL using the `get` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `isDisplayed` method, we checked whether the element is displayed
    on the page or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the fourth test script, we told `protractor`, using the `browser` method
    `getCurrentUrl`, to get the `currentUrl` of the page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We checked whether the `currentUrl` matches the value passed in the test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run end-to-end tests, we will use the `ng` commands. In the project directory,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output that we will see once all the tests
    have passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b9c29aa5-9c76-4e54-a0bf-2b88ffa01b5b.png)'
  prefs: []
  type: TYPE_IMG
- en: How easy and simple is it to create and run tests, right?
  prefs: []
  type: TYPE_NORMAL
- en: This is good start, and we will continue to learn to write more test scripts
    using advanced techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and plug your logic, and write automated test scripts for your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Writing E2E tests using Protractor - Advanced
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, in earlier sections, we have covered installing, using, and writing
    test scripts using the Protractor framework. We have learned and implemented built-in
    methods and classes exposed by the Protractor API.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover writing advanced test scripts, which will have
    interactions in the page, and test the elements thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the use cases that we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: We will test our array values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will target our element using the class attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will check the heading of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will simulate the `click` event attached on a button and then verify the
    text changes of another element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's get started with writing our test scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to first create our `test-app.component.html` file. Create the
    file, and add the following code to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The analysis of the preceding code snippet is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We defined an `h3` title tag and assigned a `class` attribute with a value as
    `packtHeading`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a `input` type `checkbox` element with an ID as `sendEmailCopy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a paragraph `p` tag with a `class` attribute as `afterClick` and
    bound the value inside `{{ }}`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `button` and attached a `click` event to call the `sendMail` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The purpose of the `sendMail` method is to change the text inside the `paragraph`
    tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our template file defined, it's time for us to create our component
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `test-app.component.ts` file, and add the following code snippet
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We imported the `Component` and `Oninit` modules from `@angular/core`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also imported `FormsModule` from `@angular/forms`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created `Component` and associated the HTML and CSS files to `templateUrl`
    and `stylesUrl`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined the `myModel`, `authorName`, `publisherName`, and `afterClick` variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We assigned values to the variables defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `hiPackt` method, which will display `Hello Packt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `sendMail` method, which when invoked will update the value of
    the `afterClick` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So far, so good. Stay with me on this; we are going to write beautiful test
    scripts very soon.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we got our template file defined and implemented our component file; we
    know the functionality of the component very well. It's time to get the testing
    part started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the test spec `app.e2e.spec.ts` file, and add the following code
    snippet to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a detailed look at what''s happening in our test specifications:'
  prefs: []
  type: TYPE_NORMAL
- en: We define a `beforeEach` method, which will be executed before the test script
    and will open the browser URL as defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now write a test script to test the `title` value of the `h1` tag using the
    assertion `toEqual`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second test script, we get a `button` element using `tagName` and invoke
    the `click` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the method was `clicked`, the value of the paragraph has been updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will retrieve the paragraph element using `by.css` and get the text `value`
    of the paragraph inside it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We assert whether the newly updated `value` is equal to `Element is clicked`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the third test script, using the `isSelected` method we check whether the
    `input` element type `checkbox` was checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `click` method, we now toggle the `checkbox` and check the value again.
    This test script is to show you how to play with form elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, in the last test script, we get the URL of the current page using `getCurrentUrl`
    and check whether it matches to `/test-app`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it, all done. Now, we have our template file in place, we have created
    the component, and we have our test spec file as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s show time. Let''s run the app, and we should see the output shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a305d2c-67c0-4fbe-82f6-05e59467efef.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, you learned to write test scripts using the Protractor framework.
    We explored all the built-in available methods in the framework for us to use
    while writing scripts.
  prefs: []
  type: TYPE_NORMAL
- en: We noted that test scripts written are similarly to Jasmine test scripts. We
    also saw how to target a specific element or collection of elements using various
    methods, such as `by.css`, `by.binding`, and `by.id`.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed event handling and bindings using the Protractor framework.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is one of the most crucial and important aspects of application development.
    In this chapter, you learned how to use Angular CLI, Jasmine, and Protractor framework.
    Automation testing using Jasmine and Protractor can help you save time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: You learned about writing unit test scripts for Angular components and services
    and also how to write E2E test cases for workflow automation testing. You explored
    in detail Jasmine framework and the Protractor framework methods and variables
    built-in to functions.
  prefs: []
  type: TYPE_NORMAL
- en: We delved into targeting specific elements as well as retrieving collections
    of elements together to read, update, and edit properties and values. Go ahead
    and automate your applications using these great testing frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about design patterns in Angular. Typescript
    is an object-oriented programming language and, as such, we can leverage decades
    of knowledge on object oriented architecture. You will also explore some of the
    most useful object-oriented design patterns and learn how to apply them in an
    Angular way.
  prefs: []
  type: TYPE_NORMAL
