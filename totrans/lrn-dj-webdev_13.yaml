- en: Chapter 13. The Art of Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn three important things about Django''s web
    development, which every programmer should know about. These are the concepts
    and techniques that you would need when your code goes wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPDB – interactive way of busting bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every application that runs on production must have some logging enabled; if
    not, then it will be very difficult to figure out what and where something went
    wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Django uses Python's basic logging, thus we will go through the Python logging
    in detail in the following section and see how we can use the logging service
    to log in Django.
  prefs: []
  type: TYPE_NORMAL
- en: The formal definition of logging is the tracking of events in a software. Developers
    call the logging service to state that an event has occurred, or is going to occur.
    Logging can consist of some description or value of any important variable that
    needs to be tracked.
  prefs: []
  type: TYPE_NORMAL
- en: The `logging` module of Python comes with five logging functions that are categorized
    based on the severity of an event. These are `debug()`, `info()`, `warning()`,
    `error()`, and `critical()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are categorized in a tabular form in order of their severity (starting
    from the least severe to the most severe):'
  prefs: []
  type: TYPE_NORMAL
- en: '`debug()`: This is used while fixing bugs and generally has detailed information
    of the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info()`: This makes a log when things work as they are supposed to. This basically
    tells whether an execution was successful or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warning()`: This is raised when some unexpected event occurs. This does not
    actually halt the execution, but it might stop the execution in future. For example,
    ''low disk space''.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error()`: This is the next level of warning, which states that the execution
    of some function might have halted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`critical()`: This is the highest level of any logging function. This is raised
    when a very serious error occurs, which might stop the execution of an entire
    program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `logging` module is divided into the following four categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Loggers**: Logger is the entry point for the log message of a system. Programs
    write logging information to loggers, which then process whether it has to be
    given to a console for output or should be written to file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every logger comprises of the preceding five logging functions. Every message
    that is written to the logger is called a log record. A log record contains the
    severity of the log as well as the important log variable or details, such as
    an error code or a complete stack trace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Loggers themselves have a log level, which works as: if the log level of the
    log message is greater than or equal to the log level of the logger, then the
    message will be further processed for logging; otherwise, it will be ignored by
    the logger.'
  prefs: []
  type: TYPE_NORMAL
- en: When a logger's preprocessing for a log's evaluation is done and the resulting
    log has to be processed, then the message is passed to the handler.
  prefs: []
  type: TYPE_NORMAL
- en: '**Handlers**: Handlers actually decide what to do with the log message. They
    are responsible for taking actions for the log record, such as writing to the
    console or to a file, or sending it over the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same as loggers, handlers also have a log level. Log messages are ignored
    by the handler if the log level of a log record is not greater than or equal to
    the level of handler.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple handlers can be binned to a logger, for example, there can be a handler
    for a logger that sends ERROR and CRITICAL messages over an e-mail, whereas another
    handler can write the same log to a file for a later debug analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '**Filters**: A filter adds an extra evaluation when a log record is passed
    from a logger to handler. The default behavior is that it will start processing
    the mails when a log message level has met the level of a handler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This process can be interrupted further for extra evaluation by applying filter.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a filter allows only one source to log the ERROR message to a handler.
  prefs: []
  type: TYPE_NORMAL
- en: A filter can also be used to alter the priority of the log record, so that the
    logger and handler are triggered accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Formatters**: The final step before the log message actually gets logged,
    which will be in a text format, is that the formatter actually formats the log
    record that consists of the Python formatting string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To enable logging in our application, we will create a logger first. We need
    to create the LOGGING dictionary in the `settings.py` file, which describes loggers,
    handlers, filters, and formatters.
  prefs: []
  type: TYPE_NORMAL
- en: The full documentation about the logging setup can be found at [https://docs.python.org/2/library/logging.config.html](https://docs.python.org/2/library/logging.config.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of a simple logging setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This logger setup defines one logger (Django) that is for Django request, and
    a handler (file) that writes to the log file with a formatter.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the same to test the logging for our `mytweet` project.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to make the logger's entry to the view, where we want to track
    the event.
  prefs: []
  type: TYPE_NORMAL
- en: To test the project, we will update our user profile redirection class to make
    a log whenever an unauthorized user tries to access it, and, also, when a registered
    user tries to open the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `tweet/view.py` file and change the `UserRedirect` class to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, initialize the logger with an `import` statement and add the following
    code to the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: That is it. Now, open the browser and click on the URL `http://localhost:8000/profile`.
  prefs: []
  type: TYPE_NORMAL
- en: You will be redirected to the login page if you're not already logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `debug.log` file. It contains `INFO` of an unauthorized user,
    which means that our logger is working perfectly fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging is the process of finding and removing bugs (error). When we develop
    the web application with Django, we often need a case where we need to know the
    variables submitted in an Ajax request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tools for debugging are:'
  prefs: []
  type: TYPE_NORMAL
- en: The Django debug toolbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPDB ( interactive debugger)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Django debug toolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a set of panels that is used to display various information about the
    current page's request/response, and in more detail when the panel is clicked
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than simply displaying the debug information in HTML comments, the **Django
    debug tool** displays it in a more advanced way.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Django debug toolbar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install the Django debug toolbar, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After the installation, we need to do basic configuration changes to see the
    Django debug toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `debug_toolbar` parameter to the `INSTALLED_APPS` variable in the `settings.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is more than enough for a simple Django project. The Django debug toolbar
    will automatically adjust itself when a server runs in development mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart the server to see the Django debug toolbar, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Django debug toolbar](img/image00322.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there is a toolbar on the right-hand side of the profile page.
    The Django debug toolbar has many panels, of which a few are installed as default,
    which you can see in the preceding screenshot, and other third-party panels can
    also be installed here as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will discuss the panels that are enabled by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '**VersionPath**: `debug_toolbar.panels.versions.VersionsPanel`. This panel
    shows the basic information, such as the versions of Python, Django, and of other
    installed applications, if the information is available:![Installing the Django
    debug toolbar](img/image00323.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TimerPath**: `debug_toolbar.panels.timer.TimerPanel`![Installing the Django
    debug toolbar](img/image00324.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This panel contains some very important stats for the Django development. It
    shows two tables, as you can see in the preceding screenshot, which are **Resource
    usage** and **Browser timing**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Resource usage**: This shows the Django resource consumption on the server
    machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Browser timing**: This shows the details on the client-side. The request
    and response times are vital for knowing whether a piece of code can be optimized,
    and domLoading can be looked up if too much of rendering slows the page from getting
    loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SettingsPath**: `debug_toolbar.panels.settings.SettingsPanel`. A list of
    settings that are defined in the `settings.py` file are **headers**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path**: `debug_toolbar.panels.headers.HeadersPanel`![Installing the Django
    debug toolbar](img/image00325.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This panel shows the HTTP request and response headers and variables from the
    WSGI environment.
  prefs: []
  type: TYPE_NORMAL
- en: '**Request Path**: `debug_toolbar.panels.request.RequestPanel`![Installing the
    Django debug toolbar](img/image00326.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This panel shows the variables from the framework, starting from the view variables,
    which also has the **ratancs** argument variable; then, the **Cookies**, **Session**,
    and GET, and POST variables, as these are very helpful to debug the form submission.
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL Path**: `debug_toolbar.panels.sql.SQLPanel`![Installing the Django debug
    toolbar](img/image00327.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This panel is also very important as it shows the SQL queries made to the database
    for the page's response. This helps a lot at the time of scaling the application,
    as queries can be thoroughly examined and combined together to reduce database
    hits and improve the page response performance.
  prefs: []
  type: TYPE_NORMAL
- en: This also shows the code snippet that makes that SQL call, which is also very
    helpful while debugging the application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Static files Path**: `debug_toolbar.panels.staticfiles.StaticFilesPanel`![Installing
    the Django debug toolbar](img/image00328.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will list all the static files used from the static files location that
    we had set in the `settings.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Template Path**: `debug_toolbar.panels.templates.TemplatesPanel`![Installing
    the Django debug toolbar](img/image00329.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will list down the templates and context used for the current request.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cache Path**: `debug_toolbar.panels.cache.CachePanel`![Installing the Django
    debug toolbar](img/image00330.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we enable the cache, then this will show the details of the cache hit for
    the given URL.
  prefs: []
  type: TYPE_NORMAL
- en: '**Signal Path**: `debug_toolbar.panels.signals.SignalsPanel`![Installing the
    Django debug toolbar](img/image00331.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This panel shows the list of signals and their args and receivers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Logging Path**: `debug_toolbar.panels.logging.LoggingPanel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you have enabled logging, then this panel will show the log''s messages,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Django debug toolbar](img/image00332.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Redirects Path**: `debug_toolbar.panels.redirects.RedirectsPanel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When there is a page redirection on a URL, enable this to debug the intermediate
    page. Generally, you don't debug the redirect URL, so, by default, this is disabled.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Django debug toolbar](img/image00333.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: IPDB – interactive way of busting bugs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ipdb** is an interactive source code debugger for Python programs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install Ipdb:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Ipdb is the interactive way of debugging Python application. After installing
    Ipdb, to use it in any function, just write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This magical line will halt the whole Django execution at the point where this
    code is present, and will give you an active console, where you can find out the
    bugs or check the variable's value in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The shortcuts for ipdb (when you are in the active console) are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`n`: This refers to next'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ENTER`: This refers to repeat previous'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`q`: This refers to quit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p <variable>`: This is the print value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c`: This refers to continue'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: This is the list where you are'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: This is to step into a subroutine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r`: This means to continue till the end of the subroutine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`! <python command>`: To run Python command inside the active console'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is more to do than what is covered in this chapter. These were just the
    basics of debugging that we are going to use in our Django projects. You learned
    how to log and debug our code for a better and more efficient coding practice.
    We also saw how to use Ipdb for more debugging.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn the various ways to deploy our Django projects.
  prefs: []
  type: TYPE_NORMAL
