- en: Chapter 8. Testing and Debugging Jenkins Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at the testing and debugging of Jenkins
    plugins. We will explore several popular options and approaches that are currently
    available, and we will review the benefits and suitability of each approach.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Jenkins plugins is reasonably straightforward if you are happy to simply
    run standard Java Unit tests, but if you wish to test and mimic interactions via
    the user interface, testing can become a little bit more involved. We will start
    off with a simple example and then look at some of the approaches and tools you
    may want to investigate further for more complex scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to debug a Jenkins plugins is a valuable addition to your development
    skills—it can help you understand what is going on with your own plugin while
    you are developing it, and it can also help you to resolve issues in other plugins
    or Jenkins itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing: Under Testing, we''ll cover the following topics:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests for an existing project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing your own tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Techniques—HTML scraping, Mocking, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Debugging: Under Debugging, we''ll cover the following topics:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the local Jenkins debug session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting from an IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mvnDebug` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we were exploring plugin development earlier, we learned where to find
    and how to fetch the source code for any given Jenkins plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The full source code for most plugins can be quickly and easily downloaded from
    GitHub and then built on your local machine. In many cases, this also includes
    Unit tests, which are bundled with the source code and can be found in the expected
    (by Maven convention) location of `src/test`. Examining a selection of popular
    plugins would provide you with useful information and a great starting point to
    write your own test cases.
  prefs: []
  type: TYPE_NORMAL
- en: The Maven `test` target will execute all of the tests and produce a summary
    of the outcome by detailing all the usual statistics such as the number of tests
    run along with how many failures and errors there were and the number of skipped
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this process, we will take a look at the very popular `Green
    Balls` plugin, which simply replaces the standard blue balls in Jenkins with green
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This link explains why Jenkins has blue balls as default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://jenkins-ci.org/content/why-does-jenkins-have-blue-balls](http://jenkins-ci.org/content/why-does-jenkins-have-blue-balls)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Green Balls plugin homepage links to this GitHub location, where you can
    download the source and configuration files in a zip file or clone it using the
    URL provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jenkinsci/greenballs-plugin](https://github.com/jenkinsci/greenballs-plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re looking at this example plugin, as it contains a good variety of tests
    that cover the main topics and styles of testing—we will take a closer look at
    the contents shortly. Once you have the source code downloaded to your local machine,
    you should be able to kick off the tests by simply running the Maven `test` target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This target will then run through all the prerequisite setup steps before executing
    all the tests and then report on the outcome as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running tests with Maven](../images/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that a single test can be run by specifying the name of the test, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in one test being run, or you can use wildcards such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code results in four tests being run in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach could be used to categorize your tests into logical suites—integration
    tests, nightly tests, regression tests, or unit tests—whatever you like, simply
    by applying a consistent naming convention to your test classes and then setting
    up Jenkins jobs, or running Maven targets that will perform the corresponding
    actions, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Green B`alls plugin contains two test classes: `GreenBallFilterTest` and
    `GreenBallIntegrationTest`, which illustrate two different approaches of plugin
    testing—taking a look through their source code should help you to see how you
    can develop your own tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '`GreenBallFilterTest` performs some simple pattern matching tests to ensure
    that correct images are in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running tests with Maven](../images/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`GreenBallIntegrationTest`, as shown in the following screenshot, extends `HudsonTestCase`
    and uses `com.gargoylesoftware.htmlunit.WebResponse` to test and interact directly
    with the deployed web components, asserting that they return the expected results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running tests with Maven](../images/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This Jenkins page provides useful resources for further reading that would
    cater to more detailed and complex testing scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Unit+Test](https://wiki.jenkins-ci.org/display/JENKINS/Unit+Test)'
  prefs: []
  type: TYPE_NORMAL
- en: This link covers topics such as Mocking, HTML scraping, submitting forms, JavaScript,
    and web page assertions.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The remainder of this chapter focuses on debugging in a number of different
    ways in order to help in further understanding the application and its behavior
    at run time.
  prefs: []
  type: TYPE_NORMAL
- en: The main focus is on using a local instance of Jenkins and an IDE to debug development
    sessions; however, it is still useful to know about the options available through
    the inbuilt logging options in Jenkins, which are sophisticated and highly customizable.
    These are often a good starting point for any kind of issue, so we will start
    with a quick overview of the options here before moving on to the type of debugging
    that you'll probably want to set up and use when developing your own code.
  prefs: []
  type: TYPE_NORMAL
- en: Server debugging – a quick recap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jenkins uses the `java.util.logging` package for logging; the details of this
    can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html](https://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Jenkins documentation on logging is available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Logging](https://wiki.jenkins-ci.org/display/JENKINS/Logging)'
  prefs: []
  type: TYPE_NORMAL
- en: This page explains how to go about setting up your own custom log recorders—this
    can be very useful to separate and filter all the log output to help in finding
    what you are interested in, as *everything* is often piped to the default log,
    which can make analyzing difficult.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Jenkins system log can be checked out using the user interface at **Manage
    Jenkins** | **System Log** | **All Jenkins Logs**, and there are also links to
    the RSS feeds available at the bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Server debugging – a quick recap](../images/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: These can help identify and filter the different types of events within the
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For issues with slave nodes, there are log files available in the following
    location: `~/.jenkins/logs/slaves/{slavename}`.'
  prefs: []
  type: TYPE_NORMAL
- en: For job issues, historic log files are kept at `~/.jenkins/jobs/{jobname}/builds/{jobnumber}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also start Jenkins at a specific logging level by adding an additional
    `–D` argument to your startup process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `level` is one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SEVERE (highest value)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WARNING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INFO`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CONFIG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FINE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FINER`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FINEST (lowest value)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Off` and `All` levels are also available—see this page for further details
    and options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.oracle.com/javase/7/docs/api/java/util/logging/Level.html](http://docs.oracle.com/javase/7/docs/api/java/util/logging/Level.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with IntelliJ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To debug from within IntelliJ, point IntelliJ to the `pom.xml` file of the
    project and then select the option from the Run menu to create a new Run/Debug
    configuration. This should lead you to a screen similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with IntelliJ](../images/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: IntelliJ will have already parsed the POM file and will be aware of the available
    targets it contains. As soon as you start typing, for example, `hpi`, you would
    be presented with a drop-down list of all matching options to select from.
  prefs: []
  type: TYPE_NORMAL
- en: Select and run the required target (**hpi:run** again in this case) from the
    dropdown and then click on **Debug**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the familiar Jenkins startup process in the console and then
    be able to connect to a local debug session at:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/jenkins`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a debug point to the code at the same place where we made our "Hello World"
    text change previously (double-click on the left margin of the line that says
    **hello world…** and then run the Jenkins job). This should run up to the break
    point you have set and produce this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with IntelliJ](../images/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can then use the debug arrows and buttons to drive through the debug process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with IntelliJ](../images/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: These allow you to step in to, over, or out of the current debug point, and
    you should be able to inspect the listed variables that are being updated to reflect
    the live state of the application being debugged.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on debugging with IntelliJ, see this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.jetbrains.com/idea/help/stepping-through-the-program.html](https://www.jetbrains.com/idea/help/stepping-through-the-program.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with Eclipse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Debugging with Eclipse is very similar to the process described for IntelliJ
    previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set your breakpoint, double-click on the left-hand side margin in the code
    window, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Eclipse](../images/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, right-click on the POM file in your Eclipse project and select **Debug
    as…** and the following window appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Eclipse](../images/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Specify the `hpi:run` target and then click on **Debug**; Jenkins should start
    up as usual in the Eclipse console window.
  prefs: []
  type: TYPE_NORMAL
- en: As before, point your browser to `http://localhost:8080/jenkins` and then create
    or run a job that hits the breakpoint you set earlier—when this code/point is
    reached, Jenkins will freeze and the focus will switch to Eclipse, where you can
    inspect the current state of the variables and properties and navigate through
    the various debugging steps to drill further into issues or step over areas to
    see what changes and happens.
  prefs: []
  type: TYPE_NORMAL
- en: mvnDebug
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mvnDebug` tool provides an alternative approach that may be of interest
    to you. To use this, run `mvnDebug hpi:run` in the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should start up Maven in debug mode and a listener on port `8000` of local
    host, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![mvnDebug](../images/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now switch to your IDE and connect a debug session to this port. For example,
    in Eclipse, select **Run** | **Debug Configurations…**
  prefs: []
  type: TYPE_NORMAL
- en: 'This should produce the following window from which you can select **Remote
    Java Application**. Check whether the host and the port match:'
  prefs: []
  type: TYPE_NORMAL
- en: '![mvnDebug](../images/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, select **Debug** to connect to the `mvnDebug` session you started in the
    console. At this point, the `hpi:run` target will start up (in the console) and
    run Jenkins in debug mode in Maven while connected to your chosen debugger—for
    example, Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you examine the `mvnDebug` executable, you will see that it simply sets
    `MAVEN_DEBUG_OPTS` before running the normal `mvn` binary, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This reveals that it would be easy to specify a different port if you wish,
    or you could adjust this script to add any additional parameters or settings you
    may want to include.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins Logger Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final topic in this chapter is the **Logger Console** that is built in to
    the debug versions of Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you start up a local dev instance of Jenkins via Maven (whether through
    the command line or an IDE), you will notice the additional **Logger Console**
    box that is included on the left-hand side of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Jenkins Logger Console](../images/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Expanding this box will reveal a **live** log output window, which you can customize
    in real time to adjust and filter in or out the types and severities of log items
    that you want to see or hide.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping **info** selected provides a very verbose level of output, which includes
    information on mouseover events and other UI interactions. These can be very useful
    when debugging UI issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unchecking the **info** box leaves just the **warn** and **error** messages.
    The log output can be managed by pausing and optionally clearing the output and
    adjusting the filters to suit your need. The following screenshot shows the **Logger
    Console**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Jenkins Logger Console](../images/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, there is a large range of options and approaches available for
    both testing and debugging within Jenkins. This chapter introduced some of the
    main tools and approaches that you may hopefully find useful for your own development
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how to test and debug your code and set up a productive development
    environment that suits your needs and preferences should improve the quality of
    your own development. It should also make things much easier further down the
    line, when you look at distributing your own plugin and are considering alternative
    development options. We will take a look at some alternative technologies and
    languages in the next chapter.
  prefs: []
  type: TYPE_NORMAL
