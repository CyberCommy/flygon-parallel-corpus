- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The C++ of today provides programmers with the ability to write expressive and
    robust code, while still making it possible to target almost any hardware platform,
    and at the same time meet performance-critical requirements. This makes C++ a
    unique language. Over the last few years, C++ has turned into a modern language
    that is more fun to use and has better defaults.
  prefs: []
  type: TYPE_NORMAL
- en: This book aims to give you a solid foundation to write efficient applications,
    as well as an insight into strategies for implementing libraries in modern C++.
    I have tried to take a practical approach to explaining how C++ works today, where
    features from C++17 and C++20 are a natural part of the language, rather than
    looking at C++ historically.
  prefs: []
  type: TYPE_NORMAL
- en: This second edition was written to cover new features added in C++20\. I have
    included features that I think fit well with the rest of the content and the focus
    of this book. Naturally, chapters that discuss new features serve more as an introduction
    and contain fewer best practices and well-proven solutions.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of publishing this book, the compiler support for some C++20 features
    presented is still experimental. If you read this book near to the publication
    date, the chances are that you will have to wait for some features to become fully
    supported by your compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Many chapters span a wide range of difficulty. They start with the absolute
    basics and end with advanced topics such as custom memory allocators. If a section
    is not relevant to you, feel free to skip it or come back to it later. Apart from
    the first three chapters, most chapters can be read independently.
  prefs: []
  type: TYPE_NORMAL
- en: Our main technical reviewer, Timur Doumler, has had a big impact on this new
    edition. His enthusiasm and brilliant feedback have led to some chapters from
    the first edition being reworked to explain topics more thoroughly and in more
    depth. Timur has also been a vital contributor when it comes to incorporating
    new C++20 features into the chapters where they fit naturally. Select parts of
    the book have also been reviewed by Arthur O'Dwyer, Marius Bancila, and Lewis
    Baker. It has been a true pleasure to have had such excellent reviewers on this
    project. I hope you enjoy reading this new edition as much as I have enjoyed writing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book expects you to have a basic knowledge of C++ and computer architecture,
    and a genuine interest in evolving your skills. Hopefully, by the time you finish
    this book, you will have gained a few insights into how you can improve your C++
    applications, both performance-wise and syntactically. On top of that, I also
    hope that you will have a few "aha" moments.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Chapter 1*, *A Brief Introduction to C++*, introduces some important properties
    of C++, such as zero-cost abstractions, value semantics, const correctness, explicit
    ownership, and error handling. It also discusses the drawbacks of C++.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 2*, *Essential C++ Techniques*, outlines automatic type deduction
    using auto, lambda functions, move semantics, and error handling.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 3*, *Analyzing and Measuring Performance*, will teach you how to analyze
    algorithmic complexity using big O notation. The chapter also discusses how to profile
    your code to find hotspots and how to set up performance tests using Google Benchmark.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 4*, *Data Structures*, takes you through the importance of structuring
    data so that it can be accessed quickly. Containers from the standard library,
    such as `std::vector`, `std::list`, `std::unordered_map`, and `std::priority_queue`,
    are introduced. Finally, this chapter demonstrates how to use parallel arrays.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 5*, *Algorithms*, introduces the most important algorithms from the
    standard library. You will also learn how to use iterators and ranges, and how
    to implement your own generic algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 6*, *Ranges and Views*, will teach you how to compose algorithms using
    the Ranges library introduced in C++20\. You will learn why views from the Ranges
    library are useful and some benefits of lazy evaluation.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 7*, *Memory Management*, focuses on safe and efficient memory management.
    This includes memory ownership, RAII, smart pointers, stack memory, dynamic memory,
    and custom memory allocators.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 8*, *Compile-Time Programming*, explains metaprogramming techniques
    using `constexpr`, `consteval`, and type traits. You will also learn how to use
    C++20 concepts and the new Concepts library. Finally, it provides practical examples
    of metaprogramming use cases, such as reflection.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 9*, *Essential Utilities*, will guide you through the Utilities library
    and how to benefit from types such as `std::optional`, `std::any`, and `std::variant`
    using compile-time programming techniques.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 10*, *Proxy Objects and Lazy Evaluation*, explores how proxy objects
    can be used to perform under-the-hood optimizations while preserving clean syntax.
    Additionally, some creative uses of operator-overloading are demonstrated.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 11*, *Concurrency*, covers the fundamentals of concurrent programming,
    including parallel execution, shared memory, data races, and deadlocks. It also
    includes an introduction to the C++ Thread support library, the Atomic library,
    and the C++ memory model.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 12*, *Coroutines and Lazy Generators*, contains a general introduction
    to the coroutine abstraction. You will learn how ordinary functions and coroutines
    are executed on the CPU using the stack and the heap. C++20 stackless coroutines
    are introduced and you will discover how to solve problems using generators.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 13*, *Asynchronous Programming with Coroutines*, introduces concurrent
    programming using stackless coroutines from C++20 and touches on the subject of asynchronous
    network programming using Boost.Asio.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 14*, *Parallel Algorithms*, starts by showing the complexity of writing
    parallel algorithms and how to measure their performance. It then demonstrates
    how to utilize standard library algorithms in a parallel context using execution
    policies.'
  prefs: []
  type: TYPE_NORMAL
- en: Get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the most out of this book, you need to have a basic knowledge of C++.
    It's preferable that you have already faced problems related to performance and
    are now looking for new tools and practices to have ready for the next time you
    need to work with performance and C++.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of code examples in this book. Some are taken from the real
    world, but most of them are artificial or vastly simplified examples to prove
    a concept, rather than provide you with production-ready code.
  prefs: []
  type: TYPE_NORMAL
- en: I have put all the code examples in source files divided by chapter so that
    it is fairly easy to find the examples you want to experiment with. If you open
    up the source code files, you will note that I have replaced most of the `main()`
    functions from the examples with test cases written with the Google Test framework.
    I hope that this will help you rather than confuse you. It allowed me to write
    helpful descriptions for each example, and it also makes it easier to run all
    the examples from one chapter at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to compile and run the examples, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An operating system (the examples have been verified on Windows, Linux, and
    macOS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A compiler (I used Clang, GCC, and Microsoft Visual C++)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CMake
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CMake script provided with the example code will download and install further
    dependencies, such as Boost, Google Benchmark, and Google Test.
  prefs: []
  type: TYPE_NORMAL
- en: During the writing of this book, I found it helpful to use **Compiler Explorer**,
    which is available at [https://godbolt.org/](https://godbolt.org/). Compiler Explorer
    is an online compiler service that lets you try various compilers and versions.
    Try it out if you haven't already!
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code bundle for the book is hosted on GitHub at [https://github.com/PacktPublishing/Cpp-High-Performance-Second-Edition](https://github.com/PacktPublishing/Cpp-High-Performance-Second-Edition).
    If there's an update to the code, it will be updated on the existing GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: There are other code bundles from Packt's rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Packt also provides a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781839216541_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781839216541_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, folder names, filenames, file extensions,
    dummy URLs, and user input. Here is an example: "The keyword `constexpr` was introduced
    in C++11."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When I wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    the screen. For example: "Fill in the form and click on the **Save** button."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email Packt at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you could report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata),
    select your book, click on the **Errata Submission Form** link, and enter the
    details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you could provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make a purchase decision, we at Packt can understand
    what you think about our product, and our author can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://packt.com).
  prefs: []
  type: TYPE_NORMAL
