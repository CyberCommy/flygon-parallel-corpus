- en: Chapter 9. Vulnerability Assessments and Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning all the additional tools that come packaged with the Nmap suite,
    it is a good idea for us to take a look at some third-party tools that can assist
    in conducting a vulnerability assessment. Vulnerability assessments, more than
    just a simple port scan, are comprehensive reports that detail the full range
    of vulnerabilities that may exist on a given target scope.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the tools we'll learn about in this chapter interact very well with
    Nmap, while others are simply follow-up tools to use after the initial Nmap scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Conducting a vulnerability scan with Nessus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assessing web server issues with Nikto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying sensitive web directories with DirBuster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with intercepting proxies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conducting vulnerability scans with Nessus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common pieces of software to use in conjunction with a port
    scanner is a vulnerability scanner. This scanner takes the role of port scanning
    one level higher; rather than identifying open ports and services, it cross-references
    these versions with a (usually proprietary) database of vulnerabilities in order
    to show whether a given service is vulnerable to attack.
  prefs: []
  type: TYPE_NORMAL
- en: These scanners are the key elements in vulnerability assessments, as they reduce
    the burden of the security engineer; instead of having to manually identify weaknesses,
    a scanner (that is frequently updated) can do much of that work.
  prefs: []
  type: TYPE_NORMAL
- en: Although Nessus was originally started (in 1998) as a free security scanner,
    it has since then been closed off to the public due to Tenable (the company Nessus'
    creator founded) selling the licenses instead. While many security companies pay
    for these licenses, you can try out a fork of the Nessus project (OpenVAS) for
    free.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Nessus is fairly straightforward. Although many security tools run on
    the command line (including some that we''ll review later in this chapter), Nessus
    uses a web-based user interface that is very intuitive to use. The basic usage
    consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a target list (Nmap can help with this)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting a scan type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpreting results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Nessus "templates" page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Conducting vulnerability scans with Nessus](img/4065OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, logging into Nessus and selecting
    **New Scan** allows us to choose from a variety of premade scan types—while it
    also allows us to select **Policies** for custom scan types. For the purpose of
    this scan, I have created a special scan type that will scan all ports (just like
    Nmap!) and then cross-reference any vulnerabilities it detects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to launch the scan, we must select the targets we''re looking to scan.
    Just like during our Nmap test scans, we''ll scan `scanme.nmap.org`. Note that
    conducting a vulnerability scan on an unwilling target can be very upsetting to
    system administrators, and is illegal in many parts of the world:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Conducting vulnerability scans with Nessus](img/4065OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Nessus graphical user interface is very simple to use; simply add the host
    to "targets," and give the scan a name. In large penetration tests, many security
    assessors will specifically parse out online hosts (or hosts with services listening)
    from the Nmap results, in order to not waste Nessus time on hosts that are either
    offline or do not have any services listening. The following screenshot shows
    a vulnerability scan in Nessus:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Conducting vulnerability scans with Nessus](img/4065OS_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the scan is completed, clicking on **Vulnerabilities** shows the current
    list of vulnerabilities detected on the target scope. As expected, `scanme.nmap.org`
    has very few vulnerabilities (the Nmap team knows a lot about security!), but
    there are still a few "informational" findings that crop up in order to give the
    most information possible to the assessor. In this case, it appears that some
    configurations (such as the Apache web server information) allow information disclosure.
  prefs: []
  type: TYPE_NORMAL
- en: Nessus is a powerful tool, but the NSE is quickly becoming a formidable competitor—by
    being able to script out all of the same checks that Nessus has built-in. The
    advantage Nessus holds, however, is that Tenable has a full team of security engineers
    writing new plugins almost constantly; with Nmap scripts, someone needs to create
    a script, upload it to the web, and distribute it to many users before it can
    be used in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Custom checks are another feature that Nessus can support. Much like the NSE,
    Nessus users may use a powerful scripting tool called the **Nessus Attack Scripting
    Language** (**NASL**). NASL scripts can be written by anyone, and provide the
    full power of the Nessus engine—without necessarily running a full Nessus scan
    against a given host. Full NASL documentation can be accessed on the Tenable website.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing web server issues with Nikto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nikto is an open source tool that allows security assessors to evaluate the
    configuration of web servers. Unlike Nmap or Nessus, Nikto is designed exclusively
    for web-based configuration evaluations. As a general rule, it's a good idea to
    run Nikto (or a similar web scanner) on web services that are identified as part
    of a penetration test or vulnerability assessment. Nikto can be accessed from
    its web page at [https://cirt.net/Nikto2](https://cirt.net/Nikto2).
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation of Nikto is a fairly straightforward process, similar to the
    other tools we''ve used throughout this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wget https://github.com/sullo/nikto/archive/master.zip`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`unzip master.zip`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cd nikto-master/program`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Nikto is now ready to use!`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nikto, like many early security tools, is a Perl script—which means that as
    long as Perl is available on your system, Nikto is good to go! In order to demonstrate
    how Nikto works, we will run a simple scan against our favorite host, `scanme.nmap.org`.
    To run this scan, we invoke Nikto using the `-h` (host) flag: `nikto -h scanme.nmap.org`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assessing web server issues with Nikto](img/4065OS_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see in the preceding screenshot that as Nikto runs, it identifies many
    issues (including some of the issues we identified with Nmap and Nessus), as well
    as a few different configuration options—such as the lack of certain security
    headers, the existence of certain web directories, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In the event of actual web server vulnerabilities, Nikto can be invaluable to
    detect exploitable attack vectors. As time goes on, the NSE is taking more and
    more of these checks from Nikto and integrating them directly into Nmap—but at
    its core, Nmap is still a port scanner; detecting vulnerabilities is a bonus,
    not the primary purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying sensitive web directories with DirBuster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Nikto can identify potentially sensitive directories and web server
    misconfigurations, its primary purpose is not to find hidden files. DirBuster,
    however, exists entirely to find the hidden files and directories on web servers.
    Using Java (so the Java Runtime Environment must be installed), DirBuster can
    send many, many requests to a web server in order to completely enumerate any
    directories that may be interesting to any sort of an assessor. From a self-testing
    perspective, running DirBuster can be very useful to verify that there are no
    sensitive files left on your own web server!
  prefs: []
  type: TYPE_NORMAL
- en: 'Technically, DirBuster as a stand-alone product is considered as end of life
    by OWASP, the organization that runs the project. The codebase has been ported
    to the OWASP **Zed Attack Proxy** (**ZAP**) project (which we''ll talk about in
    the next section), but DirBuster can still be run in stand-alone mode—which is
    very common in the information security consulting industry. You can download
    DirBuster at the following URL: [http://sourceforge.net/projects/dirbuster/](http://sourceforge.net/projects/dirbuster/).'
  prefs: []
  type: TYPE_NORMAL
- en: In its normal use case, DirBuster is a **Graphical User Interface** (**GUI**)-based
    software—however, the most common usage in the security industry is to use the
    `-H` flag, which runs DirBuster in headless mode. This mode means that the software
    runs on the command line, allowing easier scripting to run the software, as well
    as the ability to run DirBuster from "staging" servers, which are usually only
    accessed over SSH. Fortunately, we've become very comfortable with the command
    line while learning about Nmap, so this shouldn't be a problem!
  prefs: []
  type: TYPE_NORMAL
- en: 'Running DirBuster can be a little bit daunting for newcomers, but it''s actually
    very simple: running `java -jar [Dirbuster file].jar -H -u http://scanme.nmap.org`
    will run the software against `scanme.nmap.org`. We invoke it using `java -jar`
    because we''re running a JAR file (a packaged Java program), `-H` for headless
    mode (as we learned above), and `-u` before the URL of the base site we''re looking
    to scan. Although we can scan sites with permission, DirBuster generally takes
    a little while to run—since it has to check many, many potential directories to
    give a comprehensive list. Once DirBuster is finished running or it is stopped
    with the "control-C" stop mechanism, a report is written to a text file in the
    directory DirBuster ran. This automatic log generation is very useful, since DirBuster
    can often find a large amount of sensitive directories.'
  prefs: []
  type: TYPE_NORMAL
- en: It's interesting to note that you can specify the list that DirBuster uses to
    check for directories, and it's a good idea to make sure this list is always up-to-date.
    It's a good idea to check around the Internet for updated lists, especially as
    DirBuster itself is technically no longer actively maintained.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with intercepting proxies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've now learned how to conduct full vulnerability scans using Nessus, find
    web server misconfigurations using Nikto, and identify sensitive files and directories
    using DirBuster. However, none of these tools show us how a web application may
    actually be communicating with a potential client browser. In order to see this
    level of communication, we need to use what's called an intercepting proxy.
  prefs: []
  type: TYPE_NORMAL
- en: You've probably heard of a proxy before—something you can bounce your web traffic
    off, in order to have a different source IP address or to avoid certain types
    of firewalls—but an intercepting proxy is something different altogether. While
    you're still bouncing your traffic somewhere else, in the case of an intercepting
    proxy, you're proxying to yourself and then using a piece of software to potentially
    modify that request.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most common intercepting proxies in the security industry is Burp
    Suite, which has a "community" edition (free) and a "professional" edition (paid).
    A popular alternative to Burp Suite is OWASP ZAP, but for the purposes of demonstrating
    an intercepting proxy, Burp Suite does the job just fine. You can download the
    free edition of Burp Suite at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://portswigger.net/burp/download.html](http://portswigger.net/burp/download.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The first step to set up an intercepting proxy is configuring a web browser
    to point at the proxy. Each proxy is different, but Burp Suite uses port 8080
    as the default. This is usually in the web browser's settings, generally under
    the **Network** tab. Once proxying is set up, simply browsing to any page will
    allow the request to be intercepted.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we''ve set up Burp Suite to intercept requests, and attempted
    to use Firefox to browse to `scanme.nmap.org`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with intercepting proxies](img/4065OS_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Because we have proxying to Burp Suite configured, we can immediately see that
    our request ("GET /") is being intercepted by Burp Suite. This is useful in and
    of itself, as it allows us to see exactly what our web browser is doing with the
    request, but there are even more functionalities to intercepting proxies. More
    than just seeing the requests, we can actually modify them on the wire! The following
    screenshot shows Burp Suite intercepting a request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with intercepting proxies](img/4065OS_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, you can see that we changed our request from `GET
    /` to `GET /TEST`, which changes the request to the web server before the server
    receives it. Although this change is just a simple `GET` parameter change, this
    functionality is very useful when assessing web applications. For example, it
    can sometimes be possible to send the `POST` requests for other users'' data by
    changing a variable, where simply browsing to a different URL with a web browser
    would not produce the intended effect. In terms of assessing web applications,
    an intercepting proxy is at the forefront of cutting-edge tools. The following
    screenshot shows a web browser interpreting the request''s result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with intercepting proxies](img/4065OS_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that once we clicked the **Forward** button in Burp Suite, allowing
    the modified request to continue on to the server, our browser got a response
    that `/TEST` was not found on the server. This 404 error was produced because
    the request was changed on the wire, and the new file does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite is a powerful tool, with many features—and worthy of a whole book
    to itself, which is also available. If you have an interest in web application
    security, I strongly recommend using and learning more about Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter took us from understanding how to run port scans, to learning how
    other security tools fit into the security professional's daily life. We have
    learned how to conduct vulnerability scans and assessments with Nessus, evaluate
    web server configurations with Nikto, find hidden files and directories using
    DirBuster, and intercept and modify requests to web applications using Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: Although there is still a lot to learn about the security world, we have now
    gotten to the point where conducting a vulnerability assessment is within our
    reach!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn the basics of conducting a penetration test
    using Metasploit, and how Nmap and Metasploit can be used in conjunction to produce
    an excellent attack platform.
  prefs: []
  type: TYPE_NORMAL
