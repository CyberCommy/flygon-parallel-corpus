- en: Creating Buttons with Modular, Reusable CSS Classes, and CSS3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having CSS that is modular and reusable makes it organized and concise, thereby
    avoiding situations where you may feel like pulling your hair out. Wouldn't it
    be awesome to just add the class of `.button` to an anchor element, no matter
    where that anchor element is in your markup, and have it transform into a button?
    CSS is "reusable" if you're able to use its classes anywhere and don't need these
    classes to be qualified by parent elements as long descendant selectors. The term
    "modular" refers to the ability to add variations to the button by adding another
    class to it so that one element can have two classes that could come together
    to form something very different.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good example of how to write modular and reusable CSS is this: creating buttons.
    However, this concept should be applied everywhere, across all components of your
    website. We have a lot to go over in this chapter. We will cover modular CSS and
    multiple classes in the first two sections, before we switch gears and talk about
    how selectors can overrule each other in the specificity rules section. We''ll
    then get into CSS3 pretty heavily with transitions, transforms, and gradients,
    and we''ll go through every step of creating and styling a big call-to-action
    button.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating buttons with modular CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create buttons with modular CSS classes. We'll find out
    what exactly modular CSS is and why it's useful. First, let's look at the final
    site we're going to create and explore the different button types we'll use.
  prefs: []
  type: TYPE_NORMAL
- en: Different button types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the very top, we have our enormous Go Premium call-to-action button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Scrolling down a bit on the home page and we''ll find these "ghost" buttons
    with a nice hover state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the movies page, we have that same standard button. It just has a different
    color and is positioned a little differently. This appears in all three movie
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, in this section, we''re going to build these standard buttons at the bottom
    of each of all three columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Building standard buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our starting point has us a long way to go, but it should be pretty easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s jump into the HTML of our secondary section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: I'll add the class of `button` to all three anchor elements at the bottom of
    each column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, jumping down to the bottom of our CSS, let's add a huge comment for our
    new section and name "Buttons".
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is where all our button styles will go.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we want to do is create the `.button` selector. All the stylistic properties
    that are shared across buttons will go here. We won''t put any positioning properties
    in the button selector because buttons could be positioned anywhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start by adding a border. We''ll go with two pixels solid and a dark
    gray color. We''ll apply the same color to the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving and refreshing the browser it starts to ever so slightly resemble
    a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now need to add some padding. Let''s go back to our CSS and use the two-value
    padding shorthand: `10px` for the top and bottom, and `0px` for the left and right.
    This is because we''re going to end up centering the text. Let''s also change
    the display property to `block` because these are inline elements and we want
    them to behave like block-level elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this, refresh the browser, and see the effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we now have to add some text-level properties. First, let''s
    add a font family. We''ll go with the typical `sans-serif` stack: `Arial, Helvetica,
    sans-serif`. Then, use the `text-align` property to align the text in the center
    of the element. We''ll also set the `font-weight` to `bold`, then use another
    property called `letter-spacing` and add a value of `1.5px`. If you''re not familiar
    with the `letter-spacing` property, it does pretty much what you think it doesâ€”it
    creates a horizontal space between each letter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we save this and refresh the site, we will have our button elements. There''s
    no hover state yet; we''ll get into that in another section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you go over to the movies page now, you will see the Learn More links there,
    which need to be buttons as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So let''s jump over to that markup in the `shark-movies.html` file, and do
    the same thing. Add the class of `button` to each anchor tag at the bottom of
    each movie section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this and refresh, and you''ll get a button instantly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It sort of works; we have a button, but not entirely. They look like buttons
    but they are of the wrong color, too wide, and not positioned to the right. Also,
    the text doesn't contrast well with the background, especially in darker sections.
    So there is some fixing we have to do, essentially because these buttons are different
    to the ones on the home page, which were full-width buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and fix those buttons now and look at how we can get even more
    modular and add multiple classes in order to vary the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap, so far you''ve learned how to create a class that can be reused anywhere
    on our web page in order to create a button. However, buttons tend to vary across
    a website. You may have, for instance, buttons like: `Okay`, `Close`, `Cancel`,
    `Submit`, and `Add to cart`. All of which have different meanings so are all colored
    or styled slightly differently. In some scenarios, as in the case of our movies
    and index pages, the buttons just end up varying based on the page that they''re
    on because of the layout differences between the pages. In this section, we''ll
    get even more modular and learn how to use multiple classes in order to change
    the appearance of our buttons. We''ll look at a few examples of how multiple classes
    can provide us some affordances in regard to styling our buttons throughout the
    site.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates the final site. We''re shooting for buttons
    that look like the Learn More button. They''re floated to the right, they''re
    white, they have a white border, and their width is narrower:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is where we stand with regard to our site at the moment. Our
    buttons are dark gray in color and have full width, they''re just not what we''re
    looking for here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the width of the buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s address the width issue by creating a new class called `button-narrow`.
    So in our CSS, where our button section is, below the `.button` rule set we created
    in the last section, create a new class called `.button-narrow`. Very simply,
    the width is going to be `25%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this. Next, go to the `shark-movies.html` file. Go to each of the three
    anchor tags with a class of button. I''ll just show the Learn More button here,
    but the code changes are the same for all of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add our new `button-narrow` class to these elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this, go to the browser, and you will see that the buttons are now much
    smaller in all three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's take this a step further and create another class called `button-alt`,
    which will control the border and font colors.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the border and font colors of the buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add the `button-alt` class as well to each of the 3 **Learn More** buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now go to the CSS and type `.button-alt` as our new selector beneath our `.button-narrow`
    selector. I chose `button-alt` as the class because this is an alternative button
    color. Then, specify `color` as white and the `border-color` as white:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this, go to the site, and you will now see that we''re almost there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Positioning the button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final thing is the position of the button. It is currently on the left-hand
    side and it needs to sit on the right. Naturally, we could create a class called
    `button-right` that floats the buttons to the right. However, floating elements
    to the left or right is very common, even outside of buttons. It is preferable
    to keep the class names more generic, such as float right and float left. This
    way, we can float anything to the right or left. In my case, before the `Buttons`
    section in the CSS, I have my global styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Right below this global list, I''m going to copy my standard library of modular
    styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is part of the base boilerplate I''ve built over the years, and it has
    classes such as `float-left`, `float-right`, `clear`, `bold`, `hidden`, and some
    other common modular classes. You can see the full list in the download package.
    These can be reused throughout the site. Now, in the `shark-movies.html` file,
    let''s simply add the `float-right` class to our three anchor tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this and refresh the shark movie site. You''ll now see the buttons floated
    to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I should also point out that our container that surrounds each of these sections
    is not going to collapse. Let''s go into DevTools to see why. The section highlighted
    in the following screenshot with a class of `content-block` has not collapsed
    because I added the clearfix `grouping` class to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If I were to take this out and delete `grouping` from that line, you will see
    how the collapse would take effect. Because we have this `grouping` class, we
    make sure this section doesn''t collapse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, in conclusion, we followed a very modular and reusable approach to build
    our button and created a few modular button-related classes that can be used to
    vary the style of the button. There are other ways we could have done this. I
    could have used a descendant selector to style the buttons based on their parent.
    That way, all the buttons inside of content-block would always be floated to the
    right and be white instead of dark gray. This would have been a decent alternative
    if it would have provided other areas, besides content blocks, the same alternative
    button styles, which is highly likely. Next, let's talk about why a modular, reusable,
    and light approach to CSS is necessary. We'll do this by talking about the rules
    of specificity.
  prefs: []
  type: TYPE_NORMAL
- en: Specificity rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're beginning to understand how a modular approach to CSS allows us to use
    classes as little chunks of CSS that can be used anywhere on the web page to style
    any element. This makes writing CSS very convenient. However, it only works if
    the CSS is kept lightweight. As you'll learn in this section, every CSS selector
    can be weighed on a scale, and the heaviest selector wins the style battle between
    two competing selectors. So, I'll start by explaining the weights of different
    selectors and how they can overrule one another. Then, we'll talk a bit about
    how the universal selector and the `!important` declaration fit into the weights
    of the selectors.
  prefs: []
  type: TYPE_NORMAL
- en: The weights of different selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All selectors are assigned a weight, and the heaviest selector takes precedence
    when conflicting CSS rules exist. It''s natural when architecting a website that
    you have general styles that get overridden with more specific styles in different
    circumstances. In the global area at the top of the style sheet, a very broad
    style has been set for all paragraph elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The font size is `16px`. There is a `line-height` property of `1.6` and `20px`
    of `margin-bottom`. Naturally, I might want to overwrite either `line-height`
    or `margin-bottom` under varying circumstances. Let''s try and override that with
    a new rule set with a selector of `.content-block p`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a descendant selector. Now let''s add a `line-height` of `1.8` and
    `margin-bottom` of `40px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Switch over to the website to view the original setup. This descendant selector
    should target any content or paragraph text in the main text area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we save our CSS and refresh the site, we get more line height and margin
    bottom, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So how much does each selector weigh? Well, you can think of inline styles
    as worth 1,000 points, IDs as worth 100 points, classes as worth 10 points, and
    elements as worth one point each. In the example we have been looking at, the
    single `p` element selector is worth just 1 point, whereas `.content-block p`,
    which was a class and an element, is worth 11 points:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This point system figures out which selector is going to win. In this case,
    the selectors were both targeting the paragraph element; however, because `.content-block
    p` is worth 11 points, it''s going to trump the rule set above it which, as an
    element selector, is only worth one point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'IDs are worth 100 points, which is 10 times as much as a class. In our `shark-movies.html`
    file, you can see that the first section of Jaws has the `jaws` ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s switch back to our style sheet and create a new rule set, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When we refresh the browser, you will see that `line-height` of `3` does take
    effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Our selector that uses an ID that's worth 101 points overrides the selector
    that has a class and an element worth just 11 points as well as the selector that's
    just an element worth just 1 point. The weight of the ID, in my case means I tend
    to stay away from them for styling purposes when I can. IDs are also less versatile
    than classes; they can only be used once on a page. I really try to avoid using
    them altogether because they're not very reusable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing to avoid is inline styles, which we can think of as worth a whopping
    1,000 points. Inline styling will beat everything, including selectors with an
    ID. Let''s target the paragraph again to demonstrate this. We''ll jump right into
    the `shark-movies.html` file and actually add an inline style. Beneath the `h1`
    selector inside the `jaws` section, we have our paragraph, so let''s add our inline
    style to it. We''ll type `style="line-height: 1"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When we save this, we''ll return to our site and refresh the browser. Once
    we do this, we''ll see that `line-height` is using that inline style because it''s
    worth more. It''s heavier than all the other selectors we have in our style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So what beats inline styles? There is one ace up your sleeves: the `!important`
    declaration.'
  prefs: []
  type: TYPE_NORMAL
- en: The !important declaration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how the `!important` declaration works. We go back to this element
    selector in the CSS that''s just a paragraph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can go inside of the `line-height` value itself, then add `!important` to
    the end of that line. The line height will go up to `1.6`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s inspect this paragraph to make sure that it''s actually using the `!important`
    declaration. As you can see in Chrome''s DevTools, the inline style of 1 is being
    crossed out; we can see the ID worth 101 points with an element is also being
    crossed out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we scroll down the styles a little more, we see our class plus the element
    that is being crossed out too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Scroll down a bit more and you''ll see that indeed it is using `line-height`
    from our element selector with the `!important` declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding the `!important` declaration can actually be thought of as being worth
    10,000 points, beating all the classes, IDs, and inline styles of that one property.
    Like you want to stay away from inline styles and IDs, you also want to stay away
    from using the `!important` declaration unless you have to for a really good reason.
    There is one other selector that is worth less than a point: the universal selector.'
  prefs: []
  type: TYPE_NORMAL
- en: The universal selector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The universal selector is just an asterisk. It''s worth zero points, so it
    only works when no other selector is in contention. Take out the `!important`
    declaration in our CSS. Above our other rule sets, let''s add a `*` as a selector
    and add a `font-size` of `9px` and `line-height` of `.5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Technically, this star should apply to every element unless something more
    specific is defined. Anything beats the `*` selector. Now when you go to the site,
    you will see that once you take the `!important` declaration out, you fall back
    to your inline style''s `line-height` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In DevTools, we can see the universal selector is eventually getting crossed
    out. It''s not being applied to this paragraph text or really anything. It''s
    not being applied too much on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Because its weight is worth so little, a lot of the times what you''ll see
    is the universal selector being used as a primitive reset. You could add the properties
    and values of `margin: 0` and `padding: 0` to the universal selector and something
    like that at the top of your style sheet. This would really reset the margin and
    padding down to zero for every single element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s revisit our chart showing the weights of different selectors. You''ve
    learned that you can think of `!important` as being worth 10,000 points and the
    universal selector as being worth zero points:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Reality of the point system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In reality though, the point system I''m describing is not completely truthful.
    Let''s say you have this selector of 11 elements: `div div p p p p p p p p p {
    ... }`. Using the system I already described, this is worth 11 points. And I described
    a class selector as being worth 10 points. However, the long element selector
    will never beat one single class: `.i-beat-any-number-of-elements`. So technically,
    elements are worth 0,0,0,1 and classes are worth 0,0,1,0, ID''s are worth 0,1,0,0,
    and inline styles are worth 1,0,0,0\. But! Pause for emphasis. You''d be having
    a pretty bad experience if you ever created a selector consisting of more than
    10 elements. That would be a very bad idea, and I recommend that you try not to
    go more that 3 or 4 at the very most. So, instead of thinking of elements as worth
    0,0,0,1 and classes as worth 0,0,1,0, we can think in the terms I described previously
    where classes are worth 10 points and elements are worth 1 point, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, it is important to remember that authoring CSS at any reasonable scale
    is easier when you keep your selectors lightweight because you can then easily
    create modular, reusable classes in the form of a button. A big part of creating
    a modern website is overriding styles when you have to; you don't want to make
    this difficult. I strongly urge you to stick to classes and element selectors
    and be very conservative with your use of the `!important` declaration; steer
    clear of inline styles and IDs altogether.
  prefs: []
  type: TYPE_NORMAL
- en: Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding CSS specificity and how selectors overrule each other can alleviate
    a lot of frustration when using CSS. Now that we've got a better understanding
    of this, let's get back to our project and finish styling the buttons we have
    been working on. A button is incomplete unless it has a slick hover state with
    a smooth transition. We'll start this section by creating a hover state using
    the pseudo selector `:hover`. Then, we'll smooth it out with a transition before
    finally discussing when vendor prefixes are necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a hover state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the moment, the buttons on our site are ghost buttons. They have no background
    color, a dark gray border, or dark gray text, as you can see in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We want to create a button that will have a dark gray background color and
    will show text in white when hovered. So let''s knock this out using the `:hover`
    pseudo class. Under the first existing `.button` rule set, add a new selector
    called `.button:hover`. Add `background-color: #333` and add the color of the
    text as white:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how I''m not using the full six characters of the hex code. If all six
    characters are the same, it''s alright if you use only three characters. Now if
    we save this and refresh, we will have our hover state when we hover the mouse
    over a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The hover state's transition is very abrupt though; it's happening immediately.
    So the next step is to use the CSS3 transition property to smooth out the state
    change from no hover to hover.
  prefs: []
  type: TYPE_NORMAL
- en: Using the transition property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can choose which properties to transition, the duration of the transition,
    and the timing function of the transition. All three properties can be listed
    out separately as `transition-property`, `transition-duration`, and `transition-timing-function`;
    however, using the shorthand seems to be the easiest way. So we''ll type in `transition`
    as a new property in the `.button` rule set and use `.25s`, or a quarter of a
    second. And we''ll specify `all` for which properties we''ll be transitioning.
    We''ll use a `linear` timing function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we view this in the browser and as you move your mouse over each button,
    it is a much more gradual change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It takes 0.25 seconds to transition from dark gray to white text and the same
    thing for the background color and border. A quarter of a second seems to be just
    right, but you can experiment with a faster transition or a slower one. You could
    change it to one-tenth of a second and that would be good too, very fast, almost
    immediate. You could change it to one second, which would be ten times slower
    and probably way too slow. I find that 0.2 to 0.3 seconds tend to be that "Goldilocks-zone"
    for transitioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next value we added after `0.25s` was `all`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be set to a certain property you want to transition or to all the
    properties. So, if you want to, you could set this to just `color`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The only thing that would transition would be the text color. If you try this,
    you''ll see how the button''s background color of dark gray transitions immediately,
    but the text color transitions over 0.25 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If we wanted to, what we could add a comma separate list of properties to transition.
    In this case, I'm transitioning both `color` and `background-color`. One reason
    this is nice is if you need to transition more than one property, but not every
    property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Because of this, both the background color and the text color will transition
    at the same speed. We accomplished this much more efficiently using the `all`
    keyword to transition both the text color and the background color. However, in
    some cases, it might be useful to keep properties'' transition at a different
    speed than the other. Let''s change the `background-color` to have a timing-function
    of 1.25 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The color transition would now be faster than the background color transition.
    This is not super useful in our immediate situation, so let''s change it back
    to the way we had it earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, the timing function is set to `linear`. We can also use `ease`,
    `ease-in`, `ease-out`, and `ease-in-out`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: For short transitions like the one we're using, the linear method or the default
    will work just fine; any of them will work just fine. It's actually quite difficult
    to tell the difference between `ease`, `ease-in`, `ease-in-out`, and `linear`
    with a really fast transition like this. I recommend experimenting with each one
    to determine which one suits your needs best. You may need to alter the duration
    of the transition to clearly see the effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, so the transition adds a nice little experience layer to our buttons
    when hovered. We can also transition the active and focus states. Focus is the
    state when your user tabs to the button using their *Tab* key instead of hovering
    their mouse pointer over the button. I like to make all hover states the same
    as the focus state. This is accomplished easily by adding the selector using a
    comma. So just like we have `.button:hover`, we can do `.button:focus`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: If you add this, the focus state will also be triggered. When you hit the *Tab*
    key and the *Shift* + *Tab* key to move from button to button, their hover states
    will also be their focus states. That's nice and good for accessibility reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Vendor prefixes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, transitions are a CSS3 property. All modern (major) browsers
    support them: Chrome, Firefox, Safari, Internet Explorer, and Edge. Older browsers,
    such as IE9 and below, don''t support them. They still get the hover state, but
    it will be abrupt without any transition. This isn''t a problem as transitions
    typically aren''t a core feature of your website, but more of an added experience
    level. Still, they are CSS3, and we can get a little more mileage out of them
    by including the vendor prefixed versions. Traditionally, the `-webkit-` prefix
    was used for Safari and Chrome; `-moz-` was used for Firefox and `-o-` for Opera.
    However, Firefox and Opera also now use `-webkit-`, so technically you don''t
    need `-moz-` and `-o-` as much as you used to need them; however, for older versions
    of these browsers, you can still include them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can get by with half the CSS and still have 99% of all users see your
    transition just with the `-webkit-` vendor prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Transitions are a great feature of CSS3, and they add an extra layer of nice-ness
    to the user experience. So far, we''ve created a hover state for our ghost buttons
    and used the transition effect to smooth out the state change. We then added vendor
    prefixes to support older browsers. Next, we''ll look at another feature of CSS3:
    transforms.'
  prefs: []
  type: TYPE_NORMAL
- en: Transforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like transitions, transforms are a feature of CSS3\. They have a little more
    support though as all major browsers, including IE9 and up, provide support. Transforms
    allow you to do several things, including rotate, scale, and translate. We'll
    look at a few practical examples in this section. First, we'll apply a scale to
    our button, then we'll do a translation, followed by a unique use of the rotate
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Applying a scale to our button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s jump right in where we left off with our button in the CSS. Underneath
    the transitions, let''s add a transform. We''ll add `transform: scale(.9, .9)`,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that by using a value of `.9` for both the width and height, we''re
    actually making our buttons smaller, nine-tenths of their original size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add the `scale` property again to the buttons'' hover/focus state to
    get even neater interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The scale value is a css function that takes a width and height respectively.
    1.1 being 1.1x the original size.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you save and refresh, you will see that the button actually gets much
    bigger as you hover over it. It''s a nice smooth transition because we already
    have the transition property applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using the translate function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go one step further and also use the `translate` function. This will
    be added to the same line, or declaration, as the `transform: scale` code that
    we just wrote. The `translate` function can move the element to the left, right,
    top, or bottom. As you can see in the following line of code, the first value
    is for left and right movements. But we''re not going to move it to left or right,
    so we''ll use `0`. The second value is for the top and bottom movement. I''m actually
    going to push it up by `-5px`. If I were to use a positive value, that would push
    it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we refresh and hover over a button, we will see it does nudge up slightly,
    five pixels to be exact:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that I separated the two functions with a space. The syntax is very
    important here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'You might naturally reach to add a comma there, but if I were to actually add
    a comma between the two functions, `scale` and `translate`, we would get no interaction
    at all as far as the `transform` goes because this syntax is incorrect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Using the rotate value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is another transform function that I''d like to go over, but if we add
    anymore flair to these buttons they will be far too distracting. Instead, let''s
    add a very interesting hover effect to the movie images on the movie page. The
    images next to each movie title are actually external links to the movie:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, I want a visual interaction to take place upon hover, which really
    indicates that this is a hyperlink, or at least letting the user know there is
    some type of action that can be performed. Let''s use `transform: rotate()` to
    make this happen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what we''re aiming for in our final site. A white frame with an image
    inside of it, and the hover effect is a rotate inside of this white frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the following figure, when you hover over it, the image rotates
    and gets scaled slightly larger than normal - and - even though the image is scaling
    larger, it doesn''t overflow it''s parent container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to have an element that wraps around our image in order to accomplish
    this. We do have thisâ€”an anchor tag with the class of `figure` that is the parent
    of each image. This is where we''ll add this thick white border. We''re going
    to need to add `overflow: hidden` to the `a` tag because when we scale the image
    more and rotate it, the overflow hidden prevents it from popping out of its container.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get to work. The `.content-block .figure` selector already exists, so
    let''s add the white border to it first. I''m going to wait to add the `overflow:
    hidden` until a little bit later. First, let''s make the `border` property `10px`,
    `solid`, and `white`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we refresh our current site, this is what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we refresh the browser, we get the white border:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we get a gap between the bottom of the image and the border.
    We can rectify this in two ways. We can set the container such that it has the
    exact height of the image; we can do this using the `height` property, which isn't
    the best solution. Alternatively, we can float the image to the left. To do this,
    we can use the `float` property as it's easy enough and a stronger solution. However,
    we want to target the image itself that's inside of `.content-block .figure`.
    So let's do that and float it left.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'When we refresh the browser now, we will see this gets rid of that gap between
    the image and the border:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to add `rotate` and `scale` to the image as well. The `rotate`
    function is a little different than `scale` and `transition` as it doesn''t take
    two parameters inside the function. It just takes one: the number of degrees you
    want to rotate. In our case, this is `15deg`. So we''ll create a new selector
    for hovering over the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the scale: `1.25` horizontally and `1.25` vertically, remembering
    to *not* add a comma between the two functions. Here''s the code for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all this, go to the site, and now when you hover, the image pops right
    out of its container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add the `overflow:hidden` to the `parent .figure` selector. This is
    exactly what `overflow:hidden` is for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'When we go to the site now, we see that it works fine. We get the rotate and
    we get the scale a little bit larger and more contained inside of its container
    with no overflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The change from the default state to hover is still way too abrupt though.
    Let''s add a `transition` property in order to make it a lot smoother. We want
    to add the transition to the non-hover state of the image. Let''s add a transition
    of a quarter second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have a smooth transition from the default state to the hover state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding vendor prefixes and :focus states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing we have to do is add vendor prefixes to our `transform` and `transition`
    properties. Like with transition, I'm going to add the `-webkit-` prefixed version
    of the declaration in order to support older versions of Chrome, Safari, Firefox,
    and Opera. And also I'm going to add in the `-ms-` prefixed version to support
    Internet Explorer 9.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Maybe it''s worth emphasizing that with the `transform` property, I added the
    `-ms-` vendor prefix. It just so happens that IE9 will support transforms if you
    provide it with the `-ms-` prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: However, I didn't do this with transitions because adding the `-ms-` vendor
    prefix wouldn't make any difference as IE9 just wasn't built with transition support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also add the `:focus` state to make it more web accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Okay, that wraps up our brief look at transitions and transforms. We took our
    experience layer to another level by adding the different types of transforms
    coupled with transitions to smooth out transformations. There are other transforms
    available that we didn't go over, such as `skew`, `translate x`, `translate y`,
    `scale x`, `scale y`, and so on. There are also 3D transformations that really
    take it to another level that are totally worth exploring as browser support has
    gotten much better. Next, we'll continue on our style train by styling the main
    call-to-action button on our site.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the call-to-action button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've really come a long way in this chapter with regard to styling buttons.
    Now it's time to add one more. In the final site, we also have a call-to-action
    button on the home page that needs to be built. In this section, let's walk through
    each step of styling the call-to-action button. First, we'll add the HTML, then
    position it properly and add the appropriate CSS; finally, we'll add a nice hover
    effect to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s our current site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the final site that we''re aiming for, and the Go Premium
    call-to-action button is what we''ll be creating:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add the markup t0 our `index.html` file. In the `Intro Section` use
    an anchor tag for the button with the text `Go Premium`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Right underneath this, add a `p` tag with the reasons why you need to click
    on this soon-to-be gigantic call-to-action button. This paragraph tag will also
    have an anchor in it to learn more about our fictional premium offerings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''re really creating a two-column layout in this top section. We need
    to float the left chunk of the content to the left and the Go Premium section
    of content to the right. The best way to do this is to wrap both in a `div` tag
    with a unique class name, add widths to each, and float both of them. So start
    by adding the markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'When we apply this and have a look at our site, we see the call-to-action button
    lives where we''d expect it to, directly under the intro content because we haven''t
    added the layout-specific CSS yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's dive into the CSS and change this.
  prefs: []
  type: TYPE_NORMAL
- en: Positioning using CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Positioning should be nothing new for us here. Just create a `Go Premium` section
    in our CSS with the following rule sets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Both our `.intro-content` and `.go-premium` areas have a set width defined.
    We should also put `margin-right` on the intro content to add some space between
    the two. Both of them are floated to the left. So what this code really accomplishes
    is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We get our introductory content on the left-hand side and our `Go Premium` content
    on the right. We have a few problems here, though. The go premium stuff is way
    too high on the page and then below that, our content is encroaching and flowing
    to the right of the intro content. That's the problem we face with the float not
    clearing.
  prefs: []
  type: TYPE_NORMAL
- en: 'A top margin should fix our first problem, so add `margin-top` of `125px` to
    the `.go-premium` selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our second problem is that the content is actually flowing around the floated
    element and kind of creeping up on our Go Premium button. We can solve this using
    the clearfix hack class on the container that wraps the entire top section. Look
    at the intro section in our `index.html` file. That entire top section, both the
    intro content and go premium, is wrapped inside of a wrapper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the clearfix hack to this wrapper, using our `grouping` class, which
    will fix the problem on our site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Styling the button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go ahead and style the button. For styling purposes, let''s add a class
    of `call-to-action` to our go premium anchor tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking quickly at the final site, this is what we were aiming for with our
    Go Premium button. There''s a white border, white text, blue gradient, and plenty
    of padding around it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The hover state removes the gradient and changes the text color and border
    color to blue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note that we won't be able to use this exact web font pictured above. We'll
    use a solid blue background instead of the gradient for now as we'll come back
    to it in the next section and add the gradient as well as return to the font later
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the CSS, underneath the `.go-premium` rule set, add a `.call-to-action`
    selector and a 2px solid white border. We''ll also make the text color white and
    make the background color blue. Add padding of `25px` to the top and bottom and
    zero to the left and right positions because we''re going to end up centering
    the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our button is kind of funky looking because the anchor is an inline element,
    and its padding is not pushing down against the text below it. That''s just how
    inline elements roll:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The easiest way to fix this is to change the display to `block`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to align the text to the center and add rounded corners now. Add these
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'We don''t need to add vendor prefixes to the border radius anymore, as this
    CSS3 property specification is more mature than the transform and transition properties
    that both require vendor prefixes. Refresh the browser and you will see our button
    is starting to look pretty good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can increase the font size and font weight:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our button is looking awesome. Let''s add the hover styles. Add a `:hover`
    and `:focus` selector to the CSS. We need to change the color of the border and
    the text from white to blue; `border-color` will take care of this. Using the
    `background` property with the keyword of `none` will get rid of the background
    color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now go to our site and hover over or focus our button, we will see a
    different treatment on our call-to-action button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, let''s add in a transition to make the state change more subtle. Add
    `transition: all .25s ease-in-out` with vendor prefixes to the non-hover state
    of the button in our CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: With the transition added, we have a fully styled call-to-action button (minus
    the correct web font and the gradient).
  prefs: []
  type: TYPE_NORMAL
- en: We've now positioned our call-to-action area and styled the button itself to
    look extra awesome. Next, let's finish the call-to-action button and learn a little
    more about CSS gradients.
  prefs: []
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our big ol' call-to-action button is almost complete. We just need to add a
    gradient, which, like transforms, transitions, and border-radius, is a feature
    in CSS3.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ultimate CSS gradient generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the gradient specification and syntax is somewhat lengthy and isn''t
    consistent between browsers, the easiest way to use it is through an app that
    will create the CSS output for us. Normally, I shy away from things such as these,
    as I prefer to write my own code, but I will make an exception for gradients.
    The ultimate CSS gradient generator seems to work very well for me. The site is
    [www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/).
    The gradient that we''re shooting for is fairly simple. It goes from light blue
    at the top to darker blue at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00160.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go to [www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/).
    The tool defaults to something like this. At the top right, there is even a preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are four color stops by default and all we need are two. So click on
    the two stops in the middle of the gradient bar and delete both of them. Clicking
    on a color stop reveals a new set of controls, including a delete button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00162.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our gradient bar should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now double-click on the first stop. Your screen should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00164.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we type in the color that we''re going to use, which is `33D3FF`, and hit
    OK. It''s a nice Photoshop-like interface all around:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00165.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, double-click on the second color stop and add the `00718e` color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00166.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This color and gradient look like what we''ve been aiming for. But we can move
    the Color stop up and down the gradient bar a little bit to change the gradient.
    I''m going to drag it about a third of the way over:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00167.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also adjust the height of the preview display to look more like the
    height of our actual call-to-action button by changing the size to 370 x 100:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00168.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The CSS output is right underneath the preview bar. We can just copy it by
    clicking on copy. Switch over to our CSS file and paste it inside of our call-to-action
    selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The CSS output of the ultimate gradient generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ultimate gradient generator created eight different properties. Wow! The
    first is just the background color for older browsers that don''t support the
    gradient''s syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We actually want to change that to `#0072AE` because that''s our official branded
    color for this site. So add that and delete the `background-color: #0072AE` property
    mentioned earlier in the declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: This is a ton of generated CSS. If we take a closer look at some of these, I
    wonder how many folks out there are using Firefox 3-15, given that the current
    version is 55? And likewise for Chrome 10-25 when the current version is 60?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Also, both Chrome and Firefox are evergreen browsers, meaning they automatically
    update themselves silently without prompting the user.
  prefs: []
  type: TYPE_NORMAL
- en: So, I need a second opinion on all these prefixed versions. Let's see what "Autoprefixer
    CSS Online" says about this, [https://autoprefixer.github.io/](https://autoprefixer.github.io/).
    Autoprefixer bills itself as a tool for managing vendor prefixes. It adds missing
    prefixes and deletes obsolete ones... based on current data on the popularity
    of browsers and support for vendor prefixes by those browsers.
  prefs: []
  type: TYPE_NORMAL
- en: I'll type in the non-prefixed declaration on the left-side of the Autoprefixer
    tool and it will spit out what vendor prefixes are needed based on the browser
    popularity criteria I provide. I want my gradients to show up in all browsers
    with greater than .1% of market share.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00169.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'All that leaves is the `-webkit-` vendor prefix and the non-prefixed or W3C
    standard version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'So let''s update our rule set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: I don't know about you, but I feel really good about what we just did!
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll save this and go to our button. Before a browser refresh, you can see
    it''s a solid color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00170.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When we refresh, we get our gradient, as shown in the following figure. This
    is very good. It is going to work in all browsers with more than .1% market share.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: And just to be very clear, I didn't say 1% market share. I said .1% market share.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we successfully styled the call-to-action button and applied
    the gradient using a program that handles the hard stuff for us, allowing us to
    work that much faster.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create buttons with modular CSS and use
    multiple classes to change the appearance of our buttons. You also discovered
    how CSS specificity works and how selectors can overrule each other. You now know
    how to keep your CSS lightweight and manageable. Finally, you learned how to use
    transitions, hover states, transforms, and gradients to style our buttons.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll move on to creating our primary navigation tool.
    By doing this, you'll learn about CSS positioning, CSS3 pseudo classes, CSS3 animations,
    and how you can create a drop-down menu purely in CSS. This was a lot of fun!
  prefs: []
  type: TYPE_NORMAL
