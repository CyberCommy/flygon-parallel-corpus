- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flask started as a project to show you how you can build your own framework
    on existing Python toolkits. Actually, Flask started as an April Fool's joke in
    2010\. Several microframeworks had been appearing in the Python community, offering
    their own set of interfaces to build web services and applications entirely in
    one`.py` file. Having built Werkzeug (a web programming toolkit) and Jinja (a
    templating engine), Armin Ronacher zipped these two projects, put the zip file
    base64-encoded into a `.py` file, added a few small functions, and called it the
    **Denied** microframework.
  prefs: []
  type: TYPE_NORMAL
- en: The April 1st marketing site for Denied included a working "Hello World" application
    in a few lines of code, a spoof screencast, some bogus testimonials, zero documentation,
    and a few hints that you should not trust everything you read on the Internet.
    Denied was a critique on how an open source project can go wrong—mostly through
    missing documentation and design flaws that can cause serious issues in production
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: This was Flask's beginning, the microframework with good intentions. Flask aimed
    to provide a good developer experience through clear, simple interfaces packaged
    with useful documentation, a thorough test suite, and careful thought to production
    issues and backward/forward-compatibility across releases. Flask demonstrated
    how to build a thin layer on top of Werkzeug and Jinja. Then Flask became popular
    on its own, developed a community, and now several Flask-built applications are
    in production, small and large.
  prefs: []
  type: TYPE_NORMAL
- en: As a contributor to the Flask project, I observed that most new users ask questions
    of the form, "what is the Flask way to do X?" Most of the time, the question is
    better stated as, "what is the Python way to do X?" Flask does not have many options
    about how you use it, which makes it a great tool to start simply and grow carefully
    without fighting the options, deeply embedded in the framework as your project
    gets large.
  prefs: []
  type: TYPE_NORMAL
- en: That said, when you are getting started with Flask, you will wonder how a representative
    application looks. This book will show you just that. I have condensed my own
    experience with Flask into a small but complete application which we will build
    bottom-up one piece at a time. Along the way, I will provide pointers as you make
    considerations in your own projects. If, by the end of this book, you want more,
    take a look at the scheduler application that we built, identify areas where you
    would like to design your own improvements, and use these areas for projects to
    exercise your web development skills.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Preparing for development (Simple)* explains how to set up your development
    environment and ensure that you have everything in place for developing web projects
    with Python and Flask.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Running a simple application (Simple)* shows how to warm up with the simplest
    "Hello World" Flask application.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Routing URLs and accepting requests (Simple)* shows how to start your project
    by accepting web requests according to your URL rules.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Handling requests and responses (Simple)* explains how Flask handles web requests
    and how you can build responses.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Handling static files* *(Simple)* explains how to send files from disk as
    a response.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Using a database* *(Simple)* explains how to declare a data structure, store
    data with your application, and manage queries with SQLAlchemy.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Handling forms and file uploads* *(Simple)* explains how to build a form with
    WTForms to match the application data structure, which provides HTML input and
    validates user input.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Templating with Jinja – setting a base template* *(Simple)* explains how to
    set the base HTML structure of your application, providing page structure and
    theme able CSS style with Twitter Bootstrap and JavaScript page manipulation with
    jQuery.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating a new record* *(Intermediate)* explains how to provide a web form
    to create a database record.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying a record* *(Intermediate)* explains how to retrieve a record from
    the database and display it in HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Editing a record* *(Intermediate)* explains how to provide a web form to edit
    an existing database record.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing all records* *(Simple)* explains how to build an index view to display
    all records from the database in HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Deleting a record* *(Advanced)* explains how to add a JavaScript-triggered
    `DELETE` request to remove a record from the database.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Using custom template filters in Jinja* *(Advanced)* explains how to extend
    Jinja to include custom display formats for your data.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sending error responses* *(Simple)* explains how to respond to errors with
    styled HTML pages.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Authenticating users* *(Advanced)* explains how to build a user data model
    which includes a hashed password field for authentication by credential that only
    the user would know.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Handling sessions and users* *(Intermediate)* explains how to keep users logged
    in for on-going requests after authentication.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Deploying to the world* *(Advanced)* explains how to publish your application
    with nginx and gunicorn on Ubuntu, with a pointer on how to deploy on any operating
    system using HTTP proxying.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book assumes that you have Python and an interest in web development. You
    need to know, or be willing to learn some Python and a little bit of the web technologies
    HTTP, HTML, CSS, and JavaScript. This book specifically covers web development
    with Flask, which is a third-party package for the Python programming language.
    If you are new to Python or web development, be sure to have good resources on
    hand for the Python language and the various web technologies.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of this writing, Flask is version 0.10, which is stable and production-ready.
    From its beginning, the Flask project has made every effort to maintain backward
    compatibility, providing upgrade instructions on major releases. See [https://pypi.python.org/pypi/Flask](https://pypi.python.org/pypi/Flask)
    for the latest version and installation instructions for Flask.
  prefs: []
  type: TYPE_NORMAL
- en: This book uses **virtualenv** to install third-party packages, which is version
    1.9 at the time of this writing. Note that virtualenv 1.9 adds SSL support when
    installing packages, so if you already have virtualenv installed, be sure to upgrade.
    See [https://pypi.python.org/pypi/virtualenv](https://pypi.python.org/pypi/virtualenv)
    for the latest version and instructions for virtualenv.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book uses both Python 2.7 and Python 3.3.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of this writing, Flask supports Python 3.3+ as of its 0.10 release.
    Packages available in the community, however, do not always have Python 3 support.
    I encourage you to use Python 3 in your projects. The Python community is still
    in transition to Python 3, which is backward-incompatible with Python 2, but investing
    in Python 3 now will allow you to grow your codebase with modern Python, where
    new features are being added to the language.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a Python implementation other than **CPython**, such as **pypy**,
    download the Flask source and run its tests to verify that Flask is compatible
    with your interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: Other materials are listed in the *Checklist for Development Environment* section
    under the *Preparing for development* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book is for readers who are new to web programming, or are familiar with
    web programming but new to Flask. This book is intended for three classes of readers:'
  prefs: []
  type: TYPE_NORMAL
- en: Programmers getting started in web development, starting with an interest in
    Python towards a working knowledge of how to build web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programmers who are familiar with web development, starting with a working knowledge
    of how to build applications in a familiar language (which may or may not be Python)
    towards the use of Flask in daily work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designers who have decided to learn programming, starting with a user interface
    design in mind toward a self-built functional application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In all the three cases, Flask is well suited as a starting place for web development
    in Python, and Python as a language is accessible to readers who are beginning
    to learn programming.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "This
    creates a Python object `app,` which is a WSGI application."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "We reuse the same template as the create form, but we say **Edit** instead of
    **Add**."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
