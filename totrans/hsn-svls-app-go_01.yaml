- en: Go Serverless
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go无服务器
- en: This chapter will give you a foundational understanding of what **serverless
    architecture** is, how it works, and what its features are. You'll learn how **AWS
    Lambda** is on a par with big players such as Google Cloud Functions and Microsoft
    Azure Functions. Then, you will discover AWS Lambda's different execution environments
    and its Go support. Moreover, we'll discuss the advantages of using Go as your
    programming language for building serverless applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为您提供对**无服务器架构**是什么，它是如何工作的，以及它的特点是什么的基础理解。您将了解到**AWS Lambda**如何与谷歌云函数和微软Azure函数等大型参与者不相上下。然后，您将了解AWS
    Lambda的不同执行环境及其对Go语言的支持。此外，我们将讨论使用Go作为构建无服务器应用程序的编程语言的优势。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Cloud-computing models—understanding what they are and what they can be used
    for.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算模型——了解它们是什么以及可以用于什么。
- en: Pros and cons of serverless architecture.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器架构的优缺点。
- en: Why Go is a great fit for AWS Lambda.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么Go非常适合AWS Lambda。
- en: The serverless paradigm
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器范式
- en: Cloud-based applications can be built on low-level infrastructure pieces or
    can use higher-level services that provide abstraction from the management, architecting,
    and scaling requirements of core infrastructure. In the following section, you
    will learn about the different cloud-computing models.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 基于云的应用程序可以构建在低级基础设施部件上，也可以使用提供抽象层的更高级服务，从而摆脱核心基础设施的管理、架构和扩展要求。在接下来的部分，您将了解不同的云计算模型。
- en: The cloud-computing evolution
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算的演进
- en: 'Cloud providers offer their services according to four main models: IaaS, PaaS,
    CaaS, and FaaS. All the aforementioned models are just thousands of servers, disks,
    routers, and cables under the hood. They just add layers of abstraction on top
    to make management easier and increase the development velocity.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 云提供商根据四种主要模型提供其服务：IaaS、PaaS、CaaS和FaaS。所有上述模型只是在底层添加了数千台服务器、磁盘、路由器和电缆。它们只是在顶部添加了抽象层，以使管理更容易，并增加开发速度。
- en: Infrastructure as a Service
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即服务
- en: '**Infrastructure as a Service** (**IaaS**), sometimes abbreviated to IaaS, is
    the basic cloud-consumption model. It exposes an API built on top of a virtualized
    platform to access compute, storage, and network resources. It allows customers
    to scale out their application infinitely (no capacity planning).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础设施即服务**（**IaaS**），有时缩写为IaaS，是基本的云消费模型。它在虚拟化平台之上构建了一个API，以访问计算、存储和网络资源。它允许客户无限扩展其应用程序（无需容量规划）。'
- en: In this model, the cloud provider abstracts the hardware and physical servers,
    and the cloud user is responsible for managing and maintaining the guest operating
    systems and applications on top of it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模型中，云提供商抽象了硬件和物理服务器，云用户负责管理和维护其上的客户操作系统和应用程序。
- en: AWS is the leader according to Gartner's Infrastructure as a Service Magic Quadrant.
    Irrespective of whether you're looking for content delivery, compute power, storage,
    or other service functionality, AWS is the most advantageous of the various available
    options when it comes to the IaaS cloud-computing model. It dominates the public
    cloud market, while Microsoft Azure is gradually catching up with to Amazon, followed
    by Google Cloud Platform and IBM Cloud.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Gartner的基础设施即服务魔力象限图，AWS是领先者。无论您是在寻找内容传递、计算能力、存储还是其他服务功能，AWS在IaaS云计算模型方面是各种可用选项中最有利的。它主导着公共云市场，而微软Azure正在逐渐赶上亚马逊，其次是谷歌云平台和IBM云。
- en: Platform as a Service
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台即服务
- en: '**Platform as a Service** (**PaaS**) provides developers with a framework in
    which they can develop applications. It simplifies, speeds up, and lowers the
    costs associated with the process of developing, testing, and deploying applications
    while hiding all implementation details, such as server management, load balancers,
    and database configurations.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**平台即服务**（**PaaS**）为开发人员提供了一个框架，他们可以在其中开发应用程序。它简化、加快了开发、测试和部署应用程序的过程，同时隐藏了所有实现细节，如服务器管理、负载均衡器和数据库配置。'
- en: PaaS is built on top of IaaS and thus hides the underlying infrastructure and
    operating systems, to allow developers to focus on delivering business values
    and reduce operational overhead.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: PaaS建立在IaaS之上，因此隐藏了底层基础设施和操作系统，使开发人员能够专注于提供业务价值并减少运营开销。
- en: Among the first to launch PaaS was Heroku, in 2007; later, Google App Engine
    and AWS Elastic Beanstalk joined the fray.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku是最早推出PaaS的之一，于2007年；后来，谷歌应用引擎和AWS弹性Beanstalk也加入了竞争。
- en: Container as a Service
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器即服务
- en: '**Container as a Service** (**CaaS**) became popular with the release of Docker
    in 2013\. It made it easy to build and deploy containerized applications on on-premise
    data centers or over the cloud.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器即服务**（**CaaS**）随着2013年Docker的发布而变得流行。它使得在本地数据中心或云上构建和部署容器化应用变得容易。'
- en: Containers changed the unit of scale for DevOps and site reliability engineers.
    Instead of one dedicated VM per application, multiple containers can run on a
    single virtual machine, which allows better server utilization and reduces costs.
    Also, it brings developer and operation teams closer together by eliminating the
    "worked on my machine" joke. This transition to containers has allowed multiple
    companies to modernize their legacy applications and move them to cloud.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 容器改变了DevOps和站点可靠性工程师的规模单位。多个容器可以在单个虚拟机上运行，这样可以更好地利用服务器并降低成本。它还通过消除“在我的机器上运行”的笑话，使开发人员和运维团队更加紧密地联系在一起。这种转变到容器使多家公司能够现代化其传统应用程序并将其迁移到云上。
- en: To achieve fault-tolerance, high-availability, and scalability, an orchestrations
    tool, such as Docker Swarm, Kubernetes, or Apache Mesos, was needed to manage
    containers in a cluster of nodes. As a result, CaaS was introduced to build, ship,
    and run containers quickly and efficiently. It also handles heavy tasks, such
    as cluster management, scaling, blue/green deployment, canary updates, and rollbacks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The most popular CaaS platform in the market today is AWS as 57% of the Kubernetes
    workload is running on Amazon **Elastic Container Service** (**ECS**), **Elastic
    Kubernetes Service** (**EKS**), and AWS Fargate, followed by Docker Cloud, CloudFoundry,
    and Google Container Engine.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: This model, CaaS, enables you to split your virtual machines further to achieve
    higher utilization and orchestrate containers across a cluster of machines, but
    the cloud user still needs to manage the life cycle of containers; as a solution
    to this, **Function as a Service** (**FaaS**) was introduced.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Function as a Service
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The FaaS model allows developers to run code (called functions) without provisioning
    or maintaining a complex infrastructure. Cloud Providers deploy customer code
    to fully-managed, ephemeral, time-boxed containers that are live only during the
    invocation of the functions. Therefore, business can grow without customers having
    to worry about scaling or maintaining a complex infrastructure; this is called
    going serverless.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Amazon kicked off the serverless revolution with AWS Lambda in 2014, followed
    by Microsoft Azure Functions and Google Cloud Functions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Serverless architecture
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serverless computing, or FaaS, is the fourth way to consume cloud computing.
    In this model, the responsibility for provisioning, maintaining, and patching
    servers is shifted from the customer to cloud providers. Developers can now focus
    on building new features and innovating, and pay only for the compute time that
    they consume.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of going serverless
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of reasons why going serverless makes sense:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '**NoOps**: The server infrastructure is managed by the cloud provider, and
    this reduces the overhead and increases developer velocity. OS updates are taken
    care of and patching is done by the FaaS provider. This results in decreased time
    to market and faster software releases, and eliminates the need for a system administrator.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autoscaling and high-availability**: Function as a unit of scale leads to
    small, loosely-coupled, and stateless components that, in the long run, lead to
    scalable applications. It is up to the service provider to decide how to use its
    infrastructure effectively to serve requests from the customers and horizontally
    scale functions-based on the load.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost-optimization**: You pay only for the compute time and resources (RAM,
    CPU, network, or invocation time) that you consume. You don''t pay for idle resources.
    No work indicates no cost. If the billing period on a Lambda function, for example,
    is 100 milliseconds, then it could significantly reduce costs.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Polygot**: One benefit that the serverless approach brings to the table is
    that, as a programmer, you can choose between different language runtimes depending
    on your use case. One part of the application can be written in Java, another
    in Go, another in Python; it doesn''t really matter as long as it gets the job
    done.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks of going serverless
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the other hand, serverless computing is still in its infancy; hence, it
    is not suitable for all use cases and it does have its limitations:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '**Transparency**: The infrastructure is managed by the FaaS provider. This
    is in exchange for flexibility; you don''t have full control of your application,
    you cannot access the underlying infrastructure, and you cannot switch between
    platform providers (vendor lock-in). In future, we expect increasing work toward
    the unification of FaaS; this will help avoid vendor lock-in and allow us to run
    serverless applications on different cloud providers or even on-premise.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debugging**: Monitoring and debugging tools were built without serverless
    architecture in mind. Therefore, serverless functions are hard to debug and monitor.
    In addition, it''s difficult to set up a local environment to test your functions
    before deployment (pre-integration testing). The good news is that tools will
    eventually arrive to improve observability in serverless environments, as serverless
    popularity is rising and multiple open source projects and frameworks have been
    created by the community and cloud providers (AWS X-Ray, Datadog, Dashbird, and
    Komiser).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cold starts**: It takes some time to handle a first request by your function
    as the cloud provider needs to allocate proper resources (AWS Lambda needs to
    start a container) for your tasks. To avoid this situation, your function must
    remain in an active state.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stateless**: Functions need to be stateless to provide the provisioning that
    enables serverless applications to be transparently scalable. Therefore, to persist
    data or manage sessions, you need to use an external database, such as DynamoDB
    or RDS, or an in-memory cache engine, such as Redis or Memcached.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having stated all these limitations, these aspects will change in the future
    with an increasing number of vendors coming up with upgraded versions of their
    platforms.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Serverless cloud providers
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are multiple FaaS providers out there, but to keep it simple we''ll compare
    only the biggest three:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Functions
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Azure Functions
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a pictorial comparison:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9753fec-4fb3-46ed-a985-de9fb4b21fad.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding diagram, AWS Lambda is the most used, best-known,
    and the most mature solution in the serverless space today, and that's why upcoming
    chapters will be fully dedicated to AWS Lambda.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS Lambda is the center of the AWS serverless platform:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c79de2b6-2b19-4d23-95a9-95be3e42fc0a.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: AWS Lambda was launched at re:Invent 2014\. It was the first implementation
    of serverless computing where users could upload their code to Lambda. It performs operational
    and administrative activities on their behalf, including provisioning capacity,
    monitoring fleet health, applying security patches, deploying their code, and publishing
    realtime logs and metrics to Amazon CloudWatch.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Lambda follows the event-driven architecture. Your code is triggered in response
    to events and runs in parallel. Every trigger is processed individually. Moreover,
    you are charged only per execution, while with EC2 you are billed by the hour.
    Therefore, you benefit from autoscaling and fault-tolerance for your application
    with low cost and zero upfront infrastructure investment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Source events
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS Lambda runs your code in response to events. Your function will be invoked
    when these event sources detect events:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0cd47bd2-b1b1-45d6-b1aa-16b2f9f54182.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: Amazon is now supporting SQS as a source event for Lambda
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Use cases
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS Lambda can be used for endless application scenarios:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**Web applications**:Instead of a maintaining a dedicated instance with a web
    server to host your static website, you can combine S3 and Lambda to benefit from
    scalability at a cheaper cost. An example of a serverless website is described
    in the following diagram:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/495d1451-4d2a-41db-8913-711919a45c94.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: An alias record in **Route 53** points to a **CloudFront** distribution. The
    **CloudFront** distribution is built on top of an **S3 Bucket** where a static
    website is hosted. **CloudFront** reduces the response time to static assets (JavaScripts,
    CSS, fonts, and images), improves webpage load times, and mitigates distributed
    denial of service (DDoS) attacks. HTTP requests coming from the website then go
    through **API Gateway** HTTP endpoints that trigger the right **Lambda Function**
    to handle the application logic and persist data to a fully managed database service,
    such as **DynamoDB**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '**Mobile and IoT**:A schematic for building a sensor application, which measures
    the temperature from a realtime sensor-connected device and sends an SMS alert
    if the temperature is out of range, can be given as follows:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/747c45cd-e10b-4c40-98af-0092c7dea0df.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: The **Connected Device** will ingest data to **AWS IoT**. **AWS IoT** rules
    will invoke a **Lambda Function** in order to analyze the data and publish a message
    to an **SNS Topic** in case of emergency. Once the message is published, Amazon SNS
    will attempt to deliver that message to every endpoint that is subscribed to the
    topic. In this case it will be an **SMS**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '**Data ingestion: **Monitoring your logs and keeping an audit trail is mandatory,
    and you should be aware of any security breaches in your cloud infrastructure. The
    following diagram illustrates a realtime log-processing pipeline with Lambda:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9027c43f-240d-45cf-a725-6e9c965aa317.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: The VPC Flow Logs feature captures information about the IP traffic going to
    and from network interfaces in your VPC and ships the logs to Amazon CloudWatch
    Logs. AWS CloudTrail maintains records of all AWS API calls on your account. All
    logs are aggregated and streamed to AWS Kinesis Data Streams.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Kinesis triggers Lambda Functions, which analyze logs for events or patterns
    and send a notification to Slack or PagerDuty in the event of abnormal activity.
    Finally, Lambda posts the dataset to Amazon Elasticsearch with a pre-installed
    Kibana to visualize and analyze network traffic and logs with dynamic and interactive
    dashboards. This is done for long-term retention and to archive the logs, especially
    for organizations with compliance programs. Kinesis will store logs in S3 bucket
    for backup. The bucket can be configured with a life cycle policy to archive unused
    logs to Glacier.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '**Scheduling tasks**:Scheduled tasks and events are a perfect fit for Lambda.
    Instead of keeping an instance up and running 24/7, you can use Lambda to create
    backups, generate reports, and execute cron-jobs. The following schematic diagram
    describes how to use AWS Lambda to perform a post-processing job:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9ce30d4e-f069-458d-ba7a-508814f4453e.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: When a video arrives at an S3 bucket, an event will trigger a Lambda Function,
    which will pass the video filename and path to an Elastic Transcoder pipeline
    to perform video transcoding, generate multiple video formats (`.avi`, `.h264`,
    `.webm`, `.mp3`, and so on), and store the results in an S3 bucket.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '**Chatbots and voice assistants: **You can use a **Natural Language Understanding**
    (**NLU**) or **Automatic Speech Recognition** (**ASR**) service, such as Amazon
    Lex, to build application bots that can trigger Lambda Functions for intent fulfillment
    in response to voice commands or text. The following diagram describes a use case
    for building a personal assistant with Lambda:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c4062825-155f-4520-9594-ad9055d56db3.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: A user can ask **Amazon Echo** about its to-do list. Echo will intercept the
    user's voice command and pass it to a custom **Alexa Skill**, which will carry
    out speech recognition and transform the user's voice commands into intents, which
    will trigger a **Lambda Function** that in turn will query **Trello** API to fetch
    a list of tasks for today.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Due to Lambda's limitation in terms of memory, CPU, and timeout execution, it's
    not suited for long-running workflows and other massive workloads.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Go serverless
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS announced its support for Go as the language for AWS Lambda in January
    2018\. There were already some open source frameworks and libraries with which
    to shim Go applications that used Node.js (Apex serverless Framework), but now
    Go is officially supported and added to list of programming languages that you
    can use to write your Lambda Functions:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Go
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But which language should we use to write efficient Lambda Functions?  One
    of the reasons to go serverless is being a polygot. Regardless of the language
    you choose, there is a common pattern to writing code for a Lambda Function. Meanwhile,
    you need to pay extra attention to performance and cold starts. That''s where
    Go comes into play. The following diagram highlights the main advantages of using
    Go for serverless applications in AWS Lambda:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb71b2e0-fac2-48d8-a69b-3ed77650afb6.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: '**Cloud-oriented**: It was designed by Google primarily for the cloud with
    scalability in mind, and to reduce the amount of build time. Go is a solid language
    for distributed systems and infrastructure tools. Docker, Kubernetes, Terraform, etcd,
    Prometheus, and many orchestration, provisioning, and monitoring tools are built
    using Go.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fast**: Go complies into a single binary. Therefore, you provide a precompiled
    Go binary to AWS Lambda. AWS does not compile the Go source files for you and
    this has certain consequences, such as Fast cold-boot time. Lambda doesn''t need
    to set up a runtime environment; Java, on the other hand, requires spinning up
    a JVM instance to make your function hot. Go has a clean syntax and clear language
    specifications. This delivers an easy language for developers to learn and shows
    good results quickly while producing maintainable code.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalable**: Go has built-in concurrency with goroutines instead of threads.
    They consume almost 2 Kb memory from the heap and work faster than threads; hence,
    you can spin up millions of goroutine at any time. For software development, there
    is no need for a framework; the Golang community has built many tools that are
    natively supported by Go''s language core:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go's error-handling is elegant.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightweight framework for unit testing.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solid standard library—HTTP protocol support out of the box.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common data type and structure supported—maps, array, structs, and so on.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Efficient**: It involves efficient execution and compilation. Go is a compiled
    language; it compiles into a single binary. It uses static linking to combine
    all dependencies and modules into one single binary file. Also, its faster compilation
    speed allows for rapid feedback. Speedy development saves time and money; thus,
    this is certainly the most significant advantage for someone with a tight budget. Moreover,
    it provides efficient memory utilization with garbage collector.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Growing community**: The following screenshot shows the rising popularity
    and usage (as observed in the StackOverflow Survey 2017) for the most loved, dreaded,
    and wanted programming languages:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3f31de28-9070-4f2a-be2c-39fd6764156d.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: In addition, Go is backed by Google and has a large, growing ecosystem and numerous
    contributors to the language on GitHub, and great IDE support (IntelliJ, VSCode,
    Atom, GoGland) and debugging.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Lambda is the first successful implementation of serverless computing or
    FaaS. It gives users freedom from managing servers, increases development velocity,
    decreases system complexity, and enables small business to go big with zero upfront
    infrastructure investment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Go support for AWS Lambda provides significant cost-saving and performance benefits
    for those running their business on Lambda. So If you are looking for a modern,
    fast, safe, and easy language, Go is the one for you.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will get started with AWS Lambda Console and set up
    your Golang development environment.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the advantages of using the serverless approach?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What makes Lambda a time-saving approach?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does serverless architecture enable microservices?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the maximum time limit for an AWS Lambda function
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following are supported event-sources for AWS Lambda?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Kinesis Data Streams
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon RDS
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CodeCommit
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CloudFormation
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain what a goroutine is in Go. How can you stop goroutines?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's Lambda@Edge in AWS?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the difference between Function as a Service and Platform as a Service?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数即服务和平台即服务之间有什么区别？
- en: What's an AWS Lambda cold start?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda冷启动是什么？
- en: Can AWS Lambda functions be stateless or stateful?
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda函数可以是无状态的还是有状态的？
