- en: Threat Modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about understanding and preparing threat models. You will understand
    the essential concepts of threat modeling and gain practical knowledge on using
    various tools for threat modeling.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining threat modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of threat modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling terminology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step-by-step procedure for performing threat modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Techniques for threat modeling—STRIDE, PASTA, DREAD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Threat Modeling Tool and SeaSponge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is threat modeling?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term **threat modeling**, at first, may sound like something very complex
    and tedious to perform. However, once understood, it is indeed a simple task.
    We will try to simplify the concept of threat modeling with appropriate illustrations
    throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to break down the two words, threat and model. The following are
    the dictionary meanings of both the words:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Threat**: A person or thing likely to cause damage or danger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model**: A system or thing used as an example to follow or imitate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, combining both the words again, what do they mean collectively? **Threat
    modeling** is nothing but a formal way to identify potential security issues.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a very simple example to understand this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram depicts a fort:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4e4c4b1-5f22-40ec-9f63-72f98f02102a.png)'
  prefs: []
  type: TYPE_IMG
- en: The fort is the place where the king resides and requires stringent security
    against his enemies. So, while the architects would design the structure of the
    fort, they would also need to consider various threats that may compromise the
    security of the fort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the architects identify the possible threats, then they can work upon
    mitigating the threats by various possible means. Some threats to the fort might
    be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enemy attacking through the rear where the fort is less guarded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enemy firing a cannonball at the walls of the fort
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrosion and wear and tear of the fort walls due to extreme weather
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enemy elephants forcibly breaking the main entrance door of the fort
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We just prepared a threat model for an ancient fort. It was simple; we tried
    to think of all the possible ways through which the security of the fort could
    be compromised, either intentionally or unintentionally. Similarly, a threat model
    must be prepared while constructing a President's house or any important administration
    office.
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding example, we can understand that threat modeling is a generic
    concept that can be applied to any area or field where security is a requirement.
    Since this book deals with information security, we'll discuss how a threat model
    needs to be prepared for a given information system.
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling can be most effective and beneficial if done during the design
    phase of the development lifecycle. The cost of fixing bugs significantly rises
    in the later stages of SDLC.
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling is very commonly used in the software development life cycle.
    It enables the participants in the software development process to efficiently
    create and deliver secure software with a greater degree of confidence that all
    possible security flaws are understood and accounted for.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of threat modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For any given project, it is always helpful to understand the threats that
    may hinder the overall progress. Threat modeling does the exact same thing. Some
    benefits of threat modeling are :'
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling produces software that is inherently secure by design—if the
    threat modeling is done right in the design phase, then the end product will become
    inherently secure against most common potential threats.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling allows us to think and discuss product security in a more structured
    way—instead of discussing security threats in an ad-hoc manner, threat modeling
    offers a more formal and structured way of enumerating and documenting security
    threats.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling permits development teams to effectively identify and define
    security flaws early in the SDLC process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling allows us to document and share application security knowledge—with
    technology upgrading at a rapid pace, the threat landscape is changing at a  fast
    pace as well. Ongoing threat modeling exercises will help ensure that the latest
    threats are being considered and anticipated for designing mitigating controls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling increases customer confidence from a security perspective— documented
    evidence of the threat modeling process being followed would certainly boost customer
    confidence in the security of the system delivered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An ongoing threat modeling exercise would help reduce the overall attack surface
    area.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling can help in quantifying security controls, making it more practical
    to align with the security budget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling terminology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get into the details of how to model threats, we must become familiar
    with some common terms used throughout the process of threat modeling. Some common
    terms are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Asset**:An asset can be any resource that is valuable. The asset can be tangible
    or intangible. For example, a mainframe computer in a data center may be a tangible
    asset while the reputation of an organization may be an intangible asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attack**: An attack is something that happens when an actor or a threat agent
    takes action utilizing one or more vulnerabilities in the system. For example,
    an application session hijacking attack might happen when someone exploits a cross-site
    scripting vulnerability to steal user cookies and session IDs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attack vector**: An attack vector is a path taken by the attacker in order
    to successfully compromise the system. For example, an email with a malicious
    attachment sent to the victim could be one possible attack vector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attack surface:** An attack surface essentially marks out the in-scope components
    that need to be taken into consideration while enumerating threats. The attack
    surface may be logical or physical.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Countermeasures**: In simple terms, countermeasures help address or mitigate
    vulnerabilities to decrease the likelihood of attacks and consequently the impact
    of a threat. For example, installing antivirus software would be one countermeasure
    for addressing virus threats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use case**:A use case is a normal functional situation that is intended and
    expected in line with the business requirements. For example, a drop-down menu
    allowing the end user to select a color of choice may be one of the use cases
    of an application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Abuse case**: When a user (actor) deliberately abuses functional use cases
    in order to achieve unexpected results, it is known as an abuse case. For example,
    an attacker might send 1,000 characters to an input field with a maximum length
    of 20.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actor or threat agent**:An actor or a threat agent may be a legitimate or
    an adverse user of use or abuse cases. For example, a normal end user logging
    into an application with his valid credentials is an actor while an attacker logging
    into an application using SQL injection is also an actor (threat agent).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impact**: An impact, in simple terms, is the value of the damage after a
    successful attack. It may be tangible or intangible. If a system holding financial
    data is breached, it may have a revenue impact, while if a company website is
    defaced, it may have a reputational impact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attack trees**: Attack trees visually depict the various paths available
    in order to successfully attack or compromise the target. The following diagram
    shows a sample attack tree for gaining access to a Windows system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/dd0b66c9-3d66-4b8c-b007-d2dfcde74785.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Data flow diagrams**: Various types of diagram are used to visualize interactions
    between the various components of the system. Although there are different types
    of threat modeling diagram, the most commonly used type is the **data flow diagram**
    (**DFD**). DFD is used to display major components of an application and the flow
    of information between those components. DFD also indicates trust boundaries showing
    the separation of information that is trustworthy and information that requires
    additional caution while being used in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to model threats?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process of threat modeling can vary based on multiple factors. However,
    in general, the threat modeling process can be broken down into the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identification of security objectives**: Before we actually get started with
    threat modeling, it is absolutely important to understand the objectives behind
    doing the threat modeling exercise. It may be possible that there are certain
    compliance or regulatory requirements that need to be addressed. Once the driving
    factors are understood, it becomes easier to visualize probable threats during
    the process.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identification of assets and external factors/dependencies**: Unless we know
    precisely what are we trying to protect, it just won''t be possible to enumerate
    threats. Identifying assets helps build a basis for further modeling processes.
    Assets need protection from attackers and may need to be prioritized for countermeasures.
    There''s also a need to identify any possible external entity or dependency that
    may not be directly part of the system but still may pose a threat to the system.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identification of trust zones**: Once the assets and external dependencies
    have been identified, the next step is to identify all entry points and exit points
    along with the trust zone. This information can be effectively used to develop
    data flow diagrams with trust boundaries.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identification of potential threats and vulnerabilities**: Threat modeling
    techniques, such as STRIDE (discussed in the upcoming section),  can give a brief
    idea about common threats impacting the given system. Some examples could be XSS,
    CSRF, SQL injection, improper authorization, broken authentication, and session
    management vulnerabilities. It is then required to identify and assess system
    areas that are more prone to risks, for example, insufficient input validation,
    inappropriate exception handling, lack of audit logging, and so on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Documentation of threat models**: Threat modeling isn''t a one-time activity;
    rather, it is an iterative process. Comprehensive documentation of threats after
    each iteration is extremely important. Documentation can provide architects with
    a good reference on probable threats that need to be considered while designing
    a system and also allows them to think about possible countermeasures. Developers
    can also refer to the threat modeling documentation during the development phase
    in order to explicitly handle certain threat scenarios.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Threat modeling techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various threat modeling techniques and methodologies. STRIDE and DREAD
    are two of them. We will study the STRIDE and DREAD methodologies in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: STRIDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'STRIDE is an easy-to-use threat modeling methodology developed by Microsoft.
    STRIDE helps in identifying threats and is an abbreviation for the following terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**S—spoofing**: Threats in the spoofing category include an adversary creating
    and exploiting confusion about the identity of someone or something.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, an adversary sends an email to a user pretending to be someone
    else.
  prefs: []
  type: TYPE_NORMAL
- en: '**T—tampering**: A tampering threat involves an adversary making modifications
    in data while in storage or in transit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, an adversary intercepts network packets, changes payment information,
    and forwards them to the target.
  prefs: []
  type: TYPE_NORMAL
- en: '**R—repudiation**: Repudiation involves an adversary performing a certain action
    and then later denying having performed the action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, an adversary sends a threatening email to the victim and later
    denies sending the email.
  prefs: []
  type: TYPE_NORMAL
- en: '**I—information disclosure**: Information disclosure threats involve an adversary
    gaining unauthorized access to confidential information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, an adversary gains a user's password using a brute-force attack.
  prefs: []
  type: TYPE_NORMAL
- en: An adversary gains access to a database containing payment information for many
    users.
  prefs: []
  type: TYPE_NORMAL
- en: '**D—denial of service**: A denial of service threat involve denying legitimate
    users access to systems or components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, an adversary causes a web server to crash by sending a specially
    crafted TCP packet, thereby denying access to legitimate end users.
  prefs: []
  type: TYPE_NORMAL
- en: '**E—elevation of privileges**: An elevation of privilege threat involves a
    user or a component being able to access data or programs for which they are not
    authorized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, an adversary who isn't even authorized for read access, is able
    to modify the file as well.
  prefs: []
  type: TYPE_NORMAL
- en: An adversary with a normal (non-privileged) account is able to perform administrator
    level tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding list of threats could be applied to the components of the target
    model. Multiple threats could be categorized into threat categories, as shown
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DREAD category** | **Threat example** |'
  prefs: []
  type: TYPE_TB
- en: '| Spoofing | An attacker impersonating as administrator, sending out phishing
    mails to all users in the organization. |'
  prefs: []
  type: TYPE_TB
- en: '| Tampering | An attacker intercepting and modifying the data sent to from
    the application. |'
  prefs: []
  type: TYPE_TB
- en: '| Repudiation | An attacker sending a threatening email and later on denying
    the same. |'
  prefs: []
  type: TYPE_TB
- en: '| Information disclosure | An attacker getting access to database containing
    user credentials in plain text. |'
  prefs: []
  type: TYPE_TB
- en: '| Denial of service | An attacker sending huge number of packets from multiple
    sources to one single target in order to bring it down. |'
  prefs: []
  type: TYPE_TB
- en: '| Elevation of privileges | An attacker exploiting a vulnerable component to
    escalate privileges. |'
  prefs: []
  type: TYPE_TB
- en: DREAD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While the STRIDE methodology can be used to identify threats, the DREAD methodology
    can be effective in rating the threats. DREAD is an abbreviation for the following
    terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**D—damage potential**: The damage potential factor defines the potential damage
    that might be caused if an exploit is successful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R—reproducibility**: The reproducibility factor defines how easy or difficult
    it is to reproduce the exploit. A certain exploit may be very easy to reproduce
    while another might be difficult due to multiple dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**E—exploitability**: The exploitability factor defines what exactly is required
    in order to make the exploit successful. This may include knowledge about a specific
    area, or skills with a certain tool, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A—affected users**: The affected users factor defines the number of users
    that will be affected if the exploit is successful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**D—discoverability**: The discoverability factor defines the ease with which
    the threat under consideration can be uncovered. Some threats in the environment
    might get noticed easily while some others might have to be uncovered using additional
    techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus STRIDE and DREAD can be used in conjunction to produce an effective and
    actionable threat model.
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While threat modeling can be easily done with simple pen and paper, there are
    some specialized tools available that can ease the overall process. We'll be looking
    at two such tools that can be used effectively for modeling threats.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Threat Modeling Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most widely used tool for threat modeling is the Microsoft Threat Modeling
    Tool. It is available free of charge to all and can be downloaded from [https://www.microsoft.com/en-in/download/details.aspx?id=49168](https://www.microsoft.com/en-in/download/details.aspx?id=49168).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded and installed, the initial screen looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/727f4694-6619-4a0e-885d-66dd2a0e8835.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Create A Model to get started with designing a new threat model, as
    shown in the following screenshot. You will be presented with a blank canvas to
    proceed with designing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b50a4f9e-ede8-4ce7-80c1-901b55266205.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The right-hand pane, as shown in the following screenshot, has all the necessary
    elements. You can simply drag and drop the required elements into the canvas,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ff1c3ba-9ee8-46c8-aeac-1a52eaeb9eea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once all the components are added and connected, the threat model should look
    something like the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d79ac77-1381-4144-bdc4-ba2fcac5a230.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to enumerate threats for the given threat model, select View | Analysis
    View. The analysis pane gives information on various threats corresponding to
    the given threat model, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe5587e7-b7ac-4979-9d91-708fb18e1a54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to generate a threat report, select Reports | Create Full Report, and
    then select the
  prefs: []
  type: TYPE_NORMAL
- en: 'filename and path of the report you want to save, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c0a5579-a23b-4e42-9d64-81eb1fc112b6.png)'
  prefs: []
  type: TYPE_IMG
- en: SeaSponge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SeaSponge is another project (by Mozilla, this time) for modeling threats. You
    can download it for offline use from [https://github.com/mozilla/seasponge](https://github.com/mozilla/seasponge)
    or it also has an online version to model threats on the go. The online version
    is located at [http://mozilla.github.io/seasponge](http://mozilla.github.io/seasponge).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the first screen of the SeaSponge online tool.
    We can get started with creating a new model by clicking Create Model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50e75c77-9b0f-41ab-b303-da05be6ea860.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The tool then asks for some metadata, such as Project Title, Authors, Version,
    and so on, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1920e17c-1388-4d30-b2ab-6dc73139b02d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The tool then provides us with a blank canvas and the left pane gives us options
    to add components, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bab821e-fe5b-4f27-99f1-e97eee001817.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can now add different elements to our threat model as required as shown in
    the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2fe2250-21e3-4eae-bba0-ac3d222c7790.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, unlike the Microsoft Threat Modeling Tool, which automatically enumerates
    probable threats, SeaSponge requires users to manually enumerate and add threats
    into the model.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about threat modeling, the benefits of threat modeling,
    and its terminology. We also learned about different threat modeling techniques,
    such as STRIDE and DREAD, and tools such as the Microsoft Threat Modeling Tool
    and SeaSponge.
  prefs: []
  type: TYPE_NORMAL
