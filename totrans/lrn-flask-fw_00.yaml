- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to Learning Flask, the book that will teach you the necessary skills
    to build web applications with Flask, a lightweight Python web framework. This
    book takes an example-driven approach that is designed to get you started quickly.
    The practical examples are balanced with just the right amount of background information
    to ensure that you understand not only the how, but also the why of Flask development.
  prefs: []
  type: TYPE_NORMAL
- en: Flask was originally released by Armin Ronacher as part of an elaborate April
    Fool's Day prank in 2010\. The project touted itself as, "The next generation
    python micro web-framework," and lampooned features made popular by similar microframeworks.
    Although Flask was intended as a prank, the authors were caught by surprise when
    many people expressed serious interest in the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Flask is a microframework that is built on top of two excellent libraries:
    the Jinja2 templating engine, and the Werkzeug WSGI toolkit. Despite being a relative
    new-comer compared to other frameworks, such as Django, and Pylons, Flask has
    garnered a large and loyal following. Flask provides powerful tools for common
    web development tasks and encourages a bring-your-own-library approach for everything
    else, allowing programmers the flexibility to pick and choose the best components
    for their application. Every Flask app is different, and as the project''s documentation
    states, "Flask is Fun".'
  prefs: []
  type: TYPE_NORMAL
- en: The Flask microframework represents a departure in terms of design and API from
    most other popular Python web frameworks, which has led many developers that are
    new to Flask to ask, "What is the right way to build an app?" Flask does not offer
    any strong opinions on how we, the developers, should build our app. Instead,
    it provides opinions on what you need to build an app. Flask can be thought of
    as a collection of objects and functions to deal with common web tasks, such as
    routing URLs to code, processing request data, and rendering templates. While
    the level of flexibility that Flask provides is liberating, it can also lead to
    confusion and poor designs.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this book is to help you see this flexibility as opportunity.
    Over the course of this book, we will be building and progressively enhancing
    a Flask-powered blogging site. New concepts will be introduced through the addition
    of new features to the site. By the end of the book, we will have created a fully-featured
    website, and you will have a strong working knowledge of Flask and the ecosystem
    of its commonly-used extensions and libraries.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Creating Your First Flask Application"),
    *Creating Your First Flask Application*, begins with the bold declaration, "Flask
    is fun", which is one of the first things that you see when you view the official
    Flask documentation, and in this chapter, you will get to grips with why so many
    Python developers agree.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Relational Databases with SQLAlchemy"), *Relational
    Databases with SQLAlchemy*, says that relational databases are the bedrock upon
    which almost all modern web applications are built. We will use SQLAlchemy, a
    powerful object-relational mapper that allows us to abstract away the complexities
    of multiple database engines. In this chapter, you will learn about how the data
    model that you choose early on will affect almost every facet of the code that
    follows.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Templates and Views"), *Templates and Views*,
    covers two of the most recognizable components of the framework: the Jinja2 template
    language, and the URL routing framework. We will fully immerse ourselves in Flask
    and see our app finally start to take shape. As we progress through the chapter,
    our app will start looking like a proper website.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Forms and Validation"), *Forms and Validation*,
    shows you how to use forms to modify content on your blog directly through the
    site handled by the popular WTForms library. This is a fun chapter because we
    will add all sorts of new ways to interact with our site. We will create forms
    to work with our data models and learn how to receive and validate user data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Authenticating Users"), *Authenticating Users*,
    explains how you can add user authentication to your site. Being able to distinguish
    one user from another allows us to develop an entirely new class of features.
    For instance, we will see how to restrict access to the create, edit, and delete
    views, preventing anonymous users from tampering with site content. We can also
    display a user''s draft posts to them but hide them from everyone else.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Building an Administrative Dashboard"), *Building
    an Administrative Dashboard*, shows you how you can build an administrative dashboard
    for your site, using the excellent Flask-Admin. Our admin dashboard will give
    certain selected users the ability to manage all the content across the entire
    site. In essence, the admin site will be a graphical frontend for the database,
    supporting operations to create, edit, and delete rows in our application''s tables.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. AJAX and RESTful APIs"), *AJAX and RESTful
    APIs*, uses Flask-Restless to create a RESTful API for the blogging app. A RESTful
    API is a powerful way of accessing your app programmatically by providing highly-structured
    data to represent it. Flask-Restless works very well with our SQLAlchemy models,
    and it also handles complex tasks, such as serialization, and result filtering.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Testing Flask Apps"), *Testing Flask Apps*,
    covers how you can write unit tests covering all parts of the blogging app. We
    will utilize Flask''s test client to simulate "live" requests. We will also see
    how the Mock library can simplify testing complex interactions, such as calling
    third-party services, such as databases.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Excellent Extensions"), *Excellent Extensions*,
    teaches you how to enhance your Flask installation with popular third-party extensions.
    We used extensions throughout the book, but we can now explore the added extra
    security or functionality with very little effort and can polish off your app
    nicely.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Deploying Your Application"), *Deploying
    Your Application*, teaches you how to deploy your Flask applications securely
    and in an automated, repeatable manner. We will look at how to configure the commonly-used
    WSGI capable servers, such as Apache and Nginx, as well as the Python web server
    Gunicorn, to give you plenty of options. Then, we will see how to secure part
    or the entire site using SSL before finally wrapping up our application in a configuration
    management tool to automate our deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Python is at home on most operating systems, and we have tried to keep
    an operating system-agnostic approach within the book, it is advisable to use
    a computer running a Linux distribution or OS X when working with this book, as
    Python is already installed and running. The Linux distribution can be either
    installed on the machine or within a virtual machine. Almost any Linux distribution
    will do, and any recent version of Ubuntu will be fine.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for anyone who wants to develop their knowledge of Python into
    something that can be used on the Web. Flask follows Python design principles,
    and it can be easily understood by anyone who knows Python and even by those who
    do not.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "You should see the message **Hello, Flask** displayed on a blank white
    page."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
