- en: Microservices and Enterprise Application Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The introduction of microservices architecture has completely transformed the
    way in which enterprise applications are viewed. These applications are no longer
    large monoliths or big services providing the functionality to solve the problems
    of a specific domain. Instead, we now have small microservices, each providing
    a specific set of functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: These small microservices communicate with each other over the network to provide
    a certain output corresponding to the business needs of the organization.
  prefs: []
  type: TYPE_NORMAL
- en: As we move through this chapter, we will see how the traditional approach of
    doing **Enterprise Application Integration** (**EAI**) is being made obsolete
    by the move towards the use of microservices that have introduced new integration
    patterns consisting of small, stateless message brokers instead of a large and
    complex Enterprise Service Bus.
  prefs: []
  type: TYPE_NORMAL
- en: The communication between the clients has now been replaced by the use of API
    gateways that provide a federation between the clients and the backend microservices.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a reader of this chapter, you will get to learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Microservices and the change in the EAI landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transformation of the Enterprise Service Bus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thinking EAI in terms of microservices architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter builds upon the contents of [Chapter 11](34b7ccb4-5bbc-474e-a70c-13ef8c1ae237.xhtml),
    *Taking the Microservices Approach*, and [Chapter 15](56990501-e67f-479d-86b5-89c0d383a0b0.xhtml),
    *Enterprise Application Integration and their Patterns*. As such, no special set
    of hardware or software is required to understand the contents presented in this
    chapter, but some knowledge of distributed message brokers and asynchronous messaging
    systems will help provide a broader context as you go through this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Microservices and the changing EAI landscape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recently, organizations have started to move toward a new approach for the development
    of their applications. This approach focuses on the development of the application
    when composed of several small services that are good at providing a single functionality
    and providing it well. These small services are known as microservices.
  prefs: []
  type: TYPE_NORMAL
- en: These microservices model the functionality of a subset of an enterprise domain.
    For example, there could be a service in the infrastructure that is responsible
    for handling the user credential and authentication, another service that could
    be handling the functionality of emails, and yet another service that processes
    the paychecks of the employees.
  prefs: []
  type: TYPE_NORMAL
- en: All of these services communicate over the network by the mechanism of passing
    messages or through making API calls from one service to another service through
    the use of APIs exposed by the service so as to achieve a particular use case.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in contrast to traditional applications that were large and required middleware
    that could handle the transformation of the data from the format supported by
    one application to the one supported by another application and then transporting
    that data securely, microservices require either an API through which one service
    can directly talk to the other or a small message broker through which the data
    can be transported from one microservice to another in the form of messages.
  prefs: []
  type: TYPE_NORMAL
- en: This has changed how Enterprise Application Integration used to happen, because
    now, there are no complex middleware solutions present in the infrastructure providing
    the glue layer to connect the different applications inside the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's take a look at why the traditional approaches do not work in the microservices
    architecture and try to understand the new alternatives that have come up to facilitate
    the integration of application in the enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges of traditional EAI in microservices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In applications that have been developed by the modern practices of developing
    small microservices, hosting them over the enterprise infrastructure, and then
    integrating them together to talk to each other, we can no longer use the traditional
    approaches we were familiar with during the times of running and maintaining large
    monolithic applications or services. Let's first take some time to understand
    why point-to-point integration might not work in the case of microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Point-to-point integration of microservices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the point to point integration approach for microservices, we make the microservices
    interact with each other directly through the APIs exposed by them. For this to
    happen, each microservice needs to have the knowledge about the endpoints exposed
    by the other service. This is perfectly fine, but what happens if the microservice
    has to do some operation that depends on interaction with five other microservices?
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have to embed the endpoints of five different microservices
    into our microservice. As a one-off task, this is a completely OK solution. But,
    pertaining to the nature of microservices, they keep on evolving over time. This
    now causes us to keep on updating our microservice again and again to reflect
    the updated APIs.
  prefs: []
  type: TYPE_NORMAL
- en: This is just one of the challenges. Usually, applications based upon microservice
    architecture grow over a period of time to have more than 100 hundred services
    that are operating in the infrastructure, making it really hard to achieve point
    to point integration between the different microservices.
  prefs: []
  type: TYPE_NORMAL
- en: So, we now have an idea about how the microservices cannot be integrated through
    the use of point to point integration,  can we use the good old Enterprise Service
    Bus? Let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating microservices using the ESB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Enterprise Service Bus usually provides an intermediate bus through which
    two applications can communicate with each other by the mechanism of message passing.
    This ESB also has a standard format in which the messages can be encoded before
    they are sent.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can possibly hook our microservices to the ESB and then these services
    can communicate with each other by passing messages. This approach is absolutely
    fine and works. But the real problem starts to happen as the number of microservices
    start to grow in the infrastructure. Once this happens, then the ESB starts to
    see a heavy load due to the huge number of messages that are being transported
    by it.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason why the ESB fails to scale ...
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing API gateways for the integration of microservices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of API gateways in a microservices architecture provides a really interesting
    way of approaching the microservices integration problem, while also following
    one of the patterns of application integration through the use of federated gateways.
    So, let’s take a look at how the API gateways help us in the process of microservices
    integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'An API gateway inside the microservices-based application acts as central point
    through which the microservices can interact with the other microservices present
    in the infrastructure. This API gateway provides the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Restricted exposure of APIs:** The API gateway provides the functionality
    of exposing only a restricted set of APIs from the backend microservices, hence
    limiting what functionality is exposed. Along with this, the API gateway can also
    introduce new API endpoints in the infrastructure, where each API endpoint can
    map to multiple API endpoints of the backend microservices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Federated access:** An API gateway implements federated access for the integration
    of the microservices. This happens because of the fact that, if any two services
    want to interact with each other, a call needs to be made to the API gateway,
    which will indeed make the request to the other microservice and provides the
    result from the microservice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transformation of request:** The API gateway is also responsible for the
    transformation of the request between the microservices if both of them use a
    different mechanism of representing the data. For this kind of transformation
    to take place, the API gateway usually implements a common data format that every
    service can use to handle the communication with the API gateway, a concept which
    was usually implemented by the ESBs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For microservices integrated through the use of API gateways, the process of
    communication between the different microservices looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that there are two microservices, *A* and *B*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The microservice *A* wants to notify the microservice *B* of some event that
    has taken place as a result of some call or any other outside event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The microservice *A* makes an API call to an endpoint of microservice *B* exposed
    by the API gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API gateway takes up the request, performs any kind of transformation on
    the request, and forwards the call to the microservice **B**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API gateway now waits for the response to be returned from the microservice
    *B*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the response is returned, the API gateway transforms the response into
    the format supported by microservice *A* and returns the response back completing
    the cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This kind of process is usually followed with the other services as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of API gateways for the integration of the microservices provides a
    number of advantages over the traditional approaches, as in the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Improved security:** Since the API gateway restricts the exposed backend
    APIs, the API gateway provides better security between the different microservices.
    This security can also be increased by implementing simple end-to-end encryption
    between the communications happening between the different microservices and API
    gateway.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better scalability:** An API gateway provides better scalability than traditional
    middleware-based approaches by allowing for dynamic scaling through the use of
    a load balancer. Multiple API gateway processes can run behind a load balancer,
    eventually distributing the requests coming to them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easier maintenance:** Applications integrated with the use of API gateways
    are usually easier to maintain due to the reduced amount of API endpoints that
    they need to manage individually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those are some great benefits and it seems like a good approach for integration
    of microservices-based applications. So, do we not require an ESB anymore? Has
    the ESB gone?
  prefs: []
  type: TYPE_NORMAL
- en: The answer to this is no. Rather, it has transformed with the advent of microservices.
    Let's take a look at how this transformation looks.
  prefs: []
  type: TYPE_NORMAL
- en: Transformation of the ESB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the advent of the microservices revolution, the Enterprise Service Bus
    has also seen a change, where it has now been replaced by some similar solutions,
    but with the advantages of far better scalability and the removal of single point
    of failure.
  prefs: []
  type: TYPE_NORMAL
- en: The ESB in application integration used to play the role of a central bus, which
    acted as an intermediary between the applications that wanted to communicate with
    each other. The ESB facilitated this communication by introducing common data
    formats and providing adapters through which the applications could talk to the
    ESB.
  prefs: []
  type: TYPE_NORMAL
- en: 'But the ESB still suffered two major drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalability:** The ESB was a heavy piece of middleware that required a specialization
    to work with. ...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rethinking EAI in microservices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With microservices in the picture, with their own set of tools and different
    requirements, we now have to rethink the approach of EAI in the enterprise infrastructure.
    So, let''s take a look at few of the points that we need to take care of when
    considering the application integration in microservices-based infrastructures:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Planning for expansion:** The applications inside the microservices infrastructure
    are evolving continuously, and their integration needs to be planned in the same
    manner. While thinking about the integration strategy, we need to make sure that
    it will be able to support the future scale of our applications and the type of
    communication that our application may warrant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Defining the APIs:** The APIs exposed by the microservices play an important
    role in the integration of the different applications. Before the development
    of a microservice is started, its APIs should be planned well and documented,
    so as to allow for smoother integration with other services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keeping the data formats standard:** The data formats in which the different
    microservices manage their data should be standardized to have only a few sets
    of formats, so as to enable an easy integration and reduced complexity in the
    infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the course of this chapter, we took a look at how the introduction of microservices
    as a development approach to enterprise applications has completely changed the
    way applications inside an enterprise used to integrate.
  prefs: []
  type: TYPE_NORMAL
- en: We took a look at how the traditional approaches to Enterprise Application Integration
    fail when applied to the microservices architecture, and then we took a look at
    how the transformation of EAI has happened with the introduction of API gateways
    and distributed message routers.
  prefs: []
  type: TYPE_NORMAL
- en: At the conclusion of this chapter, we took a look at how the planning for the
    Enterprise Application Integration has changed as we have moved to a microservices-based
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: From here, we now have an idea about the different aspects ...
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the bottlenecks of point to point integration in microservices applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How has the Enterprise Service Bus changed with the advent of microservices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do the message brokers inside microservices architecture provide high availability?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
