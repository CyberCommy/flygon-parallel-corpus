- en: Chapter 2. Setting Up a Kafka Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we are ready to play with the Apache Kafka publisher-subscriber messaging
    system. With Kafka, we can create multiple types of clusters, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A single node—single broker cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single node—multiple broker clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple nodes—multiple broker clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A Kafka cluster primarily has five main components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Topic**: A topic is a category or feed name to which messages are published
    by the message producers. In Kafka, topics are partitioned and each partition
    is represented by the ordered immutable sequence of messages. A Kafka cluster
    maintains the partitioned log for each topic. Each message in the partition is
    assigned a unique sequential ID called the *offset*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Broker**: A Kafka cluster consists of one or more servers where each one
    may have one or more server processes running and is called the broker. Topics
    are created within the context of broker processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zookeeper**: ZooKeeper serves as the coordination interface between the Kafka
    broker and consumers. The ZooKeeper overview given on the Hadoop Wiki site is
    as follows ([http://wiki.apache.org/hadoop/ZooKeeper/ProjectDescription](http://wiki.apache.org/hadoop/ZooKeeper/ProjectDescription)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*"ZooKeeper allows distributed processes to coordinate with each other through
    a shared hierarchical name space of data registers (we call these registers znodes),
    much like a file system."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The main differences between ZooKeeper and standard filesystems are that every
    znode can have data associated with it and znodes are limited to the amount of
    data that they can have. ZooKeeper was designed to store coordination data: status
    information, configuration, location information, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Producers**: Producers publish data to the topics by choosing the appropriate
    partition within the topic. For load balancing, the allocation of messages to
    the topic partition can be done in a round-robin fashion or using a custom defined
    function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consumer**: Consumers are the applications or processes that subscribe to
    topics and process the feed of published messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's start with a very basic cluster setup.
  prefs: []
  type: TYPE_NORMAL
- en: A single node – a single broker cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the starting point for learning Kafka. In the previous chapter, we
    installed Kafka on a single machine. Now it is time to set up a single node -
    single broker-based Kafka cluster, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A single node – a single broker cluster](img/3090OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Starting the ZooKeeper server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kafka provides the default and simple ZooKeeper configuration file used to
    launch a single local ZooKeeper instance although separate ZooKeeper installation
    can also be carried out while setting up the Kafka cluster. First start the local
    ZooKeeper instance using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the ZooKeeper server](img/3090OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kafka comes with the required property files defining minimal properties required
    for a single broker—single node cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The important properties defined in `zookeeper.properties` are shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By default, the ZooKeeper server will listen on `*:2181/tcp`. For detailed information
    on how to set up multiple ZooKeeper servers, visit [http://zookeeper.apache.org/](http://zookeeper.apache.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Kafka broker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now start the Kafka broker in the new console window using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the Kafka broker](img/3090OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `server.properties` file defines the following important properties required
    for the Kafka broker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The last section in this chapter defines a few additional and important properties
    available for the Kafka broker.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Kafka topic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kafka provides a command line utility to create topics on the Kafka server.
    Let''s create a topic named `kafkatopic` with a single partition and only one
    replica using this utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get output on the Kafka server window as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Kafka topic](img/3090OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `kafka-topics.sh` utility will create a topic, override the default number
    of partitions from two to one, and show a successful creation message. It also
    takes ZooKeeper server information, as in this case: `localhost:2181`. To get
    a list of topics on any Kafka server, use the following command in a new console
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Starting a producer to send messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kafka provides users with a command line producer client that accepts inputs
    from the command line and publishes them as a message to the Kafka cluster. By
    default, each new line entered is considered as a new message. The following command
    is used to start the console-based producer in a new console window to send the
    messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting a producer to send messages](img/3090OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While starting the producer''s command line client, the following parameters
    are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '`broker-list`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`topic`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `broker-list` parameter specifies the brokers to be connected as `<node_address:port>`—that
    is, `localhost:9092`. The `kafkatopic` topic was created in the *Creating a Kafka
    topic* section. The topic name is required to send a message to a specific group
    of consumers who have subscribed to the same topic, `kafkatopic`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now type the following messages on the console window:'
  prefs: []
  type: TYPE_NORMAL
- en: Type `Welcome to Kafka` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type `This is single broker cluster` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should see output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting a producer to send messages](img/3090OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Try some more messages. The default properties for the consumer are defined
    in `producer.properties`. The important properties are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Detailed information about how to write producers for Kafka and producer properties
    will be discussed in [Chapter 4](ch04.html "Chapter 4. Writing Producers"), *Writing
    Producers*.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a consumer to consume messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kafka also provides a command line consumer client for message consumption.
    The following command is used to start a console-based consumer that shows the
    output at the command line as soon as it subscribes to the topic created in the
    Kafka broker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'On execution of the previous command, you should get output as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting a consumer to consume messages](img/3090OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The default properties for the consumer are defined in `/config/consumer.properties`.
    The important properties are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Detailed information about how to write consumers for Kafka and consumer properties
    is discussed in [Chapter 5](ch05.html "Chapter 5. Writing Consumers"), *Writing
    Consumers*.
  prefs: []
  type: TYPE_NORMAL
- en: By running all four components (`zookeeper`, `broker`, `producer`, and `consumer`)
    in different terminals, you will be able to enter messages from the producer's
    terminal and see them appearing in the subscribed consumer's terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Usage information for both producer and consumer command line tools can be viewed
    by running the command with no arguments.
  prefs: []
  type: TYPE_NORMAL
- en: A single node – multiple broker clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we have come to the next level of the Kafka cluster. Let us now set up
    a single node - multiple broker-based Kafka cluster as shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A single node – multiple broker clusters](img/3090OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Starting ZooKeeper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step in starting ZooKeeper remains the same for this type of cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the Kafka broker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For setting up multiple brokers on a single node, different server property
    files are required for each broker. Each property file will define unique, different
    values for the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`broker.id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log.dir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, in `server-1.properties` used for `broker1`, we define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`broker.id=1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port=9093`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log.dir=/tmp/kafka-logs-1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Similarly, for `server-2.properties`, which is used for `broker2`, we define
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`broker.id=2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port=9094`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log.dir=/tmp/kafka-logs-2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A similar procedure is followed for all new brokers. While defining the properties,
    we have changed the port numbers as all additional brokers will still be running
    on the same machine but, in the production environment, brokers will run on multiple
    machines. Now we start each new broker in a separate console window using the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Kafka topic using the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the command line utility for creating topics on the Kafka server, let''s
    create a topic named `replicated-kafkatopic` with two partitions and two replicas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Starting a producer to send messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we use a single producer to get connected to all the brokers, we need to
    pass the initial list of brokers, and the information of the remaining brokers
    is identified by querying the broker passed within `broker-list`, as shown in
    the following command. This metadata information is based on the topic name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following command to start the producer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If we have a requirement to run multiple producers connecting to different combinations
    of brokers, we need to specify the broker list for each producer as we did in
    the case of multiple brokers.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a consumer to consume messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The same consumer client, as in the previous example, will be used in this
    process. Just as before, it shows the output on the command line as soon as it
    subscribes to the topic created in the Kafka broker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Multiple nodes – multiple broker clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This cluster scenario is not discussed in detail in this book but, as in the
    case of the single node—multiple broker Kafka cluster, where we set up multiple
    brokers on each node, we should install Kafka on each node of the cluster, and
    all the brokers from the different nodes need to connect to the same ZooKeeper.
  prefs: []
  type: TYPE_NORMAL
- en: For testing purposes, all the commands will remain identical to the ones we
    used in the single node—multiple brokers cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the cluster scenario where multiple brokers are
    configured on multiple nodes (Node 1 and Node 2, in this case), and the producers
    and consumers are connected in different combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiple nodes – multiple broker clusters](img/3090OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Kafka broker property list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following is the list of a few important properties that can be configured
    for the Kafka broker. For the complete list, visit [http://kafka.apache.org/documentation.html#brokerconfig](http://kafka.apache.org/documentation.html#brokerconfig).
  prefs: []
  type: TYPE_NORMAL
- en: '| Property name | Description | Default value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `broker.id` | Each broker is uniquely identified by a non-negative integer
    ID. This ID serves as the broker''s name and allows the broker to be moved to
    a different host/port without confusing consumers. | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `log.dirs` | These are the directories in which the log data is stored. Each
    new partition that is created will be placed in the directory that currently has
    the fewest partitions. | `/tmp/kafka-logs` |'
  prefs: []
  type: TYPE_TB
- en: '| `zookeeper.connect` | This specifies the ZooKeeper''s connection string in
    the `hostname:port/chroot` form. Here, `chroot` is a base directory that is prepended
    to all path operations (this effectively namespaces all Kafka znodes to allow
    sharing with other applications on the same ZooKeeper cluster). | `localhost:2181`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `host.name` | This is the hostname of the broker. If this is set, it will
    only bind to this address. If this is not set, it will bind to all interfaces,
    and publish one to ZooKeeper. | `Null` |'
  prefs: []
  type: TYPE_TB
- en: '| `num.partitions` | This is the default number of partitions per topic if
    a partition count isn''t given at the time of topic creation. | `1` |'
  prefs: []
  type: TYPE_TB
- en: '| `auto.create.topics.enable` | This enables auto-creation of the topic on
    the server. If this is set to true, then attempts to produce, consume, or fetch
    metadata for a non-existent topic will automatically create it with the default
    replication factor and number of partitions. | `True` |'
  prefs: []
  type: TYPE_TB
- en: '| `default.replication.factor` | This is the default replication factor for
    automatically created topics. | `1` |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to set up a Kafka cluster with single/multiple
    brokers on a single node, run command line producers and consumers, and exchange
    some messages. We also discussed important settings for the Kafka broker.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at the internal design of Kafka.
  prefs: []
  type: TYPE_NORMAL
