- en: Chapter 8. Advanced Map Visualization and Charting Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rendering on a map may not be the only way to visualize spatial data. To put
    the data into perspective, we may have to resort to non-spatial analytics and
    charting capabilities provided by dojo and other popular libraries to complement
    the spatial visualization capabilities of the map. In this chapter, we are going
    to extend the Demographics Analytic Portal we started building in the last chapter
    with the aid of charting libraries and other visualization methods such as data
    clustering. This chapter deals with the following major topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Charting with dojo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charting with D3 library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charting with Cedar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charting with dojo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ArcGIS API is well integrated for charting with dojo. The charting capabilities
    are provided by the experimental modules of dojo, hence the name `dojox`, for
    which the `x` refers to the experimental nature of the modules . Yet these modules
    are stable enough to be integrated into any production environment. The following
    modules are considered the bare minimum modules for developing charting functionality
    with dojo:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dojox/charting`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dojox/charting/themes/<themeName>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dojox/charting/Chart2D`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dojox/charting/plot2d/Pie`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dojo chart themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `dojox` charting library provides a lot of themes, and a theme name must
    be selected among the list of themes provided by `dojox`. A list of all themes
    provided by `dojox` is found under the following URL: [http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/theme_preview.html](http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/theme_preview.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Themes provided by dojox charting library are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| JulieThreeDChrisTomClaroPrimaryColorsElectricChargedRenkooAdobebricksAlgaeBahamationBlueDusk
    | DesertDistinctiveDollarGrasshopperGrasslandsGreySkiesHarmonyIndigoNationIrelandMiamiNiceMidwestMintyPurpleRain
    | CubanShirtsRoyalPurplesSageToLimeShroomsTufteWatersEdgeWetlandPlotKit.bluePlotKit.cyanPlotKit.greenPlotKit.orangePlotKit.purplePlotKit.red
    |'
  prefs: []
  type: TYPE_TB
- en: The ideal location to test these different chart themes is at [http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/test_themes.html?Julie](http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/test_themes.html?Julie).
  prefs: []
  type: TYPE_NORMAL
- en: '![Dojo chart themes](graphics/B04959_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Charting using the popup template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Basic charting capabilities can be displayed in the popup of the feature layer
    using the `mediaInfos` property of the `popup` template. We will use the county-level
    demographics feature layer we used in the last chapter to create this chart. We
    are interested in the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Fields | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `NAME` | Name of the county |'
  prefs: []
  type: TYPE_TB
- en: '| `STATE_NAME` | Name of the state |'
  prefs: []
  type: TYPE_TB
- en: '| `TOTPOP_CY` | Total population count for the county |'
  prefs: []
  type: TYPE_TB
- en: '| `MEDHINC_CY` | Median household income of the county |'
  prefs: []
  type: TYPE_TB
- en: '| `DIVINDX_CY` | Diversity index calculated for the county |'
  prefs: []
  type: TYPE_TB
- en: '| `WHITE_CY` | Count of white males and females |'
  prefs: []
  type: TYPE_TB
- en: '| `BLACK_CY` | Count of black males and females |'
  prefs: []
  type: TYPE_TB
- en: '| `AMERIND_CY` | Count of American Indians (male and female) |'
  prefs: []
  type: TYPE_TB
- en: '| `ASIAN_CY` | Count of Asians (male and female) |'
  prefs: []
  type: TYPE_TB
- en: '| `PACIFIC_CY` | Count of Pacific Islanders (male and female) |'
  prefs: []
  type: TYPE_TB
- en: '| `OTHRACE_CY` | Count of other races (male and female) |'
  prefs: []
  type: TYPE_TB
- en: 'Creating a `mediaInfos` object involves constructing a `fieldInfos` object
    if we need to change the field names, or give an alias to them in the chart. The
    `mediaInfos` object accepts a `theme` property. Mention one of the dojo charting
    theme names or a custom theme created by you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Charting using the popup template](graphics/B04959_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Types of 2D charts provided by dojox modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen a pie chart in action. Let's discuss some more chart types provided
    by the `dojox` module and the utility of some of the more popular chart types.
    Notice the difference between chart types such as Bars and Columns, as well as
    Scatter and MarkersOnly.
  prefs: []
  type: TYPE_NORMAL
- en: '| Chart type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Areas | Area under data line(s) will be filled |'
  prefs: []
  type: TYPE_TB
- en: '| Bars | Refers to horizontal bars |'
  prefs: []
  type: TYPE_TB
- en: '| ClusteredBars | Horizontal bars with grouped data sets |'
  prefs: []
  type: TYPE_TB
- en: '| ClusteredColumns | Vertical bars with grouped data sets |'
  prefs: []
  type: TYPE_TB
- en: '| Columns | Refers to charts with vertical bars |'
  prefs: []
  type: TYPE_TB
- en: '| Grid | For adding a grid layer to your chart |'
  prefs: []
  type: TYPE_TB
- en: '| Lines | Basic line chart |'
  prefs: []
  type: TYPE_TB
- en: '| Markers | Line chart with data points marked |'
  prefs: []
  type: TYPE_TB
- en: '| MarkersOnly | Only data points are shown |'
  prefs: []
  type: TYPE_TB
- en: '| Pie | Represents the distribution of data by representing it on a circular
    dias |'
  prefs: []
  type: TYPE_TB
- en: '| Scatter | Used to plot data |'
  prefs: []
  type: TYPE_TB
- en: '| Stacked | Data sets charted in relation to the previous data set |'
  prefs: []
  type: TYPE_TB
- en: '| StackedAreas | Stacked data sets with filled areas under chart lines |'
  prefs: []
  type: TYPE_TB
- en: '| StackedBars | Stacked data sets with horizontal bars |'
  prefs: []
  type: TYPE_TB
- en: '| StackedColumns | Stacked data sets with vertical bars |'
  prefs: []
  type: TYPE_TB
- en: '| StackedLines | Stacked data sets using lines |'
  prefs: []
  type: TYPE_TB
- en: Dojo charting methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The charting module has four important methods that will help us create a chart.
    They are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addPlot()`: Defines the type of chart and other ancillary properties that
    define the chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setTheme()`: Lets us set a dojo theme to the chart. The themes can be customized
    too.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addSeries()`: Defines the data used by the chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`render()`: Renders the chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining your plot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the `addPlot()` method you can define your plot. The plot accepts a name
    and an argument array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's see what constitutes the `plotArguments` object. The properties of the
    `plotArguments` vary based on the type of chart we choose to use. If we choose
    a chart type that uses a line, area, or data points to define the data, properties
    such as line, areas, or markers should be set to a Boolean value. The lines option
    determines whether or not lines are used to connect your data points. If the areas
    type is selected, the area below your data line will be filled. The markers option
    will determine whether markers are placed at your data points.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `plotArguments` can accept the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type`: The type of chart to be rendered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lines`: Boolean to indicate whether the chart data needs to be enclosed by
    lines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`areas`: Boolean value to indicate whether the data is enclosed by an area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`markers`: Boolean value which determines whether markers are placed at data
    points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For chart types such as StackedLines or StackedAreas, we can use properties
    such as tension and shadows to enhance the visualization of the chart. Tension
    smooths the lines connecting the data points, and the shadows property will add
    shadows to the lines. The `shadow` property itself is an object that accepts three
    properties named `dx`, `dy`, and `dw`, which define what should be the *x* offset,
    *y* offset, and width of the shadow line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When rendering a bar chart, use the `gap` property to represent the number
    of pixels between bars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Defining the theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the list of themes mentioned earlier, we can set the theme for our chart
    using the `setTheme()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Pushing the data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can push the data into a chart using the `addSeries()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `addSeries()` method accepts two arguments. The first argument mentions
    a name for the data and the second argument. The second argument is an array object
    that holds the actual data. It can be one-dimensional data such as `[10,20,30,40,50]`
    or two-dimensional data, in which case the `x` and `y` properties of the data
    can be mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `x` component can be omitted if it is a pie chart.
  prefs: []
  type: TYPE_NORMAL
- en: Chart plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few plugins that can be added to the chart module of dojo that
    add value to the charting functions. These plugins provide interactivity to the
    chart data and most of the plugins reveal extra information about the data item
    or emphasize the data item being hovered upon. Some provide an overall sense of
    the data with the aid of visualization elements such as a legend. Some of the
    functions accomplished by the plugins are:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a tooltip to the chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving the pie slice and magnifying it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a legend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting the data item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugin modules such as `dojox/charting/widget/Legend` provide support from the
    `Legend` widget. The `dojox/charting/action2d/Tooltip` module supports tooltip
    support on chart data. Including the `dojox/charting/action2d/Magnify` module
    will magnify the chart data being hovered upon, giving greater interactivity with
    the chart. The `dojox/charting/action2d/MoveSlice` module treats the chart data
    as a slice and shifts the locations of the chart data being hovered upon. This,
    along with the `Magnify` plugin, helps us to effectively give a sense of user
    interactivity with the chart data. The `dojox/charting/action2d/Highlight` module
    highlights the data being hovered upon with a different highlight color such as
    cyan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing the plugin is very easy too. The following lines of code implements
    the plugins such as `Highlight`, `Tooltip`, and `MoveSlice` on the dojo chart
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let's create a complete chart in a dynamic `div` on the `infotemplate` property
    of the feature layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the county-level demographics feature layer for this demonstration
    too. Our objective is to create a pie chart to display the racial distribution
    of any county that we click. We would be calling a function to create the `Infowindow`
    content for each feature dynamically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the function that returns the `Infotemplate` content, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Tab` container that will contain two content panes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first content will display details about the county being selected and the
    Median Household Income data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second content pane will contain the dojo pie chart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before rendering the pie chart, we shall calculate the percentage of each racial
    group against the total population.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, we shall assign a label for each racial group. This label will be used
    while using the legend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, pie chart data objects accept a tooltip property where we will mention
    the label along with the data value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will try to use the chart plugins such as `Highlight`, `Tooltip`, and `Moveslice`
    to highlight the selected sub data item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s try to implement these steps in the code. We will write a function
    that constructs the chart and returns the chart content as a `dom` element. We
    will use the `setContent()` method of the `infotemplate` to set the `dom` element
    returned by the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When this code is implemented, we will get a popup after we click on any county.
    The popup contains two tabs—the first tab gives details about the **Total Population**
    of the tab and the **Median Household Income** in that county. The title for the
    entire popup will mention the county name and the state name. The contents of
    the first tab will have a dynamically generated Wikipedia link to the county and
    state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first tab of the pop-up container is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart plugins](graphics/B04959_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The second tab in the popup shows the dojo chart. We have a legend element for
    the chart. When we hover over any of the data in the pie chart, it is sliced,
    magnified a bit, and highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart plugins](graphics/B04959_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Charting with D3.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D3.js is a JavaScript library for manipulating documents based on data. D3 stands
    for data-driven documents and this library provides powerful visualization components
    and a data-driven approach to DOM manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: To use D3 in our JavaScript application, we can download the library from the
    D# website found at [http://d3js.org/](http://d3js.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Or we can use the CDN in our script tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A more dojo-centric approach would be to add this as a package in the `dojoconfig`
    and use it as a module in the define function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a snippet to add D3 as a package to the `dojoConfig`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `d3` library as in the `define` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Creating a column chart with D3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a column chart with D3 using the county-level demographics data.
    Our objective is to use the column chart to display four measures of Median Household
    Income centered upon the Median Household Income of the county of interest. The
    four measures are:'
  prefs: []
  type: TYPE_NORMAL
- en: The National Minimum or value at 5th percentile (Average—three Standard Deviation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Median Household Income of the county being clicked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The National Average value for Median Household Income
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The National Maximum or value at the 95th percentile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image is a mock-up of how we intend to build our chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a column chart with D3](graphics/B04959_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are several reasons why we have chosen to demonstrate constructing this
    chart using D3\. D3 is entirely data driven, and hence flexible, especially for
    data visualization. Many visualization libraries are built on top of D3 and a
    knowledge of D3 will even help us build intuitive charts and data visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: D3 selections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'D3 works on selections. The selections in D3 are very similar to jQuery selections.
    To select the `body` tag, all you have to do is declare:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To select all `div` tags with a particular style class named `chart`, use the
    following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To append an `svg` (scalable vector graphic) tag or any other HTML tag to a
    `div` or the body tag, use the append method. The SVG element is used to render
    most graphic elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Use it along with an `enter()` method to indicate that the element accepts
    the input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: D3 data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'D3 is driven by data as its name suggests. All we need to render a simple chart
    is to feed data to the D3 selection. Data can be as simple as an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'All we are doing in the previous snippet is we are setting the width property
    for the style object of the D3 selection. And we get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![D3 data](graphics/B04959_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The width value of each `div` in pixels is taken from the value of each element
    in the data array multiplied by 20, and the text value within the bar is again
    taken from the value of the individual data. There''s something that needs to
    be done before, to get this beautiful chart—we need to set the CSS styling for
    the `div`. Here''s a simple CSS snippet we used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: D3 scaling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous snippet to show a simple D3 chart, we used a multiplicand value
    of `20` with each value of the data to get the pixel value for the `div` width.
    Since our container `div` was around 400 pixels wide, this multiplicand value
    was fine. But what multiplicand value should we use for a dynamic data? The rule
    of thumb is that we should use some kind of scaling mechanism to scale the pixel
    values so that our maximum-most data value fits inside the chart container `div`
    comfortably. D3 provides a mechanism to scale our data and calculate the scaling
    factor, which we use to conveniently scale our data.
  prefs: []
  type: TYPE_NORMAL
- en: 'D3 provides a `scale.linear()` method to calculate the scaling factor. Additionally,
    we need to use two more methods, namely `domain()` and `range()`, to actually
    calculate the scaling factor. The `domain()` method accepts an array with two
    elements. The first element should mention the minimum-most data value or `0`
    (whichever is appropriate) and the second element should mention the maximum-most
    value of the data. We can use the D3 function `d3.max` to find the maximum value
    of the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `range` function also accepts an array with two elements, which should
    list the pixel range of the container div element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we find the scaling factor `x`, we can use this as the multiplicand for
    the data item value to derive the pixel value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Integrating SVG into D3 charts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SVG, though intimidating in its entirety, offers several advantages while working
    with data visualizations, and supports a lot of primitive shapes to be rendered
    in HTML. One key thing to be noted is that the SVG coordinate system starts from
    the top-left corner and we need to bear this is mind while calculating the desired
    positions of our elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Appending an SVG element is similar to appending a `div` to our chart class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the previous snippet, we can actually set the styling and other attributes
    such as width and height. `transform` is an important property by which we can
    move the position of the `svg` element (remember the SVG coordinate system origin
    is in the top-left corner).
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating SVG into D3 charts](graphics/B04959_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we will be constructing a column chart, the first element in the array
    accepted by the `range()` method while calculating D3 linear scaling should not
    be the minimum-most value, but rather the maximum height value in pixels. The
    second element in the array is the minimum pixel value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Conversely, the `x` scaling factor should be based on an ordinal scale (meaning,
    we don''t use numbers to calculate the width and spacing of the bars):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: From the feature statistics module we have discussed earlier, we should be able
    to get the mean and standard deviation of a particular field in the feature layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the previous two pieces of information, we know how to calculate the 2.5^(th)
    percentile (bottom 2.5% income) and 97.5^(th) percentile (top 2.5% income level).
    We intend to compare the Median Household Income of the selected feature along
    with these values. The formula to calculate the 2.5^(th) and 97.5^(th) percentile
    is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| *1st percentile = mean - 2,33 * SD* | *99th percentile = mean + 2,33 * SD*
    |'
  prefs: []
  type: TYPE_TB
- en: '| *2.5th percentile = mean - 1.96 * SD* | *97.5th percentile = mean + 1.96
    * SD* |'
  prefs: []
  type: TYPE_TB
- en: '| *5th percentile = mean - 1.65 * SD* | *95th percentile = mean + 1.65 * SD*
    |'
  prefs: []
  type: TYPE_TB
- en: 'From previous statistic computations, we know the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We need the 2.5^(th) and 97.5^(th) percentile which can be calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'And for the 97.5^(th):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'So, this is going to be the data for our chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Income` value for the `Selected Value` label is set to `0`. This value
    will be updated as we click a feature in the `feature` class. We will also define
    a `margin` object as well as `width` and `height` variables for use in our chart.
    The margin object we defined looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'While constructing the chart, we will be considering the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the *x* scaling factor and *y* scaling factor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the *x* and *y* axes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear all the existing contents of the `div` with a `chart` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the *x* and *y* domain values based in the `margin` object, as well as
    `width` and `height` values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the SVG element that would hold our chart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the axes as well as the chart data as rectangle graphic elements in the
    SVG.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will write the functionality in a function, and call the function as needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We can call the previous function on the feature layer `click` event. In our
    project, the feature `click` event is defined in a separate file, and the D3 chart
    code is in a separate file. So, we can send the click results through the dojo
    topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The result can be accessed in any other file by using the `subscribe()` method
    under the topic module. In the previous snippet, the result can be accessed by
    referring to the name called `app/feature/selected`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is a representation of the output of our code. The
    D3 chart represents a typical column chart with four columns. The first three
    data values are static as per our code, because we can compute the top and bottom
    2.5^(th) percentile as well as the national average from the feature layer data.
    The last column is the actual value of the selected feature in the feature layer.
    In the following snapshot we have clicked in Nassau county in New York state and
    the data value is a bit above $100,000, which is well above the top 2.5^(th) percentile
    mark:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating SVG into D3 charts](graphics/B04959_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the following screenshot, we have selected one of the counties with the least
    Median Household Income. Notice how the *Y* axis re-calibrates itself based on
    the maximum value of the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating SVG into D3 charts](graphics/B04959_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Charting with D3 using SVG components can be cumbersome, but a basic knowledge
    of these will go a long way when we need to do high-level customizations.
  prefs: []
  type: TYPE_NORMAL
- en: Charting with Cedar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cedar is a beta versioned library provided as an open source by Esri to create
    and share data visualizations based on ArcGIS Server data. It is built upon the
    D3 and Vega graphics libraries themselves. Cedar lets us create efficient data
    visualizations and charts using a simple template.
  prefs: []
  type: TYPE_NORMAL
- en: Loading Cedar libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can load Cedar using two methods. We either use the script tags or use the
    AMD pattern. The latter method is preferred.
  prefs: []
  type: TYPE_NORMAL
- en: Loading using the script tags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Load Cedar and its dependencies by including script tags. This will make the
    Cedar global available to our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Loading using the AMD pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Alternatively, we can use the dojo loader, which is bundled with the ArcGIS
    API for JavaScript, to load Cedar and its dependencies by declaring them as packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `dojo` packages expect a set of Cedar library files at the `/js/cedar` location.
    We can download the required files from the following github repository found
    at [https://github.com/Esri/cedar/tree/develop/src](https://github.com/Esri/cedar/tree/develop/src).
  prefs: []
  type: TYPE_NORMAL
- en: We need all the files found at the previously mentioned URL. Place these files
    in the `/js/cedar` folder in the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading using the AMD pattern](graphics/B04959_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now load the Cedar module within our own define function as demonstrated
    in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a simple chart, all we need to define are two properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type`—defines the type of chart we are trying to construct (`bar`, `bubble`,
    `scatter`, `pie`, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dataset—defines where the data should come from; this can be either from a URL
    or values (array). The dataset also accepts properties such as query and mappings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mappings property of the dataset defines the objects required to render
    the map. The specifications for the corresponding type of chart can be found at
    `/js/cedar/charts/<chart_type>.js`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a bar chart, the mappings property requires two objects, *x* and *y*. Let''s
    try to create a summarization for our county demographics layer. Here we are trying
    to summarize the average of the Median Household Income of all counties grouped
    by state. The following simple code does all that and displays a simple bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The previous lines of code are all that are needed to configure the Cedar library,
    which provides us with this great visualization of the average income levels of
    all states and arranged in ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading using the AMD pattern](graphics/B04959_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This kind of chart gives us a holistic picture of the data. Let's get our hands
    dirty and try to construct a scatter plot, which lets us map more than one variable.
  prefs: []
  type: TYPE_NORMAL
- en: Our objective is to map the income levels of all states along the *X* axis,
    and the diversity index along the *Y* axis, coloring the data points differently
    according to the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The demographics URL for the State-level data is: [http://demographics5.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2015/MapServer/21](http://demographics5.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2015/MapServer/21)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The mapping object should have an extra parameter named color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot is the result of the implementation of the code given
    previously. The chart produces a legend based on the value that is colored differently.
    In our case, the different states are colored differently. This kind of coloring
    would be more appropriate if the number of values being colored was small, for
    example if we were using the colors to represent states categorized into some
    kind of regions such as North, North East, South, South West, and other cardinal
    directions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading using the AMD pattern](graphics/B04959_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating a bubble chart gives an extra handle—representing a third variable
    using the size of the bubble:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a bubble chart; the *x* position of the bubble
    represents the median household income of the county, the *y* position of the
    bubble represents the diversity index of the county, and the radius or the size
    of the bubble represents the total population of the county:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading using the AMD pattern](graphics/B04959_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We began from creating a simple customizable chart in `Infotemplate`, which
    can visualize one variable, to a chart that can actually visualize three variables
    at the same time, thus enhancing our understanding of the data and increasing
    the value it offers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered how we can complement charting techniques along with spatial
    data to provide a comprehensive insight into the data we have. While working with
    `Infotemplate` and dojo chart is handy, working with D3 provides greater flexibility
    and greater control over the graphical elements. Cedar, an open source data visualization
    library provided by Esri, is a great library for creating refreshingly new data
    visualizations very easily. Once we have mastered these techniques along with
    the statistical methods, and have learned to look at our data from different perspectives,
    we can claim ourselves as flag-bearers of map data science. There's one more component
    missing in the way we visualize our spatial data. That component is time. In the
    next chapter, we will see how to visualize spatio-temporal data along with the
    knowledge gained in advanced charting capabilities and the ArcGIS JavaScript API
    itself.
  prefs: []
  type: TYPE_NORMAL
