- en: Chapter 5. Mobile Device Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting your location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling cross-browser geolocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a map based on your geolocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Realtime positioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DeviceOrientation` event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using geolocation with foursquare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Among all the HTML5 classes, one that is most closely related to mobile development
    has to be Device Access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the official description of Device Access on the W3C HTML5 Movement
    site ([http://www.w3.org/html/logo/](http://www.w3.org/html/logo/)):'
  prefs: []
  type: TYPE_NORMAL
- en: Beginning with the Geolocation API, Web Applications can present rich, device-aware
    features, and experiences. Incredible device access innovations are being developed
    and implemented, from audio/video input access to microphones and cameras, to
    local data such as contacts and events, and even tilt orientation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can find the description and logo at: [http://www.w3.org/html/logo/ #the-technology](http://www.w3.org/html/logo/).'
  prefs: []
  type: TYPE_NORMAL
- en: Location-based social networks like foursquare have had a profound impact on
    the way business works and how people mobilize. Groupon's new location-based offer,
    if it's released, may fundamentally change consumer behavior and the way retail
    businesses function. Google Maps uses realtime geolocation and GPRS to help people
    and vehicles navigate. There will be more and more exciting innovations built
    on top of this Device Access technology.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will study geolocation API and DeviceOrientation API, address
    cross-browser issues, and see how we can use Device Access together with popular
    location-based services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting your location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: Android, iOS, webOS, Opera, Firefox'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the geolocation API, we could return values like latitude, longitude,
    and accuracy of your current location:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Latitude and longitude: These attributes are geographic coordinates and are
    specified in decimal degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Accuracy: Denotes the accuracy level of the latitude and longitude coordinates
    and is specified in meters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create an HTML document and get the latitude and longitude together with
    the accuracy. First, let's create a new HTML file, and name it `ch05r01.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code into the HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you first render it, you will be prompted with a message as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Geolocation support is opt-in. No browser will automatically send the physical
    location of your device to the server. Instead, it will ask for your permission
    before executing the program of sending the location of your device back and forth.
    The browser can remember your preference to prevent it from popping up again from
    the same site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now press the button that allows you to share the location. You will then get
    the location data displayed on the screen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`navigator` is an object that is no stranger to JavaScript programmers. It''s
    commonly used for user agent detection: `navigator.userAgent`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`geolocation` is a new property on the `navigator` object: `navigator.geolocation`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`getCurrentPosition` is a method of `navigator.geolocation`. In this example,
    we execute the function `showInfo` as the first argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the `showInfo` function, we return three values from `position` parameter,
    that is, `latitude, longitude`, and `accuracy:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, are the aforementioned attributes all that the geolocation API could return?
    Theoretically, more information can be returned, but in reality, only selected
    browsers will return additional information.
  prefs: []
  type: TYPE_NORMAL
- en: Handling cross-browser geolocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation doesn't work on all mobile browsers, and even for those browsers
    that do support it, they could have an API that's different from the standard.
    iOS and Android use the standard. Browsers that are known to have a different
    API include Blackberry, Nokia, and Palm. Luckily, we have a mobile-centric geolocation
    polyfill—**geo-location-javascript**. It has non-standard Blackberry and webOS
    tricks to help normalize different API behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the resources that come with this chapter and create a `js` folder.
    Put `geo.js` into the `js` folder. Now create an HTML document named `ch05r02.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code into the HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Test it in Opera and you should be able to see the result as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the top of the HTML document, we link to `gears_init.js`. If the browser
    doesn't have a geolocation API supported by default, but has Gears installed,
    the Gears API may return the geolocation data. For browsers that have the geolocation
    API, but just in a different method, the second script `geo.js` will be used to
    normalize the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `geo_position_js.init()` returns true, it means in one way or anther we
    are able to get the geolocation data. In this case we will proceed to the next
    step. Instead of using `navigator.geolocation.getCurrentPosition`, we use `geo_position_js.getCurrentPosition`
    as the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is an additional resource that will help you to get geolocation info.
  prefs: []
  type: TYPE_NORMAL
- en: YQL Geo Library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'YQL Geo Library provides an alternative approach, an IP address-based geolocation.
    It is a lightweight library that is tied to Yahoo services. It can:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the geographical location from a text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the location information from lat/lon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get all the geographical locations from a certain URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the place from an IP number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a map based on your geolocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps API V3 has been designed to load fast and work well on mobile
    devices. In particular, we have focused on development for advanced mobile devices
    such as the iPhone and handsets running the Android operating system. Mobile devices
    have smaller screen sizes than typical browsers on the desktop. As well, they
    often have particular behavior specific to those devices, such as "pinch-to-zoom"
    on the iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create a map that displays on your mobile device. First, let's create
    an HTML document named `ch05r03.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When rendered in your mobile browser, it looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s break down the code and see what each section does:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The iPhone has the pinch-to-zoom feature and Google Maps API V3 has special
    handling for this event. So you can set the following metatag and this will make
    sure that the users cannot resize the iPhone. Android devices running software
    version 1.5 (Cupcake) also support these parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the`<div>` containing your map to have width and height attributes of 100
    percent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can detect iPhone and Android devices by inspecting the `navigator.userAgent`
    property within the DOM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Specifying the Sensor Parameter, applications that determine the user's location
    using a sensor must pass `sensor=true` when loading the Maps API JavaScript.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Use of the Google Maps API requires that you indicate whether your application
    is using a sensor (such as a GPS locator) to determine the user's location. This
    is especially important for mobile devices. Applications must pass a required
    sensor parameter to the `<script>` tag when including the Maps API JavaScript
    code, indicating whether or not your application is using a sensor device.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that even if we are targeting a device that does not use a sensing device,
    we must still pass this parameter, setting its value to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We parse in the geolocation coordinates to the map API''s `LatLng` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can learn more about Google Maps JavaScript API V3 at the official documentation
    page at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/apis/maps/documentation/javascript/](http://code.google.com/apis/maps/documentation/javascript/)'
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 geolocation tutorial
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Mobile tuts has an excellent article about mobile geolocation called *HTML5
    Apps: Positioning with Geolocation*. You can read it at:'
  prefs: []
  type: TYPE_NORMAL
- en: '*HTML5 Apps: Positioning with Geolocation*'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://mobile.tutsplus.com/tutorials/mobile-web-apps/html5-geolocation/](http://mobile.tutsplus.com/tutorials/mobile-web-apps/html5-geolocation/)'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying location in realtime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from `getCurrentPosition`, geolocation API has another method named `watchPosition`.
    It performs two important actions when called:'
  prefs: []
  type: TYPE_NORMAL
- en: It returns a value that identifies a watch operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It asynchronously starts the watch operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create an HTML document and name it `ch05r04.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code into the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how it will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following function will initiate the location watch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`navigator.geolocation.watchPosition` will either return success or error upon
    execution. In the success function, you can parse the latitude and longitude:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When the position is being watched, the `handle_geolocation_query` is used
    to get the current position and parse to the update position function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using the DeviceOrientation event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS'
  prefs: []
  type: TYPE_NORMAL
- en: The `DeviceOrientation` event is an important aspect of Device Access. It includes
    device motion events and device orientation events. Unfortunately, these events
    are currently supported in iOS only.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch05r05.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code into the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This code was made by *Maximiliano Firtman* ([http://www.mobilexweb.com/blog/safari-ios-accelerometer-websockets-html5](http://www.mobilexweb.com/blog/safari-ios-accelerometer-websockets-html5)).
    In the example, we used `accelerationIncludingGravity`. It returns the value of
    the total acceleration of the device, which includes the user acceleration and
    the gravity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three values, x, y, z, represent the acceleration in m/s^2 for each axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/1963_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a table that shows the current support for `DeviceOrientationEvent`
    and `DeviceMotionEvent:`
  prefs: []
  type: TYPE_NORMAL
- en: '| Properties | Description | Returned values | Class | Support |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `acceleration` | *The acceleration that the user is giving to the device.*
    | *x, y, z (in m/s^2)* | `DeviceMotion Event` | *iPhone 4 / iPod Touch 4G* |'
  prefs: []
  type: TYPE_TB
- en: '| `acceleration IncludingGravity` | *The total acceleration of the device,
    which includes the user acceleration and the gravity.* | *x, y, z (in m/s^2)*
    | `DeviceMotion Event` | *iPhone3 / iPod Touch 3G* |'
  prefs: []
  type: TYPE_TB
- en: '| `interval` | *The interval in milliseconds since the last device motion event.*
    | *milliseconds* | `DeviceMotion Event` | *iPhone3 / iPod Touch 3G* |'
  prefs: []
  type: TYPE_TB
- en: '| `rotationRate` | *The rotation rate of the device.* | *alpha, beta, and gamma
    (values are between 0 and 360)* | `DeviceMotionEvent` | *iPhone 4 / iPod Touch
    4G* |'
  prefs: []
  type: TYPE_TB
- en: '| `alpha` | *The degrees the device frame is rotated around its z-axis.* |
    *Values are between 0 and 360.* | `DeviceOrientation Event` | *iPhone 4 / iPod
    Touch 4G* |'
  prefs: []
  type: TYPE_TB
- en: '| `beta` | *The degrees the device frame is rotated around its x-axis.* | *Values
    are between -180 and 180.* | `DeviceOrientation Event` | *iPhone 4 / iPod Touch
    4G* |'
  prefs: []
  type: TYPE_TB
- en: '| `gamma` | *The degrees the device frame is rotated around its y-axis.* |
    *Values are between -90 and 90.* | `DeviceOrientation Event` | *iPhone 4 / iPod
    Touch 4G* |'
  prefs: []
  type: TYPE_TB
- en: DeviceOrientation event specification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[http://dev.w3.org/geo/api/spec-source-orientation.html](http://dev.w3.org/geo/api/spec-source-orientation.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Offical guide on the Safari site
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`DeviceOrientation` event specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/safari/#documentation/SafariDOMAdditions/Reference/DeviceMotionEventClassRef/DeviceMotionEvent/DeviceMotionEvent.html](http://developer.apple.com/library/safari/#documentation/SafariDOMAdditions/Reference/DeviceMotionEventClassRef/DeviceMotionEvent/DeviceMotionEvent.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '`DeviceOrientationEvent` class reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/safari/#documentation/SafariDOMAdditions/Reference/DeviceOrientationEventClassRef/DeviceOrientationEvent/DeviceOrientationEvent.html](http://developer.apple.com/library/safari/#documentation/SafariDOMAdditions/Reference/DeviceOrientationEventClassRef/DeviceOrientationEvent/DeviceOrientationEvent.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Using geolocation with foursquare
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: In recent years, the location-based social networking website foursquare has
    become more and more popular. It affected the way many business work and consumers
    behave. Users "check-in" at places using a mobile website, mobile app, or SMS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Third-party developers have released many libraries for accessing the foursquare
    API from various programming languages. One of those is Marelle. It's based on
    jQuery and written in coffeescript. Don't worry, that's just JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to the GitHub page of Marelle ([http://praized.github.com/marelle/](http://praized.github.com/marelle/))
    and download the latest version. There are two examples, one is login and another
    is check-in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the login script looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we trigger Marelle initialization `$.Marelle(clientID)` and it returns
    a promise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Then we grab an authentication promise using `$.Marelle.authenticateVisitor():`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the result of the authentication, `authpromise.then()` is used
    to either execute `authsuccess` or `authfailure:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If the authentication is successful, it appends a "disconnect" button to the
    provided selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'One can return a list of recommended venues, add or search venues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If the authentication is unsuccessful, it appends a "Connect" button to the
    provided selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: There's more..
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A list of foursquare APIs can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.foursquare.com/docs/libraries.html](http://developer.foursquare.com/docs/libraries.html)'
  prefs: []
  type: TYPE_NORMAL
