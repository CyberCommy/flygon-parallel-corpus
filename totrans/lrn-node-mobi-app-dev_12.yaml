- en: Chapter 12. Working with Real-Time Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In today's app ecosystem, real-time features of various sorts are more or less
    becoming staple. Chat applications (and chat features for existing apps) are ever
    more common, push notifications bring news and views to users without them having
    to look for it, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at how we can incorporate some choice real-time
    features into our Ionic apps. We will do so by building a simple chat application
    without authentication, where at least two people can get together and talk about
    the wonders of life. In doing so, we will revisit what we learnt earlier about
    web sockets, as we will need to create a simple server for this end.
  prefs: []
  type: TYPE_NORMAL
- en: A refresher – WebSockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we move on, let's have a quick refresher on an important concept that
    we visited earlier—WebSockets.
  prefs: []
  type: TYPE_NORMAL
- en: WebSockets is a standardized Internet protocol, which allows for direct server-to-client
    communication over a network. This is rather unusual in the world of traditional
    client-server architecture, where almost all communication is initiated by the
    client and the server simply responds to such communication.
  prefs: []
  type: TYPE_NORMAL
- en: WebSockets makes it easy to build real-time apps because the server can dynamically
    push new data to the connected clients as soon as its state changes. This is ideal
    for chat applications, in which we would otherwise have to use more tedious and
    resource-consuming approaches, such as polling, in order to approximate the same
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: For a deeper understanding of WebSockets, please refer to [Chapter 5](ch05.html
    "Chapter 5. Real-Time Data and WebSockets"), *Real-Time Data and WebSockets*,
    where we dealt with them in depth.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the lay of the land
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to build a chat application that is hauntingly
    reminiscent of the one that we saw in [Chapter 5](ch05.html "Chapter 5. Real-Time
    Data and WebSockets"), *Real-Time Data and WebSockets*. The big difference, of
    course, is that our client will be an Ionic app this time, which will be able
    to interact fully with browser clients that are also connected to the same server.
    In doing so, we demonstrate how easy it is to build apps that almost seamlessly
    interact with apps on other platforms that use the same server.
  prefs: []
  type: TYPE_NORMAL
- en: What we will need
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get our app working, we will need:'
  prefs: []
  type: TYPE_NORMAL
- en: A server that can both receive and relay messages via WebSockets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An app that can connect to a server using WebSockets and send, receive, and
    process messages over the same protocol. All the sent data should be rendered
    in a way that is meaningful to the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the spirit of this book, we will of course use Node.js for our server. To
    add WebSocket support to it, we will use the `socket.io` library, which you already
    saw in [Chapter 6](ch06.html "Chapter 6. Introducing Ionic"), *Introducing Ionic*.
  prefs: []
  type: TYPE_NORMAL
- en: For the client, we will use the standard `socket.io` client library, which was
    seen in [Chapter 5](ch05.html "Chapter 5. Real-Time Data and WebSockets"), *Real-Time
    Data and WebSockets*, (observed a trend here?). However, we will make some clever
    use of it in order to make things work smoothly on the app side of things.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and start setting things up!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing that we need to do is create a WebSocket server to relay messages
    between our clients. Find a suitable project folder, open your terminal/command
    line, and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create the basic Node.js project structure. You can enter whatever
    values you see fit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s install the dependencies that we will need. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will install `socket.io`, which is all we will need in order to get our
    server running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create the `server.js` file in the current folder and add the following
    content to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Looks familiar, doesn''t it? This is pretty much the exact same server that
    we developed back in [Chapter 5](ch05.html "Chapter 5. Real-Time Data and WebSockets"),
    *Real-Time Data and WebSockets*! It even has that beautiful, modern chat UI that
    we built there. All that we need to do is serve it. To do so, add the `index.html`
    file to the current folder and add the following to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That's all there is to it. Our browser-based chat is now all up and running...again!
    I won't explain how everything works here. Checkout [Chapter 5](ch05.html "Chapter 5. Real-Time
    Data and WebSockets"), *Real-Time Data and WebSockets*, if anything seems unclear.
    Whenever you are ready, let's head right on and get started with our app client.
  prefs: []
  type: TYPE_NORMAL
- en: Building the chat app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of our primary concerns when developing mobile experiences is creating an
    interface that is intuitive for users to use. Fortunately, Ionic comes loaded
    with some very convenient features to make this possible. Before we get there
    though, let's set up the basics.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the basic app structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by creating a basic app. Create a suitable project folder, which
    is different from that of the chat server that we created earlier. Navigate to
    the folder, open a terminal/command line, and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As we have seen before, this will create an empty Ionic project for us to fill
    with love and good things. Have a look around. Not much to see here, right? We
    will change that soon enough. Hang tight.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s early, but let''s get our Ionic preview server going right away so that
    we can see the app live. Without changing anything, run the following from your
    terminal / command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will bring up the preview for both the Android and iOS displays. As expected,
    there is not much to see here yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the basic app structure](img/B04653_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go ahead and set up the basics. The first thing that we need to deal
    with is routing. In the `js/app.js` file, make sure that you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we defined a basic, abstract state called `app`, which we will leave as
    the root state for the app as a whole. The only child state of this state is `app.state`,
    which will contain the actual chat view and associated logic.
  prefs: []
  type: TYPE_NORMAL
- en: It may seem counter-intuitive to add states for an app that we really only want
    to have a single view of. However, this is a good architectural precaution to
    take in case we want to expand the app further.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add some basic view information. Create a **templates** folder
    in your app''s `www` folder and then proceed to create a file named `app-chat.html`
    in it, which has the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your app preview should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the basic app structure](img/B04653_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is slightly better, but we're not quite there yet. Next, we will add the
    actual chat layout to it.
  prefs: []
  type: TYPE_NORMAL
- en: The input section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go ahead and modify the `app-chat.html` file so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we attached a footer to our app—an element that will be permanently fixed
    to the bottom of the viewport. Inside this footer, we defined an input field to
    add a message and an associated button to actually send it. To make the input
    box scale appropriately, we need to add the following to the `css/style.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Having done all this, we will end up with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The input section](img/B04653_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So far, so good. *Gotta* love that spicy green touch. On we go!
  prefs: []
  type: TYPE_NORMAL
- en: The message view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's create the part of our app that will display all the messages in
    our most important chat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `templates/app-chat.html` file so that the `<ion-content>` tag looks
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code creates a standard Ionic list that contains a set of `item-avatar`
    elements. These are standard list items in Ionic, which make it easy to show an
    avatar image, a heading, and some text, as shown in the following example from
    the Ionic element reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The message view](img/B04653_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, in our case, we will skip over the actual images and just use the header
    and text. These two make for a very convenient way of showing a single chat message
    along with the name of the person sending it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following to the `css/style.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is needed in order to override the default Ionic styling
    for the `item-avatar` element. This allows for the title and text to be positioned
    either right or left. This will bring the final look closer to the more popular
    chat apps, where the texts of other participants are usually positioned to the
    right of the flow, whereas our own are positioned to the left.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your preview should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The message view](img/B04653_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That does it for a very basic chat interface. Now, let's go ahead and add some
    logic to it all.
  prefs: []
  type: TYPE_NORMAL
- en: The ChatService function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to communicate with the WebSocket server, we will create a service
    that will allow us both to send messages to the server as well as subscribe to
    the events sent by it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start off, create a file named `js/services.js` and insert the following
    code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `service` here exposes the following two core features to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Emit`: This allows the user to broadcast a message to the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`On`: This allows the user to subscribe to the following two events:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserConnectedEvent`: This is fired whenever a new user connects to the app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MessageReceivedEvent`: This is fired whenever a new message is received from
    the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The passing of messages in the preceding code is implemented by means of the
    `$rootScope` function, which already provides us with a robust mechanism. We merely
    wrap it up in order to meet our own ends.
  prefs: []
  type: TYPE_NORMAL
- en: 'To integrate `service` into our app, add the following to the `index.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, list the chat services as a dependency in the `js/app.js` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Adding WebSockets to the mix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the service is connected to the app, let''s bring WebSockets into
    play to actually make it do something fun! To start off, add the following to
    the `index.html` file in order to import the `socket.io` client library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Replace the `x.x.x` in the preceding code with whatever version of `socket.io`
    you are running on your server (if you are not sure, check the `package.json`
    file in the chat server project that we created earlier).
  prefs: []
  type: TYPE_NORMAL
- en: 'This will give us the global object named `io`, which can be used to interact
    with a WebSocket server. Global objects are evil. Very evil. So, as a matter of
    good principle, we will make the best effort to contain it in our chat service,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'What we have done here is pretty straightforward and can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We listen for events from the WebSocket server using the `on` function and simply
    pass these events along to the `$rootScope` function. By doing so, the other parts
    of our app can register listeners and callbacks for these events in order to act
    on them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the `emit` function of the socket in order to send messages back to the
    server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This concludes the hard logic behind our app. Next, we will tie it all together
    by making our chat view dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the chat view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever you or another connected user submits something to the chat, you want
    the chat display to show the new message. If that sounds like a job for `ng-repeat`,
    that's because it...well...really isn't.
  prefs: []
  type: TYPE_NORMAL
- en: While `ng-repeat` is a very powerful directive on its own, it can unfortunately
    incur severe performance penalties as data sets grow over time, especially when
    it comes to mobile devices, where processing power is limited. To work around
    this, Ionic offers another directive to render dynamic datasets—`collection-repeat`.
    Without much intervention from our side, `collection-repeat` will do a lot of
    the really heavy lifting when it comes to working with collections.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, before we can do this, we will need to add a controller for our chat
    view. Go ahead and create the `js/app.controllers.js` file. Import it and add
    it as a dependency in `index.html` and `app.js` respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s add some basic content to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s bind the controller to our app''s chat state. In `app.js`,
    make sure that your state definition looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now ready to start adding some serious functionality to our app! Go
    ahead and add the following to your controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, modify the `templates/app-chat.html` file in order to connect to the
    controller data, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are bringing the fabled `collection-repeat` function into play
    here with pretty much no configuration needed! The app will now respond both to
    our own message sending events as well as others' messages that are coming in
    from the server. Fire it up in your preview and try it out!
  prefs: []
  type: TYPE_NORMAL
- en: Going further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, to keep things simple, we simulated our chat app on the emulator. However,
    we could have of course had even more fun if we actually got it running on a set
    of physical devices. If you are the kind of person with so much money that you
    can pick up a bunch of iPhones and Android devices on your way back from the grocery
    store (or just have a lot of friends with the same devices), why not make it a
    fun project of hosting your chat server on an actual **VPS** (**Virtual Private
    Server**) and connect the project to it? You and your friends can discuss plans
    for world domination in your very own app!
  prefs: []
  type: TYPE_NORMAL
- en: The VPS that you want to use is up to you, but we can think of several options
    for you to consider. Check out [https://www.digitalocean.com/](https://www.digitalocean.com/)
    and [https://www.linode.com/](https://www.linode.com/) to fire up your backend.
    There are also several more specific solutions that enable you to fire up your
    backend with less configuration such as **Heroku**. Many of the prominent services
    make it extremely easy to configure the more crucial elements of server functionality
    such as DNS.
  prefs: []
  type: TYPE_NORMAL
- en: Once you configure your VPS and run your chat server, change the target domain
    in your app from localhost to the domain/IP of your server. Invite your friends
    and chat away! However, in order to make sure that the integrity of your users
    is protected, make sure that you enable communication only over HTTPS for actual
    live applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored how we can incorporate real-time functionality
    into an Ionic app using `socket.io`. In the process of doing so, we built a simple
    chat application, which can be expanded later in order to learn advanced real-time
    features.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll take a look at how to set up WebSocket communication
    through the app in order to subscribe to dynamic notifications from a server.
    We will elaborate on how this helps us develop truly dynamic applications such
    as chat apps.
  prefs: []
  type: TYPE_NORMAL
