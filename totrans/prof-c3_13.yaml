- en: Chapter 13. Code Optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about building code and the processes that are related to every
    step of creating the code in general. There are a few general stages of this process
    and we will study how we can optimize code at each of these steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Code optimization at each step of creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to keep code in your repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to optimize SASS code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use short forms in CSS/SASS code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to prepare code for production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self-optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The optimization process starts when you start writing code. Awareness of what
    you can optimize and how it should appear during writing a code is essential.
    After the writing process, when you start optimization, it can be pretty hard
    to refactor and restructure the code. But it is easy to build code and automatically
    append optimization processes. Which of these processes can you perform during
    the writing of code?
  prefs: []
  type: TYPE_NORMAL
- en: Usage of short forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Omit usage of `!important`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Omit usage of IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few steps before you push code live
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the code creation process, there are a few repeatable steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing code live
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The processes are sometimes repeatable, especially when they are related to
    projects built in *The Lean Startup* methodology by Eric Ries and projects with
    multiple stages. You need to remember these few steps before you push code live:'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether short forms are used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check whether elements/declarations are duplicated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check whether elements/declarations are used in HTML (zombie selectors)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the appearance of `!important` (if possible, try to omit them)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check whether the code is minified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This list is pretty basic. In the next sections, we will run through the optimization
    processes and usage, for checking all the possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Using short forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Short forms are very helpful to minify code during writing and after the building
    process. Using short forms in CSS, you can save a lot of characters and make the
    code slimmer. Let's look at an overview of short forms.
  prefs: []
  type: TYPE_NORMAL
- en: Short forms of paddings/margins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'How many times have you been writing paddings and margins with full forms?
    How many times does it happen that you are reading somebody''s code and seeing
    that they are not using short forms for margins and paddings makes you nervous?
    Yes! It can make you nervous because it is a waste of CSS! Let''s start with simple
    description of an element''s padding in SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It will give you CSS code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a short way to describe it in CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In general, padding can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can do the same thing with margins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It will give you CSS code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a short way to describe it in CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In general, the margin can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled to CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there are two pairs of values. When the value of the top margin/padding
    is repeated in the bottom value and the left value is equal to the right value,
    you can use the short version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When compiled to CSS, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the version is minified and finally based on the pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Short forms of borders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start with the basic description of a border, and then we can extend
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This class will create a border around the box, which will be solid with `10px`
    width and its color will be black. So, let''s create a class that will include
    all the borders (top, right, bottom, and left) with a defined style color and
    width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'So if you want to make this a little bit shorter, you can use a mix of global
    definitions of shorten border. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And directions. The code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a way to describe style/width/color in the same way we define padding
    and border:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s gather information about `border-radius`. The global definition
    of border radius is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Describe each corner in another line and another value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the preceding code can be described this way to make it shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Short forms in fonts styling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Fonts are described in every paragraph header link. As you can see, it''s good
    to use shorthand for so many repeated occurrences in the code. Here, we have a
    simple description of the font and line height of a sample element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use a short form based on pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'With this short form, our five lines in SASS (four lines in CSS) are changed
    to one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'After compilation, the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Short forms in backgrounds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Background is one of the most commonly used CSS features. The main use of background
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s a lot of code! The short form is described in this order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to describe our element with this short form, we just need to make
    it this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'After SASS compilation in CSS, we will get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Checking repetitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are creating the code in CSS, you need to be aware of the repetitions
    of your code. The code can look a little bit weird for professional developers,
    but we can treat it as a great sample of the code review process. Let's analyze
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the repetitions are commented and we will create a general
    class now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need to append small changes in the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'To minify it in SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s another method to deal with repetitions without changing the markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s gather the repetitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a value that will be overwritten in custom element `.h3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s describe the selectors and overwrite the values in separate selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change it to SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s do the same with `@extend`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The process of checking the repetitions is easy when you are creating the code
    yourself, but it can be harder when you are working with other developers or when
    you are working on a project which was started by somebody else. This process
    makes the code shorter, so it can be treated as a process of code optimization.
    With these techniques, you can append changes to your code.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the process of CSS code optimization. With this
    knowledge, you can minify your code and you can think about optimization processes
    during the creation of code. This knowledge will make you a more aware frontend
    developer who knows how code can be minified in a jiffy.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the final automatizations that you can
    use in CSS and frontend projects!
  prefs: []
  type: TYPE_NORMAL
