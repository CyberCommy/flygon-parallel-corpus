- en: As a Service Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discusses various types of **Anything as a Service** (**XaaS**),
    which includes **Infrastructure as a Service** (**IaaS**), **Platform as a Service**
    (**PaaS**), **Integration Platform as a Service** (**iPaaS**), and **Database
    as a service** (**DBaaS**), and everything you need to factor in when exposing
    infrastructure or platform elements as services. In cloud-native mode, your application
    might be integrating with social media APIs or PaaS APIs, or you could be hosting
    services that will be used by other applications. This chapter covers the concerns
    you need to deal with when building your own XaaS model.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Architecture and design concerns when building your own XaaS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecture and design concerns when building your mobile application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various backend as a service providers—database, authorization, cloud storage,
    analytics, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud computing has pioneered the distribution model for elastic, pay-as-you-go,
    on-demand IT hosted services. Any part of the IT delivered as a service is loosely
    covered under the broad theme of cloud computing.
  prefs: []
  type: TYPE_NORMAL
- en: Within the cloud computing theme, depending on the type of IT service, there
    are various terms for specific services of the cloud. Most of the terms are different
    variations of the term XaaS, where X is a placeholder that can be changed to represent
    multiple things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the most common delivery models for cloud computing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IaaS**: When the computing resources (compute, network, and storage) are
    provided as a service to deploy and run operating systems and applications, it
    is termed as IaaS. If the organization does not want to invest in building data
    centers and buying servers and storage, this is a right choice of service to take
    advantage of. **Amazon Web Services** (**AWS**), Azure, and **Google Cloud Platform**
    (**GCP**) are leading examples of IaaS providers. In this model, you are responsible
    for the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing, patching, and upgrading all operating systems, applications, and related
    tools, database systems, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a cost optimization perspective, you will be responsible for the bringing
    the environment up and down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning of compute resources is almost instantaneous. The elasticity of
    the compute resources is one of the biggest selling factors for IaaS vendors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically, the server images can be backed up by the cloud provider, so backup
    and restore is easily managed when using a cloud provider.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PaaS**: Once the compute, network, and storage have been sorted out, next
    comes the requirement for a development platform and related environment to build
    applications. A PaaS platform provides services across the **software development
    life cycle** (**SDLC**). Services such as runtime (such as Java and .NET), database
    (MySQL and Oracle), and web servers (such as Tomcat and Apache web server) are
    considered to be PaaS services. The notion is that the cloud computing vendor
    will still manage the underlying operational aspects of runtime, middleware, OS,
    virtualization, servers, storage, and networking. In this model, you will be responsible
    for the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The developer's concern will be limited to managing applications and the associated
    data. Any change/updates to the application need to be managed by you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstraction of the PaaS is at a high level (messaging, Lambda, container, and
    so on), allowing the team to focus on the core competency of working for customer
    needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SaaS**: Next comes the model where you rent the entire application. You are
    not required to build, deploy, or maintain anything. You subscribe to the application,
    and the provider will provide an instance of the application for you or your organization
    for use. You can access the application over the browser or can integrate with
    the public APIs provided by the provider. Services such as Gmail, Office 365,
    and Salesforce are examples of SaaS services. In this model, the provider provides
    a standard version of the feature/functionality for all the tenants with very
    limited customization capabilities. The SaaS vendor might provide a security model
    where you can integrate your **Lightweight Directory Access Protocol** (**LDAP**)
    repository with the vendor using **Security Assertion Markup Language** (**SAML**)
    or OAuth models. This model works very well for standard software where the need
    for customization is low. Office365 and Salesforce are some of the biggest poster
    children of SaaS vendors:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c2e2b5bf-878a-4c64-995b-c57c9611f9b7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you are building your organization and its application portfolio, you might
    subscribe to different vendors for various types of services. Now, if you are
    trying to build the next Facebook or Instagram or Uber, you will need to address
    specific architecture concerns to tackle the varied needs of the billions of users
    out there.
  prefs: []
  type: TYPE_NORMAL
- en: Key design concerns when building XaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s review the key design concerns that need to be addressed when building
    XaaS and providing those services for consumption:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multi-tenancy**: When you start designing your service for public consumption,
    one of the first requirements is the ability to support multiple tenants or customers.
    As people start signing up to use your service, the service needs to support be
    able to provide a secure boundary for customer data. Typically, SaaS is a good
    candidate for the multi-tenancy design concerns. For every tenant, the data and
    application workload might need to be partitioned. Tenant requests are within
    the confines of the tenant data. To design multi-tenancy within your application,
    you will need to look at the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Isolation**: Data should be isolated between the tenants. One tenant should
    not be able to access any other tenant''s data. This isolation is not only restricted
    to the data, but can be extended to underlying resources (including compute, storage,
    network, and so on) and operational processes (backup, restore, DevOps, admin
    functionality, application properties, and so on) marked for each tenant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost optimization**: The next big concern is how to optimize the design to
    lower the overall cost of the cloud resources and still address all kinds of customers.
    You can look at multiple techniques to manage your costs. For example, for free-tier
    customers, you can have a tenancy model based on the tenant ID. This model allows
    you to optimize the database licenses, overall compute and storage costs, DevOps
    processes, and so on. Similarly, for large customers, you can even look at dedicated
    infrastructure to provide a guaranteed **service-level agreement** (**SLA**).
    There are a number of small companies that do millions worth of business from
    a handful of large customers. On the other hand, you have large companies that
    cater to millions of small customers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DevOps pipeline**: If you end up building multiple instances of the same
    service for customers, you will encounter problems when customers demand specific
    features for them. This soon leads to code fragmentation and becomes an unmanageable code
    problem. The question becomes how to balance the ability to roll out new features/functionality
    for all customers and still able to provide the level of customization or individuality
    required by each of them. The DevOps process needs to support multi-tenancy isolation
    and maintain/monitor each tenant process and database schema to roll out the changes
    across all the service instances. Unless DevOps is streamlined, rolling out changes
    across the service can become very complex and daunting. This all leads to increased
    cost and lower customer satisfaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: One of the basic requirements is to be able to sign up new
    customers and scale up the services. As the scale of customers grows, the expectation
    is cost/service or overall service cost should fall. Unless our service is built
    keeping in mind the preceding three types of tenants, the service will not be
    able to scale and provide an artificial moat around your business model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, when you get down to the task of designing your multi-tenancy service,
    you have the following design options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Database per tenant**: Every tenant has its own database. This model provides
    complete isolation to tenant data.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared database (single)**: All tenants are hosted within a single database
    and identified by a tenant ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared database (sharded)**: In this model, a single database is sharded
    into multiple databases. Typically, the shard key is derived from hash, range,
    or list partitioning. The tenants are spread across the shard and are accessible
    by a combination of tenant ID and shard:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0cdc78ca-0629-4b6a-a86f-80d7ba247228.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Faster provisioning**: When building an XaaS model, another key concern is
    the ability to provision new customers, meaning customer onboarding should be
    self-service. Upon signing up, the customer should be immediately able to start
    making use of the service. All this requires a model where a new tenant can be
    provisioned effortlessly and very quickly. The ability to provide the underlying
    compute resources, any database schema creation, and/or specific DevOps pipelines
    should be very efficient and fully automated. From a customer experience point
    of view also, the ability to provide a running version of the application to the
    user helps. For any service that is aiming to be mass market, faster provisioning
    is given. But if you are providing a very specific service and that requires integration
    with enterprise customer on-premises data centers, then it may not be possible
    to provide split-second provisioning. In that case, we should build tools/scripts
    that can address some of the common integration scenarios to onboard the customer
    as soon as possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auditing**: Another key concern around security is the ability to audit for
    the access and changes to the service and underlying data store. All of the audit
    trail needs to be stored for any breaches or security issues or compliance purposes.
    There will be the requirement for a centralized audit repository that keeps track
    of the events being generated across the system. You should be able to run analysis
    on top of the audit repository to flag up any abnormal behavior and take preventive
    or corrective actions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/368b83b4-4d0c-4cf3-8615-ca7ed56c3c74.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can make use of Lamda architecture that uses both real-time streaming coupled
    with models generated from historical data to flag abnormal behavior. Some of
    the public cloud providers provide this as a service.
  prefs: []
  type: TYPE_NORMAL
- en: '**Security**: Depending on the nature of the service, the tenants need to have
    secure access to their data. The service needs to incorporate the basic requirement
    of authentication and authorization. All the customers have a secure key and passphrase
    to connect and access their information. There might be requirements for enterprise
    access and multiple users. In that case, you might have to build a delegated administration
    model for enterprise(s). You can also use a security mechanism such as OAuth (through
    Google, Facebook, and so on) to enable access to the service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data storage**: Your service might require storage of different types of
    data; depending on the type of the data, the storage requirements will be different.
    The storage requirement typically falls into the following areas:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relational data storage**: Tenant data might be relational and we talked
    of the various multi-tenant strategies to store that data. Tenant-specific application
    configuration data might need to be stored in a relational model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NoSQL storage**: Tenant data might not be relational all the time; it might
    be a columnar, key value, graph, or document-oriented model. In that case, appropriate
    data storage needs to be designed and then constructed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blob storage**: If your service requires Blob storage or storage of binary
    data, then you will require access to object file storage. You can make use of
    Blob storage from the likes of AWS or Azure to store your binary files:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9f6701a3-550b-4ae4-922d-9815cbeeb589.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Monitoring**: The entire application stack needs to be monitored. You might
    sign up customers and guarantee them stringent SLAs. In that scenario, monitoring
    is not just about service or system availability but also about any cost penalty
    and loss of reputation. At times, individual components might have redundancy
    and high availability but at a stack level, all the failure rates can be compounded
    to reduce the overall availability of the stack. Monitoring resources across the
    stack becomes important and key to managing the availability and defined SLAs.
    Monitoring encompasses both hardware and software. There is a need to detect any
    abnormal behavior and automate the corrective response. Typically, the ability
    to monitor and automate the healing takes multiple iterations to mature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error handling**: One of the key aspects of the service will be the ability
    to handle failures and how to respond to the service consumer. Failures can occur
    at multiple levels; a data store not being available, tables getting locked, queries
    getting timed out, service instances going down, session data being lost, and
    so on are some of the issues you will encounter. Your service needs to be robust
    to handle all these and then some more failure scenarios. Patterns such as CQRS,
    circuit breaker, bulkheading, reactive, and so on will need to be incorporated
    into your service design.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated build/deployment**: As the number of service consumers goes up,
    the ability to roll out new features and fix bugs will require an automated build
    and deployment models. This is akin to changing the tires of a car while it is
    moving. The ability to upgrade the software and release patches / security fixes
    without any impact on the calls from the consumer is a delicate art and takes
    time to master. Earlier, we could look for some system downtime during the night
    when the traffic comes down, but with customers from around the world, there is
    no longer such a time. Blue-green deployment is a technique that can help in releasing
    new changes with minimum impact to the customers and reduction of overall risk:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/11b5d90d-def5-4d0b-a9bb-186ed8175b75.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Customer tiers**: Another key concern is how to build and price your service
    for different sets of customers. Companies have been creating multiple tiers to
    address the needs of myriad customers. These needs help the companies decide the
    customer tier and then start pricing the service cost. These factors are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compute**: Limiting the number of calls made by hour/day/month. This allows
    you to predict the capacity required by the tenant along with the networking bandwidth
    requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage**: Another parameter is the storage required for the underlying data
    store. This allows you to balance database shards appropriately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: For enterprise customers, there might be separate requirements
    for integration with enterprise security models using SAML. This might require
    additional hardware and support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SLAs/support model**: This is another area which needs to be accounted for
    when deciding the customer tiers. Support models—community, on-call, dedicated,
    and so on—come with different cost structures. Depending on the target market—consumer
    or enterprise—you can evaluate which of the support models will work best for
    your service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feature flags**: When building an XaaS model, one of the key questions is
    how to deal with code changes, feature releases, and so on for multiple tenants.
    Should I have multiple code branches for each customer or should I use one code
    base across all the customers? If I use one code base, how do I release features/functionality
    that are specific to one tenant? If your target market is 8-10 customers, then
    having specific code branches for each customer is a potential viable option.
    But if the target market is hundreds of customers, then code branching is a bad
    option. Code branching is usually a bad idea. To handle differences in features/functionality
    for different customers or manage new upcoming features not ready for release,
    a feature flag is a great way to handle such requirements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3f68ffe8-fb34-4ffb-a032-d4fc1fc5141b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Feature flags allow you to release code in production without immediately releasing
    the feature for the users. You can use feature flags to provide/restrict certain
    functionalities of your application to different customers based on what level
    of services they have bought. You can also use feature flags in conjunction with
    A/B testing to release new features/functionality to a part of user to check their
    response and functional correctness before rolling out to the wider audience.
  prefs: []
  type: TYPE_NORMAL
- en: '**Self-service portal**: A key aspect of your service will be a self-service
    portal where the users can sign up, provision the service, and manage all aspects
    of the application data and service. The portal allows users to manage enterprise
    aspects such as authentication/authorization (using a delegated admin model),
    monitor the provisioned service for availability, set up custom alarms/alerts
    on the key metrics of the service, and decipher any issues that might be cropping
    on the server side. A well-crafted portal helps increase overall customer confidence
    in the service performance. You can also build advanced monitoring and analytics
    services for your paid customers based on the customer tiers. Remember, anybody
    can copy the features/functionality your service provides, but building additional
    value-added features around your service becomes a distinct differentiator for
    your service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software development kits** (**SDKs**): As one of the key measures of enabling
    user adoptability of your service, you might want to build and provide SDKs for
    your consumers. This is not a must-have, but a desirable feature, especially when
    a customer integrates with your service at an application code level on their
    side. In this case, SDKs should provide support for multiple languages and come
    with good examples and documentation to help onboard the developers on the customer
    side. If your application or service is complex, having an SDK that explains how
    to invoke your services or integrate within existing services (such as SAML, OAuth,
    and so on) becomes key to faster adoptability of your service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Documentation and community support**: One more aspect of service adoptability
    is the level of documentation available along with community support for the product/service.
    Documentation should minimally cover the following points:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to sign up for the service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to invoke and use the service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to integrate the service within the customer landscape and the SDKs available
    for integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to bulk import or bulk export your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to securely integrate for authentication/authorization with enterprise LDAP
    / **Active Directory** (**AD**) servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next thing you need to think of is building an active community support.
    You need to provide appropriate forums for people to interact. You need to have
    active **subject matter expert** (**SME**) to answer questions from people across
    forums (internal and external). The likes of Stack Overflow get lots of questions;
    you should set up alerts, monitor threads, and help answer questions/queries from
    users. An active community is a sign of interest in your product. Lots of organizations
    also use this forum to identify early adopters and seek their feedback in the
    product roadmap.
  prefs: []
  type: TYPE_NORMAL
- en: '**Product roadmap**: A good product might start with a **minimum viable product**
    (**MVP**) but it usually backed a solid vision and product roadmap. As you receive
    feedback from the customer, you can keep on updating the product roadmap and reprioritizing
    the backlog items. A good roadmap indicates the strength of the product vision.
    When you meet external stakeholders—customers, partners, **venture capitalists**
    (**VCs**), and so on—the first thing they ask for is a product roadmap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A roadmap typically consists of strategic priorities and planned releases along
    with high-level features and plans for maintenance/bug-fixing releases, among
    others:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2bb52c14-3aa7-4d57-b65a-fc95e8abc652.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have covered some of the design concerns that need to accounted for when
    trying to build your XaaS model. We have covered the basics for each of the concerns.
    Each of the concerns warrants a minimum of one chapter of its own. Hopefully,
    it gives you a view into various other non-service aspects that need to be accounted
    for when you are trying to build your business model around XaaS. The actual design
    and development of the service is based on the concerns we have covered from [Chapter
    2](8a0a7cae-4aaa-460d-a760-59d0ffde9b48.xhtml), *Writing Your First Cloud-Native
    Application*, onward.
  prefs: []
  type: TYPE_NORMAL
- en: Integration with third-party APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we saw the design concerns when building your own service
    provider. In this section, we will see how, if you are trying to build a consumer
    application, to take advantage of the REST services provided by third-party companies.
    For example, you are trying a build a beautiful mobile application, your core
    competency is building visual design and creating mobile applications. You do
    not want to get burdened with managing all the complexities that go with hosting/managing
    the application data. The application will require services that include storage,
    notifications, location, social integration, user management, chat functions,
    and analytics, among others. All these providers are bunched together under the
    umbrella of **Backend as a Service** (**BaaS**) providers. There is no need to
    sign up with a single vendor for these services; you can pick and choose which
    providers fit your business needs and budgets. Each of the providers typically
    runs a freemium model, that provides a certain number of API calls free per month,
    and a commercial model, where you are charged. This also falls under the umbrella
    of building serverless applications, where you, as a developer, do not maintain
    any servers running any software.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this regard, we will look at the third-party services that will be required
    to build a full-fledged serverless application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication services**: One of the first things any application requires
    is the ability to sign up or register users. A registered user allows the opportunity
    for application developer to provide personalized services and know his likes/dislikes.
    This data allows him to optimize the user experience and provide the necessary
    support to get maximum value out of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Authentication as a service focuses on the encapsulation of business functionality
    around user authentication. Authentication requires an identity provider. This
    provider can be mapped to your application or enterprise or you can use some of
    the consumer companies such as Google, Facebook, Twitter, and so on. There are
    multiple authentication service providers available, such as Auth0, Back&, AuthRocket,
    and so on. These providers should provide, as a minimum, the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multi-factor authentication** (**MFA**) (including support for social identity
    providers): One of the primary requirements, the provider should provide identity
    provider instance where the application can manage the users. The functionality
    includes user registration, two-factor authentication either by SMS or by email,
    and integration with social identity providers. Most of the providers make use
    of OAuth2/OpenID model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User management**: Along with the MFA, the authentication provider should
    provide user interface that allows for user management that has signed up for
    the application. You should be able to extract the emails and phone numbers for
    sending push notifications to the customers. You should be able to reset the user
    credentials and protect resources either by using security realms or adding users
    to certain predefined roles based on the needs of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins/widgets**: Last but not least, the provider should provide widgets/plugins
    that can be embedded in the application code to provide user authentication as
    a seamless service:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/12f53ae6-2636-4c9d-a7cd-b48af79c4772.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Serverless services**: Gone are the days when you needed to manage application
    servers and the underlying VM to deploy your code. The level of abstraction has
    moved to what is called the business function. You write a function that takes
    as input a request, processes the same, and outputs the response. There is no
    runtime, no application server, no web server, nothing. Just a function! The provider
    will automatically provision the runtime to run that function, along with the
    server. You, as developer, need not worry about anything. You are charged on a
    combination of the number of calls to the function and how long the functions
    ran, meaning, during lean times, you are incurring zero cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the function, you can access the data store and manage user- and application-specific
    data. Two functions can talk to each other using a queue model. Functions can
    be exposed as APIs using the API gateway of the provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the public cloud vendors have a version of the serverless model—AWS has
    Lamda, Azure has Azure Functions, Google has Cloud Functions, Bluemix has Openwhisk,
    and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0c0629b-0fbf-47fd-914b-abd93b959c75.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Database/storage services**: An application typically requires storage to
    manage the customer data. This can be as simple as user profile information (such
    as photo, name, email ID, password, and application preferences) or user-specific
    data (such as messages, emails, and application data). Depending on the type of
    data and the format in which it is stored, an appropriate database/storage service
    can be chosen. For binary storage, we have services such as AWS S3 and Azure Blob
    Storage for all kind of binary files. For storing data in JSON format directly
    from the mobile application, you have cloud providers such as Google Firebase,
    or you can use MongoDB as a service ([www.mlab.com](https://mlab.com/)). Multiple
    database models are provided by AWS, Azure, and GCP that can be used to manage
    all kinds of different storage needs. You might need to use AWS Lambda or Google
    Cloud Functions to be able to access the store the data. For example, if the application
    request needs to do some validation or processing before storing the data, you
    can write a Lambda function, that can be exposed as an API. The mobile application
    accesses the API that invokes the Lambda function, where, after request processing,
    data gets stored in the data store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notification services**: An application typically registers the user and
    device to be able to send notifications to the device. AWS provides a service
    called Amazon **Simple Notification Service** (**SNS**) that can be used to register
    and send notifications from your mobile application. AWS service supports push
    notifications to iOS, Android, Fire OS, Windows, and Baidu-based devices. You
    can also send push notifications to macOS desktops and **voice over IP** (**VoIP**)
    applications on iOS devices, emails, and SMS messages to users across over 200
    countries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analytics services**: Once customers start adopting the application, you
    will want to know what features of the application are being used, where the users
    are facing issues or challenges and where are the users dropping off. To understand
    all this, you will need to subscribe to an analytics service that allows you to
    track the user actions which are then collated to a central server. You can go
    to that central repository and get an insight into the user activities. You can
    use this insight into customer behavior to improve the overall customer experience.
    Google Analytics is a popular service in this area. You track users'' overall
    multiple parameters including location, browser used, device used, time, session
    details, and so on. You can also enhance it by adding custom parameters. The tools
    typically provide a certain amount of canned reports. You can also add/design
    your own reporting templates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location services**: Another service used by applications is the location
    service. Your application might require features that require the functionality
    to be curated for a given context (in this case, location can be one of the context
    attributes). Context-aware functionality allows you to personalize the features/services
    to the needs of the end customer and help to improve the overall customer experience.
    The Google Play service location API provides such a functionality. There is a
    complete set of services/applications around the location services. For example,
    companies such as Uber, Lyft, and Ola (India) are great examples of business cases
    that are built around location services. Most logistics businesses (especially
    the last mile ) make use of location services for route optimization and delivery,
    among other things.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social integration services**: Your application might warrant social integration
    with popular social networks (Facebook, Twitter, Instagram, and so on). You will
    need to be able to access the social feeds of the logged-in user, post on their
    behalf, and/or get access to their social network. There are multiple ways to
    access these social networks. Most of these networks provide access for other
    applications and expose a set of APIs to connect to them. Then there are aggregators
    that will allow you to provide integration with a set of social networks out of
    the box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advertisement services**: Another key service used by applications, especially
    mobile applications, is to serve advertisements to the user. Based on the application
    model (free/paid), you need to decide the model for monetization of your application.
    To serve advertisements (called in-app advertising) to your users, you will need
    to sign up with the advertising network providers and invoke their API service.
    Google''s AdMob service is one of the pioneers in this area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are numerous other service providers you may want to look at when building
    your application. We have covered the key prominent categories. Based on the needs
    of your application, you may want to search for providers in that particular area
    of requirement. I am sure there will be someone already providing the service.
    There are some comprehensive providers called BaaS. These BaaS providers typically
    provide multiple services for usage and reduce the overall integration effort
    from the application side. You do not have to deal with multiple providers; instead,
    you work with one. This one provider takes care of your multiple needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'BaaS as a market segment is highly competitive. With multiple providers competing,
    you will find lots of mergers and acquisitions also in this segment. In recent
    times, the following have occurred:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parse**: Acquired by Facebook. Parse provides a backend to store your data,
    the ability to push notifications to multiple devices, and a social layer to integrate
    your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GoInstant**: Acquired by Salesforce. GoInstant provides a JavaScript API
    for integrating real-time, multi-user experiences into any web or mobile application.
    It''s easy to use and provides the full stack needed, from client-side widgets
    to publish/subscribe messaging to a real-time data store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are both vertical and horizontal BaaS providers that provide services
    or APIs around a specific domain. There are providers in the e-commerce area,
    gaming domain, analytics domain, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to check the credibility of the provider before you sign up. Remember,
    if the provider folds, your application will also be in trouble. Make sure you
    understand their business model, their product roadmap, their funding model (especially
    for start-ups), and how much they listen to the customers. You want to hitch a
    ride with partners who will take you all the way.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered some of the key concerns when trying to build your
    XaaS provider. We also covered the other side of the spectrum, where we saw the
    typical services that are available to build an application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover API best practices, where we will see how
    to design consumer-centric APIs that are granular and functionality-oriented.
    We will also discuss the best practices in API design concerns, such as how to
    identify the resources that will be used to form the API, how to categorize the
    APIs, API error handling, API versioning, and so on.
  prefs: []
  type: TYPE_NORMAL
