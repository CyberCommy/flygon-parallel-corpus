- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: High performance on a platform such as Node.js means knowing how to take advantage
    of every aspect of your hardware and helping memory management act at its best
    and correctly decide how to architect a complex application. Do not panic if your
    application starts consuming a lot of memory. Instead, spot the leak and solve
    it fast. Better yet, monitor and stop it before it becomes an issue.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Introduction and Composition"), *Introduction
    and Composition*, introduces the subject, emphasizing performance analysis and
    the importance of benchmarking. It''s about splitting applications into several
    smaller components, reducing the complexity of each component to a manageable
    level for the developers involved in the application. Here, you understand the
    importance of developing methodologies to break complexity into smaller and reusable
    modules that can more easily be analyzed and exchanged with other new and better
    modules during the course of the application''s life cycle.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Development Patterns"), *Development Patterns*,
    is about good programming patterns that help avoid performance penalties or help
    find them. You''ll value the importance of carefully choosing techniques and patterns
    that are simple, and avoid future problems. With this in mind, you''ll better
    understand how the language works, the importance of knowing the event loop, how
    asynchronous programming works best, and some of the first-class citizens of the
    language—streams and buffers.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Garbage Collection"), *Garbage Collection*,
    covers GC, its importance, and its behavior. Here, you get to understand V8 memory
    management, dead memory, and memory leaks. You also learn how to profile an application
    and spot memory leaks caused by bad programming where a developer hasn''t deferenced
    objects correctly.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. CPU Profiling"), *CPU Profiling*, is about
    profiling the processor and understanding when and why your application hogs your
    host. In this chapter, you understand the limits of the language and how to develop
    applications that can be divided into several components running across different
    hosts, allowing better performance and scalability.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Data and Cache"), *Data and Cache*, explains
    externally stored application data and how it can affect your application''s performance.
    It''s about data stored locally in the application, the disk, a local service,
    a local network service or even the client host. In this chapter, you get to know
    that different types of data storage methods have different penalties, and these
    must be considered when choosing the best one. You learn that data can be stored
    locally or remotely and access to the data can be—and should be—cached sometimes,
    depending on the importance of the data.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Test, Benchmark, and Analyze"), *Test, Benchmark,
    and Analyze*, is about testing and benchmarking applications. It''s also about
    enforcing code coverage to avoid unknown application test zones. Then we cover
    benchmarks and benchmark analytics. You get to understand how good tests can pinpoint
    where to benchmark and analyze specific parts of the application to allow performance
    improvements.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Bottlenecks"), *Bottlenecks*, covers limits
    outside the application. This chapter is about the situations when you realize
    that the performance limit is not because of the application programing but external
    factors, such as the host hardware, network or client. You''ll become aware of
    the limits that external components can impose on the application, locally or
    remotely. Moreover, the chapter explains that sometimes, the limits are on the
    client side and nothing can be done to improve the current performance.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The only software needed is Node.js. Some modules might need compilation, so
    a Linux or OS X operating system is easier for testing of the examples. No specific
    hardware is needed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一需要的软件是Node.js。一些模块可能需要编译，因此Linux或OS X操作系统更容易测试示例。不需要特定的硬件。
- en: Who this book is for
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书适合谁
- en: The book is intended for those with a basic Node.js background and those in
    need of a more in-depth understanding of this platform. Maybe, you're comfortable
    with the language and perhaps you know that it has a garbage collector, but you
    never really understand how it works and how it fails to work depending on the
    way you use the language. Basic language understanding and solid experience are
    required.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适合那些具有基本Node.js背景并且需要更深入了解这个平台的人。也许，你对这种语言很熟悉，也许你知道它有一个垃圾收集器，但你从来没有真正理解它是如何工作的，以及它如何根据你使用语言的方式而无法工作。需要基本的语言理解和扎实的经验。
- en: Conventions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，您会发现一些文本样式，用于区分不同类型的信息。以下是一些这些样式的示例及其含义的解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter句柄显示如下：“我们可以通过使用`include`指令包含其他上下文。”
- en: 'A block of code is set as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都以以下形式书写：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Now, instead of choosing **Take Snapshot**, just click on the **Load**
    button and choose the snapshots from your disk."'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。您在屏幕上看到的单词，例如菜单或对话框中的单词，会以这种形式出现在文本中：“现在，不要选择**拍摄快照**，只需点击**加载**按钮，然后从磁盘中选择快照。”'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明会以这样的方式出现在框中。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会以这种形式出现。
