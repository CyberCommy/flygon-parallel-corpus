- en: Chapter 7. Building a Spy Police with the Internet of Things Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at several home domestic projects. You can combine
    these projects with the other tools that we have seen in previous chapters. Doing
    so will help you improve your knowledge and also let you develop your own. In
    this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Spy microphone that detects noise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regulating the current of an AC lamp dimmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling access with an RFID card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting smoke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an alarm system using Raspberry Pi Zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring the climate from a remote dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spy microphone that detects noise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will look at a project that we can use in a house to detect
    noise or the level of sound so that we can detect when a person talks in front
    of the house. This project consists of a module that has a microphone, similar
    to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spy microphone that detects noise](graphics/B05170_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Software code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to make a program that can read the analog signal that the module sends
    to the Arduino board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We then download the sketch, and in the following screenshot we have the results
    of the level of sound:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following image we can see the final circuit connection to the Arduino
    Board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Regulating the current of an AC lamp dimmer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to regulate an AC lamp. For so many years
    I''ve wanted to explain and share a project like this, and I''m finally. This
    can be applied to regulate your lamps at home in order to decrease domestic power
    the consumption: the following sections will explain the project in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Hardware requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need the following electronic components:'
  prefs: []
  type: TYPE_NORMAL
- en: H-bridge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 24 AC transformer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two resistors 22k (1 watt)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One integrated circuit (4N25)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One resistor 10k
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One potentiometer of 5k
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One resistor 330 ohms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One resistor 180 ohms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One integrated circuit MOC3011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One TRIAC 2N6073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following circuit diagram, we can see the connections for the dimmer
    from the Arduino board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware requirements](graphics/B05170_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Software code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can now either copy the code inside a file called `Dimner.ino`, or just
    get the complete code from the folder for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have downloaded the sketch we can see the final results. With the
    potentiometer, we can regulate the intensity of the lamp. In our house we can
    have our lamps on whenever we want: maybe we can control them according the ambient
    light of the environment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following images, we will see the different moments of lamp, if we regulate
    the input signal of the potentiometer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following image, we can see the result of regulating the brightness
    of the lamp:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we can see the dimmer of the lamp at its maximum brightness:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling access with an RFID card
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to control access via a door. In the last chapter,
    we saw how to control the lock and the lamps of a house. This project can complement
    the last one as it will enable you to control the opening of a door, a specific
    bedroom door, or lights in other rooms.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this project, we need the following equipment:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading TAGS cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RFID RC522 Module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arduino Board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image shows the RFID tags for reading and controlling the access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware requirements](graphics/B05170_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following figure, shows the RFID card interface for Arduino:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware requirements](graphics/RFID-RC522-pinout.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Software requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to install the `<MFRC522.h>` library, this file can communicate with
    and configure the module for reading the tag cards. This library can be downloaded
    from [https://github.com/miguelbalboa/rfid](https://github.com/miguelbalboa/rfid).
  prefs: []
  type: TYPE_NORMAL
- en: Software code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can now either copy the code inside a file called `RFID.ino`, or just get
    the complete code from the folder for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is the final result when we pass the Tag card in front of the RFID module
    connected to the Arduino, if the code below, it will display the message (Access
    Granted).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this part of the code, we configure the number of cards authorized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Software code](graphics/B05170_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we keep the card on the tag and card that is not registered, it can provide
    the correct access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final result with the complete connections is shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Detecting smoke
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will test an **MQ135** sensor which can detect smoke. This
    could also be used in a home to detect a gas leak. In this case, we will use it
    to detect smoke.
  prefs: []
  type: TYPE_NORMAL
- en: 'In home automation systems, putting all the sensors to detect something at
    home, we measure the real world: in this case we used the MQ135 sensor which can
    detect gas and smoke, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting smoke](graphics/B05170_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Software code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following code, we explain how program and detect smoke using the gas
    sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If it doesn''t detect smoke, it produces the following values, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If it detects smoke the measurements are in range *305* and *320* which can
    be seen in the file as the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final result (with the complete circuit connections) is shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building an alarm system using the Raspberry Pi Zero
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build a simple alarm system with a PIR sensor connected
    to the Raspberry Pi Zero. This is an important project as it can be added to the
    home, including other sensors, in order to monitor it.
  prefs: []
  type: TYPE_NORMAL
- en: Motion sensor with Raspberry Pi Zero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this project we need the Raspberry Pi Zero, a motion sensor PIR, and some
    cables. The hardware configuration for this project will actually be very simple.
    First, connect the **VCC** pin of the motion sensor to a **3.3V** pin on the Raspberry
    Pi. Then, connect the **GND** pin of the sensor to one **GND** pin on the Pi.
    Finally, connect the **OUT** pin of the motion sensor to the **GPIO17** pin on
    the Raspberry Pi. You can refer to the previous chapters to find out about pin
    mapping on the Raspberry Pi Zero board.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the final circuit with the connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Motion sensor with Raspberry Pi Zero](graphics/B05170_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Software code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can now either copy the code inside the folder called `Project1`, or just
    get the complete code from the folder for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The alarm module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will usually have a modules in your home that will flash a light and emit
    sound when motion is detected. Of course you could perfectly well connect it to
    a real siren instead of a buzzer to have a loud sound in case any motion is detected.
  prefs: []
  type: TYPE_NORMAL
- en: To assemble this module, first place the LED in series with the 330 Ohm resistor
    on the breadboard, with the longest pin of the LED in contact with the resistor.
    Also place the Buzzer on the breadboard. Then, connect the other side of the resistor
    to **GPIO14** on the Pi and the other part of the LED to one **GND** pin on the
    Pi. For the Buzzer, connect the pin marked **+** on the buzzer to **GPIO15** and
    the other pin on the Buzzer to one **GND** pin on the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Software code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we go with the coding details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the final circuit showing the connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software code](graphics/B05170_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Central interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First we create a central interface for the app using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Graphical interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now see the interface file, starting with the HTML. We start by importing
    all the required libraries and files for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Monitoring the climate from a remote dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, most smart homes are connected to the Internet, and this allows the user
    to monitor their home. In this section, we are going to learn how to monitor your
    climate remotely. First, we are simply going to add a sensor to our Raspberry
    Pi Zero and monitor the measurements from a cloud dashboard. Let's see how it
    works.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the final connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring the climate from a remote dashboard](graphics/B05170_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exploring the sensor test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the remote dashboard (Dweet.io)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to go to [http://freeboard.io](http://freeboard.io) and create an account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we create a new dashboard to control the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a new data source with the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new pane inside the dashboard and also create a **Gauge** widget for
    the temperature:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will then immediately see the temperature in the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We do the same with the Humidity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We should see the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the remote dashboard (Dweet.io)](graphics/B05170_07_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to build and integrate a modular security system
    based on Raspberry Pi Zero and Arduino boards. There are of course many ways to
    improve this project. For example, you can simply add more modules to the project,
    such as more motion sensors that trigger the same alarm. You can monitor the system,
    even if you are outside of the Wi-Fi network of your home.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to control your system from an
    Android application, and how to integrate a real system from your smartphone that's
    fantastic!
  prefs: []
  type: TYPE_NORMAL
