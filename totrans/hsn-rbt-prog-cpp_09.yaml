- en: Accessing the RPi Camera with OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most exciting things we can do with Raspberry Pi is recognize objects
    and faces by connecting it to an external USB webcam or **Raspberry Pi camera**
    (**RPi camera**).
  prefs: []
  type: TYPE_NORMAL
- en: To process these inputs from the camera, we will use the OpenCV libraries. As
    the installation of OpenCV takes a long time and involves multiple steps, this
    whole chapter will be dedicated to getting you up and running.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will explore the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenCV 4.0.0 on Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling and connecting the RPi camera to RPi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing images and video with the RPi camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading an image using OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi camera module – as of 2019, the latest RPi camera module is called
    **RPi Camera V2 1080P**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Raspberry Pi camera case (mount)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code file for this chapter can be downloaded from [https://github.com/PacktPublishing/Hands-On-Robotics-Programming-with-Cpp/tree/master/Chapter06](https://github.com/PacktPublishing/Hands-On-Robotics-Programming-with-Cpp/tree/master/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenCV 4.0.0 on Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Open Source Computer Vision Library** (**OpenCV**) is an open source computer
    vision and machine learning library. The OpenCV library consists of more than
    2,500 computer vision and machine learning algorithms that can be used to recognize
    objects, detect colors, and track moving objects in real life or in a video. OpenCV
    supports the C++, Python, and Java programming languages, and can run on Windows,
    macOS, Android, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenCV on a Raspberry Pi is a time-consuming and lengthy process.
    There are multiple libraries and files that we have to install along with the
    OpenCV library to make it work properly. The steps to install OpenCV will be performed
    on my Raspberry Pi 3B+ model, which is running Raspbian Stretch. The OpenCV version
    we are going to install is OpenCV 4.0.0.
  prefs: []
  type: TYPE_NORMAL
- en: While installing OpenCV, we will download multiple files. If you live in a big
    house, make sure that you sit near the Wi-Fi router so that the RPi receives good
    signal strength. If the RPi is far away from the Wi-Fi, the download speed may
    be affected and it may take you more time to install OpenCV on your RPi. It took
    me around 3 hours to install OpenCV on my RPi 3B+ with a download speed of around
    500-560 Kbps.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling Wolfram and LibreOffice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using a 32 GB microSD card, Raspbian Stretch will occupy only 15%
    of the storage space, but if you are using an 8 GB microSD card, it will occupy
    50% of the space. If you are using an 8 GB microSD card, you will need to free
    up some space. You can do this by uninstalling some unused apps. Two such apps
    are Wolfram engine and LibreOffice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Uninstalling apps on Raspbian Stretch is easy. You just need to enter a command
    in a Terminal window. Let''s begin by uninstalling the Wolfram engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use the same command to uninstall LibreOffice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After uninstalling both pieces of software, let''s do some cleaning by using
    two simple commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have freed up some space, let's update our RPi.
  prefs: []
  type: TYPE_NORMAL
- en: Updating your RPi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Updating your RPi involves a few simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal window and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Upgrade the RPi by entering the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Reboot the RPi:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once your RPi restarts, open the Terminal window again.
  prefs: []
  type: TYPE_NORMAL
- en: While running certain commands in the Terminal window, you may get a prompt
    that asks you whether you want to continue. In the commands for this process,
    we have already added the `-y` command (at the end of the line), which will automatically
    apply the **yes** command to the prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the cmake, image, video, and gtk packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`cmake` is a configuration utility. Using `cmake`, we can configure different
    OpenCV and Python modules after installing them. To install the `cmake` package,
    enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, to install the image I/O package, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will install the two video I/O packages by typing the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will download and install the **Gimp Toolkit** (**GTK**) packages.
    This toolkit is used for making graphical interfaces for our program. We will
    execute the following commands to download and install the GTK packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Downloading and unzipping OpenCV 4.0 and its contribution repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have installed these packages, we can move on to OpenCV. Let''s begin
    by downloading Open CV 4.0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following command into your Terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Download the `opencv_contrib` repository, which contains some additional modules.
    Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The commands in *step 1* and *step 2* are both single-line commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unzip the `opencv.zip` file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Unzip the `opencv_contrib.zip`file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: After unzipping `opencv` and `opencv_contrib`, you should see the `opencv-4.0.0`
    and `opencv_contrib-4.0.0` folders inside the `pi` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will install Python 3 and some of its support tools. Even though we
    are going to program in OpenCV using C++, it is still a good idea to install and
    link Python packages with OpenCV so that you have the option to write or compile
    Python codes using OpenCV.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Python and its developments tools, type in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After installing the Python packages, we can compile and build OpenCV.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling and installing OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To compile and install OpenCV, we need to go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go inside the `opencv-4.0.0` folder. Change the directory to the `opencv-4.0.0`
    folder using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this folder, create a `build` folder. To do so, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To open the `build` directory, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'After changing the directory to `build`, enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that you copy the two dots, `..`, at the end when entering this command
    in the Terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable all four cores of the RPi, open the `swapfile`file inside the nano
    editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this file, search for the `CONF_SWAPSIZE=100` code and change the value
    from `100` to `1024`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81e9f8e3-b104-4768-b028-a36d9367b641.png)'
  prefs: []
  type: TYPE_IMG
- en: Press *Ctrl* + *O* to save this file. You will get a prompt at the bottom of
    the file, asking you whether you want to save this file. Press *Enter* and then
    press *Ctrl *+ *X* to exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To apply these changes, type in the following two commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To compile OpenCV with all four cores of the RPi, type in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This is the most time-consuming step and it will take anywhere between 1.5 to
    2 hours. If you face any errors while compiling, try compiling with one core.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile with only one core, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Use the preceding two commands only if you encounter an error with the `make
    -j4` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install OpenCV 4.0.0, enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We've now compiled and installed OpenCV. Let's connect it to Python.
  prefs: []
  type: TYPE_NORMAL
- en: Linking OpenCV to Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s follow these steps to link OpenCV to Python:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `python 3.5` folder (`/usr/local/python/cv2/python-3.5`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a1ee0334-dc02-4d84-9c54-683849c73b93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside this folder, you should see a file named `cv2.so` or `cv2.cpython-35m-arm-linux-gnueabihf.so`. If
    the filename is `cv2.so`, you do not need to make any changes. If the filename
    is `cv2.cpython-35m-arm-linux-gnueabihf.so`*,* you have to rename it to `cv2.so`*.* To
    rename this file, change the directory to `python 3.5` by entering the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To rename this file from `cv2.cpython-35m-arm-linux-gnueabihf.so` to `cv2.so`,
    enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Move this file to the `dist-package` folder (`/usr/local/lib/python3.5/dist-packages/`)
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To test whether OpenCV 4.0.0 is linked properly to Python 3, go to the `pi`
    directory by typing `cd ~` in the Terminal window***. ***Next, type `python3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad9421bb-6a69-49b1-99cb-f6da0bd9150d.png)'
  prefs: []
  type: TYPE_IMG
- en: You should see a three-corner bracket. Type `import cv2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To check the OpenCV version, type `cv2.__version__`. If you see `opencv 4.0.0`, this
    means that OpenCV is successfully installed and linked with the Python packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e257f115-e220-444b-9e14-293973b6eca4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type `exit()` and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9fec64e2-9e7f-46bb-8e97-957f02c601bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After installing OpenCV, we need to reset `CONF_SWAPSIZE` back to `100`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `swapfile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Change `CONF_SWAPSIZE` to `100`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/394f4e62-3813-4d41-8430-8b1455a68a90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To apply these changes, enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You have successfully installed OpenCV 4.0.0 on your Raspberry Pi. We are now
    ready to attach the RPi camera to the RPi.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling and connecting the RPi camera to RPi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before connecting the RPi camera to the RPi, we need to enable the Camera option
    from the RPi configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Terminal window and enter `sudo raspi-config` to open the RPi configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Advanced Options and press *Enter* to open it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d7ddf9aa-8152-4cc6-928b-e15964e60851.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Camera option and press *Enter* to open it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d7e4e53a-491f-4a57-9095-254f4638e5a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Yes and press *Enter* to enable the Camera option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be9db14b-36c0-415a-9bbf-4f5e877a4b70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Ok and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5e527a4a-f295-4b17-8607-37dfbc564bb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Exit the RPi configuration and shut down your RPi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While connecting the RPi camera to the RPi, make sure that the RPi is turned
    off.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have finished the setup, let's connect the camera.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the RPi camera to RPi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Connecting the RPi camera to RPi is an easy, but delicate, process. The RPi
    camera has a ribbon wire connected to it. We have to insert this ribbon wire inside
    the camera slot of the RPi, which is placed between the LAN port and the HDMI
    port:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e87cff4c-92e6-4ff5-ab66-a4565df03f24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The ribbon on the RPi camera consists of a blue strip on the front and nothing
    on the back:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75439b70-bb7f-4316-9ed4-1217e5bac8b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we understand the component and the port, let''s start connecting
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Gently lift up the lid of the camera slot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/496b322c-4916-47bb-af90-bccf043aed9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Insert the camera ribbon inside the slot, making sure that the blue tape on
    the ribbon faces the LAN port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the lid to lock the camera ribbon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/536f5eb1-d900-4f7f-be3c-95f1aab69d61.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it—your RPi camera is now ready to take pictures and record videos.
  prefs: []
  type: TYPE_NORMAL
- en: Mounting the RPi camera on the robot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s mount the RPi camera on the robot; you will need a RPi camera case for
    this. A quick search on [amazon.com](http://amazon.com) for `RPi camera case`
    will show the following case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a379ac6-97f9-413e-995e-b5634e7d872c.png)'
  prefs: []
  type: TYPE_IMG
- en: I do not recommend this particular case as it did not fit my RPi camera module
    properly. When the case is closed, the lens of my RPi camera did not properly
    align with the small hole of this camera case.
  prefs: []
  type: TYPE_NORMAL
- en: Since I live in India, I did not find any good RPi camera cases on the Amazon
    India website ([www.amazon.in](http://www.amazon.in)), and the ones that were
    available were expensive. The case I ended up using was from an Indian e-commerce
    website called [www.robu.in](http://www.robu.in), and it cost me only 90 Rs (less
    than $2). Before purchasing a camera case or camera mount from an e-commerce website,
    please check the reviews to ensure that it won't damage your RPi camera.
  prefs: []
  type: TYPE_NORMAL
- en: 'The image of the RPi camera case that I used is shown in the following image.
    I bought this case from an Indian website called [www.robu.in](http://www.robu.in).
    On this website, search for `Camera mount module for Raspberry Pi` to find this
    camera mount:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5edb81df-b762-43f4-8229-f1e7909a64d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Even though this camera mount contains four small nuts and bolts to attach
    the RPi camera to the camera mount, I found that the threading of the nut and
    bolt was inaccurate, and attaching the RPi camera to the camera mount was way
    too difficult. Therefore, I used four small pieces of double-sided tape and attached
    the tape to the holes of the RPi camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65232c5d-c15a-4558-8cfa-8418d6510bc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, I attached the RPi camera to the camera mount. In the following image,
    the RPi camera is fitted upside down. So, when we capture an image, the image
    will appear upside down, and to view the image properly, we need to flip it (the
    process of flipping the image horizontally and vertically inside OpenCV is explained
    in [Chapter 7](b5b2dffa-7833-47cc-98d9-e60e6aba7299.xhtml), *Building an Object-Following
    Robot with OpenCV*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b51d7df9-723c-4abe-9eb6-81caa20d3ad9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After this, I attached the camera mount on top of my RPi case using small strips
    of double-sided tape, thus mounting the RPi camera on the robot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba3d6a10-11d8-4b86-a561-d7ade37e7ca4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we've mounted the camera case on the robot, let's see how we can capture
    images and video using the RPi camera.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing images and video with the RPi camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how we can take pictures and record video with our RPi. Open the
    Terminal window and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In this command, we used `raspistill` to take a still picture and saved it as `image1.jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the Terminal window is pointing to the `pi` directory, this image is
    saved in the `pi` folder. To open this image, open the `pi` folder and inside
    it, you will see `image1.jpg`. Images captured using the RPi camera have a native
    resolution of 3,280 x 2,464 pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7935ab8e-1b77-479d-9afd-560a4a5bb2d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output of `image1` is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9107747b-66fe-47cd-af30-fe1e703d3c52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to flip the image horizontally, we can add the `-hf` command, and
    if we want to flip it vertically, we can add `-vf` command inside the `raspistill`
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `image2.jpg` file is also saved in the `pi` folder, and its output is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba63edc7-b341-427c-b444-a514909d811e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have captured images using the RPi camera, let's record and view
    a video.
  prefs: []
  type: TYPE_NORMAL
- en: Recording a video with the RPi camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know how to take a picture with the RPi camera, let''s look at
    how to record video with it. The command for recording a video clip is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command doesn''t yield any output, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00cea86c-1fc4-4902-a4d0-ba5e22cb2c35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In our command, we used `raspivid` to record the video and named it `video1`.
    We recorded the video in the `h264` format. The number `5000` represents 5,000
    milliseconds, that is, we recorded a 5-second video. You can open the `pi` folder
    and double-click on the video file to open it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92bdd50f-5568-4a28-a8a3-3f62e556f4b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know how to take a picture and record a video, let's install the `v4l2`
    driver so that the OpenCV libraries can detect the RPi camera.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the v4l2 driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenCV libraries can, by default, recognize the USB camera attached to the
    RPi''s USB port, but it cannot directly detect the RPi camera. To recognize our
    RPi camera, we need to load the `v4l2` driver inside the modules file. To open
    this file, enter the following command inside the Terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To load the `v4l2` driver, add `bcm2835-v4l2` inside the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e9c0b29-5143-4e74-b14c-2b229999dd33.png)'
  prefs: []
  type: TYPE_IMG
- en: Press *Ctrl* + *O*, followed by *Enter*, to save this file and press *Ctrl*
    + *X* to exit the file, then reboot your RPi. Once rebooted, the RPi camera will
    be recognized by the OpenCV libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Reading an image using OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After playing around a little bit with the RPi camera, let''s write a simple
    C++ program using the OpenCV functions to display an image. In this program, we
    first read an image from a particular folder and then we display this image in
    a new window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b18a5571-b2f1-434c-baa4-eb92163ea7ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To display the image, we first need an image. Inside the `pi` folder, I have
    created a new folder called `Data` and inside it, I have copied one image called
    `Car.png`*.* In the same folder, I have created the `DisplayImage.cpp` file, inside
    which we are going to write the program to display the image. The `DisplayImage.cpp`
    program can be download from the `Chapter06` folder of this book''s GitHub repository.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we first declared the `opencv.hpp` library, along with
    the basic C++ libraries. We then declared the `cv` namespace, which is a part
    of the OpenCV library. After this, inside the `main` function, we declared a matrix
    (`Mat`) variable called `img`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the `imread()` function is used to read the `Car.jpg` image and the value
    is stored in the `img` variable. If the image and `.cpp` file are in the same
    folder, you just write the image name inside the `imread()` function. If the image
    is in a different folder, the location of the image should be mentioned inside
    the `imread` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `imshow()` function is used to display the car image in a new window. The
    `imshow()` function takes two parameters as input. The first parameter is the
    window text (`"Car Image"`) and the second parameter is the variable name (`img`)
    of the image that is to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The `waitKey(0)` function is used to create an infinite delay, that is, the
    `waitKey(0)` will display the car image infinitely until you press any key. When
    a key is pressed, the next set of code will execute. Since we do not have any
    code after the `waitKey(0)` function, the program will terminate and the car image
    window will be closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile and build OpenCV codes inside RPi, we need to add the following
    lines inside the compilation and build box:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Build option** and then select **Set Build Commands**. Inside the
    compilation box, enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the Build box, enter the following command and then click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Click on the compile button to compile the code and then click on the build
    button to test the output. In the output, a new window will be created, inside
    which the car image will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dce0a5f0-4a99-43c6-9f04-da1e4162ac6c.png)'
  prefs: []
  type: TYPE_IMG
- en: If you press any key, the program will terminate and the car image window will
    be closed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on installing OpenCV on Raspberry Pi. You were introduced
    to the RPi camera module. After setting up the RPi camera, you took pictures and
    recorded a short video clip using the RPi camera.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to write C++ programs using the OpenCV libraries.
    You will learn about different image-processing concepts so that you can scan,
    threshold, and recognize an object. After recognizing an object, we will write
    programs for the robot so that it follows the object.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the full form of OpenCV?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the resolution of images that are captured by the RPi camera?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command to capture an image using the RPi camera?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command to record a video using the RPi camera?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What percentage of the memory does Raspbian OS occupy on an 8 GB and 32 GB SD
    card?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
