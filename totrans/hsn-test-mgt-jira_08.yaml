- en: Test Planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test planning is the most essential stage in the STLC. Planning gives test professionals
    the opportunity to build an understanding of the problem in terms of the complexity
    of requirements. This is achieved by analyzing the workflow based on the use cases,
    and then deriving the test cases from it. A requirements document is the test
    basis that specifies the functionality of the application. The test plan then
    specifies how those items will be covered in the test by using several artifacts,
    including the test assignment, approach, and test strategy. The test strategy
    is a particularly important artifact of the test process.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover different aspects of test planning and test strategy while understanding
    the relationship between the requirements and test plan. We will also look at
    how Jira can help us in defining and comparing strategies for our testing needs
    using synapseRT, Zephyr, and the Jira Test Management tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and organizing a test plan using Jira plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining and implementing the test strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing relations between requirements and the test plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and organizing a test plan using Jira plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various workflows involved in the test planning phase. If one is utilizing
    the TMap approach, the test planning phase corresponds to the planning and control
    phase in the TMap life cycle. The planning phase consists of creating the test
    strategy using product risk analysis, estimation, and planning, while the control
    phase aims for continuous quality improvement by monitoring, reporting, and adjusting
    to reach the test goals. Let's delve into learning the activities in the test
    planning phase.
  prefs: []
  type: TYPE_NORMAL
- en: Once the test assignment has been confirmed, the team starts discussions about
    the stated specifications during the planning meeting, where the team tries to
    break down vague and complex ...
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A test plan in synapseRT is nothing but another issue type. Once we create
    a test plan ticket, it’s time to add details, such as priority, descriptions,
    and current status. After that, we can either create a new test case or add test
    suites with the desired test cases. Furthermore, we can also create test cycles
    to segregate these test cases and make them part of a selected cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9a2d1a42-41c1-4184-b35c-cffa8db9af80.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a test plan using synapseRT
  prefs: []
  type: TYPE_NORMAL
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The test plan option is available with Zephyr Enterprise version only, where
    the user can create and manage test plans using test cycles.
  prefs: []
  type: TYPE_NORMAL
- en: Please feel free to explore the Zephyr Enterprise version from this link: [https://zephyrdocs.atlassian.net/wiki/spaces/ZE6/pages/149455000/Test+Planning](https://zephyrdocs.atlassian.net/wiki/spaces/ZE6/pages/149455000/Test+Planning).
  prefs: []
  type: TYPE_NORMAL
- en: The Test Management tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to create a test plan in the Test Management tool, we need to follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Tests | Plans section. Click on the +New button to create a
    new plan. There is an option on the left-hand side panel to create multiple folders
    and organize test plans under main or subfolders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/09ac4152-73bd-4264-8c4c-dce77891d922.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we add the test plan with some basic details such as Name, Objective,
    Status, or Owner, then we can move onto the Traceability tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f0fbccbe-8df4-498b-82bc-c49268b804be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under the Traceability option, we can search for the existing test cycles and
    select one or multiple test cycles to add them to a test plan. While searching
    for existing test cycles, it also shows the execution status of each test cycle
    with the owner’s details, date, and the defects identified:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7febf2ab-1482-41bb-9cfe-fd979a2a3820.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining and implementing the test strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your test strategy completely depends on the testing needs of an application;
    primarily, the risk class of each requirement. For example, if the requirement
    is to verify whether an application can process requests from 1,000 users accessing
    the application concurrently, then we need to add performance testing to our testing
    strategy. We can perform stress testing by discovering the breakpoint above the
    permitted threshold as a part of our test strategy. We can also perform load testing
    by analyzing the performance of the application based on the permissible user
    limits hitting the application concurrently. We can also measure the response
    time of an application in order to render all the page components/objects ...
  prefs: []
  type: TYPE_NORMAL
- en: Establishing relations between requirements and the test plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [Chapter 3](e4241f7d-9db5-42d9-b626-d134c226d2ef.xhtml), *Understanding
    Components of Testing with Jira*,the traceability matrix is useful for obtaining
    a clear understanding of the project progress and identify requirements that demand
    more testing efforts or have more defects. The traceability matrix also indicates
    the test strategy, the type of test activity, and the tasks that have been defined
    and planned by test professionals to verify stated requirements. This gets created
    early in the phase so that it can be reviewed by project stakeholders, which affords
    sufficient time to monitor it, provide feedback, and adjust the test process as
    required by the team to achieve the test goal.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing relations between the requirements and the test plan is the first
    part of creating the traceability matrix. Whenever a requirement ticket is created
    in Jira, test professionals can prepare a test plan ticket and link it to the
    requirement. One requirement may have a master test plan, and/or multiple sub-test
    plans, depending on testing requirements. This gives an opportunity to project
    managers to track the test planning details for the selected requirement. These
    requirements can vary from an Epic or Story with a targeted release deadline,
    to any bugs reported by customers that require huge amounts of testing.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s understand how we can establish the relationship between the requirements
    and the test plan using Jira plugins.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It’s easy to establish a relationship between a requirement and test plan using
    the test cases. While creating a test plan in the preceding section, we saw how
    we can add test cases to our test plan. In the same way, you can add the same
    test cases to the requirement ticket as well. The following screenshot depicts
    a Story issue type, with the four test cases added to it under the Test Cases
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/810fb94c-887c-4445-9dd8-99e1ebca26c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we add the same test cases to the test plan, we can see requirement coverage
    under the Requirement section, as shown in the following screenshot. This indicates
    that, in order to verify the requirement, the tester has added four ...
  prefs: []
  type: TYPE_NORMAL
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the test plan feature is only available in Zephyr Enterprise, we can link
    the test cases to the requirements in order to establish a relationship between
    them. As shown in the following screenshot, open the existing test case and navigate
    to the More Actions | Link option. Then, search for the relevant requirement issue
    ticket and link it, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/06aa1d2f-813a-4f96-af4a-45e5f724bf54.png)'
  prefs: []
  type: TYPE_IMG
- en: The Test Management tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the case of the Test Management tool, go to Tests | Plan and select the
    test plan for which you want to add the requirement. Then, go to the Traceability
    section, where you can search for existing user stories or requirements and link
    them to the test plan as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2df9bc11-b98f-4def-baa3-5b267276d9f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the following screenshot, the Issues section shows the relevant
    requirements for which this test plan has been created, along with the test cycles
    that need to be executed in order to complete the verification process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/315621f1-78f2-41b0-9531-8bd23f8ae0fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered different aspects of test planning and test strategy,
    while learning about the relationship between the requirements and the test plan. We
    understood the components of a general test plan that can be used during the test
    planning process. We also learned how to write test plans using Jira plugins.
  prefs: []
  type: TYPE_NORMAL
- en: There are various ways to define a test strategy. We looked at an example of
    creating a test strategy for a banking application using the TMap approach. In
    order to create a traceability matrix, we need to establish a relationship between
    test cases and test plans, and the test requirements. In this chapter, we saw
    precisely how we can link test plans to their related requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the process of test case design and
    creation. We will also learn about organizing test cases, and hone our skills
    in reusing test cases and test data.
  prefs: []
  type: TYPE_NORMAL
