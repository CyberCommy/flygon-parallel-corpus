- en: Releasing the Ionic App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at three ways of generating the installer
    for your Ionic app. One uses the PhoneGap build service, the second uses the Cordova
    CLI, and, finally, the third uses the Ionic package service. We will generate
    installers for both Android and iOS operating systems. We will cover the following
    topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating Icons and Splash screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating config.xml
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the PhoneGap build service to generate installers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Cordova CLI to generate installers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Ionic package to generate service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the app for distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have successfully built our Ionic app, we want to distribute it.
    The best way to reach a wider audience is with the help of the App stores. However,
    before we start distributing the app, we will need app-specific icons and splash
    screens. Splash screens are totally optional and depend on the product idea.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Icons & Splash screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, when you run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The CLI automatically adds a new folder named resources. You can check this
    out in [Chapter 7](part0120.html#3IE3G0-9757c8e51afd47e0a7a9ced32db749b8), *Building
    Riderr App*. The resources folder consists of either Ionic or Android or both
    the subfolders, depending on how many platforms you have added, and in each of
    these folders, you will see two subfolders, named icon and splash.
  prefs: []
  type: TYPE_NORMAL
- en: You can keep the splash folder if your app uses splash screens, else delete
    the folder to save a few bytes of your final app installer.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate icons, you can get a copy of your icon greater than 1024 x 1024
    and use any service, such as the following, to generate icons and splash screens
    for both Android and iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://icon.angrymarmot.org/](http://icon.angrymarmot.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://makeappicon.com/](http://makeappicon.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have no association with any of the preceding services. You use these services
    at your own risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the best part is that you can place a file named `icon.png`
    and `splash.png` in the resources folder and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will take care of uploading your images to the Ionic cloud, resizing them
    as needed, and saving them back to the resources folder.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that you are uploading your content into a public/Ionic cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to convert only icons, you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For only splash screens, you can use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can use [http://code.ionicframework.com/resources/icon.psd](http://code.ionicframework.com/resources/icon.psd)
    to design your icon and [http://code.ionicframework.com/resources/splash.psd](http://code.ionicframework.com/resources/splash.psd)
    to design your splash screens.
  prefs: []
  type: TYPE_NORMAL
- en: You can place an `icon.png` image, an `icon.psd` file, or an icon.ai file at
    the root of the resources folder and ionic resources will do the magic!
  prefs: []
  type: TYPE_NORMAL
- en: Updating the config.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we already know, `config.xml` is the single source of truth that the Cordova
    API trusts while generating the OS-specific installers. So, this file needs to
    be validated thoroughly before we start the deployment process. You can follow
    the checklist to ensure that all the things are in place:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widget ID is defined and valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widget Version is defined and valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of an app update, Widget Version is updated and valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name tag is defined and valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description is defined and valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Author information is defined and valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access tag is defined and is limited to the required domains ([https://github.com/apache/cordova-plugin-whitelist#network-request-whitelist](https://github.com/apache/cordova-plugin-whitelist#network-request-whitelist))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow Navigation is defined and is limited to the required domains ([https://github.com/apache/cordova-plugin-whitelist#navigation-whitelist](https://github.com/apache/cordova-plugin-whitelist#navigation-whitelist))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow Intent is defined and is limited to the required domains ([https://github.com/apache/cordova-plugin-whitelist#intent-whitelist](https://github.com/apache/cordova-plugin-whitelist#intent-whitelist))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-check the preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-check the icons and splash image's path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-check the permissions if any
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update `index.html` with the content security policy meta tag ([https://github.com/apache/cordova-plugin-whitelist#content-security-policy](https://github.com/apache/cordova-plugin-whitelist#content-security-policy))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the preceding points are verified, we will get started with the installer
    generation process.
  prefs: []
  type: TYPE_NORMAL
- en: The PhoneGap build service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first approach we will take a look at is generating app installers using
    the PhoneGap build service. This is perhaps the simplest way to generate installers
    for Android and iOS.
  prefs: []
  type: TYPE_NORMAL
- en: The process is quite simple. We upload the entire project to the PhoneGap build
    service and it takes care of building the installer.
  prefs: []
  type: TYPE_NORMAL
- en: If you think uploading the complete project is not practical, you can upload
    only the `www` folder. However, you need make the following changes.
  prefs: []
  type: TYPE_NORMAL
- en: Move `config.xml` inside the `www` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the resources folder inside the `www` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the path of the resources folder in `config.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you find yourself doing the preceding often, I would recommend using a build
    script to generate a PhoneGap build `Deployable` folder with the preceding changes
    made to the project.
  prefs: []
  type: TYPE_NORMAL
- en: If you are planning to release your app only for Android, you do not need to
    do anything more. However, if you are planning to generate iOS installers, you
    need to get an Apple Developer Account and follow the steps at [http://docs.build.phonegap.com/en_US/signing_signing-ios.md.html](http://docs.build.phonegap.com/en_US/signing_signing-ios.md.html)
    to generate the required certificates.
  prefs: []
  type: TYPE_NORMAL
- en: You can also sign your Android app using the steps mentioned at [http://docs.build.phonegap.com/en_US/signing_signing-android.md.html](http://docs.build.phonegap.com/en_US/signing_signing-android.md.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the required certificates and keys, we are good to start generating
    the installer. You can follow the given steps to make the process easy:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a PhonegGap account and log in ([https://build.phonegap.com/plans](https://build.phonegap.com/plans))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, navigate to [https://build.phonegap.com/people/edit](https://build.phonegap.com/people/edit)
    and select the Signing Keys tab, and upload iOS and Android certificates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, navigate to: [https://build.phonegap.com/apps](https://build.phonegap.com/apps)
    and click on New App. As part of the *Free plan*, you can have as many apps as
    you want as long as they are pulled from Public Git repos. Alternatively, you
    can create a private app from a Private repo or by uploading a ZIP file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For testing the service, you can create a `.zip` file (not `.rar` or `.7z)`
    with the following folder structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`App` (root folder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config`.xml'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources` (folder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`www` (folder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is all you need for the PhoneGap build to work.
  prefs: []
  type: TYPE_NORMAL
- en: Upload the ZIP file to [https://build.phonegap.com/apps](https://build.phonegap.com/apps)
    and create the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This process generally takes up to a minute to do its magic.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you may see unexpected errors from the build service. Wait for some
    time and try again. Depending on the traffic, sometimes the build process may
    take a bit longer than expected.
  prefs: []
  type: TYPE_NORMAL
- en: Generating Installers using Cordova CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will look at creating installers using Cordova CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Android installer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will take a look at generating an installer for Android using the
    CLI. You can follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new command prompt/terminal at the root of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove unwanted plugins using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Build the app in release mode with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will generate an unsigned installer in release mode and place it at `<<ionic
    project>>/platforms/android/build/outputs/apk/android-release-unsigned.apk`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to create a signing key. If you already have a signing key or
    you are updating an existing app, you can skip the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The private key is generated using the keytool. We will create a folder named
    deploy-keys and save all these keys there. Once the folder is created, run the `cd` command
    and navigate into the folder and run this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be asked the following questions, and you can answer them as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you lose this file, you cannot submit updates to the app store, ever.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: To know more about the keytool and signing process, refer to [https://developer.android.com/studio/publish/app-signing.html](https://developer.android.com/studio/publish/app-signing.html).'
  prefs: []
  type: TYPE_NORMAL
- en: This is an optional step, you can copy the `android-release-unsigned.apk` to
    the `deploy-keys` folder and run the following commands from there too. I will
    leave the files where they are.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we sign the unsigned APK using the jarsigner tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You will be asked for the passphrase, which you have entered as the first step
    while creating the keystore. Once the signing process is completed, the existing
    `android-release-unsigned.apk` will be replaced with the signed version of the
    same name.
  prefs: []
  type: TYPE_NORMAL
- en: We run the preceding command from inside the deploy-keys folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we run the `zipalign` tool to optimize the APK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will create `my-ionic-app.apk` in the `deploy-keys` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can submit this APK to the app store.
  prefs: []
  type: TYPE_NORMAL
- en: iOS installer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will generate an installer for iOS using XCode. You can follow the
    given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new command prompt/terminal at the root of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove unwanted plugins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to platforms/iOS and launch the `projectname.xcodeproj` using XCode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the project is inside XCode, select Product and then Archive from the navigation
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select Window and select Organizer from the navigation menu. You will
    be shown a list of archives created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the archive snapshot we have created now, and click on Submit. The
    validation of your account is performed and then the app will be uploaded to iStore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you need to log in to the iTunes store to set up screenshots, a description,
    and more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This concludes the process of generating installers using the Cordova CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at Ionic package.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a project to Ionic cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using Ionic cloud services to generate installers is quite simple. First, we
    upload our app to our Ionic account by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Log in to your Ionic account before executing the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: If your project has sensitive information, cross-check with Ionic license before
    uploading the app to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Once the app is uploaded, an app ID will be generated for your app. You can
    find the app ID in the `ionic.config.json` file located at the root of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the required keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to follow Step 5 in the Generating Installers using Cordova CLI section,
    the Android Installer subsection, to get the keystore file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we use the ionic package command to generate the installer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The options will consist of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For instance, if you would like to generate an installer for Android in release
    mode, it will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We are running the preceding command from inside the deploy-keys folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, the preceding command for iOS will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to release and manage an Ionic app. We saw how to
    generate installers using the PhoneGap build service, using Cordova CLI, and,
    finally, using Ionic Package.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at Ionic 3 and the key differences between
    Ionic 2 and Ionic 3.
  prefs: []
  type: TYPE_NORMAL
- en: Note that almost all the concepts we learned so far are still applicable in
    Ionic 3 as well.
  prefs: []
  type: TYPE_NORMAL
