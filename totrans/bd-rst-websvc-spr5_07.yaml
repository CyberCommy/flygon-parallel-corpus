- en: Testing RESTful Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we have discussed how to create a REST API and apply the
    business logic inside our REST APIs and service methods. However, in order to
    be sure of our business logic, we may need to write proper test cases and use
    other testing methods. Testing our REST APIs will help us keep our application
    clean and functional when it is deployed in production. The more we write unit
    test cases or other testing methods, the better it is for us to maintain our application
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following testing strategies for our sample
    RESTful web services:'
  prefs: []
  type: TYPE_NORMAL
- en: JUnit testing on Spring controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MockMvc (mocking on controllers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Postman REST client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SoapUI REST client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jsoup reader as a client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JUnit is the easiest and the most preferred testing framework for Java and Spring
    applications. By writing JUnit test cases for our application, we can improve
    the quality of our application and also avoid buggy situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will discuss a simple JUnit test case, which is calling the `getAllUsers`
    method in `userService`. We can check the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have called `getAllUsers` and verified the total
    count. Let''s test the single-user method in another test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippets, we just tested our service layer and verified
    the business logic. However, we can directly test the controller by using mocking
    methods, which will be discussed later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: MockMvc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MockMvc is mainly used to test the code through the controller. By calling the
    controller (REST endpoint) directly, we can cover the whole application from MockMvc
    testing itself. Also, if we keep any authentication or restriction on the controller,
    it will also be covered in MockMvc test cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will test our basic API (`localhost:8080/`) using MockMvc
    standards:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we only initialized the web application in the `setUp()`
    method. Also, we have bound `WebApplicationContext` by using the `@Autowired`
    annotation. Once the setup is ready, we create a method called `testBasicMVC`
    to test our plain API (`localhost:8080`), which will return `"result: Aloha"`.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have finished with the code, if we run it on Eclipse by selecting Run
    As | JUnit test, the preceding method will be executed and show the results. We
    can view the successful test case results in a JUnit window in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Testing a single user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have only tested a plain REST API. Here, we can go one step further
    and test our user API by getting a single user from `userid`. The following code
    will take us through the implementation of getting a single user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code (`testSingleUser`), we can see that we are expecting `status`,
    `userid`, and `username` as `Ok`, `100`, and `David`, respectively. Also, we print
    the result that we get from the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Postman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already used Postman in previous chapters for testing our REST APIs.
    Postman will be helpful when we need to test the application completely. In Postman,
    we can write test suites to validate our REST API endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Getting all the users – Postman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we shall start with a simple API for getting all the users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The earlier method will get all the users. The Postman screenshot for getting
    all the users is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab3e6aae-451c-4800-8730-ab0bb7372b29.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see that we get all the users that we added
    before. We have used the `GET` method to call this API.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a user – Postman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try to use the `POST` method in `user` to add a new user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the user, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab0d5a93-c309-485a-b820-a674f80d6907.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding result, we can see the JSON output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Generating a JWT – Postman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try generating the token (JWT) by calling the generate token API in
    Postman using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can clearly see that we use `subject` in the Body to generate the token.
    Once we call the API, we will get the token. We can check the token in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17f854d7-d862-48a4-89b7-99bd03347c52.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting the subject from the token
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By using our existing token that we created before, we will get the subject
    by calling the get subject API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58232047-8dee-4e98-b4f5-5fd2fbce2de8.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding API call, we sent the token in the API to get the subject.
    We can see the subject in the resulting JSON.
  prefs: []
  type: TYPE_NORMAL
- en: SoapUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like Postman, SoapUI is another open source tool that is used to test web services.
    SoapUI helps in web service invoking, mocking, simulation, load testing, and functional
    testing. SoapUI is heavily used in load testing, and it has lots of controls to
    make load testing easy.
  prefs: []
  type: TYPE_NORMAL
- en: SoapUI is very easy to install in operating systems such as Windows and Linux.
    Its user interface gives us a lot of flexibility to build complex test scenarios.
    Also, SoapUI supports third-party plugins such as `TestMaker` and `Agiletestware`,
    and it's easy to integrate with IDEs such as NetBeans and Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Getting all the users – SoapUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use SoapUI to test our basic API (`/user`). The following method will
    get all the users when we use them in SoapUI using the `GET` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The SoapUI screenshot for getting all the users is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40628590-4e6b-45ae-9461-9146a3cbd89d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will try to add a user using the `POST` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The added user screenshot will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2135de40-e5c9-4b0d-a88b-14ea7c17ab56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this result, we can see the JSON output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Generating JWT SoapUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will generate the token using the `GET` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In SoapUI, we are using `subject` as a parameter. We can see this in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61345243-380c-448b-b585-f7245d9267ea.png)'
  prefs: []
  type: TYPE_IMG
- en: We can clearly see that we use `subject` in the body to generate the token.
    Also, we can see the Style as QUERY in SoapUI. This will make our Value (`test`)
    as a parameter for the API.
  prefs: []
  type: TYPE_NORMAL
- en: Once we call the API, we will get the token. We can check the token in the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the subject from the token – SoapUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can get the subject from the token generated previously. We may need
    to pass the token as a parameter to get the subject.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following API will get the subject from the token when we call the API
    in SoapUI using the `GET` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Although we can use the `POST` method in the preceding API call, we only used
    the `GET` method to simplify the process, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88105b9e-24a6-408c-b71f-a37f146b4a15.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding API call, we sent the token in the API to get the subject.
    We can see the subject in the resulting JSON.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have tested our APIs with the help of SoapUI. Although SoapUI seems
    a little tougher than Postman, it might be very helpful when we do load testing
    and security testing at the enterprise level.
  prefs: []
  type: TYPE_NORMAL
- en: jsoup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jsoup is a Java library for extracting HTML documents and getting the details
    from HTML DOM. jsoup uses DOM, CSS, and jQuery-like methods to retrieve information
    from any web page. Even though jsoup is mainly used for HTML document parsing,
    in our application we will use it for API testing.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will call the REST API in jsoup and convert the result to JSON. To
    convert strings to JSON we will use the Gson library.
  prefs: []
  type: TYPE_NORMAL
- en: 'For both jsoup and Gson libraries, we may have to add dependencies in our `pom.xml`.
    The following is the code for both jsoup and Gson dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the jsoup REST consumer inside the test resources so it will be
    easier to test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code will call the REST API as HTML and get the body as text.
    By doing this, we will get only the REST API results as JSON text. The JSON text
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we get the JSON text, we can convert them into a JSON array by using the
    `JsonParser` class. The following code will parse the JSON text and convert it
    into the `JsonArray` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we get the JSON array, we can simply check the array size to verify our
    REST API. The following code will test the size of our REST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the complete class with the preceding code mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding method, we have used loggers to print the size. Also, we have
    used the `assertEquals` method to check the user array size.
  prefs: []
  type: TYPE_NORMAL
- en: As this is like a JUnit test, we may need to test with the JUnit Test option
    in Eclipse. We can simply right-click the file and click Run As | JUnit Test.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a user – jsoup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the earlier method, we have tested get all users in the REST API. Now, we
    can check a single user and details. The following code will test the single user
    REST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will call the REST API, get the JSON in text format, and
    then convert them into a `User` class. Once we convert them into the `User` class,
    we can check the username by `assertEquals`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a user – jsoup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try to use the `POST` method in jsoup by adding a new user. In this
    REST API (add user), we may need to pass a few parameters to the REST API. The
    following code will call the add user API and get the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have used the `.post()` method to call the API. Also,
    we have used the `.data()` method to pass the parameters. By adding `.ignoreContentType()`
    we tell the `Jsoup` library that we don't care about the content type that the
    API returns. Also, `body().text()` will get the body as a text.
  prefs: []
  type: TYPE_NORMAL
- en: By checking the result in `assertEquals`, we make sure that the API works fine.
  prefs: []
  type: TYPE_NORMAL
- en: To test jsoup, the server needs to be running, so we need to run the server
    first. Then we can run our test cases. To run other test cases, such as JUnit
    and MockMvc, we don't need the server.
  prefs: []
  type: TYPE_NORMAL
- en: Running the test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we run the server and make sure we can access the server. If we don''t
    run the server, we will not be able to test jsoup, so keep the server running.
    Once the server has started, right-click the project Run As | JUnit Test. We can
    see the results in the JUnit window, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f56729a-5618-42ec-adc1-59613d2de0cd.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can clearly see that all of our test cases have
    passed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed various testing methods for RESTful web services.
    We have applied JUnit testing, MockMvc, Postman, and SoapUI. These testing methods
    will be very helpful for testing the business logic in the application. In the
    next chapter, we will talk about the REST client and consuming RESTful services
    in a REST client.
  prefs: []
  type: TYPE_NORMAL
