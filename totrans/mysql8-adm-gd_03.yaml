- en: MySQL 8 – Using Programs and Utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we installed MySQL 8 and got to know alternative ways
    to install MySQL 8\. We also learned  how to migrate and upgrade to MySQL 8\.
    The following are the summary topics explained in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 Installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post Installation Setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 Upgrading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 Downgrading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, the reader will learn about various programs and utilities
    available in MySQL 8\. The reader will also get to know how to use programs and
    utilities in MySQL 8\. The reader will learn about using command-line programs
    used in MySQL 8\. The reader will learn the syntax for the program and how they
    are being used with specific options to perform specific operations. The following
    is a summary of the topics covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of MySQL 8 programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 command-line programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 client programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 administrative programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL GUI tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of MySQL 8 programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various different programs in the MySQL installation. A brief overview
    of these programs is covered in this section. Upcoming sections will cover a detailed
    description for each of them and the description will have its own invocation
    syntax and options to perform the operation.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the MySQL distribution will have all these programs, apart from those
    that are platform-specific; for example, server startup script not used in Windows.
    RPM (Red-hat package manager) distributions are very specialized and are part
    of the exceptions to all programs available in distributions. What is specialized
    about RPM distributions? Well, they have different programs for different operations;
    for example, one program will be executed for the server, a second program will
    be executed for the client, and so on. If it looks like one or more programs is
    missing in your installation, then don't worry. See [Chapter 2](69eaf074-9446-4da9-918c-765f7e001f8c.xhtml),
    *Installing and Upgrading MySQL 8*, for information on the types of distributions
    available and what is included in them. It might be the case that the distribution
    which you have does not include all the programs and you need to install an additional
    package.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the MySQL 8 programs will have their own options, but most of them will
    have a `--help `option that can be used to retrieve descriptions about all the
    options that the program has. For example, try `mysql --help` on the command line
    (that is your shell or Command Prompt).
  prefs: []
  type: TYPE_NORMAL
- en: 'The description on the first few lines will have specific version information
    about MySQL that is installed along with operating system and license information.
    The next line will start with `Usage : mysql [OPTIONS] [database]`, that is, a
    syntax of the program command usage, and later lines describe the options available
    to be used along with them as per the usage description. This was just a glimpse
    of what we will be looking at: program details with options, their usages and
    default options, overriding default option values on various command-line programs,
    client programs, administrative programs, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: For detailed information about executing programs and specifying program options
    in the command line see the *MySQL 8 command line programs* section*,* which will
    be followed by a list of installations, client and server start up, and other
    utility programs.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL programs in brief
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us start with the MySQL server programs first!!
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqld` is the first program, also considered to be the main program for MySQL
    installation. It works with several scripts to help with starting and stopping
    the server. The following are the programs divided into categories based on their
    operational scope:'
  prefs: []
  type: TYPE_NORMAL
- en: Startup programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation/upgradation programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administrative and utilities programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Startup programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The startup programs are the programs that are used during MySQL start up and
    initiate the required background services based on the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqld`: This is the MySQL server daemon. All the other client programs interact
    with the database using this server program. It must be started and be running
    at all times except for maintenance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqld_safe`: This is one of the server startup program scripts and attempts
    to start the `mysqld` program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql.server`: Another server startup program script, which is used in those
    systems, uses V-style run directories containing scripts. It starts system services
    at particular run levels. It calls `mysqld_safe` to start the MySQL server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqld_multi`: As the name suggests, this is a startup program script to start
    or stop multiple MySQL servers on the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation/upgradation programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The programs regarding the operations of installation and upgradation are listed
    here with their respective usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '`comp_err`: This program is used to compile error message files from error
    source files and it is used during the MySQL build or install operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql_secure_installation`: This program is used to update the security configuration
    in order to enable security during installation of MySQL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql_ssl_rsa_setup`: As the name suggests, this program is for generating
    `SSL` certificates and key files and `RSA key-pair` files, if those files are
    missing and are required to support secure connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql_tzinfo_to_sql`: This program gets the content of the host system zone
    info database (files describing time zones) and loads the information in the time
    zone tables of MySQL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql_upgrade`: As the name suggests, it is used for upgrade operations. It
    checks for any incompatibility and makes repairs if it is necessary. It also updates
    the grant tables with any changes in new versions of MySQL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The client programs are among the programs that are commonly used to connect
    to the MySQL database and perform different query operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysql`: This is the most commonly used program. It is an interactive command-line
    tool for executing SQL statements directly or using a file in batch mode. Detailed
    information is followed in the next *MySQL 8 command line programs* section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqladmin`: This is the program responsible for performing various administrative
    operations, such as creating or dropping databases, flushing tables, reloading
    grant tables, reopening log files, and much more. The program is also used to
    retrieve information from the server, such as version, process, and status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqlcheck`: This is the client program used for maintenance of tables, performing
    analysis, checks, repairs, and optimizing tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqldump`: This is the client program that dumps the MySQL database to a
    file in text, SQL, or XML formats. It is commonly known as a database back up
    program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqlimport`: This is the client program that imports text files into respective
    tables using `LOAD_DATA_INFILE`. It is also commonly known as the data import
    program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqlpump`: The client program which dumps MySQL database into SQL file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqlshow`: The client that shows information of databases, tables, columns,
    and indexes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqlslap`: This is the client program that is used to check client load capability
    for the MySQL server. The program mimics multiple clients accessing the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administrative and utilities programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the programs that perform various administrative activities.
    They are depicted along with some of the utilities which help in administrative
    operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`innochecksum`: The program for the `InnoDB` offline file checksum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`myisam_ftdump`: The utility program gives information of full-text indexes
    in `MyISAM` tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`myisamchk`: The program used to check, describe, repair and optimize `MyISAM`
    tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`myisamlog`: The utility program for processing a `MyISAM` log file contents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`myisampack`: The utility program that produces smaller read-only `MyISAM`
    tables through compression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql_config_editor`: The utility program that enables authentication credentials storage
    in an encrypted and secure login path file named `mylogin.cnf`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqlbinlog`: The utility program that can read binary log file statements.
    In the event of a server crash, a binary log file executed statements can be big
    help.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqldumpslow`: The utility program that can read and summarize the contents
    of a slow query log.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MySQL client programs that communicate with the MySQL server using libraries
    use the following environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MYSQL_UNIX_PORT`: This variable is responsible for the default Unix socket
    file which will be used for connecting to a localhost'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_TCP_PORT`: This variable is responsible for providing the default port
    number and is used in TCP/IP connections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_PWD`: This variable is responsible for providing the default password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_DEBUG`: This variable is responsible for providing debug trace options
    during debugging operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TMPDIR`: This variable is responsible for providing the directory where the
    temporary files and tables will be created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a detailed list and uses of environment variables in programs, see *MySQL
    8 environment variables* section. The use of `MYSQL_PWD` is insecure.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL GUI tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL Workbench GUI tool, provided by Oracle corporation, is used in the
    administration of MySQL servers and databases, for creating, executing, and evaluating
    queries. It is also used for migrating schema and data from other relational database
    management systems to be used with MySQL. There are other GUI tools, including
    MySQL Notifier, MySQL for Excel, phpMyAdmin, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 command-line programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we went through various types of programs provided
    by MySQL 8 and outlined their usage in brief.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at command-line programs and learn about executing
    programs from command lines. We will take a detailed look at the provision for
    options and how they can be utilized for the administration.
  prefs: []
  type: TYPE_NORMAL
- en: Executing programs from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Executing programs from the command line (shell or Command Prompt) is one of
    the most used forms of administration in MySQL. Plenty of programs have been added
    along with options for administration.
  prefs: []
  type: TYPE_NORMAL
- en: Executing MySQL programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To execute a MySQL program, enter the program name followed by options or any
    other arguments required to tell the program what you want it to do. Following
    are some sample executing commands. Here  `shell>` represents the command interpreter.
    Typical prompts will be `c:>\` for a Windows machine with `command.com` or `cmd.exe`
    as the command interpreter, `$` for a Unix machine with `sh`, `ksh` or `bash`
    as the command interpreter, and `%` for a Mac machine with `csh` or `tcsh` as
    the command interpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There are nonoption arguments, arguments without any leading dash, giving supplementary
    information to the program. As an example, if you see the second line of the preceding
    example, it has a third nonoption argument with a database name `mysampledb`,
    so the command `mysql --user=root --password=******** mysampledb` tells the `mysql`
    program that you wanted to use `mysampledb` as the database name.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments beginning with single or double dash `(-,--)` are used for specifying
    the program options. Specifying the program options indicates the type of connection
    the program will connect to the server or will affect the mode of operation. Syntax
    for the options are explained with details, see the *Specifying options for programs*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the MySQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explain how we can establish connection to the MySQL
    server. We will be using client programs for connecting to the MySQL server. For
    connecting to the server program, we need some information to specify the `hostname`,
    `username`, and the `password` of the MySQL account because we need to tell the
    client program which host the server is running in and the associated username
    and password. Although there will be default option values associated to these
    options, you can override the option value whenever it is necessary. For example,
    consider using the common client program `mysql:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding program, no option has been specified but the following defaults
    will be applied automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: Hostname default value applied as `localhost`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Username default value applied as per the login name (ODBC name in Windows or
    Unix login name)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the `-p` or `--password` option is not specified along with the program,
    then it will not send any option value to the program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first non-option argument is considered as the default database name for
    the `mysql` program and if no such option is specified, then `mysql` does not
    select any default database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The principles applied to the client program `mysql` are also applicable to
    other client programs, such as `mysqldump`, `mysqladmin,` or `mysqlshow`. Now
    let us see the example client program connecting with arguments of a specific
    option value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding example with specific option values, the host
    is to be considered as the `localhost` and the user value is provided as `myname`.
    The password is also specified and, finally, a non-option argument is specified
    that tells the program to use `mysampledb` as the default database name.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying options for programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the earlier section, we have seen how program options change the operation
    mode based on argument values specified for the option in the client program.
    Here we will look at several ways to specify options for MySQL programs. These
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: Providing the options on the command line followed by the program name. This
    is the common way of providing options but it will be applied specifically to
    the execution of the program at that time only.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing the options in the options file that is being read by the program
    before it starts execution. This is the common way for providing the options that
    you want the program to use each time it executes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing the options in the environment variables. By using this method, you
    can also specify options that you want to apply every time the program is being
    executed. In general practice, using option files is commonly used for this purpose
    but specifying option values in the environment variables is also very useful
    in some cases; for example, when running multiple MySQL instances on a Unix system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MySQL program checks which options are to be given first by examining the
    related environment variables, then it processes option files, and then it considers
    option arguments in the command line. Thus, the command-line options have the
    highest precedence and the environment variables have the lowest. However, there
    is one exception that applies and that is the `mysqld-auto.cnf` option file in
    the data directory processed last, so it takes higher precedence to the command-line
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Options on the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the command line program options, follow these rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Options are followed by the program name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Option arguments begin with a single dash or double dashes, depending on if
    they are using the short form or the longer form of the option name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The option name is case sensitive. For example, `-V` and `-v` are both valid
    as they are the respective short forms for `--verbose` and `--version`, thus stating
    different meanings to the program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options can also take a value followed by the option name. For example, `-h
    localhost` or `--host=localhost` tells the client program to take the localhost
    as the hostname.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With a short option that takes a value, the value can follow the option letter
    immediately or the single space between the two will also work. The only exception
    to this rule is when specifying the MySQL password option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the long option that takes a value, the value and name can be separated
    by the = sign.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (-) and (_) can be used interchangeably within the option name, such as`--skip-grant-table`
    or `--skip_grant_table.` Both are valid and work the same way but the underscore
    cannot be used in place of a leading dash.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An option value taking a numeric value can be used with a suffix of K, M, or
    G to indicate a multiplier of 1,024 with lowercase or uppercase. Consider the
    following example where the command is telling the `mysqladmin` program to ping
    the server 1,024 times and sleep for `10` seconds for each ping:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For filename options values, avoid using the `~` meta character because it will
    not be interpreted as per expectation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Option values containing spaces must be enclosed by quotation marks when a value
    is specified on the command line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying program options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some of the options are of the `boolean` type and control a behavior that can
    be turned on or off. Let us consider, for an example, the `mysql` program. It
    supports the `--column-names` option that controls displaying the first row of
    the column names in the first line of query results. In order to disable the column
    names, the following specifications will work for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding example, the `=0 suffix` and the `--skip` and
    `--disable prefixes` have the same effect. It is also applicable when turning
    the option on with the `=1` suffix and the `--enable` prefix.
  prefs: []
  type: TYPE_NORMAL
- en: If the option is specified with the `--loose prefix`, and if the option specified
    does not exist, the program will issue a warning instead of exiting.
  prefs: []
  type: TYPE_NORMAL
- en: For some of the programs, the `--maximum prefix` is available to be used with
    the option name for specifying the limit. It can also be used with environment
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying options with files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the MySQL programs can read startup options from the option files,
    also sometimes called **configuration files**. It is a very convenient way of
    providing the options that are commonly used and once specified you need not specify
    them each time you execute the program. To check whether the program reads option
    files, use the `--help` option. For example, consider the `mysqld` program, which
    should use `--verbose` and `--help`, if it reads option files. The help message
    will indicate which option file it looks for and for which option group:'
  prefs: []
  type: TYPE_NORMAL
- en: The MySQL program with the `--no-defualts` option does not read any option files
    apart from `.mylogin.cnf`. If the server program started with the option `persisted_globals_load`
    system variable disabled then the program does not read the `mysqld-auto.cnf` file.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of the option files are plain text files that can be created and
    edited by any text editors. Exceptions among those files are `.mylogin.cnf` ,
    which has login path options, encrypted by the `mysql_config_editor` utility program.
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL checks option files for Windows and Unix systems in specific order and
    follows the precedence that starts from reading global options, such as in the
    Windows system:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%PROGRAMDATA%\MySQL\MySQL Server 8.0\my.ini` and `%PROGRAMDATA%\MySQL\MySQL
    Server 8.0\my.cnf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%WINDIR%\my.ini` and `%WINDIR%\my.cnf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C:\my.ini` and `C:\my.cnf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BASEDIR\my.ini` and `BASEDIR\my.cnf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file specified with `--defaults-extra-file`, if any
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Login path options in `%APPDATA%\MySQL\.mylogin.cnf` (client program only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For system variables persisted with `SET_PERSIST` or `PERSIST_ONLY` (if it is
    the server program) in `DATADIR\mysql-auto.cnf`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Similarly, in Unix systems it follows the following  order of precedence for
    reading option files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/my.cnf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/mysql/my.cnf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SYSCONFDIR/my.cnf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$MYSQL_HOME/my.cnf` (server program only)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file specified with `--defaults-extra-file`, if any
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~/.my.cnf` for user-specific options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~/.mylogin.cnf` for user-specific login path options (client program only)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For system variables persisted with `SET_PERSIST` or `PERSIST_ONLY` (if it is
    the server program) in `DATADIR\mysql-auto.cnf`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the preceding options, `~` refers to the current user's home directory.
  prefs: []
  type: TYPE_NORMAL
- en: Empty lines in option files are ignored, along with comments. Comments can be
    specified using `#` or `;` characters and `#` can start in the middle of any line
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`group` is the name of the program or group for which options are to be set.
    They are not case sensitive. Once a group line is added to the option file, all
    the following lines apply to the named group until another group line is specified
    or at the end of the option file.'
  prefs: []
  type: TYPE_NORMAL
- en: opt_name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is similar to the `--opt_name` in the command line turning on the named
    optimization.
  prefs: []
  type: TYPE_NORMAL
- en: opt_name=value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is similar to the `--opt_name` in the command line but in place of the
    value, you can specify the value with spaces, which you cannot in the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: Include directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible using `!include` directives in the option files to include another
    option file and `!includedir` to search for specific directories to check for
    option files. For example, `!include /home/dev/myopt.cnf` and  `!includedir /home/dev`,
    for directories. The only thing that MySQL does not consider is any order during
    the directory search.
  prefs: []
  type: TYPE_NORMAL
- en: Any option files to be used in the `!includedir` directive on a Windows system
    must end with the `.ini` or `.cnf` extension and in Unix systems they must end
    with `.cnf`.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line options affecting option file handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the MySQL programs support option files. As they affect option file
    handling, they must be given in the command line and not as part of an option
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make them work properly, they must be given before other options.
    Some of the exceptions are as follows : `--print-defaults` might be used immediately
    after `--login-path`, `--defaults-file`, or `defaults-extra-file`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`--no-defaults` and `--print-defaults` are also used to modify option file
    handling.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting program variables with options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many MySQL programs have internal variables that we can set during runtime operations
    using the `SET` statement and also using the same syntax by which we specify option
    values. This will work when the program is started. For example, if we use the
    option value syntax then we have to specify like this: `shell> mysql --max_allowed_packet=16M` .
    To specify the runtime option using the `SET`, we can specify like this: `mysql>
    SET GLOBAL max_allowed_packet=16*1024*1024`.
  prefs: []
  type: TYPE_NORMAL
- en: To find out if the option variable syntax is correct, you can go to `mysql`
    and use the following:  `mysql> show variables like 'max%'`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Command Prompt, we can set environment variables which will affect the runtime
    execution of the program, or can be set to affect future executions permanently.
    They can be set up in the startup file or by using the interface provided by the
    system. A list of environment variables that can affect the MySQL programs are
    given with details in the *MySQL 8 environment variables* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify values for the environment variable, the syntax will be based on
    the underlying command interpreter. For a Windows system, you can set the user
    variable using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For a Unix system, it depends on the shell, so you will need to use following
    syntax if using `sh`, `ksh`, `zsh`, or `bash`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If using `csh` or `tcsh`, use `setenv`, which will get the shell variable available
    to the execution environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The commands to set environment variables that are executed will immediately
    affect the program in execution but if you wanted to get the environment variable
    to persist, you need to specify it on the interface provided by the system or
    you may set it up in the startup file that the command processor uses at startup.
    On Windows, this can be set up from the control panels option to set environment
    variables and in Unix, this can be set up based on the command-line processor
    you use. For `bash` , you need to put the value in `.bashrc` or `.bash_profile`
    and for `tcsh` use `.tcshrc`.
  prefs: []
  type: TYPE_NORMAL
- en: Server and server-startup programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are specific programs provided by MySQL which you need to execute first
    in order to make MySQL work correctly. In the following sections, we will look
    at the server programs and related startup programs that can be used with several
    options as per your requirement.
  prefs: []
  type: TYPE_NORMAL
- en: mysqld - the MySQL server program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL server is a daemon program. All other programs connect with the database
    through this server, so it should be running at all times. The daemon program
    usually gets started from a script called `mysqld_safe`. The program script is
    required, as it sets the appropriate environment variables and executes the `mysqld` program
    with the required arguments `-option` values.
  prefs: []
  type: TYPE_NORMAL
- en: Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the options briefed in detail for various options available
    from command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-?, -I`, `--help`: Displays the usage information of the program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-# debuglevel`, `--debug=debuglevel`: Sets the debugging level as specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-b directory`, `--basedir=directory`: Specifies the base directory used to
    determine all other related directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--big-tables`: Used to allow large result sets. They are saved as temporary
    results in a file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--bind-address=ip-number`: Specifies the IP address the server will bind it
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h directory`, `--datadir=directory`: Specifies the directory where the database
    data files are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-l [logfile]`, `--log[=logfile]`: Add various log information, which includes
    connections and error information. If an argument is not provided, then `hostname.log` is
    used as the log file, and here `hostname` is the name of the server machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-isam[=logfile]`: Adds changes to the data (ISAM) files in logs. If an
    argument is not provided, then `isam.log` is used as the log file and the log
    generated by this option can only be read and manipulated with the `theisamlog` utility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-update[=number]`: Logging the database updates info. The log file gets
    named as `hostname.num`, where the `hostname` is the name of the server machine
    and the `num` is the argument to the option or generates a unique number if the
    argument is not specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-L=language`, `--language=language`: To specify the language (English, French,
    German, and so on) for the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-n`, `--new`: To enable new routines (and possibly unsafe routines).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-S`, `--skip-new`: To disable/enable new routines (and possibly unsafe routines).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-O variable=value`, `--set-variable variable=value`: To specify and set value
    for the variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--pid-file=file`: To get the name of the file having the **process ID** (**PID**)
    of the running server. The default value for the file is `hostname.pid` , where
    the `hostname` is the server machine''s name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-P port`, `--port=port`: To specify the network port number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--secure`: To enable network security checks. But this reduces database performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--skip-name-resolve`: To specify using only IP numbers (not names) for the
    connections. This increases the network performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--skip-networking`: To disable network connections, with only local access
    being allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--skip-thread-priority`: For giving all the threads the same priority.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Sg`: To disable access checking. This allows all the users full access to
    all the databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Sl`: To specify not to perform thread locking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--use-locking`: To enable thread locking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--socket=file`: To specify the filename for the Unix socket.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-T`, `--exit-info`: Used to display debugging information during the shutting
    down of the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`, `-V`, and `--version`: To show the version information of the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mysqld_safe - MySQL server startup script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the most recommended way to start the MySQL server in a Unix- based
    system as it adds a few safety features, such as logging information to error
    log if any error occurs at runtime and restarting the server if there is an error.
  prefs: []
  type: TYPE_NORMAL
- en: In some of the Unix platforms, MySQL installations from RPM or Debian packages
    include the `systemd` support to manage MySQL startup and shutdown operations
    and so `mysqld_safe` is not installed on those systems.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqld_safe` attempts to execute `mysqld` and to override the default behavior
    to specify the name of the server that you wanted to execute. The option to specify
    the directory using `--ledir` is also available so that `mysqld_safe` will look
    for the server in the directory. Most of the options in `mysqld_safe` are also
    available in `mysqld` and if the specified option is unknown to `mysqld_safe`
    then it gets passed on to `mysqld`. `mysqld_safe` , which reads out all the options
    from the `mysqld`, server, and `mysqld_safe` sections in option files. For backward
    compatibility, `mysqld_safe` also reads `safe_mysqld` sections but you should
    rename such section to be on the current one that is `mysqld_safe`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As stated previously, there are very common options specified in both `mysqld`
    and `mysqld_safe`, so some of the options are excluded in the following list of
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To specify the size of the core file which `mysqld` should create.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If `mysqld` is not able to find the server, then use this option to specify
    the path name of the directory in which the server is located. This option can
    be used only on the command line, and not in option files. On platforms that use
    `systemd`, the value should be given in the value of `MYSQLD_OPTS`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This option is to specify the format for `timestamps` in the log output produced
    by `mysqld_safe`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To specify the server program name contained in the `ledir` directory that you
    want to start. If `mysqld_safe` cannot find the server, use the `--ledir` option
    to specify the `pathname` to the directory where the server with the specified
    name is located. This option is only accepted on the command line, and not from
    the option files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The number of files which `mysqld` can open.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To specify the path and name of the plugin directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This option is to set the `timezone` environment variable to the given option
    value, depending on operating system time zone specification formats.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Run the `mysqld` server as if you have the name of the user. Specify the `user_name` or
    specify the numeric `user ID` as `user_id`.
  prefs: []
  type: TYPE_NORMAL
- en: mysql.server - MySQL Server startup script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the server startup script that is used on MySQL distributions of Unix/Unix-like
    systems. It uses `mysqld_safe` for starting MySQL the server program. The program
    is also used in systems using `V-style` run directories containing scripts. It
    starts system services at particular run levels.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To specify the path of the MySQL installation directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To specify the path of the MySQL data directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: To specify the pathname along with the filename in which the server writes its
    process ID.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To specify in seconds how long to wait for confirmation of the server startup.
    If the server does not start within this time, `mysql.server` exits with an error
    indication. The default value for the option is 900 seconds and a value of 0 means
    not to wait at all for startup and providing negative values means to wait forever
    (there should not be a timeout).
  prefs: []
  type: TYPE_NORMAL
- en: mysqld_multi - managing multiple MySQL servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mysqld_multi` is designed for managing several `mysqld` processes that listen
    for the connections on different Unix socket files and TCP/IP ports. It can also
    start or stop the server and report its current status.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqld_multi` searches for the group named `mysqldN` in `my.cnf` or in the
    file provided as the `--default-file` option. Here N can be any positive number.
    This number is referred to as the option group number, that is `GNR`. Group numbers
    separate option groups from one another and are in arguments to `mysqld_multi`
    to specify which server is to be started,stopped, or the status requested for.
    Options in this group are the same as we use in the `[mysqld]` group used for
    starting `mysqld`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute `mysqld_multi`, the following syntax is used :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding syntax, start, stop, reload (stop and restart) and report refers
    to the operation to be performed. Based on the `GNR` list values specified, you
    can perform targeted operations on single or multiple servers.
  prefs: []
  type: TYPE_NORMAL
- en: Please make sure that the data directory for all servers is fully accessible
    to the Unix account by which the specific `mysqld` process is started. Do not
    use a root account unless you know exactly what you are going to do with it.
  prefs: []
  type: TYPE_NORMAL
- en: Installation programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The programs discussed in this section are used during the installation process
    or when upgrading the MySQL, so make sure you understand it correctly before doing
    any modifications on the program.
  prefs: []
  type: TYPE_NORMAL
- en: comp_err - compiling the MySQL error msg file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This creates the `errmsg.sys` file which is used by `mysqld` to identify the
    error messages and display individual error codes. `comp_err` is normally run
    automatically when MySQL is built. The `errmsg.sys` file is compiled from the
    text file located in MySQL distributions at `sql/share/errmsg-utf8.txt`. It also
    generates `sql_state.h`, `mysqld_ername.h`, and `mysqld_error.h` header files.
  prefs: []
  type: TYPE_NORMAL
- en: '`comp_err` has several options and can be retrieved using the `--help` option
    in the previous command.'
  prefs: []
  type: TYPE_NORMAL
- en: mysql_secure_installation - improving MySQL installation security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The program has ways to enable and improve the security of the MySQL installation,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting passwords for `root` accounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing `root` accounts that can be accessed outside the `localhost`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing anonymous accounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing test database privileges that permit anyone to access databases that
    start with names `test_`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute the `mysql_secure_installation` command without any arguments if you
    want normal usage with the local MySQL server. It will ask you further to check
    which actions to perform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `validate_password` plugin can be used to strengthen password checking.
    If the plugin is not already installed, it will ask you to install and once installed
    and enabled, it can validate for the password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execute `mysql_secure_installation` with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can use the `--help` option here and retrieve a list of other options whenever
    required.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_ssl_rsa_setup - creating SSL/RSA files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, this program is for generating SSL certificates and key
    files and RSA key-pair files, if those files are missing and files are required
    to support secure connections. `mysql_ssl_rsa_setup` can also be used to create
    new files if any of the existing ones have expired.
  prefs: []
  type: TYPE_NORMAL
- en: The `Openssl` command is used by `mysqlssl_rsa_setup`, so using it is necessary
    to have `OpenSSL` installed on your machine. To generate these files automatically
    by the server, it can use MySQL distributions compiled using `OpenSSL`, which
    is another way to generate `SSL` and `RSA` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute `mysql_ssl_rsa_setup` , as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Use the `--help` option here and retrieve a list of other options if required.
  prefs: []
  type: TYPE_NORMAL
- en: Using `ssl` `mysql_ssl_rsa_setup` lowers the barrier to `ssl` and makes it easier
    to generate the required files but the files that are generated are self-signed,
    which is not very secure. You can consider obtaining a CA certificate from the
    respective authority.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_tzinfo_to_sql - loading the timezone tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This program gets the content of the `hostsystem` zone info database (files
    describing time zones) and loads the information in the time zone tables of MySQL.
    If the system does not have a zone info database, you can use the downloadable
    package with `POSIX` standard `timezone_2017c_posix_sql.zip` and non `POSIX` standard `timezone_2017c_leaps_sql.zip` from [https://dev.mysql.com/downloads/timezones.html](https://dev.mysql.com/downloads/timezones.html).
  prefs: []
  type: TYPE_NORMAL
- en: '`mysql_tzinfo_to_sql` can be executed in the following different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: After running the `mysql_tzinfo_to_sql` program, it is highly recommended to
    restart the server so that it will not use any previously cached `timezone` data.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_upgrade - checking and upgrading MySQL tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, this is used for upgrade operations. It checks for any
    incompatibility and makes repairs if it is necessary and also updates the grant
    tables with any changes in new versions of MySQL. It also updates the system tables
    so you can take advantage of any new privilege or compatibility that might have
    been added in the newer version.
  prefs: []
  type: TYPE_NORMAL
- en: Before performing an upgrade always backup your current MySQL installation.
  prefs: []
  type: TYPE_NORMAL
- en: If `mysql_upgrade` finds that a table has possible incompatibility, it performs
    a table check and attempts repairing the table, and if it cannot repair it, it
    will ask for a manual table repair.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysql_upgrade` should be executed each time MySQL is upgraded. It communicates
    directly with the MySQL server and sends the required SQL statements to perform
    an upgrade.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we run `mysql_upgrade`, we should restart the server. If any changes made
    to system tables are taken into effect, before running it, you should make sure
    the server is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute `mysql_upgrade` with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You can use the `--help` option here and retrieve a list of other options whenever
    required.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 client programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL 8 client programs are the programs that are commonly used to connect
    to the MySQL database and perform different query operations.
  prefs: []
  type: TYPE_NORMAL
- en: The programs information detailed in the following subsection includes `mysql`—command
    line tools with many commands and related options and configuration for `logging`,
    `mysqlcheck`, `mysqldump`, `mysqlimport`, `mysqlsh`, `mysqladmin` and so on.
  prefs: []
  type: TYPE_NORMAL
- en: mysql - the command-line tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the most commonly used program. The command-line tool is used for executing
    SQL statements directly or using a file in batch mode. It has support for both
    interactive and non-interactive modes. In this section, we will look at the `mysql`
    command line and the various options, commands, logging, and other related programs.
  prefs: []
  type: TYPE_NORMAL
- en: mysql options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mysql` is a command line tool that has been provided for a long time and so
    it has plenty of options to get your work done. The following is the table of
    options with formats and descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Format** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `--auto-rehash` | Enables automatic rehashing |'
  prefs: []
  type: TYPE_TB
- en: '| `--auto-vertical-output` | Enables automatic vertical result set display
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--batch` | Do not use the history file |'
  prefs: []
  type: TYPE_TB
- en: '| `--binary-as-hex` | Displays binary values in hexadecimal notation |'
  prefs: []
  type: TYPE_TB
- en: '| `--binary-mode` | Disables \r\n - to - \n translation and treatment of \0
    as end-of-query |'
  prefs: []
  type: TYPE_TB
- en: '| `--bind-address` | Uses specified network interface to connect to MySQL server
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--character-sets-dir` | Directory where character sets are installed |'
  prefs: []
  type: TYPE_TB
- en: '| `--column-names` | Writes column names in results |'
  prefs: []
  type: TYPE_TB
- en: '| `--column-type-info` | Displays result set metadata |'
  prefs: []
  type: TYPE_TB
- en: '| `--comments` | Ascertains whether to retain or strip comments in statements
    sent to the server |'
  prefs: []
  type: TYPE_TB
- en: '| `--compress` | Compresses all information sent between client and server
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--connect-expired-password` | Indicates to server that client can handle
    expired password sandbox mode |'
  prefs: []
  type: TYPE_TB
- en: '| `--connect_timeout` | Number of seconds before connection timeout |'
  prefs: []
  type: TYPE_TB
- en: '| `--database` | The database to use |'
  prefs: []
  type: TYPE_TB
- en: '| `--debug` | Writes debugging log; supported only if MySQL was built with
    debugging support |'
  prefs: []
  type: TYPE_TB
- en: '| `--debug-check` | Prints debugging information when program exits |'
  prefs: []
  type: TYPE_TB
- en: '| `--debug-info` | Prints debugging information, memory, and CPU statistics
    when program exits |'
  prefs: []
  type: TYPE_TB
- en: '| `--default-auth` | Authentication plugin to use |'
  prefs: []
  type: TYPE_TB
- en: '| `--default-character-set` | Specifies default character set |'
  prefs: []
  type: TYPE_TB
- en: '| `--defaults-extra-file` | Reads named option file in addition to usual option
    files |'
  prefs: []
  type: TYPE_TB
- en: '| `--defaults-file` | Reads only named option file |'
  prefs: []
  type: TYPE_TB
- en: '| `--defaults-group-suffix` | Option group suffix value |'
  prefs: []
  type: TYPE_TB
- en: '| `--delimiter` | Sets the statement delimiter |'
  prefs: []
  type: TYPE_TB
- en: '| `--enable-cleartext-plugin` | Enables cleartext authentication plugin |'
  prefs: []
  type: TYPE_TB
- en: '| `--execute` | Executes the statement and quit |'
  prefs: []
  type: TYPE_TB
- en: '| `--force` | Continues even if an SQL error occurs |'
  prefs: []
  type: TYPE_TB
- en: '| `--get-server-public-key` | Pathname to file containing RSA public key |'
  prefs: []
  type: TYPE_TB
- en: '| `--help` | Displays help message and exit |'
  prefs: []
  type: TYPE_TB
- en: '| `--histignore` | Patterns specifying which statements to ignore for logging
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--host` | Connects to MySQL server on given host |'
  prefs: []
  type: TYPE_TB
- en: '| `--html` | Produces HTML output |'
  prefs: []
  type: TYPE_TB
- en: '| `--ignore-spaces` | Ignores spaces after function names |'
  prefs: []
  type: TYPE_TB
- en: '| `--init-command` | SQL statement to execute after connecting |'
  prefs: []
  type: TYPE_TB
- en: '| `--line-numbers` | Writes line numbers for errors |'
  prefs: []
  type: TYPE_TB
- en: '| `--local-infile` | Enables or disable for `LOCAL` capability for `LOAD DATA
    INFILE` |'
  prefs: []
  type: TYPE_TB
- en: '| `--login-path` | Reads login path options from .mylogin.cnf |'
  prefs: []
  type: TYPE_TB
- en: '| `--max_allowed_packet` | Maximum packet length to send to or receive from
    server |'
  prefs: []
  type: TYPE_TB
- en: '| `--max_join_size` | The automatic limit for rows in a join when using `--safe-updates`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--named-commands` | Enables named `mysql` commands |'
  prefs: []
  type: TYPE_TB
- en: '| `--net_buffer_length` | Buffer size for TCP/IP and socket communication |'
  prefs: []
  type: TYPE_TB
- en: '| `--no-auto-rehash` | Disables automatic rehashing |'
  prefs: []
  type: TYPE_TB
- en: '| `--no-beep` | Do not beep when errors occur |'
  prefs: []
  type: TYPE_TB
- en: '| `--no-defaults` | Reads no option files |'
  prefs: []
  type: TYPE_TB
- en: '| `--one-database` | Ignores statements except those for the default database
    named on the command line |'
  prefs: []
  type: TYPE_TB
- en: '| `--pager` | Uses the given command for paging query output |'
  prefs: []
  type: TYPE_TB
- en: '| `--password` | Password to use when connecting to server |'
  prefs: []
  type: TYPE_TB
- en: '| `--pipe` | On Windows, connect to server using named pipe |'
  prefs: []
  type: TYPE_TB
- en: '| `--plugin-dir` | Directory where plugins are installed |'
  prefs: []
  type: TYPE_TB
- en: '| `--port` | TCP/IP port number to use for connection |'
  prefs: []
  type: TYPE_TB
- en: '| `--print-defaults` | Print default options |'
  prefs: []
  type: TYPE_TB
- en: '| `--prompt` | Set the prompt to the specified format |'
  prefs: []
  type: TYPE_TB
- en: '| `--protocol` | Connection protocol to use |'
  prefs: []
  type: TYPE_TB
- en: '| `--quick` | Do not cache each query result |'
  prefs: []
  type: TYPE_TB
- en: '| `--raw` | Writes column values without escape conversion |'
  prefs: []
  type: TYPE_TB
- en: '| `--reconnect` | If the connection to the server is lost, automatically tries
    to reconnect |'
  prefs: []
  type: TYPE_TB
- en: '| `--i-am-a-dummy, --safe-updates` | Allows only `UPDATE` and `DELETE` statements
    that specify key values |'
  prefs: []
  type: TYPE_TB
- en: '| `--secure-auth` | Do not send passwords to server in old (pre-4.1) format
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--select_limit` | The automatic limit for `SELECT` statements when using
    `--safe-updates` |'
  prefs: []
  type: TYPE_TB
- en: '| `--server-public-key-path` | Pathname to file containing RSA public key |'
  prefs: []
  type: TYPE_TB
- en: '| `--shared-memory-base-name` | The name of shared memory to use for shared-memory
    connections |'
  prefs: []
  type: TYPE_TB
- en: '| `--show-warnings` | Shows warnings after each statement if there are any
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--sigint-ignore` | Ignores `SIGINT` signals (typically the result of typing
    *Control*+*C*) |'
  prefs: []
  type: TYPE_TB
- en: '| `--silent` | Silent mode |'
  prefs: []
  type: TYPE_TB
- en: '| `--skip-auto-rehash` | Disables automatic rehashing |'
  prefs: []
  type: TYPE_TB
- en: '| `--skip-column-names` | Do not write column names in results |'
  prefs: []
  type: TYPE_TB
- en: '| `--skip-line-numbers` | Skips line numbers for errors |'
  prefs: []
  type: TYPE_TB
- en: '| `--skip-named-commands` | Disables named mysql commands |'
  prefs: []
  type: TYPE_TB
- en: '| `--skip-pager` | Disables paging |'
  prefs: []
  type: TYPE_TB
- en: '| `--skip-reconnect` | Disables reconnecting |'
  prefs: []
  type: TYPE_TB
- en: '| `--socket` | For connections to localhost, the Unix socket file or Windows
    named pipe to use |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-ca` | Path of file that contains list of trusted SSL CAs |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-capath` | Path of directory that contains trusted SSL CA certificates
    in PEM format |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-cert` | Path of file that contains X509 certificate in PEM format
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-cipher` | List of permitted ciphers to use for connection encryption
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-crl` | Path of file that contains certificate revocation lists |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-crlpath` | Path of directory that contains certificate revocation
    list files |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-key` | Path of file that contains X509 key in PEM format |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssl-mode` | Security state of connection to server |'
  prefs: []
  type: TYPE_TB
- en: '| `--syslog` | Logs interactive statements to syslog |'
  prefs: []
  type: TYPE_TB
- en: '| `--table` | Displays output in tabular format |'
  prefs: []
  type: TYPE_TB
- en: '| `--tee` | Appends a copy of output to named file |'
  prefs: []
  type: TYPE_TB
- en: '| `--tls-version` | Protocols permitted for encrypted connections |'
  prefs: []
  type: TYPE_TB
- en: '| `--unbuffered` | Flushes the buffer after each query |'
  prefs: []
  type: TYPE_TB
- en: '| `--user` | MySQL username to use when connecting to server |'
  prefs: []
  type: TYPE_TB
- en: '| `--verbose` | Verbose mode |'
  prefs: []
  type: TYPE_TB
- en: '| `--version` | Displays version information and exit |'
  prefs: []
  type: TYPE_TB
- en: '| `--vertical` | Prints query output rows vertically (one line per column value)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--wait` | If the connection cannot be established, wait and retry instead
    of aborting |'
  prefs: []
  type: TYPE_TB
- en: '| `--xml` | Produces XML output |'
  prefs: []
  type: TYPE_TB
- en: 'Reference : [https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html)'
  prefs: []
  type: TYPE_NORMAL
- en: To get more information on individual options, use that option along with the `--help`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: mysql commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of the SQL statements that you issue are sent to the server for execution.
    There is also a list of commands that `mysql` itself interprets. To get the list
    of all those commands, type `\h` or `\help` at the `mysql>` prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the commands have both long and short form that can be used; except
    short form cannot be used in multi-line comments. The long form is not case sensitive
    but the short form command is case sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: help [arg], \h [arg],\? [arg], ? [arg]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The help `arg[]` command is used to display help messages, along with listing
    all the available commands in `mysql`.
  prefs: []
  type: TYPE_NORMAL
- en: charset charset_name, \C charset_name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To change default charsets, issuing the `SET_NAMES` statement.
  prefs: []
  type: TYPE_NORMAL
- en: clear, \c
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To clear the current output or previous query results from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: connect [db_name host_name], \r [db_name host_name]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To reconnect the server by providing `database` and `host_name` arguments.
  prefs: []
  type: TYPE_NORMAL
- en: edit, \e
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To edit the input statement currently provided.
  prefs: []
  type: TYPE_NORMAL
- en: exit, \q
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To exit the `mysql` command line.
  prefs: []
  type: TYPE_NORMAL
- en: prompt [str], \R [str]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To specify a string and reconfigure it with the `mysql` prompt.
  prefs: []
  type: TYPE_NORMAL
- en: quit, \q
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To exit the `mysql` command line.
  prefs: []
  type: TYPE_NORMAL
- en: status, \s
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is used to check for the status of the server connection that is currently
    being used.
  prefs: []
  type: TYPE_NORMAL
- en: use db_name, \u db_name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To specify using the provided `db_name` as the default database.
  prefs: []
  type: TYPE_NORMAL
- en: mysql logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `mysql` program can do logging as per the following types.
  prefs: []
  type: TYPE_NORMAL
- en: On Unix systems, it writes the logs to the history file with the default name
    `.mysql_history` in the home directory.
  prefs: []
  type: TYPE_NORMAL
- en: On all platforms, if the `--syslog` option is provided, it writes the statements
    to the system logging implementation. On Unix, it is `syslog`, on Windows, it
    is event logs, on Linux distributions, it often goes to the `/var/log/message`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: mysql server-side help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get server-side help from `mysql` , the following syntax is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you provide any argument after the help command, `mysql` uses that argument
    for searching the string for accessing server-side help from the MySQL reference
    manual content. If there is no match for the searched string, the search operation
    fails and it appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: If `search_string` matches multiple contents of a topic, then it shows a list
    of matching topic items. A topic can also be used as `search_string` and looks
    for the entry for the topic. It also contains the wildcard character `%` and `_`
    , which have the same meaning for matching operations performed by the `LIKE`
    operator.
  prefs: []
  type: TYPE_NORMAL
- en: Executing sql from text files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `mysql` client is generally used interactively but it will also allow you
    to execute SQL statements from a file. In order to do so, create a `text_file`,
    which contains several statements that need to be executed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead if `USE db_name` is kept as the first statement of the `text_fil`e
    then you can skip specifying the `db_name` from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If already using the `mysql` connection, then use the source or `\.` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: By using the `--verbose` option, each statement gets displayed just before the
    result produced by it.
  prefs: []
  type: TYPE_NORMAL
- en: mysqladmin - client for administering a MySQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mysqladmin` is the client for administrative operation. It can be used to
    check the server''s configuration, connection status, drop and create database,
    and much more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The execution syntax for the `mysqladmin` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`mysqladmin` supports plenty of program commands, starting from `create db_name`
    to create new database with name `db_name`, `debug` to get debug information,
    `drop db_name` to drop a database, `flush-xxxx` , where `xxxx` can be replaced
    with logs, hosts, privileges, status, tables, threads, and so on. `kill id` to
    kill the server thread or multiple threads, `password new_password` to set a new
    password, `ping` to check the server''s availability, `shutdown` to stop the server,
    `start-slave` to start replication on a slave server, `stop-slave` to stop replication
    on the slave server, `variables` to display server system variables and their
    respective values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqladmin status` commands give results with values of uptime, threads, questions,
    slow queries, opens, and flush tables with relevant information.'
  prefs: []
  type: TYPE_NORMAL
- en: Along with the command list, there are options that come in handy when retrieving
    specific information from the server. Such information can be retrieved using
    the `mysqladmin --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: mysqlcheck - a table maintenance program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This program is used for table maintenance. It checks, repairs, optimizes, or
    analyzes tables.The program can be time consuming, particularly for largesized
    tables. `mysql_upgrade` uses the `mysqlcheck` command for checks and repair of
    all the tables. The `mysqld` server must be running to use the `mysqlcheck` command.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqlcheck` uses `CHECK TABLE`, `REPAIR TABLE`, `ANALYZE TABLE`, and `OPTIMIZE
    TABLE` in a convenient way for the user. If the table repair fails by `mysqlcheck`
    then a manual table repair is required.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the execution syntax for the `mysqlcheck` command :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`mysqlcheck` has a special feature that is the default behavior of checking
    tables. It can be changed by renaming the binary, such as renaming `mysqlcheck`
    to the `mysqlrepair` program by creating a copy of `mysqlcheck` and adding a symbolic
    link to `mysqlcheck` , after which `mysqlrepair` can repair tables instead. This
    also works with the `mysqlanalyze` and `mysqloptimize` options to make them the
    default operation for the `mysqlcheck` command.'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to other administering programs, this program also have many options
    that can be used to get specific information, and by using the `mysqlcheck --help`
    command, a list of options can be retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: mysqldump - a database backup program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This program is a utility program used for making a logical backup by generating
    a set of SQL statements which can be executed to reproduce the original database
    table data and object definition. It dumps one or more database for backup or
    may transfer to another SQL server. It can also generate data output in different
    formats, such as CSV, XML, or other delimited text files.
  prefs: []
  type: TYPE_NORMAL
- en: Performance and scalability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It should not to be considered as a fast or scalable solution for backing up
    large amounts of data. The backup takes some time and restoring data can be very
    slow, as SQL statements involve index creation, disk I/O for insertion, and so
    on. It can retrieve and dump table data row by row; otherwise it can take a whole
    table and buffer it in the memory for dumping it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the execution syntax for `mysqldump`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: There are more than 25 options available for modifying the operation of the
    `mysqldump` command and they can be retrieved by using the `mysqldump --help`
    command. Specific modifications can be used in this command for debugging options,
    help options, connection options, DDL options, and so on, based on your requirement.
  prefs: []
  type: TYPE_NORMAL
- en: mysqlimport - a data import program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This client program provides the `CLI` interface to `LOAD_DATA_INFILE` SQL statements.
    The majority of the options correspond to the clauses of the `LOAD_DATA_INFILE`
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The execution syntax for `mysqlimport` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Options for the commands can be specified on the CLI or in the `[mysqlimport]`
    or `[client]` group of the options file as per your requirement. It provided options
    to retrieve and modify import operations for the data, such as using a different
    delimiter format, debugging, forcing the path of a file, providing default values,
    ignoring and locking tables, and so on, which can be retrieved by using the `mysqlimport
    --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: mysqlpump - a database backup program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This program is a utility program used for making a logical backup by generating
    a set of SQL statements that can be executed to reproduce the original database
    table data and object definition. It dumps one or more databases for backup or
    may transfer to another SQL server.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqlpump` has the following important features :'
  prefs: []
  type: TYPE_NORMAL
- en: Parallel processing of databases and objects in databases, which speeds up the
    dump processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More control over which database objects and databases to dump
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dump user accounts data to account management statements rather than inserting
    data into the system database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The capacity to create compressed output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing the progress indicator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dump file reloading; for `InnoDB` tables it adds indexes after rows are inserted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysqlpump` dumps all the databases, as specified explicitly specified in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To dump multiple databases, specify `--databases` followed by the database
    names to dump. You can also specify `--exclude-databases=` followed by database
    names not to dump. There are many options to be used for dumping databases or
    objects, such as for specifying exclusion or inclusion of databases options, applicable
    for objects such as tables, triggers, routines, events, users, and so on, if they
    support multiple option entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command dumps databases `db1` and `db2` but it will exclude table
    `t1` from the database `db1` and table `t2` from the database `db2`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqlpump` uses parallelism to achieve the concurrent processing and it can
    be between databases or within a database. `--default-parallelism=N` specifies
    the default number of threads used in the queue created by the program and the
    value of `N` is `2` by default. `--parallel-schemas=[N:]db_list` sets up the processing
    queue as per the database name list provided. Thus, additional queues and the
    number of threads can be controlled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqlpump` does not dump `performance_schema`, `nbdinfo`, or `sys` by default
    but can do so by specifying the `--include-databases` option and similarly it
    also does not dump the `INFORMATION_SCHEMA`.'
  prefs: []
  type: TYPE_NORMAL
- en: mysqlsh - the MySQL Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The advanced command line client and editor for MySQL is the very well known
    MySQL Shell. It has capabilities for scripting in Python and JavaScript. When
    connected to the MySQL server using the X Protocol, the X DevAPI can work with
    documents and relational data. It includes the AdminAPI, which enables you to
    work with an `InnoDB` cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL Shell has many options associated with it, but the important ones are
    listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The TCP/IP port number to use with `port_num`. The default port is `33060`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Creates a node session to a single server using the X Protocol and is deprecated
    in 8.0.3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Starts JavaScript mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Starts Python mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Starts SQL mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Starts SQL mode in ClassicSession.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Starts SQL mode in NodeSession.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Starts SQL mode by creating an X protocol connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Options beginning with `--ssl` specify connecting the server using SSL and
    also finding certificates and SSL keys. It works the same way as for the MySQL
    Server and it accepts SSL options : `--ssl-crl`, `--ssl-crlpath`, `--ssl-mode`, `--ssl-ca`, `--ssl-capath`, `--ssl-cert`, `--ssl-cipher`, `--ssl-key`, `--tls-version`.'
  prefs: []
  type: TYPE_NORMAL
- en: Other options not listed can be retrieved using the `mysqlsh --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: mysqlshow - showing database, table, and column information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the client mainly used to quickly check which databases, their tables,
    columns, and indexes exist or not. It provides an interface to some of the SQL
    `SHOW` statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The execution syntax for the command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'By executing the preceding command, you will get information about the databases,
    tables, or columns for which you have privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of databases is shown if no database is given
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of all matching tables in the database is shown if no table is given
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of all the matching columns and column types in the table is displayed
    if no column is given
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous command execution, if you used the SQL wildcard character (`*`,
    `?`, `%`, `_`), then names that are matched by the wildcard are displayed. `*`
    and `?` wildcard characters, if given, are converted into SQL `%` and `_` wildcard
    characters. It might create confusion when trying to display a column with a table
    or a column name with `_` in the name, it displays only names matching the pattern,
    but it can be fixed easily by adding an extra `%` at the end of the command line
    as a separate argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The program has many options to get the desired information by using specific
    option arguments. A few of the important ones are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Specifies the directory name where character sets are installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: If both the client and the server support compression, all the information sent
    is compressed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Enables the `cleartext` authentication plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Requests the RSA public key from the server required for key-pair-based password
    exchange. Also, if a client connects to the server using a secure connection,
    RSA-based password exchange is not needed and is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Displays table indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Specifies options starting with `--ssl` to connect to the server using an SSL
    connection by using certificates and SSL keys.
  prefs: []
  type: TYPE_NORMAL
- en: Many other options not listed here can be retrieved by using the `mysqlshow
    --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: mysqlslap - load emulation client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the diagnostic client program that is used to check client load capability
    for the MySQL server. The program mimics multiple clients accessing the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The execution syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: There are many options available to modify the command in execution, some of
    them, such as `--create` or `--query` , provide a way to specify SQL statements
    or files with statements with specific delimiters.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqlslap` runs at three different stages :'
  prefs: []
  type: TYPE_NORMAL
- en: Creating table, schema, and optionally stored programs or data to test. It uses
    a single client connection only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the load test. It uses multiple client connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cleaning up (dropping tables if specified earlier, and disconnecting). It uses
    a single client connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, creating our own query statement with 20 clients and 100 selects
    to each of them will look as the following `CLI:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '`mysqlslap` can also add or create a query statement of it''s own, as shown
    in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Here, `mysqlslap` will build a statement with a table of two `INT` columns and
    two `VARCHAR` columns and seven clients querying 20 times to each of them. It
    also supports specifying statement files for creating and querying separately
    and running the load test. It provides many such alterations in load testing execution
    with options that you can check by executing the `mysqlslap --help` command on
    the command line.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 administrative programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes different administrative programs along with some utilities
    that will help in doing administration operations such as performing check sum,
    compression and extraction, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: ibdsdi - InnoDB tablespace SDI extraction utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a utility program that extracts serialized dictionary information from
    `InnoDB` tablespace files. Serivalized dictionary information that is SDI data
    will always be present in all persistent `InnoDB` tablespace files. It can be
    run on file-per-table on tablespace files and general tablespace files, system
    tablespace files, and data dictionary tablespace files, but using a temporary
    tablespace or undoing a tablespace is not supported.
  prefs: []
  type: TYPE_NORMAL
- en: '`ibd2sdi` can be used while the server is offline or at runtime. It reads uncommitted
    data of SDI from a specified tablespace and undoes logs and redoes logs that are
    not accessible.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execution for the `idb2sdi` will look like the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '`ibd2sdi` also supports multiple tablespaces but does not run on more that
    one tablespace at a time as the `InnoDB` system tablespace. Specifying each file
    will work as follows :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '`ibd2sdi` outputs SDI data in JSON format.'
  prefs: []
  type: TYPE_NORMAL
- en: There are many options available for the program which can be retrieved using
    the `ibd2sdi --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: innochecksum - offline InnoDB file checksum utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a checksum utility for `InnoDB` files. It reads `InnoDB` tablespace
    files, calculates checksums for them, and compares them with stored checksum values.
    If the comparison fails, it reports error with damaged page details. It was developed
    to verify integrity of the post-power outage but it can also be used after copying
    the files. It is very useful in the event of any damaged page found when running
    `InnoDB.` It will shut down the running server, so to avoid any production issue
    due to damaged pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a tablespace file is open, it cannot be used by `innochecksum`. The execution
    syntax for the command will look as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '`innochecksum` command also has few options to display information of the pages
    being verified and can be retrieved with `innochecksum --help` command.'
  prefs: []
  type: TYPE_NORMAL
- en: myisam_ftdump - displaying full-text index utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a utility for displaying information about `MyISAM` tables and `FULLTEXT`
    indexes. It will scan and dump the entire index, which can be a slow and lengthy
    process. If the server is already running, then you need to make sure to insert
    a `FLUSH TABLES` statement first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execution for the `myisam_ftdump` command will look like the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, `table_name` should be the name of the `MyISAM` table
    with the `.MYI` index extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose the test database has a table named mytexttable with the following
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The index created on id is 0 on `FULLTEXT` index and on the `txt` it is `1`.
    If the working directory is the test database directory, then execute `myisam_ftdump`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '`myisam_ftdump` can also be used to generate a list of index entries in order
    of frequency of occurrence as follows (the first line in Windows and the second
    line for Unix systems):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '`myisam_ftdump` also has several options that can be retrieved by using the `myisam_ftdump
    --help` command.'
  prefs: []
  type: TYPE_NORMAL
- en: myisamchk - MyISAM table-maintenance utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`myisamchk` is a command line tool for getting information about database tables,
    checking, repairing, and optimizing non-partitioned `MyISAM` tables. It works
    with `MyISAM` tables.'
  prefs: []
  type: TYPE_NORMAL
- en: '`CHECK_TABLE` and `REPAIR_TABLE` statements can also be used to check and repair
    `MyISAM` tables.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execution for the `myisamchk` command is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Before running the `myisamchk` command, you must make sure that any other program
    is not using the tables. Otherwise, it will display warning message saying: warning:
    clients are using or haven''t closed the table properly. To do this effectively,
    shut down the MySQL server or lock all tables being used by `myisamchk`.'
  prefs: []
  type: TYPE_NORMAL
- en: This program has many options to perform table maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: myisamlog - displaying MyISAM log file content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This program is a utility for processing content of a MyISAM log file. When
    starting the MySQL server, use the `--log-isam=log_file` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Executing the `myisamlog` command uses syntax as shown in the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The default operation is marked as an update and if recovery is done all writes,
    updates, and deletes are done and errors are counted only. `myisam.log` is the
    default log filename.
  prefs: []
  type: TYPE_NORMAL
- en: The program has some options used to specify offsets, recovery, open a number
    of files, and a few more, which can be retrieved by using the `myisamlog --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: myisampack - generating compressed, read-only MyISAM tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a utility program that compresses `MyISAM` tables. It compresses each
    of the columns in tables separately and compresses the data file by about 40%
    to 70%.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL preferably uses the `mmap()` function to do memory mapping on compressed
    tables; otherwise, it uses normal read/write file operations.
  prefs: []
  type: TYPE_NORMAL
- en: '`myisampack` does not support partitioned tables.'
  prefs: []
  type: TYPE_NORMAL
- en: Once tables are packed, they become read only.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping the server and then going for compress tables is safe way to perform
    the compress operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execution syntax for `myisampack` looks like the following block on the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Specify the index file name with or without the `.MYI` file and also add the
    `pathname` if you are not in the database directory.
  prefs: []
  type: TYPE_NORMAL
- en: After compressing a table with `myisampack`, you should use `myisampack -rq`
    to rebuild the indexes of the compressed table. It supports some of the common
    options, such as versioning, debugging, and so on along with specific compression
    checks, such as `--test`, `--backup`, `--join=big_tbl_name`, `--silent`, and so
    on. If you want to check in detail, you can execute the `myisampack --verbose
    --help` command on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: mysql_config_editor - MySQL configuration utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a utility to store and update the authentication credentials in an encrypted
    login pathfile with the name `.mylogin.cnf`.
  prefs: []
  type: TYPE_NORMAL
- en: For further details, use the `mysql_config_editor --verbose --help` command
    to execute on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: mysqlbinlog - utility for processing binary log files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This program is a utility for processing a server's binary log files. The binary
    log files contain events data which describes modifications to database content.
    The server writes such content to the file in a binary format. In order to get
    them in to a readable (text) format, the `mysqlbinlog` utility is used.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqlbinlog` can also be used to display the content of relay log files written
    by a slave server during the replication setup because the format for the relay
    log and the binary log files are same.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execution for the program syntax is as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several options that modify the format of the output and usage of
    `mysqlbinlog`. They are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It can be converted into a hex dump format that contains byte position, event
    timestamp, and type of the event that occurred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also provides a row event display format that displays data modifications
    information in the form of pseudo-SQL statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also used for making a backup of the binary log files by providing the
    required option values, such as a path for the backup file and type or format
    of the output in the backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you connect to the MySQL server using `mysqlbinlog`, it provides a specific
    server ID to identify itself and requests binary log files from the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The program has some common options which are not mentioned but can be retrieved
    using the `mysqlbinlog --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: mysqldumpslow - summarizing slow query log files.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The program is a utility that helps in reading the log contents of slow query
    log files, containing queries taking a longer time to execute. It parses MySQL
    slow query log files and prints out the summary of the query content.
  prefs: []
  type: TYPE_NORMAL
- en: It generally groups queries that are similar, apart from particular number or
    string data values. It abstracts those values and display a summary output using
    `N` and `S`, respectively. The `-n` and `-a` options are used to modify abstraction
    behavior of the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execution of the program in the command line syntax is as shown in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: You can modify the output by using some options, such as limiting the number
    of result `-t N` , where `N` is the number of query results to be displayed. `-s`
    stands for sort type by query time, lock time, or by rows count, and `-r` for
    reversing the sort order.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the number of environment variables that are
    used directly or indirectly for different MySQL programs, changing their behavior
    with the use of environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: Options provided on the command line take precedence over values specified in
    the option files and on the environment variables, and similarly values in options
    take precedence over the environment variables; so in most cases, it is preferred
    to use an option file instead of environment variables to modify the behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of environment variables and descriptions for the
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CXX`: The name of your C++ compiler for running CMake'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CC`: The name of your C compiler for running CMake'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DBI_USER`: The default username for Perl DBI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DBI_TRACE`: Trace options for Perl DBI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HOME`: The default path for the `mysql` history file is `$HOME/.mysql_history`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LD_RUN_PATH`: Used to specify the location of `libmysqlclient.so`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN`: Enables the `mysql_clear_password` authentication
    plugin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LIBMYSQL_PLUGIN_DIR`: Directory in which to look for client plugins'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LIBMYSQL_PLUGINS`: Client plugins to preload'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_DEBUG`: Debugs trace options when debugging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_GROUP_SUFFIX`: optional group suffix value (such as specifying `--defaults-group-suffix`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_HISTFILE`: The path to the `mysql` history file; if this variable is
    set, its value overrides the default for `$HOME/.mysql_history`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_HISTIGNORE` : Patterns specifying statements that mysql should not log
    to `$HOME/.mysql_history`, `orsyslog if --syslog` is given'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_HOME`: The path to the directory in which the server-specific `my.cnf` file
    resides'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_HOST`: The path to the directory in which the server-specific `my.cnf` file
    resides'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_PWD`: The default password when connecting to `mysqld`; using this is
    insecure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_TCP_PORT` : Default TCP/IP port number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_TEST_LOGIN_FILE` : Name of the `.mylogin.cnf` login path file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATH`: Used by the shell to find MySQL programs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKG_CONFIG_PATH`: Location of the `mysqlclient.pc` `pkg-config` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TMPDIR`: Directory in which temporary files are created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TZ`: This should be set to your local time zone'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UMASK`: User-file creation mode when creating files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UMASK_DIR`: User-directory creation mode when creating directories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USER`: Default user name on Windows when connecting to `mysqld`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_TEST_LOGIN_FILE` is the pathname for the login path file that is created
    by `mysql_config_editor`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `UMASK` and `UMASK_DIR` variables are used as modes instead of masks.
  prefs: []
  type: TYPE_NORMAL
- en: It is necessary to set `PKG_CONFIG_PATH` if using pkg-config for building MySQL
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL GUI tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many MySQL GUI tools available for performing various operations,
    starting with creating databases to performing daily administration tasks.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Workbench
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL Workbench is a graphical tool to work with the MySQL server and databases.
    It fully supports MySQL versions 5.1 and above. In this section, we will briefly
    discuss the capabilities of MySQL Workbench.
  prefs: []
  type: TYPE_NORMAL
- en: 'Five main function provided by MySQL Workbench are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL development**: This creates and manages database connections, and configuration
    for connection parameters. It executes SQL statements using the built-in SQL editor
    and it replaces the standalone application query browser provided earlier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data modeling**: This creates models of database schema graphically, with
    reverse and forward engineering between two different schema as well as on a live
    database. It provides a comprehensive table editor, with easy to use facilities
    for editing tables, columns, triggers, indexes, options, inserts, partitioning,
    routines, views, and privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server administration**: This creates, maintains, and administers server
    instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data migration**: This allows migration from PostgreSQL, SQLite, Sybase ASE,
    Microsoft SQL Server, and other relational database management system objects,
    tables, and data to MySQL. It also facilitates migration from earlier versions
    to the latest release version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MySQL Enterprise support**: This provides enterprise level support for the
    product; for example, MySQL Enterprise backup, MySQL Audit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL workbench is available in two different editions, the Commercial Edition
    and the Community Edition. The Community Edition is provided without any cost.
    The Commercial Edition provides additional features, such as database documentation
    generation.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Notifier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL Notifier is a simple tool used to monitor and adjust the status of local/remote
    MySQL server instances. It is an indicator which is placed in a system tray. It
    is installed with the MySQL installer itself.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Notifier acts as quick launcher with list actions clubbed together that
    can be act and monitored very easily from the system tray itself and along with
    that it keeps monitoring based on specified interval and notifies on status change.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Notifier usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL Notifier stays in system tray and provides one click option for MySQL
    status and maintenance. Followings are important usage of MySQL Notifier.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Notifier provides start, stop, and restart of MySQL Sever instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL Notifier configures MySQL server services and automatically detects and
    adds new MySQL server services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL Notifier monitors both local and remote MySQL instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we dived deep into the ocean of commands that are used for
    almost all the activities for the MySQL server, starting with installation, server
    start up, client programs to administrative programs, and several utility programs
    to cater for different purposes on a routine basis for database administration.
    The chapter also provided a working knowledge of making database backups and importing
    the databases with or without specific tables.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will focus on MySQL 8 data types in detail. It will categorize
    data types based on their content types and it will describe properties in detail
    for each of the categories and storage level details that should be kept in mind
    during table and column design.
  prefs: []
  type: TYPE_NORMAL
