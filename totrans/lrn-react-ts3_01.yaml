- en: TypeScript Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facebook has become an incredibly popular app. As its popularity grew, so did
    the demand for new features. React was Facebook's answer to help more people work
    on the codebase and deliver features quicker. React worked so well for Facebook
    that they eventually open sourced it. Today, React is a mature library for building
    component-based frontends that is extremely popular and has a massive community
    and ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript is also a popular, mature library maintained by a big company â€“ namely,
    Microsoft. It allows users to add strong types to their JavaScript code, helping
    them to be more productive, particularly in large code bases.
  prefs: []
  type: TYPE_NORMAL
- en: This book will teach you how you can use both of these awesome libraries to
    build robust frontends that are easy to maintain. The first couple of chapters
    in the book focus solely on TypeScript. You'll then start to learn about React
    and how you can compose robust frontends using Typescript components with strong
    typing.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll cover TypeScript's relationship to JavaScript and the
    benefits it brings. A basic understanding of JavaScript is therefore required.
    We'll also cover the basics of TypeScript that you'll commonly use when writing
    code for the browser.
  prefs: []
  type: TYPE_NORMAL
- en: You'll come to understand the need to use TypeScript for building a frontend
    and the sort of projects for which TypeScript really shines. You will also see
    how to transpile your TypeScript code into JavaScript so that it can run in a
    browser. Last but not least, you'll learn how you can perform additional checks
    on your TypeScript code to make it readable and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the chapter, you'll be ready to start learning how you can use
    TypeScript for building frontends with React.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the benefits of TypeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding basic types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating interfaces, types aliases, and classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring code into modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript linting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code formatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the following technologies in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TypeScript playground**: This is a website at [https://www.typescriptlang.org/play/](https://www.typescriptlang.org/play/)
    that allows you to play around with and understand the features in TypeScript
    without installing it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js and** `npm`: TypeScript and React are dependent on these. You can
    install them at: [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
    If you already have these installed, make sure Node.js is at least Version 8.2
    and `npm` is at least Version 5.2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TypeScript**: This can be installed via `npm`, entering the following command
    in a terminal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Visual Studio Code**: We''ll need an editor to write our TypeScript code.
    This one can be installed from [https://code.visualstudio.com/](https://code.visualstudio.com/).
    Other editors that could be used can be found at [https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the code snippets in this chapter can be found online at: [https://github.com/carlrip/LearnReact17WithTypeScript/tree/master/01-TypeScriptBasics](https://github.com/carlrip/LearnReact17WithTypeScript/tree/master/01-TypeScriptBasics)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the benefits of TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a JavaScript codebase grows, it can become hard to read and maintain. TypeScript
    is an extension of JavaScript, adding static types. The TypeScript compiler reads
    in TypeScript code that includes type information and produces clean, readable
    JavaScript with the type information transformed and removed. The compiled code
    can then run in our favorite browsers and Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeScript offers several benefits over JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: Coding errors can be caught in the development process earlier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static types allow tools to be built that improve the developer experience and
    productivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript features that aren't implemented in all the browsers yet can actually
    be used in an app that targets those browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll go through these points in detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Catching coding errors early
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The type information helps the TypeScript compiler catch bugs and typos before
    our users run into them. In code editors such as Visual Studio Code, a mistake
    is underlined in red immediately after the user has gone wrong. As an example,
    create a file called `utils.js` and paste in the following code, which calculates
    the total price on an order line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a bug in the code that might be difficult for us to spot. If we open
    the file in Visual Studio Code, no errors are highlighted. If we change the extension
    of the file to `.ts`, Visual Studio Code immediately underlines bits of the code
    that need our attention in red:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d034d3cc-cc4f-425b-a72e-716b4742a954.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Most of the errors are TypeScript asking for some type information. So, let''s
    add some types to our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t worry if you don''t understand what we just added; we''ll go through
    types in the next section. The key point is that we now have a single error highlighted
    to us, which is, in fact, the bug:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1db9c971-c9e6-4618-99ad-484496e137df.png)'
  prefs: []
  type: TYPE_IMG
- en: The bug is that our function references a `price` property in the product object
    that doesn't exist. The property that we should reference is `unitPrice`.
  prefs: []
  type: TYPE_NORMAL
- en: Better developer experience and productivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s fix the bug in the previous section by renaming `price` to `unitPrice`.
    Notice how Visual Studio Code gives us IntelliSense lists `unitPrice` as an option
    because it looking at our type definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0bfbc717-3073-4c1c-9a09-fccb1457b6cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, TypeScript and Visual Studio Code are using the types to provide a better
    authoring experience for us. As well as IntelliSense, we are provided with code
    navigation features, and the safe renaming of functions and variables across multiple
    files. These features increase our productivity, particularly when the code base
    is large and there is a team of people working on it.
  prefs: []
  type: TYPE_NORMAL
- en: Using future JavaScript features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is another benefit of TypeScript that is important to understand. TypeScript
    allows us to use some features in JavaScript that haven't yet been adopted by
    all browsers but still target those browsers. TypeScript achieves this by transpiling
    the use of these features down to JavaScript code that the targeted browser does
    support.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s look at the exponentiation operator (`**`) in ES7, which
    isn''t supported in IE. Let''s create a file called `future.ts` and enter the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the program in a browser, it should put `9` into the console. Before
    we do that, let''s run the code against the TypeScript compiler to get the transpiled
    JavaScript. Run the following command in a terminal in the same directory as `future.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This should generate a file called `future.js` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: So, TypeScript converted the exponentiation operator to a call to the `Math.pow`
    function, which is supported in IE. To confirm that this works, paste the generated
    JavaScript code into the console in IE and the output should be `9`.
  prefs: []
  type: TYPE_NORMAL
- en: This example is purposely simple but probably not that useful. `Async/await`,
    **spread** operators, **rest** parameters, and **arrow functions** are far more
    useful features that IE doesn't support but TypeScript allows the use of. Don't
    worry if you don't know what the features in the last sentence are, as we'll cover
    them when we need them in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding basic types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We touched on types in the last section. In this section, we'll go through the
    basic types that are commonly used in TypeScript so that we start to understand
    what cases we should use in each type. We'll make heavy use of the online TypeScript
    playground, so be sure to have that ready.
  prefs: []
  type: TYPE_NORMAL
- en: Primitive types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before understanding how we declare variables and functions with types in TypeScript,
    let''s briefly look at primitive types, which are the most basic types. Primitive
    types are simple values that have no properties. TypeScript shares the following
    primitive types with JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string`: Represents a sequence of Unicode characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number`: Represents both integers and floating-point numbers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`boolean`: Represents a logical true or false'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`undefined`: Represents a value that hasn''t been initialized yet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`null`: Represents no value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Types for JavaScript variables are determined at runtime. Types for JavaScript
    variables can also change at runtime. For example, a variable that holds a number
    can later be replaced by a string. Usually, this is unwanted behavior and can
    result in a bug in our app.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript annotations let us declare variables with specific types when we
    are writing our code. This allows the TypeScript compiler to check that the code
    adheres to these types before the code executes at runtime. In short, type annotations
    allow TypeScript to catch bugs where our code is using the wrong type much earlier
    than we would if we were writing our code in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript annotations let us declare variables with types using the `:Type`
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s browse to the TypeScript playground and enter the following variable
    declaration into the left-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The transpiled JavaScript will appear on the right-hand side as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That `let` has been converted to `var`. This is because the compiler that the
    playground uses is set to target a wide range of browsers, some of which don't
    support `let`. Also, notice that the type annotation has disappeared. This is
    because type annotations don't exist in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a second line to our program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that a red line appears under `unitPrice`, and if you hover over it,
    you are correctly informed that there is a type error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c5e5cfcf-3483-4a0a-9e90-9f3c097ca1d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also add type annotations to function parameters for the return value
    using the same `:Type` syntax. Let''s enter the following function into the playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We've declared `unitPrice`, `quantity`, and `discount` parameters, all as numbers.
    The `return` type annotation comes after the function's parentheses, which is
    also a number in the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: We have used both `const` and `let` to declare variables in different examples.
    `let` will allow the variable to change the value after the declaration, whereas
    `const` variables can't change. In the preceding function, `priceWithoutDiscount`
    and `discountAmount` never change the value after the initial assignment, so we
    have used `const`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s call our function with an incorrect type for `quantity` and assign the
    result to a variable with an incorrect type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We find that `one` is underlined in red, highlighting that there is a type
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9ebd2959-d814-4f9d-b521-5cb61f8d6826.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we then correct `one` to `1`, `total` should be underlined in red, highlighting
    that there is a type problem with that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ee0cfd8d-b271-46b1-aca4-12ac238767de.png)'
  prefs: []
  type: TYPE_IMG
- en: The TypeScript compiler uses type annotations to check whether values assigned
    to variables and function parameters are valid for their type.
  prefs: []
  type: TYPE_NORMAL
- en: This strong type checking is something that we don't get in JavaScript, and
    it is very useful in large code bases because it helps us immediately detect type
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: Type inference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how type annotations are really valuable, but they involve a lot
    of extra typing. Luckily, TypeScript's powerful type inference system means we
    don't have to provide annotations all the time. We can use type inference when
    we immediately set a variable value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the following variable assignment in the TypeScript playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we hover our mouse over the `flag` variable, we can see that TypeScript
    has inferred the type as `boolean`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1ed07087-0ce6-4247-b4a7-bc53f3f64745.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we add another line beneath this, to incorrectly set `flag` to `Table`,
    we get a type error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5474e9e7-8d0b-4508-b0dc-d710346c5ee8.png)'
  prefs: []
  type: TYPE_IMG
- en: So, when we declare a variable and immediately set its type, we can use type
    inference to save a few keystrokes.
  prefs: []
  type: TYPE_NORMAL
- en: Any
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What if we declare a variable with no type annotation and no value? What does
    TypeScript infer as the type? Let''s enter the following code in the TypeScript
    playground and find out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If we hover our mouse over `flag`, we see it has been given the `any` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d974d3d7-4b98-4dd7-9417-706c5f510702.png)'
  prefs: []
  type: TYPE_IMG
- en: So, the TypeScript compiler gives a variable with no type annotation and no
    immediately assigned value, the `any` type. The `any` type is specific to TypeScript;
    it doesn't exist in JavaScript. It is a way of opting out of type checking on
    a particular variable. It is commonly used for dynamic content or values from
    third-party libraries. However, TypeScript's increasingly powerful type system
    means that we need to use `any` less often these days.
  prefs: []
  type: TYPE_NORMAL
- en: Void
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`void` is another type that doesn''t exist in JavaScript. It is generally used
    to represent a non-returning function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s enter the following function into the TypeScript playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The function simply logs some text into the console and doesn't return anything.
    So, we've marked the return type as `void`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we remove the return type annotation and hover over the function name, `logText`,
    we''ll see that TypeScript has inferred the type to be `void`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fe81d333-89bc-4e5b-b149-03213ce8bb0c.png)'
  prefs: []
  type: TYPE_IMG
- en: This saves us a few keystrokes while writing functions that don't return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Never
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `never` type represents something that would never occur and is typically
    used to specify unreachable areas of code. Again, this doesn't exist in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Time for an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following code into the TypeScript playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The function invokes an infinite loop and never returns, and so we have given
    it a type annotation of `never`. This is different to `void` because void means
    it will return, but with no value.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we used a JavaScript template literal to construct
    the string to log to the console. Template literals are enclosed by back-ticks
    ([PRE15]
  prefs: []
  type: TYPE_NORMAL
- en: 'function foreverTask(taskName: string): never {'
  prefs: []
  type: TYPE_NORMAL
- en: while (true) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(`Doing ${taskName} over and over again ...`);
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: enum OrderStatus {
  prefs: []
  type: TYPE_NORMAL
- en: Paid,
  prefs: []
  type: TYPE_NORMAL
- en: Shipped,
  prefs: []
  type: TYPE_NORMAL
- en: Completed,
  prefs: []
  type: TYPE_NORMAL
- en: Cancelled
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: var OrderStatus;
  prefs: []
  type: TYPE_NORMAL
- en: (function (OrderStatus) {
  prefs: []
  type: TYPE_NORMAL
- en: OrderStatus[OrderStatus["Paid"] = 1] = "Paid";
  prefs: []
  type: TYPE_NORMAL
- en: OrderStatus[OrderStatus["Shipped"] = 2] = "Shipped";
  prefs: []
  type: TYPE_NORMAL
- en: OrderStatus[OrderStatus["Completed"] = 3] = "Completed";
  prefs: []
  type: TYPE_NORMAL
- en: OrderStatus[OrderStatus["Cancelled"] = 4] = "Cancelled";
  prefs: []
  type: TYPE_NORMAL
- en: '})(OrderStatus || (OrderStatus = {}));'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: let status = OrderStatus.Shipped;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: enum OrderStatus {
  prefs: []
  type: TYPE_NORMAL
- en: Paid = 1,
  prefs: []
  type: TYPE_NORMAL
- en: Shipped,
  prefs: []
  type: TYPE_NORMAL
- en: Completed,
  prefs: []
  type: TYPE_NORMAL
- en: Cancelled
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: let status = OrderStatus.Shipped;
  prefs: []
  type: TYPE_NORMAL
- en: console.log(status);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: enum OrderStatus {
  prefs: []
  type: TYPE_NORMAL
- en: Paid = 1,
  prefs: []
  type: TYPE_NORMAL
- en: Shipped = 2,
  prefs: []
  type: TYPE_NORMAL
- en: Completed = 3,
  prefs: []
  type: TYPE_NORMAL
- en: Cancelled = 0
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: const customer = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: "Lamps Ltd",'
  prefs: []
  type: TYPE_NORMAL
- en: 'turnover: 2000134,'
  prefs: []
  type: TYPE_NORMAL
- en: 'active: true'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: customer.turnover = 500000;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: customer.profit = 10000;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'const numbers: number[] = [];'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: numbers.push(1);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: const numbers = [1, 3, 5];
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: console.log(numbers[0]);
  prefs: []
  type: TYPE_NORMAL
- en: console.log(numbers[1]);
  prefs: []
  type: TYPE_NORMAL
- en: console.log(numbers[2]);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: for (let i in numbers) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(numbers[i]);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: numbers.forEach(function (num) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(num);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: const customer = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: "Lamps Ltd",'
  prefs: []
  type: TYPE_NORMAL
- en: 'turnover: 2000134,'
  prefs: []
  type: TYPE_NORMAL
- en: 'active: true'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'let customer: object;'
  prefs: []
  type: TYPE_NORMAL
- en: customer = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: "Lamps Ltd",'
  prefs: []
  type: TYPE_NORMAL
- en: 'turnover: 2000134,'
  prefs: []
  type: TYPE_NORMAL
- en: 'active: true'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: customer.turnover = 2000200;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'const table: Product = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: "Table",'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: 500'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'const chair: Product = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'productName: "Table",'
  prefs: []
  type: TYPE_NORMAL
- en: 'price: 70'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: interface OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'const table: Product = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: "Table",'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: 500'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'const tableOrder: OrderDetail = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'product: table,'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: 1'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: interface OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'const tableOrder: OrderDetail = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'product: table,'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: 1,'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice *
  prefs: []
  type: TYPE_NORMAL
- en: this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'getTotal(discountPercentage: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice *
  prefs: []
  type: TYPE_NORMAL
- en: this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount *
  prefs: []
  type: TYPE_NORMAL
- en: discountPercentage;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'total(discountPercentage: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discountPercentage;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'const tableOrder: OrderDetail = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'product: table,'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: 1,'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discountPercentage: number): string {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discountPercentage;
  prefs: []
  type: TYPE_NORMAL
- en: return (priceWithoutDiscount - discountAmount).toString();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: interface OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(number): number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: interface OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'dateAdded?: Date,'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: interface OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'dateAdded?: Date,'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount?: number): number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'getTotal(discount?: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * (discount || 0);
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: tableOrder.getTotal()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'const table: Product = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: "Table",'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: 500'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: table.name = "Better Table";
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: interface DiscountCode {
  prefs: []
  type: TYPE_NORMAL
- en: 'code: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'percentage: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: interface ProductWithDiscountCodes extends Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'discountCodes: DiscountCode[];'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'const table: ProductWithDiscountCodes = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: "Table",'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: 500,'
  prefs: []
  type: TYPE_NORMAL
- en: 'discountCodes: ['
  prefs: []
  type: TYPE_NORMAL
- en: '{ code: "SUMMER10", percentage: 0.1 },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ code: "BFRI", percentage: 0.2 }'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'type GetTotal = (discount: number) => number;'
  prefs: []
  type: TYPE_NORMAL
- en: interface OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal: GetTotal;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: type Product = {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: type OrderDetail = {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal: (discount: number) => number;'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'const table: Product = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: "Table",'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: 500'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: 'const orderDetail: OrderDetail = {'
  prefs: []
  type: TYPE_NORMAL
- en: 'product: table,'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: 1,'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: class Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: const table = new Product();
  prefs: []
  type: TYPE_NORMAL
- en: table.name = "Table";
  prefs: []
  type: TYPE_NORMAL
- en: table.unitPrice = 500;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: const table = new Product();
  prefs: []
  type: TYPE_NORMAL
- en: table.name = "Table";
  prefs: []
  type: TYPE_NORMAL
- en: table.unitPrice = 500;
  prefs: []
  type: TYPE_NORMAL
- en: const orderDetail = new OrderDetail();
  prefs: []
  type: TYPE_NORMAL
- en: orderDetail.product = table;
  prefs: []
  type: TYPE_NORMAL
- en: orderDetail.quantity = 2;
  prefs: []
  type: TYPE_NORMAL
- en: const total = orderDetail.getTotal(0.1);
  prefs: []
  type: TYPE_NORMAL
- en: console.log(total);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: interface IOrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: class OrderDetail implements IOrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice *
  prefs: []
  type: TYPE_NORMAL
- en: this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: class OrderDetail implements IOrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(product: Product, quantity: number) {'
  prefs: []
  type: TYPE_NORMAL
- en: this.product = product;
  prefs: []
  type: TYPE_NORMAL
- en: this.quantity = quantity;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: const orderDetail = new OrderDetail(table, 2);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'constructor(product: Product, quantity: number = 1) {'
  prefs: []
  type: TYPE_NORMAL
- en: this.product = product;
  prefs: []
  type: TYPE_NORMAL
- en: this.quantity = quantity;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: const orderDetail = new OrderDetail(table);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: class OrderDetail implements IOrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(public product: Product, public quantity: number = 1) {'
  prefs: []
  type: TYPE_NORMAL
- en: this.product = product;
  prefs: []
  type: TYPE_NORMAL
- en: this.quantity = quantity;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: class Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: interface DiscountCode {
  prefs: []
  type: TYPE_NORMAL
- en: 'code: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'percentage: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: class ProductWithDiscountCodes extends Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'discountCodes: DiscountCode[];'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: const table = new ProductWithDiscountCodes();
  prefs: []
  type: TYPE_NORMAL
- en: table.name = "Table";
  prefs: []
  type: TYPE_NORMAL
- en: table.unitPrice = 500;
  prefs: []
  type: TYPE_NORMAL
- en: table.discountCodes = [
  prefs: []
  type: TYPE_NORMAL
- en: '{ code: "SUMMER10", percentage: 0.1 },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ code: "BFRI", percentage: 0.2 }'
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: class Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(public name: string, public unitPrice: number) {'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: interface DiscountCode {
  prefs: []
  type: TYPE_NORMAL
- en: 'code: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'percentage: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: class ProductWithDiscountCodes extends Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(public name: string, public unitPrice: number) {'
  prefs: []
  type: TYPE_NORMAL
- en: super(name, unitPrice);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'discountCodes: DiscountCode[];'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: abstract class Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: class Food extends Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(public bestBefore: Date) {'
  prefs: []
  type: TYPE_NORMAL
- en: super();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: const bread = new Food(new Date(2019, 6, 1));
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: abstract class Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'abstract delete(): void;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: class Food extends Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'deleted: boolean;'
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(public bestBefore: Date) {'
  prefs: []
  type: TYPE_NORMAL
- en: super();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: delete() {
  prefs: []
  type: TYPE_NORMAL
- en: this.deleted = false;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'public product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'public quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'public getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'public product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'public quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'private deleted: boolean;'
  prefs: []
  type: TYPE_NORMAL
- en: 'public delete(): void {'
  prefs: []
  type: TYPE_NORMAL
- en: this.deleted = true;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: const orderDetail = new OrderDetail();
  prefs: []
  type: TYPE_NORMAL
- en: orderDetail.deleted = true;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: class Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'private _unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'get unitPrice(): number {'
  prefs: []
  type: TYPE_NORMAL
- en: return this._unitPrice || 0;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'set unitPrice(value: number) {'
  prefs: []
  type: TYPE_NORMAL
- en: if (value < 0) {
  prefs: []
  type: TYPE_NORMAL
- en: value = 0;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: this._unitPrice = value;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: const table = new Product();
  prefs: []
  type: TYPE_NORMAL
- en: table.name = "Table";
  prefs: []
  type: TYPE_NORMAL
- en: console.log(table.unitPrice);
  prefs: []
  type: TYPE_NORMAL
- en: table.unitPrice = -10;
  prefs: []
  type: TYPE_NORMAL
- en: console.log(table.unitPrice);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'static getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'static getTotal(unitPrice: number, quantity: number, discount: number): number
    {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = unitPrice * quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: const total = OrderDetail.getTotal(500, 2, 0.1);
  prefs: []
  type: TYPE_NORMAL
- en: console.log(total);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: export interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export { Product }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export { Product as Stock }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: import { Product } from "./product";
  prefs: []
  type: TYPE_NORMAL
- en: class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: import { Product as Stock } from "./product";
  prefs: []
  type: TYPE_NORMAL
- en: class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Stock;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: export default interface {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: import Product from "./product";
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: export interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: tsc orderDetail
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '"use strict";'
  prefs: []
  type: TYPE_NORMAL
- en: exports.__esModule = true;
  prefs: []
  type: TYPE_NORMAL
- en: var OrderDetail = (function () {
  prefs: []
  type: TYPE_NORMAL
- en: function OrderDetail() {
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: OrderDetail.prototype.getTotal = function (discount) {
  prefs: []
  type: TYPE_NORMAL
- en: var priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: var discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: return OrderDetail;
  prefs: []
  type: TYPE_NORMAL
- en: '}());'
  prefs: []
  type: TYPE_NORMAL
- en: exports.OrderDetail = OrderDetail;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: tsc orderDetail --target es6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: export class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: getTotal(discount) {
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: tsc orderDetail --outDir dist
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: tsc orderDetail --watch
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * (discount || 0);
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: export class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: doSomething(input) {
  prefs: []
  type: TYPE_NORMAL
- en: input.something();
  prefs: []
  type: TYPE_NORMAL
- en: return input.result;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: tsc orderDetail --noImplicitAny
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'orderDetail.ts(14,15): error TS7006: Parameter ''input'' implicitly has an
    ''any'' type.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'doSomething(input: {something: () => void, result: string}) {'
  prefs: []
  type: TYPE_NORMAL
- en: input.something();
  prefs: []
  type: TYPE_NORMAL
- en: return input.result;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: if (discount) {
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: // We forgot about this branch!
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: tsc orderDetail
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: tsc orderDetail --noImplicitReturns
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'orderDetail.ts(9,31): error TS7030: Not all code paths return a value.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"compilerOptions": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"target": "esnext",'
  prefs: []
  type: TYPE_NORMAL
- en: '"outDir": "dist",'
  prefs: []
  type: TYPE_NORMAL
- en: '"module": "es6",'
  prefs: []
  type: TYPE_NORMAL
- en: '"moduleResolution": "node",'
  prefs: []
  type: TYPE_NORMAL
- en: '"sourceMap": true,'
  prefs: []
  type: TYPE_NORMAL
- en: '"noImplicitReturns": true,'
  prefs: []
  type: TYPE_NORMAL
- en: '"noImplicitAny": true'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: tsc
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"compilerOptions": {'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"files": ["product.ts", "orderDetail.ts"]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"compilerOptions": {'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"include": ["src/**/*"]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: tsc
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: npm install -g tslint
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: export interface Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'unitPrice: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"rules": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"member-access": true'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: export class OrderDetail {
  prefs: []
  type: TYPE_NORMAL
- en: 'public product: Product;'
  prefs: []
  type: TYPE_NORMAL
- en: 'public quantity: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'public getTotal(discount: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: const priceWithoutDiscount = this.product.unitPrice * this.quantity;
  prefs: []
  type: TYPE_NORMAL
- en: const discountAmount = priceWithoutDiscount * discount;
  prefs: []
  type: TYPE_NORMAL
- en: return priceWithoutDiscount - discountAmount;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"extends": ["tslint:recommended"]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"extends": ["tslint:recommended"],'
  prefs: []
  type: TYPE_NORMAL
- en: '"rules": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"interface-name": false'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"extends": ["tslint:recommended"],'
  prefs: []
  type: TYPE_NORMAL
- en: '"linterOptions": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"exclude": ["node_modules/**/*.ts"]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: const flag = false;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: class Product {
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(public name: string, public unitPrice: number) {}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: let table = new Product();
  prefs: []
  type: TYPE_NORMAL
- en: table.name = "Table";
  prefs: []
  type: TYPE_NORMAL
- en: table.unitPrice = 700;
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: If we want our TypeScript program to support IE11, what should the compiler`--target`
    option be?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it possible to get the TypeScript compiler to transpile ES6 `.js` files?
    If so, how?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we prevent `console.log()` statements from getting into our code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[http://www.typescriptlang.org](http://www.typescriptlang.org) has great documentation
    on TypeScript. It is worth looking at the following pages of this site to cement
    your knowledge, or using them as a quick reference guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic types**: [https://www.typescriptlang.org/docs/handbook/basic-types.html](https://www.typescriptlang.org/docs/handbook/basic-types.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interfaces**: [https://www.typescriptlang.org/docs/handbook/interfaces.html](https://www.typescriptlang.org/docs/handbook/interfaces.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Classes**: [https://www.typescriptlang.org/docs/handbook/classes.html](https://www.typescriptlang.org/docs/handbook/classes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modules**: [https://www.typescriptlang.org/docs/handbook/modules.html](https://www.typescriptlang.org/docs/handbook/modules.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compiler Options**: [https://www.typescriptlang.org/docs/handbook/compiler-options.html](https://www.typescriptlang.org/docs/handbook/compiler-options.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full list of `tslint` rules can be found at [https://palantir.github.io/tslint/rules/](https://palantir.github.io/tslint/rules/).
  prefs: []
  type: TYPE_NORMAL
