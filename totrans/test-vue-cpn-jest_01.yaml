- en: '*Chapter 1*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write the First Vue.js Component Unit Test in Jest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The official VueJS testing library, **vue-test-utils** ([https://github.com/vuejs/vue-test-utils](https://github.com/vuejs/vue-test-utils)),
    which is based on **avoriaz** ([https://github.com/eddyerburgh/avoriaz](https://github.com/eddyerburgh/avoriaz)),
    is just around the corner. Indeed, **@EddYerburgh** ([https://twitter.com/EddYerburgh](https://twitter.com/EddYerburgh))
    is doing a very good job of creating it. This library provides all the necessary
    tooling to make writing unit tests in a VueJS application easy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Jest** ([https://facebook.github.io/jest](https://facebook.github.io/jest)),
    on the other side, is a testing framework developed at Facebook, which makes testing
    a breeze using a number of awesome features, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Almost no configuration by default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A very cool interactive mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests in parallel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing with Spies, stubs, and mocks out of the box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in code coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snapshot testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Module-mocking utilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You've probably already written tests without using any of these tools, just
    by using Karma, Mocha, Chai, Sinon, and so on, but you'll see how much easier
    it can be with these tools.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up a vue-test Sample Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating a new project using `vue-cli` ([https://github.com/vuejs/vue-cli](https://github.com/vuejs/vue-cli))
    and answering NO to all yes/no questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll need to install some dependencies, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`jest-vue-preprocessor` ([https://github.com/vire/jest-vue-preprocessor](https://github.com/vire/jest-vue-preprocessor))
    is required to make Jest understand `.vue` files, and `babel-jest` ([https://github.com/facebook/jest/tree/master/packages/babel-jest](https://github.com/facebook/jest/tree/master/packages/babel-jest))
    is required for integration with Babel.'
  prefs: []
  type: TYPE_NORMAL
- en: Now install 'vue-test-utils' library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the following Jest configuration in the `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`moduleFileExtensions` will tell Jest which extensions to look for, and `transform`
    will tell Jest which preprocessor to use for a file extension.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add a `test` script to the `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Testing a Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using single-file components here, and I haven't checked whether splitting
    them into their own `HTML`, `CSS`, or `js` files works or not, so let's assume
    you're doing that as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a `MessageList.vue` component under `src/components`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And then update `App.vue` to use it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We already have a couple of components that we can test. Let''s create a `test`
    folder under the project root and an `App.test.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we run `npm test` (or `npm t` as a shorthand version), the test should
    run and pass. Since we''re modifying the tests, let''s run it in **watch mode**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The Problem with Nested Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This test is too simple. Let''s check that the output is expected as well.
    For that, we can use the amazing Snapshot feature of Jest, which will generate
    a snapshot of the output and check it against the upcoming runs. Add after the
    previous `it` in `App.test.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a `test/__snapshots__/App.test.js.snap` file. Let''s open
    it and inspect it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you don't know very much about Snapshot, don't worry; I'll cover it in more
    depth in *Chapter 9*, *Snapshot Testing*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you haven''t noticed, there is a big problem here: the `MessageList`
    component has been rendered as well. **Unit tests** must be tested as **independent
    units**, meaning that in `App.test.js`, we want to test the `App` component and
    not have to care about anything else at all.'
  prefs: []
  type: TYPE_NORMAL
- en: This can be the cause of several problems. Imagine, for example, that the children
    components (`MessageList`, in this case) perform side-effect operations on the
    `created` hook, such as the calling of `fetch`, there being a Vuex action, or
    a change of state. That's something we definitely don't want.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, **shallow rendering** solves this nicely.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Shallow Rendering?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Shallow rendering** ([http://airbnb.io/enzyme/docs/api/shallow.html](http://airbnb.io/enzyme/docs/api/shallow.html))
    is a technique that ensures that your component is rendering without children.
    This is useful for:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing only the component you want to test (that's what unit tests stand for)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding side effects that children components can have, such as making HTTP
    calls, calling store actions, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing a Component with Vue-Test-Utils
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`vue-test-utils` provides us with shallow rendering, among other features.
    We could rewrite the previous test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, if you''re still running Jest in `watch` mode, you''ll see that the
    test still passes, but the Snapshot doesn''t match. Press *u* to regenerate it.
    Then, open and inspect it again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Do you see? Now, no children have been rendered and we tested the `App` component
    **fully isolated** from the component tree. Also, if you have any `created` or
    other hooks in the children's components, they haven't been called either.
  prefs: []
  type: TYPE_NORMAL
- en: If you're curious about *how shallow rendering is implemented*, check out the
    **source code** ([https://github.com/vuejs/vue-test-utils/blob/dev/packages/test-utils/src/shallow-mount.js](https://github.com/vuejs/vue-test-utils/blob/dev/packages/test-utils/src/shallow-mount.js))
    and you'll see that it is basically stubbing the `components` key, the `render`
    method, and the life cycle hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same vein, you can implement the `MessageList.test.js` test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can find the full example from this chapter on **GitHub** ([https://github.com/alexjoverm/vue-testing-series/tree/lesson-1](https://github.com/alexjoverm/vue-testing-series/tree/lesson-1)).
  prefs: []
  type: TYPE_NORMAL
