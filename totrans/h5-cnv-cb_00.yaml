- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HTML5 canvas is revolutionizing graphics and visualizations on the Web.
    Powered by JavaScript, the HTML5 Canvas API enables web developers to create visualizations
    and animations right in the browser without Flash. Although the HTML5 Canvas is
    quickly becoming the standard for online graphics and interactivity, many developers
    fail to exercise all of the features that this powerful technology has to offer.
  prefs: []
  type: TYPE_NORMAL
- en: The **HTML5 Canvas Cookbook** begins by covering the basics of the HTML5 Canvas
    API and then progresses by providing advanced techniques for handling features
    not directly supported by the API such as animation and canvas interactivity.
    It winds up by providing detailed templates for a few of the most common HTML5
    canvas applications—data visualization, game development, and 3D modeling. It
    will acquaint you with interesting topics such as fractals, animation, physics,
    color models, and matrix mathematics.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you will have a solid understanding of the HTML5 canvas
    API and a toolbox of techniques for creating any type of HTML5 canvas application,
    limited only by the extent of your imagination.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Getting Started withPaths and Text"), *Getting
    Started with Paths and Text*, begins by covering the basics of sub-path drawing
    and then moves on to more advanced path drawing techniques by exploring algorithms
    to draw zigzags and spirals. Next, the chapter dives into text drawing and then
    completes with an exploration of fractals.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Shape Drawing and Composites"), *Shape Drawing
    and Composites*, begins by covering the basics of shape drawing and also shows
    you how to use color fills, gradient fills, and patterns. Next, the chapter takes
    an in-depth look at transparencies and composite operations, and then provides
    recipes for drawing more complex shapes such as clouds, gears, flowers, card suits,
    and even a full vector-style jet complete with layers and shading.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Working with Images and Videos"), *Working
    with Images and Videos*, covers the basics of image and video handling, shows
    you how to copy-and-paste sections of the canvas, and covers different types of
    pixel manipulation. The chapter also shows you how to convert images into data
    URLs, save a canvas drawing as an image, and load a canvas with a data URL. Finally,
    the chapter ends with a pixilated image focus algorithm that can be used to focus
    and blur images dynamically with pixel manipulation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Mastering Transformations"), *Mastering Transformations*,
    explores what’s possible with canvas transformations, including translations,
    scaling, rotations, mirror transforms, and free-form transformations. In addition,
    the chapter also explores the canvas state stack in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Bringing the Canvas to Life with Animation"),
    *Bringing the Canvas to Life with Animation*, begins by constructing an `Animation`
    class to handle an animation stage, and shows you how to create a linear motion,
    a quadratic motion, and an oscillating motion. Next, it covers some more complex
    animations such as the oscillation of a soap bubble, a swinging pendulum, and
    rotating mechanical gears. Finally, the chapter ends with a recipe for creating
    your own particle physics simulator, and also provides a recipe for creating hundreds
    of microscopic organisms inside the canvas to stress performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Interacting with the Canvas: Attaching Event
    Listeners to Shapes and Regions"), *Interacting with the Canvas: Attaching Event
    Listeners to Shapes and Regions*, begins by constructing an `Events` class which
    extends the canvas API by providing a means for attaching event listeners to shapes
    and regions on the canvas. Next, the chapter covers techniques for getting the
    canvas mouse coordinates, detecting region events, detecting image events, detecting
    mobile touch events, and drag-and-drop. The chapter ends by providing a recipe
    for creating an image magnifier and another recipe for creating a drawing application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Creating Graphs and Charts"), *Creating Graphs
    and Charts*, provides production-ready graph and chart classes, including a pie
    chart, a bar chart, an equation grapher, and a line chart.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Saving the World with Game Development"),
    *Saving the World with Game Development*, gets you started with canvas game development
    by showing you how to create an entire side-scroller game called Canvas Hero.
    The chapter shows you how to create sprite sheets, create levels and boundary
    maps, create classes to handle the hero, the bad guys, the level, and the hero’s
    health, and also shows you how to structure the game engine using an MVC (model
    view controller) design pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Introducing WebGL"), *Introducing WebGL*,
    begins by constructing a WebGL wrapper class to simplify the WebGL API. The chapter
    introduces WebGL by showing you how to create a 3D plane and a rotating cube,
    and also shows you how to add textures and lighting to your models. The chapter
    ends by showing you how to create an entire 3D world that you can explore in first
    person.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendices A](apa.html "Appendix A. Detecting Canvas Support"), [B](apb.html
    "Appendix B. Canvas Security"), and [C](apc.html "Appendix C. Additional Topics")
    discuss other special topics such as canvas support detection, security, canvas
    vs. CSS3 transitions and animations, and the performance of canvas applications
    on mobile devices.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All you need to get started with HTML5 canvas is a modern browser such as Google
    Chrome, Firefox, Safari, Opera, or IE9, and a simple text editor such as notepad.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is geared towards web developers who are familiar with HTML and JavaScript.
    It is written for both beginners and seasoned HTML5 developers with a good working
    knowledge of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: What is HTML5 Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Canvas was originally created by Apple in 2004 to implement Dashboard widgets
    and to power graphics in the Safari browser, and was later adopted by Firefox,
    Opera, and Google Chrome. Today, canvas is a part of the new HTML5 specification
    for next generation web technologies.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML5 canvas is an HTML tag that you can embed inside an HTML document for
    the purpose of drawing graphics with JavaScript. Since the HTML5 canvas is a bitmap,
    every pixel drawn onto the canvas overrides pixels beneath it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the base template for all of the 2D HTML5 Canvas recipes for this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the canvas element is embedded inside the body of the HTML document,
    and is defined with an `id`, a `width`, and a `height`. JavaScript uses the `id`
    to reference the canvas tag, and the `width` and `height` are used to define the
    size of the drawing area. Once the canvas tag has been accessed with `document.getElementById()`,
    we can then define a 2D context with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Although most of this book covers the 2D context, the final chapter, [Chapter
    9](ch09.html "Chapter 9. Introducing WebGL"), uses a 3D context to render 3D graphics
    with WebGL.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text are shown as follows: "Define the `Events` constructor."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "It writes out the text **Hello Logo!** at the origin."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
