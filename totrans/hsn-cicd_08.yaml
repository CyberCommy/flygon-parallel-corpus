- en: Building Pipelines with Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will go into detail about how to set up Jenkins Blue Ocean using
    an existing Jenkins instance and how to set it up using Docker. We will look in
    detail at the Blue Ocean **User Interface** (**UI**) and discuss the differences
    between the Jenkins Classic view and the Blue Ocean view. We will also look at
    the Pipeline Syntax and briefly discuss its uses and explain the two different
    types of Pipeline Syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Jenkins Pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating in Jenkins Blue Ocean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline Syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires a basic understanding of how to interact with a Unix Shell
    environment. We will also briefly discuss the Pipeline Syntax so it would help
    if you have some basic programming skills to understand what a keyword is used
    for in a programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins 2.0 has a different design methodology and flow compared to Jenkins
    1.0\. Instead of using freestyle jobs, there is a new **Domain Specific Language**
    (**DSL**) that is an abbreviated form of the Groovy programming language.
  prefs: []
  type: TYPE_NORMAL
- en: The Pipeline views also function differently to how they do in Jenkins 1.0\.
    The Pipeline stage views also help us visualize the various stages in a pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Why move to Jenkins 2.0?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, to begin with, why move to Jenkins 2.0 at all and not stay with Jenkins
    1.0? The Jenkins Classic views are considered to be cluttered and did not take
    ease of use into account. Jenkins 2.0 made a big push on using Docker Images in
    a more intuitive manner. Also, the new UI includes a Jenkins pipeline editor and
    changes the way you find your builds by introducing a pipeline view. The goal
    for the new UI is to reduce clutter and increase clarity for every member of a
    team that uses Jenkins. The new UI also has GitHub and Bitbucket integration as
    well as Git integration. The Jenkins 2.0 UI is essentially a collection of plugins
    that you install called Blue Ocean.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Blue Ocean plugin on an existing instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you install Jenkins on most platforms, you will not have the Blue Ocean plugin
    installed with all of its dependent plugins by default. You will need to make
    sure that you are running on Jenkins version 2.7.x or greater to install the Blue
    Ocean plugin.
  prefs: []
  type: TYPE_NORMAL
- en: In order to install plugins on a Jenkins instance, you must have administrator
    permission that is set through matrix-based security, and any Jenkins administrators
    can also configure the permissions of other users in the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to install the Blue Ocean plugin are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you are logged in as a user with administrator permission
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Jenkins home page, or the dashboard in Jenkins Classic, click **Manage
    Jenkins** on the left side of the dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next click **Manage Plugins** in the center of the Manage Jenkins page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Available tab and type `Blue Ocean` into the Filter textbox, that
    filters the list of plugins to those whose name and/or description contains the
    words blue and ocean
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please read [Chapter 7](6b13378c-73a7-4dc5-b547-0e6f2f153927.xhtml), *Developing
    Plugins*, specifically the *Installing Jenkins plugins* section for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Blue Ocean plugin through a Jenkins Docker Image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to make sure that you have Docker installed in order to get the
    Jenkins CI Docker Image.
  prefs: []
  type: TYPE_NORMAL
- en: Docker prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Docker leverages the operating system's virtualization technologies, the
    installation requirements for Docker are specific.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OS X requirements are:'
  prefs: []
  type: TYPE_NORMAL
- en: 2010 or newer model Mac with Intel's MMU virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS X El Capitan 10.11 or newer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Windows requirements are:'
  prefs: []
  type: TYPE_NORMAL
- en: 64-bit Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 Pro, Enterprise, or Education (not Home, not Windows 7 or 8) to install
    Hyper-V
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 Anniversary Update or better
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to your machine's BIOS to turn on virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To install Docker on your operating system, visit the Docker store ([https://store.docker.com/search?type=edition&offering=community](https://store.docker.com/search?type=edition&offering=community)) website
    and click the Docker Community Edition box that is suitable for your operating
    system or cloud service. Follow the installation instructions on their website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that Docker is installed by checking the Docker version using either
    a Windows Command Prompt or an OS X/Linux Terminal application. Run the following
    in your command-line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/71166b35-4c61-4c35-8da1-d93477645440.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that I have Docker version 18 installed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get Docker images, you need to make sure that you have an account
    in Docker Hub ([https://hub.docker.com/](https://hub.docker.com/)). Once you have
    an account in Docker Hub and Docker is installed, grabbing the latest Jenkins
    CI Docker image is straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in a Windows Command Prompt or a Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/75f86bc1-49d1-46fe-b27e-6cf0c368a2ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that I have already pulled the `jenkinsci/blueocean` Docker image
    and so the command did not get pulled from Docker Hub but instead printed out
    a SHA hash checksum. This shows that I already have the latest Docker image for
    `jenkinsci/blueocean`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will need to get the Jenkins Docker container up and running, and
    you will need to run the following command in a Terminal or Command Prompt shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1095a144-6ed5-4b66-8f19-dcd414e930c8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can make this easier by simply creating a shell script that does this for
    you or by creating an alias.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a shell script that I created in a text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ae753d6a-1d5e-4f9c-a5ee-e10d275e3071.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I have a personal `bin` directory where I store all of my personal scripts
    in `~/bin`, and then I make sure to add it to the `PATH` variable. The script
    filename is called `run-jenkinsci-blueocean`. We need to make sure that the script
    is executable by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then all I have to do is run the `~/bin/run-jenkinsci-blueocean` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also create an alias in Unix similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notice here that I added this shell alias in my `.zshrc` file, but you can just
    as easily add this to a `.bashrc` file.
  prefs: []
  type: TYPE_NORMAL
- en: Windows users can create a batch file or find some other way to make running
    the Docker command easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to stop the Docker container, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will show all the running containers in your system; you will
    need to look at the `Container ID`, `NAMES` column, and copy the ID that corresponds
    to the Docker image `jenkinsci/blueocean`. Lastly, to stop the container you need
    to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that because we used the `--name jenkins-blueocean` options in the `docker
    run` command in the shell script, Docker created a container with the name `jenkins-blueocean`;
    if we had not done so, then Docker would have created a name for the container
    for us. We can also use the container ID and name to stop the container, that
    is shown when you issue the `docker ps -a` command in a Terminal or Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Jenkins is running, you can go here: `http://localhost:8080`and you will
    need to unlock Jenkins by providing the default password generated for the administrator.
    In [Chapter 5](3e1059c7-00d0-48a6-882b-7d7dbdf8aa50.xhtml), *Installation and
    Basics of Jenkins*, we skipped the getting started step of installing suggested
    plugins, but this time I would recommend that you install the suggested plugins
    on the Getting Started screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1317bc5f-f095-4bfa-af7a-1ccae703e3c4.png)'
  prefs: []
  type: TYPE_IMG
- en: By clicking the Install suggested plugins button, you will get all of the suggested
    plugins and dependent plugins, that will help you work on the new Jenkins 2.0
    flow with pipelines and more.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Blue Ocean Jenkins view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to make sure that you click the Open Blue Ocean button, that looks
    similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/badaaee4-6cfc-4e8b-b903-2084093bdf24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the Open Blue Ocean button, you will be redirected to this URL:
    `http://localhost:8080/blue/organizations/jenkins/pipelines`. The Jenkins UI will
    look very different and behave differently.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the initial screen you will see, as we have not created any pipelines
    yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cfc6c32e-e7bd-417b-a6e9-af003b4b6d79.png)'
  prefs: []
  type: TYPE_IMG
- en: We will explore the Pipeline Syntax and how to navigate the Jenkins 2.0 UI in
    the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create our first pipeline by using the Jenkins 2.0 UI and will also
    create a Jenkinsfile with the pipeline editor that is built in to the new Jenkins
    2.0 UI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Jenkins pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step we will do is click the Create a new Pipeline button. You will
    be redirected to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/af4a51b2-db74-49c2-a980-cd22ecf1210e.png)'
  prefs: []
  type: TYPE_IMG
- en: For the purposes of this chapter, we will use an existing GitHub repository
    that I created, but you can easily use Bitbucket and your own code that is hosted
    on either GitHub or Bitbucket. In order for this to work, you will need to make
    sure that you have an account on GitHub, and if you do not, make sure to sign
    up for GitHub ([https://github.com/](https://github.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Providing a personal access token for GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to create a personal access token if you don''t have one already
    in GitHub. Notice in the following screenshot that there is a link called Create
    an access key here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e8dd5456-9d1a-4bc4-8b5c-1b67f9370adf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the Create an access key here link, you will be redirected to
    the following GitHub page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ec54ab3d-fec2-4178-ad76-4be2a213ebf9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can just keep the default options checked and then click the green button
    titled Generate token. Make sure to keep this personal access token in a safe
    place as it will only be shown once; copy it as we will need it. You will need
    to paste the access token into the Connect to Github input box and then click
    the blue Connect button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/186e26ea-6f1d-4a97-b138-a35240b48b9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Picking your GitHub organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to pick the GitHub organization that you belong to. In the screenshot
    that follows, I pick the GitHub username organization of `jbelmont`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/64d91c75-d3ce-4f41-8a33-536cfb691e72.png)'
  prefs: []
  type: TYPE_IMG
- en: Picking the GitHub repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last step that you need to do is to actually pick the GitHub repository
    where you want to create the Jenkins pipeline. In the screenshot here, I entered
    `cucumber-examples` and picked the dropdown. Then the blue Create Pipeline button
    was enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/78944deb-ff37-401d-87e4-9e90f1642745.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a pipeline with the pipeline editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the GitHub repo that we have chosen, there is no existing Jenkinsfile and
    so we are redirected to the pipeline editor screen, where we can create our first
    Jenkinsfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/856f8223-249a-4543-bf92-f846bd823ff5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to add a Docker image for Node.js and for the agent, that looks similar
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ffc8dbc0-9985-4bdf-9a2b-12f4f9b5bf0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we give an image and argument to mount a data volume using the `-v`
    option for Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we click the gray plus button and we will see the following change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff130c0e-3369-43b9-ae93-69768a0a9b47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we click the blue Add Step button after we give the stage a name. For
    the purposes of this demo, we will chose Build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ae789def-1b34-4b57-b7a3-0f78388c684f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we need to pick an option for the step. We will choose the option titled
    Shell Script, and this will install all of our Node.js dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5e9ff84e-31b0-409b-9a97-959ccdd4fcd0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we enter some commands to run in our Shell Script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f1710434-bea4-44f4-8da5-6a476bea92ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we will click the gray plus button again to add one more stage to our
    pipeline, that now looks similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cff137da-a10d-4d95-a16f-e60953410f47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we will enter a name for this stage, and for the purposes of this chapter,
    we will choose `Cucumber Tests`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5a67c3d1-7812-4b5f-a45d-bf59d8c959d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we add a step for this stage, and we will once again pick Shell Script
    as an option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0c2ff88c-ccd5-4f3b-bdad-0641f36dbdba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, we will click the Save button and provide a commit message so that
    this change gets pushed to our GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ad40105c-ecd9-4bbc-935b-eeae45804f7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you click the blue Save & run button, the Jenkinsfile will be merged into
    the master branch and the pipeline will run.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating in Jenkins Blue Ocean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the views that you are accustomed to using in Jenkins Classic view are
    not available in Jenkins Blue Ocean. The main concept behind Jenkins Blue Ocean
    is to make navigation within Jenkins more accessible, and to improve the Jenkins
    UI in terms of better icons and page navigation. A lot of the inspiration for
    the new Jenkins UI is based on the book *Blue Ocean Strategy* that emphasizes
    that the world has moved on from functional developer tooling to developer experience
    and the new UI has aspired to improve the developer experience of Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Pipelines view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following screenshot depicts a pipeline view for Jenkins Blue Ocean. Note
    that we have two different pipelines for two different GitHub repositories. The
    second pipeline was created by clicking the New Pipeline button and adding a personal base64
    ([https://github.com/jbelmont/decode-jwt](https://github.com/jbelmont/decode-jwt))
    Golang library that decodes JSON web tokens via a command-line tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/de1715a6-7613-40ab-80fb-645ce0617b5b.png)'
  prefs: []
  type: TYPE_IMG
- en: This list will be different depending on the number of pipelines that you have
    added to your Jenkins instance. Notice that you can star a pipeline and that there
    are columns labelled NAME, HEALTH, BRANCHES, and PR.
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline detail view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you click on an actual pipeline, then you will go into a pipeline details
    page that has all the details concerning all the stages run in your particular
    pipeline. The screenshot that follows is the base64 pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/345339a9-d519-4330-a758-8637b2e4363e.png)'
  prefs: []
  type: TYPE_IMG
- en: Pipeline build view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can click on each node in the pipeline view and see the all work done for
    that stage. In the first screenshot, we clicked on the Build Information node
    to see the commands run in that particular stage, that encompass pulling down
    a fresh copy of the GitHub repository and running the `go version` and `go fmt` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/457938ef-74a2-4e50-930e-5ec08ce97ba5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that the second node is labeled Run Tests, and when we click that particular
    node, we only see the `go test` command, that runs our unit test cases in Golang:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ca2c83c1-7e91-46b6-8089-d96409e2e838.png)'
  prefs: []
  type: TYPE_IMG
- en: One of the great things about pipeline views is that you get a more crisp and
    better laid out visualizations for each stage in your continuous integration builds.
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline stage view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you click on an actual stage in the pipeline, that is depicted by the `>`
    symbol, it will show you a drop-down view with the details of that particular
    stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/454eab55-7377-4988-bacd-029e3f56dd21.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that here we clicked on the Run Tests stage to see a report saying that
    our unit test case written in Golang passed.
  prefs: []
  type: TYPE_NORMAL
- en: Other views in Jenkins pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are other views that you can use, such as the Pull Requests view, that
    shows you all the open pull requests and a branch view as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/eb5b0717-6ce9-4442-9ead-dcccc2cce6e7.png)'
  prefs: []
  type: TYPE_IMG
- en: The Jenkins Blue Ocean view is still being worked on, so any administrative
    task such as adding plugins and adding security information are still done in
    the Jenkins Classic view.
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Pipeline Syntax has two forms ([https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline](https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline)):'
  prefs: []
  type: TYPE_NORMAL
- en: Declarative Pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripted Pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between the two forms is that the Declarative Pipeline syntax
    is meant to be a simpler syntax than the Scripted Pipeline. The Scripted Pipeline
    syntax is a DSL, that follows the Groovy programming language semantics.
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *cucumber-examples* repository, we created a Jenkinsfile by using the
    Pipeline Editor. You can actually write the Jenkinsfile without using the Pipeline
    Editor, although I would recommend using it to debug a pipeline script as the
    editor has some nice features.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkinsfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we have the actual Pipeline Syntax that the pipeline editor created for
    us. It is using the Declarative Pipeline syntax and there are several items to
    discuss in this syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline keyword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All valid Declarative Pipelines must be enclosed within a pipeline block, as
    you can see in the preceding Jenkinsfile.
  prefs: []
  type: TYPE_NORMAL
- en: Agent keyword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The agent section specifies where the entire pipeline, or a specific stage,
    will execute in the Jenkins environment depending on where the agent section is
    placed. The section must be defined at the top level inside the pipeline block,
    but stage-level usage is optional.
  prefs: []
  type: TYPE_NORMAL
- en: Stages keyword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The stages keyword contains a sequence of one or more stage directives; the
    stages section is where the bulk of the work described by a pipeline will be located.
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline Syntax documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are keen to read more about the Pipeline Syntax, then check out the documentation
    ([https://jenkins.io/doc/book/pipeline/syntax/](https://jenkins.io/doc/book/pipeline/syntax/)).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discussed how to get set up using the Jenkins Blue Ocean view in
    an existing Jenkins instance and how to set up the Blue Ocean view by using Docker.
    We looked at many different Jenkins Blue Ocean views and discussed some of the
    differences between them and the Jenkins Classic view. We also discussed the Pipeline
    Syntax and the Jenkinsfile. The next chapter will go over the installation and
    basic usage of Travis CI.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you install Jenkins via Docker, can you use the Blue Ocean view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is it useful to use the Pipeline Editor in the Blue Ocean view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some differences between the Jenkins Classic view and the Blue Ocean
    view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you look at each stage of a pipeline in detail?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can the Blue Ocean view handle administrative tasks in Jenkins?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the stages syntax for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does the Declarative Pipeline syntax need to be wrapped in pipeline blocks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please check out the book *Extending Jenkins* ([https://www.amazon.com/dp/B015CYBP2A](https://www.amazon.com/dp/B015CYBP2A)) from
    *Packt Publishing*, to learn more about Jenkins plugins.
  prefs: []
  type: TYPE_NORMAL
