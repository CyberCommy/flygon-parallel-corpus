- en: Chapter 9. React with Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we have learnt about React routing, the integration
    of the Facebook API, and how we can configure and handle app URLs. We have also
    learnt how we can register our component in the DOM according to the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will build our existing application with Node.js. I''m
    not going to show you how to connect with the server and build the server-side
    aspect here, as that''s outside the scope of this book. However, it is included
    in the code files that accompany the book. Here''s what we''ll be covering in
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing all modules with the npm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running compilers and preprocessors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the Add Ticket form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting the form and saving it in local storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing and reading local storage data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the development web server, file watcher, and browser reload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The React debugging tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So far our application is entirely based on the frontend and also it's not modularized.
    Of course, this means our application code looks messy. We are also using an unpackaging
    file for every dependency library of React and the browser has to go and fetch
    each JavaScript file and compile it.
  prefs: []
  type: TYPE_NORMAL
- en: We'll no longer need to manually concatenate and minify, but instead we can
    have a setup watching our files for changes and automatically make them, such
    as `webpack` and `webpack-hot-middleware`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue to make changes in our project and it would be tedious to continually
    repeat the process.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node and npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First we need to download and install Node.js. If you have already installed
    and configured Node, feel free to skip this section. We can download Node.js from
    [http://nodejs.org ](http://nodejs.org) and follow the instructions mentioned
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the installer for your operating system from [http://nodejs.org/](http://nodejs.org/).
    Node.js provides different installers in line with your platform. In this chapter,
    we will use the Windows installer to set up Node.![Installing Node and npm](graphics/image_09_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also download a previous Node version from [https://nodejs.org/en/download/releases/](https://nodejs.org/en/download/releases/).
    In this chapter, we are using the Node.js 0.12 branch, so make sure you are downloading
    this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer and the MSI file that we downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The installer wizard will ask for your choice of features to be installed,
    and you can select the one you want. Usually, we select the default installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Node and npm](graphics/image_09_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the installation asks for it, then restart your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the system is restarted, we can check whether Node.js was set up properly
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command prompt and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You should be able to see version information, which ensures that the installation
    was successful.
  prefs: []
  type: TYPE_NORMAL
- en: React application setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we need to create a `package.json` file for our project, which includes
    the project information and dependencies of the npm modules. npm is very useful
    for JavaScript developers to create and share the reusable code that they have
    created to build an application and solve particular problems while developing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the command prompt/console and navigate to the directory you have
    created. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command will initialize our app and ask several questions to create a JSON
    file named `package.json`. The utility will ask questions about the project name,
    description, entry point, version, author name, dependencies, license information,
    and so on. Once the command is executed, it will generate a `package.json` file
    in the root directory of your project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you can see the `name` of the application, the entry
    point of your application (`start`), the `version` of your application, and the
    `description` of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we need to install some Node modules, which are going to help us with building
    a React application with Node. We will use Babel, React, React-DOM, Router, Express,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is the command for installing the modules through `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When we run the aforementioned command with the `<package name>`, it will install
    the package in your `project folder/node_modules` and save the `package name/version`
    in your `package.json` which will help us to install all the project dependencies
    and update the modules in any system.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you already have the `package.json` file with the project dependencies then
    you only need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And to update we need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a list of modules that have dependencies in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding `dependencies` list there may be some modules you have not
    heard of or are new to you. OK, let me explain:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mongoose` and `mongodb`: These work as a middleware in an application or MongoDB.
    Installing MongoDB and mongoose is optional for you as we are not using them in
    our application. I have just added them for your reference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nodemon`: During development in a Node.js app, `nodemon` will watch the files
    in the directory and if any files change, it will automatically restart your node
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-hot-loader`: This is the most commonly used module in web development
    for live code editing and project reloading. The `react-hot-loader` itself has
    some dependency on other modules:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-hot-middleware`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-dev-middleware`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-hot-middleware`: This allows you to add hot reloading into an existing
    server without `webpack-dev-server`. It connects a browser client to a webpack
    server to receive updates and subscribes to changes from the server. It then executes
    those changes using webpack''s **Hot Module Replacement** (**HMR**) API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-dev-middleware`: This is a webpack wrapper and serves the file that
    is emitted from webpack over a connected server. It has the following advantages
    while developing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files are not written to disk, and are handled in memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If files are changed in the watch mode during development, you are not served
    the old bundle, but requests are delayed until the compiling has finished. We
    don't need to do a page refresh after a file modification.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`webpack-dev-middlware` is only used in development. Please do not use it in
    production.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style-loader`, `url-loader`, `css-loader`, and `file-loader` help to load
    static path, CSS, and files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example: `import ''../vendor/css/bootstrap.min.css''`, which includes the
    font URL and images path.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting up the `package.json` file, we have our HTML markup as shown
    in the following code, named `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to create a server in `server.js` to run our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we are configuring the `webpack` in our application.
    It connects to the server and receives the update notification to rebuild the
    client bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are sending an HTML file and starting the server.
    You can change the port number as required.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a look at `webpack.config.js`, which we just included at the
    top of our `server.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we are setting up the `webpack-hot-middleware` plugin
    and adding the entry point of our script to compile and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are loading the modules according to the matched files in our application.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to configure Babel, which includes the ECMAScript version and `eslint`
    for adding some rules, plugin information, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.babelrc` file includes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `.eslintrc` file includes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing modules](graphics/image_09_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows our folder structure for the root directory.
    In the `src` directory, we have all the scripts and, in the vendor folder, we
    have the Bootstrap fonts and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive Bootstrap application with React and Node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will include and modularize our Bootstrap application that we have developed
    so far. In this application, we can see the static user profile raising helpdesk
    tickets online and rendering React components server-side. We have not used any
    database so we are storing our tickets in the browser's local storage. We can
    see the submission of the tickets in view tickets.
  prefs: []
  type: TYPE_NORMAL
- en: For your reference, I have included the Mongodb configuration and connection
    setup with db in the code snippet that you can get along with this book. Also,
    I have included the mongoose schema for the Add Ticket Form so you can play with
    them.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's open the entry point of the script file `index.js` in the `src`
    folder and `import` the React modules.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In version 15.4.0, `React` and `ReactDOM` are separated into different packages.
    `React.render()` is deprecated in favor of `ReactDOM.render()` in React 0.14,
    and the developers have also removed DOM-specific APIs from React completely in
    React 15.
  prefs: []
  type: TYPE_NORMAL
- en: In React 15.4.0, they have finally moved ReactDOM implementation to the ReactDOM
    package. The React package will now contain only renderer-agnostic code such as
    `React.Component` and `React.createElement()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to this blog to get the latest updates about React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react/blog/](https://facebook.github.io/react/blog/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to import the Bootstrap, CSS, and JS files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s start the server with the following command and see if our code
    and configuration can build or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It monitors the changes in your application files and restarts the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Or if we have not installed `nodemon` then the command should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Responsive Bootstrap application with React and Node](graphics/B05743_09_03-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The server is started in webpack to build your code bundle to the server client
    browser. If everything goes smoothly, you can get this info when the build is
    complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive Bootstrap application with React and Node](graphics/image_09_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For now our page is blank. There is nothing to show because we have not included
    any component in our page yet.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create one component for Bootstrap navigation with the name `navbar.js`
    in the component folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`module.exports` is a special object in Node.js and is included in every JS
    file. It exposes your functions, variables, and anything you have written inside
    `module.exports` as a module that makes your code reusable and easy to share.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add our Bootstrap navigation component inside this with the `container`
    layout to render the page content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Our page navigation `container` ends here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we are starting the main `container` of the page where we can render the
    page content by using `props`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s continue to add the home page content and prepare our first layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are including the page title and home page content in this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to configure the routing to render the component in the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to repeat the same flow with the other components and pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive Bootstrap application with React and Node](graphics/image_09_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our page looks great; we have successfully integrated our first page with Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move to our main component and add a ticket in the help desk section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file with the name of `addTicketForm.js` and include the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Including the `React` module is important in every file where we have React
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the preceding code, we are controlling the `textarea` component with the
    same code we created in [Chapter 5](ch05.html "Chapter 5. jQuery Bootstrap Component
    with React"), *jQuery Bootstrap Component with React*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Before we were just displaying in the `AddTicket` UI after submitting the form.
    Now we are using the local storage to save the tickets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you need to put in the other form elements that we added before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we need to create `addTicketList.js` where we are wrapping this JSX form
    into the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Also we need to create `listView.js` to display the list which after the user
    submits at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have imported the `AddTicket` module that we created before and created
    another module, `addTicketForm`, to manage the form state for the update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `render` method, we are passing the form and `list` items into the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `ListPanel`, we have actual JSX code that renders the tickets to the
    UI after the user submits and creates the module that we have included in `addTicketList.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are rendering the `listItemElements` into the DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create `ListUI.js`, the last module, which will complete the functionality
    of the form component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Let's see how the output in the browser looks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you have included the following code in your router with the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive Bootstrap application with React and Node](graphics/image_09_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Looks good. Now let''s fill in this form, submit it, and view the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive Bootstrap application with React and Node](graphics/image_09_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's awesome; our form works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see the submit **Ticket** in the browser''s local storage with
    the  **Key** and **Value** format of the JSON notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Developer Tools** > **Application** > **Storage** > **Local Storage**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive Bootstrap application with React and Node](graphics/image_09_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we need to get this JSON **Ticket** from the local storage and display it
    to the user in the **View Tickets** section.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create another module to get the tickets and render it into the Bootstrap
    responsive table. The file
  prefs: []
  type: TYPE_NORMAL
- en: '`allTickets.js` will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the initial state of the component, we are using `localStorage.getItem`
    to get the `tickets` and parse them into the JSON to set the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the same approach we used in adding the ticket, we are mapping the `ticket
    key` and the value into the React component by `props`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `render` method, we are assigning the `state` value into the `ticket`
    variable that we are passing into the `createListElements` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We are using the JavaScript ternary operator to check if we have any `ticket`
    or, if not, to display the message in the UI.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to create the component that includes the `<td>` and inherits the
    `ticket` data. `ticketTable.js` will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'And also we need to import this module in the `allTickets.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: You may notice that I have used the `const` object rather than using `import`.
    You can also use `var` instead. `const` refers to constants; they are block-scoped,
    much like variables. The value of a constant cannot change and be reassigned,
    and it can't be redeclared.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is our final router config:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Bootstrap table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s look at the following key points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Striped rows**: Use `.table-striped` in `<table class="table table-striped">`
    for zebra stripping in table rows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bordered table**: Add `.table-bordered` to add borders in whole and cells'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hover rows**: Add `.table-hover` to enable a hover state on table rows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Condensed table**: Add `.table-condensed` to reduce the cell padding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contextual classes**: Use contextual classes (`.active`, `.success`, `.info`,
    `.warning`, `.danger`) to add a background color to table rows or cells'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply these classes on the table and see how they make an impact on table's
    look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap responsive tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating responsive tables, we need to wrap any `.table` in `.table-responsive`
    to make them scroll horizontally on small devices (under 768 px). When we are
    viewing them on anything larger than 768 px wide, you will not see any difference
    in these tables.
  prefs: []
  type: TYPE_NORMAL
- en: Let's submit the ticket again and take a quick look at the table.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the helpdesk drop-down in the navigation and click on view tickets.
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap responsive tables](graphics/image_09_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will get the appropriate message (**You have not raised any ticket yet.**)
    in the UI if you have not raised any ticket yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, so let''s submit the fresh ticket and open this page again. Once the ticket
    is added, it will be displayed in your table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap responsive tables](graphics/image_09_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the ticket that we have submitted in the table now.
  prefs: []
  type: TYPE_NORMAL
- en: React developer tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React provides the tools for developers to debug React code. It allows us to
    inspect a React-rendered component with the component hierarchy, props, and state.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two official extensions that are available for the Chrome and Firefox
    browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the extension for Chrome:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)'
  prefs: []
  type: TYPE_NORMAL
- en: 'And Firefox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://addons.mozilla.org/en-US/firefox/addon/react-devtools/](https://addons.mozilla.org/en-US/firefox/addon/react-devtools/)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A standalone app is still under development and will be available soon.
  prefs: []
  type: TYPE_NORMAL
- en: How to use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you download or install the extension in your browser, open the **Developer
    Tools** on a React page. You should see one extra tab called **React**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use](graphics/image_09_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the side panel, you can see the **State** and **Props** for every React component.
    If you expand the **State** of the component, you will see the full hierarchy
    of the component with the name of the component you are using in the React app.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use](graphics/image_09_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the side panel and we can inspect and edit its current props
    and state in the panel on the right.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also view the code execution function by clicking **Execute function**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use](graphics/image_09_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you inspect the `allTicket` component with the React tool, you can see the
    data flow with `props` into the child elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use](graphics/image_09_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are inspect a React element on the page in the **Elements** tab, and
    then switch over to the **React** tab, that element will be automatically selected
    in the React tree. Using the search tab, we can also search for the component
    by name.
  prefs: []
  type: TYPE_NORMAL
- en: If you also need to trace updates for the component, you need to select the
    top checkbox, **Trace React Updates**.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about how to transform our React standalone application
    into Node.js npm packages and modularize React components. We began by installing
    Node.js and setting up the React environment. We then looked at how we can import
    and export modules by using `module.export`.
  prefs: []
  type: TYPE_NORMAL
- en: We have also learnt how we can create and import the multiple modules in one
    file, such as `react-router`, `{ Router, Route, IndexRoute,IndexLink, Link, browserHistory
    } = ReactRouter`.
  prefs: []
  type: TYPE_NORMAL
- en: We have also looked at that how we can store and read data from local storage.
    Using a Bootstrap table, we displayed that data into the table grid. We have also
    gone through the Bootstrap table, styling classes that make your table responsive
    as well as look and feel better.
  prefs: []
  type: TYPE_NORMAL
