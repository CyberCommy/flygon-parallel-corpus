- en: Deploying an Application to Cloud Platforms
  prefs: []
  type: TYPE_NORMAL
- en: Now it's time to deploy your application to the World Wide Web and make it available
    to everyone across the globe.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to do it with three different hosting platforms
    – Netlify, Now, and Firebase. Here, we will learn the process of creating the
    account on each platform, setting up the environment, configuring the application
    for deployment, and finally deploying it to the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Netlify account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your application for deployment in Netlify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for automatic deployment on Netlify with GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Vercel account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Vercel-CLI and deploying your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for automatic deployment on Vercel with GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Firebase project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Firebase-CLI and deploying your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using **Node.js** and **Vue-CLI**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention Windows Users! You need to install an NPM package called windows-build-tools
    in order to be able to install the following requisite packages. To do this, open
    PowerShell as the administrator and execute the following command: `> npm install
    -g windows-build-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Vue-CLI, you need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Vue project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a Vue-CLI project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Terminal (macOS or Linux) or Command Prompt/PowerShell(Windows) and execute the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Vue-CLI will ask for you to choose a preset; select `Manually select features` using
    the *spacebar*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, Vue-CLI will ask for the features, and you will need to select `Router`,
    `Vuex`, and` Linter / Formatter` as an additional feature on top of the default
    ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, Vue-CLI will ask whether you want to use history mode for route management.
    We will choose `y` (yes):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue the process by selecting the linter and formatter. We will select `ESLint
    + Airbnb config`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Choose the additional features of the linter (here, `Lint and fix on commit`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Select where you want to place the linter and formatter configuration files
    (here, `In dedicated config files`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the CLI will ask you whether you want to save the settings for future
    projects; you will select `N`. After that, Vue-CLI will create the folder and
    install the dependencies for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Netlify account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to start the deployment process to the Netlify platform. In this recipe,
    we will learn how to create our Netlify account so that we can deploy our application
    to the web.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: An email address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitLab account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A BitBucket account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the process of creating an account on Netlify, you can do this with an **email**
    address, a **GitHub** account, a **GitLab** account, or a **BitBucket** account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we will learn how to create a Netlify account with an email address:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Netlify website at [https://www.netlify.com/](https://www.netlify.com/)
    and click on **Sign up →** in the header menu. You will be redirected to the initial
    **Sign up** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On this page, you can select the method that you want to use to sign up to Netlify.
    In this process, we will continue with the email address. Click on the **Email**
    button to be redirected to the Email Sign up form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form with your email address and a password of your choosing. There
    is a password rule of 8 characters minimum. After completing the form, click on
    the **Sign up** button. From there, you will be redirected to the Success page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you will receive a verification email in your inbox that you need in order
    to continue using the Netlify platform. To continue, open your email inbox and
    check the Netlify email.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your email inbox, open the Netlify email and then click on the **Verify email**
    button. At this point, a new window will open, and you will be able to log in
    with the recently registered email and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, you can complete the login form with your email address and the password
    you chose at step 3\. After that, click on the Log in button to be redirected
    to the main window of the Netlify platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you will find yourself at the main screen of the Netlify platform,
    with a blank page to begin deployment on the platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to create our account on Netlify. We saw that
    it is possible to do this with various OAuth methods and the basic email that
    we used in the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The email address creation process involves defining the email address that
    will be used and a password for the account, verifying the account email. Then,
    you can log in to the platform.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out more information about Netlify at [https://docs.netlify.com/](https://docs.netlify.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your application for deployment in Netlify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start the deployment process, we need to configure our project to have a
    valid Netlify deployment schema. In this recipe, you will learn how to set up
    the Netlify deployment schema on any Vue-based application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Vue project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to prepare our application to be deployed
    to Netlify:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Vue project and open the `package.json` file. Check whether you have
    the `build` script defined, as in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows) and execute the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Make sure your application `build` script creates a `dist` folder in the main
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If your `vue-router` is defined to work with history mode, you have to create
    a `_redirects` file in the `public` folder. In this file, you need to add the
    instruction to the Netlify router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Publish your application to a GitHub repository. Don't worry about the build
    folder, because it's already declared on the `.gitignore` file and it won't be
    sent to your repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to check and prepare our application for the
    Netlify deployment.
  prefs: []
  type: TYPE_NORMAL
- en: To make the deployment work, we needed to make sure that we have the `build`
    command in the script section at `package.json`, and verify that the build destination
    is the `dist` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we created a `_redirects` file in the public folder to instruct the
    Netlify router to understand the vue-router history mode.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out more information about the official Vue-CLI documentation on Netlify
    deployment at [https://cli.vuejs.org/guide/deployment.html#netlify](https://cli.vuejs.org/guide/deployment.html#netlify).
  prefs: []
  type: TYPE_NORMAL
- en: Find out more information about Netlify router rewrites at [https://docs.netlify.com/routing/redirects/rewrites-proxies/#history-pushstate-and-single-page-apps](https://docs.netlify.com/routing/redirects/rewrites-proxies/#history-pushstate-and-single-page-apps).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for automatic deployment on Netlify with GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to prepare the ground for deployment. In this recipe, you will learn
    how to set up the Netlify deployment process to fetch your application automatically
    on GitHub and deploy it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A Netlify account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Vue project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, following the creation of your Netlify account, having published your
    project on a GitHub repository, and having configured everything, it''s time to
    prepare the Netlify platform to perform automatic deployment on each GitHub push:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Netlify ([https://www.netlify.com/](https://www.netlify.com/)), sign in,
    and open your initial dashboard. There, you will find a New site from Git button.
    You will be redirected to the Create new site page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you may click on the GitHub button to open a new window for the Netlify
    authorization on GitHub and continue the process there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in with your GitHub account and then you will be redirected to the Application
    install page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On this page, you can choose to give access to Netlify to all of your repositories
    or just the selected one, but make sure you make available the repository of your
    application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you finish the installation of Netlify on GitHub, the repository that you
    gave access to in the previous step will be available to be selected on the Netlify
    platform. Choose the one that contains your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To finish the creation process, you need to select the branch that will be used
    for auto-deployment. Then, you need to fill up the build command used on the application,
    in our case, `npm run build`. Open the folder that will contain the built files,
    in our case, this is the `dist` folder, and click on the Deploy site button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the Netlify-CLI will start the building process and publish your application
    when the build is finished without any errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Netlify platform connects to your GitHub account and installs as an application,
    giving access to selected repositories. Then, on the platform, you can select
    the repository that you want to use to deploy. With the repository selected, we
    needed to configure the Netlify-CLI with the build instructions and the built
    destination folder. Finally, the CLI runs, and we have our application up and
    running on the web.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out more information about advanced Netlify deployments at [https://docs.netlify.com/configure-builds/file-based-configuration/](https://docs.netlify.com/configure-builds/file-based-configuration/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Vercel account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vercel is a famous platform for deploying your application on the web. With
    Vercel, you can automate the deployment process with GitHub, GitLab, and BitBucket.
    In this recipe, we will learn how to create our account on the Vercel platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisite for this recipe is just one of the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: A GitHub account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitLab account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A BitBucket account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start our journey on the Vercel platform. Here, we will learn how to
    create our account on the platform to start our project deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Vercel website ([https://vercel.com/](https://vercel.com/)) and click
    on the Sign Up button on the top bar. You will be redirected to the Sign Up page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, you have the option to select one of these repository managers – GitHub,
    GitLab, or BitBucket. We will continue by clicking on the **GitHub** button. After
    choosing the sign-up method, you will be redirected to the authorization page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On this page, you are giving access to the Vercel platform to access the information
    on your account. By clicking on the **Authorize** button, you will be redirected
    back to the Vercel dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you have your Vercel account created and ready to be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we entered the Vercel platform, and signed up to it using a
    repository manager. We were able to create our account, and can now start the
    deployment process on the platform through repository integration or the CLI tool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about Vercel at [https://vercel.com/](https://vercel.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Vercel-CLI and deploying your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have created a Vercel account. Now it's time to configure the Vercel-CLI
    on your project, so it's available on the Vercel platform and on the web.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A Vercel account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Vue project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vercel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install `vercel`, you need to open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to link our project to the Vercel platform
    through the Vercel-CLI and then deploy the platform with it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Vue project and then open the `package.json` file. Check whether
    you have the `build` script defined, as in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Make sure your application build script creates a `dist` folder in the main
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your `project` folder, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will prompt you for a login to the Vercel platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the email address that is linked to the repository manager that you have
    used to sign in to Vercel. You will receive an email with a Verify button; click
    on it to verify your email address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your email is verified, you are able to deploy applications in your Terminal
    with the `> vercel` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To deploy your application to the web, we need to execute the `> vercel` command
    in the `project` folder, and it will ask some questions about the project settings
    prior to deployment. The first question will relate to the project path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it will ask for the scope that will deploy the project. This is used when
    you have multiple account access options defined under the same username. In most
    of the scenarios, it will only have one, and you can press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, it will ask to link to an existing project on Vercel. In our case, this
    is a brand new project, so we will choose `n`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be asked to define the project''s name (only lowercase alphanumeric
    characters and hyphens are allowed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You now need to define the location of the source code of the project. This
    location is where the `package.json` file is located; in our case, this will be
    the `./` folder, or the main project folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Vercel-CLI will detect that the project is a Vue-CLI project, and will automatically
    define all the commands and directory settings for the deployment of the application.
    We will choose `n` in our case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once everything is set up, the CLI will deploy the first preview of your application,
    and you will receive a link to access the preview of your application. To deploy
    your application as production-ready, you need to open Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to connect the Vercel-CLI to the online platform
    with the email address that is linked to the repository manager, and set up project
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: In this process, we learned how to configure the advanced options of the CLI
    by defining the project settings for the build commands, distribution folder,
    and development command.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we were able to get the preview URL of our project before deploying
    it to production.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find out more information about the Vercel-CLI at [https://vercel.com/docs/cli?query=CLI#getting-started](https://vercel.com/docs/cli?query=CLI#getting-started).
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more information about Vercel advanced configurations at [https://vercel.com/docs/configuration?query=now.json#introduction/configuration-reference](https://vercel.com/docs/configuration?query=now.json#introduction/configuration-reference).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for automatic deployment on Vercel with GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned in the previous recipe how to use the Vercel-CLI to deploy our application
    to the web using your local terminal, but it is possible to integrate the repository
    manager with the Vercel platform and deploy automatically through any push or
    open pull requests. That's what we will do in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A Vercel account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Vue project on a repository manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to integrate the Vercel platform with the
    repository manager and make an automatic deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Vercel dashboard ([https://vercel.com/dashboard](https://vercel.com/dashboard))
    and click on the Import Project button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Import Project page, click on the **Continue** button inside the From
    Git Repository card.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the Vercel website will ask whether the user who holds the repository of
    the project you are importing is your personal account. Click **Yes** if it is.
    If it isn't, Vercel will fork the project into your personal account before starting
    the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, Vercel will ask which account you want to bind the project to. In our
    case, this will be our personal account. Select it, and click on the **Continue**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be redirected to the GitHub web page, to give Vercel access to your
    repositories. You can give access to all your repositories, or just the ones you
    want to deploy. In our case, we will give access to all the repositories on our
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After installing the Vercel application on your GitHub account, you will be
    sent back to the Vercel web page. Here, you can define the settings for the project
    you are creating, including the project name, the preset you are using, build
    instructions, and environment variables. Vercel will automatically detect that
    our project is a Vue-CLI project and will configure the build and deployment settings
    for us. Then, click on the **Deploy** button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vercel will start the first deployment process. When it's finished, Vercel will
    give you the link for the application, along with a link for you to open the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Vercel platform connects to your GitHub account and installs as an application,
    giving access to selected repositories. Then, on the platform, you can select
    the repository that you want to use to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: With the repository selected, you need to configure the Vercel-CLI with the
    build instructions and the built destination folder.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the CLI runs, and we have our application up and running on the web.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out more information about Vercel integrations with Git repositories at [https://zeit.co/docs/v2/git-integrations](https://zeit.co/docs/v2/git-integrations).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Firebase project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase is an all-in-one solution created by Google to help developers with
    dedicated tools for analytics, notifications, machine learning, and cloud solutions.
    One of the cloud solutions they provide is the hosting platform.
  prefs: []
  type: TYPE_NORMAL
- en: With the hosting platform, we are able to host our single-page applications
    in the Google cloud servers and have them available to everyone, through a global
    content delivery network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A Google account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Vue project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to create our Firebase project so that we
    can deploy our application to the Firebase hosting:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Firebase home page ([https://firebase.google.com/](https://firebase.google.com/))
    and click on the **Sign In** link in the header menu. If you are already logged
    in to your Google account, click on the **Go to console** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Console page, click on the **Create a project** button to create a new
    Firebase project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firebase will ask for the project name (you can only use alphanumeric characters
    and spaces).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, Firebase will ask whether you want to enable Google Analytics in this
    project. In our case, we will disable this option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you will be redirected to the project overview dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created our first Firebase project. To do it, we started
    by signing in to our Google account and going to the Firebase console. On the
    Firebase console, we created a new project, and in the setup wizard steps, we
    disabled the Google Analytics options because we won't be using attached analytics
    in this recipe. Finally, when we finished the setup wizard, our project was ready.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out more information about Google Firebase at [https://firebase.google.com](https://firebase.google.com).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Firebase-CLI and deploying your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To deploy our application to Firebase Hosting, we need to use the Firebase-CLI.
    The CLI will help with the process of packing the files and sending them to the
    Google Cloud server.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to configure the Firebase-CLI to deploy your
    application to the web using your local terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A Google account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Vue project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Firebase project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`firebase-tools`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install `firebase-tools`, you need to open Terminal (macOS or Linux) or
    Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to set up the Firebase-CLI on our project,
    and how to initialize it with our project created during the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows) and execute the
    following command on the root folder of your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The Firebase-CLI will open a browser window so you can log in to your Google
    account, and give access on the part of the Firebase-CLI to your Google Account. (If
    the browser doesn't open automatically, a link will appear on the Firebase-CLI,
    copy the link, and then paste it into your browser to continue.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows) and execute the
    following command on the root folder of your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are initializing the configuration process of the CLI with our project.
    For the first question of the CLI, we are going to use just the **Hosting** feature,
    so we need to select just `Hosting`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the CLI will ask which Firebase project we want to use. In our case,
    we created the project earlier in the previous recipe, so we will select `Use
    an existing project`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now a list of available projects on your account will appear. Select the one
    you want to use to deploy with this application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask about the public directory of the application, or in our case,
    because it''s a single-page application, we need to use the build destination
    folder. Type the name of the destination folder, in our case it''s `dist`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the last step in the process is to select whether we want to use the
    configuration as a single-page application. Type `y` to enable rewrites of all
    the URLs to `index.html` so we can use the history mode of `vue-router`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `package.json` file on the root directory of your project, and add
    a new script to automate the build and deployment process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows) and execute the
    following command on the root folder of your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now your project is deployed and available on the web, and the CLI will give
    you the links to access it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ae1dd54b-f854-42d2-a206-7d58799dc231.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to configure the Firebase CLI and to deploy our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: First, we installed the Firebase-CLI and signed in to the Google authentication
    platform. Then, we were able to initialize the CLI in our project folder.
  prefs: []
  type: TYPE_NORMAL
- en: In the process, we selected the project we created in the previous recipe and
    pointed the building folder to the corrected one on a Vue-CLI project.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we configured that we want to use a single-page application router structure,
    and added a deployment script to `package.json`. Finally, we were able to deploy
    our application and make it available to everyone.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find out more information about Firebase Hosting at [https://firebase.google.com/docs/hosting](https://firebase.google.com/docs/hosting).
  prefs: []
  type: TYPE_NORMAL
