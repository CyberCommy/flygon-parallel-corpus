- en: Building CI/CD Pipelines
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the configuration of end-to-end **Continuous
    Integration/Continuous Delivery** (**CI/CD**) pipelines using the most popular
    CI/CD tools on both self-managed public clouds and SaaS solutions using Kubernetes.
    After following the recipes in this chapter, you will have gained the skills needed
    to build, deploy, and promote applications from development to a production environment.
    You will be able to use the tools that we will implement in these recipes to detect
    bugs, anti-patterns, and license concerns during the continuous integration process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CI/CD pipeline in Jenkins X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a CI/CD pipeline in GitLab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a CI/CD pipeline using CircleCI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline using GitHub Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline on Amazon Web Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline with Spinnaker on Google Cloud Build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline on Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this section assume that you have a functional Kubernetes cluster
    deployed after following one of the recommended methods described in [Chapter
    1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml), *Building Production-Ready Kubernetes
    Clusters*.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes' command-line interface, `kubectl`, will be used for the rest of
    the recipes in this section since it's the main command-line interface for running
    commands against Kubernetes clusters. If you are using a Red Hat OpenShift cluster,
    you can replace `kubectl` with `oc`. All the commands are expected to function
    similarly.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this section require a Git repository with a containerized project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CI/CD pipeline in Jenkins X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins X is a fairly new open source solution that extends the Jenkins ecosystem
    and solves the problem of automating CI/CD in the cloud using Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to get your application as a pipeline into
    Jenkins X, which you will have deployed by following the *Deploying and managing
    the life cycle of Jenkins X* recipe instructions in [Chapter 2](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml)*,
    Operating Applications on Kubernetes*. With that, you will learn how to create
    a CI/CD pipeline with automated GitOps and promote an application from staging
    to production, all by using simple commands.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have followed the instructions in [Chapter 2](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml)*,
    Operating Applications on Kubernetes*, in the *Deploying and managing the life
    cycle of Jenkins X* recipe and have a functional Kubernetes cluster with a Jenkins
    X deployment ready. You can find the instructions to install `helm` in that chapter
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipe, you will learn how to create a pipeline with GitOps
    promotion.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe requires `kubectl`, `helm`, the Jenkins X CLI, `jx`, and your preferred
    cloud provider CLI where you installed your Kubernetes cluster using Jenkins X.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins X supports Azure, AWS, GCP, IBM Cloud, Oracle Cloud, minikube, minishift,
    and OpenShift as providers for the deployment process. You also need to have a
    GitHub organization and GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do itâ€¦
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the Jenkins pipeline console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing an application as a pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking application status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Promoting an application to production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pipeline using a quick-start application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to Jenkins Pipeline Console
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to access the Jenkins Pipeline Console web
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the `jx` namespace where Jenkins X is deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the following command to get the Jenkins (Blue Ocean) console address
    and open the link in your browser. In this recipe, the console address is the
    output to the following `jx console` command, that is, `http://jenkins.jx.your_ip.nip.io/blue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After you''ve opened the Jenkins Console link from the output of *step 2*,
    click on one of the pipelines from the list. As an example, you can see two pipelines
    in our following demo environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/69c4c935-7c12-4d8b-9401-f87e64fd6e62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the last run and make sure both pipelines are healthy, meaning that
    your environment works. Similar to the following screenshot, you should see green
    check marks at the Validate Environment and Update Environment stages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f9ea4bbf-dbb5-4690-be85-ecfdf8d7c43c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we've validated that the environment is functional, we can start adding
    a new pipeline for our own application.
  prefs: []
  type: TYPE_NORMAL
- en: Importing an application as a pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most of the time, you will be required to import a local project or Git repository
    into Jenkins. Let''s perform the following steps to create a local clone of an
    existing repository and import it as a pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: First, fork your copy of the example code to your account. Go to [https://github.com/k8sdevopscookbook/python-flask-docker](https://github.com/k8sdevopscookbook/python-flask-docker)
    in your browser and click on the Fork button in the upper-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the repository to your local machine. Make sure that you replace `your_github_username`
    with your GitHub username where you forked the example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you should have a local copy of the `python-flash-docker` application.
    Use the following commands to import the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can watch the pipeline activity either from the Jenkins Blue Ocean
    view or the CLI. The following screenshot shows the pipeline activity on the Jenkins
    Blue Ocean dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/aacf84fe-bcd1-4381-bc65-b18ac4a6872d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As an alternative, you can watch the activity on the CLI using the `jx get
    activity` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Checking application status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After you''ve created the pipeline, you need to confirm its status. Let''s
    perform the following steps make sure the application has been deployed in staging
    before we move it into production:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the pipeline has been built successfully, you should have version 0.0.1
    in your staging environment. List the applications when the pipeline is complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see that the application has been deployed. Visit the URL to
    see the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cba167d5-f104-4339-81d7-3c0a76ac35ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our pod is currently running in the `jx-staging` namespace. Confirm the pods
    in the `jx-staging` and `jx-production` namespaces. The second namespace shouldn''t
    return anything until we promote our application to production:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Promoting an application to production
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once an application has been deployed in staging, the next step is to promote
    it into the production environment. Let''s perform the following steps to promote
    an application from staging to production:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you''ve confirmed that an application is stable, the next step is to
    promote it into production. Let''s use the following command to push the current
    version from `staging` to `production`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For various reasons, mostly environmental limitations, the successful deployment
    of an application into staging doesn''t guarantee successful deployment into production.
    After promoting the application, use the following command to check the progress
    of the production deployment. You need to see a `Succeeded` message after you
    run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Our pod has been promoted to the `jx-production` namespace. Confirm that the
    pods are now running in the `jx-production` namespace as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'List the applications. You will get both staging and production links for the
    same application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating a pipeline using a QuickStart application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you don''t have a project to import, then you can create a new app from
    QuickStart and import the newly generated code into Git and Jenkins for CI/CD
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a build from a standardized template. This command will show you application
    templates that you can use to create a new application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Select your GitHub username and organization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter a new repository name. In this recipe, this is `chapter2-jx-tutorial`
    :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Select the QuickStart example you wish to create. In our recipe, this is `golang-http`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specify `Yes` to the following question:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The pipelines will take some time to complete. List the available pipelines
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second recipe of this section, *Importing an application as* *a pipeline*,
    showed you how to create a Jenkins pipeline using an existing project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 3*, the following happens when you import the application using the
    `jx import` command:'
  prefs: []
  type: TYPE_NORMAL
- en: First, the project source is checked out from the repository and a new semantic
    version number is applied. Then, with the help of Skaffold, a command-line tool
    that facilitates continuous development for Kubernetes applications, Git tag v0.0.1
    is created and unit tests are executed (in our example, there were no unit tests).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the unit tests have been executed, a Docker image is created and pushed
    to the local Container Registry. You can see this process on the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After the container image has been pushed to the registry, you can find it
    in your Docker Registry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ffce0dde-84b6-461c-a1e8-d4ab1d2886ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'During the Promote to Environments stage, a Helm build will be executed. After
    the charts have been pushed to the local `chartmuseum` repository, you can find
    the Helm chart in the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the staging pipeline runs from the master branch and deploys our pod
    from the Helm repository into the `jx-staging` namespace. Both the staging and
    application pipelines will be completed after this step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a CI/CD pipeline in GitLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitLab is a complete DevOps toolchain that's delivered in a single application
    platform. GitLab provides all the necessary tooling you need to manage, plan,
    create, verify, package, release, configure, monitor, and secure your applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will focus on the CI/CD pipeline features of GitLab that
    can be consumed as SaaS or self-hosted service. We will import an application
    and create a pipeline in GitLab. You will learn how to create a CI/CD pipeline
    with Auto DevOps and promote an application from staging into production.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following recipe, you will learn how to create a pipeline with Auto DevOps.
    This recipe requires GitLab (self-managed or SaaS) and an account with your preferred
    cloud vendor where you installed your Kubernetes cluster using GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: The Community Edition of GitLab includes the Auto Build, Auto Test, Auto Review
    Apps, Auto Deploy, and Auto Monitoring features. In addition to these features,
    the subscription-based SaaS version of GitLab also provides Auto Code Quality,
    Auto **Static Application Security Testing** (**SAST**), Auto Dependency Scanning,
    Auto License Compliance, Auto Container Scanning, Auto **Dynamic Application Security
    Testing** (**DAST**), and Auto Browser Performance Testing functionalities, depending
    on your subscription plan.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have followed the instructions in [Chapter 2](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml)*,
    Operating Applications on Kubernetes*, inÂ the *Deploying and managing the life
    cycle of GitLab* recipe and deployed a self-hosted GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer, you can also use the SaaS offering hosted by GitLab. In that
    case, visit the GitLab website at [https://about.gitlab.com/free-trial/](https://about.gitlab.com/free-trial/)
    and sign in to your account.
  prefs: []
  type: TYPE_NORMAL
- en: GitLab Auto DevOps supports GKE for creating new Kubernetes clusters, as well
    as existing clusters, on any public or private clouds.
  prefs: []
  type: TYPE_NORMAL
- en: How to do itâ€¦
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project using templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing an existing project from GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Auto DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Kubernetes cluster integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pipeline using Auto DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incrementally rolling out applications to production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project using templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most of the actions on GitLab are done on projects. When you start a project
    for the first time, you have a couple of options. You can create a project using
    one of the project templates, import an existing project, or start a blank project.
    In this recipe, you will learn how to create a project using the project templates
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to GitLab with a non-root user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Create a project button on the Welcome to GitLab screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/22f35ad9-7757-4b2a-a0d9-fd8e2c688dfe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Create from template tab and choose one of the code templates listed
    by clicking on the Use template button. For this example, we will use the following
    Pages/GitBook template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4ab95022-7432-4fb8-89b5-2fca72cd5c06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'GitLab projects can be either Private, Internal, or Public. This project access
    level is determined by the visibility field in the project. Give your new project
    a name and set the Visibility Level to Public:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/eab5306b-2e63-4ccd-beb2-c2ca425c55cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Create project button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you will see that the template project has been successfully imported.
  prefs: []
  type: TYPE_NORMAL
- en: Importing an existing project from GitHub
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is not always possible to start with clean project templates. Often, you
    will need to create a pipeline for an existing project. Let''s perform the following
    steps to add some existing project source code into a GitLab environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to GitLab with a non-root user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you don''t have a project yet, click the Create a project button on the
    Welcome to GitLab screen. If you have created projects before, click the New project
    button in the top right-hand corner of the following view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9148d352-0200-459a-b211-aed1e27eea19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'GitLab can import projects from various Git repositories, including GitHub,
    Bitbucket, Google Code, Fogbugz, Gitea, and GitLab itself. Here, select the Import
    project tab and choose GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/df895047-8ab3-4daf-96f3-e4d2ffd86b95.png)'
  prefs: []
  type: TYPE_IMG
- en: Open [https://github.com/settings/tokens](https://github.com/settings/tokens)
    in a new window and go to your GitHub account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Generate new Token on your GitHub account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For GitLab to be able to access your GitHub account, an access token needs
    to be created. On the New personal access token page, select the repo scope and
    click on the Generate Token button. This page shows the permissions that you can
    assign with the token:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a54fc842-717e-43a5-8b15-00cd694274a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the new personal access token created on GitHub, paste it into GitLab,
    and click on the List your GitHub repositories button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8425a2b9-58ad-4ca9-8262-cd54cdd4c0ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'GitLab will access and discover projects in your GitHub repository location.
    Import the repository that you want to use with this recipe. In this example,
    we will use the project from the [https://github.com/k8sdevopscookbook/auto-devops-example](https://github.com/k8sdevopscookbook/auto-devops-example)
    repository. This isÂ where all the examples in this book are located:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/02912d98-1e4d-4011-9306-fb093fc6a5c7.png)'
  prefs: []
  type: TYPE_IMG
- en: When importing is complete, the status will show Done. Finally, click on the
    Go to project button to see your project in GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Auto DevOps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'GitLab''s Auto DevOps functionality provides predefined CI/CD configuration
    that automatically detects, builds, tests, deploys, and monitors your applications.
    Let''s perform the following steps to enable the Auto DevOps option for your existing
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in with your project user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Welcome to GitLab screen, you will see links that will help you get
    started. Here, click the Configure GitLab button to access the configuration options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e7799990-596f-438a-a937-cc1ff550bed8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Only the project users with Maintainers and Admin permissions have access to
    the project settings. From the Admin Area menu on the left-hand side of the screen,
    select the SettingsÂ |Â CI/CD menu to access the CI/CD options. The following screenshot
    shows where the CI/CD settings are located:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/62fa3c42-5405-40ea-a5db-079e27789537.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under the following Continuous Integration and Deployment page, make sure that
    the Default to Auto DevOps pipeline for all projects checkbox is checked. Optionally,
    enter your base domain if you want to use the Auto Review Apps and Auto Deploy
    features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/63e62143-9824-49b2-af92-8e7000428c0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Save changes button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling Kubernetes cluster integration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'GitLab works with or within Kubernetes in multiple ways. Let''s perform the
    following steps and add Kubernetes automation so that we can share the cluster
    across multiple projects:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in as root user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a project under the Your Projects page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the project''s Details page, click on the Add Kubernetes cluster button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/27d3edb2-a583-4a50-b67f-dcd0d887272c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can either Create a new cluster on GKE or Add an existing cluster. Assuming
    that you have created a cluster by following the recipes in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)*,
    Building Production-Ready Kubernetes Clusters*, we will add an existing cluster.
    On the view shown in the following screenshot, select the Add existing cluster
    tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ec4b483e-7057-47ef-95d4-a5d74c6d1b7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter a Kubernetes cluster name. In our example, this is `AWSCluster`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the command line where your `kubectl` instance has been configured so
    that you can access your existing Kubernetes cluster, use the following command
    to get the API URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For GitLab to be able to access your cluster using APIs, an authentication
    token is required. Kubernetes stores the `default-token` as a secret. To find
    that token, list the secrets on your cluster using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the token name that was returned by the preceding command and get the CA
    certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a GitLab admin called `ServiceAccount` on your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a GitLab admin called `ClusterRoleBinding` on your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the service account token. The following command will return your token
    in the Token section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''ve copied the token information from the output of *step 11*, click
    on the Add Kubernetes cluster button on the same window. You should see something
    similar to the following view, which is where we add our cluster into GitLab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9fbb26e9-aa9f-41d8-84f4-d4a926a140ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, enter your Base domain name. In our example, we use the `k8s.containerized.me`
    subdomain as our hosted zone, which we created in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml),
    *Building Production-Ready Kubernetes Clusters*, in the *Provisioning a Kubernetes
    cluster on Amazon EC2* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Install button next to Helm Tiller. This option will deploy the
    Helm server into your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6b5f39d4-7ca6-45cb-a1fb-4fab2602ae3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Once Helm has been installed, install Ingress, Cert-Manager, Prometheus, and
    GitLab Runner by clicking the Install buttons next to those options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'All GitLab managed applications are installed under the `gitlab-managed-apps`
    namespace. Validate that they are in the `Running` state on your Kubernetes cluster.
    You should see a list of pods similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Creating a pipeline using Auto DevOps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once it''s enabled, Auto DevOps simplifies the setup and execution of the software
    development life cycle. Let''s perform the following steps to take advantage of
    Auto DevOps and create our first automated pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have more than one project, you need to select the target project where
    you would like to run your pipeline. First, select your project in the Your Projects
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Pipelines under the CI/CD menu. This option will take you to the page
    where existing pipelines can be viewed. On this page, click on the Run Pipeline
    button. This option will help us manually run the pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fb5bd1cf-27f7-45ca-8ef3-7465687394b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you have the option to run the pipeline on different branches. For this
    example, select the master branch to run the pipeline on. In the following screenshot,
    you see the pipeline stages being completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2ee16e18-c286-4d58-a0a6-dcb825fa518c.png)'
  prefs: []
  type: TYPE_IMG
- en: When the pipeline is complete, you will see the results for every job that was
    executed and your application should be accessible at `http://application_name.your_domain.com`.
    In our case, this address is `http://murat-auto-devops.k8s.containerized.me`.
  prefs: []
  type: TYPE_NORMAL
- en: Incrementally rolling out applications to production
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, Auto DevOps uses a Continuous Deployment to production strategy.
    If you would like to change that setting to perform incremental rollouts, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your project in the Your Projects page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on CI/CD in the Settings menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the Auto DevOps section by clicking on the Expand button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the Deployment strategy to Automatic deployment to staging, manual deployment
    to production and click on the Save changes button. You will see the other Auto
    DevOps options as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/213ead72-96d4-49af-aa4c-25bdce9ae166.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Pipelines under the CI/CD menu. Click on the Run Pipeline button to
    manually run the pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the staging job is complete, the pipeline will be paused. You will see
    the results for every job that has been executed and your application should be
    accessible at `http://application-name-staging.your_domain.com`. In our case,
    this address is `http://murat-auto-devops-staging.k8s.containerized.me`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on EnvironmentsÂ inÂ the Operations menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once your application is in the staging environment, you can gradually move
    it into production. To be able to do that while in the staging environment, click
    on the Deploy to button (the one that looks like a play button) and choose a percentage
    to roll out to, as shown in the following view. In the dropdown menu, you will
    see options for 10%, 25%, 50%, and 100%:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4658f06c-9173-4724-8812-6131666c6928.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding recipe, *Creating a pipeline using Auto DevOps*, showed you how
    to take advantage of the functionality of Auto DevOps to simplify the creation
    of pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, after you run the pipeline, GitLab Auto DevOps saves you time and
    effort from creating the stages and jobs manually when no `.gitlab-ci.yml` files
    are found in the project. This file is created by GitLab and provides CI/CD configuration
    for all the projects that don't have one.
  prefs: []
  type: TYPE_NORMAL
- en: If you like to use the `.gitlab-ci.yaml` file instead, disable Auto DevOps and
    use the Set up CI/CD button on your project to create your GitLab CI/CD YAML file
    from a template. Follow the link regarding the *Creating a simple* *.gitlab-ci.yaml*
    *file* instructions in the *See also* section to learn more about creating the
    YAML file.
  prefs: []
  type: TYPE_NORMAL
- en: During *step 3*, Auto DevOps uses Herokuish Buildpacks, a tool for emulating
    Heroku build and runtime tasks in containers. By using Herokuish, GitLab detects
    the language your project is written in and automatically creates the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will also benefit from learning about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: GitLab Web IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitLab Web IDE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'GitLab is not just a CI/CD solution, it has many other functionalities and
    provides you with a private code repository similar to GitHub. You can use GitLab
    Web IDE to edit and commit your changes and push them to production. To edit your
    code without cloning to your own machine, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your project on the Your Projects page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Web IDE button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a file from the repository to edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the file and once done, click on the Commit... button, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b20131eb-5202-4630-a137-9fef992bf525.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a commit message and click on the Stage & Commit button, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/95a2c828-d495-48ff-8045-58f24f44e3d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Your commit will trigger a new pipeline. As a result, GitLab will build, test,
    and stage your changes.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring environments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using GitLab, you can monitor Kubernetes cluster resource usage and application
    response metrics. If you haven''t enabled Prometheus on your Kubernetes cluster,
    follow the instructions in the *Enabling Kubernetes cluster integration* recipe
    and then perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your project on the Your Projects page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Metrics in the Operations menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Production environment from the drop-down menu. On the dropdown
    menu, you will have production and staging environments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c3f01d5e-d5b5-4002-8f08-33306fbc3518.png)'
  prefs: []
  type: TYPE_IMG
- en: 'GitLab will show a page similar to the following with the last 8 hours of your
    application performance data and Kubernetes resource utilization metrics. In this
    view, you will be able to see the historical average and total CPU and memory
    utilization of the applications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/433a735d-2073-4e60-8100-4b18de8adf82.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you know how to create projects on GitLab and use Auto DevOps functionality
    to automate the creation of CI/CD pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you would like to learn more about GitLab, the Quick Start Guide by Adam
    O''Grady is a great resource: [https://www.packtpub.com/virtualization-and-cloud/gitlab-quick-start-guide](https://www.packtpub.com/virtualization-and-cloud/gitlab-quick-start-guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitLab Training Tracks: [https://about.gitlab.com/training/](https://about.gitlab.com/training/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitLab Git cheat sheet: [https://about.gitlab.com/images/press/git-cheat-sheet.pdf](https://about.gitlab.com/images/press/git-cheat-sheet.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Learning GitLab: [https://www.packtpub.com/application-development/learning-gitlab-video](https://www.packtpub.com/application-development/learning-gitlab-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hands-On Auto DevOps with the GitLab CI: [https://github.com/PacktPublishing/Hands-On-Auto-DevOps-with-GitLab-CI](https://github.com/PacktPublishing/Hands-On-Auto-DevOps-with-GitLab-CI)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating a simple `.gitlab-ci.yaml` file: [https://docs.gitlab.com/ee/ci/quick_start/#creating-a-simple-gitlab-ciyml-file](https://docs.gitlab.com/ee/ci/quick_start/#creating-a-simple-gitlab-ciyml-file)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a CI/CD pipeline in CircleCI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover the initial configuration and requirements to
    deploy and manage Kubernetes services using CircleCI. You will learn how to create
    a pipeline so that you can build container images and store them in a Container
    Registry.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires an active GitHub account with a project to build. We will
    use AWS EKS to demonstrate CI with CircleCI.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, visit the following GitHub page of our demo application project and
    fork your copy to your GitHub account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Clone the `k8sdevopscookbook/circleci-demo-aws-eks` repository to your workstation
    in order to use the `circleci-demo-aws-eks` example at [https://github.com/k8sdevopscookbook/circleci-demo-aws-eks](https://github.com/k8sdevopscookbook/circleci-demo-aws-eks).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with CircleCI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying changes to a Kubernetes cluster on Amazon EKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with CircleCI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Circle CI is a continuous integration platform that automatically runs your
    build in a clean container or virtual machine, allowing the code stored on your
    repository to be directly tested for every commit. CircleCI can be used in the
    cloud as a SaaS solution or installed as a self-hosted solution on your environment.
    Let''s perform the following steps to get started using the cloud version of CircleCI:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign up for CircleCI using your GitHub account by going to [https://circleci.com/signup/](https://circleci.com/signup/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you''ve signed up, click on the ADD PROJECTS button on the left-hand
    side of the Dashboard view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/220ef634-823b-4dc8-9808-a8ae01cdfc8b.png)'
  prefs: []
  type: TYPE_IMG
- en: From the upper-left drop-down menu, select the GitHub account where you want
    to build your projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying changes to a Kubernetes cluster on EKS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, we will use Amazon EKS. Let''s perform the following steps
    to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new AWS IAM user specifically for CircleCI and take note of your new
    user's access key ID and secret access key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a repository named `eks_orb_demo_app` on the AWS Elastic Container Registry
    ECR. Take note of your ECR URL. It should look similar to `1234567890.dkr.ecr.us-east-2.amazonaws.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure you are signed in to Circle CI. Click on the Add Projects button,
    search for the `demo-aws` keyword, and click on the Set Up Project button next
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2b28d5e0-dc29-41e8-ad8e-d6ca958557b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on build. The build will fail since it is missing the environment variables
    to access your AWS account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Project Settings. Go to the Environmental Variables page under Build
    Settings. Create the following four variables by clicking the Add Variable button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0dbbb56f-6391-42a5-aac8-1b1854926ae6.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting environmental variables will allow your pipeline to access AWS resources.
    After the cloud variables have been defined, click on the Build button to start
    the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The build may fail if your AWS user does not have the required permissions;
    otherwise, this should be completed successfully in 35-40 mins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly create a CI/CD pipeline using a demo application
    running on a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: In *s**tep 2* of the *Deploying changes to a Kubernetes cluster on EKS* recipe,
    we created a repository on AWS ECR to push our container images that were built
    by CircleCI. After a successful build, the images will be saved and accessible
    through the private registry location.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 6*, when we run the pipeline, CircleCI will execute six jobs in order.
    The first job (`build-and-push-image`) will bring up a VM, check out our code,
    install any prerequisites, and build the image from the code. The second job (`aws-eks/create-cluster`)
    will create an EKS cluster using the CloudFormation stack and verify the cluster.
    The third job (`deploy-application`) will roll out the application. The fourth
    job (`test-application`) will get the external IP of the service using the `kubectl
    get service demoapp` command and connect to the service to validate the return.
    The service will return a page similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the fifth (`undeploy-application`) and sixth (`aws-eks/delete-cluster`)
    jobs will remove the application and use CloudFormation again to destroy the EKS
    cluster, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you've learned how to easily build your application using predefined
    container environments that have been deployed on CircleCI.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Circle CIÂ documentation: [https://circleci.com/docs/](https://circleci.com/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Circle CI Hello World examples: [https://circleci.com/docs/2.0/hello-world/](https://circleci.com/docs/2.0/hello-world/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Circle CI AWS EKS demo application: [https://github.com/k8sdevopscookbook/circleci-demo-aws-eks](https://github.com/k8sdevopscookbook/circleci-demo-aws-eks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Circle CI GCP demo application: [https://github.com/k8sdevopscookbook/circleci-demo-k8s-gcp-hello-app](https://github.com/k8sdevopscookbook/circleci-demo-k8s-gcp-hello-app)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline using GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub Actions enable you to create custom software development workflows directly
    in your GitHub repository. If you are already using GitHub as your code repository,
    built-in CI/CD capabilities make this option very compelling.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover the GitHub Actions workflow configuration and
    built-in CI/CD capabilities. You will learn how to manage workflows and create
    new GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following recipe, you will learn how to create a basic action example
    in a repository you own by adding a Dockerfile. This recipe requires an active
    GitHub account with a project to build. We will use AWS EKS to demonstrate CI
    with GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a workflow file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic Docker build workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and publishing images to Docker Registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a workflow status badge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a workflow file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'GitHub flow is a lightweight branch that was recently introduced by GitHub.
    Let''s perform the following steps to create our first workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your GitHub account at [https://github.com/](https://github.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a repository where you have maintainer access. In our example, we are
    using the fork of the `k8sdevopscookbook/python-flask-docker` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `ci.yml` file in the `.github/workflows` directory with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines to install any dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'When using computer programming languages, lint tools are used to perform static
    analysis of source code to check for semantic discrepancies. In our example, we
    will use `flake8` to lint our Python code using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have unit tests, add the following lines to test your application with
    `pytest`, a framework that''s used in Python programming to write small tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'After the configuration is complete, send a pull request to your repository
    to trigger the pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0810e8f2-2648-4674-8d22-a728945e0938.png)'
  prefs: []
  type: TYPE_IMG
- en: After the pipeline is complete, you will be able to see a green checkmark on
    your **Pull Request** (**PR**). In the preceding screenshot, you can see that
    all the checks have passed and that the pull request was successful.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic Docker build workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to automate the Docker image build directly
    from our GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your GitHub account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a repository where you have maintainer access. In our example, we are
    using the fork of the `k8sdevopscookbook/python-flask-docker` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Actionstab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From here, click on Add a new workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `dockerimage.yml` file under the `.github/workflows` directory with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The workflow will create a new Docker image every time new code is pushed to
    the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Building and publishing images to Docker Registry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Instead of creating multiple actions to build, tag, login, and push to Docker
    Repository, you can use one action to achieve all at once. Let''s perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your GitHub account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a repository where you have maintainer access. In our example, we are
    using the fork of the `k8sdevopscookbook/python-flask-docker` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Actionstab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From here, click on Add a new workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `dockerpush.yml` file under the `.github/workflows` directory with
    the following content. Make sure to change `MyDockerRepo/repository` so that it
    uses the name of the image you would like to push:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Click on the Settings tab and go to the Secrets menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `DOCKER_USERNAME` secret with the value equals to the username you
    used to log in to your Docker Registry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create `DOCKER_PASSWORD` secrets with a value equals to the password you used
    to log in to your Docker Registry. After both secrets have been created, you should
    be able to see them in the Secrets menu, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/be592aef-a334-4db1-95bc-16feff6b480b.png)'
  prefs: []
  type: TYPE_IMG
- en: Environmental variables stored as secrets will be encrypted and are only available
    for selected actions.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a workflow status badge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many good source code repositories on GitHub use badges on their main page
    to display the status of various tests that have been completed on the repositories.
    Similarly, in this recipe, we will add an action status summary to our repository
    to inform our visitors and users about the current workflow status:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your GitHub account and select a repository where you have maintainer
    access. In our example, we are using the fork of the `k8sdevopscookbook/python-flask-docker`
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the `README.md` file in the top directory of your repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the link to the badge by following the format `https://github.com/{owner}/{repo}/workflows/{workflow_name}/badge.svg`,
    as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GitHub Actions for interacting with Docker:Â [https://github.com/docker-actions](https://github.com/docker-actions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Actions for AWS:Â [https://github.com/aws-actions](https://github.com/aws-actions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub Actions for Azure: [https://github.com/Azure/k8s-actions](https://github.com/Azure/k8s-actions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Actions for GCP:Â [https://github.com/GoogleCloudPlatform/github-actions](https://github.com/GoogleCloudPlatform/github-actions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline on Amazon Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover the CI/CD pipeline construction workflow on AWS
    and built-in CI/CD capabilities. You will learn how to manage pipelines, how to
    run build commands during the pipeline steps, and how to store build result images
    on the Amazon **Elastic Container Registry** (**ECR**).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following recipe, you will learn how to build, test, and deploy an example
    service based on AWS services. All the operations mentioned here require an AWS
    account and an AWS user with a policy that has permission to use the related services,
    have HTTPS Git credentials for CodeCommit assigned, and a Kubernetes cluster deployed
    using AWS EKS. If you don't have one, go to [https://aws.amazon.com/account/](https://aws.amazon.com/account/)
    and create one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AWS CodeCommit code repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building projects with AWS CodeBuild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AWS CodeDeploy deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pipeline with AWS CodePipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AWS CodeCommit code repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The AWS CodeCommit service is a managed source control service that hosts secure
    Git-based repositories on the AWS platform. In this recipe, we will learn how
    to create our first repository on CodeCommit:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your AWS account and open AWS Developer Tools at [https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Developer Tools menu, expand the Source menu and click on Repositories.
    You can see the complete menu content in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9fae4253-3496-4711-a6cf-78311a0c4bd4.png)'
  prefs: []
  type: TYPE_IMG
- en: On the Repositories page, click on the Create repository button to start your
    code repository on CodeCommit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a Repository name and click on the Create button. In this example, the
    repository name is `k8sdevopscookbook`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/271a39b0-baa2-4542-aba5-41762c9de778.png)'
  prefs: []
  type: TYPE_IMG
- en: From the AWS Management Console, go to the IAM service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the list of existing users, select an IAM user that you would like to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the user summary page, click on the Security credentials tab. The following
    screenshot shows the location of the tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b31e3807-08f6-4af9-8cba-f00c0dd82a0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under HTTPS Git credentials for AWS CodeCommit, click on the Generate button.
    This will create a username and password that we will use for authentication later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/073cf86f-a4ec-430a-9fd7-79a385d52e27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Git credentials generated window, click on the Download credentials
    button to record your CodeCommit credentials. The following screenshot shows the
    username and password that was created for me. This is the only chance you will
    get to view or copy your credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8c830744-3a91-46f1-adcb-3d35aa0a696e.png)'
  prefs: []
  type: TYPE_IMG
- en: From the AWS Management Console, go to the CodeCommit service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the Clone URL column, select HTTPS. In this recipe, our example repository
    is located at [https://git-codecommit.us-west-2.amazonaws.com/v1/repos/k8sdevopscookbook](https://git-codecommit.us-west-2.amazonaws.com/v1/repos/k8sdevopscookbook).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On your Linux workstation, clone the empty repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Clone the repository using your CodeCommit credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download our example application and extract it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, copy the example application to your clone of the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Stage all your files. The following command will find all the new and updated
    files on the project directory and add them to the staging area before it is pushed
    to the target repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Commit the files with a message. The following command, when used with the
    `-m` parameter, adds the commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Push the files from your local repository folder to your CodeCommit repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Now, you will be able to view files in your CodeCommit repository.
  prefs: []
  type: TYPE_NORMAL
- en: Building projects with AWS CodeBuild
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to build a project from the CodeCommit repository
    that we created in the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your AWS account and open AWS Developer Tools at [https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Developer Tools menu, expand the Build menu and click on Build Projects.
    The following screenshot shows the menu''s location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/21b521d3-d7b2-4901-9a62-92656a5d44b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Build projects page, click on the Create build project button. The following
    screenshot shows the other available menu options and the location of the Create
    build project button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4771692c-ef47-4219-b8a2-ff4d132d5526.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter a project name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will set the primary source of the project. In the Source box, select
    AWS CodeCommit as a source provider. Select the repository you created in the
    *Creating an AWS CodeCommit code repository* recipe. Select the master branch.
    In our example, the repository''s name is `k8sdevopscookbook`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/97080e65-b5d3-4a31-87e9-d1b77b832578.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Environment box, select Managed image and Ubuntu as your OS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select New service role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/12b6a212-36bd-4299-94db-7cf731616d0d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Expand the additional configuration settings. Add the `AWS_DEFAULT_REGION`,
    `AWS_ACCOUNT_ID`, `IMAGE_TAG`, and `IMAGE_REPO_NAME` environment variables, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8bfa7308-3c60-4afb-996d-ffe56f0aadd8.png)'
  prefs: []
  type: TYPE_IMG
- en: Never store environmental variables in a repository location. Always use environmental
    parameters to provide the values during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Buildspec box, select Use a buildspec file. Make sure the `buildspec.yaml`
    file exists in the root of your code repository. This file should look something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Finally, click on Create build project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the Service Role you created in *step 7* inÂ **Identity and Access Management**
    (**IAM**) and add this statement to the policy attached to the CodeBuild service
    role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the project is ready, click on the Start build button on the upper
    right-hand corner of the page. In the following screenshot, you can view its status
    under the Build history tab, after it''s been started. In our example, it shows
    that the build Succeeded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e9ab7445-b080-47cf-a627-60478cfd5a41.png)'
  prefs: []
  type: TYPE_IMG
- en: If your builds fail, make sure that the `AmazonEC2ContainerRegistryPowerUser`
    policy is assigned to your IAM role.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AWS CodeDeploy deployment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to create a deployment from the CodeBuild
    builds:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your AWS account and open the AWS Developer Tools at [https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Developer Tools menu, expand the Deploy menu and click on Applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Create application button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5ed43060-aef1-43f2-bd99-84e3406cc5c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter an application name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose AWS Lambda as a compute platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building a pipeline with AWS CodePipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, we have reached the last stage of AWS Developer Tools. Let''s perform
    the following steps to build a pipeline using the AWS CodePipeline service:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your AWS account and open the AWS Developer Tools at [https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Developer Tools menu, expand the Pipeline menu and click on Pipelines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a pipeline name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select New service role and click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will set the primary source of the pipeline. Select AWS CodeCommit
    as a source provider. Select the repository you created in the *Creating an AWS
    CodeCommit code repository* recipe. Click on the Next button to confirm these
    changes. The following screenshot shows that, in our example, the source is `k8sdevopscookbook`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/03852d6f-bc48-4512-bcf2-f18b9ddbc92b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select AWS CodeBuild as the Build provider. Select the project name you created
    in the *Building projects with AWS CodeBuild* recipe (or create a new project).
    Click on Next to confirm these changes. The following screenshot shows that, in
    our example, the region is `US West` and that the project name is DevOpsCookbookExample:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b678c7f3-fab8-466c-8e17-a19e2bbb58b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Skip deploy stage. As a deployment alternative, you can invoke a Lambda
    function to call the CloudFormation template and deploy a Kubernetes cluster.
    You can find the AWS CodeSuite example that shows how to do this in the *See also*
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create Pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the pipeline has been executed, you will see a build similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/77496350-5504-451a-aa6a-1f7c9af63562.png)'
  prefs: []
  type: TYPE_IMG
- en: With that, you have successfully built a pipeline using the AWS CodePipeline
    service.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly create a pipeline using AWS Developer
    Tools.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Building a pipeline with AWS CodePipeline* recipe, after you create
    the pipeline, AWS CodePipeline watches for changes in AWS CodeCommit. When a new
    PR is merged into the master branch stored in your CodeCommit repository, CodePipeline
    automatically detects the changes to the branch and triggers the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: During the build job, CodeBuild packages the code and any dependencies described
    in the Docker file into a Docker image. This Docker image is pushed to the Amazon
    ECR container registry you specified during the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: This pipeline is also fully extensible. In fact, you have the option to also
    invoke a serverless function through AWS Lambda to either create a Kubernetes
    cluster or deploy the code on an existing Kubernetes cluster so that you can test
    it. You can find additional examples at the AWS Blog link provided in the *See
    also* section.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AWS CodeCommit documentation: [https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS CodeBuild documentation: [https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html](https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS CodeDeploy documentation: [https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html](https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS CodePipeline documentation: [https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html](https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS Blog on Continuous Deployment to Kubernetes using AWS Developer Tools:
    [https://aws.amazon.com/blogs/devops/continuous-deployment-to-kubernetes-using-aws-codepipeline-aws-codecommit-aws-codebuild-amazon-ecr-and-aws-lambda/](https://aws.amazon.com/blogs/devops/continuous-deployment-to-kubernetes-using-aws-codepipeline-aws-codecommit-aws-codebuild-amazon-ecr-and-aws-lambda/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CodeSuite â€“ Continuous Deployment Reference Architecture for Kubernetes: [https://github.com/aws-samples/aws-kube-codesuite](https://github.com/aws-samples/aws-kube-codesuite)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A similar example of a Lambda function for EKS deployment: [https://github.com/muratkars/lambda-eks](https://github.com/muratkars/lambda-eks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline with Spinnaker on Google Cloud Build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Cloud Build is a managed CI/CD and deployment platform that lets you
    build, test, and deploy in the cloud. In this section, we will cover the CI/CD
    pipeline with Google Cloud Build configuration using Spinnaker capabilities, an
    open source, multi-cloud continuous delivery platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use the
    manifest files under the `chapter3` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you have the necessary credentials to use GCP services and have access
    to the current project. If you don't have one already, go to [https://console.cloud.google.com](https://console.cloud.google.com)
    and create an account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the Spin CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a service account for the CI/CD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring events to trigger the pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Spinnaker using Helm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Google Cloud Source code repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building projects with Google Cloud Build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Spinnaker pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling out an application to production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the Spin CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The operations mentioned in the following recipes require the `spin` CLI, `gcloud`,
    and a GCP account with a project that has billing enabled. We will enable related
    APIs using the `gcloud` CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to download the `gcloud` CLI. If you have the `gcloud`
    CLI installed and a project already, skip to *step 4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize the SDK and follow the instructions given:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Select a project that you have permissions for or create a new one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the Kubernetes Engine API, the Cloud Build API, and the Cloud Source
    Repositories API for the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Download and install the `spin` CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Now you have GCP services enabled and the `spin` CLI installed.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a service account for the CI/CD
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To use CI/CD services on Google Cloud, your user needs to have the right permissions
    assigned to them. Let''s perform the following steps to configure a service account
    for the CI/CD:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the instructions in the *Provisioning a managed Kubernetes cluster on
    the GKE* recipe of [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml), *Building
    Production-Ready Kubernetes Clusters*, to deploy a GKE cluster. If you already
    have one, skip to *step 2* to create a service account that will be used by the
    pipeline later*:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the following `devopscookbook` in both places with your project name
    and add storage admin role binding to your service account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Store your `cicd-account` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: With that, you have assigned the permissions to your service account.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring events to trigger a pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Google Pub/Sub is a cloud service best described as a managed version of Kafka
    or Rabbit MQ. We will use Google Pub/Sub to deliver notifications when a change
    is detected in our container registry. Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following `gcloud` command to create a Cloud Pub/Sub topic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `pubsub` subscription. The following command should return a `Created
    subscription` message, similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the following `devopscookbook` in both places with your project name
    and add permission to your CI/CD service account, that is, `cicd-account`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: With that, you've learned how to configure events to trigger a pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Spinnaker using Helm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to deploy the Spinnaker tool using Helm
    charts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that `helm` is installed and initialized on your GKE cluster. If not,
    follow the instructions in [Chapter 2](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml),
    *Operating Applications on Kubernetes*, in the *Deploying workloads using Helm
    charts* recipe to install Helm. The following command will return the client and
    server of Helm if it''s installed on your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `clusterrolebinding` for the `ci-admin` service account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a pipeline configuration bucket using the following command. Make sure
    to replace the `devopscookbook-ci-config` bucket name with a unique name. This
    will create an object storage bucket on Google Cloud Storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a variable with the content of the `cicd-account` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `spinnaker-config.yaml` file in the `cd /src/chapter3/gcp` directory
    and replace the following bucket name with the bucket name you used in *step 3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy Spinnaker on your Kubernetes cluster using the custom `spinnaker-config.yaml`
    file from *step 5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Create port forwarding tunnels to access the Spinnaker UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: To be able to access the Spinnaker UI, we created port forwarding tunnels for
    our workstation. We could also create a cloud LoadBalancer to open ports to the
    internet, but port forwarding is safer.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Google Cloud Source code repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to create a code repository on the Google
    Cloud Source Code service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download our example application and extract it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'After the example code has been extracted, change directories to our source
    code directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the initial commit to your repository using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Google Cloud Code repository named `sample-app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Set `credential.helper` for the Google Cloud repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace `devopscookbook` with your project name. Add your new repository as
    `remote` and push your code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you will be able to view the files in your Google Cloud Source Code repository
    in the `sample-app` repository, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dff17c2c-462c-4c90-851b-d3ed4ffac50e.png)'
  prefs: []
  type: TYPE_IMG
- en: With that, you've learned how to create a code repository on Google Cloud Source.
    In the next recipe, we will use the Cloud Source repository location to build
    our project.
  prefs: []
  type: TYPE_NORMAL
- en: Building projects with Google Cloud Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to build the project from the Cloud Source
    repository that we created in the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we are going to use the Cloud Build product to build our project. First,
    log in to your GCP account. From the main Products menu, click on Cloud Build.
    As shown in the following screenshot, it is located underÂ TOOLS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5841046d-5c6c-43f6-89be-7a7ca707ed48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Cloud Build menu, choose Triggers and click on the Create trigger button,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/98ab79e8-0aab-4955-b309-3eb7845924fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our code is in a Cloud Source repository, so select Cloud Source Repository
    and click on the Continue button. As you can see, the other options are Bitbucket
    and GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e5599274-fde6-4d8f-8400-8fcaa4a4fcee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The repositories on your account will be detected automatically. Select the
    sample-app repository and click on the Continue button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/103ed3ee-1202-4fac-b7f5-80b8464cff1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Set the following settings and leave the others unchanged:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Click on the Create trigger button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch back to the command line where `kubectl` has been configured to access
    your Kubernetes cluster and create a bucket. Replace the `devopscookbook-kubernetes-manifests`
    bucket name with a unique bucket name before you create it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable bucket versioning on the bucket you created in *step 6*. This following
    command will enable versioning on Cloud Storage and let the bucket keep old versions
    of objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are not already in the source code folder, change directories to our
    source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the project ID in our Kubernetes deployment manifest files to your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Commit the changes with a meaningful commit message similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Git tag for the release and push the tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Switch back to the browser and click on History from the Cloud Code menu and
    confirm that the build has been triggered and successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2bb183cc-5340-4d4a-9607-caf97bcb73b3.png)'
  prefs: []
  type: TYPE_IMG
- en: With that, you've learned how to build a project using Google Cloud Build.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a Spinnaker pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to upload your configuration to Spinnaker:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the following email in the `owner-email` section with yours and create
    the provided application in Spinnaker using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Upload the example pipeline to Spinnaker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will export the configuration into a file called `pipeline.json`
    and upload it to Spinnaker.
  prefs: []
  type: TYPE_NORMAL
- en: Rolling out an application to production
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once an application has been deployed to staging, the next step is to promote
    it into the production environment. Let''s perform the following steps to promote
    an application from staging to production on Spinnaker:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Spinnaker UI, select the `sample` application that we created in the
    *Configuring a Spinnaker pipeline* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d29888dd-c11b-4dfc-95ef-a86a60db443c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the PIPELINESÂ tab shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ba2ae567-5703-449e-b53d-4bc8e649db4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hover your mouse over the orange box and click on the Continue button. As shown
    in the following screenshot, the green boxes represent completed parts of the
    pipeline, while the orange box shows where the pipeline has been paused:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4a8de161-ecf9-44d4-9b1e-1784561fd2e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select LOAD BALANCERS under the INFRASTRUCTURE menu. The following screenshot
    shows the INFRASTRUCTURE menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/78cac1a3-e86f-4613-a862-3aadf18123de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the DEFAULTÂ button under the service sample-frontend-production load
    balancer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0cf5bda7-9bfe-4442-bfd6-9b642bfac74f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the right-hand side of the details pane, find the Ingress IP and copy it
    to the clipboard by clicking the copy icon next to the IP address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7cdabc5b-557d-4d4a-8c6a-747fd5f01cc4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the IP address in your browser to confirm that the production application
    is accessible. You will see a screen similar to the following view showing the
    Pod Name, Node Name, and its Version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a013b547-7880-4be6-b1c7-dd64edc1aa4c.png)'
  prefs: []
  type: TYPE_IMG
- en: With that, you know how to use Google Cloud Platform services and Spinnaker
    to create your CI/CD pipeline on GKE.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CI/CD on Google Cloud Quickstarts: [https://cloud.google.com/docs/ci-cd/](https://cloud.google.com/docs/ci-cd/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cloud Source Repositories documentation: [https://cloud.google.com/source-repositories/docs/](https://cloud.google.com/source-repositories/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline on Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure DevOps provides version control, reporting, automated builds, and project/lab/testing
    and release management capabilities. Azure DevOps is available as a SaaS or on-premises
    server product. In this section, we will cover the Azure DevOps workflow configuration
    and built-in CI/CD capabilities using the SaaS product. You will learn how to
    manage workflows and create Azure pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following recipe, you will learn how to create a pipeline example in
    a repository you own by adding a YAML file. This recipe requires an active GitHub
    account with a project ready to be built. We will use AKS to demonstrate continuous
    delivery with Azure Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: All the operations mentioned here require an Azure DevOps account. If you don't
    have one, go to [https://azure.microsoft.com/services/devops/](https://azure.microsoft.com/services/devops/)
    and create one. Deploying the application on Azure Kubernetes Service also requires
    an active Azure Cloud subscription.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Azure Pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying changes to an AKS cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Azure DevOps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Azure DevOps is a set of DevOps tools provided by Microsoft that includes CI/CD
    and project management services such as Azure Pipelines, Azure Boards, Azure Artifacts,
    Azure Repos, and Azure Test Plans.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to create our first project before we use
    Azure Pipelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to Azure DevOps at [https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a project name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose Visibility. In our example, this is set to Public:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cc5619ec-043a-4528-b12a-89b4680442a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Create project button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring Azure Pipelines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Azure Pipelines lets you build, test, and deploy with the CI/CD with any language,
    platform, and cloud provider. Let''s perform the following steps to configure
    Azure Pipelines for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you log in to your Azure DevOps account, you will see the links to the
    main functionality on the left-hand Overview menu. From the Overview menu, click
    on the Pipelines menu. The following screenshot shows the Welcome to the project!
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fc5a7620-552f-4d7a-b743-f32dbaa88b4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Create Pipeline button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As part of the pipeline creation process, you need to set your code repository
    location. You can import a project from any Git repository. In our example, we
    will use GitHub as our repository. The following screenshot shows all the other
    available options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f133f0fc-2927-47a2-ab1b-3bff450fce7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Authorize AzurePipelines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/80641ee3-4983-40c4-ab1f-cafdb9f06a2e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a repository and click on Approve & Install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ea734a96-7cad-414e-a452-317e27999b7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select the repository you would like to configure a pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose Docker to build and push an image to Azure Container Registry. This
    option will upload the container artifact to the Azure Container Registry service.
    The following screenshot shows the Docker option that we will be using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6486d71c-dab1-4c37-9d8f-5acce591e232.png)'
  prefs: []
  type: TYPE_IMG
- en: Review your pipeline YAML and click Save and run to approve it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the pipeline. Click on the Build job to view its details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6ec79d19-26a7-4c7f-b9ee-74245c139ec7.png)'
  prefs: []
  type: TYPE_IMG
- en: With that, you've learned how to configure an Azure Pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying changes to an AKS cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you log in to your Azure DevOps account, you will see the links to the
    main functionality on the left-hand Overview menu. This time, from the Overview
    menu, choose the Pipelines option. As shown in the following screenshot, it is
    the fourth option from the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fc5a7620-552f-4d7a-b743-f32dbaa88b4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you need to create a pipeline. The following screenshot shows the Pipelines
    menu. Click on the New pipeline button located in the upper-right corner of the
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dcbbcd9e-9e9e-4633-8c04-2e34e47a3f43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose GitHub as your repository. Again, all the other repository options are
    visible in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e351c53a-693a-4242-bd5e-a78ca46519d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a repository and click on Approve & Install. The following screenshot
    shows that my own repository is selected. In your case, the repository name will
    be different:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ea734a96-7cad-414e-a452-317e27999b7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select the repository you would like to configure a pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, you will be offered predefined alternatives
    for configuring your pipelines. For this example, choose Deploy to Azure Kubernetes
    Service to build and push an image to Azure Container Registry and to deploy to
    AKS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/410573a4-1b7f-4467-9883-18a1d673fb84.png)'
  prefs: []
  type: TYPE_IMG
- en: Select your Azure Cloud subscription.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select an existing AKS cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Existing and select default in the Namespace field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the name of your Container Registry. In the following screenshot, you
    can see the options that I have selected. In your case, Container registry and
    Image Name will be different:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7a16daf7-6ec7-4906-b310-a2667ebe2639.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Validate and configure button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review your pipeline YAML and click Save and run to approve it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the pipeline. Click on the Build job to view its details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/37374853-179a-4be0-a72b-a50677fbbc28.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, our simple pipeline only includes only
    two stages. These will be explained in the *How it works...* section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly create an Azure DevOps CI/CD pipeline
    using a demo application running on an AKS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *Deploying changes to an AKS cluster* recipe, after *step 9*, while
    we build the job, Azure Pipelines will create your pipeline. It will create the
    following two stages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In stage 1, which is the Build Stage, it creates a Docker image and pushes
    images into your Azure Container Registry. When it is successful, you can find
    the new image stored in your existing registry in Azure portal. As an example,
    the following screenshot shows the image that was created as a result of my pipeline
    under the Azure Container Registry and its details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/93b68400-5524-40fc-a2e4-862bcf603f00.png)'
  prefs: []
  type: TYPE_IMG
- en: In stage 2, which is the Deploy stage, it creates the image pull secrets to
    access your registry and rolls out your application as a deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application will be deployed into the namespace you specified during the
    pipeline creation.
  prefs: []
  type: TYPE_NORMAL
- en: Later, you can create multiple environments that can be used for the different
    stages (preview, staging, and production) of your application and change where
    your application needs to be deployed in the pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure DevOpsÂ documentation: [https://docs.microsoft.com/en-us/azure/devops/?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/?view=azure-devops)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure PipelinesÂ documentation: [https://docs.microsoft.com/en-us/azure/devops/pipelines/index?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/index?view=azure-devops)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Canary deployment strategy for Kubernetes deployments: [https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/kubernetes/canary-demo?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/kubernetes/canary-demo?view=azure-devops)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
