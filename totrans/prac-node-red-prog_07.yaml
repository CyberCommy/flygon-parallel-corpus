- en: '*Chapter 5*: Implementing Node-RED Locally'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, let's use the standalone version of Node-RED. Node-RED consists
    of a development environment, an execution environment, and the application itself.
    You can understand the mechanism by using the standalone version that runs in
    the local environment.
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, the most common reason for starting the standalone version of
    Node-RED is when using it on an IoT edge device. IoT edge devices have sensors
    that are usually applied to the "Things" part of the "Internet of Things." In
    this chapter, we will look at the sensing data within the edge device and create
    a sample flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with the following four topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Running Node-RED on a local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the standalone version of Node-RED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using IoT on edge devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a sample flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned how to build a flow for handling
    sensor data on IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To progress through this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Node-RED (v1.1.0 or above): [https://nodered.org/](https://nodered.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raspberry Pi: [https://www.raspberrypi.org/](https://www.raspberrypi.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code used in this chapter can be found in `Chapter05` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).
  prefs: []
  type: TYPE_NORMAL
- en: Running Node-RED on a local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can now create the flow for sensing data on an IoT edge device, and in this
    scenario, the local machine uses Raspberry Pi. The reason for this will be described
    in the *Using the standalone verison of Node-RED* section, but in summary, this
    tutorial is for IoT edge device.
  prefs: []
  type: TYPE_NORMAL
- en: I have already explained how to start Node-RED on Raspberry Pi, so you should
    now know how to run it, but if you need a refresher, please refer to the *Install
    Node-RED for Raspberry Pi* section in [*Chapter 2*](B16353_02_ePub_AM.xhtml#_idTextAnchor034),
    *Setting Up the Development Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these steps to start Node-RED on your Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by executing Node-RED from the Raspberry Pi menu:![Figure 5.1 –
    Running Node-RED from the Raspberry Pi menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.01_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Running Node-RED from the Raspberry Pi menu
  prefs: []
  type: TYPE_NORMAL
- en: You can check the status of Node-RED on your terminal. If **Started flows**
    is shown, Node-RED is ready to use:![Figure 5.2 – Terminal of Raspberry Pi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.2_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Terminal of Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the Node-RED flow editor with the `localhost:1880` URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Node-RED flow editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.3_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Node-RED flow editor
  prefs: []
  type: TYPE_NORMAL
- en: Let's learn a few concepts before making use of the flow editor.
  prefs: []
  type: TYPE_NORMAL
- en: Using the standalone version of Node-RED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will learn what the standalone version of Node-RED is and how it differs
    from other versions. We usually use the Node-RED flow editor as a standalone editor;
    however, we can also use the Node-RED flow editor on any cloud with container
    technologies such as Docker, Kubernetes, or Cloud Foundry. We will explicitly
    demonstrate the use of the standalone version with relatively common use cases
    to learn how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's think about situations where Node-RED is used.
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED is a tool for creating applications made with Node.js. It is also the
    execution environment. If you can write an application in Node.js, that's fine.
  prefs: []
  type: TYPE_NORMAL
- en: So, why build an application with Node-RED?
  prefs: []
  type: TYPE_NORMAL
- en: One answer is to black-box each individual unit of data processing. This makes
    the role of each process very clear and easy to build and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Another answer is to avoid human error. Since each process is modularized as
    a node, you only need to understand the input/output specifications when using
    that process. This means you can avoid human errors such as coding mistakes and
    missing test specifications. This can be the advantage of no-code/low-code as
    well as Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: Next, imagine a concrete situation that uses Node-RED with the characteristics
    just described.
  prefs: []
  type: TYPE_NORMAL
- en: Think of a business logic that controls data and connects it to the next process.
    This is a common situation in IoT solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The standard architecture for IoT solutions is built with edge devices and cloud
    platforms. It sends the sensor data acquired by the edge device to the cloud and
    then, on the cloud work to process the data, such as visualizing, analyzing, and
    persistent.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I would like to focus on that edge device part.
  prefs: []
  type: TYPE_NORMAL
- en: It is common for edge devices to want to prepare the acquired sensor data to
    some extent before sending it to the cloud. The reason for this that if you send
    all the acquired data, there is a risk that the network will be overloaded.
  prefs: []
  type: TYPE_NORMAL
- en: So, the standalone Node-RED exercise uses Raspberry Pi, which is a famous IoT
    infrastructure for consumers.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use the **Grove Base HAT** for Raspberry Pi and Grove
    Base modules. This is one of the standards for the IoT edge device platform and
    so we need to install the Grove Base driver to Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: This chapter gives an example using Grove Base HAT, which is relatively inexpensive
    and can be purchased (the link to this is mentioned in the next section), but
    any sensor device that can be connected to a Raspberry Pi can handle data on Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: When using a module other than the Grove Base HAT sensor device, use the corresponding
    node and read this chapter. (Implementation is required if there is no corresponding
    node.)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the Node-RED library for the existence of a node that corresponds
    to each device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://flows.nodered.org/](https://flows.nodered.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s prepare to use Grove Base HAT on our Raspberry Pi by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by executing the following command on our Raspberry Pi:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If everything goes well, you will see the following notice:![Figure 5.4 – Successful
    grove.py installation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.4_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Successful grove.py installation
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to enable ARM I2C. We can do this by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After executing the command, you will see the following configuration window.
    Please select **Interfacing Options**:![Figure 5.5 – Software configuration tool
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.5_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Software configuration tool
  prefs: []
  type: TYPE_NORMAL
- en: Select **I2C**:![Figure 5.6 – Enabling I2C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.6_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Enabling I2C
  prefs: []
  type: TYPE_NORMAL
- en: Once you select it, a **Would you like the ARM I2C interface to be enabled?**
    message will be shown in the same window. Please select **Yes** to accept it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now successfully enabled I2C. Restart the Raspberry Pi and restart
    the Node-RED flow editor. In doing this, your Raspberry Pi has been made available
    to use the I2C interface, and for the next step, we need to connect the sensor
    devices and Raspberry Pi via the I2C interface.
  prefs: []
  type: TYPE_NORMAL
- en: Using IoT on edge devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's consider a case study on edge devices in IoT.
  prefs: []
  type: TYPE_NORMAL
- en: IoT has recently been adopted in several industries, for example, in the fields
    of weather forecasting and agriculture; however, the basic composition is the
    same. Various data acquired by the edge device is sent to the server-side platform,
    such as the cloud, and the data is handled and visualized on the server side,
    which is full of resources. There are various ways to visualize, but in the simplest
    case, it will be to output the necessary data values to the log as a standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I would like to consider the edge device part in the use case
    of IoT. This is about handling the sensor data, acquired using the sensor module,
    before it goes to the server side for formatting and narrowing down.
  prefs: []
  type: TYPE_NORMAL
- en: What are the different kinds of sensors?
  prefs: []
  type: TYPE_NORMAL
- en: 'The following sensors are often used at the experimental level of IoT:'
  prefs: []
  type: TYPE_NORMAL
- en: Temperature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Humidity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gyroscope (acceleration, angular velocity)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sound
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pressure-sensitive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Magnetic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here we will consider the use case of outputting the acquired value to the log
    using a light sensor and a temperature/humidity sensor.
  prefs: []
  type: TYPE_NORMAL
- en: In order to get sensor data, you'll need a device. In this sample flow (application),
    Raspberry Pi is used, but it does not have a sensing function because it is just
    a foundation. With the old-fashioned board, you had to solder the sensor device/module,
    but the convenient thing about the Raspberry Pi is that there are many sensor
    module kits that can be connected with one touch.
  prefs: []
  type: TYPE_NORMAL
- en: 'As already introduced, we''ll use the Grove series provided by Seeed, which
    has a sensor module and connection board for Raspberry Pi: [https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/](https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's prepare the Grove Base HAT for Raspberry Pi modules.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have the Grove Base HAT for Raspberry Pi and want to run this tutorial,
    please buy it via the official site ([https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html](https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the Grove Base HAT for Raspberry Pi looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Grove Base HAT for Raspberry Pi'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.07_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Grove Base HAT for Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to connect the Grove Base HAT and the sensor modules to the Raspberry
    Pi. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Place the Grove Base HAT on your Raspberry Pi and screw it in:![Figure 5.8 –
    Setting the Base HAT on your Raspberry Pi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.08_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Setting the Base HAT on your Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the Grove - Light Sensor v1.2 - LS06-S phototransistor looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Grove - Light Sensor v1.2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.09_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Grove - Light Sensor v1.2
  prefs: []
  type: TYPE_NORMAL
- en: You can get it from [https://www.seeedstudio.com/Grove-Light-Sensor-v1-2-LS06-S-phototransistor.html](https://www.seeedstudio.com/Grove-Light-Sensor-v1-2-LS06-S-phototransistor.html).
  prefs: []
  type: TYPE_NORMAL
- en: Connect the Grove light sensor to the analog port of your Base HAT:![Figure
    5.10 – Connecting the light sensor to your Base HAT
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.10_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – Connecting the light sensor to your Base HAT
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Please be careful! This vendor, **Seeed,** has a similar module for temperature/humidity
    sensor **SHT35**, but it's not supported by the Grove Base HAT node. You need
    to use **SHT31**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the Grove - Temperature&Humidity Sensor (SHT31) looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Grove – Temperature&Humidity Sensor (SHT31)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.11_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Grove – Temperature&Humidity Sensor (SHT31)
  prefs: []
  type: TYPE_NORMAL
- en: You can get it from [https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-SHT31.html](https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-SHT31.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect the Grove temperature and humidity sensor to the I2C port of your Base
    HAT:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Connecting the temperature/humidity sensor to your Base HAT'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.12_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – Connecting the temperature/humidity sensor to your Base HAT
  prefs: []
  type: TYPE_NORMAL
- en: And that's it. Now your device is set up and we are ready to go on to the next
    step! In this part, we have learned about popular, simple use cases of IoT edge
    devices and next, we will make a flow for these use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Making a sample flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create these two sensor data output flows in the Node-RED
    flow editor.
  prefs: []
  type: TYPE_NORMAL
- en: You will use the sensor modules you have prepared to collect data and create
    a sample flow to visualize it on Node-RED. By using two different sensor modules,
    we can learn the basics of data handling in Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: Use case 1 – light sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first is a light sensor. Let''s create a flow (application) that detects
    light and outputs the value detected by a fixed-point observation to a log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Use case 1 – getting light sensor data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.13_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – Use case 1 – getting light sensor data
  prefs: []
  type: TYPE_NORMAL
- en: Connect the light sensor module to the Raspberry Pi and use the Node-RED flow
    editor on the Raspberry Pi to output the data obtained as a standard output.
  prefs: []
  type: TYPE_NORMAL
- en: Use case 2 – temperature/humidity sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The second one is a temperature/humidity sensor. Let''s create an application
    (flow) that detects temperature and humidity and outputs the value detected by
    a fixed-point observation to a log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Use case 2 – getting temperature/humidity data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.14_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – Use case 2 – getting temperature/humidity data
  prefs: []
  type: TYPE_NORMAL
- en: Connect the temperature/humidity sensor module to the Raspberry Pi and use the
    Node-RED flow editor on the Raspberry Pi to output the data obtained as a standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to spot test these two use cases on your device, you need to connect
    a sensor that you can use to obtain sensor data.
  prefs: []
  type: TYPE_NORMAL
- en: You may have to prepare this before creating the flow.
  prefs: []
  type: TYPE_NORMAL
- en: This time, we will use Grove Base HAT, which is easy to use with Raspberry Pi,
    and as this setup was completed in the previous step, we are ready to access the
    data on Raspberry Pi. However, we have not yet prepared Node-RED. It is difficult
    to access this data with Node-RED as default. One way is to use a Function node
    and code the script from scratch, which is very difficult but not impossible.
  prefs: []
  type: TYPE_NORMAL
- en: For handling the sensing data recognized by Raspberry Pi on Node-RED, a "node"
    dedicated to Grove Base HAT is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The good news is that you can start using the node right away. This is because
    Seigo Tanaka, a Node-RED User Group Japan board member ([https://nodered.jp/](https://nodered.jp/))
    and Node-RED contributor, has already created and released a node for Grove Base
    HAT. This is the node for the Grove Base HAT for Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read more about it here: [https://www.npmjs.com/package/node-red-contrib-grove-base-hat](https://www.npmjs.com/package/node-red-contrib-grove-base-hat).'
  prefs: []
  type: TYPE_NORMAL
- en: If you need a refresher on how to install nodes that are published on the node
    library, please read the *Getting several nodes from the library* section in [*Chapter
    4*](B16353_04_ePub_AM.xhtml#_idTextAnchor051), *Learning the Major Nodes*.
  prefs: []
  type: TYPE_NORMAL
- en: The reason I refer you back to this is that the next step is to install the
    node for the Grove Base HAT from the library into your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s enable the use of this Grove Base HAT node in our Node-RED flow editor:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the menu at the top right and select **Manage palette** to open the settings
    panel:![Figure 5.15 – Selecting Manage palette](img/Figure_5.15_B16353.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.15 – Selecting Manage palette
  prefs: []
  type: TYPE_NORMAL
- en: 'When the settings panel is opened, type the name of the node you want to use
    in the search window. We want to use **node-red-contrib-grove-base-hat**, so please
    type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After that, you can see the **node-red-contrib-grove-base-hat** node in the
    search window. Click the **Install** button:![Figure 5.16 – Installing the node-red-contrib-grove-base-hat
    node
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.16_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.16 – Installing the node-red-contrib-grove-base-hat node
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the **Install** button, you will see a message asking you to
    read the documentation to find out more information about this node. Read the
    document if necessary, and then click the **Install** button on the message box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.17 – A message window to read the node documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.17_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.17 – A message window to read the node documentation
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you are ready to use the node for Grove Base HAT. Check the palette in
    the flow editor. At the bottom of the palette, you can see that the Grove Base
    HAT node has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Grove Base HAT nodes on your dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.18_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.18 – Grove Base HAT nodes on your dashboard
  prefs: []
  type: TYPE_NORMAL
- en: There are many sensing modules that can be connected to Grove Base HAT. This
    time, only the light and temperature/humidity sensors are used, but there are
    other things that can be seen by looking at the types of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: The procedure followed for the two use cases created here can also be applied
    when using other sensors. If you are interested, please try other sensors too.
    In the next section, we will make a flow for use case 1.
  prefs: []
  type: TYPE_NORMAL
- en: Making a flow for use case 1 – light sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In use case 1, Node-RED can be used to handle the illuminance obtained from
    the light sensor as JSON data. That data can be handled as JSON data, then be
    sent to the server side afterward, and various processes can be easily performed
    on the edge device.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value obtained from the light sensor is received by Node-RED and the output
    is a debug log (standard output). We can set this using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **grove light sensor v1_2** node from the palette on the left side
    of the flow editor and drag and drop it into the workspace to place it:![Figure
    5.19 – grove light sensor v1_2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.19_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.19 – grove light sensor v1_2
  prefs: []
  type: TYPE_NORMAL
- en: This node allows the value of the sensor device, which is continuously acquired
    on the Raspberry Pi via the Grove Base HAT, to be handled as a JSON format message
    object on Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: After placing the **grove-light-sensor-v1_2** node, place the **inject** node
    and **debug** nodes and wire them so that the **grove-light-sensor-v1_2** node
    you placed is sandwiched between them:![Figure 5.20 – Placing nodes and wiring
    them for the light sensor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.20_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.20 – Placing nodes and wiring them for the light sensor
  prefs: []
  type: TYPE_NORMAL
- en: Next, check the settings of the **grove-light-sensor-v1_2** node. Double-click
    the node to open the settings panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a selection item called **Port** in the settings panel. **A0** is selected
    by default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This **Port** setting is to specify which connector on the Grove Base HAT gets
    data from the connected module.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier, we connected the Grove light sensor to the Grove Base HAT. If the connection
    is made according to the procedure in this tutorial, it should be connected to
    port A2, so select **A2** as the node setting value. If you are connecting to
    another port, select the port you are connecting to:![Figure 5.21 – Select A2
    as the port if you connected the sensor to A2 of Base HAT
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.21_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.21 – Select A2 as the port if you connected the sensor to A2 of Base
    HAT
  prefs: []
  type: TYPE_NORMAL
- en: After checking and setting **Port** on the settings panel, click the **Done**
    button in the upper-right corner to close the settings panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it! Don't forget to click the **deploy** button.
  prefs: []
  type: TYPE_NORMAL
- en: You should remember how to execute a flow from a inject node, because you learned
    about this in the previous chapter. Click the switch on the inject node to run
    the flow. The data for the timing when the switch is clicked is outputted as a
    log, so please try clicking it a couple of times.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to display the debug window to show that the value of the acquired
    data will be the output to the debug window. Node-RED does not automatically show
    the debug window even if the debug output is activated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting output in the **debug** window looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.22 – Result of the light sensor flow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.22_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.22 – Result of the light sensor flow
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the result was output to the **debug** window.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! With this, we have successfully created a basic flow (application)
    that handles the value of our first light sensor with Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also download this flow definition file here: [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json).'
  prefs: []
  type: TYPE_NORMAL
- en: Making a flow for use case 2 – temperature/humidity sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In use case 2, Node-RED can be used to handle the temperature and the humidity
    obtained from the temperature/humidity sensor as JSON data. The data, which can
    be handled as JSON data, can be sent to the server side afterward, and various
    processes can be easily performed on the edge device.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value obtained from the temperature/humidity sensor is received by Node-RED
    and is outputted as a debug log (standard output):'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **grove temperature humidity sensor sht3x** node from the palette
    on the left side of the flow editor and drag and drop it into the workspace to
    place it:![Figure 5.23 – grove temperature humidity sensor sht3x
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.23_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.23 – grove temperature humidity sensor sht3x
  prefs: []
  type: TYPE_NORMAL
- en: This node allows the value of the sensor device, which is continuously acquired
    on the Raspberry Pi via Grove Base HAT, to be handled as a JSON format message
    object on Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: After placing the **grove-temperature-humidity-sensor-sht3x** node, place the
    **inject** and **debug** nodes, respectively, and wire them so that the **grove-temperature-humidity-sensor-sht3x**
    node you placed is sandwiched between them:![Figure 5.24 – Placing the nodes and
    wiring them for the temperature and humidity sensor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.24_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.24 – Placing the nodes and wiring them for the temperature and humidity
    sensor
  prefs: []
  type: TYPE_NORMAL
- en: Next, check the settings of the **grove-temperature-humidity-sensor-sht3x**
    node and double-click the node to open the settings panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Actually, this node has no values to set (strictly speaking, the name can be
    set, but the presence or absence of this setting does not affect the operation):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.25 – Already set to the I2C port'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.25_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.25 – Already set to the I2C port
  prefs: []
  type: TYPE_NORMAL
- en: You can see on the settings panel that the port is designated as **I2C** (not
    changeable). If you have connected the Grove temperature and humidity sensor to
    the Grove Base HAT according to the procedure in this document, the module should
    be correctly connected to the **I2C** port. If it is connected to a port other
    than I2C, reconnect it properly.
  prefs: []
  type: TYPE_NORMAL
- en: After checking **Port** on the settings panel, click the **Done** button in
    the upper-right corner to close the settings panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it! Don't forget to click the **deploy** button.
  prefs: []
  type: TYPE_NORMAL
- en: Click the switch on the inject node to run the flow. The data for the timing
    when the switch is clicked is outputted as a log, so please try clicking it a
    couple of times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: As noted in the previous section, do not forget to display the debug window
    to show that the value of the acquired data will be the output to the debug window.
    Node-RED does not automatically show the debug window even if the debug output
    is activated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting output in the **debug** window looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.26 – Result of the temperature/humidity sensor flow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.26_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.26 – Result of the temperature/humidity sensor flow
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the result was outputted to the **debug** window.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! With this, we have successfully created a basic flow (application)
    that handles the value of the second sample, the temperature/humidity sensor,
    with Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also download this flow definition file here: [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter05/light-sensor-flows.json).'
  prefs: []
  type: TYPE_NORMAL
- en: Well done! Now you have learned how to handle the data obtained from the illuminance
    sensor and temperature and humidity sensor in JSON format on Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create a sample flow (application) by comparing
    Node-RED to a real IoT use case. We experienced using the sensor module and Raspberry
    Pi to exchange data with Node-RED, so we had a feel for IoT.
  prefs: []
  type: TYPE_NORMAL
- en: The flow steps created here will help you create different flows with other
    sensor modules in the edge device in the future.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use the IoT use case as we did this time, but we
    will create a practical sample flow (application) on the cloud side (server side).
  prefs: []
  type: TYPE_NORMAL
