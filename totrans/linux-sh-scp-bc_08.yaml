- en: Chapter 8. Working with wget and curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will show how to use `wget` and `curl` to gather information directly
    from the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Show how to get information using `wget`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show how to get information using `curl`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripts that can gather data in this way can be very powerful tools to have
    at your disposal. As you will see from this chapter, you can get stock quotes,
    lake levels, just about anything automatically from web sites anywhere in the
    world.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the wget program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have already heard about or even used the `wget` program. It is a command
    line utility that can be used to download files from the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot showing `wget` in its most simplest form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing the wget program](img/B07040_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: wget options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the output you can see that `wget` downloaded the `index.html` file from
    my [jklewis.com](http://jklewis.com) website.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the default behavior of `wget`. The standard usage is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: where **URL** stands for **Uniform Resource Locator**, or address of the website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is just a short list of the many available options with `wget`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-o` | `log` file, messages will be written here instead of to `STDOUT` |'
  prefs: []
  type: TYPE_TB
- en: '| `-a` | same as `-o` excepts it appends to the `log` file |'
  prefs: []
  type: TYPE_TB
- en: '| `-O` | output file, copy the file to this name |'
  prefs: []
  type: TYPE_TB
- en: '| `-d` | turn debugging on |'
  prefs: []
  type: TYPE_TB
- en: '| `-q` | quiet mode |'
  prefs: []
  type: TYPE_TB
- en: '| `-v` | verbose mode |'
  prefs: []
  type: TYPE_TB
- en: '| `-r` | recursive mode |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s try another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![wget options](img/B07040_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `-o` option was used in this case. The return code was checked and a code
    of `0` means no failure. There was no output because it was directed to the `log`
    file which was displayed by the `cat` command.
  prefs: []
  type: TYPE_NORMAL
- en: The `-o` option, write output to file, was used in this case. There was no output
    displayed because it was directed to the `log` file which was then shown by the
    `cat` command. The return code from `wget` was checked and a code of `0` means
    no failure.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this time it named the downloaded file `index.html.1`. This is because
    `index.html` was created in the previous example. The author of this application
    did it this way to avoid overwriting a previously downloaded file. Very nice!
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at this next example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![wget options](img/B07040_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we are telling `wget` to download the file given (`shipfire.gif`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this next screenshot we show how `wget` will return a useful error code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![wget options](img/B07040_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: wget return codes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This error occurred because there is no file named `shipfire100.gif` in the
    base directory on my website. Notice how the output shows a **404 Not Found**
    message, this is seen very often on the Web. In general, it means a requested
    resource was not available at that time. In this case the file isn't there and
    so that message appears.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note too how `wget` returned an `8` error code. The man page for `wget` shows
    this for the possible exit codes from `wget`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Error codes | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0` | No problems occurred. |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | Generic error code. |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | Parse error. For instance when parsing command-line options, the `.wgetrc`
    or `.netrc` files |'
  prefs: []
  type: TYPE_TB
- en: '| `3` | File I/O error. |'
  prefs: []
  type: TYPE_TB
- en: '| `4` | Network failure. |'
  prefs: []
  type: TYPE_TB
- en: '| `5` | SSL verification failure. |'
  prefs: []
  type: TYPE_TB
- en: '| `6` | Username/password authentication failure. |'
  prefs: []
  type: TYPE_TB
- en: '| `7` | Protocol errors. |'
  prefs: []
  type: TYPE_TB
- en: '| `8` | Server issued an error response. |'
  prefs: []
  type: TYPE_TB
- en: A return of `8` makes pretty good sense. The server could not find the file
    and so returned a `404` error code.
  prefs: []
  type: TYPE_NORMAL
- en: wget configuration files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now is a good time to mention the different `wget` configuration files. There
    are two main files, `/etc/wgetrc` is the default location of the global `wget`
    startup file. In most cases you probably should not edit this unless you really
    want to make changes that affect all users. The file `$HOME/.wgetrc` is a better
    place to put any options you would like. A good way to do this is to open both
    `/etc/wgetrc` and `$HOME/.wgetrc` in your text editor and then copy the stanzas
    you want into your `$HOME./wgetrc` file.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `wget` config files consult the `man` page (`man
    wget`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s see `wget` in action. I wrote this a while back to keep track of
    the water level in the lake I used to go boating in:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8 - Script 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This output is from June 5, 2017\. It''s not much to look at but here it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 8 - Script 1](img/B07040_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see from the script and the output that it runs once every hour. In
    case you were wondering why anyone would write something like this, I needed to
    know if the lake level went below 640 feet as I would have had to move my boat
    out of the marina. This was during a severe drought back in Texas.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few things to keep in mind when writing a script like this:'
  prefs: []
  type: TYPE_NORMAL
- en: When first writing the script perform the `wget` once manually and then work
    with the downloaded file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not use `wget` several times in a short period of time or else you may get
    blocked by the site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind that HTML programmers like to change things all the time and so
    you may have to adjust your script accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you finally get the script just right be sure to activate the `wget` again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wget and recursion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `wget` program can also be used to download the contents of an entire website
    by using the recursive (`-r`) option.
  prefs: []
  type: TYPE_NORMAL
- en: 'For an example look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![wget and recursion](img/B07040_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The no verbose (`-nv`) option was used to limit the output. After the `wget`
    command completed the more command was used to view the contents of the log. Depending
    on the number of files the output might be very long.
  prefs: []
  type: TYPE_NORMAL
- en: When using `wget` you may run into unexpected issues. It may not get any files,
    or it may get some but not all of them. It might even fail without any reasonable
    error message. If this happens check the `man` page (`man wget`) very carefully.
    There may be an option that can help get you through the problem. In particular
    look at the following.
  prefs: []
  type: TYPE_NORMAL
- en: Run `wget --version` on your system. It will display a detailed listing of the
    options and features and also how `wget` was compiled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example taken from my system running CentOS 6.8 64-bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![wget and recursion](img/B07040_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: wget options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normally the defaults used by `wget` are good enough for most users, however,
    you may need to tweak things from time to time to get it to work the way you want
    it to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a partial list of some of the `wget` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '| wget option | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-o` filename | Output messages to a `log` file. This was covered earlier
    in the chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| `-t` number | Try number times before giving up on the connection. |'
  prefs: []
  type: TYPE_TB
- en: '| `-c` | Continue to download a partially downloaded file from a previous `wget`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-S` | Display the headers sent by the server. |'
  prefs: []
  type: TYPE_TB
- en: '| `-Q` number | The quota, or total amount of bytes that will be downloaded.
    Number can be in bytes, kilobytes (k), or megabytes (m). Set to 0 or inf for no
    quota. |'
  prefs: []
  type: TYPE_TB
- en: '| `-l` number | This specifies the maximum recursion level. The default is
    5. |'
  prefs: []
  type: TYPE_TB
- en: '| `-m` | This is good for when trying to create a mirror of a site. It is equivalent
    to using the `-r -N -l inf --no-remove-listing` options. |'
  prefs: []
  type: TYPE_TB
- en: 'Another thing you may try is to turn on debugging with the `-d` option. Note
    that this will only work if your version of `wget` was compiled with debug support.
    Let''s see what happens when I try it on my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![wget options](img/B07040_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I wasn't sure if debugging was turned on or not, now I know. This output might
    not be very useful unless you are a developer, however, if you ever need to send
    in a bug report on `wget` they are going to ask for the debug output.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, `wget` is a very powerful program with several options.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to use `wget` with care and do not forget to put a sleep of at least
    a minute in your loop. An hour would be even better.
  prefs: []
  type: TYPE_NORMAL
- en: curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's look at the `curl` program as it is somewhat similar to `wget`. One
    of the main differences between `wget` and `curl` is how they handle the output.
  prefs: []
  type: TYPE_NORMAL
- en: The `wget` program by default displays some progress information on the screen
    and then downloads the `index.html` file. In contrast, `curl` normally displays
    the file itself on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of `curl` running on my system using my favorite website
    (screenshot shortened to save space):'
  prefs: []
  type: TYPE_NORMAL
- en: '![curl](img/B07040_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another way to get the output into a file is by using redirection like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![curl](img/B07040_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that when redirected to a file the transfer progress is displayed
    on the screen. Also note that any error output goes into the file if redirected
    and not the screen.
  prefs: []
  type: TYPE_NORMAL
- en: curl options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a very brief list of the options available in curl:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Curl options | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-o` | Output filename |'
  prefs: []
  type: TYPE_TB
- en: '| `-s` | Silent mode. Shows nothing, not even errors |'
  prefs: []
  type: TYPE_TB
- en: '| `-S` | Show errors if in silent mode |'
  prefs: []
  type: TYPE_TB
- en: '| `-v` | Verbose, useful for debugging |'
  prefs: []
  type: TYPE_TB
- en: There are many other options to `curl`, as well as several pages of return codes.
    For more information consult the `curl man` page.
  prefs: []
  type: TYPE_NORMAL
- en: 'And now here is a script showing how curl can be used to automatically get
    the current value of the Dow Jones Industrial Average:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8 - Script 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what it looks like on my system. Normally you would probably leave
    the progress information out of the output by using the `-s` option but I thought
    it looked cool and so left it in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 8 - Script 2](img/B07040_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that `curl` and `wget` work pretty much the same way. Remember when
    writing scripts such as these to keep in mind that the format of the page will
    almost certainly change from time to time so plan accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we showed how to use `wget` and `curl` in scripts. The default
    behavior of these programs were shown as were some of the many options. Return
    codes were also discussed and a couple of example scripts were presented.
  prefs: []
  type: TYPE_NORMAL
- en: The following chapter will cover how to more easily debug both syntax and logic
    errors in your scripts.
  prefs: []
  type: TYPE_NORMAL
