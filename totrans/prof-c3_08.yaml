- en: Chapter 8. Usage of Flexbox Transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS is still developing. Each year, as a frontend developer, you need to watch
    current trends and new properties that you can set for the elements. Of course,
    there is a bunch of restrictions, but in some cases, those restrictions don''t
    exist, for example, in new browsers or selected mobile apps or because of set
    requirements. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Flexbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transform properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flexbox is the one of the loudest and most modern layout methodologies used
    in current CSS projects. With flexbox, you can create a structure for your web
    page, which is more elastic than projects based on floating boxes. Why? We will
    check and make an investigation in this chapter. What you need to remember is
    that Internet Explorer supports flexbox since its 11th version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the basics of flexbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flexbox](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot, there is new dictionary related
    to flexbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Main axis** (green arrow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Main start** (red line)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Main end** (red line)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Main size** (black line)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross axis** (green arrow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross start** (red line)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross end** (red line)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross size** (black line)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Initialization of flexbox is very simple. You just need to add the following
    code to your container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiled code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The usage of flexbox still needs prefixes for cross-browser compatibility.
    This is a good reason to create reusable mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can create the same `.flexContainer` like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiled code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a few elements within the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And let''s decorate a little bit our CSS code to see how the flexbox behaves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiled code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will see in the browser the following view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flexbox](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see from the preceding screenshot that the container is not reaching
    the full possible height in the browser, but it does reach its full width. Inside
    the elements are floated to the left side. Now let''s change the SASS code a little
    bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiled code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And let''s add a color class to our HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the browser, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flexbox](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, the container has a full width and
    height, and inside the elements are behaving like inline elements but with the
    full height inherited from the container. This is because of the property called
    `align-item`, whose default value is **stretch**. Let's dig a little bit more
    into the values of this property.
  prefs: []
  type: TYPE_NORMAL
- en: Flexbox property align-items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is one of the properties that we can add to `flexContainer`. It has a few
    values that we can set. For now, we know how the default stretch value behaves.
    Let's study the rest of the possible values. Before all the values, let's change
    HTML and CSS code a little bit to see better all the behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the HTML code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s append the following SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The CSS file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Different values of flex that can be used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`stretch` (default)![Flexbox property align-items](img/00106.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this value stretch, you need to remove classes that are adding the height
    of boxes (`h100px`, `h200px`, `h300px`).
  prefs: []
  type: TYPE_NORMAL
- en: '`flex-start`![Flexbox property align-items](img/00107.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flex-end`![Flexbox property align-items](img/00108.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center`![Flexbox property align-items](img/00109.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`baseline`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this case, for a better understanding of this behavior, let''s change our
    code to see how the baseline is designated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And in SASS the code can be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The CSS code will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flexbox property align-items](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The position of the box from the top is set from the baseline designated by
    first line of text in the box. Purposeful there is added a margin-top for box
    described as `h100px` box to see that the baseline is counted for from any of
    the boxes in the set of children.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay. But how this example will behave when we will add a box without a text
    content? Let''s modify HTML code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And let''s add the `w100px` class in SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flexbox property align-items](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, the baseline is designated by the
    bottom line of the yellow empty box.
  prefs: []
  type: TYPE_NORMAL
- en: Flexbox property flex-wrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the next properties that we can set for the flex container is `flex-wrap`.
    This property is related to wrapping in the box. We can set `nowrap`, `wrap`,
    and `wrap-reverse` as values. How do they behave?
  prefs: []
  type: TYPE_NORMAL
- en: '`nowrap` (default)![Flexbox property flex-wrap](img/00112.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wrap`![Flexbox property flex-wrap](img/00113.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wrap-reverse`![Flexbox property flex-wrap](img/00114.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can see, `wrap` and `wrap-reverse` work in the same way but with one
    simple difference: `wrap-reverse` is changing the order of flex items.'
  prefs: []
  type: TYPE_NORMAL
- en: Flexbox property justify-content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `justify-content` property is related to the container too:'
  prefs: []
  type: TYPE_NORMAL
- en: '`flex-start`![Flexbox property justify-content](img/00115.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flex-end`![Flexbox property justify-content](img/00116.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center`![Flexbox property justify-content](img/00117.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space-between`![Flexbox property justify-content](img/00118.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space-around`![Flexbox property justify-content](img/00119.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexbox property align-content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The alignment of items is related to `flexContainer`. You need to remember
    that the effects will be visible when you have at least two lines of items. So
    let''s change the following example code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The SASS code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The CSS code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`flex-start`![Flexbox property align-content](img/00120.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flex-end`![Flexbox property align-content](img/00121.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center`![Flexbox property align-content](img/00122.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space-between`![Flexbox property align-content](img/00123.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space-around`![Flexbox property align-content](img/00124.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stretch`![Flexbox property align-content](img/00125.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the last example, all classes have been removed relating to height: `h100px`,
    `h200px`.'
  prefs: []
  type: TYPE_NORMAL
- en: Flexbox property flex-direction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The different properties of flexbox are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`row`![Flexbox property flex-direction](img/00126.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row-reverse`![Flexbox property flex-direction](img/00127.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column`![Flexbox property flex-direction](img/00128.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column-reverse`![Flexbox property flex-direction](img/00129.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Useful mixins that you can add to your collection are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Usage of flexbox – creating page structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you are starting to work on a project, you are taking prepared layout
    as a graphic file and you need to make it available and interactive in the browser.
    Let''s begin with the currently most known structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'So we want to take the header on the top aside from the left main on the right
    and footer on the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The CSS file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The effect in browser will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage of flexbox – creating page structure](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you wish to change the sidebar width to a static value, you can append
    a small change into the SASS declaration of the side menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'And it will be in CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This will keep the left column static width.
  prefs: []
  type: TYPE_NORMAL
- en: Usage of flexbox – change order of boxes in mobile/tablet view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you are creating HTML layout adjustment to a desktop and mobile, a few
    possibilities may occur where you need to change the order of the boxes. Easy
    examples for a desktop are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First element needs to be on the top
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second element needs to be on the bottom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Easy examples for a mobile are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Second element needs to be on the top
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First element needs to be on the bottom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s use the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'And let''s create a few lines of SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'On the desktop, when the viewport width is wider than `600px`, you can see
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage of flexbox – change order of boxes in mobile/tablet view](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And on a view smaller than `600px`, you can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage of flexbox – change order of boxes in mobile/tablet view](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: More about transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Transformations are very useful for frontend developers because of basic graphic
    operations that you can perform using only CSS. In previous versions of CSS, it
    was only possible with JavaScript. In one of the previous chapters, we used `transform`
    for centering elements in the container. Let''s now try to understand it more
    and check what else we can do with it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The SASS file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The CSS file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The effect in the browser will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![More about transform](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding example, there is a bunch of possible transforms in the sample
    view in the browser. In the first line, you can see the element without any transforms.
    In each of the next lines, you can check the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rotate**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**skew**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**scale**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**translate**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**multiple**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Important aspects of transforms are the units that can be used in each of the
    transform types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rotate`: degrees, for example, `rotate(20deg, 40deg).`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skew`: degrees, for example, `skew(30deg, 50deg).`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale`: number, where 1 = 100%, for example, `scale(1.5, 1.5).`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`translate`: units related to width, such as pixels percentages, for example,
    `translate(50%, 50%)`. Important information: percentages are related to the dimensions
    of the transformed object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the last line of the preceding screenshot, there is a sample which shows
    how transforms can be chained in one line. This sample can be used when you need
    to append more than one transform.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you gained knowledge about the main features of modern CSS.
    You learned how flexbox works and how you can use it in your projects. You analyzed
    two-dimensional transforms, which you can use in your projects. This chapter is
    an introduction to the new CSS features and will help you to understand possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on gradients, shadows, and animations. We
    will create a linear and radial gradient box and text shadows, and additionally
    gain knowledge about the `calc` function.
  prefs: []
  type: TYPE_NORMAL
