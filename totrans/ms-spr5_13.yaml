- en: Working with Kotlin in Spring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin is a statically-typed JVM language, enabling code that is expressive,
    short, and readable. Spring Framework 5.0 has good support for Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore some of the important features of Kotlin and
    learn how to create a basic REST service with Kotlin and Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will understand the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Kotlin?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does it compare with Java?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a Kotlin project in Eclipse?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a Spring Boot project with Kotlin?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement and unit test a simple Spring Boot REST service using Kotlin?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin is an open source, statically-typed language that can be used to build
    applications that run on the JVM, Android, and JavaScript platforms. Kotlin is
    developed by JetBrains under the Apache 2.0 license and the source code is available
    on GitHub ([https://github.com/jetbrains/kotlin](https://github.com/jetbrains/kotlin)).
  prefs: []
  type: TYPE_NORMAL
- en: 'A couple of quotes from Andrey Breslav, the lead language designer for Kotlin,
    are listed as follows. These help us understand the thought process behind Kotlin:'
  prefs: []
  type: TYPE_NORMAL
- en: <q>The primary purpose of Project Kotlin is to create for developers a general-purpose
    language that can serve as a useful tool that is safe, concise, flexible, and
    100 percent Java-compatible.</q>
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin is designed to be an industrial-strength object-oriented language, and
    a "better language" than Java, but still be fully interoperable with Java code,
    allowing companies to make a gradual migration from Java to Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kotlin is one of the official languages supported by Android. The official
    Android developer page for Kotlin ([https://developer.android.com/kotlin/index.html](https://developer.android.com/kotlin/index.html))
    highlights the important reasons why Kotlin is quickly becoming popular with developers:'
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin is expressive, concise, extensible, powerful, and a joy to read and write.
    It has wonderful safety features in terms of nullability and immutability, which
    aligns with our investments to make Android apps healthy and performant by default.
    Best of all, it's interoperable with our existing Android languages and runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the important things about Kotlin include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Complete compatibility with Java. You can call Java code from Kotlin and vice-versa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concise and readable language. Kotlin FAQ ([http://kotlinlang.org/docs/reference/faq.html](http://kotlinlang.org/docs/reference/faq.html))
    estimates a 40% reduction in the number of lines of code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for both functional and object-oriented programming.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IntelliJ IDEA, Android Studio, Eclipse, and NetBeans are the IDE that have support
    for Kotlin. While the support is not as good as that for Java, it is improving
    by the day.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All major build tools--Gradle, Maven and Ant--have support for building Kotlin
    projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kotlin versus Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java was developed by James Gosling at Sun Microsystems and released in 1995\.
    It has remained a popular language for more than two decades now.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the important reasons for the popularity of Java is the Java platform
    including the Java Virtual Machine (JVM). The Java platform provides security
    and portability for the Java language. A number of languages emerged in the last
    few years that aimed to leverage the advantages of the Java platform. They compile
    to the bytecode and can run on the JVM. These languages include the following
    frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: Clojure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Groovy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scala
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JRuby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kotlin aims to address some of the important issues in the Java language and
    provide a concise alternative. Some of the important differences with the Java
    language are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Variables and type inference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kotlin infers the type of variable from the value assigned to it. In the following
    example, `intVariable` is assigned a type of `Int`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Since Kotlin is type-safe, the following snippet will result in a compilation
    error if uncommented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Variables and immutability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typically, like all other programming languages, the values of variables can
    be changed. The following snippet shows an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if `val` (instead of `var`) is used to define a variable, then the
    variable is immutable. The value of the variable cannot be changed. This is similar
    to `final` variables in Java. Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Type system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Kotlin, everything is an object. There are no primitive variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the important numeric types:'
  prefs: []
  type: TYPE_NORMAL
- en: Double--64 bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Float--32 bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Long--64 bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Int--32 bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Short--16 bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Byte--8 bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unlike Java, Kotlin does not treat characters as a numeric type. Any numeric
    operation on a character will result in a compilation error. Consider the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Java programmers are very familiar with `java.lang.NullPointerException`. Any
    operations performed on object variable referencing null will throw `NullPointerException`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kotlin''s type system aims to eliminate `NullPointerException`. Normal variables
    cannot hold null. The following code snippet will not compile if uncommented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To be able to store null in a variable, a special declaration needs to be used.
    That is, type followed by a ?. For example, consider the following `String?` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once a variable is declared to be nullable, Only safe (?) or non-null asserted
    (!!.) calls are allowed. Direct references will result in compilation e
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Kotlin, functions are declared using the `fun` keyword. The following code
    snippet shows an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Function arguments are specified in brackets after the function name. `name`
    is an argument of type `String`. The function return type is specified after the
    arguments. The return type of the function is `String`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line of code shows the invocation of the `helloBasic` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Kotlin also allows n. The following line of code shows an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Function arguments can optionally have a defa
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following line of code shows the invocation of the `helloWithDefaultValue`
    function without specifying any parameters. The default value of the name argument
    is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If a function has just one expression, then it can be defined on a single line.
    The `helloWithOneExpression` function is a simplified version of the `helloWithDefaultValue`
    function. The return type is inferred from the value
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Functions returning void and having only one expression can also be defined
    on a single line. The following code snippet shows an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arrays are represented by a Class `Array` in Kotlin. The following code snippet
    shows some of the important properties and methods in the `Array` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: An array can be created using the `intArrayOf` fu
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet shows some of the important operations that can
    be performed on an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kotlin has simple funtions to initialize collections. The following line of
    code shows an example of initializing a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet shows some of the important operations that can
    be performed on a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Lists, created with `listOf`, are immutable in Kotlin. To be able to change
    the content of a list, the `mutableListOf` function needs to be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mapOf` function is used to initialize a map, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following line of code shows the retrieval of a value for a specific key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'A map can be destructured into its key value constituents in a loop. The following
    lines of code show the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: No c
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Checked exceptions in Java have to be handled or rethrown. This results in
    a lot of unnecessary code. The following example shows the `try catch` block how
    to handle the checked exceptions thrown by `new FileReader("pathToFile") - throws
    FileNotFoundException` and `reader.read() - throws IOException`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Kotlin does not have any checked exceptions. It's up to the client code if they
    want to handle the exception. Exception handling is not forced on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Data class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typically, we will create a number of bean classes to hold data. Kotlin introduces
    the concept of a data class. The following block of code show the declaration
    of a data class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Kotlin provides a primary constructor, `equals()`, `hashcode()`, and a few
    other utility methods for data classes. The following lines of code shows the
    creation of an object using the constructors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Kotlin also provides a `toString` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `copy` function can be used to make a copy (clone) of an existing data
    class object. The following code snippet shows the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'An object of a data class can easily be destructured. The following line of
    code shows the details. `println` makes use of string templates to print the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Kotlin project in Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we are able to use Kotlin in Eclipse, we will need to install the Kotlin
    plugin in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Kotlin plugin can be installed from [https://marketplace.eclipse.org/content/kotlin-plugin-eclipse](https://marketplace.eclipse.org/content/kotlin-plugin-eclipse).
    Click on the Install button shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b93380e9-2943-4ce5-b46e-973ac528b33e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose Kotlin Plugin for and click on the Confirm button, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2139b4b7-0889-4353-a10d-398c3accefbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Accept defaults in the subsequent steps to install the plugin. The installation
    will take a little while. Restart Eclipse once the installation of the plugin
    is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Kotlin project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create a new Kotlin Project. In Eclipse, click on File | New | Project...,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f18bf5b-a5d6-4bca-8eab-1cfe7e0f9270.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose Kotlin Project from the list.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51bcf051-0838-4411-a6dc-b8dac1ccfd91.png)'
  prefs: []
  type: TYPE_IMG
- en: Provide `Kotlin-Hello-World` as the name of the project, accept all defaults,
    and click on Finish. Eclipse will create a new Kotlin project.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the structure of a typical Kotlin project. Both
    the `Kotlin Runtime Library` and `JRE System Library` are available in the project.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1bd36af-0e46-426a-a16d-1ab3ad758d36.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Kotlin class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new Kotlin class, right-click on the folder and choose New | Other,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e186fae-c3a4-4c30-9c5d-58a9fa90b84f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose class, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb0aea9a-4351-4d8f-b4d8-4014c9895b7b.png)'
  prefs: []
  type: TYPE_IMG
- en: Give your new Kotlin class a name (`HelloWorld`) and a package (`com.mastering.spring.kotlin.first`).
    Click on Finish.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a10bb0f4-49ab-4969-9a6e-17019abccf64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a main function, as shown in the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Running a Kotlin class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Right-click on the `HelloWorld.kt` file and click on Run as | tlin as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4dfc644-e384-4066-a4a8-28bd7ae73ac0.png)'
  prefs: []
  type: TYPE_IMG
- en: '`Hello, World` is printed on the console, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76ed30ae-1f51-4b3c-8467-a8984927b92a.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Spring Boot project using Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use Spring Initializr ([http://start.spring.io](http://start.spring.io))
    to initialize a Kotlin project. The following screenshot shows the Group and ArtifactId
    to choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1be0b859-4870-4de0-b102-593490b7e0a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are a couple of important things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose Web as the dependency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose Kotlin as the language (second drop-down at the top of the screenshot)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Generate Project and import the downloaded project into the eclipse
    as a Maven project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the structure of the generated project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a0f2fa3-5f2f-48c7-b111-0462a0805d40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are some of the important things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/main/kotlin`: This is the folder where all the Kotlin source code is present.
    This is similar to `src/main/java` in a Java project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/test/kotlin`: This is the folder where all the Kotlin test code is present.
    This is similar to `src/test/java` in a Java project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource folders are the same as a typical Java project--`src/main/resources`
    and `src/test/resources`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of JRE, Kotlin Runtime Library is used as the execution environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependencies and plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the normal dependencies in a Java Spring Boot project, there
    are two additional dependencies in `pom.xml`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are a couple of important things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kotlin-stdlib-jre8` is the standard library supporting the new JDK APIs added
    in Java 8'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kotlin-reflect` is the runtime component for using reflection features on
    a Java platform'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to `spring-boot-maven-plugin`, `kotlin-maven-plugin` is added in
    as a plugin in `pom.xml`. `kotlin-maven-plugin` compiles Kotlin sources and modules.
    This plugin is configured to be used during the `compile` and `test-compile` phases.
    The following piece of code shows the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Spring Boot application class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code block shows the generated `SpringBootApplication` class,
    `FirstWebServiceWithKotlinApplication`. We made the class open to enable Spring
    Boot to override it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are a few important things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: Package, import, and annotations are the same as that of a Java class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The declaration of the main function in Java was `public static void main(String[]
    args)`. In the preceding example, we are using the Kotlin function syntax. Kotlin
    does not have static methods. Any function declared outside of a class can be
    called without needing a class reference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching `SpringApplication` in Java is done using `SpringApplication.run(FirstWebServiceWithKotlinApplication.class,
    args)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`::` is used to obtain a Kotlin class runtime reference. So, `FirstWebServiceWithKotlinApplication::class`
    gives us a runtime reference to the Kotlin class. To obtain a Java class reference,
    we need to use the `.java` property on the reference. So, in Kotlin, the syntax
    is `FirstWebServiceWithKotlinApplication::class.java`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Kotlin, `*` is called a spread operator. It is used when passing an array
    to a function accepting variable arguments. So, we will use `*args` to pass the
    array to the `run` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application can be launched up by running `FirstWebServiceWithKotlinApplication`
    as a Kotlin application.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot application test class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code snippet shows the generated `SpringBootApplicationTest`
    class, `FirstWebServiceWithKotlinApplicationTests`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are a few important things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: Package, import, and annotations are the same as that of a Java class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`::` is used to obtain a Kotlin class runtime reference. Compared to `@RunWith(SpringRunner.class)`
    in Java, the Kotlin code uses `@RunWith(SpringRunner::class)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The declaration of the test class uses the Kotlin function syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a REST service using Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start with creating a service returning a hardcoded string. After that,
    we will discuss an example returning a proper JSON response. We will also look
    at an example of passing a path parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Simple method returning a string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with creating a simple REST service returning a `welcome` message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'A comparable Java method is shown as follows. A major difference is how we
    are able to define a function in one line in Kotlin--`fun welcome() = "Hello World"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run `FirstWebServiceWithKotlinApplication.kt` as a Kotlin application,
    it will start up the embedded Tomcat container. We can launch up the URL (`http://localhost:8080/welcome`)
    in the browser, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72ba2bc4-82eb-484d-8120-a8b02f17a8e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s quickly write a unit test to test the preceding controller method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding unit test, we will launch up a Mock MVC instance with `BasicController`.
    A few quick things to note are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The annotations `@RunWith(SpringRunner.class)` and `@WebMvcTest(BasicController::class)`
    are similar to Java, except for the class references.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Autowired lateinit var mvc: MockMvc`: This autowires the `MockMvc` bean that
    can be used to make requests. Properties declared as non-null must be initialized
    in the constructor. For properties that are autowired through the dependency injection,
    we can avoid null checks by adding `lateinit` to the variable declaration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fun `GET welcome returns "Hello World"`()`: This is a unique feature of Kotlin.
    Instead of giving the test method a name, we are giving a description for the
    test. This is awesome because, ideally, the test method will not be called from
    another method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mvc.perform(MockMvcRequestBuilders.get("/welcome").accept(MediaType.APPLICATION_JSON))`:
    This performs a request to `/welcome` with the Accept header value, `application/json`,
    which is similar to the Java code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`andExpect(status().isOk())`: This expects that the status of the response
    is `200` (success).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`andExpect(content().string(equalTo("Hello World")))`: This expects that the
    content of the response is equal to `"Hello World"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we integration testing, we will want to launch the embedded server with
    all the controllers and beans that are configured. The following block of code
    shows how we can create a simple integration test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'A few important things to note are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@RunWith(SpringRunner::class), @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)`:
    `SpringBootTest` provides additional functionality on top of the Spring `TestContext`.
    It provides support to configure the port for fully running container and TestRestTemplate
    (to execute requests). This is similar to the Java code, except for the class
    reference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Autowired lateinit var restTemplate: TestRestTemplate`: `TestRestTemplate`
    is typically used in integration tests. It provides additional functionality on
    top of the `RestTemplate`, which is especially useful in the integration of the
    test context. It does not follow redirects so that we can assert the response
    location. `lateinit` allows us to avoid null checks for the autowired variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple REST method returning an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a simple POJO `WelcomeBean` with a member field called message
    and one argument constructor, as shown in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding Java class is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Kotlin automatically adds constructors and other utility methods to data classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous method, we returned a string. Let''s create a method that returns
    a proper JSON response. Take a look at the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The method returns a simple `WelcomeBean` initialized with an `"Hello World"`
    message.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s send a test request and see what response we get. The following screenshot
    shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99cedfa7-f5c9-400a-be14-75aa25236fee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The response for the `http://localhost:8080/welcome-with-object` URL is shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s quickly write a unit test checking for the JSON response and then add
    the test to `BasicControllerTest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This test is very similar to the earlier unit test, except that we are using
    `containsString` to check whether the content contains an `"Hello World"` substring.
  prefs: []
  type: TYPE_NORMAL
- en: Integration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s shift our focus to writing an integration test and then add a method
    to `BasicControllerIT`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This method is similar to the earlier integration test, except that we are asserting
    for a substring in the `assertThat` method.
  prefs: []
  type: TYPE_NORMAL
- en: Get method with path variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s shift our attention to path variables. Path variables are used to bind
    values from the URI to a variable on the controller method. In the following example,
    we want to parameterize the name so that we can customize the welcome message
    with a name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are a few important things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@GetMapping("/welcome-with-parameter/name/{name}")`: `{name}` indicates that
    this value will be the variable. We can have multiple variable templates in a
    URI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`welcomeWithParameter(@PathVariable String name)`: `@PathVariable` ensures
    that the variable value from the URI is bound to the variable name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fun welcomeWithParameter(@PathVariable name: String) = WelcomeBean("Hello
    World, $name")`: We are using the Kotlin single expression function declaration
    to directly return the created `WelcomeBean`. `"Hello World, $name"` makes use
    of Kotlin string templates. `$name` will be replaced by the value of the path
    variable name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s send a test request and see what response we get. The following screenshot
    shows the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b122ca61-e936-420f-aa17-faa7369dbb9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The response for the `http://localhost:8080/welcome-with-parameter/name/Buddy`
    URL is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: As expected, the name in the URI is used to form the message in the response.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s quickly write a unit test for the preceding method. We will want to
    pass a name as a part of the URI and check whether the response contains the name.
    The following code shows how we can do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'A few important things to note are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MockMvcRequestBuilders.get("/welcome-with-parameter/name/Buddy")`: This matches
    against the variable template in the URI. We will pass in the name, .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.andExpect(content().string(containsString("Hello World, Buddy")))`: We expect
    the response to contain the message with the name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The integration test for the preceding method is very simple. Take a look at
    the following `test` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'A few important things to note are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`restTemplate.getForObject("/welcome-with-parameter/name/Buddy", WelcomeBean::class.java)`:
    This matches against the variable template in the URI. We are passing in the name,
    `Buddy`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertThat(response.getBody(), containsString("Hello World, Buddy"))`: We
    expect the response to contain the message with the name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we looked at the basics of creating a simple REST service with
    Spring Boot. We also ensured that we have good unit tests and integration tests.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin helps a developer write concise, readable code. It fits hand in glove
    with the philosophy of Spring Boot to make application development easier and
    faster.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we started with understanding Kotlin and how it compares with
    Java. We built a couple of simple REST services with Spring Boot and Kotlin. We
    saw examples of how code with Kotlin for services and unit tests is concise.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin has made great strides in the last couple of years--becoming an officially
    supported language for Android was a great first step. Support for Kotlin in Spring
    Framework 5.0 is the icing on the cake. The future of Kotlin depends on how successful
    it is with the larger Java development community. It has the potential to be an
    important tool in your arsenal.
  prefs: []
  type: TYPE_NORMAL
