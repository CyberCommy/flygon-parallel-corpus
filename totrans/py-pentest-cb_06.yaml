- en: Network Scanning with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple port scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP range/network scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stealth scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FIN scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XMAS scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP ACK scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LanScan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In penetration testing and network analysis, network scanners play a major role
    in getting the details of hosts that are available in the local network and applications
    running on those hosts. Network scanning helps to identify available UDP and TCP
    network services running on the hosts, and also helps to determine the **operating
    systems** (**OSs**) being used by the hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Simple port scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A port scanner is designed to examine a server or host machine for open ports.
    It helps the attackers to identify the service running on the host machine and
    exploit the vulnerabilities, if there are any.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can write a simple port scanner with Python using the `socket` module. The
    `socket` module is the default low-level networking interface in Python.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can create a simple port scanner with the `socket` module, following are
    the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `port-scanner.py` and open it in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the required modules, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Import the `socket` module along with the `sys` and `os` modules
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can define the variables for our scanner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here we define the starting and ending ports that we plan to scan
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the IP from the domain name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here we use the `gethostbyname` method in the `socket` module. This will return
    the IP of the domain
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can write a function to `probe` the port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here we create a socket object named `sockObj` and try to connect it to the
    port. If the connection succeeds, then the port is open. The `socket` object created
    is using the IPv4 socket family (`AF_INET` ) and a TCP type connection (`SOCK_STREAM`).
    For the UDP type connection, we have to use `SOCK_DGRAM`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it returns the result as the output of the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will write a *for* loop to iterate through the range of ports, and probe
    the port with the `probe_port` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If the port is open then the result is added to a list `open_port`
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, print the result list as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now we can try changing the preceding script to scan a list of default ports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For that, we will define a list of default ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we change the loop to call `probe_port`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: IP range/network scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use ICMP packets to create a network scanner. As ICMP is not an IP protocol,
    we have to access the network stack directly. So, here we can use Scapy to generate
    an ICMP packet and send it to the host.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start the scraping, we have to install the required Python packages. Here
    we use Scapy for the packet generation. To install Scapy, we can use `pip`. As
    we are using Python 3, make sure to install Scapy for Python 3\. Also install
    its dependency module, `netifaces`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the steps for creating a simple network scanner using the `scapy`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `network-scanner.py` and open it in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the required modules for the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the local IP of the system, we use the `getsockname` method in the `socket`
    module. However, it require a connection. So, we create a UDP socket connection
    to connect to Google DNS and use this connection to enumerate the local IP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we extract the local IP and truncate the last IP digits with a regular
    expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a function to generate an ICMP packet and send it to the host. Here
    we use Scapy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another function to check whether the IP is a loopback (`127.0.0.1`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the LAN sweep scan for all IPs in the network by iterating through
    the last IP digits:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`conf.verb = 0` will disable the verbose mode in Scapy to avoid the logs from
    Scapy'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to run the script with an administrative privilege, as Scapy requires
    administrative access to create the packets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Stealth scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Stealth scanning is a form of TCP scanning. Here the port scanner creates raw
    IP packets and sends them to the host to monitor for responses. This type of scan
    is also known as half-open scanning, or SYN scanning, as it never opens a complete
    TCP connection. This type of scanner creates a SYN packet and sends it to the
    host. If the target port is open, the host will respond with a SYN-ACK packet.
    Then the client will respond with an RST packet to close the connection before
    completing the handshake. If the port is closed but unfiltered, the target will
    instantly respond with an RST packet.
  prefs: []
  type: TYPE_NORMAL
- en: To create a SYN scanner, we will use the Scapy module. It is a powerful interactive
    packet manipulation program and library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For scanning ports, we will sending custom packets to the host we are scanning
    and parse the response to analyze the results. We require Scapy to generate and
    send packets to the host. Make sure to have the `scapy` module is installed in
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can create a SYN scanner with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `syn-scanner.py` and open it in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As usual, import the required modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This will import the `scapy` module
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can declare the variables, and we can also pass these variables as arguments,
    if required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can create a function to check whether the host is up or down:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We create and send an ICMP packet to the host. The host will respond if it is
    up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can create a function to scan the port using SYN packets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we set a random port as the destination port, and then create a SYN packet
    with the source port, destination port, and destination IP. Then we will send
    the packet and analyze the response. If the response type is `None`, then the
    port is closed. If the response has a TCP layer, then we have to check the flag
    value in it. The flag has nine bits, but we check for the control bits, which
    have six bits. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: URG = 0x20
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: ACK = 0x10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PSH = 0x08
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RST = 0x04
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SYN = 0x02
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FIN = 0x01
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the header structure for the TCP layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, if the flag value is 0x12, then the response has a SYN flag and we can consider
    the port to be open. If the value is 0x14, then the flag is RST/ACK, so the port
    is closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we will check whether the host is up or not, loop through the common ports
    list, and scan each port if the host is up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Each port from the common port list is scanned and the identified open ports
    are added to the open ports list, following the list that is printed
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to run the script with `sudo`, as we are using Scapy and Scapy requires
    admin privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: FIN scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SYN scanning can be blocked by firewalls. However, packets with the FIN flag
    set have the ability to bypass firewalls. Here is how it works--for a FIN packet,
    the closed ports reply with an RST packet, whereas the open ports ignore the packets.
    If it's an ICMP packet with type 3, and code 1, 2, 3, 9, 10, or 13, we may infer
    that the port is filtered and the port state cannot be found. We can use Scapy
    to create the FIN packet and scan the ports.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can create a FIN scanner as following:'
  prefs: []
  type: TYPE_NORMAL
- en: As we did in the previous recipe, we have to create another file, `fin-scanner.py`,
    and open it in our editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then import the required module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As we did for the SYN scanner, set the variables and create the function to
    check whether the server is up or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can create the function to probe the ports as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Here we changed the flag to `F` for `FIN`, while creating the packet to send
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will check whether the host is up or not, loop through the common
    ports list, and scan each port if the host is up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: XMAS scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With XMAS scanning, we will send a TCP packet with a bunch of flags all at once
    (PSH, FIN, and URG). We will get an RST if the port is closed. If the port is
    open or filtered, then there will be no response from the server. It's similar
    to the FIN scan, other than the packet-creating part.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the steps to create a XMAS scanner with Scapy:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a copy of the file we created for the previous recipe (*FIN scanning*).
    As it is quite similar, we only need to change the packet-creation section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create and send a packet with PSH, FIN, and URG flags in it, update the
    packet-crafting section inside the `probe_port` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Only update the flags parameter. Here we set the flags as `FPU` for PSH, FIN,
    and URG combined.
  prefs: []
  type: TYPE_NORMAL
- en: TCP ACK scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ACK flag scanning is useful to verify whether the server is blocked with firewalls,
    IPS, or other network security controls. As in the FIN scan, we will send an TCP
    ACK packet. No response or an ICMP error indicates the presence of a stateful
    firewall, as the port is filtered, and if we get back an RST-ACK, then the stateful
    firewall is absent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps to create a TCP ACK scanner with Scapy are as following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, import the required modules and set the variables. Also, define the
    method to check the status of the host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To send a TCP packet with the `ACK` flag, update the `probe_port` method in
    the previous recipe, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Here we create a TCP ACK packet and send it to the host
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, run the scanner, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: LanScan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LanScan is a Python 3 module that helps to scan a given local network. It can
    list all devices and their open ports. LanScan also helps to get the information
    about network interfaces and networks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can install `lanscan` using `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some use cases for LanScan:'
  prefs: []
  type: TYPE_NORMAL
- en: 'LanScan has some options that we can use for scanning the LAN. To get the details
    about the available interfaces in the system, we can use the `interfaces` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print the available interfaces, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can get the list of connected networks by using the network command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can start a local network scan from the terminal window. It requires admin
    privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here it will list the IP addresses in the LAN network and the open ports in
    each system
  prefs: []
  type: TYPE_NORMAL
