- en: 4\. Performing migration to Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter outlines how to execute a real migration project based on the workload
    assessment done in the previous chapter. We have created two hands-on labs to
    show you how real-life migrations can be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: The first hands-on lab gives you practical examples of how to migrate Linux
    servers from a Hyper-V host to Azure using Azure Migrate. The second lab guides
    you through migrating a MySQL server to Azure using Azure **Database Migration
    Service** (**DMS**).
  prefs: []
  type: TYPE_NORMAL
- en: Executing migrations in real life is not always as easy as it sounds. Most problems
    we have seen are fortunately not actually technology-related, but more about planning
    and project management. If you apply the lessons of this book to your projects,
    you will be able to avoid the same pitfalls.
  prefs: []
  type: TYPE_NORMAL
- en: For example, one specific migration project we know of was originally planned
    to take a couple of months and it had about 500 virtual servers to migrate to
    Azure. The project turned out to be a bit more complex than originally planned.
    Some problems on the project started right after the project kickoff. The team
    in charge of the migration had severely underestimated the resources and skills
    required in the project. Eventually, the project scope was shrunk, and external
    cloud specialists were invited to advise on some of the most difficult parts of
    the project. It is no surprise that some of those parts were related to Linux
    patch management, subscription management, and security. Do you remember that
    we talked about these topics earlier in this book? Now you know why.
  prefs: []
  type: TYPE_NORMAL
- en: The project schedule got quite a few extensions and the project took much longer
    than originally planned. During the project, the customer also decided not to
    migrate some of the older applications, and instead decided to start to develop
    new cloud-native versions of those applications. From the migration project's
    point of view, this caused some major challenges in project scheduling. In the
    previous chapter, we talked about the importance of assessments and quality project
    planning for a good reason.
  prefs: []
  type: TYPE_NORMAL
- en: Why was the project unsuccessful? The project team didn't use any migration
    assessment tooling and they also lacked a proper migration execution tool. Additionally,
    they had little experience managing projects like this, and they also lacked expertise
    in cloud migrations and some of the workloads to be migrated.
  prefs: []
  type: TYPE_NORMAL
- en: Even after successful migration to Azure, there can be unexpected issues due
    to the wrong configuration or human error. You can reach out to Microsoft Azure
    support in the event of issues like virtual machine booting problems, remote SSH
    access not working, and so on. In *Chapter 6*, *Troubleshooting and problem solving*,
    we will talk more about possible problems and troubleshooting scenarios and also
    about how they can be resolved.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have mentioned it already a couple of times in this book, but since it is
    such important advice, let''s say it again: a key element to a successful migration
    project is ensuring that your customer—be they internal or external—is committed
    to the project. The second piece of advice we want to repeat is to use the right
    tools to help you with migration. In the previous chapter, we covered Azure Migrate
    for running successful assessments, so we can be quite sure the project team has
    the correct facts about the workloads to be migrated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on migration lab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating servers to Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you will have learned how to use the right tools
    the right way.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on migration lab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the *Hands-on assess lab* section of *Chapter 3*, *Assessment and migration
    planning*, we saw how the assessment of workloads and dependency analysis are
    done. These are vital steps in the migration framework and we're currently in
    the *Migrate* phase. We have two sections in this lab. The first part deals with
    the migration of servers, where we're going to migrate one of our LAMP servers
    to the cloud and verify that the site is working as expected. In the second scenario,
    we are migrating a MySQL database on Linux to an Azure MySQL managed database.
    In the first, we are migrating from IaaS to IaaS, whereas in the second, we're
    migrating from IaaS to a PaaS solution. Let's get started with the migration of
    the servers.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating servers to Azure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As explained earlier, the Azure Migrate service is tooling for both the *Assess*
    phase and the *Migrate* phase. In the *Assess* phase, we rely on the Server Assessment
    tools, and in the *Migrate* phase, we focus on the server migration tools. If
    you're following along, you can use the same migration project from the assessment
    hands-on lab from *Chapter 3*, *Assessment and migration planning*. Otherwise,
    you can create a new one.
  prefs: []
  type: TYPE_NORMAL
- en: In this phase, your **virtual machine** (**VM**) will get replicated to the
    cloud, and later this replicated disk is used to spin up a VM. It is pretty much
    similar to how we set up cross-region failover in Azure Site Recovery. Azure Migrate
    uses Site Recovery in the back end to accomplish the migration process, where
    your servers are constantly replicated to the Site Recovery vault.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4.1* shows the servers we''re going to migrate to Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![VMs in Hyper-V](img/B17160_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: VMs in Hyper-V'
  prefs: []
  type: TYPE_NORMAL
- en: The LAMP server will be used to demonstrate server migration using Azure Migrate
    and the MySQL VM will be migrated using DMS. You could deploy a LAMP application
    from GitHub—there are many repos that have files for a simple LAMP server. The
    one used in the demo is cloned from [https://github.com/Anirban2404/phpMySQLapp](https://github.com/Anirban2404/phpMySQLapp).
    The LAMP installation is covered in the GitHub repo.
  prefs: []
  type: TYPE_NORMAL
- en: We'll break down the process into various stages, starting with the installation
    of providers, all the way to cutover.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the providers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the case of assessment, we deployed an Azure Migrate appliance on our on-premises
    Hyper-V server for sending the discovered data to the cloud. Similarly, in the
    *Migrate* phase, we''ll be installing some software providers on our Hyper-V server,
    namely a Site Recovery provider and a Microsoft Azure Recovery Services agent.
    The Migrate appliance that we deployed during the assessment stage has no role
    in server migration—the purpose of that server was to discover the on-premises
    VMs and create an inventory. The following steps can be used to install the providers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Azure Migrate project | Servers, and under Azure Migrate: Server
    Migration click on Discover, as shown in *Figure 4.2*:![Navigating to Migration
    tools and clicking on Discover](img/B17160_04_02.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.2: Navigating to Migration tools'
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 4.2*, you can see the server assessment tools, the results from the
    previous lab, and the migration tools that we're going to use in this lab.
  prefs: []
  type: TYPE_NORMAL
- en: Once we click on Discover, we'll be asked to confirm the platform where our
    servers are deployed. We will select Yes, with Hyper-V as shown in *Figure 4.3*.
    Along with that, we'll set Target region. This is the region where your server
    will be deployed post-migration. One thing to keep in mind here is that once Target
    region is confirmed, it cannot be changed for the project. Azure will show a banner
    with the same content and you have to agree to this condition by checking the
    checkbox. After that, we can click on Create resources and the Site Recovery vault
    gets created behind the scenes:![Confirming target region and creating resources
    by clicking on the Create resources button](img/B17160_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.3: Confirming the target region and creating resources'
  prefs: []
  type: TYPE_NORMAL
- en: Azure provides very intuitive steps to complete the replication, starting with
    the installation of the replication provider software on our Hyper-V server. Steps
    will be prompted to you as shown in *Figure 4.4*:![Reviewing the migration steps
    in the Discover machines window](img/B17160_04_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.4: Reviewing the migration steps'
  prefs: []
  type: TYPE_NORMAL
- en: We'll follow the steps in *Figure 4.4*. Let's download the Site Recovery provider
    software and install it on our Hyper-V server, and also download the registration
    key. You can copy the installation file and registration key to the Hyper-V server
    over **remote desktop protocol** (**RDP**), or you can use a file share. The installation
    is a two-step process and will take some time to install. Once the installation
    is done, you will get a window similar to the following one and you can proceed
    using the Register button, not the Finish button:![Installing the Site Recovery
    provider and clicking on the Register button](img/B17160_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.5: Installing the Site Recovery provider'
  prefs: []
  type: TYPE_NORMAL
- en: It's time to use the registration key that we copied earlier. Click on the Register
    button shown in *Figure 4.5*. On the next screen, you will be asked to choose
    the registration key and the rest of the details are auto-filled, as shown in
    *Figure 4.6*. Proceed by clicking on the Next button:![Selecting a registration
    key and proceeding by clicking on the Next button](img/B17160_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.6: Selecting registration key'
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to configure to connect using a proxy—let the server directly
    connect to Site Recovery without a proxy server. Hit Next and continue with the
    registration process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last stage is Registration, which will take some time. Once the registration
    is done, the window will prompt as shown in *Figure 4.7*:![Completing registration](img/B17160_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.7: Completing registration'
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to go back to the Azure portal and reopen the project to finalize
    the registration. If the connection was successful, you will see the registered
    Hyper-V host under 2\. Finalize registration. Click on the Finalize registration
    button as shown in *Figure 4.8*. If you are not able to see the host as registered,
    follow the troubleshooting guide provided by Azure on the same page:![Finalizing
    registration by clicking on the Finalize registration button](img/B17160_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.8: Finalizing registration'
  prefs: []
  type: TYPE_NORMAL
- en: You will get a message on the screen to say that the registration may take around
    15 minutes to complete. We need to wait for this process to complete before we
    replicate our machines to Azure. Once the process is complete, you will get a
    Registration finalized message, as shown in *Figure 4.9*:![Registration completed](img/B17160_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.9: Completed registration'
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how to discover the servers that are available to be migrated.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering servers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our Hyper-V server is configured with the providers, and we need to make sure
    that our Azure Migrate project discovered the VMs. Let''s head back to the Azure
    Migrate landing page and refresh the toolset. As shown in *Figure 4.10*, you will
    be able to see that the migration tool discovered two VMs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The migration tool discovered two VMs](img/B17160_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.10: Discovered servers'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that our VMs were discovered by the Azure Migrate project and we're
    ready to replicate these discovered servers.
  prefs: []
  type: TYPE_NORMAL
- en: Replicating servers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As *Figure 4.10* displays, the next step is to replicate our servers to Azure.
    For that, you need to click on the Replicate option next to Discover. As a side
    note, you need to have certain resources created before we replicate, else you
    may need to restart the replication process. So, it''s better to have your resource
    group, virtual network, and replication storage account created before starting
    the replication:'
  prefs: []
  type: TYPE_NORMAL
- en: Replication is a five-step process, and we'll start with Source settings. Here
    you'll select the virtualization platform or your source as Hyper-V.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second step, you have to select the VMs that you are migrating to the
    cloud. You could use the results of an assessment and migrate, or you can specify
    the migration settings manually. For demonstration purposes and to explain the
    steps, let's go with the manual option. Select the VMs and hit Next as shown in
    *Figure 4.11*:![Selecting virtual machines and clicking on the Next button](img/B17160_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.11: Selecting VMs'
  prefs: []
  type: TYPE_NORMAL
- en: It's time to configure Target settings as in the configuration on the Azure
    side. You have to set Subscription, Resource group, Replication Storage Account
    (this is where the data will be replicated), Virtual Network, Subnet, and Availability
    options. The target location cannot be changed. As mentioned earlier, if you don't
    have these resources created, feel free to create these resources in your selected
    target region and start from *Step 2* again. Here is how the configuration will
    look if you already have the target resources in place:![Selecting target resources
    in the Target settings tab](img/B17160_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.12: Selecting target resources'
  prefs: []
  type: TYPE_NORMAL
- en: Hitting Next in the Target settings tab will take you to the Compute tab, where
    you can set Azure VM Size, OS Type, and the OS Disk name you are going to migrate.
    You could set Azure VM Size as Automatically select matching configuration, as
    shown in *Figure 4.13*, and Azure will select a size matching your on-premises
    configuration:![Selecting compute size based on our on-premises configuration](img/B17160_04_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.13: Selecting compute size'
  prefs: []
  type: TYPE_NORMAL
- en: After selecting the Compute configuration, you can click on Next and the wizard
    will take you to the Disks tab. Here you will get a chance to select the disks
    that you want to replicate from on-premises. You can also replicate the data disks
    if required; however, in our case, we only have the OS disks. The configuration
    will look like *Figure 4.14*:![Selecting disks to replicate in the Replicate window](img/B17160_04_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.14: Selecting disks to replicate'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have selected the disks, you can click on Next and you will reach the
    last step. In this step, we will review the target configuration and click on
    Replicate to replicate the server to Azure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can confirm from the landing page whether the replication has started or
    not. As shown in *Figure 4.15*, the Replicating servers section should show two
    as we selected two servers for replication:![Verifying replication in the Migration
    tools pane](img/B17160_04_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.15: Verifying replication'
  prefs: []
  type: TYPE_NORMAL
- en: We could also click on 2, which has a hyperlink to show the status of the replication.
    This is a lengthy process, and you can track it as shown in *Figure 4.16*:![Verifying
    replication process](img/B17160_04_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.16: Verifying replication process'
  prefs: []
  type: TYPE_NORMAL
- en: Once the replication is done, you will be able to see the status of both the
    servers change to Protected as demonstrated in *Figure 4.17*:![Replication completed
    as the status changed to Protected](img/B17160_04_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.17: Replication completed'
  prefs: []
  type: TYPE_NORMAL
- en: Our servers are successfully replicated to Azure. Before we migrate to production,
    we can perform a test failover. Test failovers are helpful for understanding whether
    an application is working properly before we make the production cutover. Let's
    perform the test failover and finish off the migration process.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating to Azure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the servers are replicated, we can perform the test failover anytime we
    want. Performing a test failover will not interrupt any of the services—this stage
    is to confirm whether an application is functioning as expected. If not, we can
    take measures to remediate this and reattempt the migration without any production
    downtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how the application looks in our on-premises LAMP application, which
    is a demo LAMP application created from [https://github.com/Anirban2404/phpMySQLapp](https://github.com/Anirban2404/phpMySQLapp):'
  prefs: []
  type: TYPE_NORMAL
- en: '![An index page of an on-premises application](img/B17160_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.18: On-premises application index page'
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned at the beginning of this section, we can perform a test failover
    and see whether our application is working fine. In order to perform a test failover,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Azure Migrate | Servers and choose Replicate from Migration tools
    as shown in *Figure 4.19*:![Viewing the replicated servers in the Migration tools
    pane](img/B17160_04_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.19: Viewing the replicated servers'
  prefs: []
  type: TYPE_NORMAL
- en: From the next screen, select the VM that you want to test failover for and click
    on the three dots on the far-right side. You'll see a Test migration option as
    shown in *Figure 4.20*:![Selecting the Test migration option](img/B17160_04_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 4.20 Selecting Test migration
  prefs: []
  type: TYPE_NORMAL
- en: Select the virtual network where you want to deploy the resources and select
    Test migration as shown in *Figure 4.21*:![Starting test migration by clicking
    on Test migration](img/B17160_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.21: Starting test migration'
  prefs: []
  type: TYPE_NORMAL
- en: After some time, you will see that the resources have been created. One thing
    to note here is that there won't be a public IP or NSG attached to the resources
    that are created during the test migration. For us to check them using the internet,
    we need a public IP and NSG with SSH and HTTP rules added. If you are not sure
    how to make this change, refer to [https://docs.microsoft.com/azure/virtual-network/manage-network-security-group](https://docs.microsoft.com/azure/virtual-network/manage-network-security-group)
    and [https://docs.microsoft.com/azure/virtual-network/associate-public-ip-address-vm](https://docs.microsoft.com/azure/virtual-network/associate-public-ip-address-vm).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the test migration status shows as completed, you can navigate to the target
    resource group that you selected in the Azure Migrate project during the initial
    configuration. The resources will be deployed, with the test keyword added as
    a suffix to the resource name, as visible in *Figure 4.22*:![Exploring test migration
    resources](img/B17160_04_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.22: Exploring test migration resources'
  prefs: []
  type: TYPE_NORMAL
- en: You can attach an NSG and public IP address as mentioned in the aforementioned
    documentation, and then you can test the migration by opening the displayed IP
    address in your browser as shown in *Figure 4.23*:![Verifying application from
    the browser](img/B17160_04_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.23: Verifying the application from the browser'
  prefs: []
  type: TYPE_NORMAL
- en: Once the test migration is done, you need to clean up the test migration before
    we perform the actual migration. This can be done using the Clean up test migration
    option, which is shown in *Figure 4.20*. You will be asked to add your notes and
    confirm the deletion of the test resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After cleaning up the test resources, we can perform the actual migration of
    resources. To start the migration, navigate to Azure Migrate | Servers and choose
    Migrate from Migration tools as shown in *Figure 4.24*:![Choosing Migrate from
    the Migration tools](img/B17160_04_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.24: Migrating servers'
  prefs: []
  type: TYPE_NORMAL
- en: You will be asked whether you want to shut down the machines to minimize data
    loss. Select Yes to shut down the machines and perform a planned migration with
    zero data loss. If you choose not to shut down the VMs, a final sync will be performed
    before the migration, but any changes that happen on the machine after the final
    sync is started will not be replicated. Let's go with No and select the machines
    we want to migrate, as shown in *Figure 4.25*:![Finalizing migration by clicking
    on the Migrate button](img/B17160_04_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.25: Finalizing migration'
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in the case of the test migration, this process will take some time
    and the resources will be created in the target resource group. The servers will
    have no public IP or NSG attached to them. You need to follow the process outlined
    in the documentation we followed in the test migration to attach the NSG and public
    IP. You can reuse the NSG and public IP from the test migration if you haven't
    deleted them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Voilà, we have our resources in our target resource group:![Reviewing migrated
    resources](img/B17160_04_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.26: Reviewing migrated resources'
  prefs: []
  type: TYPE_NORMAL
- en: If we navigate back to Azure Migrate | Servers and refresh the project, we will
    get the summary of the migration we have done as shown in *Figure 4.27*:![Summary
    of the project](img/B17160_04_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.27: Summary of the project'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we've seen the end-to-end process of migrating servers from an on-premises
    Hyper-V host to Azure using Azure Migrate. As mentioned in the introduction of
    this section, we are going to see how we can migrate databases to PaaS solutions
    in the next hands-on lab.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating databases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the *Migrating servers to Azure* section, we saw how servers can be migrated
    to Azure with the help of Azure Migrate. We can directly migrate databases from
    IaaS to IaaS as we did in the case of the LAMP server. However, in this section,
    we will be migrating the database to a PaaS solution. You can use any on-premises
    MySQL server that can be accessed publicly. If you don''t have one, for demonstration
    purposes, you can create a VM in Azure and install MySQL. In order to work with
    the hands-on data, you need to run the following SQL script in your MySQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Though IaaS offers a lot of flexibility in terms of control and administration,
    PaaS helps developers or administrators to deploy at ease and be more productive,
    as most of the management tasks are performed by Microsoft. PaaS offers a lot
    of time savings as the underlying hardware, OS patches and updates, and maintenance
    tasks are taken care of by Azure.
  prefs: []
  type: TYPE_NORMAL
- en: To migrate databases to PaaS, we will be using a service called Azure DMS. DMS
    empowers customers to perform online and offline migration from a plethora of
    database sources to Azure data platforms, with minimal service interruption or
    downtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'DMS offer two different methods to migrate databases: offline migration or
    online migration. Offline migration requires the server to be shut down at the
    start of the migration, so there is downtime involved in this method. On the other
    hand, online migration follows a continuous replication of the live data, also
    allowing a cutover to Azure at any time with minimal downtime.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure DMS offers two pricing tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard**: Only offline migrations are supported. This tier has no charge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium**: Offline and online migrations are supported. There is no charge
    for the first six months—after that, this tier will incur charges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have some idea about DMS, let's go ahead and create an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Database Migration Service instance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This process consists of multiple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Find Azure Database Migration Services in the All Services pane, or simply search
    for it. You can kick off the creation process by clicking New or Create azure
    database migration service as shown in *Figure 4.28*:![Creating Azure Database
    Migration Service instance](img/B17160_04_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.28: Creating a Database Migration Service instance'
  prefs: []
  type: TYPE_NORMAL
- en: 'The creation process is very straightforward—you need to input values for Subscription,
    Resource group, Migration service name, and Location. Additionally, there is an
    option to choose Pricing tier and Service mode. As mentioned previously, there
    are two pricing tiers for this service: Standard (supports only offline migration)
    and Premium (supports both offline and online migration). Also, there are two
    service modes: Azure, where we''ll be choosing one of the aforementioned pricing
    tiers, and Hybrid, where the worker is hosted on-premises. At the time of writing
    this book, Hybrid mode is in preview. The creation process is shown in *Figure
    4.29*:![Adding various details in the Basics pane of the Create Migration Service
    window](img/B17160_04_29.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.29: Configuring Basics'
  prefs: []
  type: TYPE_NORMAL
- en: The next configuration we need is the Networking configuration, where will be
    creating a virtual network. You could choose an existing virtual network or create
    a new one. This virtual network will be used by the service to communicate with
    the source databases over the internet. The configuration is as shown in *Figure
    4.30*:![Providing networking configuration for creating a new virtual network](img/B17160_04_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.30: Creating a new virtual network'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking Review + create will initiate the validation process and the service
    will be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have created a DMS instance, the next step is to configure the migration
    project. Before this, we need to create the target database in Azure. Since we
    are migrating MySQL, we need to create an Azure Database for MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring the target resource
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As mentioned earlier, the service we''re going to create is an Azure Database
    for MySQL server. This is a managed offering by Microsoft Azure that utilizes
    MySQL Community Edition version 5.6, 5.7, and 8.0\. Let''s create the target resource
    to migrate the data:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for MySQL in the search bar and you will be able to see Azure Database
    for MySQL in the Azure portal. Start creating a new database by clicking on the
    New button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will go with the single-server model as it is production-ready, cost-optimized,
    and has built-in high availability. You do get an option to choose Flexible server,
    which offers advanced customization and is in preview at the time of writing this
    book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The wizard will take you through the creation process. You need to fill in the
    details and configure the compute, storage, and pricing tier for the server as
    per your requirements. Since we're dealing with a very small database, a Basic
    server with 1 vCPU and 8 GB of storage will suffice. In real-world scenarios,
    you should match the compute and storage of the Azure server with the on-premises
    configuration to avoid performance issues. The configuration is as shown in *Figure
    4.31*:![Creating Azure Database for MySQL](img/B17160_04_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.31: Creating an Azure Database for MySQL server'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we can select the Review + create option, then the Create option,
    and the database will be provisioned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After provisioning the database, we need to create a target table where the
    data from the on-premises database table should be migrated. We will create an
    empty table and map this to our on-premises database when we create a migration
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server admin login name can be obtained from the Overview pane of the database
    that we created in *Step 3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use any Linux or Windows computer with MySQL tools installed or Azure
    Cloud Shell to work with the server we deployed in Azure. Here, let's connect
    from the Bash shell as shown in *Figure 4.32*:![Connecting to Azure MySQL using
    Bash shell](img/B17160_04_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.32: Connecting to Azure MySQL using Bash'
  prefs: []
  type: TYPE_NORMAL
- en: Here the connection will fail, as the IP address of the machine from which we
    are connecting is not in the allowed list of IP addresses and the firewall will
    stop us from connecting.
  prefs: []
  type: TYPE_NORMAL
- en: To add your IP address to the allowed list of IP addresses, you can navigate
    to the server we created and click on Connection security. If you are using Azure
    Cloud Shell, you have to enable Allow access to Azure services. Since we are using
    a local machine, we will add our IP address as shown in *Figure 4.33* and save
    the configuration:![Configuring the firewall in the Connection security window](img/B17160_04_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.33: Configuring firewall'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've added our IP address to the firewall, let's try to reconnect
    from Bash and see if the connection succeeds. You can see in *Figure 4.34* that
    the login was successful:![Logging into MySQL](img/B17160_04_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.34: Logging in to MySQL'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our on-premises server consists of a database and has a table named `horror_tbl`.
    Basically, this table stores the names of horror movies and the years they were
    released. We need to create a similar table in the MySQL server as we created
    in Azure so that the data can be migrated. Let''s create a new database and table
    using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here is how the databases look in on-premises infrastructure and in Azure:![Comparing
    a dataset in on-premises and Azure](img/B17160_04_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.35: Comparing dataset in on-premises and Azure'
  prefs: []
  type: TYPE_NORMAL
- en: It's evident from the preceding figure that the on-premises database contains
    data, and the Azure database is empty. Now we need to extract the schema from
    the source database and apply it to the destination.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating the sample schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to extract the schema, you can use the `mysqldump` command with the
    `--no-data` parameter. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In our scenario, we need to extract the schema of the `MOVIES` database. Since
    we are executing the command from the MySQL server itself, we don''t need to use
    the `-h` parameter. However, if you''re doing this on a remote server, consider
    using the `-h` parameter. The following command will suffice in our scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the `--all-databases` parameter if you have multiple databases
    and would like to extract the schema of all of them in a single shot. If you look
    at the schema file, it will be similar to the following SQL script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the schema file](img/B17160_04_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.36: Checking the schema file'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to import this data to Azure Database for MySQL using the following
    syntax. This can be run directly from the VM hosting the on-premises database
    if the networking allows the connection. Otherwise, the schema needs to be imported
    on a machine that has the option to connect to the Azure database or into Cloud
    Shell directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In our scenario, you need to replace the server name and login name with your
    Azure Database for MySQL credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After the import process, we need to switch back to DMS and create a migration
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a migration project and migrating a database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a migration project for databases, we need to head back to DMS. The
    project can be created using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Azure Database Migration Service and select New Migration Project
    as shown in *Figure 4.37*:![Creating a migration project by clicking on New Migration
    Project](img/B17160_04_37.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.37: Creating a migration project'
  prefs: []
  type: TYPE_NORMAL
- en: The creation is a very simple process. We need to input a name for the project,
    set Source server type (in our case MySQL), and set Target server type, which
    is Azure Database for MySQL. Finally, set the type of activity as Online data
    migration, as we are planning to migrate without any downtime. The offline option
    is not currently available for MySQL. The configuration is as shown in *Figure
    4.38*:![Configuring the project by adding various details and clicking on Create
    and run activity](img/B17160_04_38.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.38: Configuring the project'
  prefs: []
  type: TYPE_NORMAL
- en: Once the project is configured, click on Create and run activity. This will
    take you to MySQL to Azure Database for MySQL Online Migration Wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first step in the wizard is to configure the source. Here we need to set
    Source server name, Server port, User Name, and Password for our publicly available
    on-premises server as shown in *Figure 4.39*:![Connecting to the source database
    by adding various details in the Select source pane](img/B17160_04_39.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.39: Connecting to the source database'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You might encounter errors if the MySQL server is not configured properly. Configuration
    of the bind-address, bin-logs in `mysqld.cnf`, and the creation of a new user
    with admin privileges might be required for a successful connection. Refer to
    [https://docs.microsoft.com/azure/dms/tutorial-mysql-azure-mysql-online#prerequisites](https://docs.microsoft.com/azure/dms/tutorial-mysql-azure-mysql-online#prerequisites).
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to configure the target, which includes setting Target server name,
    User Name, and Password. Target server name and User Name can be found from the
    Overview pane of our MySQL server in Azure. The password is the one you entered
    during the service creation—if forgotten, you can use the Reset Password option.
    The target server details should be configured as follows:![Configuring the target
    by adding various details in the Select target pane](img/B17160_04_40.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.40: Configuring the target server'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You may get an error message stating that the IP address is not allowed to connect
    to the MySQL server. From the error message, you can get the public IP of DMS
    and add this IP to the Connection Security pane of MySQL for successful connection,
    or enable Allow access to Azure Services. However, this would give all Azure services
    in your subscription access to the database.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to select the source databases that need to be migrated to
    the cloud. The tool will show you the databases that are available on the on-premises
    server. Select the source database and corresponding database as the target. In
    our case, we will map the `MOVIES` database, which is on-premises, to the `movies`
    database that we created earlier. *Figure 4.41* shows how the mapping is done
    from source to target:![Mapping databases in the Select databases pane](img/B17160_04_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.41: Mapping databases'
  prefs: []
  type: TYPE_NORMAL
- en: We're approaching the last step, where we can configure the migration settings.
    At this stage, you can specify which tables need to be migrated and settings for
    `horror_tbl` table has been selected:![Configuring database migration settings](img/B17160_04_42.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.42: Configuring database migration settings'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we proceed to the Summary tab, where we need to add a name for this
    activity and review the configuration we have done so far. Clicking on Start Migration
    will initiate the migration from the on-premises server to the Azure server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Soon we will be redirected to a page with the migration status and details of
    the source and destination servers, as shown in *Figure 4.43*:![Checking the migration
    status and details of the source and destination servers](img/B17160_04_43.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.43: Checking migration status'
  prefs: []
  type: TYPE_NORMAL
- en: Since our dataset was 10 rows, it took less than 5 seconds to complete the migration
    and notify us that we are ready to cut over. If you choose Start Cutover, Azure
    will provide the steps to commit any pending transactions, as shown in *Figure
    4.44*, and after that you are ready to point your applications to this database:![Starting
    cutover by clicking on Start Cutover](img/B17160_04_44.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.44: Starting cutover'
  prefs: []
  type: TYPE_NORMAL
- en: 'Even without initiating the cutover, you can check the Azure MySQL instance
    and verify that our records are there. The following shows verification done with
    Bash by connecting to the instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Verifying data in Azure MySQL Database after migration](img/B17160_04_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.45: Verifying data in the Azure Database for MySQL server after migration'
  prefs: []
  type: TYPE_NORMAL
- en: From *Figure 4.45*, it's evident that we are indeed connecting to the Azure
    MySQL instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Though we performed the migration from Hyper-V for demonstration, Azure Migrate
    supports other platforms and DMS supports other database types as well. *Table
    4.1* shows links to the official Microsoft content for other platforms including
    Hyper-V:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Platform** | **Link** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **VMware** | [https://docs.microsoft.com/azure/migrate/server-migrate-overview](https://docs.microsoft.com/azure/migrate/server-migrate-overview)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Physical servers** | [https://docs.microsoft.com/azure/migrate/tutorial-migrate-physical-virtual-machines](https://docs.microsoft.com/azure/migrate/tutorial-migrate-physical-virtual-machines)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **AWS instances** | [https://docs.microsoft.com/azure/migrate/tutorial-migrate-aws-virtual-machines](https://docs.microsoft.com/azure/migrate/tutorial-migrate-aws-virtual-machines)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **GCP instances** | [https://docs.microsoft.com/azure/migrate/tutorial-migrate-gcp-virtual-machines](https://docs.microsoft.com/azure/migrate/tutorial-migrate-gcp-virtual-machines)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Hyper-V** | [https://docs.microsoft.com/azure/migrate/tutorial-migrate-hyper-v](https://docs.microsoft.com/azure/migrate/tutorial-migrate-hyper-v)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Database Migration** | [https://datamigration.microsoft.com/](https://datamigration.microsoft.com/)
    |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.1: Migration documentation for other platforms'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have reached the end of the hands-on lab. To conclude, this hands-on
    was divided into sections where you were migrating servers using Azure Migrate
    and migrating databases using DMS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter focused on practical learning via hands-on labs. First, we went
    through how to install providers in VMs, then we ran discovery and replication
    procedures. The first hands-on lab concluded with the migration of a VM to Azure
    using Azure Migrate.
  prefs: []
  type: TYPE_NORMAL
- en: Our second hands-on lab focused on MySQL database migration to the Azure Database
    for MySQL service using DMS. In this lab, we first created the migration service
    and configured it with our target resources. Then we migrated a sample schema.
    Finally, we created a migration project and migrated the database to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating operating systems and databases to Azure is just one step on our cloud
    journey. Naturally, the next step is to operate the migrated Linux workloads on
    Azure. *Chapter 5*, *Operating Linux on Azure*, will give you some practical guidance
    on this topic.
  prefs: []
  type: TYPE_NORMAL
