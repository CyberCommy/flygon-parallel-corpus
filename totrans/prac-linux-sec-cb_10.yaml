- en: Chapter 10. Security Monitoring and Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing and managing log files using Logcheck
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring a network using Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using glances for system monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring logs using MultiTail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using system tools – Whowatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using system tools – stat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using system tools – lsof
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using system tools – strace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Lynis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing and managing log files using Logcheck
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an administrator, while checking for malicious activities on the system or
    any software issue, log files play a very important role. However, with an increasing
    amount of software, the number of log files being created has also increased.
    This makes it very difficult for the administrator to analyze log files properly.
  prefs: []
  type: TYPE_NORMAL
- en: In such scenarios, **Logcheck** is a good tool to help administrators analyze
    and scan log files. Logcheck scans logs for *interesting lines* as per its documentation.
    These lines mainly refer to security issues that have been detected by the tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No specific requirements are needed to use Logcheck on a Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will take a look at how to install and configure Logcheck
    as per our requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to install the package using the command shown in the following
    screenshot:![How to do it…](img/B04234_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the installation, a window will open and show you information about selecting
    a mail server configuration type, as shown in the following screenshot:![How to
    do it…](img/B04234_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Ok** to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next window, select **Internet Site**, and then select **Ok** to continue.![How
    to do it…](img/B04234_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installation has completed, we need to make changes to the `/etc/logcheck/logcheck.conf`
    configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first thing to edit in the configuration file is the format of the date/time
    stamp, which is used in the subject of the mail sent by Logcheck.![How to do it…](img/B04234_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we can change the value of the `REPORTLEVEL` variable in order to control
    filtering of the logs as per our requirement. We have three options available
    for this, and by default, the value is set to `server`.![How to do it…](img/B04234_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `workstation` value filters most of the messages and is less verbose. The
    `paranoid` value is useful for systems with high security. It runs as few services
    as possible, and is more verbose.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we change the value of the `SENDMAILTO` variable and provide our
    e-mail address to it to receive logs on our e-mail ID.![How to do it…](img/B04234_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The mail generated by Logcheck uses different subject lines for different events.
    If we wish to modify these subject lines, we can edit the value of the variables
    shown here:![How to do it…](img/B04234_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Logcheck, by default, uses the `/etc/logcheck/logcheck.logfiles` file to maintain
    a list of log files to be monitored by it. If we wish to use any other file to
    define the list and if it is in another location, we can edit the `RULEDIR` variable
    to define the new path.![How to do it…](img/B04234_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we want Logcheck to monitor any particular file apart from what is already
    defined in the `/etc/logcheck/logcheck.logfiles` file, we can add an entry in
    it, as shown here:![How to do it…](img/B04234_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding file, we added the `/var/log/boot.log` line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first install the Logcheck package, and after the installation, we edit its
    configuration `/etc/logcheck/logcheck.conf` file.
  prefs: []
  type: TYPE_NORMAL
- en: In the configuration file, we change the format of the date/time stamp for logs
    and also the filtering by modifying the `REPORTLEVEL` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we edit the `SENDMAILTO` variable, and enter our e-mail ID to receive
    the logs.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `etc/logcheck/logcheck.logfiles` file, we define the logs to be monitored
    by Logcheck.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring a network using Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any network that is either big or small, network monitoring and security
    is a very essential task. Regular monitoring of the network is important to protect
    systems from attacks and also to keep viruses and malware out of a network.
  prefs: []
  type: TYPE_NORMAL
- en: '**Nmap**, short for **network mapper**, is a free and open source tool that
    monitors a network, and it is the most versatile tool used by system/network administrators.
    Nmap can be used to perform security scans, explore a network, find open ports
    on remote systems, and perform network audits.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To show how Nmap works, we need a minimum of two systems to form a small network.
    On one system, we will install the `nmap` package, while the other system will
    be used as a host to scan.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will take a look at how to use Nmap to perform different
    types of scans.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step will be to install the `nmap` package if it is not installed
    already. To do so, we use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To perform a simple scan using Nmap, we can either use the hostname or the IP
    address of the system we want to scan. The command to perform a simple scan will
    be as follows:![How to do it…](img/B04234_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding example, the IP address of the system we are scanning is `192.168.1.105`.
    In the result of the scan, we can see that the target system is running the MySQL
    database server on port `3306`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nmap can also be used to scan our own system. To do so, we can run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to scan more than one system with the same command, we can do so,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the scan results of both the systems in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use Nmap to scan a particular network and check which systems are up
    and running in the network using the command given here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When we perform the scan using the `-sP` option, `nmap` skips port detection
    and other things. It simply checks which systems are up and running in the network
    by performing a simple ping.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we want to limit our scan to a particular port only, we can tell `nmap` to
    scan that port only using the `-p` option, as shown here:![How to do it…](img/B04234_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding example, we scan for port `22` and `80`, the default port for
    the SSH service and the HTTP (web server) service. As we can see in the preceding
    result, the remote system is running SSH; however, the HTTP port is closed. Hence,
    no web server is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'While performing a scan of the target system, determining the operating system
    on the system is very important as many exploits are available for a specific
    OS platform. To know the OS of the target system, we use the `-O` option, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result shown in the following image tells us that the target system is
    running the Windows 7 Ultimate version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have seen that using the `-p` option, we can check which particular port
    is open. Now, let's suppose that the target system has port `22` open, which means
    that SSH is running on the system. If we now want to check the version of the
    SSH service on the remote system, we can use the `-sV` option, as shown here:![How
    to do it…](img/B04234_10_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Nmap is simply run on an IP address, it does a basic scan and tells us
    which ports are open on the target system. By knowing the open ports, we can identify
    the services running on the system. In the same way, Nmap is used to scan the
    local system by providing the IP address of the local system.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap is used to scan multiple IP address at the same time by providing the IP
    addresses in the same command. Also, Nmap is used to check which systems are up
    and running in the network using the `-sP` option.
  prefs: []
  type: TYPE_NORMAL
- en: It is also used to scan for a particular port using the `-p` option and if the
    `-O` option is used, it fingerprints the target system to tell the operating system
    on which it is running.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap is also used to do other things such as identify the software version of
    the services running on the target system.
  prefs: []
  type: TYPE_NORMAL
- en: Using glances for system monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For an administrator, system monitoring is also about monitoring the performance
    of the system by checking the processes and services running on it. But with limited
    space on the screen, it sometimes becomes difficult to have all the information.
    In such situations, we would like to have a tool that can show us maximum information
    about the system, such as CPU, disk I/O, memory, network and so on, in a limited
    space.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we have individual tools to monitor this information, with Glances,
    an administrator can see the maximum amount of information in the minimum amount
    of space. It can adapt the information dynamically as per the size of the terminal
    window. Glances can highlight programs that use the maximum amount of system resources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are installing Glances on Ubuntu, then it is recommended that you use
    Ubuntu version 13.04 and above. For other versions of Linux, it is preferable
    to use the latest version. For our example, we are using Kali Linux 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand the workings of glances, we will follow the steps given here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to install the package using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After the installation has been completed, we have to edit the `/etc/default/glances`
    file and change the value of the `RUN` variable to `true`, as shown here:![How
    to do it…](img/B04234_10_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Doing this will automatically run `glances` during the system startup.
  prefs: []
  type: TYPE_NORMAL
- en: To manually start the tool, simply run the `glances` command. You will get an
    output window, as shown here:![How to do it…](img/B04234_10_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the preceding window, we can see different colors for the text displayed.
    The meaning of these color codes in glances is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Green**: This means that all is `OK`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blue**: This color says `CAREFUL`, attention is needed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Violet**: This color signifies `WARNING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Red**: This refers to something being `CRITICAL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The color codes work on the basis of the default thresholds defined in the configuration
    file of glances. We can change these threshold values by editing the `/etc/glances/glances.conf`
    file.![How to do it…](img/B04234_10_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By default, glances refreshes the value at a time interval of 1 second. We
    can change this value when running glances using the `-t` option followed by the
    time in seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: At times, we may not be able to physically access our system, but we still want
    to monitor the performance of the system. Glances can help us do this remotely.
    For this, we first need to enable the client/server mode of Glances on our system
    using the `-s` option and also bind it to the IP address of the system using the
    `-B` option, as shown here:![How to do it…](img/B04234_10_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the glances server is running on the system whose IP address is `192.168.1.102`,
    and by default, it runs on port `61209`. If prompted for a password when enabling
    the client/server mode, define any password of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the remote system where you want to access glances, run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once we run this command, we will get a window, as shown in the following screenshot,
    where we'll see `Connected to Kali – IP 192.168.1.102/24` in the top-left corner,
    which tells us that we are now accessing glances remotely:![How to do it…](img/B04234_10_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this command to work on the remote system, it is necessary to have glances
    installed on this remote system as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the installation of Glances, we enable its `autorun` during the system
    startup.
  prefs: []
  type: TYPE_NORMAL
- en: We run it using the `glances` command, and we modify the threshold value for
    the color codes by editing the `/etc/glances/glances.conf` file.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `-t` option, we modify the refresh time interval, and using the `-s`
    option, we enable the client/server mode of Glances, which is then accessed remotely
    on other systems using the `-c` option and the IP address of the system on which
    Glances is running.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring logs using MultiTail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any system administrator, monitoring log files is a very tedious task, and
    if we have to refer to more than one log file at the same time to troubleshoot
    any issue, it becomes even more difficult to keep switching between logs.
  prefs: []
  type: TYPE_NORMAL
- en: For such situations, we can use the **MultiTail** tool, which can help us to
    take a look at multiple log files in real time. Using MultiTail, we can display
    multiple log files in a single window or shell, and it will show us the last few
    lines of the log file in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use MultiTail, we don''t have to set up anything in particular on our Linux
    system. Only the `multitail` package needs to be installed. This can be done using
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting ready](img/B04234_10_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the MultiTail tool has been installed, we can start using it as per our
    requirements using these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to view two log files using `multitail`, we will run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_10_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the screen has been split into two parts, each displaying the
    content of individual log files.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to scroll through the two files that are open, just press *b* and
    a menu will pop up, as shown in the following screenshot. From the list, we can
    select the file we want to monitor in detail:![How to do it…](img/B04234_10_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the new window that opens up, press *gg* or *G* to move to the top or bottom
    of the scroll window. To exit from the scroll window, press *q*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we want to view three log files in two columns, we can use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_10_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the three log files in two columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'MultiTail allows us to customize the color for individual log files as we open
    them while merging both of them in the same window. This can be done using this
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_10_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we provide the names of the two log files to MultiTail on the same command
    line, it opens the two files in the same screen by splitting them into two parts.
  prefs: []
  type: TYPE_NORMAL
- en: To view more than two log files using MultiTail, we specify the number of columns
    in which the screen should be split using the `-s` option followed by the number
    of columns.
  prefs: []
  type: TYPE_NORMAL
- en: MultiTail also allows us to view multiple log files in the same screen without
    splitting the screen by differentiating the files on the basis of color. The color
    can be customized using the `-ci` option.
  prefs: []
  type: TYPE_NORMAL
- en: Using system tools – Whowatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While keeping a watch on the network, an administrator would also want to keep
    a watch on users who are currently logged on to the system and also check what
    each user is doing on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: '**Whowatch** is the perfect tool for all these tasks. It uses a simple text-based
    interface, which is easy to use and can display information about a username,
    user process, and also the type of connection being used, such as SSH and telnet.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since Whowatch doesn''t come as a preinstalled package in Linux, we have to
    install it to use it. The command to install Whowatch is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting ready](img/B04234_10_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To utilize the Whowatch tool to its maximum benefit, we have to understand
    the details of the tool properly:'
  prefs: []
  type: TYPE_NORMAL
- en: To start using the tool, just enter the `whowatch` command and a screen will
    appear, as shown here:![How to do it…](img/B04234_10_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screen lists all the user accounts that are logged in.
  prefs: []
  type: TYPE_NORMAL
- en: From the list, we can select any user account, and when we press *Enter*, we
    can see information about all the programs that a user is running.![How to do
    it…](img/B04234_10_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same screen, we have more options at the bottom, using which we can get
    more information about the user and also the programs that have been run by them,
    as shown here:![How to do it…](img/B04234_10_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the main screen of Whowatch, we can see a menu at the bottom.![How to do
    it…](img/B04234_10_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see here that we have to use the *F9* key to access the **Menu** options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we press *F9*, we see a menu on the top of the screen. Use the arrow keys
    on the keyboard to move through the menu. When we select the **Process** tab,
    we get a submenu, which gives an option, called the **KILL** signal, to the running
    processes. Similarly, we can see more options in the same submenu:![How to do
    it…](img/B04234_10_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we move to the **View** tab, we get these options:![How to do it…](img/B04234_10_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last tab is **Help**, under which we have the **Keys** option.![How to do
    it…](img/B04234_10_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we click on **Keys**, it will open up a new window and show you details
    about the keys to be used for different tasks, as shown here:![How to do it…](img/B04234_10_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *s* to get more information about the system.![How to do it…](img/B04234_10_37.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we press *t*, we get a list of all the processes on the system in a tree
    structure, which we can see here:![How to do it…](img/B04234_10_38.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whowatch can be started by simply typing `whowatch` in the command line. When
    it starts, it shows a list of usernames that are logged in. Just press *Enter*
    on any username to get information about all the programs running under that user.
  prefs: []
  type: TYPE_NORMAL
- en: To access more options in Whowatch, we enter the Main menu by pressing *F9*
    key. We then get various tabs such as **Process**, **View**, **Users**, **Help**,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The **Process** tab gives options to manage processes, while the **View** tab
    gives options to search and view the processes. The **Help** tab has an option
    to see the keys that can be used in Whowatch as shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: We use different keys to access system information and get a list of all the
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: Using system tools – stat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While working on Linux, the most commonly used command is `ls`, which gives
    a listing of the files in the directory we specified. However, it shows only a
    little information about the files.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, if we use the `stat` command, we can get more information about the
    files/directories when compared to using `ls`. Because `stat` is able to get information
    about a file from its node, it is able to give more information about the files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since `stat` is a built-in command of Linux, nothing else is needed to be installed
    in order to use it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will explain the options and usage of the `stat` command. Using
    stat, we will can get the detailed status of a particular file or filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have a file called `example.txt`. When we perform a long-listing
    of this file using the `ls -l` command, we get information about the file, which
    includes when the file was last modified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'However, when we use the `stat` command to check the details of the same file,
    it shows extra information about the file, and the difference can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding output, we can see that the Modify and Change time are same.
    But the access time has changed. It also shows the permissions in both the `octal`
    and `rwx` formats. Many other details are also shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's rename the file as `sample.txt`. After this, if we check the details
    of `sample.txt` file using `stat`, we can see that the `Change` time has been
    updated:![How to do it…](img/B04234_10_40.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's suppose we have three files, `sample.txt`, `sample1.txt`, and `sample2.txt`.
    If we want to check the details of each of these files, we can either use `stat`
    individually with each file, or else we can use wildcards with `stat` to show
    the details of all three files in a group, as shown here:![How to do it…](img/B04234_10_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can use the `stat` command to check the details of the directories as well:![How
    to do it…](img/B04234_10_42.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the case of the directory, we can see an extra detail about the number of
    links.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we use the `stat` command for any default directory of Linux, such as `/etc/`,
    we can see that we get a big value for the number of links:![How to do it…](img/B04234_10_43.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we want to see the details of a filesystem, we can't use `ls` for this. However,
    `stat` works on a filesystem as well. We get the same kind of details as filesystems
    and files:![How to do it…](img/B04234_10_44.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we use the `-f` option with the `stat` command while checking the details
    of filesystem, it will display the status of the filesystem.![How to do it…](img/B04234_10_45.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use the `stat` command to get detailed information about a file. When a file
    is renamed, `stat` tells us the time that the change was made. It also gives information
    about multiple files at the same time using wildcards with the `stat` command.
  prefs: []
  type: TYPE_NORMAL
- en: '`stat` works on directories and filesystems as well. In the case of a filesystem,
    `stat` can display its status using the `-f` option.'
  prefs: []
  type: TYPE_NORMAL
- en: Using system tools – lsof
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At times, we may face situations where we are unable to unmount a disk due to
    the fact that some files are being used. However, we may not be able to understand
    which file is being referred to. In such situations, we can check which files
    are being opened by which processes running on the system.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done using the **lsof** command, which stands for **List Open Files**.
    Since Linux considers everything, such as directories, devices, sockets, and so
    on, as a file, we can use `lsof` to easily identify all the open files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the `lsof` command, it is recommended that you are logged in from root
    account, or else, use `sudo` from a nonroot account so that the output of the
    `lsof` command is not limited.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will explore the different options that can be used with
    the `lsof` command to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we just run `lsof`, it will list all the open files that belong to any active
    process on the system. If the output is long, we can use the `less` command to
    scroll through the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The output that is displayed is shown in columns, such as `COMMAND`, `PID`,
    `USER`, `FD`, `TYPE`, `DEVICE`, and so on, for better understanding of the files.
  prefs: []
  type: TYPE_NORMAL
- en: The `FD` column has information about file descriptions such as the current
    working directory (`cwd`), root directory (`rtd`), program text (`txt`), and so
    on. If the `FD` column contains information such as `0u`, `1u`, and so on; the
    number signifies the actual file descriptor and the letter signifies different
    modes (`read` access, `write` access, and `read/write` access).
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check the list of all open files for a particular user, we use the `-u`
    option followed by the username:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_10_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using `lsof` we can check whether there are any processes running on a particular
    port. To do so, we have to use the `-i` option and run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_10_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we checked for a list of running processes on port
    `22`, and we saw that the SSH process was running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we want to check the exact number of open files on the system, we can run
    this command:![How to do it…](img/B04234_10_49.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding example, there are lots of open files, 5220 to be specific.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check which user is looking at what file and which commands are being run
    by the user, we can use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/B04234_10_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have many more options while using `lsof`, which can be explored by referring
    to the `man` page of the `lsof` command.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Running the `lsof` command shows a listing of all the open files on the system.
    Using the `-u` option and specifying the username, we get a list of open files
    for a particular user.
  prefs: []
  type: TYPE_NORMAL
- en: When we use the `-i` option and specify a port number, we get information about
    any process running on that port.
  prefs: []
  type: TYPE_NORMAL
- en: When we use both the `-i` and `-u` options with a particular username, we get
    information about the files and commands being accessed by that user.
  prefs: []
  type: TYPE_NORMAL
- en: Using system tools – strace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running any command or program on our Linux machine, you might wonder what
    the background working of it is. For this, we have a very useful tool in Linux
    called **strace**.
  prefs: []
  type: TYPE_NORMAL
- en: This a command-line tool that can be also used as a diagnostic or debugging
    tool. strace monitors the interaction between processes and the Linux kernel and
    is helpful when we want to debug the execution of any program.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tool is available for all Linux-based systems by default. Hence, nothing
    else needs to be configured to start using strace.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's see how strace can be used in various ways to trace the execution of any
    program from start to end.
  prefs: []
  type: TYPE_NORMAL
- en: To trace the execution of any executable command in Linux, simply run the `strace`
    command followed by the executable command. If we use `strace` for the `ls` command,
    we get this output:![How to do it…](img/B04234_10_51.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, the output displayed has been truncated. If we
    check the last few lines of the output, we see some write system calls where the
    listing of the current directly has been displayed:![How to do it…](img/B04234_10_52.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To check the listing, we can run `ls` alone in the same directory, and we'll
    see the same listing that we saw in the previous image:![How to do it…](img/B04234_10_53.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we want to have a statistical summary of the `strace` command to be displayed
    in a neat manner, we can use the `-c` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding command is run, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also display the timestamp at the start of each output line using the
    `-t` option:![How to do it…](img/B04234_10_55.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The default `strace` command displays all the system calls made by the executable
    program. If we wish to show only a specific call, we can use the `-e` option.
    So, if we want to see only the open system call of the `ls` command, we have to
    run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding command is run, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we wish to save the output of the `strace` command in a file for the purpose
    of viewing it later, we can do so using the `-o` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `output.txt` is the name of the file that will be created to save the
    output of the `strace` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want to use strace in any process that is currently running, we can do
    so using the ID of the process. In our example, we are using the process of `firefox`,
    whose process ID is `16301`.
  prefs: []
  type: TYPE_NORMAL
- en: We run the following command and also save the output of the command in the
    `firefox_output.txt` file using the `-o` option:![How to do it…](img/B04234_10_58.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can then check the content of the output file using the `tail` command or
    any text editor of our choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `strace` command is used on any other Linux command or program, it
    traces its interaction with the Linux kernel.
  prefs: []
  type: TYPE_NORMAL
- en: When the `-c` option is used with `strace`, we get a statistical summary, and
    if the `-t` option is used, we get time stamp preceding each output line.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `-e` option, we see only a specific call of program execution, such
    as open system calls. Using the `-o` option, we write the output of the `strace`
    command to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Using Lynis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring log files on Linux manually is a very tedious task. To make it easy,
    we can use auditing tools on our Linux system, which will be able to automatically
    scan the whole system for any kind of security issues.
  prefs: []
  type: TYPE_NORMAL
- en: '**Lynis** is easy to use and we can get a security report in a faster duration
    of time. This is helpful when scanning Linux systems for vulnerabilities and malwares.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use Lynis, it''s not necessary to install it. If you are using an Ubuntu
    system, you can use apt-get to install the Lynis package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding command is run, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04234_10_59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For other Linux distributions, simply download the package from [https://cisofy.com/download/lynis/](https://cisofy.com/download/lynis/).
  prefs: []
  type: TYPE_NORMAL
- en: After downloading it, you just need to use `./lynis audit system` and the scan
    will start.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using Lynis is very simple. Just start the scanning process and everything
    will be done automatically. Let''s explore the working of the tool now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the scan, just type this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding command is run, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we run the preceding command, scanning will start and it will continue
    for some time, depending on the packages it finds on the system. The scan includes
    different sections, such as system tools, kernel, filesystem, and many more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the scan has been completed, we can see an overview of the details at the
    end of the output screen:![How to do it…](img/B04234_10_61.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the scanning is done, a report is generated and saved in the `/var/log/lynis.log`
    file. When we read the content of this file, we get an output similar to what
    is shown here:![How to do it…](img/B04234_10_62.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can scroll through the log file and see which tests Lynis has performed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the preceding report, what needs our attention are the entries containing
    the word `Warning`. Hence we can run the given command to find all the lines in
    the report that contain this word:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding command is run, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we have done for `Warning`, in the same way, we can find all the lists of
    all the `Suggestion` given by Lynis using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding command is run, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_10_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also check `Warning` and `Suggestion` by scrolling to the end of the
    report in the `/var/log/lynis.log` file. We will see a result similar to what
    is shown here:![How to do it…](img/B04234_10_65.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Lynis scan can be started by executing the `lynis -c` command. Nothing needs
    to be done while the scan is running.
  prefs: []
  type: TYPE_NORMAL
- en: After the completion of the scan, the report is saved in the `/var/log/lynis.log`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: We find some lines in the report that contain the word `Warning` and `Suggestion`
    as these are lines that need our attention according to the requirements of Lynis.
  prefs: []
  type: TYPE_NORMAL
