- en: Performing Website Penetration Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter takes us away from the usual network devices that we're accustomed
    to exploiting and instead focuses on checking for vulnerabilities in web applications
    and servers.
  prefs: []
  type: TYPE_NORMAL
- en: Being a penetration tester is a pretty cool job as you are being paid to hack
    or break into someone else's network and systems, but legally.
  prefs: []
  type: TYPE_NORMAL
- en: Being a penetration tester also means developing and expanding your skill set
    to various domains; there will always be situations where you'll be required to
    perform a vulnerability assessment or penetration test on a client's web server.
    This chapter will begin by teaching you how to discover the underlying technologies
    that are being used on a target website and how to discover other websites that
    are hosted on the same server. Furthermore, you will learn how to perform multiple
    exploitations on a target web server by uploading and executing a malicious file
    and leveraging **Local File Inclusion** (**LFI**) on a vulnerable server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File upload and file inclusion vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting file upload vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting code execution vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting LFI vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive in!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kali Linux**: [https://www.kali.org/](https://www.kali.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Broken Web Applications Project**: [https://sourceforge.net/projects/owaspbwa/](https://sourceforge.net/projects/owaspbwa/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the earlier parts of this book, specifically in [Chapter 5](474024a2-84fc-4fb6-b1b7-bd64ce91ef0c.xhtml),
    *Passive Information Gathering*, and [Chapter 6](a7554e9e-076d-45b8-b0fa-3b02ac270e24.xhtml),
    *Active Information Gathering*, we discussed the importance of performing extensive
    reconnaissance on a target, whether it''s a single system, network, or even a
    website. Each penetration test has a set of guidelines and stages. As you may
    recall, the following are the stages of penetration testing:'
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance (information gathering)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scanning (and enumeration)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploitation (gaining access)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maintaining access
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Covering tracks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gathering as much information as possible about a target helps us to determine
    whether the target has any security vulnerabilities and whether it's possible
    to exploit them. In the following section, we will begin by learning how to discover
    technologies that are being used on a website.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering technologies that are being used on a website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the information-gathering phase of a website's penetration testing, it's
    important to determine the underlying technologies running on the actual web server.
    **Netcraft** ([www.netcraft.com](http://www.netcraft.com)) is an internet security
    and data mining website that can assist us in discovering web technologies on
    a web server for any given website.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with using **Netcraft**, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Head on over to [https://toolbar.netcraft.com/site_report](https://toolbar.netcraft.com/site_report).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the website, enter the website's URL in the lookup field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the result that was retrieved for the [www.google.com](http://www.google.com)
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d50c471-7237-434d-9eba-00f8a4754bd8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Netcraft is able to provide a lot of details about the target website, including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Domain name
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Public IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain registrar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netblock owner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nameservers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS admin contact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web server types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web server operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having retrieved the web server operating system and the running application,
    you can now narrow down your scope to searching for vulnerabilities and exploits
    that fit the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, you can use the **Netcat** utility to perform **banner grabbing**.
    This technique is used to retrieve service versions of a running daemon or application
    on a target device. Using the following command, we can establish a connection
    between our machine (Kali Linux) and the target web server on port `80`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, it''s time to retrieve the web server banner. Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Hit *Enter* twice and the web server banner will be displayed at the top. The
    following is a snippet showing the server banner for the [www.google.com](http://www.google.com)
    address, along with its web server type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cd337673-9af3-4013-8690-0d38e5f69e5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Please remember that using the Netcat utility will establish a session between
    your attacker machine (Kali Linux) and the target. If the objective is to be stealthy
    (undetectable), this method is not recommended unless you are spoofing your IP
    address and MAC addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, this technique can be performed using **Telnet**. Simply replace
    `nc` with `telnet` and you should get the same results on your Terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll dive deep into discovering websites that are hosted
    on the same web server.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering websites on the same server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the years, organizations have moved away from hosting their company's website
    on their own on-premises server to using an online, cloud-based solution. There
    are many website hosting companies available in the e-commerce industry that provide
    solutions such as website hosting.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting providers don't usually give customers a dedicated server to host their
    website; instead, a shared space is given. In other words, the server that is
    hosting your website is also hosting other people's websites as well. This is
    a benefit for both the service provider and the customer. The customer pays less
    as they are simply sharing the resources on a server with others and the server
    provider doesn't need to spin up a dedicated server per user, which would result
    in less power consumption and physical storage space in the data center.
  prefs: []
  type: TYPE_NORMAL
- en: Due to service providers using this business and IT approach of providing shared
    space for their customers, security is a concern. It's like using the computers
    in a school lab; each person has their own user account but is still sharing a
    single system. If one user decides to perform malicious actions on the computer,
    they may be able to retrieve sensitive data from the other users' accounts/profiles.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 5](474024a2-84fc-4fb6-b1b7-bd64ce91ef0c.xhtml), *Passive Information
    Gathering*, **Maltego** was introduced so that we could perform passive information
    gathering in relation to a target website. In this section, we are going to use
    Maltego once more to help us discover websites that are hosted on the same server.
  prefs: []
  type: TYPE_NORMAL
- en: Before continuing, please ensure that you are comfortable with using **Maltego**
    to perform various information-gathering tasks. If you are having difficulty remembering
    how to use the essential tools within Maltego, please take a few minutes to review
    [Chapter 5](474024a2-84fc-4fb6-b1b7-bd64ce91ef0c.xhtml), *Passive Information
    Gathering*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following steps to discover websites on the same server:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a domain on Maltego. For this exercise, I have created a new domain using
    a free web hosting provider. You can do the same or use your existing domain name
    if you already own one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should **not** use someone else's domain without their knowledge and consent.
    For this exercise, I have created and own the target domain only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the Domain entity and choose All Transforms | To DNS Name –
    NS (name server), as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eddd7c9c-74db-4259-b2d7-396346f05603.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Maltego will take a few seconds to retrieve the nameservers for the target
    domain name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f86224c5-3cb0-4f7b-b0d0-e510fdf34297.png)'
  prefs: []
  type: TYPE_IMG
- en: The hosting provider for my custom domain is using two nameservers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the nameservers have been retrieved, it''s time to check whether there
    are other websites hosted on the same servers. Right-click on a nameserver and
    select All Transforms | To Domains (Sharing this NS), as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b512b482-3de0-412f-b2e1-e47cbdf3a345.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This process usually takes a minute or two to complete. Once finished, Maltego
    will provide you with the results. As you can see in the following snippet, there
    are multiple websites hosted on the same server as my domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6ef5cde-d24a-4a68-8da7-184db08ed8d4.png)'
  prefs: []
  type: TYPE_IMG
- en: This technique is very useful when profiling a target organization's web server.
    Sometimes, you may encounter an organization hosting their website and other internal
    sites on the same server within the DMZ section of their network. Always attempt
    to perform enumeration techniques to extract any sites on web servers. Sometimes,
    organizations host their intranet site on the same web server as their public
    website. Gaining access to hidden sites can provide fruitful information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Disclaimer**: To protect confidentiality, information related to the websites
    has been blurred as it belongs to other parties.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about the methods we can use to discover
    sensitive files on a website.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering sensitive files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To continue our information-gathering phase in website penetration testing,
    we'll attempt to discover any sensitive files and directories on a target website.
    To perform this task, we will be using **DirBuster**. DirBuster is a brute force
    web application that was designed with the objective of revealing any sensitive
    directories and files on a target web server.
  prefs: []
  type: TYPE_NORMAL
- en: For this exercise, we'll be using the **OWASP Broken Web Applications** (**BWA**)
    **Project** virtual machine as our target, and our **Kali Linux** machine as the
    attacker.
  prefs: []
  type: TYPE_NORMAL
- en: 'To discover sensitive files on a web server, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open DirBuster by navigating to Applications | 03 – Web Application Analysis
    | Web Crawlers & Directory Bruteforcing | DirBuster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When DirBuster opens, enter the IP address of the OWASP BWA virtual machine
    in the Target URL field. The URL should be in the `http://192.168.56.101:80/`
    format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, you can increase the number of threads. Increasing the number of
    threads will apply more computing power to the application and will, therefore,
    speed up the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Browse to add a wordlist that DirBuster will use to index and search
    on the target website. If you click on List Info, a new window will appear, providing
    a recommended wordlist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the box next to Be Recursive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Start to begin the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the options that were used for this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3382b38e-b1b3-46d3-91ba-828096cfe05c.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, you can use a wordlist from another location, such as **SecLists**.
  prefs: []
  type: TYPE_NORMAL
- en: The **file extensions** option can be customized and is a good way of finding
    hidden directories with files such as `.bak` and `.cfg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'While DirBuster is performing its brute force attack, the results window will
    appear. To view all the current directories and files, click on the Results –
    List View tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6c26aff-96a2-4b4a-a542-8b693f27d779.png)'
  prefs: []
  type: TYPE_IMG
- en: The **HTTP 200 Status** code indicates that this was successful. In other words,
    the attacker machine has successfully been able to communicate with a specific
    directory on the target website/server.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, other tools such as **Burp Suite** and **OWASP ZAP** can be used
    to discover hidden directories and sensitive files on a target web server and
    website.
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the previous snippet, the list of directories was found using DirBuster.
    Go through each directory as they may contain sensitive files and information
    about the target.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a look at the importance of the `robots.txt`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: robots.txt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `robots.txt` file contains a list of directories and files from a web server.
    The entries within the `robots.txt` file are created by the website owner or web
    administrator and are used to hide directory locations from web crawlers. In other
    words, it informs a search engine's crawlers to not index a certain directory
    of a website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Penetration testers add the `robots.txt` extension at the end of a domain name
    to access and view its content. The following are the entries for a `robots.txt`
    file of a reputable organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1057553-76e4-4574-b30b-4702767eb4c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, there are multiple directories. By simply combining each directory
    with the domain name, you''ll be able to access hidden areas on the target website.
    Let''s use the `/administrator/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5bfcabc5-8062-4c30-b176-5af022b7aa17.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have access to the login page of the site's control panel. Using the
    other directories may provide other fruitful information.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a deep dive into analyzing discovered files
    on a target server.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing discovered files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hidden directories usually contain sensitive files with important information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following steps to get started with analyzing discovered files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the DirBuster results window, click on the Results – Tree View tab.
    This will provide you with a tree structure that allows you to expand each folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47b5743a-fdcf-46e1-971a-be82f4fd5c68.png)'
  prefs: []
  type: TYPE_IMG
- en: By expanding the `cgi-bin` folder, we can see two files, as shown in the preceding
    screenshot. Using the web browser, we can add the directory extension and the
    IP address of the server to create a URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Entering the `http://192.168.56.101/cgi-bin/` address, the web browser shows
    us the files, last modification date, file size, and description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b96b07f6-ccaa-44c0-8b69-fcdf50c4ab9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, we can use `dirb` to check for files and directories on a target
    web server. `dirb` allows us to perform a quick scan if we use the following syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, you can choose to use a custom wordlist as part of your command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is a quick scan that was performed by DirBuster. If
    you look closely, you''ll notice that DirBuster was able to discover hidden directories
    and files, along with their sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c8bc6e2-8eb1-41ae-a1d8-81c3ce4bbfae.png)'
  prefs: []
  type: TYPE_IMG
- en: Performing such tasks can be a bit time-consuming and may take a few minutes,
    or even hours, to complete.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will take a dive into learning about cryptography.
  prefs: []
  type: TYPE_NORMAL
- en: Cryptography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cryptography is the technique of protecting data from unauthorized persons
    on a system. This technique involves taking a message, passing it through an encryption
    cipher (algorithm), and providing an output known as ciphertext (an encrypted
    message):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/961356db-49f2-4efe-9697-2a691d494293.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cryptography has the following objectives:'
  prefs: []
  type: TYPE_NORMAL
- en: Confidentiality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-repudiation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, web applications can use poorly designed encryption code within their
    application to secure data being transferred between the end user's browser and
    the web application, and between the web application and the database server.
  prefs: []
  type: TYPE_NORMAL
- en: Such security flaws can lead to an attacker stealing and/or modifying sensitive
    data on a web or database server.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about various web vulnerabilities and how to exploit file
    upload and file inclusion vulnerabilities on a target web server.
  prefs: []
  type: TYPE_NORMAL
- en: File upload and file inclusion vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss various security vulnerabilities that allow
    an attacker to perform file upload, code execution, and file inclusion attacks
    on a web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following sections, we will cover the fundamentals of the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cross-Site Scripting** (**XSS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-Site Request Forgery** (**CSRF**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structured Query Language injection** (**SQLi**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure deserialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common misconfigurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerable components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure direct object reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive in!
  prefs: []
  type: TYPE_NORMAL
- en: XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'XSS attacks are carried out by exploiting vulnerabilities in a dynamically
    created web page. This allows an attacker to inject client-side scripts into a
    web page being viewed by other users. When an unsuspecting user visits a web page
    that contains XSS, the user''s browser will begin to execute the malicious script
    in the background while the victim is unaware:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52f9095b-8507-47b0-b46b-b2eea97139ab.png)'
  prefs: []
  type: TYPE_IMG
- en: An XSS attack usually focuses on redirecting a user to a malicious URL, data
    theft, manipulation, displaying hidden IFRAMES, and showing pop-up windows on
    a victim's web browser.
  prefs: []
  type: TYPE_NORMAL
- en: The malicious script includes ActiveX, VBScript, JavaScript, or Flash.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of XSS attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Stored XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflected XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will discuss both in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Stored XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stored XSS is **persistent** on the web page. The attacker injects malicious
    code into the web application on a server. The code/script is permanently stored
    on the page. When a potential victim visits the compromised web page, the victim's
    browser will parse all the web code. However, in the background, the malicious
    script is being executed on the victim's web browser. This allows the attacker
    to retrieve any passwords, cookie information, and other sensitive information
    that is stored on the victim's web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Reflected XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reflected XSS is a **non-persistent** attack. In this form of XSS, the attacker
    usually sends a malicious link to a potential victim. If the victim clicks on
    the malicious link, it will open the default web browser (reflected) on the victim's
    computer. The web browser will automatically load the web page in which the malicious
    script will automatically execute, capturing passwords, cookie information, and
    other sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take a deep dive into CSRF.
  prefs: []
  type: TYPE_NORMAL
- en: CSRF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A CSRF attack is a bit similar to an XSS attack. Let's use an analogy to simplify
    our explanation of CSRF attacks. Imagine a user, Bob, who opens his web browser
    and logs in to his banking customer portal to perform some online transactions
    on his account. Bob has used his user credentials on his bank's web portal; the
    web application/server verifies that the user is Bob and automatically trusts
    his computer as the device communicating with the web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, Bob also opens a new tab in the same browser to visit another website
    while maintaining an active session with the bank''s web portal (trusted site).
    Bob doesn''t suspect that the new website he visits contains malicious code, which
    is then executed in the background on Bob''s machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3a41ba0-af2a-4722-ba36-22e3a69a4419.png)'
  prefs: []
  type: TYPE_IMG
- en: The malicious code then injects an HTTP request into the trusted site from Bob's
    machine. In this way, the attacker is able to capture Bob's user credentials and
    session information. Additionally, the malicious link can cause Bob's machine
    to perform malicious actions on the trusted site as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover the essentials of **SQL injection** (**SQLi**)
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: SQLi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SQLi allows an attacker to insert a series of malicious SQL code/queries directly
    into the backend database server. This allows the attacker to manipulate records
    such as add, remove, modify, and retrieve entries in a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95000a39-1ab0-4499-a8ee-3bc869b243fa.png)'
  prefs: []
  type: TYPE_IMG
- en: The attacker can leverage the vulnerability of web applications to bypass security
    controls and measures to gain entry to the database server/application. SQLi attacks
    are injected via the address bar on the web browser or the login portal of a website.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss insecure deserialization.
  prefs: []
  type: TYPE_NORMAL
- en: Insecure deserialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Serialization** is the process of converting an object into a smaller byte
    size to either transmit or store the object in a file, database, or even memory.
    This process allows the object to maintain its state in order to be assembled/recreated
    when needed. However, the opposite of serialization is called **deserialization**.
    This is the process of recreating an object from the stream of data (bytes) into
    its original form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Insecure deserialization** happens when untrusted data is used to abuse the
    logic of an application, create a denial-of-service attack, or execute malicious
    code on the web application/page/server. In an insecure deserialization attack,
    the attacker can execute remote code on the target web server.'
  prefs: []
  type: TYPE_NORMAL
- en: Further information on insecure deserialization can be found on the OWASP website
    at [https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization](https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization).
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, system administrators and IT professionals don't take these
    vulnerabilities seriously until a cyberattack is at their front door. As penetration
    testers, it's our job to efficiently discover all the existing and hidden security
    vulnerabilities in a target organization and inform the company to help secure
    their assets.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will outline some common misconfigurations on web
    servers.
  prefs: []
  type: TYPE_NORMAL
- en: Common misconfigurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Misconfigurations on the web server can create vulnerabilities that can allow
    an attacker to gain unauthorized access to default user accounts, access hidden
    pages and directories, perform exploitation on any unpatched flaws, and perform
    read/write actions on insecure directories and files on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Security misconfigurations are not specific to any level of the web application,
    but can affect any level of the web server and application, such as the operating
    system (Windows or Linux), the web server platform (Apache, IIS, and Nginx), framework
    (Django, Angular, Drupal, and so on), and even custom code hosted on the server.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will discuss various vulnerable components that
    are found on web servers and platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerable components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some of the commonly known vulnerable components in a web
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adobe Flash Player**: The Adobe Flash Player was commonly used as a multimedia
    player within a web browser. It supports application content such as online videos,
    audio, and games. However, over the years, many security vulnerabilities have
    been discovered and recorded, and users have been moving away from using this
    component on their web browsers. One recent vulnerability is **CVE-2018-15982**,
    which allows successful exploitations that lead to arbitrary code execution on
    a target system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JBoss Application Server**: The JBoss Application Server is a Java web container
    that is both open source and able to operate cross-platform. At the time of writing
    this book, a severe vulnerability was found that enabled an attacker to remotely
    execute malicious code on a JBoss Application Server and therefore gain full control
    of the target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The vulnerability affected all JBoss Application Server versions 4.0 and prior.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adobe ColdFusion**: Adobe ColdFusion is a commercial web application development
    platform. Its design was intended to allow developers to easily connect HTML pages
    to a database. However, in 2018, a critical vulnerability was discovered that
    allows an attacker to upload data onto a compromised system with any restrictions,
    further allowing the attacker to gain control of the server using web shells.
    This vulnerability was recorded as **CVE-2018-15961**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please note that these are only some of the many vulnerable components that
    can be found on a web server. Over time, security researchers will continue to
    discover and record new vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will briefly discuss **Insecure Direct Object Reference**
    (**IDOR**).
  prefs: []
  type: TYPE_NORMAL
- en: IDOR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to OWASP ([www.owasp.org](http://www.owasp.org)), IDOR happens when
    access is provided to an object based on the input provided by the user. If a
    web application is found to be vulnerable, an attacker can attempt to bypass authorization
    and gain access to resources on the compromised system.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will demonstrate how to exploit file upload vulnerabilities on a target
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting file upload vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to use our OWASP BWA virtual machine to demonstrate
    a file upload vulnerability. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a payload on your Kali Linux (attacker) machine using `msfvenom`,
    which will later be uploaded to the target server. Using the following syntax,
    create a PHP-based payload for establishing a reverse connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the highlighted code, open a text editor, and save the file as `img.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3515f8e8-4851-440d-8653-46e9b222a624.png)'
  prefs: []
  type: TYPE_IMG
- en: Using your web browser within Kali Linux, enter the IP address of OWASP BWA
    in the address bar and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the main page, click on **Damn Vulnerable Web Application**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c9eb84f-eccd-4a1c-bc70-04ce74a48e2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The DVWA login portal will appear. Log in with `admin`/`admin` as Username/Password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a72d97a5-d315-4397-b695-4515e21e5566.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once logged in, you''ll see a menu on the left-hand side. Click on Upload to
    view the Vulnerability: File Upload page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/82c7950a-c57e-4d9d-bdd4-29873165967f.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Browse..., select the `img.php` file, and then click Upload on the
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file has been uploaded, you will receive a message displaying the
    directory where the file is stored on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/185e6808-af63-4746-a6bf-853ed461c7ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the file location, that is, `hackable/uploads/img.php`, and paste it into
    the URL to execute the payload (`img.php`). The following is the expected URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Hit *Enter* to execute the payload.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Kali Linux, load Metasploit using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable the `multi/handler` module in Metasploit, set the reverse TCP payload,
    and execute the exploit using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2bb249a6-8aa5-434d-8229-a5734cd83289.png)'
  prefs: []
  type: TYPE_IMG
- en: Please be sure to check the IP address of the Kali Linux machine and adjust
    the `LHOST` parameter accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having executed the `img.php` payload on the server and enabled the `multi/handler`
    on Metasploit, we are able to receive a reverse shell on our attacker machine,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed29642c-7be8-44cb-b0ab-08887b8d84f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the `meterpreter` shell, you are now able to perform further actions on
    the compromised system.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will demonstrate how to exploit code execution
    vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting code execution vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a device is vulnerable to code execution, an attacker or penetration tester
    is allowed to execute code remotely on the target server. Additionally, the penetration
    tester will be able to retrieve the source code that's stored on the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete this exercise, we will be using the following topology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/739a76ec-d61e-429a-82ac-79a80fadd0aa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get started with code execution exploitation, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will attempt to discover whether the target is vulnerable to **CVE-2012-1823**.
    To discover whether a target is vulnerable, use the following commands with `nmap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Nmap may not always return results that indicate that a vulnerability exists
    on a target. However, this should not stop you from determining whether a target
    is vulnerable to an exploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, within **Metasploit**, use the `search` command to find a suitable exploit
    module to help us take advantage of the vulnerability on the target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89a269bf-78d5-495a-93e8-7db7dd151d1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, use the following command to use the module and set the remote target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, the following commands allow you to use a suitable payload for
    establishing a remote shell upon exploitation and setting your localhost IP address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `exploit` command to launch the exploit against the target. The following
    screenshot shows that the exploit was successful on the target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f85fcc3c-3a78-4c56-892d-c4d03baa8725.png)'
  prefs: []
  type: TYPE_IMG
- en: The payload has been sent across to the victim and we have a reverse shell.
    Having completed this section, you are now able to discover and perform code execution
    on a target server.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will demonstrate how to exploit LFI vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting LFI vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Servers that are vulnerable to LFI security flaws allow an attacker to display
    the content of files through the URL within a web browser. In an LFI attack, the
    penetration tester can read the content of any file from within its directory
    using either `../` or `/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, let''s head back over to the **Damn Vulnerable Web Application**
    (**DVWA**) web interface within **OWASP BWA**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the DVWA web interface, on the left-hand side menu, click on File Inclusion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb320a7c-f6bc-432c-abc0-73faaa6b52fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By repeating `../` a few times and inserting the directory of the `passwd`
    file, we are able to view the content of the `passwd` file on the target web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9a7801d-8af2-4268-95ad-35a88a63fbb5.png)'
  prefs: []
  type: TYPE_IMG
- en: This type of attack tests a system for directory transversal vulnerabilities.
    Directory transversal allows an attacker to access restricted locations and files,
    as well as execute commands on a target web server. This attacker can manipulate
    the variables by simply using the `dot-dot-slash (../)` syntax within the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Thus far, we have completed a few exercises to exploit the various weaknesses
    of a target system. In the next section, we'll take a look at preventing and mitigating
    security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are countermeasures that can be used to prevent web server and
    web application attacks and remediate such vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Apply the latest (stable) patches and updates to the operating system and web
    applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable any unnecessary services and protocols on web servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use secure protocols, such as support data encryption, wherever possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If using insecure protocols, implement security controls to ensure that they
    are not exploited.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable WebDAV if it's not being used by a web application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove all unused modules and applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable all unused default accounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change default passwords.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement security policies to prevent brute force attacks, such as lookout
    policies for a failed login attempt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable the serving of directory listings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor and check logs for any suspicious activity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement digital certificates from trusted **Certificate Authorities** (**CAs**)
    and ensure that digital certificates are always up to date.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure data input validation and sanitization is implemented and tested regularly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a **Web Application Firewall** (**WAF**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These items are simply a summary of preventative measures that an IT professional
    can adapt; however, additional research will be required since, each day, new
    and more sophisticated threats and attacks are developed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the course of this chapter, we have discussed the techniques that we
    can use to determine web technologies on a web server and perform real-world simulation
    attacks on target web applications.
  prefs: []
  type: TYPE_NORMAL
- en: You are now able to discover the underlying web technologies that are used on
    a target web server and perform further enumeration to discover additional websites
    that are being hosted on a single web server. Furthermore, by completing the exercises
    in this chapter, you have the skills to discover any sensitive files and directories
    on a target server and perform website penetration testing to exploit file uploads
    and LFI vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this chapter has been helpful and informative in your studies and career.
    In the next chapter, [Chapter 15](43c90c88-f9b6-44da-81d0-fb0e07824b91.xhtml),
    *Website Penetration Testing – Gaining Access*, you'll be learning about using
    advanced web application penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are some web server platforms?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool(s) can be used to discover hidden files on a web server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What HTTP status code means successful?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of attack allows an attacker to retrieve stored data from a victim's
    web browser?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of attack allows a malicious user to manipulate a database?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are a number of additional reading resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vulnerable components**: [https://resources.infosecinstitute.com/exploring-commonly-used-yet-vulnerable-components/](https://resources.infosecinstitute.com/exploring-commonly-used-yet-vulnerable-components/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing for insecure direct object references**: [https://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)](https://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web server misconfiguration**: [https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration](https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
