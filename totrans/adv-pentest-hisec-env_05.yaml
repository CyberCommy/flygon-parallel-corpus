- en: Chapter 5. Web Application Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore various methods of testing web applications
    using freely available tools such as your web browser, w3af, WebScarab, and others.
    We will also discuss methods of bypassing web application firewalls and intrusion
    detection systems and how to determine if your targets are being load balanced
    or filtered. This chapter does require significant lab preparation. If you are
    not following along with the examples, you may want to bypass these portions.
  prefs: []
  type: TYPE_NORMAL
- en: It is of importance to note that in a secured environment web-based applications
    may be the most direct method of gaining a toe-hold in the network you are testing.
    They are also the most likely entry point used by malicious users. It seems that
    every day there are more breach notices released and most of these stem from web
    application security flaws or misconfigurations. Considering that many of these
    applications are accessible to the public via the Internet, web applications are
    prime targets. The Internet still provides various methods of anonymity, thus
    limiting the actual risk that would-be attackers face. After all, it is difficult
    to prosecute someone you can't catch.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are numerous methods of performing this type of testing. We would need
    to dedicate an entire book to cover them all. Keeping this in mind we have provided
    guidance on techniques that provide the most benefit when targeting secured environments.
  prefs: []
  type: TYPE_NORMAL
- en: Businesses will typically use a risk-based approach when deciding on where the
    security dollars should be spent, and decisions made while under time and budget
    constraints can sometime lead to unintentional mistakes that have a profound impact
    on the entire security posture of the environment. A penetration tester must be
    able to imitate the types of attacks that the client will be likely to face in
    the wild, and provide accurate information about how the vulnerabilities that
    are found can be mitigated. At times these applications will even allow an attacker
    to easily bypass all of the security controls in place. Not only will the business
    be at risk of losing critical information, but all funds spent on securing the
    other aspects of the architecture will have been completely wasted.
  prefs: []
  type: TYPE_NORMAL
- en: As with the other chapters we begin by quickly reviewing the basics of our chosen
    tools and then moving on to some of the more interesting techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Practice makes perfect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Penetration testing requires the use of skills that take time and practice to
    perfect. To encourage the absorption of the material within this chapter we will
    be adding a load balanced instance of an intentionally vulnerable Linux distribution
    to our lab. We will also use our Ubuntu virtual machine to host Mutillidae 2.1.7
    (provided to the community at [http://www.irongeek.com)](http://www.irongeek.com)),
    which is a web-based application with intentional security flaws which we will
    then exploit.
  prefs: []
  type: TYPE_NORMAL
- en: If you have worked your way through the chapters of this book you will already
    be familiar with Kioptrix Level 1\. We now move on to a more advanced Kioptrix
    distribution that has been made available to the community by Steven McElrea (aka
    loneferret) and Richard Dinelle (aka haken29a ) of the [www.kioptrix.com](http://www.kioptrix.com)
    team.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to follow along with the examples in this chapter the virtual lab
    will need to be configured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**BackTrack Linux:** Connected to internal network `VLAN1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kioptrix VM Level 3:** Connected to internal network `VLAN1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kioptrix VM Level 3 Clone:** Connected to internal network `VLAN1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ubuntu_TestMachine_1** with Mutillidae installed: Connected to `VLAN1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PFSense VM:** Connected to internal network `VLAN1`. This will provide our
    load balancing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will walk through the installation of Kioptrix 3, creating a VM clone, installing
    Mutillidae on Ubuntu, and preparing PfSense for our current needs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The VLAN1 network connection can be created by simply choosing internal network
    in the network settings of your Oracle VM manager for each guest machine. PfSense
    will be used to provide a DHCP server for the guest machine IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please review the abstract network diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Practice makes perfect](img/7744_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing Kioptrix Level 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most effective means of learning is by getting hands-on practice.
    Kioptrix Level 3 which has been made freely available to the community by loneferret
    (Steven McElrea) and haken29a (Richard Dinelle) is intended to provide a basic
    platform that can be used to gain this experience. This particular distribution
    provides us with a platform that contains several web application security flaws
    that we will exploit to explore the various methods of hands-on web application
    exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Head over to the [http://www.kioptrix.com](http://www.kioptrix.com) website,
    chose your language of choice and then click on the **Kioptrix VM Level 1.2**
    link to the right of the page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Kioptrix Level 3](img/7744_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need to extract the files to a location of choice. At this point this
    procedure should be familiar. Open up Oracle VirtualBox and create a new guest
    machine using the settings defined below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: Kioptrix VM Level 3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OS Type: Other Linux'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Memory: 256'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Startup Disk: Kioptrix Level 3.vmdk (Normal, 3.00 GB)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use the existing Kioptrix machine you will need to select: **Use existing
    hard disk** option as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Kioptrix Level 3](img/7744_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will need to add the new Kioptrix system to your virtual network in the
    **Network Settings** portion of Oracle VirtualBox to ensure that the system is
    sharing the same restricted network as the BackTrack guest machine. Both should
    be set to use `VLAN1`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If experiencing errors upon booting the Kioptrix Level 3 Virtual machine, edit
    the **Virtual Machine** settings and enable IO APIC setting in **System - Motherboards**.
    PAE/NX under processor settings may also need to be enabled.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Kioptrix Level 3](img/7744_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Kioptrix Level 3 can be tackled using various means because this distribution
    is designed to assist beginners in learning penetration testing concepts. We are
    able to focus on the methodologies used to exploit the machine rather than wasting
    time trying to break through the security mechanisms designed to mislead or confuse
    an attacker that you may run into during a real penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Kioptrix VM Level 3 clone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using a virtual load balancer to ensure that we are accurately emulating
    the types of technologies that are most likely to be found in secured environments.
    To this aim, we will need to create another instance of the Kioptrix VM. You could
    easily follow the steps previously outlined to accomplish this task, or you could
    take advantage of the cloning feature included with Oracle's VirtualBox Manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'To clone virtual guest machines perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Oracle VM VirtualBox Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, power down the machine that is to be cloned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the Kioptrix VM Level 3 guest machine and choose the **Clone**
    option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Reinitialize the MAC address of all network cards** option.![Creating
    a Kioptrix VM Level 3 clone](img/7744_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Full Clone** radial button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Clone** to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By choosing to reinitialize the MAC addresses of all systems we ensure that
    network conflicts are avoided in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '**After the complete lab setup has been completed please note the following:**'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to add the IP information of the target machine (which uses DHCP)
    to your BackTrack tester 1 instance. Allow the target machine (Kioptrix) to boot
    up and obtain an IP address. Perform a quick scan of your virtual network to find
    the assigned IP address of the Kioptrix instance and add it to your host file
    in BackTrack.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Mutillidae 2.1.7 on the Ubuntu virtual machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mutillidae is a collection of scripts created by Adrian "Irongeek" Crenshaw
    and Jeremy Druin that are intentionally vulnerable to the OWASP top 10\. Detailed
    information about the release can be found at: [http://www.irongeek.com/i.php?page=mutillidae/mutillidae-deliberately-vulnerable-php-owasp-top-10](http://www.irongeek.com/i.php?page=mutillidae/mutillidae-deliberately-vulnerable-php-owasp-top-10).'
  prefs: []
  type: TYPE_NORMAL
- en: We will be using these scripts to practice some of the techniques that you should
    become familiar with in order to take on the challenge of performing penetration
    testing on a secured environment.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also take advantage of the hints that Mutillidae has included in each
    level of the distribution to gain confidence in web application testing if you
    need the practice.
  prefs: []
  type: TYPE_NORMAL
- en: As we had previously mentioned, web applications make a very fine target and
    are often found to be unsecured due to an assortment of reasons including unplanned
    software updates, a general lack of good coding practices, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: To begin we will need to configure your **Ubuntu_TestMachine_1** to use two
    network adapters, one for NAT and one for Internal Network VLAN1\. This process
    should be familiar by now, so we will forego reviewing the steps required to perform
    this task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Boot up the **Ubuntu_TestMachine_1** and verify connectivity to the Internet.
    This would be the perfect time to grab any software updates that are needed as
    well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Head over to: [http://www.irongeek.com/i.php?page=mutillidae/mutillidae-deliberately-vulnerable-php-owasp-top-10](http://www.irongeek.com/i.php?page=mutillidae/mutillidae-deliberately-vulnerable-php-owasp-top-10)
    and download a copy of Mutillidae 2.1.7 from Adrian Crenshaw''s (Irongeek) website.
    The Mutillidae developers have worked hard to provide the community with an effective
    distribution to test our skills against the OWASP top 10.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [www.irongeek.com](http://www.irongeek.com) website is full of fantastic
    information; I highly recommend that you take the time to review some of the penetration
    testing information IronGeek has either collected or created, and made available
    to the community!
  prefs: []
  type: TYPE_NORMAL
- en: Open up a console window and change directory to `Downloads/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Unzip the `mutillidae-2.1.7.zip` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the `mutillidae` folder to the `/var/www` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to configure the database connection so that mutillidae functions
    properly. We need to change the `config.inc` file to reflect that we have a MySQL
    password for root. Replace `1EasyPassword` with your MySQL root password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Do you remember the MySQL root password you used in [Chapter 3](ch03.html "Chapter 3. Enumeration:
    Choosing Your Targets Wisely"), *Enumeration: Choosing Your Targets Wisely?* If
    not, then you can probably identify with the reason that so many passwords are
    reused by administrators out in the real world! Proper password management is
    critical in large environments with many machines. There are tools available that
    can be used to provide one time use passwords as well as other mechanisms that
    improve authentication methodologies.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Use *CTRL + O* and *Enter* followed by *CTRL + X* to save the file and return
    to the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the Firefox browser in Ubuntu and browse to `http://localhost/mutillidae`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Setup/Reset the DB** link in the top navigation bar.![Installing
    and configuring Mutillidae 2.1.7 on the Ubuntu virtual machine](img/7744_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it! Now we need to reboot the machine and **disable the NAT connection**
    so that it is not accessible via the Internet. These pages should **NOT** be made
    available to malicious users on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring pfSense
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pfSense is a freely available implementation of a virtual firewall and router
    that is based on FreeBSD. Extremely configurable, it is the ideal choice for various
    applications including setting up a virtual lab to practice penetration testing.
    pfSense provides far more than simple firewalling. Being that it is easy to install
    and configure, makes pfSense ideal for our purposes; after all, right now we are
    trying to keep things simple so that we can focus on the important aspects of
    penetration testing rather than lengthy discussions on proper configuration of
    complicated virtual routers and switches.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the virtual machine for pfSense
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'pfSense must be downloaded and installed as a virtual guest machine. Please
    download the distribution before moving to the next step. A link to the pfSense
    download mirrors is located at: [http://www.pfsense.org/mirror.php?section=downloads](http://www.pfsense.org/mirror.php?section=downloads).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a mirror near your physical location to improve the download speed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the appropriate distribution to a location of your choosing. We will
    be using `pfSense-2.0-RELEASE-i386.iso.gz` for the examples in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Validate the MD5 of the download and then unzip it to a location of choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up **Oracle VM VirtualBox Manager** and select the **New** icon and click
    on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type pfSense VLAN1 and use the drop-down menus to select **BSD** as the **Operating
    System** and **FreeBSD** as the **Version**, and then click on **Next**.![Preparing
    the virtual machine for pfSense](img/7744_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose 256 MB of RAM if you have the system resources available. The minimum
    requirements suggest that you use at least 128 MB. Click on **Next** when ready
    to move on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to install pfSense we will need to create a new hard disk. We will
    be using 6 GB for our installation. This setting can be as low as 2 GB and still
    be effective, but you will be limited in expanding the features that pfSense provides.
    Click on **Next** after selecting the **Create new hard disk** radial option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **VDI (Virtual Disk Image)** and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose: **Dynamically allocated** for the virtual disk file and click on **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If disk space is not tight on your machine chose at least **6 GB**. This will
    be dynamically allocated in chunks of 2 GB, but it is much easier to set a larger
    size now than to change it later. Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that your settings are similar to the following and click on the **Create**
    button to finalize the creation of the pfSense virtual machine.![Preparing the
    virtual machine for pfSense](img/7744_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the pfSense VLAN1 instance and chose **Settings**. We need to enable
    two network devices for this virtual machine. Assign Network Adapter 1 to internal
    networks **WLAN1** and Network Adapter 2 to **VLAN1**. You may have to type in
    the internal network name manually if it has not been used before. Select the
    **PCNet-PCI II** adapter from the drop-down menu on both interfaces (under the
    **Advanced** menu) to avoid network issues related to FreeBSD and VirtualBox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Allow VMs** from the **Promiscuous Mode** drop-down menu before clicking
    on **OK** and closing the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **PFSense VLAN1** in the Oracle VM VirtualBox manager and click on the
    **Start** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next** at the **First Run Wizard** screen that pops up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the icon to the right of the screen, browse to where you have downloaded
    and extracted `PFSense.iso`, select it and click on **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: pfSense virtual machine persistence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we do not want to manually reconfigure the pfSense virtual machine every
    time that it is loaded up, we need to perform a full installation onto our dedicated
    virtual hard drive. The following steps will walk you through the necessary process:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Start** which will begin the boot up sequence of the pfSense virtual
    machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *1* to continue with the boot up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press *I* to proceed with installation. Use the following settings in sequence
    where appropriate when prompted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept these Settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick/Easy Install
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symmetric multiprocessing kernel (more than one processor)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reboot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid the installation media from booting up at the next reboot the installation
    media may need to be 'ejected' by selecting the **Devices | CD/DVD Devices** and
    un-checking `pfsense.iso` in the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Once the system reboots the system will query if you would like to set up the
    VLANs now. Type *y* and press *Enter* to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Enter the parent interface name for the new VLAN** prompt type `le0`
    and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type *1* at the **Enter the VLAN tag**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Enter the parent interface name for the new VLAN** prompt type `le1`
    and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type *2* at the **Enter the VLAN tag**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the **Enter the WAN interface** prompt type the **WLAN1** interface. You
    can look at the settings in the VirtualBox to find out which network adapter MAC
    address is the WLAN adapter. As an example, we will use: `le0` and press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Enter* and select the appropriate adapter for LAN as well (choose the
    VLAN1 adapter, `le1` in my case).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To continue press *Enter* and then *y*, when prompted to continue.![pfSense
    virtual machine persistence](img/7744_05_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Congratulations, your lab setup is almost complete! There are a few additional
    settings that will need to be configured before we can get started on the more
    interesting portions of this chapter. At this point you should be looking at a
    screen similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![pfSense virtual machine persistence](img/7744_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the pfSense DHCP server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can begin we need to set up the built-in DHCP server so that our other
    machines can pick up addresses on the VLAN1 interface without having to be manually
    configured. Using the pfSense to manage the DHCP connections provides us with
    more control than if we simply use the built-in functionality that VirtualBox
    provides.
  prefs: []
  type: TYPE_NORMAL
- en: From the pfSense console select **2) Set interface(s) IP address**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Enter the number of the interface you wish to configure:** prompt we
    need to type *2* to choose the LAN interface and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following IP address when prompted: `192.168.75.1` and press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Enter the new LAN IPv4 subnet bit count** prompt type `24` and press
    *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type *y* at the prompt when asked if you would like to enable the DHCP server
    on LAN. Press *Enter* to continue.![Configuring the pfSense DHCP server](img/7744_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When asked to provide the starting address range type: `192.168.75.10` and
    press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be asked to select the ending DHCP range. Type `192.168.75.50` and
    press *Enter*.![Configuring the pfSense DHCP server](img/7744_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starting the virtual lab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The systems should be booted in the following order every time that you load
    up your testing network:'
  prefs: []
  type: TYPE_NORMAL
- en: pfSense VLAN1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: BackTrack
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kioptrix VM Level 3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kioptrix VM Level 3 Clone
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ubuntu_TestMachine_1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that in BackTrack or Ubuntu you can use the `dhclient` command-line
    command at any time to release and renew the IP addresses. Check the addresses
    using `ifconfig` afterwards to ensure that the DHCP server is working properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are experiencing issues with the machine picking up IPs from the wrong
    DHCP server you will also need to turn off the VirtualBox DHCP server we enabled
    in previous chapters. Detailed instructions of the more advanced features of VirtualBox
    can be found on the Internet at: [http://www.virtualbox.org/manual/ch08.html](http://www.virtualbox.org/manual/ch08.html).'
  prefs: []
  type: TYPE_NORMAL
- en: pfSense DHCP — Permanent reservations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can now log in to the web console of our virtual pfSense firewall to set
    up static IPs for the two Kioptrix machines.
  prefs: []
  type: TYPE_NORMAL
- en: Open up the Firefox web browser that comes preinstalled in BackTrack and head
    over to `http://192.168.75.1` which is the web console interface for the pfSense
    virtual machine. If everything is configured properly you will be asked for your
    username and password.
  prefs: []
  type: TYPE_NORMAL
- en: '**Username:**`admin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password:**`pfsense`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you followed standard best practice when setting up your machine you have
    probably already changed the default password for the pfSense instance. If this
    is the case, use that instead of the default and kudos for being proactive!
  prefs: []
  type: TYPE_NORMAL
- en: The pfSense dashboard provides a significant amount of data. For now we are
    focused only on setting up the load balancing. Follow these steps to allow pfSense
    to load balance the web application for the two Kioptrix guest machines.
  prefs: []
  type: TYPE_NORMAL
- en: First we need to know which MAC addresses belong to each Kioptrix machine so
    that we can set up static leases. This can be accomplished by checking the VirtualBox
    Manager settings for each box and looking at the **Network Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pfSense web console click on **Status | DHCP Leases** for a listing of
    current leases. Match the IP up to the MAC address for each Kioptrix machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up static IP address assignments for both machines by using the button to
    the right of the entry to open the static assignment window.![pfSense DHCP — Permanent
    reservations](img/7744_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Services: DHCP: Edit static mapping** window you will need to type
    in an IP address that is outside of the DHCP range. This will ensure that each
    time the machine connects it receives the same IP address. Type `192.168.75.102`
    in the IP address field.![pfSense DHCP — Permanent reservations](img/7744_05_14.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Kioptrix2** in the **Hostname**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a description of your choice. This will be stored in the DHCP settings
    so that they can be reviewed in the future.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a penetration tester it is of note that sometimes administrators will enter
    very good notes into their DHCP listings. This makes it easy to find valuable
    machines on the network if you happen to take over a system that acts as a DHCP
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save** to complete the task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the settings. Scroll down to view the static DHCP addresses. This list
    includes information about all of your assigned IP addresses.![pfSense DHCP —
    Permanent reservations](img/7744_05_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing HAProxy for load balancing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To practice detecting load balancers we will need to set one up in our virtual
    lab. We can use our existing Ubuntu machine for this task.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If experiencing difficulties when running HAProxy be sure to verify that you
    have turned off your Apache install from previous chapters. If the port is already
    bound by Apache or anything else, you will be unable to set up load balancing
    on the same port.
  prefs: []
  type: TYPE_NORMAL
- en: Enable the NAT setting on your Ubuntu virtual machine and boot it up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable **Network Adapter 2** on your virtual machine. Ensure that it is using
    VLAN1\. Set up a static DHCP lease for your Ubuntu machine. Use `192.168.75.200`
    as the IP address. Refresh your IP address information using `dhclient` in the
    console. Verify that you are now using `192.168.75.200` on one of your adapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Applications | Ubuntu Software Center** in the top-left navigation
    bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `HAProxy` in the search field in the top-left of the **Ubuntu Software
    Center** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Install** button and enter your password at the prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you experience errors in regards to untrusted packages you can run `apt-get
    update` and `apt-get upgrade` to continue with the installation.
  prefs: []
  type: TYPE_NORMAL
- en: We need to edit the configuration file to set up a load balancer for our two
    Kioptrix machines. Open up a terminal session and edit the `/etc/haproxy/haproxy.cfg`
    file. Remember to escalate privilege with `sudo` for write access. Remove all
    other `.cfg` files from this directory afterwards.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Your file should match the following before saving and exiting:![Installing
    HAProxy for load balancing](img/7744_05_16.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our Ubuntu machine already has a web server running so we must disable it for
    this exercise to work properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It is time to start up the load balancer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If everything is configured properly you will find that you can now browse to
    your Kioptrix machines using the IP address `192.168.75.200`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Kioptrix3.com to the host file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add `Kioptrix3.com` to our hosts file on BackTrack and try our luck
    at detecting which machine is being accessed. In your BackTrack terminal, change
    directory to `/etc`, open up the `hosts` file in an editor of your choice and
    add the following to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Verify connectivity by pinging `kioptrix3.com:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Detecting load balancers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When performing a penetration test there is the possibility that vulnerabilities
    left open on one server are not available on another. Proper load balancing will
    be almost completely transparent which could easily lead to miscommunication of
    the testing results if you find any server issues on a server that is part of
    a pool.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are focusing on HTTP load balancing for these exercises. Detecting DNS load
    balancing can be done by using your enumeration tools described in a previous
    chapter. For instance, you could use dig to see if multiple servers are returned
    for the same domain name.
  prefs: []
  type: TYPE_NORMAL
- en: Quick reality check — Load Balance Detector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BackTrack 5 includes a script named Load Balance Detector (lbd.sh) that will
    quickly test for load balancing. Running this tool against our current balanced
    `Kioptrix3.com` server will provide you with input that the server is not load
    balanced because the tool never gets a chance to see the other server.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you edit your HAProxy configuration on the Ubuntu machine to use
    a round robin balance type (balance `roundrobin)` and reboot, the following command
    will find your balancer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Become familiar with the various types of load balancing that can be implemented
    so that it becomes easier to detect exactly what the network really looks like.
  prefs: []
  type: TYPE_NORMAL
- en: So, what are we looking for anyhow?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A site can be hosted by many different servers with varying degrees of security.
    Sometimes it only takes one of these servers to finish the job and penetration
    testers need to ensure that nothing is overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: 'As highlighted in the preceding example, it is not always possible to determine
    if a site is balanced or not. `lbd.sh` has provided us with an interesting fact:
    it was able to determine the site was being balanced by reviewing the `HTTP[Date]`
    method. Small changes between the servers being accessed are the key to making
    an accurate determination.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just a simple scan between two systems that are being load balanced will reinforce
    that ALL systems need to be enumerated and tested, not just a few.
  prefs: []
  type: TYPE_NORMAL
- en: 'When running an nmap scan against the servers in our balanced pool we see the
    following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This information is expected. But how does it compare against the other Kioptrix
    machine?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that many of the findings are identical as expected, but here there
    is one minor difference to look for: the MAC address of `192.168.75.102` is different
    than that of `192.168.75.101`. If these systems were not identical clones of one
    another then there is a possibility that other differences would be visible as
    well. These are the little differences we will need to seek out.'
  prefs: []
  type: TYPE_NORMAL
- en: Our web application is hosted by the Kioptrix machines, but is being balanced
    by our Ubuntu machine. This would typically be a virtual IP address used strictly
    to provide access to the two production machines that host our application, possibly
    in a tiered DMZ. Of course, if the app developers or administrators left holes
    in one of the servers or the application, we will quickly be able to bypass any
    such security measures and go directly to where the critical infrastructure and
    data lies.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HTTP response headers can provide information that highlights load balancers
    as well. Using tools that allow you to look at these headers you can determine
    if there are these types of differences that indicate more than one machine serving
    the same web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting Web Application Firewalls (WAF)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to understand if there is also an inline web application firewall that
    we should be aware of. BackTrack addresses this need by providing WAFW00F, a tool
    that will attempt to detect most commonly used web application firewalls. This
    script was created by Sandro Gauci and Wendel G. Henrique and it can be downloaded
    from the project site download section at [http://code.google.com/p/waffit/](http://code.google.com/p/waffit/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Invoke the command from your BackTrack terminal using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As with most tools provided by hard working developers there is an example
    of the syntax when running `wafw00f.py` without any input variables. We will follow
    the usage example syntax provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The highlighted response indicates that no WAF was located. This should make
    our job of penetrating the Kioptrix machine easier. Now what should we expect
    to see if there is actually a web application firewall in place? Here are the
    results against such a configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As you can see this information clearly defines both the fact that the site
    is being protected, and in this case that it is using ModSecurity (which it really
    is). We would keep this fact in mind when performing our tests and try to use
    techniques that are known to work when testing against sites using this particular
    software. These tactics change over time and thus, you should try to emulate the
    environment you are testing before trying out the exploits on the production network.
  prefs: []
  type: TYPE_NORMAL
- en: Taking on Level 3 — Kioptrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of the techniques we want to cover in this chapter can be explored by taking
    on the challenge that the Kioptrix has made available for us. Let's take a look
    at the steps necessary to gain root on the Kioptrix machine.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open up BackTrack take a look at the web application at `Kioptrix3.com`. Browse
    around and review the source of the pages. There are some interesting notes and
    Easter eggs left out for us before even starting. Have fun with it!
  prefs: []
  type: TYPE_NORMAL
- en: In general we would begin by scanning the server that hosts the web application.
    This infrastructure testing gives us a lot of information that comes in handy
    when trying to perform certain web application vulnerabilities. In this case,
    we know from using our Load Balance Detector that there is some load balancing
    going on. We also know that the servers are very similar to one another and are
    not leaving any clues as to what their real IP is. Our next step is to check if
    there are any noticeable web application firewalls we need to be aware of. If
    there are, we may need to use certain evasion techniques to bypass these restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: In the real world, these systems are more than likely not even directly accessible
    due to firewall restrictions and network segmentation practices. Our goal is to
    be able to take over one of these servers and then pivot from that server onto
    the other one to take it out as well. After all, if the systems are completely
    identical all we have to do is get the credentials for one and we can take over
    all copies with said credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Web Application Attack and Audit Framework (w3af)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This incredible framework automates many of the tasks that had previously been
    done manually. Fully extensible and open source w3af uses a myriad of plugins
    to provide a fully customizable testing experience. The authors of the tool created
    it to be very user friendly for those new at testing, as well as those who are
    expert penetration testers. If the plugin you need is not already available, then
    simply create it yourself and save tons of time on all future tests. w3af is constantly
    updated and improved. The plugin types that w3af includes cover discovery, brute
    forcing, auditing, and even evasion. The framework also includes auto update features
    to ensure that you always have the latest and greatest installed and ready to
    run. Learn more about this tool at [w3af.sourceforge.net](http://w3af.sourceforge.net).
  prefs: []
  type: TYPE_NORMAL
- en: 'As expected, the BackTrack development team has preinstalled w3af. Open up
    your BackTrack virtual machine and select: **Applications | BackTrack | Vulnerability
    Assessment | Web Application Assessment | Web Vulnerability Scanners | w3af gui**
    to start the graphical user interface. If your BackTrack system is connected to
    the Internet you will be able to update the plugins to the latest version when
    prompted.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not choose to update w3af from within BackTrack. When updating w3af on BackTrack
    5 r1 w3af no longer works. There are several steps that can be taken to install
    and configure the new dependencies, but this is outside the scope of this example.
  prefs: []
  type: TYPE_NORMAL
- en: '![Web Application Attack and Audit Framework (w3af)](img/7744_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Typically, you would want to perform a very selective attack, especially if
    you are trying to test the detection capabilities of the client's administrators
    and security team.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to stop Apache and start HAproxy on the Ubuntu machine before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: In this case we will simply start with performing a **web_infrastructure** scan
    and see what information we can find on `Kioptrix3.com (192.168.75.200)`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Web Application Attack and Audit Framework (w3af)](img/7744_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Seems that w3af was able to detect that this site is being load balanced. On
    closer inspection you will notice that the reverse proxy can be utilized to prevent
    known issues from being exploited. Be sure to actually test the exploits (if it
    is covered in your Rules of Engagement), especially when you see that there may
    be a web application firewall or other mitigating control in place. The business
    will want to be assured that their expenditure on these devices or servers has
    either paid off, or that they are not working as intended.
  prefs: []
  type: TYPE_NORMAL
- en: Using w3af GUI to save time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will run a fast scan to determine what we can find. This will take a
    while so be sure to allot the time necessary to allow the test to finish.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is advisable to begin with smaller scans that provide you with information
    that can be used immediately and then follow up with more thorough scans that
    can take hours and even days. Penetration testing is generally (unfortunately)
    limited by a predetermined timeframe.
  prefs: []
  type: TYPE_NORMAL
- en: While testing is in progress, you can look at the logs as they are updated under
    the **Log** tab. At times it may even be efficient to review the logs during the
    scan so that you are ready to take action once the results are received.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review some of the findings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using w3af GUI to save time](img/7744_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The scan found instances of path disclosure, application errors, and that the
    server allows directory indexing. This information is useful to determine the
    next step.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning by using the w3af console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many of us like to stay within console sections rather than using GUIs. With
    this in mind, we will run another scan and see if we find something more interesting
    than simple directory indexing and patch disclosure misconfigurations. This time
    we will use the console instead of the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not choose to update w3af from within BackTrack. When updating w3af on BackTrack
    5 r1 w3af no longer works. There are several steps that can be taken to install
    and configure the new dependencies, but this is outside the scope of this example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![Scanning by using the w3af console](img/7744_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can perform all of the critical functions available in w3af from within
    the w3af command console. The help command details options available. Let's begin
    the scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin by setting our targeted host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: From within the target menu we are able to set the target to `http://kioptrix3.com:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: View will allow us to verify our configuration. If you take a look at the screenshot
    you can determine that the target was set up incorrectly. Using set target again
    with the appropriate setting will correct any issues you find.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The back command will take you back to the last screen. Typing exit would exit
    from the w3af console which we do not want to do.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scanning by using the w3af console](img/7744_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We can review the installed plugins by typing plugins into the console. This
    is very useful when determining which specific items you would like to run. You
    can also get information about each of the plugins from within this menu.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Use the help command from anywhere within the console if more information is
    needed, or you simply need to refresh your memory of where everything is.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The profiles section is key to understanding what will be scanned. Just as with
    the GUI the profile determines which plugins will be run when you start the scan.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: To ensure that we are running the proper profiles we check for available commands
    to find one that will provide us the information we require. If you know certain
    information about the site already, time can be saved by creating a custom profile
    to match the configuration you are scanning. For example, there is no point in
    scanning for IIS vulnerabilities on a server that is not using IIS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Here we are provided with a listing of preconfigured profiles that are available.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scanning by using the w3af console](img/7744_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The use command allows us to specify which profile we would like to use during
    the scan.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We move back to the w3af default section and prepare to start the configured
    scan.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Output will allow you to set up the output types such as XML, text files, or
    even HTML. We enable the `htmlFile` output using the default settings (outputs
    to `report.html)` and keep console enabled as well for now.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This enables the HTML output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: As you have probably suspected, typing `start` will initiate our scan using
    the settings we have just configured. If there are errors, use the commands we
    just reviewed to examine and correct them. Remember to use help or back whenever
    you are stuck and do not know how to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the scan is finished you will be back at the w3af prompt. Looking at the
    results we find that there are still no distinct findings that could be used to
    quickly and easily take over the machine or gain a remote shell. Here we have
    browsed to the `report.html` location in Firefox to display the default HTML reporting
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scanning by using the w3af console](img/7744_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to move on and make some minor modifications to our plugin selection
    to get to the juicy vulnerabilities. Plugins can be disabled, viewed, or enabled
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: We can review which of the plugins are enabled by typing the category such as
    `audit`. Here we discern which audit plugins were enabled when we used the `audit_high_risk`
    profile.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This command provides the following console output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scanning by using the w3af console](img/7744_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Some really important plugins were not enabled. We need to enable `localFileInclude`
    and `xss` and `rescan`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Verify that all settings are accurate; set the target again if you experience
    an error and start the scan back up again. After the scan has completed take a
    look at the findings. You should notice that local file inclusion vulnerability
    has been detected. We have also detected many unidentified we application errors
    at [http://kioptrix3.com/gallery](http://kioptrix3.com/gallery). We could either
    go back into our scanner and enable all plugins and try again, or we can take
    a manual look at the suspicious URL.
  prefs: []
  type: TYPE_NORMAL
- en: Using WebScarab as a HTTP proxy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is beneficial to have a web proxy enabled and logging all manual penetration
    testing activity. After all, you will need to be able to replicate your steps
    as well as write reports that indicate the steps taken during testing. WebScarab
    can be found in BackTrack by choosing **Applications | BackTrack | Vulnerability
    Assessment | Web Application Assessment | Web Vulnerability Scanners | WebScarab**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WebScarab will initially use the WebScarab Lite interface. This can be changed
    by using the **Tools** drop down and selecting **Use Full Interface** and restarting
    the tool.
  prefs: []
  type: TYPE_NORMAL
- en: WebScarab is a HTTP proxy provided by the OWASP team that will assist in analyzing
    your HTTP traffic. We will need to point our browser to use the proxy once it
    has been started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Load up Firefox, choose **Edit | Preferences | Options | Advanced Tab | Network
    Tab** and click on the **Settings** button. Select the **Manual proxy configuration:**
    radial button and configure the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTP Proxy:** localhost | Port: 8008.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSL Proxy:** localhost | Port: 8008.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No Proxy for:** DELETE ENTRIES HERE. Blank.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The default listener should be able to pick up your session. Now in your browser
    head over to [http://kioptrix3.com](http://kioptrix3.com). If everything is working
    properly and you receive no errors, head over to [http://kioptrix3.com/gallery/](http://kioptrix3.com/gallery/)
    and click back over to WebScarab and choose the **Summary** tab to review our
    proxy results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using WebScarab as a HTTP proxy](img/7744_05_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'One thing instantly confirms the problem with unknown application error issues
    that w3af ran into. The URL [http://kioptrix3.com/gallery/](http://kioptrix3.com/gallery/)
    is already is returning a 500 Application Error before a SQL injection attack
    is even attempted. Automated scanners have a difficult time with abnormal behavior
    and thus, we must investigate further on our own. If this concept is confusing
    at this time, try the following to confirm our suspicions are correct. Open up
    a new BackTrack terminal session and invoke netcat:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'When the connection is made enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We are pulling the data directly that gives us the most control over the information.
    When in doubt, use netcat! The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted section confirms that the application immediately returns an
    error code AND the requested page.
  prefs: []
  type: TYPE_NORMAL
- en: It is time to use WebScarab to intercept our messages to see exactly what we
    are dealing with. In WebScarab open up the **Proxy** tab, click on the **Manual
    Edit** tab and check the **Intercept responses** box. By intercepting the responses
    we are able to review the packages to see if there is anything interesting being
    passed to the server. We can also change any variables or hidden fields now if
    we want to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are intercepting go back to your browser screen and reload the
    [http://kioptrix3.com/gallery/](http://kioptrix3.com/gallery/) page. You will
    be presented with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using WebScarab as a HTTP proxy](img/7744_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The data that was intercepted will include the response returned in both a parsed
    and raw format. It is critical that you understand what normal responses should
    look like. These are the clues that will enable you to excel at finding vulnerabilities
    in the web applications. In this case we can see once again that the server responds
    with a 500 Internal Server Error in its header. When looking at the raw source
    we also see that there are some references to something called Gallarific. As
    with any piece of software, you should perform a quick lookup for known vulnerabilities
    when you are able to determine what is running.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Remember the process: Find out what is running, determine if it is set up correctly
    and/or if there are known vulnerabilities, then test.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Head on over to [http://www.exploit-db.com](http://www.exploit-db.com) and
    perform a search for GALLARIFIC. The current results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using WebScarab as a HTTP proxy](img/7744_05_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have three different exploits to choose from just for this simple application.
    That does not even count the local file injection that we were able to locate
    using our automated tools. If you choose the top item in the list which is the
    **GALLARIFFIC PHP Photo Gallery** exploit, you will see that the person that submitted
    the exploit was even nice enough to include the path to the admin panel at [http://kioptrix3.com/gallery/gadmin/](http://kioptrix3.com/gallery/gadmin/),
    in case we had missed it in our previous scan results (remember seeing the notice
    about something interesting being commented out:`<!-- a href="gadmin">Admin</a>&nbsp;
    &nbsp; -->` ?).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that exploit-db is already on your BackTrack machine! If you are on
    a segmented network as you should be, there is no reason to leave to pull down
    exploit code or proof of concept instructions. You already have it on your machine!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you performed your searches for Gallarific properly you will find other
    vulnerabilities as well. Here are some associated CVE references:'
  prefs: []
  type: TYPE_NORMAL
- en: CVE-2008-1326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVE-2008-1327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVE-2008-1464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVE-2008-1469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVE-2008-6567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The OSVDB (Open Source Vulnerability Database) at [http://osvdb.org/](http://osvdb.org/)
    is also a great resource when trying to find information about software vulnerabilities.
    If you find a vulnerable software version, odds are that you will also find any
    associated proof of concept code if it exists, as the Exploit-DB team has expended
    a lot of effort in ensuring that their CVEs link up to the OSVDB.
  prefs: []
  type: TYPE_NORMAL
- en: Now looking at the exploit definition we see that there is example code provided
    as follows (credit goes to AtT4CKxT3rR0r1ST for submitting this proof of concept
    exploit code to `Exploit-DB.com):`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Turn off intercepts unless you want to acknowledge each response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, for us to use this example we need to make a few changes. For one,
    we need to correct the [www.site.com](http://www.site.com) entry. Replace this
    with `kioptrix3.com`. Then we need add our gallery sub folder so that we address
    the correct site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If you try this code you will find that it does not work as planned. We need
    to go back to our web application testing basics and determine what the problem
    is. Let's try something here and see what happens. We will simplify the query
    and see if it works.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In response we still receive the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are familiar with SQL injection you already know the problem. We are
    addressing too many columns. Now we will iterate through the column count until
    we no longer receive an error message. Try the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are seeing something that is more interesting. Our SQL injection worked!
    Next we change the proof of concept code to read as follows and give it a try:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: This command results in providing us with the username of `admin` and the password
    of `n0t7t1k4`. Use this information to log into [http://kioptrix3.com/gallery/gadmin](http://kioptrix3.com/gallery/gadmin)
    and browse around a bit. You have admin access on the application but you did
    not get root access to the machine itself yet. Now that you know you can use SQL
    injection to get anything in the database start thinking of what else you may
    be able to get to; don't forget about our file inclusion vulnerability either!
    Our journey through Kioptrix level 3 is not yet complete.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Mantra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Mantra browser provides penetration testers with a myriad of tools that
    make web application testing efficient and fun. It takes advantage of many of
    the browser-based plugins that have been written over the years and is available
    at [http://getmantra.com](http://getmantra.com). Be sure to check out some of
    the well written and detailed tutorials made available at this site as they provide
    use case examples beyond the basics. We will use the plugins within Mantra to
    fully exploit the Kioptrix 3 machine in our lab in an efficient manner. The primary
    plugin we take advantage of in this example is the Hackbar. You can learn more
    about Hackbar at [https://addons.mozilla.org/en-US/firefox/addon/hackbar/](http://https://addons.mozilla.org/en-US/firefox/addon/hackbar/).
    The Hackbar and other add-ons in Mantra make testing web applications fun and
    allow a knowledgeable penetration tester to manually verify the security of a
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will still need to understand how web application security works and how
    to manually perform these tests; Mantra just makes the process more convenient
    and efficient by providing many of the tools needed for manual testing. Use the
    Mutillidae installation to fill any gaps you have in testing for common web application
    security issues.
  prefs: []
  type: TYPE_NORMAL
- en: Our first step is to open up the Mantra browser on the BackTrack machine. Mantra
    can be found by choosing **BackTrack** | **Vulnerability Assessment** | **Vulnerability
    Scanners** | **Mantra** from the navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Mantra, browse to the web page hosted on your Kioptrix 1.2 virtual server
    using the browser's URL navigation bar ([http://kioptrix3.com](http://kioptrix3.com)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the hackbar in Mantra enter the following URL and click on the **Execute**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: You should be presented with the username `admin` and the password `n0t7t1k4`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can get other information. Enter the following
    into the hackbar: [http://kioptrix3.com/gallery/gallery.php?id=1](http://kioptrix3.com/gallery/gallery.php?id=1)
    and click on **Execute**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now place the cursor at the end of the [http://kioptrix3.com/gallery/gallery.php?id=1](http://kioptrix3.com/gallery/gallery.php?id=1)
    entry in the hackbar, add a space and then directly above the hackbar click **SQL**
    | **Union Select Statement** and enter `6` in the pop up that appears, and click
    on **OK**. Click on the hackbar **Execute** button to verify that the SQL injection
    works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now replace the number `2` in the query that was generated by highlighting
    it and clicking on **SQL | MySQL | Basic Info Column** so that your URL now looks
    like this: [http://kioptrix3.com/gallery/gallery.php?id=1 UNION SELECT 1,CONCAT_WS(CHAR(32,58,32),user(),database(),@@version),3,4,5,6](http://kioptrix3.com/gallery/gallery.php?id=1%20UNION%20SELECT%201,CONCAT_WS(CHAR(32,58,32),user(),database(),@@version),3,4,5,6).
    Click on **Execute** on the hackbar and review the results. The output should
    contain the following information: `root@localhost : gallery : 5.0.51a-3ubuntu5.4`.
    You have successfully enumerated the user, database name, and version that is
    running.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point you can use any of the typical SQL injection tricks to enumerate
    this database. Try running different commands such as [http://kioptrix3.com/gallery/gallery.php?id=1
    UNION SELECT 1,table_name,3,4,5,6 from information_schema.tables where table_schema=database()](http://kioptrix3.com/gallery/gallery.php?id=1%20UNION%20SELECT%201,table_name,3,4,5,6%20from%20information_schema.tables%20where%20table_schema=database())
    which will list all of the tables from the current database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can already access certain files on the server using commonly used SQL injection
    code such as [http://kioptrix3.com/gallery/gallery.php?id=1 UNION SELECT 1,LOAD_FILE('/etc/passwd'),3,4,5,6](http://kioptrix3.com/gallery/gallery.php?id=1%20UNION%20SELECT%201,LOAD_FILE('/etc/passwd'),3,4,5,6).
    This will list the passwd file from the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To pull the development user''s account information we can use [http://kioptrix3.com/gallery/gallery.php?id=1
    UNION SELECT 1,username,password,4,5,6 from dev_accounts](http://kioptrix3.com/gallery/gallery.php?id=1%20UNION%20SELECT%201,username,password,4,5,6%20from%20dev_accounts)
    which provides us with the information for the username `loneferret` with a password
    hash value of `5badcaf789d3d1d09794d8f021f40f0e` and the user `dreg` with a password
    hash of `0d3eccfb887aabd50f243b3f155c0f85`. We can try to crack these user passwords.
    Successfully cracking the passwords will provide you with the following credentials:
    `dreg` - `Mast3r` and `loneferret` - `starwars`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These users have fallen into the pitfall of reusing passwords. You can log onto
    the Kioptrix 1.2 machine on your lab now by opening up an SSH session from your
    BackTrack to the Kioptrix machine. Luckily, these accounts are not in the sudoers
    list. Now we need to elevate the privilege of one of the accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point you are almost at root on the Kioptrix Level 1.2 machine. Take
    your time and look around the server and try to figure out a method of escalating
    the privilege of either user.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have gained root using SSH, challenge yourself again by uploading a
    shell to the Kioptrix Level 1.2 machine using nothing but the website! There are
    several different methods of accomplishing this, if you get stuck take a look
    at one of the many walkthroughs on the Web.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have had a chance to really start building out our test environment, setting
    up tools such as Kioptrix, pfSense, Muttilidae, HAProxy, and more. Using these
    tools in our lab helps us to better understand the technology that we are testing.
    The best penetration testers have significant IT experience so that they are able
    to leverage both when testing and when explaining the concepts and mitigating
    controls to their clients.
  prefs: []
  type: TYPE_NORMAL
- en: We have also learned how to use tools such as `lbd` to determine if a system
    is being load balanced and Wafw00f to look for web application firewalls. Practice
    makes perfect, and with that in mind each and every step was defined in such a
    way that you could follow along and gain confidence with the technology, or just
    simply refresh your already significant skill set. After all, with so much to
    remember in the security field it is easy to fall out of practice.
  prefs: []
  type: TYPE_NORMAL
- en: We walked through using the w3af graphical user interface and then followed
    up with my favorite, which is the w3af console that can be scripted if you want
    to be even more efficient. Using Kioptrix 1.2 we were able to step through the
    different steps that might be taken if you were trying to penetrate a large web
    application for a client. We discussed that sometimes automated tools are just
    not sufficient to find the exploits, and thus a browser and HTTP proxy such as
    WebScarab can make the difference between a good and a bad penetration test. We
    also introduced you to Mantra which will make your web application testing more
    efficient by providing many of the plugins that have been created by the community
    to help security professionals perform their job.
  prefs: []
  type: TYPE_NORMAL
- en: One last thing that we learned is that web application testing is a complex
    and difficult art to master. If you run into problems, never give up and just
    keep trying!
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter dives into exploitation and client-side attacks. We learn about
    buffer overflows and even create our own vulnerable program. We also discuss different
    fuzzers such as BED and sfuzz. We dive into Fast-Track and how it can be used
    to set up a mass web attack. We also touch upon Antivirus avoidance and repackaging
    payloads. Best of all we discuss the Social Engineering Toolkit, which should
    be an invaluable addition to every pentester's toolbox.
  prefs: []
  type: TYPE_NORMAL
