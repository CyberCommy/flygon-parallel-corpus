- en: Simplifying RESTful Services with Popular Go Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to cover topics related to using a framework for
    simplifying building REST services. First, we will take a quick look at go-restful,
    a REST API creation framework, and then move on to a framework called `Gin`. We
    will try to build a Metro Rail API in this chapter. The frameworks we are about
    to discuss are fully-fledged web frameworks which can also be used to create REST
    APIs in a short time. We will talk a lot about resources and REST verbs in this
    chapter. We will try to integrate a small database called `Sqlite3` with our API.
    Finally, we will inspect `Revel.go` and see how to prototype our REST API with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, the topics we will cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use SQLite3 in Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a REST API with the go-restful package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Gin framework for creating a REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Revel.go for creating a REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basics for building CRUD operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can get the code samples for this chapter from [https://github.com/narenaryan/gorestful/tree/master/chapter4](https://github.com/narenaryan/gorestful/tree/master/chapter4).
    This chapter's examples are in the form of a project instead of single programs.
    So, copy the respective directory to your `GOPATH` to run the code samples properly.
  prefs: []
  type: TYPE_NORMAL
- en: go-restful, a framework for REST API creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`go-restful` is a package for building REST-style web services in Go. REST,
    as we discussed in the preceding section, asks developers to follow a set of design
    protocols. We have already discussed how the REST verbs should be defined and
    what they do to the resources.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `go-restful`, we can separate the logic for API handlers and attach REST
    verbs. The benefit of this is that it clearly tells us by looking at the code
    what API we are creating. Before jumping into an example, we need to install a
    database called SQLite3 for our REST API with `go-restful`. The installation steps
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu, run this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On OS X, you can use the `brew` command to install SQLite3:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, install the `go-restful` package with the following `get` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We are ready to go. First, let us write a simple program showing what `go-restful`
    can do in a few lines of code. Let us create a simple ping server that echoes
    the server time back to the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run this program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The server will be running on port `8000` of localhost. So, we can either make
    a curl request or use a browser to see the `GET` request output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding program, we imported the `go-restful` library and we created
    a new service using a new instance of the `restful.WebService`struct. Next, we
    can create a REST verb using the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can attach a function handler to execute this verb; `pingTime` is one such
    function. These chained functions are passed to a `Route`function to create a
    router. Then comes the following important statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This registers the newly created `webservice` with the `go-restful`. If you
    observe, we are not passing any `ServeMux` objects to the `http.ListenServe` function;
    `go-restful` will take care of it. The main concept here is to use the resource-based
    REST API creation in `go-restful`. Going from the basic example, let us build
    something practical.
  prefs: []
  type: TYPE_NORMAL
- en: Take a scenario where your city is getting a new Metro Rail and you need to
    develop a REST API for other developers to consume and create an app accordingly.
    We will create one such API in this chapter and use various frameworks to show
    the implementation. Before that, for **Create, Read, Update, Delete** (**CRUD**)
    operations, we should know how to query or insert them into the SQLite DB with
    Go code.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD operations and SQLite3 basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All SQLite3 operations are going to be done using a library called `go-sqlite3`.We
    can install that package using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The special thing about this library is that it uses the internal `sql` package
    of Go. We usually import `database/sql` and use `sql` to execute database queries
    on the database (here, SQLite3):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can create a database driver and then execute the SQL commands on it
    using a method called `Query`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sqliteFundamentals.go`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This program explains how we can perform CRUD operations on a SQL database.
    Currently, the database is SQLite3\. Let us run this using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output looks like the following, printing all the log statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This program runs on Windows and Linux without any problem. In Go versions less
    than 1.8.1, you may see problems on macOS X such as *Signal Killed*.This is because
    of the Xcode version; please keep this in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Coming to the program, we are first importing `database/sql` and `go-sqlite3`.
    Then, we are opening a `db` file on the filesystem using the `sql.Open()`function.
    It takes two arguments, type of database and filename. It returns an error if
    something goes wrong, or else, a database driver. In the `sql` library, in order
    to escape the SQL injection vulnerability, the package provides a function called `Prepare`on
    the database driver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding statement just creates a statement without filling in any details.
    Actual data passed to the SQL query uses an `Exec` function in the statement.
    For example, in the preceding code snippet we used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you pass incorrect values, such as strings that cause SQL injection, the
    driver rejects the SQL operation instantly. For getting data back from the database,
    use the `Query`method. It returns an iterator that returns all the rows for the
    matched query using the `Next`method. We should use that iterator in a loop to
    process, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: What if we need to pass criteria to the `SELECT`statement? Then, you should
    prepare a statement and then pass wildcard(?) data to it.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Metro Rail API with go-restful
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us use the knowledge we gained in the previous section and create an API
    for the City Metro Rail project we talked about in the preceding section. The
    roadmap is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Design a REST API document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create models for a database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the API logic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design specification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before creating any API, we should know what the specifications of APIs are
    in the form of a document. We showed a few examples in the previous chapters,
    including the URL shortener API design document. Let us try to create one for
    this Metro Rail project. Take a look at the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **HTTP verb** | **Path** | **Action** | **Resource** |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` | `/v1/train` (details as JSON body) | Create | Train |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` | `/v1/station` (details as JSON body) | Create | Station |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/v1/train/id`  | Read | Train |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/v1/station/id` | Read | Station |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` | `/v1/schedule` (source and destination) | Create | Route |'
  prefs: []
  type: TYPE_TB
- en: We can also include the `UPDATE` and `DELETE` methods. By implementing the preceding
    design, it will be obvious for users to implement them on their own.
  prefs: []
  type: TYPE_NORMAL
- en: Creating database models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us write a few SQL strings for creating the tables for the preceding train,
    station, and route resources. We are going to create a project layout for this
    API. The project layout will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd044302-d60b-436b-b223-7ea7454c6d0e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We create our projects in `$GOPATH/src/github.com/user/`. Here, the user is
    `narenaryan`, `railAPI` is our project source, and `dbutils` is our own package
    for handling database initialization utility functions. Let us start with the
    `dbutils/models.go` file. I will add three models each for train, station, and
    schedule in the  `models.go` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: These are plain multi-line strings that are delimited by the backtick ([PRE17]
  prefs: []
  type: TYPE_NORMAL
- en: package dbutils
  prefs: []
  type: TYPE_NORMAL
- en: import "log"
  prefs: []
  type: TYPE_NORMAL
- en: import "database/sql"
  prefs: []
  type: TYPE_NORMAL
- en: func Initialize(dbDriver *sql.DB) {
  prefs: []
  type: TYPE_NORMAL
- en: statement, driverError := dbDriver.Prepare(train)
  prefs: []
  type: TYPE_NORMAL
- en: if driverError != nil {
  prefs: []
  type: TYPE_NORMAL
- en: log.Println(driverError)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Create train table
  prefs: []
  type: TYPE_NORMAL
- en: _, statementError := statement.Exec()
  prefs: []
  type: TYPE_NORMAL
- en: if statementError != nil {
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("Table already exists!")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: statement, _ = dbDriver.Prepare(station)
  prefs: []
  type: TYPE_NORMAL
- en: statement.Exec()
  prefs: []
  type: TYPE_NORMAL
- en: statement, _ = dbDriver.Prepare(schedule)
  prefs: []
  type: TYPE_NORMAL
- en: statement.Exec()
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("All tables created/initialized successfully!")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: go build github.com/narenaryan/dbutils
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: package main
  prefs: []
  type: TYPE_NORMAL
- en: import (
  prefs: []
  type: TYPE_NORMAL
- en: '"database/sql"'
  prefs: []
  type: TYPE_NORMAL
- en: '"log"'
  prefs: []
  type: TYPE_NORMAL
- en: _ "github.com/mattn/go-sqlite3"
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/narenaryan/dbutils"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: func main() {
  prefs: []
  type: TYPE_NORMAL
- en: // Connect to Database
  prefs: []
  type: TYPE_NORMAL
- en: db, err := sql.Open("sqlite3", "./railapi.db")
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("Driver creation failed!")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Create tables
  prefs: []
  type: TYPE_NORMAL
- en: dbutils.Initialize(db)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: go run main.go
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 2017/06/10 14:05:36 All tables created/initialized successfully!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: package main
  prefs: []
  type: TYPE_NORMAL
- en: import (
  prefs: []
  type: TYPE_NORMAL
- en: '"database/sql"'
  prefs: []
  type: TYPE_NORMAL
- en: '"encoding/json"'
  prefs: []
  type: TYPE_NORMAL
- en: '"log"'
  prefs: []
  type: TYPE_NORMAL
- en: '"net/http"'
  prefs: []
  type: TYPE_NORMAL
- en: '"time"'
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/emicklei/go-restful"'
  prefs: []
  type: TYPE_NORMAL
- en: _ "github.com/mattn/go-sqlite3"
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/narenaryan/dbutils"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: // DB Driver visible to whole program
  prefs: []
  type: TYPE_NORMAL
- en: var DB *sql.DB
  prefs: []
  type: TYPE_NORMAL
- en: // TrainResource is the model for holding rail information
  prefs: []
  type: TYPE_NORMAL
- en: type TrainResource struct {
  prefs: []
  type: TYPE_NORMAL
- en: ID int
  prefs: []
  type: TYPE_NORMAL
- en: DriverName string
  prefs: []
  type: TYPE_NORMAL
- en: OperatingStatus bool
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // StationResource holds information about locations
  prefs: []
  type: TYPE_NORMAL
- en: type StationResource struct {
  prefs: []
  type: TYPE_NORMAL
- en: ID int
  prefs: []
  type: TYPE_NORMAL
- en: Name string
  prefs: []
  type: TYPE_NORMAL
- en: OpeningTime time.Time
  prefs: []
  type: TYPE_NORMAL
- en: ClosingTime time.Time
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // ScheduleResource links both trains and stations
  prefs: []
  type: TYPE_NORMAL
- en: type ScheduleResource struct {
  prefs: []
  type: TYPE_NORMAL
- en: ID int
  prefs: []
  type: TYPE_NORMAL
- en: TrainID int
  prefs: []
  type: TYPE_NORMAL
- en: StationID int
  prefs: []
  type: TYPE_NORMAL
- en: ArrivalTime time.Time
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: // Register adds paths and routes to container
  prefs: []
  type: TYPE_NORMAL
- en: func (t *TrainResource) Register(container *restful.Container) {
  prefs: []
  type: TYPE_NORMAL
- en: ws := new(restful.WebService)
  prefs: []
  type: TYPE_NORMAL
- en: ws.
  prefs: []
  type: TYPE_NORMAL
- en: Path("/v1/trains").
  prefs: []
  type: TYPE_NORMAL
- en: Consumes(restful.MIME_JSON).
  prefs: []
  type: TYPE_NORMAL
- en: Produces(restful.MIME_JSON) // you can specify this per route as well
  prefs: []
  type: TYPE_NORMAL
- en: ws.Route(ws.GET("/{train-id}").To(t.getTrain))
  prefs: []
  type: TYPE_NORMAL
- en: ws.Route(ws.POST("").To(t.createTrain))
  prefs: []
  type: TYPE_NORMAL
- en: ws.Route(ws.DELETE("/{train-id}").To(t.removeTrain))
  prefs: []
  type: TYPE_NORMAL
- en: container.Add(ws)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Path("/v1/trains").
  prefs: []
  type: TYPE_NORMAL
- en: Consumes(restful.MIME_JSON).
  prefs: []
  type: TYPE_NORMAL
- en: Produces(restful.MIME_JSON)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: // GET http://localhost:8000/v1/trains/1
  prefs: []
  type: TYPE_NORMAL
- en: func (t TrainResource) getTrain(request *restful.Request, response *restful.Response)
    {
  prefs: []
  type: TYPE_NORMAL
- en: id := request.PathParameter("train-id")
  prefs: []
  type: TYPE_NORMAL
- en: err := DB.QueryRow("select ID, DRIVER_NAME, OPERATING_STATUS FROM train where
    id=?", id).Scan(&t.ID, &t.DriverName, &t.OperatingStatus)
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  prefs: []
  type: TYPE_NORMAL
- en: log.Println(err)
  prefs: []
  type: TYPE_NORMAL
- en: response.AddHeader("Content-Type", "text/plain")
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteErrorString(http.StatusNotFound, "Train could not be found.")
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteEntity(t)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // POST http://localhost:8000/v1/trains
  prefs: []
  type: TYPE_NORMAL
- en: func (t TrainResource) createTrain(request *restful.Request, response *restful.Response)
    {
  prefs: []
  type: TYPE_NORMAL
- en: log.Println(request.Request.Body)
  prefs: []
  type: TYPE_NORMAL
- en: decoder := json.NewDecoder(request.Request.Body)
  prefs: []
  type: TYPE_NORMAL
- en: var b TrainResource
  prefs: []
  type: TYPE_NORMAL
- en: err := decoder.Decode(&b)
  prefs: []
  type: TYPE_NORMAL
- en: log.Println(b.DriverName, b.OperatingStatus)
  prefs: []
  type: TYPE_NORMAL
- en: // Error handling is obvious here. So omitting...
  prefs: []
  type: TYPE_NORMAL
- en: statement, _ := DB.Prepare("insert into train (DRIVER_NAME, OPERATING_STATUS)
    values (?, ?)")
  prefs: []
  type: TYPE_NORMAL
- en: result, err := statement.Exec(b.DriverName, b.OperatingStatus)
  prefs: []
  type: TYPE_NORMAL
- en: if err == nil {
  prefs: []
  type: TYPE_NORMAL
- en: newID, _ := result.LastInsertId()
  prefs: []
  type: TYPE_NORMAL
- en: b.ID = int(newID)
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteHeaderAndEntity(http.StatusCreated, b)
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: response.AddHeader("Content-Type", "text/plain")
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteErrorString(http.StatusInternalServerError, err.Error())
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // DELETE http://localhost:8000/v1/trains/1
  prefs: []
  type: TYPE_NORMAL
- en: func (t TrainResource) removeTrain(request *restful.Request, response *restful.Response)
    {
  prefs: []
  type: TYPE_NORMAL
- en: id := request.PathParameter("train-id")
  prefs: []
  type: TYPE_NORMAL
- en: statement, _ := DB.Prepare("delete from train where id=?")
  prefs: []
  type: TYPE_NORMAL
- en: _, err := statement.Exec(id)
  prefs: []
  type: TYPE_NORMAL
- en: if err == nil {
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteHeader(http.StatusOK)
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: response.AddHeader("Content-Type", "text/plain")
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteErrorString(http.StatusInternalServerError, err.Error())
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: func main() {
  prefs: []
  type: TYPE_NORMAL
- en: var err error
  prefs: []
  type: TYPE_NORMAL
- en: DB, err = sql.Open("sqlite3", "./railapi.db")
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("Driver creation failed!")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: dbutils.Initialize(DB)
  prefs: []
  type: TYPE_NORMAL
- en: wsContainer := restful.NewContainer()
  prefs: []
  type: TYPE_NORMAL
- en: wsContainer.Router(restful.CurlyRouter{})
  prefs: []
  type: TYPE_NORMAL
- en: t := TrainResource{}
  prefs: []
  type: TYPE_NORMAL
- en: t.Register(wsContainer)
  prefs: []
  type: TYPE_NORMAL
- en: log.Printf("start listening on localhost:8000")
  prefs: []
  type: TYPE_NORMAL
- en: 'server := &http.Server{Addr: ":8000", Handler: wsContainer}'
  prefs: []
  type: TYPE_NORMAL
- en: log.Fatal(server.ListenAndServe())
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: go run railAPI/main.go
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: curl -X POST \
  prefs: []
  type: TYPE_NORMAL
- en: http://localhost:8000/v1/trains \
  prefs: []
  type: TYPE_NORMAL
- en: '-H ''cache-control: no-cache'' \'
  prefs: []
  type: TYPE_NORMAL
- en: '-H ''content-type: application/json'' \'
  prefs: []
  type: TYPE_NORMAL
- en: '-d ''{"driverName": "Menaka", "operatingStatus": true}'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"ID": 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '"DriverName": "Menaka",'
  prefs: []
  type: TYPE_NORMAL
- en: '"OperatingStatus": true'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: CURL -X GET "http://localhost:8000/v1/trains/1"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"ID": 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '"DriverName": "Menaka",'
  prefs: []
  type: TYPE_NORMAL
- en: '"OperatingStatus": true'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: CURL -X DELETE "http://localhost:8000/v1/trains/1"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Train could not be found.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: go get gopkg.in/gin-gonic/gin.v1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: package main
  prefs: []
  type: TYPE_NORMAL
- en: import (
  prefs: []
  type: TYPE_NORMAL
- en: '"time"'
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/gin-gonic/gin"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: func main() {
  prefs: []
  type: TYPE_NORMAL
- en: r := gin.Default()
  prefs: []
  type: TYPE_NORMAL
- en: /* GET takes a route and a handler function
  prefs: []
  type: TYPE_NORMAL
- en: Handler takes the gin context object
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: r.GET("/pingTime", func(c *gin.Context) {
  prefs: []
  type: TYPE_NORMAL
- en: // JSON serializer is available on gin context
  prefs: []
  type: TYPE_NORMAL
- en: c.JSON(200, gin.H{
  prefs: []
  type: TYPE_NORMAL
- en: '"serverTime": time.Now().UTC(),'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: r.Run(":8000") // Listen and serve on 0.0.0.0:8080
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: go run ginExamples/ginBasic.go
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: CURL -X GET "http://localhost:8000/pingTime"
  prefs: []
  type: TYPE_NORMAL
- en: Output
  prefs: []
  type: TYPE_NORMAL
- en: =======
  prefs: []
  type: TYPE_NORMAL
- en: '{"serverTime":"2017-06-11T03:59:44.135062688Z"}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: package main
  prefs: []
  type: TYPE_NORMAL
- en: import (
  prefs: []
  type: TYPE_NORMAL
- en: '"database/sql"'
  prefs: []
  type: TYPE_NORMAL
- en: '"log"'
  prefs: []
  type: TYPE_NORMAL
- en: '"net/http"'
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/gin-gonic/gin"'
  prefs: []
  type: TYPE_NORMAL
- en: _ "github.com/mattn/go-sqlite3"
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/narenaryan/dbutils"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: // DB Driver visible to whole program
  prefs: []
  type: TYPE_NORMAL
- en: var DB *sql.DB
  prefs: []
  type: TYPE_NORMAL
- en: // StationResource holds information about locations
  prefs: []
  type: TYPE_NORMAL
- en: type StationResource struct {
  prefs: []
  type: TYPE_NORMAL
- en: ID int `json:"id"`
  prefs: []
  type: TYPE_NORMAL
- en: Name string `json:"name"`
  prefs: []
  type: TYPE_NORMAL
- en: OpeningTime string `json:"opening_time"`
  prefs: []
  type: TYPE_NORMAL
- en: ClosingTime string `json:"closing_time"`
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: // GetStation returns the station detail
  prefs: []
  type: TYPE_NORMAL
- en: func GetStation(c *gin.Context) {
  prefs: []
  type: TYPE_NORMAL
- en: var station StationResource
  prefs: []
  type: TYPE_NORMAL
- en: id := c.Param("station_id")
  prefs: []
  type: TYPE_NORMAL
- en: err := DB.QueryRow("select ID, NAME, CAST(OPENING_TIME as CHAR), CAST(CLOSING_TIME
    as CHAR) from station where id=?", id).Scan(&station.ID, &station.Name, &station.OpeningTime,
    &station.ClosingTime)
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  prefs: []
  type: TYPE_NORMAL
- en: log.Println(err)
  prefs: []
  type: TYPE_NORMAL
- en: c.JSON(500, gin.H{
  prefs: []
  type: TYPE_NORMAL
- en: '"error": err.Error(),'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: c.JSON(200, gin.H{
  prefs: []
  type: TYPE_NORMAL
- en: '"result": station,'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // CreateStation handles the POST
  prefs: []
  type: TYPE_NORMAL
- en: func CreateStation(c *gin.Context) {
  prefs: []
  type: TYPE_NORMAL
- en: var station StationResource
  prefs: []
  type: TYPE_NORMAL
- en: // Parse the body into our resrource
  prefs: []
  type: TYPE_NORMAL
- en: if err := c.BindJSON(&station); err == nil {
  prefs: []
  type: TYPE_NORMAL
- en: // Format Time to Go time format
  prefs: []
  type: TYPE_NORMAL
- en: statement, _ := DB.Prepare("insert into station (NAME, OPENING_TIME, CLOSING_TIME)
    values (?, ?, ?)")
  prefs: []
  type: TYPE_NORMAL
- en: result, _ := statement.</span>Exec(station.Name, station.OpeningTime, station.ClosingTime)
  prefs: []
  type: TYPE_NORMAL
- en: if err == nil {
  prefs: []
  type: TYPE_NORMAL
- en: newID, _ := result.LastInsertId()
  prefs: []
  type: TYPE_NORMAL
- en: station.ID = int(newID)
  prefs: []
  type: TYPE_NORMAL
- en: c.JSON(http.StatusOK, gin.H{
  prefs: []
  type: TYPE_NORMAL
- en: '"result": station,'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: c.String(http.StatusInternalServerError, err.Error())
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: c.String(http.StatusInternalServerError, err.Error())
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // RemoveStation handles the removing of resource
  prefs: []
  type: TYPE_NORMAL
- en: func RemoveStation(c *gin.Context) {
  prefs: []
  type: TYPE_NORMAL
- en: id := c.Param("station-id")
  prefs: []
  type: TYPE_NORMAL
- en: statement, _ := DB.Prepare("delete from station where id=?")
  prefs: []
  type: TYPE_NORMAL
- en: _, err := statement.Exec(id)
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  prefs: []
  type: TYPE_NORMAL
- en: log.Println(err)
  prefs: []
  type: TYPE_NORMAL
- en: c.JSON(500, gin.H{
  prefs: []
  type: TYPE_NORMAL
- en: '"error": err.Error(),'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: c.String(http.StatusOK, "")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: ID int `json:"id"`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: func main() {
  prefs: []
  type: TYPE_NORMAL
- en: var err error
  prefs: []
  type: TYPE_NORMAL
- en: DB, err = sql.Open("sqlite3", "./railapi.db")
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("Driver creation failed!")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: dbutils.Initialize(DB)
  prefs: []
  type: TYPE_NORMAL
- en: r := gin.Default()
  prefs: []
  type: TYPE_NORMAL
- en: // Add routes to REST verbs
  prefs: []
  type: TYPE_NORMAL
- en: r.GET("/v1/stations/:station_id", GetStation)
  prefs: []
  type: TYPE_NORMAL
- en: r.POST("/v1/stations", CreateStation)
  prefs: []
  type: TYPE_NORMAL
- en: r.DELETE("/v1/stations/:station_id", RemoveStation)
  prefs: []
  type: TYPE_NORMAL
- en: r.Run(":8000") // Default listen and serve on 0.0.0.0:8080
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: go run railAPIGin/main.go
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: curl -X POST \
  prefs: []
  type: TYPE_NORMAL
- en: http://localhost:8000/v1/stations \
  prefs: []
  type: TYPE_NORMAL
- en: '-H ''cache-control: no-cache'' \'
  prefs: []
  type: TYPE_NORMAL
- en: '-H ''content-type: application/json'' \'
  prefs: []
  type: TYPE_NORMAL
- en: -d '{"name":"Brooklyn", "opening_time":"8:12:00", "closing_time":"18:23:00"}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '{"result":{"id":1,"name":"Brooklyn","opening_time":"8:12:00","closing_time":"18:23:00"}}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: CURL -X GET "http://10.102.78.140:8000/v1/stations/1"
  prefs: []
  type: TYPE_NORMAL
- en: Output
  prefs: []
  type: TYPE_NORMAL
- en: ======
  prefs: []
  type: TYPE_NORMAL
- en: '{"result":{"id":1,"name":"Brooklyn","opening_time":"8:12:00","closing_time":"18:23:00"}}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: CURL -X DELETE "http://10.102.78.140:8000/v1/stations/1"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: go get github.com/revel/revel
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: go get github.com/revel/cmd/revel
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: export PATH=$PATH:$GOPATH/bin
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: revel new railAPIRevel
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: conf/             Configuration directory
  prefs: []
  type: TYPE_NORMAL
- en: app.conf      Main app configuration file
  prefs: []
  type: TYPE_NORMAL
- en: routes        Routes definition file
  prefs: []
  type: TYPE_NORMAL
- en: app/              App sources
  prefs: []
  type: TYPE_NORMAL
- en: init.go       Interceptor registration
  prefs: []
  type: TYPE_NORMAL
- en: controllers/  App controllers go here
  prefs: []
  type: TYPE_NORMAL
- en: views/        Templates directory
  prefs: []
  type: TYPE_NORMAL
- en: messages/         Message files
  prefs: []
  type: TYPE_NORMAL
- en: public/           Public static assets
  prefs: []
  type: TYPE_NORMAL
- en: css/          CSS files
  prefs: []
  type: TYPE_NORMAL
- en: js/           Javascript files
  prefs: []
  type: TYPE_NORMAL
- en: images/       Image files
  prefs: []
  type: TYPE_NORMAL
- en: tests/            Test suites
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Routes Config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#'
  prefs: []
  type: TYPE_NORMAL
- en: This file defines all application routes (Higher priority routes first)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#'
  prefs: []
  type: TYPE_NORMAL
- en: module:testrunner
  prefs: []
  type: TYPE_NORMAL
- en: module:jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GET     /v1/trains/:train-id                          App.GetTrain
  prefs: []
  type: TYPE_NORMAL
- en: POST    /v1/trains                                    App.CreateTrain
  prefs: []
  type: TYPE_NORMAL
- en: DELETE  /v1/trains/:train-id                          App.RemoveTrain
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: VERB       END_POINT         HANDLER
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: package controllers
  prefs: []
  type: TYPE_NORMAL
- en: import (
  prefs: []
  type: TYPE_NORMAL
- en: '"log"'
  prefs: []
  type: TYPE_NORMAL
- en: '"net/http"'
  prefs: []
  type: TYPE_NORMAL
- en: '"strconv"'
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/revel/revel"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: type App struct {
  prefs: []
  type: TYPE_NORMAL
- en: '*revel.Controller'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // TrainResource is the model for holding rail information
  prefs: []
  type: TYPE_NORMAL
- en: type TrainResource struct {
  prefs: []
  type: TYPE_NORMAL
- en: ID int `json:"id"`
  prefs: []
  type: TYPE_NORMAL
- en: DriverName string `json:"driver_name"`
  prefs: []
  type: TYPE_NORMAL
- en: OperatingStatus bool `json:"operating_status"`
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // GetTrain handles GET on train resource
  prefs: []
  type: TYPE_NORMAL
- en: func (c App) GetTrain() revel.Result {
  prefs: []
  type: TYPE_NORMAL
- en: var train TrainResource
  prefs: []
  type: TYPE_NORMAL
- en: // Getting the values from path parameters.
  prefs: []
  type: TYPE_NORMAL
- en: id := c.Params.Route.Get("train-id")
  prefs: []
  type: TYPE_NORMAL
- en: // use this ID to query from database and fill train table....
  prefs: []
  type: TYPE_NORMAL
- en: train.ID, _ = strconv.Atoi(id)
  prefs: []
  type: TYPE_NORMAL
- en: train.DriverName = "Logan" // Comes from DB
  prefs: []
  type: TYPE_NORMAL
- en: train.OperatingStatus = true // Comes from DB
  prefs: []
  type: TYPE_NORMAL
- en: c.Response.Status = http.StatusOK
  prefs: []
  type: TYPE_NORMAL
- en: return c.RenderJSON(train)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // CreateTrain handles POST on train resource
  prefs: []
  type: TYPE_NORMAL
- en: func (c App) CreateTrain() revel.Result {
  prefs: []
  type: TYPE_NORMAL
- en: var train TrainResource
  prefs: []
  type: TYPE_NORMAL
- en: c.Params.BindJSON(&train)
  prefs: []
  type: TYPE_NORMAL
- en: // Use train.DriverName and train.OperatingStatus to insert into train table....
  prefs: []
  type: TYPE_NORMAL
- en: train.ID = 2
  prefs: []
  type: TYPE_NORMAL
- en: c.Response.Status = http.StatusCreated
  prefs: []
  type: TYPE_NORMAL
- en: return c.RenderJSON(train)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // RemoveTrain implements DELETE on train resource
  prefs: []
  type: TYPE_NORMAL
- en: func (c App) RemoveTrain() revel.Result {
  prefs: []
  type: TYPE_NORMAL
- en: id := c.Params.Route.Get("train-id")
  prefs: []
  type: TYPE_NORMAL
- en: // Use ID to delete record from train table....
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("Successfully deleted the resource:", id)
  prefs: []
  type: TYPE_NORMAL
- en: c.Response.Status = http.StatusOK
  prefs: []
  type: TYPE_NORMAL
- en: return c.RenderText("")
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '......'
  prefs: []
  type: TYPE_NORMAL
- en: The IP address on which to listen.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: http.addr =
  prefs: []
  type: TYPE_NORMAL
- en: The port on which to listen.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'http.port = 8000 # Change from 9000 to 8000 or any port'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to use SSL or not.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: http.ssl = false
  prefs: []
  type: TYPE_NORMAL
- en: '......'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: revel run github.com/narenaryan/railAPIRevel
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: CURL -X GET "http://10.102.78.140:8000/v1/trains/1"
  prefs: []
  type: TYPE_NORMAL
- en: Output
  prefs: []
  type: TYPE_NORMAL
- en: =======
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '"driver_name": "Logan",'
  prefs: []
  type: TYPE_NORMAL
- en: '"operating_status": true'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: curl -X POST \
  prefs: []
  type: TYPE_NORMAL
- en: http://10.102.78.140:8000/v1/trains \
  prefs: []
  type: TYPE_NORMAL
- en: '-H ''cache-control: no-cache'' \'
  prefs: []
  type: TYPE_NORMAL
- en: '-H ''content-type: application/json'' \'
  prefs: []
  type: TYPE_NORMAL
- en: '-d ''{"driver_name":"Magneto", "operating_status": true}'''
  prefs: []
  type: TYPE_NORMAL
- en: Output
  prefs: []
  type: TYPE_NORMAL
- en: ======
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 2,'
  prefs: []
  type: TYPE_NORMAL
- en: '"driver_name": "Magneto",'
  prefs: []
  type: TYPE_NORMAL
- en: '"operating_status": true'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '`DELETE` is the same as `GET` but no body is returned. Here, the code is illustrated
    to show how to handle the request and response. Remember, Revel is more than a
    simple API framework. It is a fully-fledged web framework similar to Django (Python)
    or Ruby on Rails. We have got templating, tests, and many more inbuilt in Revel.'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you create a new Revel project for `GOPATH/user`. Otherwise,
    your Revel command-line tool may not find the project while running the project.
  prefs: []
  type: TYPE_NORMAL
- en: There is middleware support in all the web frameworks we saw in this chapter.
    `go-restful`names its middleware `Filters`, whereas `Gin` names it custom middleware.
    Revel calls its middleware interceptors. A middleware reads or writes the request
    and response before and after a function handler respectively. In [Chapter 3](d4152cbc-41fa-414e-bd50-146e9549f41d.xhtml),
    *Working with Middleware and RPC*, we discuss more about middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we tried to build a Metro Rail API with the help of a few web
    frameworks available in Go. The most popular ones are `go-restful`, `Gin Gonic`,
    and `Revel.go`. We started by learning our first database integration in our Go
    applications. We chose SQLite3 and tried to write a sample application using the
    `go-sqlite3` library.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we explored `go-restful` and looked in detail at how to create routes
    and handlers. `go-restful` has the concept of building APIs on top of resources.
    It provides an intuitive way of creating APIs that can consume and produce various
    formats such as XML and JSON. We used the train as a resource and built an API
    that performs CRUD operations on the database. We explained why `go-restful` is
    lightweight and can be used to create low latency APIs. Next, we saw the `Gin`
    framework and tried to repeat the same API, but created an API around the station
    resource. We saw how to store time in the SQL database time field. We suggested
    `Gin` for quickly prototyping your API.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we tried to create another API on the train resource, but this time
    with the `Revel.go` web framework. We started creating a project, inspected the
    directory structure, then moved on to write a few services (without `db` integration).
    We also saw how to run the application and change the port using a configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The main theme of this chapter was to give you a push towards a few wonderful
    frameworks for creating RESTful APIs. Each framework may do things differently,
    choose the one you are comfortable with. Use `Revel.go` when you need an end-to-end
    web application (templates and UI), use `Gin` to quickly create REST services,
    and use `go-rest` when the performance of the API is critical.
  prefs: []
  type: TYPE_NORMAL
