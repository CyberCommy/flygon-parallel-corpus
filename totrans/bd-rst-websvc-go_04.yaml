- en: Simplifying RESTful Services with Popular Go Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to cover topics related to using a framework for
    simplifying building REST services. First, we will take a quick look at go-restful,
    a REST API creation framework, and then move on to a framework called `Gin`. We
    will try to build a Metro Rail API in this chapter. The frameworks we are about
    to discuss are fully-fledged web frameworks which can also be used to create REST
    APIs in a short time. We will talk a lot about resources and REST verbs in this
    chapter. We will try to integrate a small database called `Sqlite3` with our API.
    Finally, we will inspect `Revel.go` and see how to prototype our REST API with
    it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, the topics we will cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: How to use SQLite3 in Go
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a REST API with the go-restful package
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Gin framework for creating a REST API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Revel.go for creating a REST API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basics for building CRUD operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the code
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can get the code samples for this chapter from [https://github.com/narenaryan/gorestful/tree/master/chapter4](https://github.com/narenaryan/gorestful/tree/master/chapter4).
    This chapter's examples are in the form of a project instead of single programs.
    So, copy the respective directory to your `GOPATH` to run the code samples properly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: go-restful, a framework for REST API creation
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`go-restful` is a package for building REST-style web services in Go. REST,
    as we discussed in the preceding section, asks developers to follow a set of design
    protocols. We have already discussed how the REST verbs should be defined and
    what they do to the resources.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `go-restful`, we can separate the logic for API handlers and attach REST
    verbs. The benefit of this is that it clearly tells us by looking at the code
    what API we are creating. Before jumping into an example, we need to install a
    database called SQLite3 for our REST API with `go-restful`. The installation steps
    are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu, run this command:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On OS X, you can use the `brew` command to install SQLite3:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, install the `go-restful` package with the following `get` command:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are ready to go. First, let us write a simple program showing what `go-restful`
    can do in a few lines of code. Let us create a simple ping server that echoes
    the server time back to the client:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we run this program:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The server will be running on port `8000` of localhost. So, we can either make
    a curl request or use a browser to see the `GET` request output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding program, we imported the `go-restful` library and we created
    a new service using a new instance of the `restful.WebService`struct. Next, we
    can create a REST verb using the following statement:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can attach a function handler to execute this verb; `pingTime` is one such
    function. These chained functions are passed to a `Route`function to create a
    router. Then comes the following important statement:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This registers the newly created `webservice` with the `go-restful`. If you
    observe, we are not passing any `ServeMux` objects to the `http.ListenServe` function;
    `go-restful` will take care of it. The main concept here is to use the resource-based
    REST API creation in `go-restful`. Going from the basic example, let us build
    something practical.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Take a scenario where your city is getting a new Metro Rail and you need to
    develop a REST API for other developers to consume and create an app accordingly.
    We will create one such API in this chapter and use various frameworks to show
    the implementation. Before that, for **Create, Read, Update, Delete** (**CRUD**)
    operations, we should know how to query or insert them into the SQLite DB with
    Go code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: CRUD operations and SQLite3 basics
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All SQLite3 operations are going to be done using a library called `go-sqlite3`.We
    can install that package using the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The special thing about this library is that it uses the internal `sql` package
    of Go. We usually import `database/sql` and use `sql` to execute database queries
    on the database (here, SQLite3):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we can create a database driver and then execute the SQL commands on it
    using a method called `Query`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '`sqliteFundamentals.go`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This program explains how we can perform CRUD operations on a SQL database.
    Currently, the database is SQLite3\. Let us run this using the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And the output looks like the following, printing all the log statements:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This program runs on Windows and Linux without any problem. In Go versions less
    than 1.8.1, you may see problems on macOS X such as *Signal Killed*.This is because
    of the Xcode version; please keep this in mind.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Coming to the program, we are first importing `database/sql` and `go-sqlite3`.
    Then, we are opening a `db` file on the filesystem using the `sql.Open()`function.
    It takes two arguments, type of database and filename. It returns an error if
    something goes wrong, or else, a database driver. In the `sql` library, in order
    to escape the SQL injection vulnerability, the package provides a function called `Prepare`on
    the database driver:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding statement just creates a statement without filling in any details.
    Actual data passed to the SQL query uses an `Exec` function in the statement.
    For example, in the preceding code snippet we used:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you pass incorrect values, such as strings that cause SQL injection, the
    driver rejects the SQL operation instantly. For getting data back from the database,
    use the `Query`method. It returns an iterator that returns all the rows for the
    matched query using the `Next`method. We should use that iterator in a loop to
    process, as shown in the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What if we need to pass criteria to the `SELECT`statement? Then, you should
    prepare a statement and then pass wildcard(?) data to it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Building a Metro Rail API with go-restful
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us use the knowledge we gained in the previous section and create an API
    for the City Metro Rail project we talked about in the preceding section. The
    roadmap is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Design a REST API document.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create models for a database.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the API logic.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design specification
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before creating any API, we should know what the specifications of APIs are
    in the form of a document. We showed a few examples in the previous chapters,
    including the URL shortener API design document. Let us try to create one for
    this Metro Rail project. Take a look at the following table:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '| **HTTP verb** | **Path** | **Action** | **Resource** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
- en: '| `POST` | `/v1/train` (details as JSON body) | Create | Train |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: '| `POST` | `/v1/station` (details as JSON body) | Create | Station |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/v1/train/id`  | Read | Train |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/v1/station/id` | Read | Station |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
- en: '| `POST` | `/v1/schedule` (source and destination) | Create | Route |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
- en: We can also include the `UPDATE` and `DELETE` methods. By implementing the preceding
    design, it will be obvious for users to implement them on their own.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Creating database models
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us write a few SQL strings for creating the tables for the preceding train,
    station, and route resources. We are going to create a project layout for this
    API. The project layout will look like the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd044302-d60b-436b-b223-7ea7454c6d0e.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: 'We create our projects in `$GOPATH/src/github.com/user/`. Here, the user is
    `narenaryan`, `railAPI` is our project source, and `dbutils` is our own package
    for handling database initialization utility functions. Let us start with the
    `dbutils/models.go` file. I will add three models each for train, station, and
    schedule in the  `models.go` file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: These are plain multi-line strings that are delimited by the backtick ([PRE17]
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: package dbutils
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: import "log"
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: import "database/sql"
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: func Initialize(dbDriver *sql.DB) {
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: statement, driverError := dbDriver.Prepare(train)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: if driverError != nil {
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: log.Println(driverError)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: // Create train table
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: _, statementError := statement.Exec()
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: if statementError != nil {
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("Table already exists!")
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: statement, _ = dbDriver.Prepare(station)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: statement.Exec()
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: statement, _ = dbDriver.Prepare(schedule)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: statement.Exec()
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("All tables created/initialized successfully!")
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: go build github.com/narenaryan/dbutils
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: package main
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: import (
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '"database/sql"'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '"log"'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: _ "github.com/mattn/go-sqlite3"
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/narenaryan/dbutils"'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: func main() {
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: // Connect to Database
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: db, err := sql.Open("sqlite3", "./railapi.db")
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("Driver creation failed!")
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: // Create tables
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: dbutils.Initialize(db)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: go run main.go
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 2017/06/10 14:05:36 All tables created/initialized successfully!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: package main
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: import (
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '"database/sql"'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '"encoding/json"'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '"log"'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '"net/http"'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '"time"'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/emicklei/go-restful"'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: _ "github.com/mattn/go-sqlite3"
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/narenaryan/dbutils"'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: // DB Driver visible to whole program
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: var DB *sql.DB
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: // TrainResource is the model for holding rail information
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: type TrainResource struct {
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: ID int
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: DriverName string
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: OperatingStatus bool
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: // StationResource holds information about locations
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: type StationResource struct {
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: ID int
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Name string
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: OpeningTime time.Time
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: ClosingTime time.Time
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: // ScheduleResource links both trains and stations
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: type ScheduleResource struct {
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: ID int
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: TrainID int
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: StationID int
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: ArrivalTime time.Time
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: // Register adds paths and routes to container
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: func (t *TrainResource) Register(container *restful.Container) {
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: ws := new(restful.WebService)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: ws.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Path("/v1/trains").
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Consumes(restful.MIME_JSON).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Produces(restful.MIME_JSON) // you can specify this per route as well
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: ws.Route(ws.GET("/{train-id}").To(t.getTrain))
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: ws.Route(ws.POST("").To(t.createTrain))
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: ws.Route(ws.DELETE("/{train-id}").To(t.removeTrain))
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: container.Add(ws)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Path("/v1/trains").
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Consumes(restful.MIME_JSON).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Produces(restful.MIME_JSON)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: // GET http://localhost:8000/v1/trains/1
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: func (t TrainResource) getTrain(request *restful.Request, response *restful.Response)
    {
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: id := request.PathParameter("train-id")
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: err := DB.QueryRow("select ID, DRIVER_NAME, OPERATING_STATUS FROM train where
    id=?", id).Scan(&t.ID, &t.DriverName, &t.OperatingStatus)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: log.Println(err)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: response.AddHeader("Content-Type", "text/plain")
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteErrorString(http.StatusNotFound, "Train could not be found.")
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteEntity(t)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: // POST http://localhost:8000/v1/trains
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: func (t TrainResource) createTrain(request *restful.Request, response *restful.Response)
    {
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: log.Println(request.Request.Body)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: decoder := json.NewDecoder(request.Request.Body)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: var b TrainResource
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: err := decoder.Decode(&b)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: log.Println(b.DriverName, b.OperatingStatus)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: // Error handling is obvious here. So omitting...
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: statement, _ := DB.Prepare("insert into train (DRIVER_NAME, OPERATING_STATUS)
    values (?, ?)")
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: result, err := statement.Exec(b.DriverName, b.OperatingStatus)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: if err == nil {
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: newID, _ := result.LastInsertId()
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: b.ID = int(newID)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteHeaderAndEntity(http.StatusCreated, b)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: response.AddHeader("Content-Type", "text/plain")
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteErrorString(http.StatusInternalServerError, err.Error())
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: // DELETE http://localhost:8000/v1/trains/1
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: func (t TrainResource) removeTrain(request *restful.Request, response *restful.Response)
    {
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: id := request.PathParameter("train-id")
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: statement, _ := DB.Prepare("delete from train where id=?")
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: _, err := statement.Exec(id)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: if err == nil {
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteHeader(http.StatusOK)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: response.AddHeader("Content-Type", "text/plain")
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: response.WriteErrorString(http.StatusInternalServerError, err.Error())
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: func main() {
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: var err error
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: DB, err = sql.Open("sqlite3", "./railapi.db")
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: if err != nil {
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("Driver creation failed!")
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: dbutils.Initialize(DB)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: wsContainer := restful.NewContainer()
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: wsContainer.Router(restful.CurlyRouter{})
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: t := TrainResource{}
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: t.Register(wsContainer)
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: log.Printf("start listening on localhost:8000")
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'server := &http.Server{Addr: ":8000", Handler: wsContainer}'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: log.Fatal(server.ListenAndServe())
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: go run railAPI/main.go
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: go run railAPI/main.go
- en: '[PRE29]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: curl -X POST \
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: curl -X POST \
- en: http://localhost:8000/v1/trains \
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: http://localhost:8000/v1/trains \
- en: '-H ''cache-control: no-cache'' \'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '-H ''cache-control: no-cache'' \'
- en: '-H ''content-type: application/json'' \'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '-H ''content-type: application/json'' \'
- en: '-d ''{"driverName": "Menaka", "operatingStatus": true}'''
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '-d ''{"driverName": "Menaka", "operatingStatus": true}'''
- en: '[PRE30]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '{'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"ID": 1,'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '"ID": 1,'
- en: '"DriverName": "Menaka",'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '"DriverName": "Menaka",'
- en: '"OperatingStatus": true'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '"OperatingStatus": true'
- en: '}'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE31]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: CURL -X GET "http://localhost:8000/v1/trains/1"
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: CURL -X GET "http://localhost:8000/v1/trains/1"
- en: '[PRE32]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '{'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"ID": 1,'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '"ID": 1,'
- en: '"DriverName": "Menaka",'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '"DriverName": "Menaka",'
- en: '"OperatingStatus": true'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '"OperatingStatus": true'
- en: '}'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE33]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: CURL -X DELETE "http://localhost:8000/v1/trains/1"
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: CURL -X DELETE "http://localhost:8000/v1/trains/1"
- en: '[PRE34]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Train could not be found.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Train could not be found.
- en: '[PRE35]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: go get gopkg.in/gin-gonic/gin.v1
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: go get gopkg.in/gin-gonic/gin.v1
- en: '[PRE36]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: package main
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: import (
- en: '"time"'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '"time"'
- en: '"github.com/gin-gonic/gin"'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '"github.com/gin-gonic/gin"'
- en: )
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: func main() {
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: r := gin.Default()
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: r := gin.Default()
- en: /* GET takes a route and a handler function
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: /* GET takes a route and a handler function
- en: Handler takes the gin context object
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: Handler takes the gin context object
- en: '*/'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: r.GET("/pingTime", func(c *gin.Context) {
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: r.GET("/pingTime", func(c *gin.Context) {
- en: // JSON serializer is available on gin context
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: // JSON serializer is available on gin context
- en: c.JSON(200, gin.H{
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: c.JSON(200, gin.H{
- en: '"serverTime": time.Now().UTC(),'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '"serverTime": time.Now().UTC(),'
- en: '})'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '})'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: r.Run(":8000") // Listen and serve on 0.0.0.0:8080
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: r.Run(":8000") // 在0.0.0.0:8080上监听并提供服务
- en: '}'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE37]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: go run ginExamples/ginBasic.go
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: go run ginExamples/ginBasic.go
- en: '[PRE38]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: CURL -X GET "http://localhost:8000/pingTime"
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: curl -X GET "http://localhost:8000/pingTime"
- en: Output
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Output
- en: =======
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: =======
- en: '{"serverTime":"2017-06-11T03:59:44.135062688Z"}'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '{"serverTime":"2017-06-11T03:59:44.135062688Z"}'
- en: '[PRE39]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: package main
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: package main
- en: import (
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: import (
- en: '"database/sql"'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '"database/sql"'
- en: '"log"'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '"log"'
- en: '"net/http"'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '"net/http"'
- en: '"github.com/gin-gonic/gin"'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '"github.com/gin-gonic/gin"'
- en: _ "github.com/mattn/go-sqlite3"
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: _ "github.com/mattn/go-sqlite3"
- en: '"github.com/narenaryan/dbutils"'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '"github.com/narenaryan/dbutils"'
- en: )
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE40]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: // DB Driver visible to whole program
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: // DB Driver visible to whole program
- en: var DB *sql.DB
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: var DB *sql.DB
- en: // StationResource holds information about locations
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: // StationResource holds information about locations
- en: type StationResource struct {
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: type StationResource struct {
- en: ID int `json:"id"`
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: ID int `json:"id"`
- en: Name string `json:"name"`
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Name string `json:"name"`
- en: OpeningTime string `json:"opening_time"`
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: OpeningTime string `json:"opening_time"`
- en: ClosingTime string `json:"closing_time"`
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: ClosingTime string `json:"closing_time"`
- en: '}'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE41]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: // GetStation returns the station detail
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: // GetStation returns the station detail
- en: func GetStation(c *gin.Context) {
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: func GetStation(c *gin.Context) {
- en: var station StationResource
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: var station StationResource
- en: id := c.Param("station_id")
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: id := c.Param("station_id")
- en: err := DB.QueryRow("select ID, NAME, CAST(OPENING_TIME as CHAR), CAST(CLOSING_TIME
    as CHAR) from station where id=?", id).Scan(&station.ID, &station.Name, &station.OpeningTime,
    &station.ClosingTime)
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: err := DB.QueryRow("select ID, NAME, CAST(OPENING_TIME as CHAR), CAST(CLOSING_TIME
    as CHAR) from station where id=?", id).Scan(&station.ID, &station.Name, &station.OpeningTime,
    &station.ClosingTime)
- en: if err != nil {
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: if err != nil {
- en: log.Println(err)
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: log.Println(err)
- en: c.JSON(500, gin.H{
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: c.JSON(500, gin.H{
- en: '"error": err.Error(),'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '"error": err.Error(),'
- en: '})'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '} else {'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: c.JSON(200, gin.H{
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: c.JSON(200, gin.H{
- en: '"result": station,'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '"result": station,'
- en: '})'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '}'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // CreateStation handles the POST
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: // CreateStation handles the POST
- en: func CreateStation(c *gin.Context) {
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: func CreateStation(c *gin.Context) {
- en: var station StationResource
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: var station StationResource
- en: // Parse the body into our resrource
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: // Parse the body into our resrource
- en: if err := c.BindJSON(&station); err == nil {
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: if err := c.BindJSON(&station); err == nil {
- en: // Format Time to Go time format
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: // Format Time to Go time format
- en: statement, _ := DB.Prepare("insert into station (NAME, OPENING_TIME, CLOSING_TIME)
    values (?, ?, ?)")
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: statement, _ := DB.Prepare("insert into station (NAME, OPENING_TIME, CLOSING_TIME)
    values (?, ?, ?)")
- en: result, _ := statement.</span>Exec(station.Name, station.OpeningTime, station.ClosingTime)
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: result, _ := statement.</span>Exec(station.Name, station.OpeningTime, station.ClosingTime)
- en: if err == nil {
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: if err == nil {
- en: newID, _ := result.LastInsertId()
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: newID, _ := result.LastInsertId()
- en: station.ID = int(newID)
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: station.ID = int(newID)
- en: c.JSON(http.StatusOK, gin.H{
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: c.JSON(http.StatusOK, gin.H{
- en: '"result": station,'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '"result": station,'
- en: '})'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '} else {'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: c.String(http.StatusInternalServerError, err.Error())
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: c.String(http.StatusInternalServerError, err.Error())
- en: '}'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: c.String(http.StatusInternalServerError, err.Error())
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: c.String(http.StatusInternalServerError, err.Error())
- en: '}'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // RemoveStation handles the removing of resource
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: // RemoveStation handles the removing of resource
- en: func RemoveStation(c *gin.Context) {
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: func RemoveStation(c *gin.Context) {
- en: id := c.Param("station-id")
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: id := c.Param("station-id")
- en: statement, _ := DB.Prepare("delete from station where id=?")
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: statement, _ := DB.Prepare("delete from station where id=?")
- en: _, err := statement.Exec(id)
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: _, err := statement.Exec(id)
- en: if err != nil {
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: if err != nil {
- en: log.Println(err)
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: log.Println(err)
- en: c.JSON(500, gin.H{
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: c.JSON(500, gin.H{
- en: '"error": err.Error(),'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '"error": err.Error(),'
- en: '})'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '} else {'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: c.String(http.StatusOK, "")
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: c.String(http.StatusOK, "")
- en: '}'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE42]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: ID int `json:"id"`
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: ID int `json:"id"`
- en: '[PRE43]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: func main() {
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: func main() {
- en: var err error
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: var err error
- en: DB, err = sql.Open("sqlite3", "./railapi.db")
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: DB, err = sql.Open("sqlite3", "./railapi.db")
- en: if err != nil {
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: if err != nil {
- en: log.Println("Driver creation failed!")
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: log.Println("Driver creation failed!")
- en: '}'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: dbutils.Initialize(DB)
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: dbutils.Initialize(DB)
- en: r := gin.Default()
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: r := gin.Default()
- en: // Add routes to REST verbs
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: // Add routes to REST verbs
- en: r.GET("/v1/stations/:station_id", GetStation)
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: r.GET("/v1/stations/:station_id", GetStation)
- en: r.POST("/v1/stations", CreateStation)
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: r.POST("/v1/stations", CreateStation)
- en: r.DELETE("/v1/stations/:station_id", RemoveStation)
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: r.DELETE("/v1/stations/:station_id", RemoveStation)
- en: r.Run(":8000") // Default listen and serve on 0.0.0.0:8080
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: r.Run(":8000") // 默认监听并在0.0.0.0:8080上提供服务
- en: '}'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE44]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: go run railAPIGin/main.go
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: go run railAPIGin/main.go
- en: '[PRE45]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: curl -X POST \
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: curl -X POST \
- en: http://localhost:8000/v1/stations \
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: http://localhost:8000/v1/stations \
- en: '-H ''cache-control: no-cache'' \'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '-H ''cache-control: no-cache'' \'
- en: '-H ''content-type: application/json'' \'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '-H ''content-type: application/json'' \'
- en: -d '{"name":"Brooklyn", "opening_time":"8:12:00", "closing_time":"18:23:00"}'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: -d '{"name":"Brooklyn", "opening_time":"8:12:00", "closing_time":"18:23:00"}'
- en: '[PRE46]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '{"result":{"id":1,"name":"Brooklyn","opening_time":"8:12:00","closing_time":"18:23:00"}}'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '{"result":{"id":1,"name":"Brooklyn","opening_time":"8:12:00","closing_time":"18:23:00"}}'
- en: '[PRE47]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: CURL -X GET "http://10.102.78.140:8000/v1/stations/1"
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: CURL -X GET "http://10.102.78.140:8000/v1/stations/1"
- en: Output
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: Output
- en: ======
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: ======
- en: '{"result":{"id":1,"name":"Brooklyn","opening_time":"8:12:00","closing_time":"18:23:00"}}'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '{"result":{"id":1,"name":"Brooklyn","opening_time":"8:12:00","closing_time":"18:23:00"}}'
- en: '[PRE48]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: CURL -X DELETE "http://10.102.78.140:8000/v1/stations/1"
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: CURL -X DELETE "http://10.102.78.140:8000/v1/stations/1"
- en: '[PRE49]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: go get github.com/revel/revel
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: go get github.com/revel/revel
- en: '[PRE50]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: go get github.com/revel/cmd/revel
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: go get github.com/revel/cmd/revel
- en: '[PRE51]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: export PATH=$PATH:$GOPATH/bin
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: export PATH=$PATH:$GOPATH/bin
- en: '[PRE52]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: revel new railAPIRevel
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: revel new railAPIRevel
- en: '[PRE53]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: conf/             Configuration directory
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: conf/             Configuration directory
- en: app.conf      Main app configuration file
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: app.conf      Main app configuration file
- en: routes        Routes definition file
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: app/              App sources
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: init.go       Interceptor registration
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: controllers/  App controllers go here
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: views/        Templates directory
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: messages/         Message files
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: public/           Public static assets
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: css/          CSS files
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: js/           Javascript files
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: images/       Image files
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: tests/            Test suites
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Routes Config
  id: totrans-408
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: This file defines all application routes (Higher priority routes first)
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: module:testrunner
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: module:jobs
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GET     /v1/trains/:train-id                          App.GetTrain
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: POST    /v1/trains                                    App.CreateTrain
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: DELETE  /v1/trains/:train-id                          App.RemoveTrain
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: VERB       END_POINT         HANDLER
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: package controllers
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: import (
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '"log"'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '"net/http"'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '"strconv"'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '"github.com/revel/revel"'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: type App struct {
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '*revel.Controller'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: // TrainResource is the model for holding rail information
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: type TrainResource struct {
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: ID int `json:"id"`
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: DriverName string `json:"driver_name"`
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: OperatingStatus bool `json:"operating_status"`
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: // GetTrain handles GET on train resource
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: func (c App) GetTrain() revel.Result {
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: var train TrainResource
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: // Getting the values from path parameters.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: id := c.Params.Route.Get("train-id")
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: // use this ID to query from database and fill train table....
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: train.ID, _ = strconv.Atoi(id)
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: train.DriverName = "Logan" // Comes from DB
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: train.OperatingStatus = true // Comes from DB
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: c.Response.Status = http.StatusOK
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: return c.RenderJSON(train)
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: // CreateTrain handles POST on train resource
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: func (c App) CreateTrain() revel.Result {
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: var train TrainResource
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: c.Params.BindJSON(&train)
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: // Use train.DriverName and train.OperatingStatus to insert into train table....
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: train.ID = 2
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: c.Response.Status = http.StatusCreated
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: return c.RenderJSON(train)
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: // RemoveTrain implements DELETE on train resource
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: func (c App) RemoveTrain() revel.Result {
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: id := c.Params.Route.Get("train-id")
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: // Use ID to delete record from train table....
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: log.Println("Successfully deleted the resource:", id)
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: c.Response.Status = http.StatusOK
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: return c.RenderText("")
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '......'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: The IP address on which to listen.
  id: totrans-467
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: http.addr =
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: The port on which to listen.
  id: totrans-469
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'http.port = 8000 # Change from 9000 to 8000 or any port'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: Whether to use SSL or not.
  id: totrans-471
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: http.ssl = false
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '......'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: revel run github.com/narenaryan/railAPIRevel
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: CURL -X GET "http://10.102.78.140:8000/v1/trains/1"
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: Output
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: =======
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 1,'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '"driver_name": "Logan",'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '"operating_status": true'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: curl -X POST \
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: http://10.102.78.140:8000/v1/trains \
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: '-H ''cache-control: no-cache'' \'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: '-H ''content-type: application/json'' \'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: '-d ''{"driver_name":"Magneto", "operating_status": true}'''
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: Output
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: ======
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 2,'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '"driver_name": "Magneto",'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '"operating_status": true'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: '`DELETE` is the same as `GET` but no body is returned. Here, the code is illustrated
    to show how to handle the request and response. Remember, Revel is more than a
    simple API framework. It is a fully-fledged web framework similar to Django (Python)
    or Ruby on Rails. We have got templating, tests, and many more inbuilt in Revel.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you create a new Revel project for `GOPATH/user`. Otherwise,
    your Revel command-line tool may not find the project while running the project.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: There is middleware support in all the web frameworks we saw in this chapter.
    `go-restful`names its middleware `Filters`, whereas `Gin` names it custom middleware.
    Revel calls its middleware interceptors. A middleware reads or writes the request
    and response before and after a function handler respectively. In [Chapter 3](d4152cbc-41fa-414e-bd50-146e9549f41d.xhtml),
    *Working with Middleware and RPC*, we discuss more about middleware.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we tried to build a Metro Rail API with the help of a few web
    frameworks available in Go. The most popular ones are `go-restful`, `Gin Gonic`,
    and `Revel.go`. We started by learning our first database integration in our Go
    applications. We chose SQLite3 and tried to write a sample application using the
    `go-sqlite3` library.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: Next, we explored `go-restful` and looked in detail at how to create routes
    and handlers. `go-restful` has the concept of building APIs on top of resources.
    It provides an intuitive way of creating APIs that can consume and produce various
    formats such as XML and JSON. We used the train as a resource and built an API
    that performs CRUD operations on the database. We explained why `go-restful` is
    lightweight and can be used to create low latency APIs. Next, we saw the `Gin`
    framework and tried to repeat the same API, but created an API around the station
    resource. We saw how to store time in the SQL database time field. We suggested
    `Gin` for quickly prototyping your API.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们探索了`go-restful`，并详细了解了如何创建路由和处理程序。`go-restful`具有在资源之上构建API的概念。它提供了一种直观的方式来创建可以消耗和产生各种格式（如XML和JSON）的API。我们使用火车作为资源，并构建了一个在数据库上执行CRUD操作的API。我们解释了为什么`go-restful`轻量级，并且可以用来创建低延迟的API。接下来，我们看到了`Gin`框架，并尝试重复相同的API，但是创建了一个围绕车站资源的API。我们看到了如何在SQL数据库时间字段中存储时间。我们建议使用`Gin`来快速原型化您的API。
- en: Finally, we tried to create another API on the train resource, but this time
    with the `Revel.go` web framework. We started creating a project, inspected the
    directory structure, then moved on to write a few services (without `db` integration).
    We also saw how to run the application and change the port using a configuration
    file.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们尝试使用`Revel.go`网络框架在火车资源上创建另一个API。我们开始创建一个项目，检查了目录结构，然后继续编写一些服务（没有`db`集成）。我们还看到了如何运行应用程序并使用配置文件更改端口。
- en: The main theme of this chapter was to give you a push towards a few wonderful
    frameworks for creating RESTful APIs. Each framework may do things differently,
    choose the one you are comfortable with. Use `Revel.go` when you need an end-to-end
    web application (templates and UI), use `Gin` to quickly create REST services,
    and use `go-rest` when the performance of the API is critical.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题是为您提供一些创建RESTful API的精彩框架。每个框架可能有不同的做事方式，选择您感到舒适的那个。当您需要一个端到端的网络应用程序（模板和用户界面）时，请使用`Revel.go`，当您需要快速创建REST服务时，请使用`Gin`，当API的性能至关重要时，请使用`go-rest`。
