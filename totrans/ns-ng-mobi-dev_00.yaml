- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NativeScript is an open source framework built by Progress to build truly native
    mobile apps with Angular, TypeScript, or even good old plain JavaScript. Angular
    is also an open source framework built by Google that offers declarative templates,
    dependency injection, and rich modules to build applications. Angular's versatile
    view handling architecture allows your views to be rendered as real native UI
    components--native to iOS or Android--that offer superior performance with fluid
    usability. This decoupling of the view rendering layer in Angular, combined with
    the power of native APIs in NativeScript, has come together to create the powerful
    combination that is the exciting world of NativeScript for Angular.
  prefs: []
  type: TYPE_NORMAL
- en: This book focuses on the key concepts you need to know to build NativeScript
    for your Angular mobile app on iOS and Android. We'll build a fun multitrack recording
    studio app, touching on the powerful native key concepts you need to know when
    you start building an app of your own. Having the right structure is critical
    to developing an app that can scale while also being highly maintainable and portable,
    so we'll start with project organization using Angular's @NgModule. We'll use
    Angular Components to build our first view and then create services that we can
    use via Angular's dependency injection.
  prefs: []
  type: TYPE_NORMAL
- en: You'll understand NativeScript's tns command-line utility to run the app on
    iOS and Android. We'll integrate third-party plugins to construct some of the
    core features. Next, we'll integrate the @ngrx store plus effects to establish
    some solid practices (Redux inspired) to deal with state management. Having a
    great data flow and solid architecture is meaningless if the app doesn't look
    good or offer a great user experience, so we'll use SASS to polish a style for
    our app. After that, we'll deal with debugging problems and invest some time into
    writing tests to prevent bugs in the future. Lastly, we'll bundle our app with
    webpack and deploy it to the Apple App Store and Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the book, you'll know the majority of the key concepts needed
    to build a NativeScript for Angular app.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0023.html#LTSU0-289fe2426d594f99a90e4363b2c9c34d), *Get into
    Shape with @NgModule*, discusses the @NgModule decorator, which clearly defines
    a segment of functionality in your app . This will be the organizational unit
    of your project. Before you begin building your app, you will gain many benefits
    by taking a moment and thinking about the various units/sections/modules that
    you may need/want for your app.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d), *Feature
    Modules*, teaches you that structuring your app with feature modules offers many
    advantages for maintainability in the future and reduces duplication of code throughout
    your app.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0046.html#1BRPS0-289fe2426d594f99a90e4363b2c9c34d), *Our First
    View via Component Building*, actually lets us see our app for the first time,
    where we need to build a Component for our first view.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0059.html#1O8H60-289fe2426d594f99a90e4363b2c9c34d),*A prettier
    view with CSS*, looks at how to turn our first view into something pretty amazing
    with a few CSS classes. We will also focus on how to utilize NativeScript''s core
    theme to provide a consistent styling framework to build on.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0064.html#1T1400-289fe2426d594f99a90e4363b2c9c34d), *Routing
    and Lazy Loading*, allows users to navigate around the various views in our app
    that will need to set up routing. Angular provides a powerful router that, when
    combined with NativeScript, works hand in hand with the native mobile page navigation
    system on iOS and Android. Additionally, we will set up the lazy loading of various
    routes to ensure that our app''s launch time remains as speedy as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0072.html#24L8G0-289fe2426d594f99a90e4363b2c9c34d), *Running
    the App on iOS and Android*, focuses on how to run our app on iOS and Android
    via NativeScript''s tns command-line utility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0092.html#2NNJO0-289fe2426d594f99a90e4363b2c9c34d), *Building
    the Multitrack Player*, covers plugin integration and provides a direct access
    to Objective C/Swift APIs on iOS and Java APIs on Android via NativeScript.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](part0101.html#30A8Q0-289fe2426d594f99a90e4363b2c9c34d), *Building
    an Audio Recorder*, works with native APIs to build an audio recorder for iOS
    and Android.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](part0115.html#3DLGM0-289fe2426d594f99a90e4363b2c9c34d), *Empowering
    your views*, takes advantage of Angular''s flexibility and NativeScript''s power
    to get the most out of your app''s user interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](part0121.html#3JCK20-289fe2426d594f99a90e4363b2c9c34d), *@ngrx/store
    + @ngrx/effects for state management*, manages app state via a single store with
    ngrx.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](part0131.html#3STPM0-289fe2426d594f99a90e4363b2c9c34d), *Polish
    with SASS*, integrates the nativescript-dev-sass plugin to polish our app''s style
    with SASS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](part0136.html#41MCG0-289fe2426d594f99a90e4363b2c9c34d), *Unit
    testing*, set up the Karma unit testing framework to future proof our app.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](part0146.html#4B7I40-289fe2426d594f99a90e4363b2c9c34d), *Integration
    Testing with Appium*, sets up Appium for integration testing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](part0154.html#4IRMK0-289fe2426d594f99a90e4363b2c9c34d), *Deployment
    Preparation with webpack Bundling*, works with webpack to optimize the bundle
    for release.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](part0163.html#4REBM0-289fe2426d594f99a90e4363b2c9c34d), *Deploying
    to the Apple App Store*, lets us distribute our app via the Apple App Store.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](part0174.html#55U1S0-289fe2426d594f99a90e4363b2c9c34d), *Deploying
    to Google Play*, lets us distribute our app via Google Play.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book assumes that you are using NativeScript 3 or higher and Angular 4.1
    or higher. If you plan to follow along for iOS development, you will need a Mac
    with XCode installed to run the accompanying app. You should also have the Android
    SDK tools installed with at least one emulator, preferably running 7.0.0 with
    API 24 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for all types of software developer who are interested in mobile
    app development for iOS and Android. It’s specifically tailored to benefit those
    who already have a general understanding of TypeScript and some basic-level Angular
    features. Web developers who are just getting into mobile app development for
    iOS and Android may also gain a lot from the content in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Various
    common properties (`padding`, `font size`, `font weight`, `color`, `background
    color`, and more) are supported. Also, shorthand margin/padding works as well,
    that is, padding: 15 5."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Running our app again, we now see the login prompt when we tap the Record button".'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
