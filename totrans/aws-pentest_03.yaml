- en: '*Chapter 2*: Pentesting and Ethical Hacking'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following chapter discusses penetration testing, also known as pentesting.
    Pentesting is something that grew out of computer concerns during the 1960s. As
    computer systems began to distribute data more, ensuring the security of that
    data became crucial. After much discussion of how communication lines could be
    penetrated, it was recommended that some type of "penetration assessment" be used
    to assess computer systems and communication lines with "real threat-like" assessments.
    Moving forward to the early 1970s, tiger teams were created as the first penetration
    testing teams and carried out operations similar to the tactics you will see and
    read about in this book. The primary responsibility of these tiger teams was to
    discover vulnerabilities and assess the threat impact level based on manually
    exploiting the vulnerabilities found.
  prefs: []
  type: TYPE_NORMAL
- en: Fast-forward to today, and the world of pentesting is growing in popularity
    and is becoming a common way to assess a corporation's infrastructure and security
    posture. Businesses hire pentesters to hack their companies and highlight areas
    of weakness ethically. The purpose of pentesting is to let the good guys know
    about vulnerabilities before the bad guys find out about them.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get into AWS, we'll learn about the pentesting parts of cybersecurity
    and what it means to execute pentesting successfully, so as to lay a foundation
    for our work in this book. We need to understand it so that we can think like
    a pentester and move through the book with that thought process. After all, to
    know the enemy, you have to think like the enemy.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a brief journey into what defines penetration
    testing. Then, we will set up a Kali Linux system locally on our own machines
    and explore the tools installed on the operating system. Do not worry about not
    having experience in Linux; this chapter will cover everything you need to know.
    We will also go over some pentesting tools and install some tools when needed.
    We will also learn how to write a basic script that we can run against our own
    host.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is penetration testing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pentesting tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the instructions in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'VirtualBox: [https://www.virtualbox.org/manual/ch01.html](https://www.virtualbox.org/manual/ch01.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyCharm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code used in this chapter is available at the following link: [https://github.com/PacktPublishing/AWS-Penetration-Testing/tree/master/Chapter%202:%20Pentesting%20and%20Ethical%20Hacking](https://github.com/PacktPublishing/AWS-Penetration-Testing/tree/master/Chapter%202:%20Pentesting%20and%20Ethical%20Hacking).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/386jRrY](https://bit.ly/386jRrY)'
  prefs: []
  type: TYPE_NORMAL
- en: What is penetration testing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term "penetration tester" is an interesting job title for a professional
    to have. While the job title may be a good conversation starter, and despite the
    funny remarks, penetration testing can be one of the most rewarding careers within
    cybersecurity. So, what is penetration testing, or pentesting?
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing is the evaluation of a system's attack surface through manual
    and automated exploitation. This involves using multiple sources to discover and
    exploit issues within systems. A system is a set of people, mechanisms, software,
    and policies that make up an entity (system).
  prefs: []
  type: TYPE_NORMAL
- en: Another way we can look at it is that pentesting highlights how systems work
    and reveals the vulnerabilities that leave them exposed to hacking, enabling the
    vulnerabilities to be corrected before adversaries can exploit them. This gives
    personnel an understanding of their technology, its security, and how attackers
    think about and exploit such systems. In today's environments, adversaries are
    always playing a cat-and-mouse game with companies. It is a pentester's job to
    ensure that those systems have more skilled cats to hunt the malicious mice.
  prefs: []
  type: TYPE_NORMAL
- en: Finding critical issues before the bad guys do
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Staying out of the news is the name of the game, and pentesting is a process
    that helps companies stay in the game. As many of us have seen, the news loves
    to run stories on companies that have been attacked by cybercriminals. Those attacks
    cost companies millions of dollars in losses as well as diminishing their reputation.
    As many of these companies are small companies, they stand less of a chance of
    bouncing back. In fact, 60% of small businesses fold within 6 months of a cyberattack.
    Penetration testing is a high-level quality assurance check that makes sure that
    companies can close gaps in their attack surface and solve issues before they
    get exploited, ultimately keeping them out of the news and keeping them from suffering
    severe monetary repercussions.
  prefs: []
  type: TYPE_NORMAL
- en: Pentesting methodology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's essential to understand the steps involved in pentesting. Having knowledge
    of the engagements not only gives you an insight into how security operations
    are performed within your business but also presents a formal representation of
    how attackers may actually attempt to exploit your systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a compressed list of the steps taken in a pentest engagement:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Planning** out the pentest is one of the most critical phases of pentesting.
    During this phase, you need to lay out your entire plan legally and logically.
    The scope of the engagement is determined and goals are set.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will gather information during the **reconnaissance** phase. This will involve
    you finding information passively or actively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Threat modeling** relies on you gathering all the data collected during the
    test and using that data to give a view of the system, highlighting its measured
    threats.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Testing and exploiting** involves you probing vulnerabilities found earlier
    in the test. If a probe is validated as successful, then exploiting the vulnerability
    commences. Exploiting vulnerabilities can happen in a number of ways. Some common
    ways you can do so include sending unexpected input to a web application, using
    automated tools and exploits, and/or performing manual exploitation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you enter the **post-exploitation phase**, you will maintain persistence
    and perform lateral movements and data exfiltration. Further, staying stealthy
    and covering your tracks are good practices to execute. Staying stealthy allows
    the blue team to test detection and response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Reporting** is the most crucial portion of the test. Delivering an excellent
    report ensures that the client/tested company understands the issues discovered
    and how to mitigate the problems found during the pentesting engagement.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While we've looked at the general steps in pentesting, we need to also understand
    the different approaches, which we will look at next. These approaches are the
    "style" of pentesting that can be executed through pentesting. These styles use
    either an outsider or insider approach and are used in common pentesting practice
    today!
  prefs: []
  type: TYPE_NORMAL
- en: Types of pentesting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When planning your pentesting, it''s important to understand the approach you
    want to follow. Let''s look at the general approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Black box**: This type of test involves assessing the in-scope targets with
    no knowledge of the inner workings of the in-scope systems and applications. Often,
    it can be thought of as a validation of a system''s functional requirements. For
    example, a client will develop a new application and requires a test to be performed
    at the user level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically, a user has no knowledge of the inner workings of the application
    and only uses it for its functional properties â€“ this means a functional test
    may be needed. A functional test looks to highlight any vulnerabilities that someone
    with little to no knowledge could find in an application.
  prefs: []
  type: TYPE_NORMAL
- en: '**White box**: White box testing is the most common testing method you see
    in the real world. It involves testing a system with full knowledge of everything
    that is in scope. Think of this as quality assurance or testing every possible
    detail of a system to ensure that it is not vulnerable. White box testing is a
    great way to discover and validate the internals of source code and system setups.
    Often, a white box test will be executed before a new product (applications, hardware,
    and so on) is integrated into a business. White box testing is what we will be
    doing throughout this book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gray box**: Simply put, this is a hybrid of black box and white box testing.
    A good example of this is testing a web application. A tester will have full knowledge
    of the frontend of the web application but little to no knowledge of the backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advantages and disadvantages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have explored various styles of testing, so let's look at their advantages
    and disadvantages before we go any further. Each style of testing has an optimal
    time and place, the conditions of which we will look at below.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advantages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A white box test has the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Quick due to less time needed for discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cheap due to fewer time constraints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows testers more time to look at deep functional aspects such as code review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A black box test has the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Delivers more dependable and realistic results due to testers having to emulate
    real threat vectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlights end-user weakness through phishing campaigns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A gray box test has the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Uses a combination of both white box and black box testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows creativity and is not constrained to one style of testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've looked at the advantages, let's move on to the disadvantages
    of each type of test.
  prefs: []
  type: TYPE_NORMAL
- en: Disadvantages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A white box test has the following disadvantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Typically, white box testing does not deliver results based on real attacker
    scenarios.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be a headache if not planned out properly. Often, white box tests are
    not prepared correctly and lots of information is missing when the test begins.
    For example, when a white box test is started, often the target business may overlook
    something and forget about specific resources that are part of the pentest. This
    is something that should be looked out for and is discussed more in [*Chapter
    10*](B15630_10_Final_ASB_ePub.xhtml#_idTextAnchor438)*, Pentesting Best Practices*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Such tests can present a biased opinion since the testers know everything about
    the environment already.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A black box test has the following disadvantages:'
  prefs: []
  type: TYPE_NORMAL
- en: It is time consuming because testers have to take their time to gain access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be expensive, depending on the length of the engagement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A gray box test has the following disadvantages:'
  prefs: []
  type: TYPE_NORMAL
- en: It can be time consuming, depending on how full the scope of the pentest and
    the knowledge of the pentest is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can also be expensive, depending on the test length.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a good overview of what pentesting is, let's download a VirtualBox
    image of Kali Linux and set up the operating system so that we can use it to interact
    with our AWS environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali Linux is a Debian distribution that is offered for free by Offensive Security
    ([www.offensive-security.com](http://www.offensive-security.com)). Because of
    the growing importance of security, Kali Linux has become popular over the past
    few years. In fact, it's essential for anyone working in pentesting. This is due
    to the operating system coming preloaded with a bundle of security tools that
    don't have to be manually installed.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to set up our own Kali Linux image locally
    on our own machine. The purpose of this exercise will be to make us more comfortable
    with Kali and also to teach you how to set up your own virtual machine. We will
    also use this Kali instance to interact with AWS throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Linux image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Setting up Kali Linux is easy. Follow along with the steps given here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to go grab a Kali image from the Offensive Security website. Ensure
    that you grab `Kali Linux VirtualBox 64-bit version` for VirtualBox: https://www.offensive-security.com/kali-linux-vm-vmware-VirtualBox-image-download/.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While that downloads, let''s go and grab a new version of VirtualBox. VirtualBox
    will be where we build and host our Kali machine: https://www.VirtualBox.org/wiki/Downloads.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions to install VirtualBox. The installation steps will vary
    depending on your host operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start VirtualBox and go to the top left-hand corner and click **Import Applianceâ€¦**,
    listed under **File**:![Figure 2.1 â€“ The File menu with Import Applianceâ€¦ selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.01_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 â€“ The File menu with Import Applianceâ€¦ selected
  prefs: []
  type: TYPE_NORMAL
- en: After that, you will need to import the Kali Linux `.ova` file that we downloaded
    in *step 1*. The `.ova` file is a VirtualBox-formatted file that allows us to
    import our virtual image directly into VirtualBox with little to no effort:![Figure
    2.2 â€“ Importing the Kali Linux .ova file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.02_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 â€“ Importing the Kali Linux .ova file
  prefs: []
  type: TYPE_NORMAL
- en: Once you select the new image, you'll need to change the name of the virtual
    machine. In this case, we change the name to **AWS Kali**. If you change the name
    to something else, ensure that you remember what you name it so you can use the
    Kali Linux machine throughout this book. We also turn off the **USB Controller**
    functionality since we won't be using it:![Figure 2.3 â€“ Appliance settings window
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.03_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 â€“ Appliance settings window
  prefs: []
  type: TYPE_NORMAL
- en: Now let's start up our Kali Linux virtual machine. To do so, double-click on
    the host you created. The virtual machine will start up and prompt you with a
    user login:![Figure 2.4 â€“ Kali Linux start screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.04_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 â€“ Kali Linux start screen
  prefs: []
  type: TYPE_NORMAL
- en: 'To log in, use the following credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Username: `root`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Password: `toor`'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have logged in to our Kali machine, let's get comfortable with learning
    some basic Linux commands that will help us throughout this book. It's important
    to know what these commands do because it allows you to maneuver in your Kali
    Linux machine as well as other Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring essential Linux commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we are working with AWS and Kali Linux, it''s important to understand
    some basic Linux commands. There will be lots of tools that you use that will
    require using a terminal. Thus, it''s essential that you understand how to run
    basic commands. We will discover some of these new commands using our new Kali
    Linux image that we set up locally on our machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With your Kali instance started and up and running, let''s log in and make
    a directory. To do so, you will need to type the `mkdir` command. This command
    allows us to make directories that we can store information in. Let''s name the
    directory `Pentesting`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you''re going to need to move into that directory, but before we
    can do that, we need to know what directory we are currently working in. Use the
    `pwd` command to print out your current directory. `Pentesting` directory by using
    the `cd` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the directory, let''s create a `.txt` file that we can add
    notes to later throughout this book. Type the `touch` command to make a file called
    `notes.txt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've created a file, let's put some actual notes in it. We are going
    to use the `echo` command to output some text into our `notes.txt` file. After
    that, we will use the `cat` command to list out the words in the file. The `cat`
    command prints out the contents of files and can also be used to concatenate two
    files together. After that, we will create another file called `notes2.txt` and
    combine it with `notes.txt` to form one file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s output some text into `notes.txt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now list out the context using the `cat` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s make another file and add some text to it all in one command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will combine `notes.txt` and `notes2.txt` to form one file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should have something that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 â€“ The output of combining notes.txt and notes2.txt'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.05_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 â€“ The output of combining notes.txt and notes2.txt
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have now learned how to make directories and files within
    the Linux operating system. While these commands are great to know, they aren't
    all the commands we will need to know. Now we will look at a few other commands
    that are good to know as we move through this book and learn more about AWS and
    pentesting.
  prefs: []
  type: TYPE_NORMAL
- en: '**Additional commands**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the additional commands that we need to know while working through
    this book are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ls`: This command means "list" and is used to list out the contents of a directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rm`: This command means "remove" and removes files from a directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mv`: This command moves files from one directory to another location that
    you specify.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ping`: This command isn''t just for Linux but is a good command to know. The
    `ping` command sends an echo request to the host in the hopes of receiving echo
    responses. It talks to the host to see whether they are online. However, there
    are times when the host will have ping disabled, making them seem offline. If
    this occurs, we can use the `-Pn` switch in `ping`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ifconfig`: This allows you to see your running network interfaces. With Kali,
    running `ifconfig` will typically show you the **eth0** interface, which is typically
    routed or connected to your main **network interface card** (**NIC**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we explored the basic commands in Linux. These commands will
    help us use Linux effectively as we follow along with the lessons in this title.
    Next, we will start exploring the pentesting tools that will help us learn pentesting.
  prefs: []
  type: TYPE_NORMAL
- en: Pentesting tools
  prefs: []
  type: TYPE_NORMAL
- en: In pentesting, you will have copious amounts of tools at your disposal to meet
    all your needs. Besides using tools for manual testing, automated testing, or
    even writing your own scripts â€“ which we will do in this book â€“ the possibilities
    really are endless when it comes to being creative with testing.
  prefs: []
  type: TYPE_NORMAL
- en: While I encourage you to look at the tools within Kali Linux, we will also take
    a brief look at a couple of tools that we will use quite a bit over this book.
    For this section, let's take a look at NMAP and **Metasploit**. These two tools
    provide very accurate results when it comes to scanning and probing for services
    and vulnerabilities. We will also briefly look at **AWS Inspector**, a fantastic
    tool for vulnerability analysis on EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: NMAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NMAP is a wonderful tool that comes pre-installed within Kali Linux. It is an
    open source tool that is commonly used by network administrators, but it has gained
    popularity in pentesting due to its ability to discover services and open ports
    on multiple hosts at once â€“ this is commonly known as port scanning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Port scanning is done by probing for a specific port, and if that port is open,
    returning information about that port. There are also various scripts that can
    be run from NMAP that will tell you whether the scanned host is vulnerable to
    a particular issue. Remember how we set up an anonymous server in [*Chapter 1*](B15630_01_Final_ASB_ePub.xhtml#_idTextAnchor025)*,
    Building Your AWS Environment*? We can use the following script to detect anonymous
    FTP logins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down the command to better understand what''s going on. We will
    break down the switches as they occur in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: The `-sV` switch enumerates the version of the service. This means that the
    scan output will relay what version of FTP is being used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-sC` switch is for using scripts in conjunction with your scan. In this
    case, it will check for anonymous FTPs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-p` switch indicates what port(s) to scan. In our case, we only used port
    `21` since we are only probing for port `21`. However, we can scan for more than
    one port.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discover and use NMAP more as we move through this book. In the meantime,
    please feel free to look at more functions with NMAP. Check out [www.nmap.org](http://www.nmap.org)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Inspector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Inspector is a tool available in your AWS environment that runs automated
    security assessments on the EC2 instances within your AWS cloud environment. The
    scanner checks for common vulnerabilities, exposures, and best practices â€“ remediations
    â€“ that will allow you to securely and quickly harden your environment. The drawback
    to AWS Inspector is that there is a service fee, so we will avoid using it in
    this book. However, feel free to read up on the service.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We mentioned Metasploit in [*Chapter 1*](B15630_01_Final_ASB_ePub.xhtml#_idTextAnchor025)*,
    Building Your AWS Environment*, and learned how to update it through our AWS Kali
    instance. Given what we learned about Metasploit in [*Chapter 1*](B15630_01_Final_ASB_ePub.xhtml#_idTextAnchor025)*,
    Building Your AWS Environment*, let''s take a quick look at some of its features.
    We are going to access our local instance for this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do anything, we will need to update Metasploit the same way we did
    before, in [*Chapter 1*](B15630_01_Final_ASB_ePub.xhtml#_idTextAnchor025)*, Building
    Your AWS Environment*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have finished updating Metasploit, get started by starting up the
    program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that Metasploit is running, let''s test out the port scanning module on
    our own host. This is going to help us understand some of the syntaxes of the
    Metasploit commands. Before we begin, we will need to start up SSH on our host.
    To get started, open a new terminal and type the following command to start up
    SSH:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure that the service is running, we can type in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If all is up and running, you should see something similar to the output in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 â€“ Output from starting SSH'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.06_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 â€“ Output from starting SSH
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have SSH started, let''s see what we can do with it and Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to your terminal that has Metasploit open and use the `search` command
    to find a TCP port scanner. The syntax should look something similar to `search
    TCP portscan`. One of the first results will be `auxiliary/scanner/portscan/tcp`.
    Let''s use that to scan our machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Once you have the module loaded, type the `options` command to see what parameters
    we need to set. The `options` command lists out all the parameters that are part
    of the module. Different modules will have different parameters that need to be
    set:![Figure 2.7 â€“ Output for the options command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.07_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 â€“ Output for the options command
  prefs: []
  type: TYPE_NORMAL
- en: The only parameter we will need to set in this chapter is `RHOSTS`. Now, `RHOSTS`
    stands for `ifconfig` command to discover the IP of your machine. In this case,
    the IP of my machine is `192.168.1.5`:![Figure 2.8 â€“ Output from running ifconfig
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.08_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 â€“ Output from running ifconfig
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you know the IP of your machine, type the following command to assign
    it to the `RHOSTS` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Since that is the only parameter we need, go ahead and use the `run` command
    to launch the module against our host. It should discover that SSH has an open
    port:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 â€“ Output from using the run command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.09_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 â€“ Output from using the run command
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it shows that port `22` is open! Looking at the output of the
    command shows us that the host scan is 100% complete and shows `22 â€“ TCP OPEN`.
  prefs: []
  type: TYPE_NORMAL
- en: And just like that, we now know how to set up scanning modules within Metasploit.
    We will be using Metasploit quite a bit throughout this book, and we'll be using
    it for a whole chapter in [*Chapter 9*](B15630_09_Final_ASB_ePub.xhtml#_idTextAnchor381)*,
    Real-Life Pentesting with Metasploit and More!*. Now that we know a little bit
    about using Metasploit, let's move on to look at scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scripting is an important â€“ or even essential â€“ part of ethical hacking and
    pentesting. There will be times when you have a tool that isn't working well,
    or you may just need to write a quick script to test an application or service.
    When in doubt, write out a script that will help you achieve the results that
    you need. We'll take a look at some very basic scripting using Python programming
    in **PyCharm**.
  prefs: []
  type: TYPE_NORMAL
- en: 'PyCharm is an IDE that allows you to build and run your own code. What separates
    IDEs from using terminals and text editors is the built-in troubleshooting that
    comes packaged in the software. There''s no need to hunt down syntax errors; the
    IDE will highlight issues before you even run the code. This section is going
    to go through installing PyCharm on our local Kali instance and creating a Python
    script that we can debug in a step or two. Don''t feel overwhelmed if you have
    never scripted before; this basic script will give us the general knowledge and
    syntax of what''s needed to move forward with Python:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we are going to need to install PyCharm on our local Kali machine.
    To do so, you''ll need to get a current download of it, which you can retrieve
    from JetBrains: [https://www.jetbrains.com/pycharm/download/](https://www.jetbrains.com/pycharm/download/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download a free version of the community edition and then move it to our working
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it''s moved over, you''ll want to go ahead and extract all the content
    from the folder, and then move it to the `/opt` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have it extracted, we can move on and run the program. To get started,
    move into the `/bin` folder and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Once you're done installing PyCharm, create a new project and name it `Script`.
    This will be our working folder where we can make all our scripts throughout this
    book. Feel free to call your folder anything you like, but make sure you remember
    the name and where you store it:![Figure 2.10 â€“ Creating a new project in PyCharm
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.10_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 â€“ Creating a new project in PyCharm
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a folder, let''s make a program called `1`. This will automatically
    store the file as `1.py`. To get started, right-click on your folder and create
    a new file. Then, assign it a name; in this case, assign it the name `1`. Click
    `statement` variable has the text that matches the `if` condition. Let''s see
    what happens if we change the statement to *Hello World!*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Chances are that you will get the other statement of *That statement is not
    correct*. This is due to the syntax of the variable not matching the condition
    set by the `if` statement. The condition was supposed to be "Hello World," not
    "Hello World!" â€“ therefore making the condition invalid.
  prefs: []
  type: TYPE_NORMAL
- en: Take some time to look at how Python works. There are many resources that will
    highlight the basics of Python and its usage in security and pentesting. Later
    on in this book, we will discover ways to use Python to write scripts for our
    AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: Operating systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On your pentesting journey, you will come across multiple different operating
    systems. Various operating systems have different uses, including as servers,
    host clients, or cloud environments. It's important to understand these various
    operating systems because you will need to understand the ways they work in their
    environments. For this section, we will discuss some aspects of Linux and Windows
    systems that you ought to know about when pentesting.
  prefs: []
  type: TYPE_NORMAL
- en: Linux/Unix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux is an open source operating system based on the Unix platform. It's seen
    on quite a few devices and servers that we currently use, so it's important that
    you understand some of the basics about it. It is open source, so it has an open
    platform for collaboration that allows other developers to work on it, meaning
    you can add your own code and bug fixes.
  prefs: []
  type: TYPE_NORMAL
- en: Linux comes in many different "flavors" of operating system, such as Debian
    â€“ which Kali is â€“ Fedora, and Ubuntu, to name a few. Expect to come across some
    of these systems in your IT career, and even in this book!
  prefs: []
  type: TYPE_NORMAL
- en: Linux file permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s important to understand how Linux filesystems work. Linux filesystems
    are what are known as **flat filesystems**, meaning that every file within the
    operating system must have a different name. The files in the operating system
    are created with three different permissions that can be set:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read: Allows users to read files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Write: Allows users to write to files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execute: Allows users to execute programs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is important to know because there will be times where you will need to
    know or set the permissions of a file. In pentesting, you will come across open
    source tools that you may need to edit and then set as an executable. The `chmod`
    command allows you to change the permissions of a file to make it an executable.
    For example, if we had a file named `pentest.py` and needed to set it to be an
    executable, we could use the following command to create the executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, you may not have the rights to run programs like this. You may need
    additional privileges to run commands or even move around in certain directories.
    To unlock these privileges, let's talk about the **superuser**.
  prefs: []
  type: TYPE_NORMAL
- en: sudo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`sudo`, which stands for **superuser do**, will run any command that follows
    it as the superuser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: All `sudo` users are stored in the `/etc/sudoers` file path and can only be
    edited by using the `visudo` command. Feel free to check out the file path in
    your local Kali instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know a little more about Linux, let''s take a look at one of the
    operating systems that we have all used at one point in time in our lives: the
    Windows operating system.'
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows is an operating system that everyone has more than likely used at one
    point in their lives. It's the most common home user operating system and is often
    used as the user operating system for many different companies. While the operating
    system does prove easy to use, with its amazing desktop environment and everything
    being a click and drag away, the operating system has had some backlash over recent
    years because of vulnerabilities and certain UI and UX decisions in newer versions.
  prefs: []
  type: TYPE_NORMAL
- en: Many different exploits have targeted Windows operating systems over the years.
    For instance, there was **EternalBlue**, an exploit that attacks the **Server
    Message Block** service and allows attackers to gain access to victims' systems.
    This exploit was actually used to exploit systems and then use those systems as
    a server for a ransomware payload that generated a lot of headaches a few years
    back.
  prefs: []
  type: TYPE_NORMAL
- en: Other exploits and issues have been seen to target Windows systems over the
    years. EternalBlue was just one example, but an important one to highlight and
    understand why patching and security is so important. If a Windows system is left
    vulnerable, it could cause issues on a large scale.
  prefs: []
  type: TYPE_NORMAL
- en: GUI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the biggest differences between Linux and Windows is the `kali - undercover`
    in a Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered quite a bit, so please go back through it if you feel the
    need to. We learned about what pentesting is and how to set up Kali Linux locally
    on our machine and use various tools within the operating system, and we looked
    at various operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be moving into the next section of this book and
    begin looking at AWS and how to conduct pentesting and security assessments within
    our own environment.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Learn more about AWS Inspector: https://aws.amazon.com/inspector/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python website and resources: https://www.python.org'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NMAP website and resources: https://www.nmap.org'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
