- en: Appendix A. Detecting Canvas Support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Canvas fallback content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As all the browsers do not support canvas, it''s a good idea to provide fallback
    content so that the users know that something isn''t working correctly in the
    event that their browser of choice does not support canvas. The simplest and most
    straightforward technique for handling browsers that don''t support canvas is
    to add fallback content inside of the canvas tag. Typically, this content will
    be text or an image that tells the user that their outdated browser doesn''t support
    canvas, followed by a suggestion for downloading a browser developed in this decade.
    Users who are using a browser that does support canvas will not see the inner
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Canvas fallback content isn''t always the best solution. For example, if the
    browser doesn''t support canvas, you might want to alert an error message, redirect
    the user to a different URL, or even use a Flash version of the application as
    a fallback. The easiest way to detect whether the browser supports canvas is to
    create a dummy canvas element and then check whether we can execute the `getContext`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When the page loads, we can call the `isCanvasSupported()` function to determine
    whether or not the browser supports canvas and then appropriately handle the result.
  prefs: []
  type: TYPE_NORMAL
- en: This function uses one of my favorite JavaScript tricks, the double-not trick
    (`!!`), which determines whether or not the `getContext` method successfully executes.
    The first not of the double-not coerces the data type into a Boolean. As the act
    of coercing the data type yields the opposite result that we want, we can add
    a second not (`!!`) to flip the result back. The double-not trick is a super convenient
    way of checking whether or not a piece of code successfully executes, and in my
    opinion is much more elegant than wrapping a line of code with a `try`/`catch`
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting available WebGL contexts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your canvas application leverages WebGL, you might also want to know which
    contexts the browser supports so that you can successfully initialize a WebGL
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, there are five major contexts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`2D`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webgl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`experimentl-webgl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`moz-webgl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webkit-3d`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of the major browsers including Google Chrome, Firefox, Safari, Opera, and
    IE9 support the 2D context. However, when it comes to `WebGL` support, it's a
    completely different story. At the time of writing, Google Chrome and Safari support
    the `experimental-webgl` and the `webkit-3d` contexts, Firefox supports the `experimental-webgl`
    and the `moz-webgl` contexts, and IE9 does not support any form of WebGL.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this for yourself, you can create a function called `getCanvasSupport()`
    which loops through all of the possible contexts and uses the double-not trick
    to determine which contexts are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
