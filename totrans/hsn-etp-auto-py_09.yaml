- en: Using the Subprocess Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running and spawning a new system process can be useful to system administrators
    who want to automate specific operating system tasks or execute a few commands
    within their scripts. Python provides many libraries to call external system utilities,
    and it interacts with the data produced. The first library that was created is
    the `OS` module, which provides some useful tools to invoke external processes,
    such as `os.system`, `os.spwan`, and `os.popen*`. It lacks some essential functions,
    however, so Python developers have introduced a new library, `subprocess`, which
    can spawn new processes, send and receive from the processes, and handle error
    and return codes. Currently, the official Python documentation recommends the
    `subprocess` module for accessing system commands, and Python actually intends
    to replace the older modules with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Popen()` Subprocess
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading `stdin`, `stdout`, and `stderr`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The subprocess call suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The popen() subprocess
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `subprocess` module implements only one class: `popen()`. The primary use
    of this class is to spawn a new process on the system. This class can accept additional
    arguments for the running process, along with additional arguments for `popen()`
    itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Arguments** | **Meaning** |'
  prefs: []
  type: TYPE_TB
- en: '|  `args` | A string, or a sequence of program arguments. |'
  prefs: []
  type: TYPE_TB
- en: '|  `bufsize` | It is supplied as the buffering argument to the `open()` function
    when creating the `stdin`/`stdout`/`stderr` pipe file objects. |'
  prefs: []
  type: TYPE_TB
- en: '|  `executable` | A replacement program to execute. |'
  prefs: []
  type: TYPE_TB
- en: '|  `stdin`, `stdout`, `stderr` | These specify the executed program''s standard
    input, standard output, and standard error file handles, respectively. |'
  prefs: []
  type: TYPE_TB
- en: '|  `shell` | If `True`, the command will be executed through the shell (the
    default is `False`). In Linux, this means calling the `/bin/sh` before running
    the child process. |'
  prefs: []
  type: TYPE_TB
- en: '|  `cwd` | Sets the current directory before the child is executed. |'
  prefs: []
  type: TYPE_TB
- en: '|  `env` | Defines the environmental variables for the new process. |'
  prefs: []
  type: TYPE_TB
- en: 'Now, let us focus on `args`. The `popen()` command can take a Python list as
    an input, with the first element treated as the command and the subsequent elements
    as the command `args`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Script output**![](../images/00147.jpeg)'
  prefs: []
  type: TYPE_NORMAL
- en: The output returned from the command is printed directly to your Python Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: The `ifconfig` is a Linux utility used to return the network interface information.
    For Windows users, you can get similar output by using the `ipconfig` command
    on cmd.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can rewrite the preceding code and use a list instead of a string, as seen
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this approach allows you to add additional arguments to the main command
    as list items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that if you provide the previous command as a string not as a list, as
    we did in the first example, the command will fail as shown in below screenshot.
    The subprocess `Popen()` expects an executable name in each list element and not
    any other arguments.![](../images/00148.jpeg)
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, if you want to use the string method instead of a list,
    you can set the `shell` argument to `True`. This will instruct `Popen()` to append
    `/bin/sh` before the command; hence, the command will be executed with all of
    the arguments after it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can think about `shell=True` as you spawn a shell process and pass the command
    with an argument to it. This could save you a few lines of code through using
    `split()`, in case you receive the command from an external system and want to
    run it directly.
  prefs: []
  type: TYPE_NORMAL
- en: The default shell used by `subprocess` is `/bin/sh`. If you're using other shells,
    like `tch` or `csh`, you can define them in the `executable` argument. Also notice
    running the command as a shell can be a security issue and allow *security injection.*
    A user who instructs your code to run the script can add `"; rm -rf /"`  and cause
    terrible things to happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you can change the directory to a specific one before running the command
    by using the `cwd` argument. This is useful when you need to list the contents
    of the directory before operating on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00149.jpeg)Ansible has a similar flag called `chdir:`. This argument
    will be used inside a playbook task to change a directory before the execution.'
  prefs: []
  type: TYPE_NORMAL
- en: Reading stdin, stdout, and stderr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The spawned processes can communicate with the operating system in three channels:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard input (`stdin`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Standard output (`stdout`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Standard error (`stderr`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In subprocess, `Popen()` can interact with the three channels and redirect
    each stream to an external file, or to a special value called `PIPE`. An additional
    method, called `communicate()`, is used to read from the `stdout` and write on
    the `stdin`. The `communicate()` method can take input from the user and return
    both the standard output and the standard error, as shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, you can send data and write to the process using the input argument
    inside  `communicate()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the script, we used the `input` argument inside `communicate()`,which will
    send the data to the other child process, which will search for the subprocess
    keyword using the `grep`  command. The returned output will be stored inside the
    `stdout` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another approach to validate the successful execution of the process is to
    use the return code. When the command has successfully executed without errors,
    the return code will be `0`; otherwise, it will be an integer value larger than
    `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The script will ask the user to enter an IP address, and will then call the
    `ping_destination()` function, which will execute the `ping` command against the
    IP address. The result of the `ping` command (either `success` or `failed`) will
    return in the standard output, and the `communicate()` function will populate
    the return code with the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: First, we tested the Google DNS IP address. The host is alive, and the command
    will be successfully executed with the return code `=0`.  The function will return
    `True` and print `Host is alive`. Second, we tested with the `HostNotExist` string.
    The function will return `False` to the main program and print `Host is down`.
    Also, it will print the command standard output returned to subprocess which is
    (`Name or service not known`).
  prefs: []
  type: TYPE_NORMAL
- en: You can use `echo $?` to check the return code (sometimes called the exit code)
    of the previously executed command.
  prefs: []
  type: TYPE_NORMAL
- en: The subprocess call suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The subprocess module provides another function that makes process spawning a safer
    operation than using `Popen()`. The subprocess `call()` function waits for the
    called command/program to finish reading the output. It supports the same arguments
    as the `Popen()` constructor, such as `shell`, `executable`, and `cwd`, but this
    time, your script will wait for the program to complete and populate the return
    code without the need to `communicate()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you inspect the `call()` function, you will see that it''s actually a wrapper
    around the `Popen()` class, but with a `wait()` function that waits until the
    end of the command before returning the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want more protection for your code, you can use the `check_call()` function.
    It''s the same as `call()`, but adds another check to the return code. If it is
    equal to `0` (meaning that the command has successfully executed), then the output
    will be returned. Otherwise, it will raise an exception with the returned exit
    code. This will allow you to handle the exception in your program flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A downside of using the `call()` function is that you can't use  `communicate()`
    to send the data to process, like we did with `Popen()`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to run and spawn new processes in the system,
    and we learned about how these spawned processes communicate with the operating
    system. We also discussed the subprocess module and the `subprocess` call.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to run and execute commands on remote hosts.
  prefs: []
  type: TYPE_NORMAL
