- en: Chapter 2. Shape Drawing and Composites
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a rectangle
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a circle
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with custom shapes and fill styles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fun with Bezier curves: drawing a cloud'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing transparent shapes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the context state stack to save and restore styles
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with composite operations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating patterns with loops: drawing a gear'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Randomizing shape properties: drawing a field of flowers'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating custom shape functions: playing card suits'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Putting it all together: drawing a jet'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths and Text"), *Getting
    Started with Paths and Text*, we learned how to draw sub paths such as lines,
    arcs, Quadratic curves, and Bezier curves, and then we learned how to connect
    them together to form paths. In this chapter, we'll focus on basic and advanced
    shape drawing techniques such as drawing rectangles and circles, drawing custom
    shapes, filling shapes, working with composites, and drawing pictures. Let's get
    started!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a rectangle
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to draw the only built-in shape provided by
    the HTML5 canvas API, a rectangle. As unexciting as a rectangle might seem, many
    applications use them in one way or another, so you might as well get acquainted.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a rectangle](img/1369_02_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a simple rectangle centered on the canvas:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Draw a rectangle using the `rect()` method, set the color fill with the `fillStyle`
    property, and then fill the shape with the `fill()` method:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see from the preceding code, we can draw a simple rectangle by using
    the `rect()` method:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `rect()` method draws a rectangle at the position `x,y`, and defines its
    size with `width` and `height`. Another key thing to pay attention to in this
    recipe is the usage of `fillStyle` and `fill()`. Similar to `strokeStyle` and
    `stroke()`, we can assign a fill color using the `fillStyle` method and fill the
    shape using `fill()`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we used `fill()` before `stroke()`. If we were to stroke a shape
    before filling it, the fill style would actually overlay half of the stroke style,
    effectively halving the line width style set with `lineWidth`. As a result, it's
    good practice to use `fill()` before using `stroke()`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the `rect()` method, there are two additional methods that we
    can use to draw a rectangle and also apply styling with one line of code, the
    `fillRect()` method and the `strokeRect()` method.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The fillRect() method
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we intend to fill a rectangle after drawing it with `rect()`, we might consider
    both drawing the rectangle and filling it with a single method using `fillRect()`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `fillRect()` method is equivalent to using the `rect()` method followed
    by `fill()`. When using this method, you'll need to define the fill style prior
    to calling it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: The strokeRect() method
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to the `fillRect()` method, we can draw a rectangle and stroke
    it with a single method using the `strokeRect()` method:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `strokeRect()` method is equivalent to using the `rect()` method followed
    by `stroke()`. Similar to `fillRect()`, you'll need to define the stroke style
    prior to calling this method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, the HTML5 canvas API does not support a method that both fills
    and strokes a rectangle. Personally, I like to use the `rect()` method and apply
    stroke styles and fills as needed using `stroke()` and `fill()` because it's more
    consistent with custom shape drawing. However, if you're wanting to apply both
    a stroke and fill to a rectangle while using one of these short-hand methods,
    it's good practice to use `fillRect()` followed by `stroke()`. If you were to
    use `strokeRect()` followed by `fill()`, you would overlay the stroke style by
    the fill, halving the stroke line width.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a linear motion* in [Chapter 5](ch05.html "Chapter 5. Bringing the
    Canvas to Life with Animation")'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Detecting region events* in [Chapter 6](ch06.html "Chapter 6. Interacting
    with the Canvas: Attaching Event Listeners to Shapes and Regions")'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a bar chart* in [Chapter 7](ch07.html "Chapter 7. Creating Graphs
    and Charts")'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a circle
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the HTML5 canvas API doesn't support a circle method, we can certainly
    create one by drawing a fully enclosed arc.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a circle](img/1369_02_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a circle centered on the canvas:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a circle using the `arc()` method, set the color fill using the `fillStyle`
    property, and then fill the shape with the `fill()` method:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you might recall from [Chapter 1](ch01.html "Chapter 1. Getting Started
    withPaths and Text"), we can create an arc using the `arc()` method which draws
    a section of a circle defined by a starting angle and an ending angle. If, however,
    we define the difference between the starting angle and ending angle as 360 degrees
    (2π), we will have effectively drawn a complete circle:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See also...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating patterns with loops: drawing a gear*'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Transforming a circle into an oval* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Swinging a pendulum* in [Chapter 5](ch05.html "Chapter 5. Bringing the Canvas
    to Life with Animation")'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Simulating particle physics* in [Chapter 5](ch05.html "Chapter 5. Bringing
    the Canvas to Life with Animation")'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Animating a clock* in [Chapter 5](ch05.html "Chapter 5. Bringing the Canvas
    to Life with Animation")'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Detecting region events* in [Chapter 6](ch06.html "Chapter 6. Interacting
    with the Canvas: Attaching Event Listeners to Shapes and Regions")'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a pie chart* in [Chapter 7](ch07.html "Chapter 7. Creating Graphs
    and Charts")'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with custom shapes and fill styles
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll draw four triangles and then fill each one with a different
    fill style. The fill styles available with the HTML5 canvas API are color fills,
    linear gradients, radial gradients, and patterns.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with custom shapes and fill styles](img/1369_02_10.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw four triangles, one with a color fill, one with
    a linear gradient fill, one with a radial gradient fill, and one with a pattern
    fill:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple function that draws a triangle:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Define a 2D canvas context and set the height, width, and y position of our
    triangles:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Draw a triangle using a color fill:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Draw a triangle using a linear gradient fill:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Draw a triangle using a radial gradient fill:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Draw a triangle using a pattern fill:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you might recall from [Chapter 1](ch01.html "Chapter 1. Getting Started
    withPaths and Text"), we can start a new path with the `beginPath()` method, place
    our drawing cursor using `moveTo()`, and then draw consecutive sub paths to form
    a path. We can add one more step to this procedure by closing our path with the
    `closePath()` method of the canvas context to create a shape:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This method essentially tells the canvas context to complete the current path
    by connecting the last point in the path with the start point of the path.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: In the `drawTriangle()` method, we can begin a new path using `beginPath()`,
    position the drawing cursor using `moveTo()`, draw two sides of the triangle using
    `lineTo()`, and then complete the third side of the triangle with `closePath()`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the preceding screenshot, the second triangle from the
    left is filled with a linear gradient. Linear gradients can be created with the
    `createLinearGradient()` method of the canvas context, which is defined by a start
    point and an end point:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we can set the colors of the gradient using the `addColorStop()` method
    which assigns a color value at an offset position along the gradient line from
    0 to 1:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Colors assigned with an offset value of 0 will be positioned at the starting
    point of the linear gradient, and colors assigned with an offset value of 1 will
    be positioned at the end point of the linear gradient. In this example, we've
    positioned a light blue color at the top of the triangle and a dark blue color
    at the bottom of the triangle.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, let''s cover radial gradients. The second triangle from the right
    is filled with a radial gradient composed of six different colors. Radial gradients
    can be created using the `createRadialGradient()` method of the canvas context,
    which requires a starting point, a start radius, an end point, and an end radius:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Radial gradients are defined by two imaginary circles. The first imaginary circle
    is defined by `startX`, `startY`, and `startRadius`. The second imaginary circle
    is defined by `endX`, `endY`, and `endRadius`. Similarly to linear gradients,
    we can position colors along the radial gradient line using the `addColorStop()`
    method of the canvas context.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the fourth type of fill style available with the HTML5 canvas API
    is patterns. We can create a `pattern` object using the `createPattern()` method
    of the canvas context, which requires an `image` object and a repeat option:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `repeatOption` can take one of the four options, `repeat`, `repeat-x`, `repeat-y`,
    and `no-repeat`. Unless otherwise specified, the `repeatOption` is defaulted to
    `repeat`. We'll cover images more in depth in [Chapter 3](ch03.html "Chapter 3. Working
    with Images and Videos"), *Working with Images and Videos*.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Putting it all together: drawing a jet*'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fun with Bezier curves: drawing a cloud'
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to draw a custom shape by connecting a series
    of Bezier curve sub paths to create a fluffy cloud.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![Fun with Bezier curves: drawing a cloud](img/1369_02_05.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a fluffy cloud in the center of the canvas:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Draw a cloud by connecting six Bezier curves:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Define a radial gradient with the `createRadialGradient()` method and fill
    the shape with the gradient:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Set the line width and stroke the cloud:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To draw a fluffy cloud using the HTML5 canvas API, we can connect several Bezier
    curves to form the perimeter of the cloud shape. To create the illusion of a bulbous
    surface, we can create a radial gradient using the `createRadialGradient()` method,
    set the gradient colors and offsets using the `addColorStop()` method, set the
    radial gradient as the fill style using `fillStyle`, and then apply the gradient
    using `fill()`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Drawing transparent shapes
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For applications that require shape layering, it's often desirable to work with
    transparencies. In this recipe, we will learn how to set shape transparencies
    using the global alpha composite.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing transparent shapes](img/1369_02_03.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a transparent circle on top of an opaque square:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Draw a rectangle:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Set the global alpha of the canvas using the `globalAlpha` property and draw
    a circle:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set the opacity of a shape using the HTML5 canvas API, we can use the `globalAlpha`
    property:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `globalAlpha` property accepts any real number between 0 and 1\. We can
    set the `globalAlpha` property to `1` to make shapes fully opaque, and we can
    set the `globalAlpha` property to `0` to make shapes fully transparent.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Working with the context state stack to save and restore styles
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating more complex HTML5 canvas applications, you'll find yourself needing
    a way to revert back to previous style combinations so that you don't have to
    set and reset dozens of style properties at different points in the drawing process.
    Fortunately, the HTML5 canvas API provides us with access to the context state
    stack which allows us to save and restore context states. In this recipe, we'll
    demonstrate how the state stack works by saving the context state, setting the
    global alpha, drawing a transparent circle, restoring the state stack to the state
    before we set the global alpha, and then drawing an opaque square. Let's take
    a look!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the context state stack to save and restore styles](img/1369_02_11.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: Getting ready...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we cover the canvas state stack, it's imperative that you understand
    how a stack data structure works (if you already do, you can skip to the *How
    it works* section).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: A stack data structure is a last in, first out (LIFO) structure. Stacks have
    three major operations – **push**, **pop**, and **stack top**. When an element
    is pushed onto the stack, it gets added to the top of the stack. When the stack
    is popped, the top element is removed from the stack. The *stack top* operation
    simply returns the element at the top of the stack.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready...](img/1369_02_12.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: Take a look at the preceding diagram, which represents the state of a stack
    throughout multiple actions. In step 1, we start out with a stack containing one
    element, element "a". In step 2, the "b" element is pushed onto the stack. In
    step 3, the "c" element is pushed onto the stack. In step 4, we pop the stack,
    which removes the last element pushed onto the stack. Since element "c" was at
    the top of the stack, it's the element that's removed. In step 5, we again pop
    the stack, which removes the last element pushed onto the stack. Since element
    "b" was at the top of the stack, it's the element that's removed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: As we will see in the next section, stacks are a wonderful data structure for
    saving states as they change over time, and then restoring them by popping the
    stack.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw an opaque square on top of a transparent circle:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Draw a rectangle:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Save the context state with `save()`, set the global alpha of the canvas using
    the `globalAlpha` property, draw a circle, and then restore the canvas state with
    `restore()`:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Draw another rectangle (which will be opaque) to show that the context state
    has been restored to the state before the global alpha property was set:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see in the preceding code, by wrapping the circle drawing code with
    a save-restore combination, we are essentially encapsulating any styles that we
    use between the `save()` method and the `restore()` method such that they don't
    affect the shapes drawn afterwards. Save-restore combinations can be thought of
    as a way to induce style scoping, similar to the way that a function induces variable
    scope in JavaScript. Although you might be saying "Well that sounds like a complicated
    way to set the globalAlpha back to 1!" Hold on partner. In the real world, you'll
    typically be dealing with lots of different combinations of styles for different
    sections of code. In this type of scenario, save-restore combinations are a life-saver.
    Writing complex HTML5 canvas applications without save-restore combinations is
    a lot like building a complex web application with one big block of JavaScript
    code using nothing but global variables. Yikes!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we'll see in [Chapter 4](ch04.html "Chapter 4. Mastering Transformations"),
    *Mastering Transformations*, another common usage of the state stack is to save
    and restore transformation states.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Handling multiple transforms with the state stack* in [Chapter 4](ch04.html
    "Chapter 4. Mastering Transformations")'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with composite operations
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll explore composite operations by creating a table of each
    variation. Composite operations are particularly useful for creating complex shapes,
    drawing shapes underneath other shapes instead of on top of them, and creating
    other interesting effects.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with composite operations](img/1369_02_04.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: Getting ready...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a description for each possible composite operation available
    with the HTML5 canvas API, where the red circle represents the source (S) and
    the blue square represents the destination (D). To further develop your understanding
    of composite operations, it helps to look at the corresponding operation while
    reading each description:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Description |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
- en: '| `source-atop` (S atop D) | Display the source image wherever both images
    are opaque. Display the destination image wherever the destination image is opaque
    but the source image is transparent. Display transparency elsewhere. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
- en: '| `source-in` (S in D) | Display the source image wherever both the source
    image and destination image are opaque. Display transparency elsewhere. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
- en: '| `source-out` (S out D) | Display the source image wherever the source image
    is opaque and the destination image is transparent. Display transparency elsewhere.
    |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
- en: '| `source-over` (S over D, default) | Display the source image wherever the
    source image is opaque. Display the destination image elsewhere. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
- en: '| `destination-atop` (S atop D) | Display the destination image wherever both
    images are opaque. Display the source image wherever the source image is opaque
    but the destination image is transparent. Display transparency elsewhere. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
- en: '| `destination-in` (S in D) | Display the destination image wherever both the
    destination image and source image are opaque. Display transparency elsewhere.
    |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
- en: '| `destination -out` (S out D) | Display the destination image wherever the
    destination image is opaque and the source image is transparent. Display transparency
    elsewhere. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
- en: '| `destination -over` (S over D) | Display the destination image wherever the
    destination image is opaque. Display the destination image elsewhere. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
- en: '| `lighter` (S plus D) | Display the sum of the source image and destination
    image. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
- en: '| `xor` (S xor D) | Exclusive OR of the source image and destination image.
    |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
- en: '| `copy` (D is ignored) | Display the source image instead of the destination
    image. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
- en: At the time of writing, dealing with composite operations is quite tricky because
    each of the five major browsers—Chrome, Firefox, Safari, Opera, and IE9—handle
    composite operations differently. Rather than showing you a chart of currently
    supported composite operations by browser at the time of writing, you should instead
    go online and search for something like "canvas composite operation support by
    browser" to see the current support for each browser if you intend on using them.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a live table of composite operations:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'Define styles for the canvases and text displays:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define the sizes and relative distances of each square and circle:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Build an array of composite operations:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Perform each operation and draw the result on the corresponding canvas:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Embed a canvas tag for each operation inside the body of the HTML document:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can set a composite operation by using the `globalCompositeOperation` property
    of the canvas context:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `globalCompositeOperaton` property accepts one of the eleven values, including
    `source-atop`, `source-in`, `source-out`, `source-over`, `destination-atop`, `destination-in`,
    `destination-out`, `destination-over`, `lighter`, `xor`, and `copy`. `Source`
    refers to everything drawn on the canvas after the operation, and `destination`
    refers to everything drawn on the canvas before the operation. Unless otherwise
    specified, the default composite operation is set to `source-over`, which basically
    means that each time something is drawn on the canvas, it's drawn on top of the
    stuff already there.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: We can create an array for each composite operation and then loop through each
    one to draw the result onto the corresponding canvas. For each iteration, we can
    draw a square, set the composite operation, and then draw a circle.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating patterns with loops: drawing a gear'
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll create a mechanical gear by iteratively drawing a radial
    zigzag to form teeth and then drawing circles to form the body of the gear.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating patterns with loops: drawing a gear](img/1369_02_06.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a gear centered on the canvas:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context and set the gear properties:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Draw the gear teeth:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Draw the gear body:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Draw the gear hole:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How it works...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To draw a gear with the HTML5 canvas, we can start by drawing the teeth around
    the gear. One way to draw teeth around a gear is to draw a radial zigzag pattern
    with beveled line joins. One great example of a radial zigzag is a star, which
    has five points along an imaginary inner circle, and five more points along an
    imaginary outer circle. To create a star, we can set up a loop with 10 iterations,
    one iteration for each point. For even iterations, we can draw a point along the
    outer circle, and for odd iterations we can draw a point along the inner circle.
    Since our star would have 10 points, each point would be separated by (2π / 10)
    radians.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: You might be asking yourself "What does a star have to do with gear teeth?".
    If we extend this logic to draw a zigzag shape of say 50 points instead of 10,
    we'll have effectively created a gear with 25 wedged teeth.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Once the gear teeth are taken care of, we can draw a circle and apply a linear
    gradient using the `createLinearGradient()` method, and then draw a smaller circle
    for the hole of the gear.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Animating mechanical gears* in [Chapter 5](ch05.html "Chapter 5. Bringing
    the Canvas to Life with Animation")'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Randomizing shape properties: drawing a field of flowers'
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll embrace our inner hippie by creating a field of colorful
    flowers.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![Randomizing shape properties: drawing a field of flowers](img/1369_02_07.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw randomized flowers all over the canvas:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the constructor of a `Flower` object:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Define a `draw` method of the `Flower` object that creates flower petals with
    a `for` loop and then draws a yellow center:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Set the 2D canvas context:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create a green gradation for the background:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create an array of flower colors:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create a loop that generates flowers with a random position, size, and color:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How it works...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is all about randomizing object properties and drawing the results
    on the screen using HTML5 canvas. The idea is to create a bunch of flowers with
    varying positions, sizes, and colors.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: To help aid us in creating a field of flowers, it's useful to create a `Flower`
    class that defines the properties of a flower and a method for drawing the flower.
    For this recipe, I've kept the number of petals constant, although you can certainly
    experiment with a varying number of petals for each flower on your own.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'Drawing a flower is actually quite similar to our previous recipe, *Creating
    patterns with loops: drawing a gear*, only this time, we''ll be drawing petals
    around a circle instead of zigzags. I''ve found that the easiest way to draw a
    petal with HTML5 canvas is to draw a Bezier curve whose starting point is connected
    to its ending point. The starting and ending points of the Bezier curve are at
    the center of the flower, and the control points are defined with each iteration
    in the `draw()` method of the `Flower` class.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Once our `Flower` class is set up and ready to go, we can create a loop that
    instantiates random `Flower` objects with each iteration and then render them
    with the `draw()` method.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: If you try out this recipe for yourself, you'll see that the flowers are completely
    randomized each time you refresh the screen.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating custom shape functions: playing card suits'
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a royal flush gets your adrenaline going, then this one's for you. In this
    recipe, we'll create drawing functions for the spade, heart, club, and diamond
    suits.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating custom shape functions: playing card suits](img/1369_02_08.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a spade, heart, club, and diamond suit:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the drawSpade() function which draws a spade with four Bezier curves,
    two quadratic curves, and one straight line:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Define the drawHeart() function which draws a heart with four Bezier curves:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Define the drawClub() function which draws a club with four circles, two quadratic
    curves, and one straight line:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Define the drawDiamond() function which draws a diamond with four straight
    lines:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'When the page loads, define the canvas context and then use the four drawing
    functions to render a spade, a heart, a club, and a diamond:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: How it works...
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe demonstrates how any shape can be drawn by combining the four major
    types of sub paths provided by the HTML5 canvas: straight lines, arcs, Quadratic
    curves, and Bezier curves.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: To draw a spade, we can connect four Bezier curves to form the top portion,
    and we can use two Quadratic curves and a straight line to form the bottom portion.
    To draw a heart, we can connect four Bezier curves in much the same way that we
    created the spade, except that the point of the shape is on the bottom instead
    of the top. To create a club, we can draw three circles using arcs for the top
    portion, and similar to the spade, we can use two Quadratic curves and a straight
    line to form the bottom portion. Finally, to draw a diamond, we can simply connect
    four straight lines.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting it all together: drawing a jet'
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll push the limits of the HTML5 canvas drawing API by drawing
    a vector-style jet using lines, curves, shapes, colors, linear gradients, and
    radial gradients.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![Putting it all together: drawing a jet](img/1369_02_09.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a vector-style jet:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context and set the line join style:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Draw the right tail wing:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Draw the right wing:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Draw the body and top of the tail:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Draw the left tail wing:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Draw the left wing:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Draw the side detail:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Draw the nose detail:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Draw the cockpit:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Draw the intake:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: How it works...
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe combines the use of lines, Quadratic curves, Bezier curves, paths,
    shapes, solid fills, linear gradients, and radial gradients. Although it's true
    that the HTML5 canvas is quite rudimentary, it does provide everything that we
    need to make great drawings, including a vector-style jet.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: To draw a jet with the HTML5 canvas, we can start by drawing a jet in Adobe
    Photoshop or some other image editor with a drawing area size equal to the size
    of our canvas, which in this case is 650 x 350 pixels. Next, we can use our cursor
    to find the major points that form the jet shape by hovering over the end points
    of each line in our drawing and recording the x, y coordinates. With these coordinates
    in hand, we can draw the major outline of the jet with a line width of 4, and
    we can go back and fill in the finer details of the jet using a line width of
    2.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's good practice to draw the portions of the drawing farthest away from the
    viewer first because each shape that you draw on the canvas will overlap the previous
    shapes. If you take a look at the preceding code, you'll notice that the right
    wing was drawn first, followed by the body of the jet, followed by the left wing.
    This is because the right wing is farthest from the viewer while the left wing
    is closest to the viewer.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Once the line drawing is complete, we can fill in the jet with solid colors,
    add a linear gradient to the body, and add a radial gradient to the cockpit to
    give the drawing some depth. Finally, we can add a bold red gradation to the nose
    of the plane, preparing it for take-off and inspiring our imagination.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦线条绘制完成，我们可以用纯色填充喷气机，给机身添加线性渐变，给座舱添加径向渐变，使绘画具有一定的深度。最后，我们可以在飞机的机头上添加醒目的红色渐变，为起飞做准备，激发我们的想象力。
