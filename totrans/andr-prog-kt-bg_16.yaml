- en: Chapter 16. Adapters and Recyclers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will achieve much in this brief chapter. We will first go through the theory
    of adapters and lists. We will then look at how we can use a `RecyclerAdapter`
    instance in Kotlin code and add a `RecyclerView` widget to the layout, which acts
    as a list for our UI, and then, through the apparent magic of the Android API,
    bind them together so that the `RecyclerView` instance displays the contents of
    the `RecyclerAdapter` instance and allows the user to scroll through the contents
    of an `ArrayList` instance full of `Note` instances. You have probably guessed
    that we will be using this technique to display our list of notes in the Note
    to self app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Explore another type of Kotlin class – the **inner class**
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look at the theory of adapters and examine binding them to our UI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement the layout with `RecyclerView`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lay out a list item for use in `RecyclerView`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement the adapter with `RecyclerAdapter`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bind the adapter to `RecyclerView`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store notes in `ArrayList` and display them in `RecyclerView` via `RecycleAdapter`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Soon, we will have a self-managing layout that holds and displays all our notes,
    so let's get started.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Inner classes
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, we will use a type of class we have not seen yet – an **inner**
    class. Suppose that we have a regular class called `SomeRegularClass`, with a
    property called `someRegularProperty`, and a function called `someRegularFunction`,
    as shown in this next code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An inner class is a class that is declared inside of a regular class, like
    in this next highlighted code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding highlighted code shows an inner class called `MyInnerClass`, with
    a property called `myInnerProperty`, and a function called `myInnerFunction`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'One advantage is that the outer class can use the properties and functions
    of the inner class by declaring an instance of it, as shown highlighted in the
    next code snippet:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Furthermore, the inner class can also access the properties of the regular
    class, perhaps from the `myInnerFunction` function. This next code snippet shows
    this in action:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This ability to define a new type within a class and create instances and share
    data is very useful in certain circumstances and for encapsulation. We will use
    an inner class in the Note to self app later in this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: RecyclerView and RecyclerAdapter
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 5](ch05.html "Chapter 5. Beautiful Layouts with CardView and ScrollView"),
    *Beautiful Layouts with CardView and ScrollView*, we used a `ScrollView` widget
    and we populated it with a few `CardView` widgets so that we could see it scrolling.
    We could take what we have just learned about `ArrayList` and create a container
    of `TextView` objects, use them to populate a `ScrollView` widget, and, within
    each `TextView`, place the title of a note. This sounds like a perfect solution
    for showing each note so that it is clickable in the Note to self app.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: We could create the `TextView` objects dynamically in Kotlin code, set their
    `text` property to be the title of a note, and then add the `TextView` objects
    to a `LinearLayout` contained in `ScrollView`. But this is imperfect.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The problem with displaying lots of widgets
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This might seem fine, but what if there were dozens, hundreds, or even thousands
    of notes? We couldn't have thousands of `TextView` objects in memory because the
    Android device might simply run out of memory, or, at the very least, grind to
    a halt as it tries to handle the scrolling of such a vast amount of data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Now, also imagine that we wanted (which we do) each note in the `ScrollView`
    widget to show whether it was important, a to-do, or an idea. And how about a
    short snippet from the text of the note as well?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: We would need to devise some clever code that loads and destroys `Note` objects
    and `TextView` objects from `ArrayList`. It can be done – but to do it efficiently
    is far from straightforward.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The solution to the problem with displaying lots of widgets
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fortunately, this is a problem faced so commonly by mobile developers that the
    Android API has a solution built in.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: We can add a single widget, called `RecyclerView` (like an environmentally friendly
    `ScrollView`, but with boosters too), to our UI layout. The `RecyclerView` class
    was designed as a solution to the problem we have been discussing. In addition,
    we need to interact with `RecyclerView` with a special type of class that understands
    how `RecyclerView` works. We will interact with it using an **adapter**. We will
    use the `RecyclerAdapter` class, inherit from it, customize it, and then use it
    to control the data from our `ArrayList` and display it in the `RecyclerView`
    class.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Let's find out a bit more about how the `RecyclerView` and `RecyclerAdapter`
    classes work.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: How to use RecyclerView and RecyclerAdapter
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We already know how to store almost unlimited notes – we can do so in `ArrayList`,
    although we haven't implemented it yet. We also know that there is a UI layout
    called `RecyclerView` that is specifically designed to display potentially long
    lists of data. We just need to see how to put it all into action.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: To add a `RecyclerView` widget to our layout, we can simply drag and drop it
    from the palette onto our UI in the usual way.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't do it yet. Let's just discuss it for a while first.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'The `RecyclerView` class will look like this in the UI designer:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use RecyclerView and RecyclerAdapter](img/B12806_16_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: This appearance, however, is more a representation of the possibilities than
    the actual appearance in an app. If we run the app at once after adding a `RecyclerView`
    widget, we will just get a blank screen.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do to make practical use of a `RecyclerView` widget
    is decide what each item in the list will look like. It could be just a single
    `TextView` widget, or it could be an entire layout. We will use `LinearLayout`.
    To be clear and specific, we will use a `LinearLayout` instance that holds three
    `TextView` widgets for each item in our `RecyclerView` widget. This will allow
    us to display the note status (important/idea/to-do), the note title, and a short
    snippet of text from the actual note contents.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: A list item needs to be defined in its own XML file, then the `RecyclerView`
    widget can hold multiple instances of this list item layout.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Of course, none of this explains how we overcome the complexity of managing
    what data is shown in which list item and how it is retrieved from `ArrayList`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: This data handling is taken care of by our own customized implementation of
    `RecyclerAdapter`. The `RecyclerAdapter` class implements the `Adapter` interface.
    We don't need to know how `Adapter` works internally, we just need to override
    some functions, and then `RecyclerAdapter` will do all the work of communicating
    with our `RecyclerView` widget.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up an implementation of `RecyclerAdapter` to a `RecyclerView` widget
    is certainly more complicated than dragging 20 `TextView` widgets onto a `ScrollView`
    widget, but once it is done we can forget about it, and it will keep on working
    and manage itself regardless of how many notes we add to `ArrayList`. It also
    has built-in features for handling things such as neat formatting and detecting
    which item in a list was clicked.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: We will need to override some functions of `RecyclerAdapter` and add a little
    code of our own.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: What we will do to set up RecyclerView with RecyclerAdapter and an ArrayList
    of notes
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Look at this outline of the required steps so we know what to expect. To get
    the whole thing up and running, we would do the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Delete the temporary button and related code and then add a `RecyclerView` widget
    to our layout with a specific `id` property.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an XML layout to represent each item in the list. We have already mentioned
    that each item in the list will be a `LinearLayout` that contains three `TextView`
    widgets.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new class that inherits from `RecyclerAdapter`, and add code to several
    overridden functions to control how it looks and behaves, including using our
    list item layout and `ArrayList` full of `Note` instances.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add code in `MainActivity` to use `RecyclerAdapter` and the `RecyclerView` widget
    and bind it to our `ArrayList` instance.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `ArrayList` instance to `MainActivity` to hold all our notes, and update
    the `createNewNote` function to add any new notes created in the `DialogNewNote`
    class to this `ArrayList.`
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's go through and implement each of those steps in detail.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Adding RecyclerView, RecyclerAdapter, and ArrayList to the Note to Self project
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the Note to self project. As a reminder, if you want to see the completed
    code and working app based on completing this chapter, it can be found in the
    `Chapter16/Note to self` folder.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the required action in this chapter jumps around between different files,
    classes, and functions, I encourage you to follow along with the files from the
    download bundle open in your preferred text editor for reference.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Removing the temporary "Show Note" button and adding RecyclerView
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These next few steps will get rid of the temporary code we added in [Chapter
    14](ch14.html "Chapter 14. Android Dialog Windows"), *Android Dialog Windows*,
    and set up our `RecyclerView` ready for binding to `RecyclerAdapter` later in
    the chapter:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: In the `content_main.xml` file, remove the temporary `Button` with an `id` of
    `button`, which we added previously for testing purposes.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `onCreate` function of `MainActivity.kt`, delete the `Button` instance
    declaration and initialization along with the lambda that handles its clicks,
    as this code now creates an error. We will delete some more temporary code later
    in this chapter. Delete the code shown next:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, switch back to `content_main.xml` in design view and drag a **RecyclerView**
    widget from the **Common** category of the palette onto the layout.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `id` property to `recyclerView`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have removed the temporary UI aspects from our project, and we have a
    `RecyclerView` widget complete with a unique `id` attribute ready to be referenced
    from our Kotlin code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Creating a list item for RecyclerView
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we need a layout to represent each item in our `RecyclerView` widget.
    As previously mentioned, we will use a `LinearLayout` instance that holds three
    `TextView` widgets.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the steps needed to create a list item for use within `RecyclerView`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `layout` folder in the project explorer and select **New
    | Layout resource file**. Enter `listitem` in the **Name:** field and make the
    **Root element:** `LinearLayout`. The default orientation attribute is vertical,
    which is just what we need.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at the next screenshot to see what we are trying to achieve with the remaining
    steps of this section. I have annotated it to show what each part will be in the
    finished app:![Creating a list item for RecyclerView](img/B12806_16_02.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag three `TextView` instances onto the layout, one above the other, as per
    the reference screenshot. The first (top) will hold the note status/type (idea/important/to-do),
    the second (middle) will hold the note title, and the third (bottom) will hold
    a snippet of the note itself.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the various attributes of the `LinearLayout` instance and the `TextView`
    widgets as shown in the following table:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Widget type** | **Property** | **Value to set to** |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| LinearLayout | `layout_height` | `wrap_contents` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '| LinearLayout | `Layout_Margin all` | `5dp` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| TextView (top) | `id` | `textViewStatus` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| TextView (top) | `textSize` | `24sp` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '| TextView (top) | `textColor` | `@color/colorAccent` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: '| TextView (middle) | `id` | `textViewTitle` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
- en: '| TextView (middle) | `textSize` | `24sp` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
- en: '| TextView (top) | `id` | `textViewDescription` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: Now we have a `RecylerView` widget for the main layout and a layout to use for
    each item in the list. We can go ahead and code our `RecyclerAdapter` implementation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Coding the RecyclerAdapter class
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now create and code a brand-new class. Let's call our new class `NoteAdapter`.
    Create a new class called `NoteAdapter` in the same folder as the `MainActivity`
    class (and all the other classes) in the usual way.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the code for the `NoteAdapter` class by adding these `import` statements
    and inheriting from the `RecyclerView.Adapter` class, then add the two properties
    as shown. Edit the `NoteAdapter` class to be the same as the following code that
    we have just discussed:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous code, we declare and initialize two properties of the `NoteAdapter`
    class using the primary constructor. Notice the parameters of the constructor.
    It receives a `MainActivity` reference as well as a `List` reference. This implies
    that, when we use this class, we will need to send in a reference to the main
    activity of this app (`MainActivity`) as well as a `List` reference. We will see
    what use we put the `MainActivity` reference to shortly, but we can sensibly guess
    that the reference to a `List` with a type of `<Note>` will be a reference to
    our `Note` instances, which we will soon code in the `MainActivity` class. `NoteAdapter`
    will then hold a permanent reference to all the users' notes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: You will notice, however, that the class declaration and other areas of the
    code are underlined in red, showing that there are errors in our code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: The first error is because the `RecylerView.Adapter` class (which we are inheriting
    from) needs us to override some of its abstract functions.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We discussed abstract classes and their functions in [Chapter 11,](ch11.html
    "Chapter 11. Inheritance in Kotlin") *Inheritance in Kotlin*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'The quickest way to do this is to click the class declaration, hold the *Alt*
    key, and then tap the *Enter* key. Choose **Implement members,** as shown in the
    next screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the RecyclerAdapter class](img/B12806_16_03.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: 'In the window that follows, hold down *Shift* and left-click all three options
    (functions to add) and then click **OK**. This process adds the following three
    functions:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: The `onCreateViewHolder` function, which is called when a layout for a list
    item is required
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onBindViewHolder` function, which is called when the `RecyclerAdapter`
    instance is bound to (connected/associated with) the `RecyclerView` instance in
    the layout
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getItemCount` function, which will be used to return the number of `Note`
    instances in `ArrayList`
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will soon add code to each of these functions to do the required work at
    the specific time.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Note, however, that we still have multiple errors in our code, including in
    the newly autogenerated functions as well as the class declaration. We need to
    do some work to resolve these errors.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: The errors are because the `NoteAdapter.ListItemHolder` class does not exist.
    `ListItemHolder` was added by us when we extended `NoteAdapter`. It is our chosen
    class type that will be used as the holder for each list item. Currently, it doesn't
    exist – hence the error. The two functions that also have the same error for the
    same reason were autogenerated when we asked Android Studio to implement the missing
    functions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Let's solve the problem by making a start on the required `ListItemHolder` class.
    It is useful to us for `ListItemHolder` instances to share data/variables with
    `NoteAdapter`; therefore, we will create `ListItemHolder` as an inner class.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the error in the class declaration and select **Create class ''ListItemHolder''**,
    as shown in this next screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the RecyclerAdapter class](img/B12806_16_05.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: In the pop-up window that follows, choose **NoteAdapter** to generate `ListItemHolder`
    inside `NoteAdapter`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code has been added to the `NoteAdapter` class:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'But we still have multiple errors. Let''s fix one of them now. Hover your mouse
    over the red-underlined error in the class declaration as shown in the next screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the RecyclerAdapter class](img/B12806_16_06.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'The error message reads **Type argument is not within its bounds. Expected:**
    **RecyclerView.ViewHolder! Found: NoteAdapter.ListItemHolder**. The reason for
    this is because we may have added `ListItemHolder`, but `ListItemHolder` must
    also implement `RecyclerView.ViewHolder` in order to be used as the correct type.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'Amend the declaration of the `ListItemHolder` class to match this code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now the error is gone from the `NoteAdapter` class declaration, but because
    we also implemented `View.OnClickListener`, we need to implement the `onClick`
    function. Furthermore, `ViewHolder` doesn''t provide a default constructor, so
    we need to do it. Add the following `onClick` function (empty for now) and this
    `init` block (empty for now) to the `ListItemHolder` class:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure you added the code to the inner `ListItemHolder` class and not the `NoteAdapter`
    class.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s clear up the final remaining errors. When the `onBindViewHolder` function
    was autogenerated, Android Studio didn''t add the type for the `holder` parameter.
    This is causing an error in the function and an error in the class declaration.
    Update the `onBindViewHolder` function''s signature, as shown in the next code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `onCreateViewHolder` function signature, the return type has not been
    autogenerated. Amend the signature of the `onCreateViewHolder` function, as shown
    in this next code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As a last bit of good housekeeping, let''s delete the three `// TODO…` comments
    that were autogenerated but not required. There is one in each of the autogenerated
    functions. They look like the one highlighted in this next screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the RecyclerAdapter class](img/B12806_16_10.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: As you delete the `TODO…` comments, more errors will appear. We need to add
    `return` statements to some of the autogenerated functions. We will do this as
    we proceed with coding the class.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: After much tinkering and autogenerating, we finally have an almost error-free
    `NoteAdapter` class, complete with overridden functions and an inner class that
    we can code to get our `RecyclerAdapter` instance working. In addition, we can
    write code to respond to clicks (in `onClick`) on each of our `ListItemHolder`
    instances.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'What follows is a complete listing of what the code should look like at this
    stage (excluding the import statements):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You could have just copy and pasted the preceding code instead of enduring the
    machinations of the previous pages, but then you wouldn't have experienced the
    process of implementing interfaces and inner classes so closely.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's code the functions and get this class operational.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Coding the onCreateViewHolder function
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we will adapt the autogenerated `onCreateViewHolder` function. Add the
    highlighted lines of code to the `onCreateViewHolder` function and study them:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This code works by initializing `itemView` using `LayoutInflater` and our newly
    designed `listitem` layout. It then returns a new `ListItemHolder` instance, complete
    with an inflated and ready-to-use layout.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Coding the onBindViewHolder function
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we will adapt the `onBindViewHolder` function. Add the highlighted code
    to make the function the same as this code, and be sure to study the code as well:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: First, the code truncates the text to 15 characters so that it looks sensible
    in the list. Note that if the user enters a very short note below 15 characters
    this will cause a crash. It is left as an exercise for the reader to come back
    to this project and discover a solution to this imperfection.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: It then checks what type of note it is (idea/to-do/important) and assigns the
    appropriate label from the string resources using a `when` expression.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: This new code has left some errors in the code with `holder.title`, `holder.description`,
    and `holder.status`, because we need to add them to our `ListItemHolder` inner
    class. We will do this very soon.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Coding getItemCount
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Amend the code in the `getItemCount` function, as shown next:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This function is used internally by the class, and it supplies the current number
    of items in `List`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Coding the ListItemHolder inner class
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we can turn our attention to the `ListItemHolder` inner class. Adapt the
    `ListItemHolder` inner class by adding the following highlighted code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `ListItemHolder` properties get a reference to each of the `TextView` widgets
    in the layout. The `init` block code sets the whole view as clickable so that
    the OS will call the next function we discuss, `onClick`, when a holder is clicked.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: In `onClick`, the call to `mainActivity.showNote` has an error because the function
    doesn't exist yet, but we will fix that in the next section. The call will simply
    show the clicked note using our custom `DialogFragment` instance.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Coding MainActivity to use the RecyclerView and RecyclerAdapter classes
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, switch over to the `MainActivity` class in the editor window. Add these
    three new properties to the `MainActivity` class and remove the temporary code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: These three properties are our `ArrayList` instance for all our `Note` instances,
    our `RecyclerView` instance, and an instance of our `NoteAdapter` class.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Adding code to onCreate
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following highlighted code in the `onCreate` function after the code
    that handles the user pressing on the floating action button (shown again for
    context):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, we initialize `recyclerView` with the `RecyclerView` widget from the layout.
    Our `NoteAdapter` (`adapter`) instance is initialized by calling the constructor
    we coded. Note that a reference to `MainActivity` (`this`) and the `ArrayList`
    instance is passed in, just as required by the class we have coded previously.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a new object – a `LayoutManager` object. In the next four lines
    of code, we configure some properties of `recyclerView`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: The `itemAnimator` property and `addItemDecoration` function make each list
    item a little more visually enhanced with a separator line between each item in
    the list. Later, when we build a "Settings" screen, we will give the user the
    option to add and remove this separator.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: The last thing we do is initialize the `adapter` property of `recylerView` with
    our adapter, which combines our adapter with our view.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will make some changes to the `createNewNote` function.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the createNewNote function
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `createNewNote` function, delete the temporary code we added in [Chapter
    14](ch14.html "Chapter 14. Android Dialog Windows"), *Android Dialog Windows*
    (shown commented out). and add the new highlighted code shown next:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The new highlighted code adds a note to the `ArrayList` instance instead of
    simply initializing a solitary `Note` object, which has now been commented out.
    Then, we need to call `notifyDataSetChanged`, which lets our adapter know that
    a new note has been added.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Coding the showNote function
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the `showNote` function, which is called from the `NoteAdapter` class using
    the reference to this class that was passed into the `NoteAdapter` constructor.
    Or, more accurately, it is called from the `ListerItemHolder` inner class when
    one of the items in the `RecyclerView` widget is tapped by the user. Add the `showNote`
    function to the `MainActivity` class:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the errors in the `NoteAdapter.kt` file are now gone.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: The code just added will launch a new instance of `DialogShowNote`, passing
    in the specific required note as referenced by `noteToShow`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Running the app
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can now run the app and enter a new note, as shown in this next screenshot:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the app](img/B12806_16_07.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: 'After you have entered several notes of several types, the list (`RecyclerView`)
    will look something like this next screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the app](img/B12806_16_08.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: 'And, if you click to view one of the notes, it will look like this:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，如果您点击查看其中一条笔记，它会看起来像这样：
- en: '![Running the app](img/B12806_16_09.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/B12806_16_09.jpg)'
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 笔记
- en: '**Reader challenge**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**读者挑战**'
- en: We could have spent more time formatting the layouts of our two dialog windows.
    Why not refer to [Chapter 5](ch05.html "Chapter 5. Beautiful Layouts with CardView
    and ScrollView"), *Beautiful Layouts with CardView and ScrollView*, as well as
    the Material Design website, [https://material.io/design/](https://material.io/design/),
    and do a better job than this. Furthermore, you could enhance the `RecyclerView`
    list of notes by using `CardView` instead of `LinearLayou` `t`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以花更多时间格式化我们的两个对话框窗口的布局。为什么不参考[第5章](ch05.html "第5章。使用CardView和ScrollView创建美丽的布局")，*使用CardView和ScrollView创建美丽的布局*，以及Material
    Design网站，[https://material.io/design/](https://material.io/design/)，做得比这更好。此外，您可以通过使用`CardView`而不是`LinearLayout`来增强`RecyclerView`的笔记列表。
- en: 'Don''t spend too long adding new notes, however, because there is a slight
    problem: close and restart the app. Uh oh, all the notes are gone!'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 不要花太长时间添加新的笔记，因为有一个小问题：关闭并重新启动应用程序。哦哦，所有的笔记都消失了！
- en: Frequently asked questions
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 经常问的问题
- en: Q.1) I still don't understand how `RecyclerAdapter` works?
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Q.1) 我仍然不明白`RecyclerAdapter`是如何工作的？
- en: 'A) That''s because we haven''t really discussed it. The reason we have not
    discussed the behind-the-scenes details is because we don''t need to know them.
    If we override the required functions, as we have just seen, everything will work.
    This is how `RecyclerAdapter` and most other classes we use are meant to be: hidden
    implementation with public functions to expose the necessary functionality.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: A) 那是因为我们实际上并没有讨论过。我们没有讨论幕后的细节是因为我们不需要知道它们。如果我们重写所需的函数，就像我们刚刚看到的那样，一切都会正常工作。这就是`RecyclerAdapter`和我们使用的大多数其他类的意图：隐藏实现并公开函数以暴露必要的功能。
- en: Q.2) I feel like I *need* to know what is going on inside `RecyclerAdapter`
    and other classes as well. How can I do this?
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Q.2) 我觉得我*需要*知道`RecyclerAdapter`和其他类的内部情况。我该怎么做？
- en: A) It is true that there are more details for `RecyclerAdapter` (and almost
    every class that we use in this book) that we don't have the space to discuss.
    It is good practice to read the official documentation of the classes you use.
    You can read more about it at [https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: A) 的确，`RecyclerAdapter`（以及我们在本书中使用的几乎每个类）有更多细节，我们没有空间来讨论。阅读您使用的类的官方文档是一个好的做法。您可以在[https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter)上阅读更多信息。
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now we have added the functionality to hold multiple notes and implemented the
    ability to display them.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了保存多个笔记的功能，并实现了显示它们的能力。
- en: We achieved this by learning about and using the `RecyclerAdapter` class, which
    implements the `Adapter` interface, which allows us to bind together a `RecyclerView`
    instance and an `ArrayList` instance, allowing for the seamless display of data
    without us (the programmer) having to worry about the complex code that is part
    of these classes, and which we don't even see.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过学习和使用`RecyclerAdapter`类来实现了这一点，该类实现了`Adapter`接口，允许我们将`RecyclerView`实例和`ArrayList`实例绑定在一起，从而无缝显示数据，而我们（程序员）不必担心这些类的复杂代码，甚至看不到。
- en: In the next chapter, we will start with making the user's notes persist when
    they quit the app or switch off their device. In addition, we will create a "Settings"
    screen, and see how we can make the settings persist as well. We will use different
    techniques to achieve each of these goals.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用户的笔记在退出应用程序或关闭设备时持久化。此外，我们将创建一个“设置”屏幕，并看看如何使设置也持久化。我们将使用不同的技术来实现这些目标。
