- en: Implementing a Generic Interface to Accomplish Sorting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn upcasting and downcasting and then how to implement
    a generic interface and how exactly that helps us.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you have a list of objects, which you have made of your own type,
    and you want to sort them. You'll need to figure out just how you can sort these
    objects. This comes from implementing `IComparable`, a generic interface that
    can act on different data types.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to sort and display results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open up a project and click on the <html> tab. Once again, the only thing that
    you need to put in there is a button. For this, go to Toolbox and grab a `Button`
    control. Drag and drop it below the line beginning with `<form id=...` and change
    the text on the button to say `Sort and Show`. Now, put a `<br>` tag in there
    at the end of the line and keep the label as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, go to the Design view, where you should see only the Sort and Show button
    as shown in *Figure 3.3.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23d3ad22-094e-44ca-b8ea-101219d785a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3.1: Adding a button'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a generics interface class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, go to Solution Explorer. Right-click on the name of the website, select
    Add, and then click on Class. Name the class `GenInterface` and then click on
    OK. When the Visual Studio message comes up, click on Yes. Remember, this is just
    an example.
  prefs: []
  type: TYPE_NORMAL
- en: The code for the `GenInterface` class is really complex. I'll create it now
    line-by-line, explaining what I'm doing and why I'm doing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, delete everything except `using System;` at the very top. Next, you''ll
    make the class called `Quad` for a four-sided shape of some kind. Enter the following
    after `using System`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This needs `System` so that we can use `IComparable`. If you right-click on
    it and select Go To Definition in the drop-down menu (*F12*), you can see the
    definition of this thing. You will see `namespace System` near the top, and the
    `public intCompareTo (T other);` function after the `Returns` definition, as shown
    in *Figure 3.3.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f2cc003-2a23-4922-807b-b2a11ca4399d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3.2: The definition of IComparable'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that it returns an integer. So, when we implement this interface, we
    have to keep that in mind. Now, close the definition window.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our particular case, enter the following text below the open curly brace
    under the line beginning with `public class Quad...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to set the value, enter the following between a set of curly braces beneath
    the preceding lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After all, every quadrilateral shape, which is a square, rectangle, or rhombus,
    all have a name, don't they? So, it's a good idea to centralize the name feature
    in the `Quad class`.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, because `IComparable` has a function, right-click on it, select Quick
    Actions, and choose Implement interface from the popup. Now, we have to write
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, delete `throw new NotImplementedException()`. Now, we will implement
    the interface in a way that''s sufficient to illustrate the point. For this, enter
    the following beneath the open curly brace under the `public int CompareTo(Quad
    other)` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `this` means the current object, and the name of this object is compared
    to `other.name`, meaning the other object. Look at where it says `(Quad other)`
    in the line above this one; in other words, we''re comparing two `Quads`. So,
    in the one on the left, `this` is the one on which the function is being invoked
    and the other `Quad` class is the one against which it''s being compared. So,
    if `this` is less than `0`, we will return a number such as `-1`, else it can
    return some other value, such as `1`. Enter the following between a set of curly
    braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have just implemented `CompareTo`. Now, notice that the *this* is not necessary.
    You can remove it and it will still work. Remember, however, that name essentially
    means the current object under which `CompareTo` will be invoked. This is why
    I like to have the `this` keyword present, because it is more suggestive of what
    I want to know.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, what this line is saying is that if the current object when compared
    to the other name is less than `0`, then we return `-1`, which means that the
    current object will come before the next object in the list when you sort it.
    That's a simple interpretation.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a virtual function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, in the next stage, we will add a virtual function called `Perimeter`.
    For this, enter the following beneath the closed curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we''ll centralize as much as we can. So, enter the following within
    a set of curly braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The specific name can come from this line, because the `name` instance variable
    is declared above in `private string name`. However, the `Perimeter` will come
    from the derived classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'So now, enter the following beneath the preceding closed curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Adding refinements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we add class-specific refinements; for this, enter the following between
    a set of curly braces beneath the preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `string n` is the name and `doubles` is the side. Then, call the `base`
    class constructor with the name (`n`) and then enter `sideLength = s`. Remember,
    when you are calling the `base` class constructor, you're reusing code.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve chosen to express this as a single line just to save space. Remember
    that, normally, it would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have to implement an override version of `Perimeter`. So, enter the
    following beneath the preceding closed curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we want to keep `return base.Perimeter()`, which appears automatically,
    because it provides the useful default functionality, `$"The perimeter of {name}
    is ";`, from the preceding return line: we don''t want to keep typing that. What
    we do want to do is add a small refinement. So, add the following refinement to
    `return base.Perimeter()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This means four times the `sideLength` variable, because to find the perimeter
    of a square, you take four multiplied by the length of one side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refinement comes from the derived class generic functionality, which is equally
    applicable to all the classes you stick into a virtual method in the `base` class:
    you don''t have to keep writing it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can repeat this for our rectangle. So, copy the `public class Square
    : Quad` block (*Ctrl* + *C*) and then paste (*Ctrl* +& *V*) down below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename this block to `Rectangle`. This is also derived from `Quad`, so that's
    fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change where it says `sideLength`; because a rectangle has two different side
    lengths, so change that to say `sideOne` and `sideTwo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change `public Square` to `public Rectangle` as the name of the constructor.
    It calls the base class constructor with the name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, initialize the other two, so now you'll say `double s1` and `double s2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you have to initialize the fields, so say `sideOne = s1;` and `sideTwo
    = s2;`. That''s it: they''ve been initialized.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now again, override `Perimeter` inside the `Rectangle` class as shown earlier.
    Here, you specify the bit that applies to rectangles, so `(2 * sideOne + 2 * sideTwo)`.
    Make sure that you enclose this within parentheses, so that the calculation is
    done first and then it's combined together with `base.Perimeter` with the rest
    of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, that''s that class. For reference, the complete version of the `GenInterface`
    class, including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Entering the reference code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, I'll do my reference code. This code is mechanical. There's a lot of it,
    but it's mechanical. Remember, the big idea here is that `IComparable` is being
    implemented using the `CompareTo` method inside the `Quad` class, which means
    that now when we stick different shapes into a list of quads, we will be able
    to sort them in some fashion. So, now our names will be sorted. In our case, we'll
    be sorting them by name.
  prefs: []
  type: TYPE_NORMAL
- en: Now go to `Default.aspx`, and enter the Design view. Double-click on the Sort
    and Show button. This takes us into `Default.aspx.cs`. Delete the `Page_Load`
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, between the set of curly braces under the line beginning with `protected
    void Button1_Click...`, the first thing we''ll do is to put a `Quad` on the left-hand
    side and we''ll call it `sqr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Upcasting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Notice that I've written `new Square`. This is *upcasting*. Here, this involves
    converting the object on the right-hand side, because it's derived from its `Quad`.
    On the left-hand side, you can make a `Quad` namespace and put an object that
    is of a derived type on the right side; so, we'll call this one `Square` and then
    enter a side length of `4`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following directly below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Again, we put a `Quad` namespace on the left-hand side, and this time we called
    it `rect`. We give it the name `Rectangle`, and then we put in two sides of lengths
    `2` and `5`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can store this in a list, for example, which you can sort. Imagine
    if you had many of these, you would need a way to sort this information. So now,
    go to the top of this file, and enter the following beneath `using System`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, under the `Quad rect...` line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We'll call this list `new List<Quad>`, and to initialize a list you can always
    use an array. To do this, type `new Quad` and then initialize it with `sqr` and
    `rect`. This is how you can always initialize a list within an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, to sort the list, enter the following directly below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: So, this makes sense now. It doesn't give an error. Imagine if you didn't have
    `IComparable<Quad>` at the top of the `GenInterface` class. This sort would not
    work. If you cut `IComparable<Quad>`, and then take the `CompareTo` method out,
    you will have problems. So, for our purposes, we now have a way of sorting these
    `Quads` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the last stage, start by entering the following below the `Sort` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: So, `is` is a new keyword. You can use it to check whether something is of a
    certain type.
  prefs: []
  type: TYPE_NORMAL
- en: Downcasting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will talk about *downcasting*, which means going from, for example,
    a parent type to a child type. Enter the following between a set of curly braces
    below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, beneath the closed curly brace after the preceding line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can call the following code; so, copy the `sampLabel.Text...` line
    and paste it between a set of curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Be sure to change `Square` to `Rectangle`, so that it gets cast down to a rectangle,
    and then the `Perimeter` function on the rectangle will be called. When you hover
    your mouse over `Perimeter` in the preceding two lines, the popups show `string
    Square.Perimeter()` and `string Square.Perimeter()`, respectively. If you removed
    `(Rectangle)` from the preceding line and hovered your mouse over `Perimeter`,
    the popup will show `string Quad.Perimeter()`. Do you understand? This is why
    I have the cast: because it changes the way the functions are recognized.'
  prefs: []
  type: TYPE_NORMAL
- en: This is downcasting from a parent to a child class. So, when we talk about bulk
    actions, you cannot cast to a parent class, perform a bulk action like a sort,
    or if you want to add refinements called child classes and child class objects,
    then you can downcast.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s take a look. Open the program in your browser and click on the
    Sort And Show button. The results are shown in *Figure 3.3.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a77dc3d-04e7-4ef6-bd2c-0cd90ea664d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3.3: The results of running the program'
  prefs: []
  type: TYPE_NORMAL
- en: This is indeed the perimeter of the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: These are the basics of upcasting, downcasting, and implementing a generic interface
    such as `IComparable`. This is really complex code, but I hope you've learned
    a lot.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned upcasting, downcasting, and then how to implement
    a generic interface and how that exactly helps us. You created a Generics Interface
    class and a Quad class, implemented an interface, added a virtual `Perimeter`
    function, added refinements to the code, and entered a lot of mechanical reference
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about generic delegates.
  prefs: []
  type: TYPE_NORMAL
