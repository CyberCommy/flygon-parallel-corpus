- en: Making the VR Game Dynamic Using MERN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will extend the MERN skeleton application to build the MERN
    VR game application, and use it to make the static React 360 game developed in
    the previous chapter dynamic by replacing the sample game data with game details
    fetched directly from the MERN server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make MERN VR Game a complete and dynamic game application, we will implement
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A game model schema to store game details in MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APIs for game CRUD operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React views for game create, edit, list, and delete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the React 360 game to fetch data from API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading the VR game with dynamic game data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic MERN VR Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Registered users on MERN VR Game will be able to make and modify their own
    games by providing an equirectangular image for the game world, and the VR object
    resources, including transform property values for each object to be placed in
    the game world. Any visitor to the application will be able to browse through
    all the games added by the makers, and play any game to find and collect the 3D
    objects in the game world that are relevant to the clue or description of each
    game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7805f18a-fdd7-43b7-acd5-6651f78976de.png)The code for the complete
    MERN VR Game application is available on GitHub at [github.com/shamahoque/mern-vrgame](https://github.com/shamahoque/mern-vrgame). You
    can clone this code and run the application as you go through the code explanations
    in the rest of this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The views needed for the features related to creating, editing, and listing
    VR games will be developed by extending and modifying the existing React components in
    the MERN skeleton application. The component-tree pictured next shows all the
    custom React components that make up the MERN VR Game frontend developed in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a646f3f9-7903-4376-8e5f-69707ef64ea7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Game model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 10](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml), *Developing a Web-Based
    VR Game*, the *Game data structure* section laid out the details needed for each
    game in order to implement the scavenger hunt features defined for the gameplay.
    We will design the game schema based on these specific details about the game,
    its VR objects, and also a reference to the game maker.
  prefs: []
  type: TYPE_NORMAL
- en: Game schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Mongoose schema for the game model defined in `game.model.js`, we will
    add fields for the
  prefs: []
  type: TYPE_NORMAL
- en: Game's name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: World image URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clue text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array containing details of the VR objects to be added as collectable answer
    objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array containing details of the VR objects that are wrong objects and cannot
    be collected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timestamps indicating when a game is created and updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reference to the user who made the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `GameSchema` will be defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/models/game.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: VRObject schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `answerObjects` and `wrongObjects` fields in the game schema will both be
    arrays of VRObject documents, and the VRObject Mongoose schema will be defined
    separately with fields for storing the URLs of the OBJ file and MTL file, along
    with the React 360 `transform` values for each VR object, the `scale` value, and
    `color` value.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/models/game.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When a new game document is saved to the database, the `answerObjects` and `wrongObjects`
    arrays will be populated with VRObject documents that adhere to this schema definition.
  prefs: []
  type: TYPE_NORMAL
- en: Array length validation in the game schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `answerObjects` and `wrongObjects` arrays in a game document must contain
    at least one VRObject document in each array when being saved in the game collection.
    To add validation for a minimum array length to the game schema, we will add the
    following custom validation checks to the `answerObjects` and `wrongObjects` paths
    in `GameSchema`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/models/game.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These schema definitions will cater to all the requirements for developing a
    dynamic VR game according to the specifications of the MERN VR Game.
  prefs: []
  type: TYPE_NORMAL
- en: Game APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The backend in the MERN VR Game will expose a set of CRUD APIs for creating,
    editing, reading, listing, and deleting games from the database, which can be
    used in the frontend of the application, including in the React 360 game implementation,
    with fetch calls.
  prefs: []
  type: TYPE_NORMAL
- en: The create API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A user who is signed in to the application will be able to create new games
    in the database using the `create` API.
  prefs: []
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the backend, we will add a `POST` route in `game.routes.js`, that verifies
    that the current user is signed in and authorized, and then creates a new game
    with the game data passed in the request.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To process the `:userId` param and retrieve the associated user from the database,
    we will utilize the `userByID` method from the user controller. We will also add
    the following to the game routes, so the user is available in the `request` object
    as `profile`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `game.routes.js` file will be very similar to the `user.routes` file, and
    to load these new routes in the Express app, we need to mount the game routes
    in `express.js`, just as we did for the auth and user routes.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `create` controller method is executed when a POST request is received at
    `'/api/games/by/:userId'` with the request body containing the new game data.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this `create` method, a new game document is created using the game schema
    and the data passed in the request body from the client side. Then this document
    is saved in the `Game` collection after the user reference is set as the game
    maker.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the frontend, we will add a corresponding `fetch` method in `api-game.js`
    to make a `POST` request to the `create` API by passing the form data collected
    from the signed-in user.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: List API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It will be possible to fetch a list of all the games in the `Game` collection
    from the backend using the list API.
  prefs: []
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add a GET route to the game routes to retrieve all the games stored
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A `GET` request to `/api/games` will execute the `list` controller method.
  prefs: []
  type: TYPE_NORMAL
- en: Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `list` controller method will query the `Game` collection in the database
    to return all the games in the response to the client.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the frontend, to fetch the games using this list API, we will set up a `fetch`
    method in `api-game.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: List by maker API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application will also allow us to fetch the games made by a specific user
    with the list by maker API.
  prefs: []
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the game routes, we will add a `GET` route to retrieve the games made by
    a specific user.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: A `GET` request to this route will execute the `listByMaker` method in the game
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `listByMaker` controller method will query the Game collection in the database
    to get the matching games.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the query to the Game collection, we find all the games where the `maker`
    field matches the user specified in `req.profile`.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the frontend, to fetch the games for a specific user with this list by the
    maker API, we will add a `fetch` method in `api-game.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Read API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Individual game data will be retrieved from the database using the `read` API
    at `'/api/game/:gameId'`.
  prefs: []
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the backend, we will add a `GET` route that queries the `Game` collection
    with an ID and returns the game in the response.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `:gameId` param in the route URL will be processed first to retrieve the
    individual game from the database. So we will also add the following to the game
    routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `:gameId` param in the request to the read API will call the `gameByID`
    controller method, which is similar to the `userByID` controller method. It will
    retrieve the game from the database and attach it to the `request` object to be
    used in the `next` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `next` method, in this case the `read` controller method, simply returns
    this `game` object in the response to the client.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the frontend code, we will add a `fetch` method to utilize this read API
    to retrieve the details of an individual game according to its ID.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This `read` API will be used for the React views fetching a game detail and
    also the React 360 game view, which will render the game interface.
  prefs: []
  type: TYPE_NORMAL
- en: Edit API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authorized users who are signed in and also the maker of a specific game will
    be able to edit the details of that game using the `edit` API.
  prefs: []
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the backend, we will add a `PUT` route that allows an authorized user to
    edit one of their games.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A PUT request to `'/api/games/:gameId'` will first execute the `gameByID` controller
    method to retrieve the specific game’s details. The `requireSignin` auth controller
    method will also be called to ensure the current user is signed in. Then the `isMaker`
    controller method will determine whether the current user is the maker of this
    specific game before finally running the game `update` controller method to modify
    the game in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `isMaker` controller method ensures that the signed-in user is actually
    the maker of the game being edited.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `update` method in the game controller will take the existing game details
    and the form data received in the request body to merge the changes, and save
    the updated game to the Game collection in the database.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `edit` API is called in the view using a `fetch` method that takes the form
    data and sends it with the request to the backend along with user credentials.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Delete API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An authenticated and authorised user will be able to delete any of the games
    they made on the application using the `delete` game API.
  prefs: []
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the backend, we will add a `DELETE` route that allows an authorized maker
    to delete one of their own games.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The flow of the controller method execution on the server after receiving the
    DELETE request at `'api/games/:gameId'` will be similar to the edit API, with
    the final call made to the `remove` controller method instead of `update`.
  prefs: []
  type: TYPE_NORMAL
- en: Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `remove` controller method deletes the specified game from the database,
    when a DELETE request is received at `'/api/games/:gameId'` and it has been verified
    that the current user is the original maker of the given game.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add a corresponding `remove` method in `api-game.js` to make a `delete`
    fetch request to the delete API.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: With these game APIs in place, we can build out the React views for the application
    and also update the React 360 game view code to fetch and render dynamic game
    details.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and editing games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users registered on MERN VR Game will be able to make new games and modify these
    games from within the application. We will add React components that allow users
    to modify game details and VR object details for each game.
  prefs: []
  type: TYPE_NORMAL
- en: Making a new game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user signs into the application, they will see a MAKE GAME link on the
    menu that will navigate them to the `NewGame` component containing a form to create
    a new game.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will update the navigation menu to add the MAKE GAME button, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c554d5ac-420f-4762-8084-6a88044afb1f.png)'
  prefs: []
  type: TYPE_IMG
- en: In the `Menu` component, we will add the `Link` to the route for the `NewGame`
    component, right before the MY PROFILE Link, in the section that renders only
    when the user is authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: NewGame component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewGame` component uses the `GameForm` component to render the form elements
    the user will fill out to create a new game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a825261e-e98e-497a-b21e-17a07727bdfd.png)'
  prefs: []
  type: TYPE_IMG
- en: The `GameForm` contains all the form fields, and it takes the `onSubmit` method
    that should be executed when the user submits the form, as a prop from the `NewGame`
    component along with any server-returned error messages.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/NewGame.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `clickSubmit` method uses the create `fetch` method from `api-game.js` to
    make a POST request to the `create` API with the game form data and user details.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/NewGame.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We will add a `PrivateRoute` in `MainRouter`, so the `NewGame` component loads
    in the browser at the `/game/new` path.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Editing the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users will be able to edit the games they made using the `EditGame` component,
    which will render the game form fields pre-populated with the existing game's
    details.
  prefs: []
  type: TYPE_NORMAL
- en: EditGame component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like in the `NewGame` component, the `EditGame` component will also use
    the `GameForm` component to render the form elements, but this time the fields
    will show the current values of the game fields, and users will be able to update
    these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2742c2b7-045f-4230-8734-f6eb3b5fc639.png)'
  prefs: []
  type: TYPE_IMG
- en: In the case of the `EditGame` component, `GameForm` will take the given game's
    ID as a prop so it can fetch the game details, in addition to the `onSubmit` method
    and server-generated error message, if any.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/EditGame.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `clickSubmit` method for the edit form will use the `update` fetch method
    in `api-game.js` to make a PUT request to the edit API with the form data and
    user details.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/EditGame.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `EditGame` component will load in the browser at the `/game/edit/:gameId` path,
    declared in a `PrivateRoute` in `MainRouter`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The GameForm component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `GameForm` component used in both the `NewGame` and `EditGame` components
    contains the elements that allow users to enter game details and VR object details
    for a single game. It may start with a blank game object or load an existing game
    in `componentDidMount`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: If the `GameForm` component receives a `gameId` prop from the parent component,
    such as from the `EditGame` component, then it will use the read API to retrieve
    the game's details and set it to state to be rendered in the form view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The form view in the `GameForm` component will essentially have two parts, one
    part that takes simple game details, such as name, world image link, and clue
    text as input, and a second part that allows users to add a variable number of
    VR objects to either the answer objects array or wrong objects array.
  prefs: []
  type: TYPE_NORMAL
- en: Inputing simple game details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simple game details section will mostly be text input added using the Material-UI
    `TextField` component, with a change handling method passed to `onChange`.
  prefs: []
  type: TYPE_NORMAL
- en: Form title
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The form title will either be `New Game` or `Edit Game`, depending on whether
    an existing game ID is passed as a prop to `GameForm`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Game world image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will render the background image URL in an `img` element at the very top
    to show users the image they added as the game world image URL.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Game name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The game name will be added in a single `TextField` of default type `text`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Clue text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The clue text will be added to a multiline `TextField` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Handle input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the input changes will be handled by the `handleChange` method that will
    update the game values in state with the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Modifying arrays of VR objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to allow users to modify the arrays of `answerObjects` and `wrongObjects`
    that they wish to add to their VR game, `GameForm` will iterate through each array
    and render a `VRObjectForm` component for each object. With this, it will become
    possible to add, remove, and modify VR objects from the `GameForm` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c9d59097-561d-4b45-97e0-aab65d9c09f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Iterating and rendering the object details form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Material-UI `ExpansionPanel` components, we will add the form interface
    seen previously to create a modifiable array of VR object details for each type
    of VR object array in the given game.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `ExpansionPanelDetails` component, we will iterate through the `answerObjects`
    array or the `wrongObjects` array to render a `VRObjectForm` component for each
    VR object.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Each `VRObjectForm` will take as props the `vrObject` itself, the current `index`
    in the array, the type of object array, and two methods for updating the state
    in `GameForm` when the array details are modified by changing details or deleting
    an object from within the `VRObjectForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new object to the array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The button to add an object will allow users to add a new `VRObjectForm` component
    to take the details of a new VR object.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This will basically just add an empty object to the array being iterated with
    a call to the `addObject` method with the array type specified in the name value.
  prefs: []
  type: TYPE_NORMAL
- en: Removing an object from the array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each `VRObjectForm` component can also be deleted to remove the object from
    the given array. `GameForm` will pass a `removeObject` method to the `VRObjectForm`
    component as a prop so the array can be updated in state when a user clicks `delete`
    on a specific `VRObjectForm`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The object will be removed from the array by slicing at the given `index` from
    the array of the specified array type in name.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the object detail change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The VR object details will update in the `GameForm` component state when the
    user changes input values in any of the `VRObjectForm` fields. To register this
    update, the `GameForm` passes the `handleObjectChange` method to the `VRObjectForm`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The `handleObjectChange` method updates the field value of the specific object
    at the `index` in the array with the given `type`, so it is reflected in the game
    object stored in the state in `GameForm`.
  prefs: []
  type: TYPE_NORMAL
- en: VRObjectForm component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `VRObjectForm` component will render the input fields to modify an individual
    VR object''s details, which is added to the `answerObjects` and `wrongObjects`
    arrays of the game in the `GameForm` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/101c7142-c187-4ade-a62b-416575acbfef.png)'
  prefs: []
  type: TYPE_IMG
- en: It may start with a blank VR object or load an existing VR object's details
    in `componentDidMount`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: In `componentDidMount`, the state will be set with details of the `vrObject`
    passed as a prop from the `GameForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The input fields to modify these values will be added using Material-UI `TextField`
    components.
  prefs: []
  type: TYPE_NORMAL
- en: 3D object file input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OBJ and MTL file links will be added for each VR object as text input using
    the `TextField` components.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Translate value input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The translate values of the VR object across the X, Y, and Z axes will be input
    in the `TextField` components of the `number` type.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Rotate value input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `rotate` values of the VR object around the X, Y, and Z axes will be input
    in the `TextField` components of the `number` type.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Scale value input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `scale` value for the VR object will be input in a `TextField` component
    of the `number` type.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Object color input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The color value for the VR object will be input in a `TextField` component
    of the `text` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Delete object button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `VRObjectForm` will contain a `Delete` button that will execute the `removeObject`
    method received in the `GameForm` props form:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The `removeObject` method will take the value of the object array type and the
    array index position to remove the given object from the relevant VR objects array
    in the `GameForm` state.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the input change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When any of the VR object details are changed in the input fields, the `handleChange`
    method will update the state of the `VRObjectForm` component, and use the `handleUpdate`
    method passed as a prop from `GameForm` to update the VR object in the `GameForm` state
    with the changed value for the object detail.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: With this implementation, the create and edit game forms are in place, complete
    with VR object input forms for arrays of varying sizes. Any registered user can
    use these forms to add and edit games on the MERN VR Game application.
  prefs: []
  type: TYPE_NORMAL
- en: Game list views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors to MERN VR Game will access the games on the application from lists
    rendered on the home page and individual user profiles. The home page will list
    all the games on the application, and the games by a specific maker will be listed
    on their user profile page. The list views will iterate through game data fetched
    using the `list` APIs and render details of each game in the `GameDetail` component.
  prefs: []
  type: TYPE_NORMAL
- en: All games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Home` component will fetch the list of all the games in the game collection
    using the list API when the component mounts.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The list of games retrieved from the server will be set to state and iterated
    over to render a `GameDetail` component with each game in the list.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The `GameDetail` component will be passed the game details and an `updateGames`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The `updateGames` method will update the list in the `Home` component when
    a user deletes their game from the `GameDetail` component that renders with an
    `edit` and `delete` option for the maker of the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f7fa0681-c359-45f1-98a2-7b5fb4dc9256.png)'
  prefs: []
  type: TYPE_IMG
- en: Games by a maker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user `Profile` component will fetch the list of just the games made by the
    given user with the list by the maker API. We will update the `init` method in
    the `Profile` component to call the `listByMaker` fetch method after the user
    details are retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Similar to how the game list is rendered in the `Home` component, we will set
    the list of games retrieved from the server to state in the `Profile` component, and
    iterate over it in the view to render the `GameDetail` components, which will
    be passed the individual game details and an `updateGames` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'This will render a `GameDetail` component for each game made by the specific
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e63a7011-94eb-420a-bd20-13ad86f97746.png)'
  prefs: []
  type: TYPE_IMG
- en: GameDetail component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `GameDetail` component takes a game object as a prop, and renders the details
    of the game, along with a PLAY GAME button that links to the VR game view. It
    also shows `edit` and `delete` buttons if the current user is the maker of the
    game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1bc66f95-a3b4-48e3-af8b-7f82d69f4381.png)'
  prefs: []
  type: TYPE_IMG
- en: Game details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The game details, such as the name, world image, clue text, and maker name,
    are rendered to give the user an overview of the game.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Play Game button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Play Game` button in the `GameDetail` component will simply be a `Link`
    component that points to the route that opens the React 360-generated `index.html`
    (implementation for this route on the server is discussed in the *Playing the
    VR game* section).
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The route to the game view takes the game ID as a `query` parameter. We set
    `target='_self'` on the `Link` so React Router skips transitioning to the next
    state and lets the browser handle this link. What this will do is allow the browser
    to directly make the request at this route, and render the `index.html` file sent
    by the server in response to this request.
  prefs: []
  type: TYPE_NORMAL
- en: Edit and delete buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `GameDetail` component will show the `edit` and `delete` options only if
    the currently signed-in user is also the maker of the game being rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: If the user ID of the signed-in user matches the maker ID in the game, the `edit`
    button linking to the edit form view and the `DeleteGame` component are shown
    in the view.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A signed-in user will be able to delete a specific game they made by clicking
    on the `delete` button visible to makers in the `GameDetail` component. The `GameDetail`
    component adds this `delete` option using a `DeleteGame` component.
  prefs: []
  type: TYPE_NORMAL
- en: DeleteGame component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `DeleteGame` component added to the `GameDetail` component for each game
    takes the game details, and a `removeGame` method, as props from `GameDetail`
    that updates the parent component that `GameDetail` is a part of.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'This `DeleteGame` component is basically a button that, when clicked, opens
    a confirm dialog to ask the user whether they are sure they want to delete their
    game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7d45088a-0e4c-4071-bbb9-a143748b71c8.png)'
  prefs: []
  type: TYPE_IMG
- en: The dialog is implemented using the `Dialog` component from Material-UI.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/DeleteGame.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Upon successful deletion, the dialog is closed and the parent component containing
    the `GameDetail` component is updated by calling the `removeGame` method passed
    in as a prop.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/DeleteGame.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The `removeGame` method called in this `deleteGame` handler method updates the
    state of the parent, which could be the `Home` component or the user `Profile`
    component, so the deleted game is no longer shown in the view.
  prefs: []
  type: TYPE_NORMAL
- en: Playing the VR game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users on MERN VR Game will be able to open and play any of the games from within
    the application. To enable this, we will set up a route on the server that renders `index.html`,
    which was generated with React 360, in the response to a GET request at the following
    path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The path takes a game ID value as a `query` parameter, which is used in the
    React 360 code to fetch the game details with the read API.
  prefs: []
  type: TYPE_NORMAL
- en: API to render the VR game view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GET request to open the React 360 `index.html` page will be declared in
    `game.routes.js`, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: This will execute the `playGame` controller method to return the `index.html`
    page in response to the incoming request.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The `playGame` controller method will send the `index.html` placed in the `/server/vr/`
    folder to the requesting client.
  prefs: []
  type: TYPE_NORMAL
- en: In the browser, this will render the React 360 game code, which will fetch the
    game details from the database using the read API, and render the game world along
    with the VR objects that the user can interact with.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the game code in React 360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the game backend all set up in the MERN application, we can update the
    React 360 project code we developed in [Chapter 10](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml), *Developing
    a Web-Based VR Game*, to make it render games directly from the game collection
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the game ID in the link that opens the React 360 application to
    fetch game details with the read API from within the React 360 code, and then
    set the data to state so the game loads details retrieved from the database instead
    of the static sample data we used in [Chapter 10](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml), *Developing
    a Web-Based VR Game*.
  prefs: []
  type: TYPE_NORMAL
- en: Once the code is updated, we can bundle it again and place the compiled files
    in the MERN application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the game ID from a link
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `index.js` file of the React 360 project folder, update the `componentDidMount`
    method to retrieve the game ID from the incoming URL and make a fetch call to
    the read game API.
  prefs: []
  type: TYPE_NORMAL
- en: '`/MERNVR/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '`Location.search` gives us access to the query string in the incoming URL that
    loads `index.html`. The retrieved query string is `split` to get the game ID value
    from the `id` query parameter attached in the URL. We need this game ID value
    to fetch the game details with the read API from the server, and set it to state
    for the game and `vrObjects` values.'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching the game data with the read API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the React 360 project folder, we will add an `api-game.js` file that will
    contain a read `fetch` method that makes a call to the read game API on the server
    using the provided game ID.
  prefs: []
  type: TYPE_NORMAL
- en: '`/MERNVR/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: This fetch method is used in `componentDidMount` of the React 360 entry component
    to retrieve the game details.
  prefs: []
  type: TYPE_NORMAL
- en: This updated React 360 code is available in the branch named 'dynamic-game'
    on the GitHub repository at: [github.com/shamahoque/MERNVR](https://github.com/shamahoque/MERNVR).
  prefs: []
  type: TYPE_NORMAL
- en: Bundling and integrating the updated code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the React 360 code updated to fetch and render game details dynamically
    from the server, we can bundle this code using the provided bundle script and
    place the newly compiled files in the `dist` folder of the MERN VR Game project
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To bundle the React 360 code from the command line, go to the React 360 `MERNVR`
    project folder and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: This will generate the `client.bundle.js` and `index.bundle.js` bundle files
    in the `build/` folder with the updated React 360 code. These files, along with
    the `index.html` and `static_assets` folders, need to be added to the MERN VR
    Game application code as discussed in [Chapter 10](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml), *Developing
    a Web-Based VR Game*, to integrate the latest VR game code.
  prefs: []
  type: TYPE_NORMAL
- en: With this integration completed, if we run the MERN VR Game application, and
    click the Play Game link on any of the games, it should open up the game view
    with the details of the specific game rendered in the VR scene, and allow interaction
    with the VR objects as specified in the gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we integrated the capabilities of the MERN stack technologies
    with React 360 to develop a dynamic VR game application for the web.
  prefs: []
  type: TYPE_NORMAL
- en: We extended the MERN skeleton application to build a working backend that stores
    VR game details. And allows us to make API calls to manipulate these details.
    We added React views that let users modify games and browse through the games
    with the option to launch and play the VR game at a specified route rendered directly
    by the server.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we updated the React 360 project code to pass data between the MERN
    application and the VR game view, by retrieving query parameters from the incoming
    URL, and using fetch to retrieve data with the game API.
  prefs: []
  type: TYPE_NORMAL
- en: This integration of the React 360 code with the MERN stack application produced
    a fully functioning and dynamic web-based VR game application, demonstrating how
    MERN stack technologies can be used and extended to create unique user experiences.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will reflect on the MERN applications built in this
    book, discussing not just the best practices the were followed, but also the scope
    for improvements and further development.
  prefs: []
  type: TYPE_NORMAL
