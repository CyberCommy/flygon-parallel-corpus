- en: Chapter 2. Troubleshooting Commands and Sources of Useful Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first chapter, we covered troubleshooting best practices and the high
    level process involved. Where the first chapter was a 20,000 ft view on troubleshooting,
    this chapter starts to dive into the specifics.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will review common troubleshooting commands as well as common places
    to find helpful information. Within this book, we will utilize release 7 of Red
    Hat Enterprise Linux (also referred to as RHEL). All commands referenced in this
    chapter will be commands that are included with a default installation of RHEL
    7.
  prefs: []
  type: TYPE_NORMAL
- en: We will reference commands that are installed by default, as I have found myself
    in situations where I could have used a specific command to identify an issue
    immediately but that command was not available to me. By limiting this chapter
    to default commands, you can be assured that the troubleshooting steps covered
    in this chapter are not only relevant to most RHEL 7 installations, but are also
    relevant to previous releases and other Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Finding useful information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to explore troubleshooting commands, I first want to cover locations
    of useful information. Useful information is a bit of a vague term, pretty much
    every file, directory, or command can provide *useful information*. What I really
    plan to cover are places where it is possible to find information for almost any
    issue.
  prefs: []
  type: TYPE_NORMAL
- en: Log files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log files are often the first place to start looking for troubleshooting information.
    Whenever a service or server is experiencing an issue, checking the log files
    for errors can often answer many questions quickly.
  prefs: []
  type: TYPE_NORMAL
- en: The default location
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, RHEL and most Linux distributions keep their log files in `/var/log/`,
    which is actually part of the **Filesystem Hierarchy Standard** (**FHS**) maintained
    by the Linux Foundation. However, while `/var/log/` might be the default location
    not all log files are located there ([http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard](http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard)).
  prefs: []
  type: TYPE_NORMAL
- en: While `/var/log/httpd/` is the default location for Apache logs, this location
    can be changed with Apache's configuration files. This is especially common when
    Apache was installed outside of the standard RHEL package.
  prefs: []
  type: TYPE_NORMAL
- en: Like Apache, most services allow for custom log locations. It is not uncommon
    to find custom directories or file systems outside of `/var/log` created specifically
    for log files.
  prefs: []
  type: TYPE_NORMAL
- en: Common log files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following table is a short list of common log files and a description of
    what you can find within them.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do keep in mind that this list is specific to Red Hat Enterprise Linux 7, and
    while other Linux distributions might follow similar conventions, they are not
    guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: '| Log file | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log/messages` | By default, this log file contains all syslog messages
    (except e-mail) of `INFO` or higher priority. |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log/secure` | This log file contains authentication related message
    items such as:'
  prefs: []
  type: TYPE_NORMAL
- en: SSH logins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User creations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sudo violations and privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/var/log/cron` | This log file contains a history of `crond` executions
    as well as start and end times of `cron.daily`, `cron.weekly`, and other executions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log/maillog` | This log file is the default log location of mail events.
    If using postfix, this is the default location for all postfix-related messages.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log/httpd/` | This log directory is the default location for Apache
    logs. While this is the default location, it is not a guaranteed location for
    all Apache logs. |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log/mysql.log` | This log file is the default log file for mysqld.
    Much like the `httpd` logs, this is default and can be changed easily. |'
  prefs: []
  type: TYPE_TB
- en: '| `/var/log/sa/` | This directory contains the results of the `sa` commands
    that run every 10 minutes by default. We will utilize this data more in later
    sections in this chapter and throughout this book. |'
  prefs: []
  type: TYPE_TB
- en: For many issues, one of the first log files to review is the `/var/log/messages`
    log. On RHEL systems, this log file receives all system logs of `INFO` priority
    or higher. In general, this means that any significant event sent to `syslog`
    would be captured in this log file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample of some of the log messages that can be found in
    `/var/log/messages`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, there are more than a few log messages within this sample that
    could be useful while troubleshooting issues.
  prefs: []
  type: TYPE_NORMAL
- en: Finding logs that are not in the default location
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many times log files are not in `/var/log/`, which can be either because someone
    modified the log location to some place apart from the default, or simply because
    the service in question defaults to another location.
  prefs: []
  type: TYPE_NORMAL
- en: In general, there are three ways to find log files not in `/var/log/`.
  prefs: []
  type: TYPE_NORMAL
- en: Checking syslog configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you know a service is using syslog for its logging, the best place to check
    to find which log file its messages are being written to is the **rsyslog** configuration
    files. The rsyslog service has two locations for configuration. The first is the
    `/etc/rsyslog.d` directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `/etc/rsyslog.d` directory is an include directory for custom rsyslog configurations.
    The second is the `/etc/rsyslog.conf` configuration file. This is the main configuration
    file for rsyslog and contains many of the default syslog configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample of the default contents of `/etc/rsyslog.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By reviewing the contents of this file, it is fairly easy to identify which
    log files contain the information required, if not, at least, the possible location
    of syslog managed log files.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the application's configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Not every application utilizes syslog; for those that don't, one of the easiest
    ways to find the application's log file is to read the application's configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick and useful method for finding log file locations from configuration
    files is to use the `grep` command to search the file for the word `log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After reviewing the output of the preceding `grep` command, we can see that
    the configured log location for samba is `/var/log/samba/log.%m`. It is important
    to note that `%m`, in this example, is actually replaced with a "machine name"
    when creating the file. This is actually a variable within the samba configuration
    file. These variables are unique to each application but this method for making
    dynamic configuration values is a common practice.
  prefs: []
  type: TYPE_NORMAL
- en: Other examples
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The following are examples of using the `grep` command to search for the word
    "`log`" in the Apache and MySQL configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In both instances, this method was able to identify the configuration parameter
    for the service's log file. With the previous three examples, it is easy to see
    how effective searching through configuration files can be.
  prefs: []
  type: TYPE_NORMAL
- en: Using the find command
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `find` command, which we will cover in depth later in this chapter, is
    another useful method for finding log files. The `find` command is used to search
    a directory structure for specified files. A quick way of finding log files is
    to simply use the `find` command to search for any files that end in "`.log`":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding is generally considered a last resort solution, and is mostly
    used when the previous methods do not produce results.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When executing the `find` command, it is considered a best practice to be very
    specific about which directory to search. When being executed against very large
    directories, the performance of the server can be degraded.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed previously, configuration files for an application or service can
    be excellent sources of information. While configuration files won't provide you
    with specific errors such as log files, they can provide you with critical information
    (for example, enabled/disabled features, output directories, and log file locations).
  prefs: []
  type: TYPE_NORMAL
- en: Default system configuration directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In general, system, and service configuration files are located within the `/etc/`
    directory on most Linux distributions. However, this does not mean that every
    configuration file is located within the `/etc/` directory. In fact, it is not
    uncommon for applications to include a configuration directory within the application's
    `home` directory.
  prefs: []
  type: TYPE_NORMAL
- en: So how do you know when to look in the `/etc/` versus an application directory
    for configuration files? A general rule of thumb is, if the package is part of
    the RHEL distribution, it is safe to assume that the configuration is within the
    `/etc/` directory. Anything else may or may not be present in the `/etc/` directory.
    For these situations, you simply have to look for them.
  prefs: []
  type: TYPE_NORMAL
- en: Finding configuration files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In most scenarios, it is possible to find system configuration files within
    the `/etc/` directory with a simple directory listing using the `ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using the rpm command
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If the configuration files were deployed as part of a RPM package, it is possible
    to use the `rpm` command to identify configuration files. To do this, simply execute
    the `rpm` command with the `–q` (query) flag, and the `–c` (configfiles) flag,
    followed by the name of the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `rpm` command is used to manage RPM packages and is a very useful command
    when troubleshooting. We will cover this command further in the next section as
    we explore commands for troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Using the find command
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Much like finding log files, to find configuration files on a system, it is
    possible to utilize the `find` command. When searching for log files, the `find`
    command was used to search for all files where the name ends in "`.log`". In the
    following example, the `find` command is being used to search for all files where
    the name begins with "`http`". This `find` command should return at least a few
    results, which will provide configuration files related to the HTTPD (Apache)
    service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example searches the `/etc` directory; however, this could also
    be used to search any application home directory for user configuration files.
    Similar to searching for log files, using the `find` command to search for configuration
    files is generally considered a last resort step and should not be the first method
    used.
  prefs: []
  type: TYPE_NORMAL
- en: The proc filesystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An extremely useful source of information is the `proc` filesystem. This is
    a special filesystem that is maintained by the Linux kernel. The `proc` filesystem
    can be used to find useful information about running processes, as well as other
    system information. For example, if we wanted to identify the filesystems supported
    by a system, we could simply read the `/proc/filesystems` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This filesystem is extremely useful and contains quite a bit of information
    about a running system. The `proc filesystem` will be used throughout the troubleshooting
    steps within this book. It is used in various ways while troubleshooting everything
    from specific processes to read-only filesystems.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will cover frequently used troubleshooting commands that can be
    used to gather information from the system or a running service. While it is not
    feasible to cover every possible command, the commands used do cover fundamental
    troubleshooting steps for Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The troubleshooting steps used within this book are primarily command-line based.
    While it is possible to perform many of these things from a graphical desktop
    environment, the more advanced items are command-line specific. As such, this
    book assumes that the reader has at least a basic understanding of Linux. To be
    more specific, this book assumes that the reader has logged into a server via
    SSH and is familiar with basic commands such as `cd`, `cp`, `mv`, `rm`, and `ls`.
  prefs: []
  type: TYPE_NORMAL
- en: For those who might not have much familiarity, I wanted to quickly cover some
    basic command-line usage that will be required knowledge for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Command flags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many readers are probably familiar with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Most should recognize that this is the `ls` command and it is used to perform
    a directory listing. What might not be familiar is what exactly the `–la` part
    of the command is or does. To understand this better, let''s look at the ls command
    by itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The previous execution of the `ls` command looks very different from the previous.
    The reason for this is because the latter is the default output for `ls`. The
    `–la` portion of the command is what is commonly referred to as command flags
    or options. The command flags allow a user to change the default behavior of the
    command providing it with specific options.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, the `–la` flags are two separate options, `–l` and `–a`; they can
    even be specified separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to grouping and ungrouping, this book will also show flags in their
    long format. In the previous examples, we showed the flag `-a`, this is known
    as a short flag. This same option can also be provided in the long format `--all`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `–a` and the `--all` flags are essentially the same option; it can simply
    be represented in both short and long form.
  prefs: []
  type: TYPE_NORMAL
- en: One important thing to remember is that not every short flag has a long form
    and vice versa. Each command has its own syntax, some commands only support the
    short form, others only support the long form, but many support both. In most
    cases, the long and short flags will both be documented within the command's man
    page.
  prefs: []
  type: TYPE_NORMAL
- en: The piping command output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another common command-line practice that will be used several times throughout
    this book is `piping` output. Specifically, examples such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the output of the `ls -l --all` command is piped to
    the `grep` command. By placing `|` or the pipe character between the two commands,
    the output of the first command is "piped" to the input for the second command.
    The example preceding the `ls` command will be executed; with that, the `grep`
    command will then search that output for any instance of the pattern "`app`".
  prefs: []
  type: TYPE_NORMAL
- en: 'Piping output to `grep` will actually be used quite often throughout this book,
    as it is a simple way to trim the output into a maintainable size. Many times
    the examples will also contain multiple levels of piping:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code the output of `ls -la` is piped to the input of `grep`;
    however, this time, the output of `grep` is also piped to the input of `awk`.
  prefs: []
  type: TYPE_NORMAL
- en: While many commands can be piped to, not every command supports this. In general,
    commands that accept user input from files or command-line also accept piped input.
    As with the flags, a command's man page can be used to identify whether the command
    accepts piped input or not.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering general information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When managing the same servers for a long time, you start to remember key information
    about those servers. Such as the amount of physical memory, the size and layout
    of their filesystems, and what processes should be running. However, when you
    are not familiar with the server in question it is always a good idea to gather
    this type of information.
  prefs: []
  type: TYPE_NORMAL
- en: The commands in this section are commands that can be used to gather this type
    of general information.
  prefs: []
  type: TYPE_NORMAL
- en: w – show who is logged on and what they are doing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Early in my systems administration career, I had a mentor who used to tell
    me: *I always run w when I log into a server*. This simple tip has actually been
    very useful over and over again in my career. The `w` command is simple; when
    executed it will output information such as system uptime, load average, and who
    is logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This information can be extremely useful when working with unfamiliar systems.
    The output can be useful even when you are familiar with the system. With this
    command, you can see:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When this system was last rebooted:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`04:07:37 up 14:26`: This information can be extremely useful; whether it is
    an alert for a service like Apache being down, or a user calling in because they
    were locked out of the system. When these issues are caused by an unexpected reboot,
    the reported issue does not often include this information. By running the `w`
    command, it is easy to see the time elapsed since the last reboot.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The load average of the system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`load average: 0.00, 0.01, 0.05`: The load average is a very important measurement
    of system health. To summarize it, the load average is the average number of processes
    in a `wait` state over a period of time. The three numbers in the output of `w`
    represent different times.'
  prefs: []
  type: TYPE_NORMAL
- en: The numbers are ordered from left to right as 1 minute, 5 minutes, and 15 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Who is logged in and what they are running:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USER TTY LOGIN@ IDLE JCPU PCPU WHAT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`root tty1 Wed13 11:24m 0.13s 0.13s -bash`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final piece of information that the `w` command provides is users that are
    currently logged in and what command they are executing.
  prefs: []
  type: TYPE_NORMAL
- en: This is essentially the same output as the `who` command, which includes the
    user logged in, when they logged in, how long they have been idle, and what command
    their shell is running. The last item in that list is extremely important.
  prefs: []
  type: TYPE_NORMAL
- en: Oftentimes, when working with big teams, it is common for more than one person
    to respond to an issue or ticket. By running the `w` command immediately after
    login, you will see what other users are doing, preventing you from overriding
    any troubleshooting or corrective steps the other person has taken.
  prefs: []
  type: TYPE_NORMAL
- en: rpm – RPM package manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rpm` command is used to manage **Red Hat package manager** (**RPM**). With
    this command, you can install and remove RPM packages, as well as search for packages
    that are already installed.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in this chapter, we saw how the `rpm` command can be used to look for
    configuration files. The following are several additional ways we can use the
    `rpm` command to find critical information.
  prefs: []
  type: TYPE_NORMAL
- en: Listing all packages installed
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Often when troubleshooting services, a critical step is identifying the version
    of the service and how it was installed. To list all RPM packages installed on
    a system, simply execute the `rpm` command with `-q` (query) and `-a` (all):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `rpm` command is a very diverse command with many flags. In the preceding
    example the `-q` and `-a` flags are used. The `-q` flag tells the `rpm` command
    that the action being taken is a query; you can think of this as being put into
    a "search mode". The `-a` or `--all` flag tells the `rpm` command to list all
    packages.
  prefs: []
  type: TYPE_NORMAL
- en: A useful feature is to add the `--last` flag to the preceding command, as this
    causes the `rpm` command to list the packages by install time with the latest
    being first.
  prefs: []
  type: TYPE_NORMAL
- en: Listing all files deployed by a package
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Another useful `rpm` function is to show all of the files deployed by a specific
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we again use the `-q` flag to specify that we are
    running a query, along with the `--filesbypkg` flag. The `--filesbypkg` flag will
    cause the `rpm` command to list all of the files deployed by the specified package.
  prefs: []
  type: TYPE_NORMAL
- en: This example can be very useful when trying to identify a service's configuration
    file location.
  prefs: []
  type: TYPE_NORMAL
- en: Using package verification
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this third example, we are going to use an extremely useful feature of `rpm`—verify.
    The `rpm` command has the ability to verify whether or not the files deployed
    by a specified package have been altered from their original contents. To do this,
    we will use the `-V` (verify) flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we simply run the `rpm` command with the `-V` flag
    followed by a package name. As the `-q` flag is used for querying, the `-V` flag
    is for verifying. With this command, we can see that only the `/etc/httpd/conf/httpd.conf`
    file was listed; this is because `rpm` will only output files that have been altered.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first column of this output, we can see which verification checks the
    file failed. While this column is a bit cryptic at first, the rpm man page has
    a useful table (as shown in the following list) explaining what each character
    means:'
  prefs: []
  type: TYPE_NORMAL
- en: '`S`: This means that the file size differs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`M`: This means that the mode differs (includes permissions and file type)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`5`: This means that the digest (formerly `MD5 sum`) differs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`D`: This means indicates the device major/minor number mismatch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`L`: This means indicates the `readLink(2)` path mismatch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`U`: This means that the user ownership differs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`G`: This means that the group ownership differs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`T`: This means that `mTime` differs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`P`: This means that `caPabilities` differs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using this list we can see that the `httpd`.`conf's` file size, `MD5` sum, and
    `mtime` (modify time) are not what was deployed by `httpd.rpm`. This means that
    it is highly likely that the `httpd.conf` file has been modified after installation.
  prefs: []
  type: TYPE_NORMAL
- en: While the `rpm` command might not seem like a troubleshooting command at first,
    the preceding examples show just how powerful of a troubleshooting tool it can
    be. With these examples, it is simple to identify important files and whether
    or not those files have been modified from the deployed version.
  prefs: []
  type: TYPE_NORMAL
- en: df – report file system space usage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `df` command is a very useful command when troubleshooting file system
    issues. The `df` command is used to output space utilization for mounted file
    systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the `df` command included the `-h` flag. This flag
    causes the `df` command to print any size values in a "human readable" format.
    By default, `df` will simply print these values in kilobytes. From the example,
    we can quickly see the current usage of all mounted filesystems. Specifically,
    if we look at the output, we can see that `/filesystem` is currently 24 percent
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This is a very quick and easy way to identify whether any file system is full.
    In addition, the `df` command is also very useful in showing details of what file
    systems are mounted and where they are mounted to. From the line containing the
    `/filesystem`, we can see that the underlying device is `/dev/mapper/rhel-root`.
  prefs: []
  type: TYPE_NORMAL
- en: From this one command, we were able to identify two critical pieces of information.
  prefs: []
  type: TYPE_NORMAL
- en: Showing available inodes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The default behavior for `df` is to show the amount of used file system space.
    However, it can also be used to show the quantity of **inodes** available, used,
    and free for each file system. To output the inode utilization, simply add the
    `-i` (inode) flag when executing the `df` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: It is still possible to use the `–h` flag with `df` to print the output in a
    human readable format. However, with the `–i` flag, this abbreviates the output
    to `M` for millions, `K` for thousands, and so on. This output can be easily confused
    with Megabytes or Kilobytes, so in general, I do not use the human readable inode
    output when sharing the output with other users/administrators.
  prefs: []
  type: TYPE_NORMAL
- en: free – display memory utilization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When executed, the `free` command will output statistics about the memory available
    and in use on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: From the previous example, we can see that the output of the `free` command
    provides the total available memory, amount of memory currently used, and amount
    of memory free. The `free` command is a simple and quick way to identify the current
    state of memory on a system.
  prefs: []
  type: TYPE_NORMAL
- en: However, the output of `free` can be a bit confusing at first.
  prefs: []
  type: TYPE_NORMAL
- en: What is free, is not always free
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Linux utilizes memory differently as compared to other operating systems. In
    the preceding output, you will see that it has 543,484 KB listed as cached. This
    memory, while technically used, is actually part of the available memory. The
    system can reallocate this cached memory as required.
  prefs: []
  type: TYPE_NORMAL
- en: A quick and easy way of seeing what is actually used or free can be seen on
    the second line of output. The preceding output shows that 775,552 KB of memory
    is available on the system.
  prefs: []
  type: TYPE_NORMAL
- en: The /proc/meminfo file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In previous RHEL releases, the second line of the `free` command was the easiest
    method for identifying how much memory is available. However, with RHEL 7, there
    have been some improvements to the `/proc/meminfo` file. One of those improvements
    is the addition of the **MemAvailable** statistic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `/proc/meminfo` file is one of the many useful files located in the `/proc`
    file system. This file is maintained by the kernel and contains the system's current
    memory statistics. This file can be very useful when troubleshooting memory issues
    as it contains much more information than the output of the `free` command.
  prefs: []
  type: TYPE_NORMAL
- en: ps – report a snapshot of current running processes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `ps` command is a fundamental command for any troubleshooting activity.
    This command, when executed, will output a list of running processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `ps` command has many flags and options to show different information about
    running processes. The following are a few example `ps` commands that are useful
    during troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Printing every process in long format
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following `ps` command uses the `-e` (everything, all process), `-l` (long
    format), and `-f` (full format) flags. These flags will cause the `ps` command
    to not only print every process but will also print them in a format that provides
    quite a bit of useful information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding output of `ps -elf`, we can see many useful pieces of information
    for the `kthreadd` process, information such as the **parent process ID** (**PPID**),
    the **priority** (**PRI**), the **niceness value** (**NI**), and the **resident
    memory size** (**SZ**) of the running processes.
  prefs: []
  type: TYPE_NORMAL
- en: I have found that the preceding example is a very general-purpose `ps` command
    and can be used in most situations.
  prefs: []
  type: TYPE_NORMAL
- en: Printing a specific user's processes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The preceding example can get quite large; making it difficult to identify
    specific processes. This example uses the `-U` flag to specify a user. This causes
    the `ps` command to print all processes running as the specified user; postfix
    in the following case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: It is important to note that the `–U` flag can also be combined with other flags
    to provide even more information on the running processes. In the preceding example,
    the `-l` flag is once again used to print the output in the long format.
  prefs: []
  type: TYPE_NORMAL
- en: Printing a process by process ID
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If the process ID or PID is already known, it is possible to narrow down the
    process listing even further by specifying the process with the `–p` (process
    ID) flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This can be especially useful when combined with the `–L` (show threads with
    LWP column) or `–m` (show threads after process) flag, which are used to print
    process threads. When troubleshooting multithreaded applications the `-L` and
    `-m` flags can be critical.
  prefs: []
  type: TYPE_NORMAL
- en: Printing processes with performance information
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ps` command allows the user to customize the columns printed with the
    `-o` (user defined format) flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `–o` option allows for a wide number of custom columns. In the preceding
    version, I selected options that are similar to those printed in the top command.
  prefs: []
  type: TYPE_NORMAL
- en: The top command is one of the most popular Linux troubleshooting commands. It
    is used to show the top processes ordered by CPU usage (by default). In this chapter,
    I have opted to omit the top command, as I feel that the `ps` command is even
    more fundamental and flexible than the top command. As one becomes more familiar
    with the `ps` command, the top command will be easy to learn and understand.
  prefs: []
  type: TYPE_NORMAL
- en: Networking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Networking is an essential skill for any systems administrator. Without a properly
    configured network interface, a server serves little purpose. The commands in
    this section are specifically for looking up network configuration and current
    status. These commands are essential to learn, as they will not only be useful
    for troubleshooting but also for day-to-day setup and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: ip – show and manipulate network settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ip` command is used to manage network settings such as interface configuration,
    routing and essentially anything network related. While these are not traditionally
    considered troubleshooting tasks, the `ip` command can also be used to display
    a system's network configuration. Without being able to look up networking details
    such as routing or device configuration, it would be very difficult to troubleshoot
    network-related issues.
  prefs: []
  type: TYPE_NORMAL
- en: The following examples show various ways to use the `ip` command to identify
    critical network configuration settings.
  prefs: []
  type: TYPE_NORMAL
- en: Show IP address configuration for a specific device
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'One of the core uses of the `ip` command is to lookup a network interface and
    display its configuration. To do this, we will use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding `ip` command, the first option provided `addr` (address) is
    used to define the type of information we are looking for. The second option `show`,
    tells `ip` to display the configuration of the first option. The third option
    `dev` (device) is followed by the network interface device in question; `enp0s3`.
    If the third option is omitted the `ip` command will show the address configuration
    for all network devices.
  prefs: []
  type: TYPE_NORMAL
- en: The device name `enp0s3` might look a bit strange for those who have experience
    with previous RHEL releases. This device is following a newer network device naming
    scheme introduced with `systemd`. As of RHEL 7, network devices will use device
    names such as the previous, which are based on device driver and BIOS details.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out more about RHEL 7''s new naming scheme simply reference the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/ch-Consistent_Network_Device_Naming.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/ch-Consistent_Network_Device_Naming.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Show routing configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ip` command can also be used to show routing configurations. This information
    is essential for troubleshooting connectivity issues between servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding `ip` command uses the `route` option followed by the `show` option
    to display all defined routes for this server. Like the previous example, it is
    possible to limit this output to a specific device by adding the `dev` (device)
    option followed by the device name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Show network statistics for a specified device
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Where the previous examples showed ways to lookup the current networking configuration,
    this next command uses the `-s` (statistics) flag to show network statistics for
    the specified device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the `link` (network device) option was used to specify
    that the statistics should be limited to the specified device.
  prefs: []
  type: TYPE_NORMAL
- en: The statistics information shown can be useful when troubleshooting packets
    that are being dropped or to identify which interface has higher network utilization.
  prefs: []
  type: TYPE_NORMAL
- en: netstat – network statistics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `netstat` command is an essential tool in any system administrator's tool
    belt. This can be seen by the fact that the `netstat` command is universally available
    even to operating systems that do not traditionally utilize command line for administration.
  prefs: []
  type: TYPE_NORMAL
- en: Printing network connections
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'One of the primary uses of `netstat` is to print the existing established network
    connections. This can be done by simply executing `netstat`; however, if the `-a`
    (all) flag is used, the output will also include listening ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: While the `-a` (all) flag used the preceding `netstat` causes to print all listening
    ports, the `-n` flag is used to force output into a numeric format, such as printing
    IP addresses rather than DNS host names.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example will be used heavily during [Chapter 5](part0032_split_000.html#UGI01-8ae10833f0c4428b9e1482c7fee089b4
    "Chapter 5. Network Troubleshooting"), *Network Troubleshooting*, where we will
    be troubleshooting network connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: Printing all ports listening for tcp connections
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'I have seen many instances where a service is running and is visible via the
    `ps` command; however, the port for clients to connect to was not bound and listening.
    The following `netstat` command can be very useful when troubleshooting connectivity
    issues with a service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command is very useful as it combines three useful options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`–l` (listening), which tells `netstat` to only list listening sockets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--tcp`, which tells `netstat` to limit the output to TCP connections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`–p` (program), which tells `netstat` to list the PID and name of the process
    listening on that port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delay
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An often overlooked option with `netstat` is to utilize the delay feature. By
    adding a number at the end of the command, `netstat` will continuously run and
    will sleep for the specified number of seconds between executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the following command is executed, the `netstat` command will print all
    listening TCP sockets every five seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The delay feature can be very useful when investigating network connectivity
    issues. As it can easily show when an application binds a port for new connections.
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While we touched a bit on troubleshooting performance with commands such as
    `free` and `ps`, this section will show some very useful commands that answer
    the age-old question of "Why is it slow?"
  prefs: []
  type: TYPE_NORMAL
- en: iotop – a simple top-like I/O monitor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `iotop` command is a relatively newer command to Linux. In previous RHEL
    releases while available it was not installed by default. The `iotop` command
    provides a top command-like interface but rather than showing which processes
    are utilizing the most CPU time or memory, it shows processes ordered by I/O utilization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Unlike some of the previous commands, `iotop` is very specialized to showing
    processes utilizing I/O. There are however, some very useful flags that can change
    iotop's default behavior. Flags such as `–o` (only), which tells `iotop` to only
    print processes using I/O rather than its default behavior of printing all processes.
    Another useful set of flags are `-q` (quiet) and `–n` (number of iterations).
  prefs: []
  type: TYPE_NORMAL
- en: 'Together with the `-o` flag, these flags can be used to tell `iotop` to print
    only the processes using I/O without clearing the screen for the next iteration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If we look at the preceding example output, we can see two independent iterations
    of the `iotop` command. However, unlike previous examples, the output is continuous
    allowing us to see which processes were using I/O at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the delay between `iotop` iterations is 1 second; however, this
    can be modified with the `-d` (delay) flag.
  prefs: []
  type: TYPE_NORMAL
- en: iostat – report I/O and CPU statistics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Where `iotop` shows what processes are utilizing I/O, `iostat` shows what devices
    are being utilized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `iostat` command uses the `-t` (timestamp) flag to print a timestamp
    with each report. The two numbers are interval and count values. In the preceding
    example, the `iostat` is run with a one second interval for a total count of two
    iterations.
  prefs: []
  type: TYPE_NORMAL
- en: The `iostat` command can be very useful for diagnosing issues related to I/O.
    However, the output can often be misleading. When executed, the values provided
    in the first report are averages since the last reboot of the system. The subsequent
    reports are since the previous report. In this example, we executed two reports,
    one second apart. You can see that the numbers in the first report are much higher
    than the second report.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, many systems administrators simply ignore the first report
    but they do not fully understand why. Therefore, it is not uncommon for someone
    unfamiliar with `iostat` to react to the values in the first report.
  prefs: []
  type: TYPE_NORMAL
- en: The `iostat` command does have a flag `-y` (omit first report), which will actually
    cause `iostat` to omit the first report. This is a good flag to teach users who
    may not be very familiar with using `iostat`.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating the output
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `iostat` command also has quite a few useful flags that allow you to manipulate
    how it presents data. Flags such as `–p` (device) allow you to limit statistics
    to a specified device or `–x` (extended stats) that will print extended statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example uses the `-p` flag to specify the `sda` device, the `-t`
    flag to print timestamps, and the `-x` flag to print extended statistics. These
    flags can be very useful when measuring I/O performance for specific devices.
  prefs: []
  type: TYPE_NORMAL
- en: vmstat – report virtual memory statistics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Where `iostat` is used to report statistics about disk I/O performance, `vmstat`
    is used to report statistics about memory usage and performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `vmstat` syntax is very similar to `iostat` where you provide an interval
    and count of reports as command line arguments. Also, like `iostat`, the first
    report is actually an average since the last reboot and subsequent reports are
    since the previous report. Unfortunately, unlike the `iostat` command, the `vmstat`
    command does not include a flag to omit the first report. As such, in most cases,
    it is appropriate to simply ignore the first report.
  prefs: []
  type: TYPE_NORMAL
- en: 'While `vmstat` might not include a flag to omit the first report, it does have
    some very useful flags; they are flags such as `–m` (slabs), which causes `vmstat`
    to output the system''s `slabinfo` at a defined interval, and `-s` (stats), which
    prints an extended report of the memory statistics for the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is an example of the `-s` or `--stats` flag being used.
  prefs: []
  type: TYPE_NORMAL
- en: sar – collect, report, or save system activity information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One very useful utility is the `sar` command, `sar` is a utility that comes
    with the `sysstat` package. The `sysstat` package includes various utilities that
    collect system metrics such as disk, CPU, memory, and network utilization. By
    default, this collection will run every 10 minutes and is executed as a `cron`
    job within `/ettc/cron.d/sysstat`.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the data collected by `sysstat` can be very useful, this package is sometimes
    removed in high performance environments. As the collection of the system utilization
    statistics can add to the system''s utilization, causing performance degradation.
    To see if the `sysstat` package is installed, simply use the rpm command with
    the `-q` (query) flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Using the sar command
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `sar` command allows users to review the information collected by the `sysstat`
    utilities. When executed with no flags, the `sar` command will print the current
    day''s CPU statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Every day at midnight, the `systat` collector will create a new file to store
    the collected statistics. To reference the statistics within that file, simply
    use the `-f` (file) flag to run `sar` against the specified file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the file specified was `/var/log/sa/sa13`; this file
    contains statistics for the 13th day of the current month.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `sar` command has many useful flags, far too many to list in this chapter.
    A few extremely useful flags are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-b`: This prints I/O statistics similar to the `iostat` command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-n ALL`: This prints network statistics for all network devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-R`: This prints memory utilization statistics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-A`: This prints all statistics gathered. It is essentially equivalent to
    running `sar -bBdHqrRSuvwWy -I SUM -I XALL -m ALL -n ALL -u ALL -P ALL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the `sar` command shows many statistics, we already covered commands such
    as `iostat` or `vmstat`. The biggest benefit of the `sar` command is the ability
    to review statistics in the past. This ability is critical when troubleshooting
    a performance issue that occurred for a short period of time or was already mitigated.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned that log files, configuration files, and the `/proc`
    filesystem are key sources of information during troubleshooting. We also covered
    the basic use of many fundamental troubleshooting commands.
  prefs: []
  type: TYPE_NORMAL
- en: While reading this chapter, you might have noticed that quite a few commands
    are also used in day-to-day life for non-troubleshooting purposes. If we look
    back at the troubleshooting process from [Chapter 1](part0014_split_000.html#DB7S1-8ae10833f0c4428b9e1482c7fee089b4
    "Chapter 1. Troubleshooting Best Practices"), *Troubleshooting Best Practices*,
    the first step included information gathering.
  prefs: []
  type: TYPE_NORMAL
- en: While these commands might not explain the issue themselves, they can help gather
    information about the issue, which leads to a more accurate and quick resolution.
    Familiarity with these fundamental commands is critical to your success during
    troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few chapters, we will use these fundamental commands to troubleshoot
    real-world scenarios. The next chapter focuses on troubleshooting issues with
    a web-based application.
  prefs: []
  type: TYPE_NORMAL
