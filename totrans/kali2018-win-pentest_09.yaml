- en: Maintaining Access on Server or Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ever wonder how hackers are able to get into a secure network and be in the
    network for months and sometimes years without being caught? Well, the following
    are some of the big tricks for staying inside once you are there. Not only will
    we discuss maintaining access for a local machine you have owned, but also how
    to use a **Drop Box** inside a network, and have it phone home.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining access, or ET Phone Home
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining access with Ncat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Drop Box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking the **Network Access Controller** (**NAC**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a spear-phishing attack with the Social Engineering Toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Backdoor Factory to evade antivirus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining access or ET Phone Home
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Persistent connections in the hacker world are called **Phoning Home**. Persistence
    gives the attacker the ability to leave a connection back to the attacking machine
    and have a full command line or a desktop connection to the victim machine.
  prefs: []
  type: TYPE_NORMAL
- en: Why do this? Your network is protected by a firewall normally and port connections
    to the internal machines are controlled by the firewall and not the local machine.
    Sure, if you're in a box, you could turn on telnet and you could access the telnet
    port from the local network. It is unlikely that you would be able to get to this
    port from the public network. Any local firewall may block this port, and a network
    scan would reveal that telnet is running on the victim machine. This would alert
    the target organization's network security team. So, instead of having a port
    to call on the compromised server, it is safer and more effective to have your
    victim machine call out to your attacking machine.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use HTTPS reverse shells, for the most part. The reason
    for this is you could have your compromised machine call any port on your attacking
    machine but a good IDS/IPS system could pick this connection up if it was sent
    out to an unusual destination, such as port `4444` on the attacking machine. Most
    IDS/IPS systems will whitelist outbound connections to HTTPS ports because system
    updates for most systems work over the HTTPS protocol. Your outbound connection
    to the attacking machine will look more like an update than an outbound hacked
    port.
  prefs: []
  type: TYPE_NORMAL
- en: A persistent connection does have to go back directly to the attacker's machine.
    You can pivot this type of connection off one or more machines to cover your tracks.
    Pivoting off one machine inside the target network, and a couple outside the target
    network, makes it more difficult for the defenders to see what is happening.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, you can pivot this type of attack off a machine in North Korea or China,
    and it will look like the attack is coming from there. Every time we hear in the
    media that a cyber attack is coming from some dastardly foreign attacker, we roll
    our eyes. There is no way to be sure of the original source of an attack, unless
    you have access to the attacking machine and its logs. Even with access to this
    attacking machine, you still don't know how many pivots the attacker made to get
    to that machine. You still don't know with a full back-trace to the last connection.
    Use something like Tor in the process and there is no way anyone can be sure exactly
    where the hack came from.
  prefs: []
  type: TYPE_NORMAL
- en: In this demo, we will be doing an attack from a four-way pivot going across
    the world, and through four different countries to show you how this is done.
    Yes, we are doing this for real!
  prefs: []
  type: TYPE_NORMAL
- en: Do *not* ever attack the public IP addresses we will be using in this book.
    These are servers that we personally leased for this project. They will no longer
    be under our control by the time this book is published.
  prefs: []
  type: TYPE_NORMAL
- en: One problem with persistent connections is that they can be seen. One can never
    underestimate the careful eye of a paranoid sysadmin (*Why has server 192.168.202.4
    had a HTTP connection to a Chinese IP address for four days?*). A real attacker
    will use this method to cover his tracks in case he gets caught and the attacking
    server is checked for evidence of the intruder. After a good clearing of the logs
    after you back out of each machine and, tracing back the connection is almost
    impossible. This first box to which the persistent connection is made will be
    viewed as hostile in the eyes of the attacker and they will remove traces of connections
    to this machine after each time they connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice in the following diagram that the victim machine has an internal address.
    Since the victim machine is calling out, we are bypassing the inbound protection
    of NAT and inbound firewall rules. The victim machine will be calling out to a
    server in Singapore. The attacker is interacting with the compromised machine
    in the USA, but is pivoting through two hops before logging into the evil server
    in Singapore. We are only using four hops here for this demo, but you can use
    as many hops as you want. The more hops, the more confusing the back-trace. A
    good attacker will also mix up the hops the next time he comes in, changing his
    route and the IP address of the inbound connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/715bacf3-aff5-4522-84a3-fd250a55924e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For our first hop, we are going to Amsterdam `178.62.241.119`! If we run  `whois` we
    can see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Hacker tip:'
  prefs: []
  type: TYPE_NORMAL
- en: A good investigator, seeing this information, would just subpoena DigitalOcean
    to find out who was renting that IP when the victim phoned home, but it could
    just as likely be a machine belonging to a little old lady in Leningrad. The infrastructure
    of a botnet is developed from a group of compromised boxes. This chapter describes
    a small do-it-yourself botnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now pivot to the host in Germany, `46.101.191.216`. Again, if we run
    a `whois` command, we can see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now move on to the pivot host in Singapore, `128.199.190.69`, and run a `whois`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We are now set up to attack from Singapore. We are only a few miles from our
    target machine, but to the unsuspecting IT system's security administrator, it
    will appear that the attack is coming from half a world away.
  prefs: []
  type: TYPE_NORMAL
- en: Covering our tracks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we have either root or sudo access to these machines, we can back out cleanly
    by running the following commands. This removes the traces of our login. Since
    this is our attacking machine, we will be running as root. The file that contains
    the login information for the SSH service is `/var/log/auth.log`. If we delete
    it and then make a new file, the logs from our logging in are now gone:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go into the `/var/log` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the `auth.log` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a new empty file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Drop the Terminal session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now exit from the server and you're out clean. If you do this on every machine
    as you back out of your connections, then you can't be found. Since this is all
    text-based, there isn't really any lag that you will notice when running commands
    through this many pivots. Also, all this traffic is encrypted by SSH so no one
    can see what you are doing or where you are going.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining access with Ncat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**NetCat** (**Ncat**) is a little known yet powerful tool designed to make
    raw socket connections to network ports. It''s a small tool designed to run from
    one executable file that is easily transferred to a system and can also be renamed
    to anything to hide the executable within an operating system. Ncat will call
    back to an attacking server with only user-level access. Ncat is an open source
    application brought to you by [https://www.insecure.org](https://www.insecure.org),
    the same fine folks that maintain Nmap. Ncat and its older cousin, **nc**, both
    come installed on Kali. Ncat is bundled with any install of Nmap.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, as already mentioned, there are two versions of Ncat. The older version''s
    executable is `nc`. `nc` will also make raw socket connections to any TCP/UDP
    ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fa89d8d-7a0b-4e55-ac77-1d8eee17a960.png)'
  prefs: []
  type: TYPE_IMG
- en: The big advantage of Ncat is that it supports SSL encryption where all of nc's
    traffic is in clear text. Nc's traffic can sometimes be picked up by IDS/IPS and
    other security devices. Ncat's traffic can be encrypted and hidden and appear
    as an HTTPS stream. Ncat also has the ability to only allow connections from certain
    IP addresses or IP subnets.
  prefs: []
  type: TYPE_NORMAL
- en: The initial attack to compromise the machine could either be by a network attack
    or by using some method of social engineering, such as a spear-phishing email
    carrying a payload to connect back to our attacking server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a PDF of an offer you will want to refuse. This
    PDF contains the same *phone home* payload and is designed to install the malware
    payload without any interaction or approval by the user. This PDF is created in
    a nifty tool, which we will look at in the next section, *Creating a spear-phishing
    attack with the Social Engineering Toolkit*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04540190-f411-4a24-89d2-df46b690f59d.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the initial attack has compromised it, we want the system to call home
    on a regular basis. An exploit like this can be set to maintain a constant connection
    whereby every time the connection is lost it resets the connection. It can also
    be set to reconnect at specified intervals. We like to set these up so the exploit
    calls home at a certain time and if there is not a port to connect to on the attacking
    machine then the exploit goes silent until that time comes again. A totally persistence
    connection can draw attention from network security.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now connected to the victim machine and we upload a copy of Ncat to
    the victim. We can see from the session that this is an internal attack. The `ncat.exe`
    file is in the `/usr/share/ncat-w32/` directory on Kali. Once connected, run the
    following command in Meterpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/4004b209-0f77-40bb-80cb-e3ce44e863da.png)'
  prefs: []
  type: TYPE_IMG
- en: This will transfer the Ncat executable to the victim system. Notice that we
    are using the `/` and not the `\` for directory slashes. Since you are on Linux,
    you must use the forward slash **/**. If you use **\** and run the command, you
    will find that the directory names will run together and the file will not upload
    properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going to the Windows 7 victim, we can see the file in the `Windows` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/778d4198-086b-4d65-94ac-42d33336a070.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a NetCat Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows since Windows NT 3.14 has had a command-line tool to run scheduled
    tasks. This tool is called the `AT` command. This command is very similar to the
    `cron` command available on Linux or UNIX. You can set a time, date, and number
    of times to run any command-line tool or script. So, `shell` into the system using
    your Meterpreter connection to the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You''re now in the victim system. Type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/8b165c75-b0db-46fc-8286-c7a655ad0d07.png)'
  prefs: []
  type: TYPE_IMG
- en: This sets up a job to run at 5:00 P.M. every day. It will run the `ncat.exe`
    executable with the following variables. It is calling to the attacking server
    `128.199.190.69` on port `443`. The `-ssl` flag tells the connection to use SSL.
    The `-e cmd.exe` flag tells the executable to run the `cmd.exe` executable through
    the connection.
  prefs: []
  type: TYPE_NORMAL
- en: Before 5:00 P.M. we log into our evil server using our various pivots and start
    up `ncat` in listening mode and wait for 5:00 P.M. to come around.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we are connected to `//rogue3` here and running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-n` flag tells the system to not use DNS. The `-v` tells the system to
    make the output verbose so you can see the input and output. The `-l` tells Ncat
    to listen. The `-p` tells Ncat to listen on port `443` and the `-ssl` tells Ncat
    to use SSL to encrypt the session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1b49e7f-fac4-48f5-9702-2df3bcf23a15.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have a connection to our hacked Windows 7 machine with full administrator
    access and this exploit will be ready to use at 5:00 P.M. every day without any
    further attacks on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Warning!
  prefs: []
  type: TYPE_NORMAL
- en: A real attacker will change the name of Ncat to something more vague and hard
    to spot in your filesystem. Beware of two `calc.exe` or `notepad.exe` living on
    your system. The one in a strange place could very well be Ncat or another type
    of exploit such as the one we are next going to build.
  prefs: []
  type: TYPE_NORMAL
- en: Phoning home with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Well, that was the old-school method. Now, let''s do the same thing using Metasploit''s
    tools. We will have Metasploit loaded on `//rogue3`, our evil server, for our
    victim machine to connect to a Meterpreter shell on that machine. We will be building
    and uploading this exploit from our internal hack from earlier. We will be using
    a couple of other tools from the Metasploit toolkit besides `msfconsole`. Metasploit
    comes with an independent application to build custom exploits and shellcode.
    This tool is called `msfvenom`, and we are going to use it to build an exploit.
    The full use of `msfvenom` could be a full chapter in itself and is beyond the
    scope of the book so here we will be building a reverse HTTP exploit using the
    most common flags to generate our executable. We will build the exploit by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: MSFvenom is a powerful and configurable tool. MSFvenom has the power to build
    custom exploits that will bypass any antivirus software. Antivirus software works
    by looking at the signatures of files. MSFvenom has the ability to encode an exploit
    is such a way that the antivirus software will not be able to detect it. It is
    a case of hiding an exploit, as another common executable, such as Notepad MSFvenom,
    can add NOPs or null code to the executable to bring it up to the same size as
    the original. Scary, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows a list of the flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Usage: |'
  prefs: []
  type: TYPE_TB
- en: '| `/opt/metasploit/apps/pro/msf3/msfvenom [options] <var=val>` |'
  prefs: []
  type: TYPE_TB
- en: '| **Options** | **Long options** | **Variables** | **Comment** |'
  prefs: []
  type: TYPE_TB
- en: '| `-p` | `--payload` | `<payload>` | Payload to use. Specify a `-` or `stdin`
    to use custom payloads |'
  prefs: []
  type: TYPE_TB
- en: '| `-l` | `--list` | `[module_type]` | List a module type example: payloads,
    encoders, nops, all |'
  prefs: []
  type: TYPE_TB
- en: '| `-n` | `--nopsled` | `<length>` | Prepend a nopsled of [length] size on to
    the payload |'
  prefs: []
  type: TYPE_TB
- en: '| `-f` | `--format` | `<format>` | Output format (use `--help-formats` for
    a list) |'
  prefs: []
  type: TYPE_TB
- en: '| `-e` | `--encoder` |  | The encoder to use |'
  prefs: []
  type: TYPE_TB
- en: '| `-a` | `--arch` | `<architecture>` | The architecture to use |'
  prefs: []
  type: TYPE_TB
- en: '|  | `--platform` | `<platform>` | The platform of the payload |'
  prefs: []
  type: TYPE_TB
- en: '| `-s` | `--space` | `<length>` | The maximum size of the resulting payload
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-b` | `--bad-chars` | `<list>` | The list of characters to avoid; example:
    `\x00\xff` |'
  prefs: []
  type: TYPE_TB
- en: '| `-i` | `--iterations` | `<count>` | The number of times to encode the payload
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-c` | `--add-code` | `<path>` | Specify an additional win32 shellcode file
    to include |'
  prefs: []
  type: TYPE_TB
- en: '| `-x` | `--template` | `<path>` | Specify a custom executable file to use
    as a template |'
  prefs: []
  type: TYPE_TB
- en: '| `-k` | `--keep` |  | Preserve the template behavior and inject the payload
    as a new thread |'
  prefs: []
  type: TYPE_TB
- en: '| `-o` | `--options` |  | List the payload''s standard options |'
  prefs: []
  type: TYPE_TB
- en: '| `-h` | `--help` |  | Show this message |'
  prefs: []
  type: TYPE_TB
- en: '|  | `--help-formats` |  | List available formats |'
  prefs: []
  type: TYPE_TB
- en: 'The following screenshot shows the output of the command. `msfvenom` has shown
    that no encoders were used, and there was no checking for bad characters implemented
    in the build. For this demo, they''re not needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e1676cc-08b2-4d69-8f8d-0ca3f078f49a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, by running the `ls` command, we can see our file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d691b71a-d30d-485e-ab9c-9f5c3c102ced.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we have something to upload. Just like with the Ncat example, we will use
    our internal compromising of the system to upload our exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88154cef-8391-4a74-b654-6e58255622c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As with Ncat, we will shell into our victim machine and set up the `AT` command
    to run `svchost13.exe`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Just before 5:25 P.M., log into the evil server `//rogue3`. Fire up the Metasploit
    service, `msfconsole`, to get your listener set up and running to accept the connection.
    Then set up the common handler module using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: After running the exploit, the handler will start listening for a connection
    on port `443`, waiting for your helpless victim to call home. After waiting a
    bit, we see a connection come up from `69.131.155.226`. That is the address of
    the firewall our victim machine is behind. The handler then gives us a command
    prompt to the system. Running the Meterpreter command, `sysinfo`, we see the name
    and machine information. From here, you have complete control!
  prefs: []
  type: TYPE_NORMAL
- en: A real attacker may set up this exploit and not come back for months. The only
    sign of a problem would be just a single connection going out and failing at 5:25
    P.M. every day. Just a small blip on the network.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b717544-7a22-40d9-ac8d-fdb754939ad5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You might be excited to move on to the next conquest, but since we are here
    on a machine behind the network''s firewall, let''s look around at the rest of
    the network. By running `ipconfig`, we see that there are two network interfaces
    on this machine. One is on the 10-network, at `10.100.0.0/24`, but the other is
    on a 192.168-network at `192.168.202.0`. These are both protected networks, but
    the big deal is that the network is not flat. You cannot route packets across
    two dissimilar network classes in the private ranges. The 10-network has access
    to the internet, so it may be a DMZ, and the machines on it may both be more hardened
    and contain less valuable data. This probably means there are some treasures in
    the data on the other network. This type of pivot could go to either network but
    let''s attack the backend network here and go for the real gold:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b67fd131-5de9-47de-a5b6-42efc01d3b90.png)'
  prefs: []
  type: TYPE_IMG
- en: The path marked in red is the pivot path we will be taking from our persistent
    connection to attack the domain controller on the backend network.
  prefs: []
  type: TYPE_NORMAL
- en: That time of day has come around and we have started our listener on our evil
    server and the victim machine has phoned home. We are ready to go further. We
    will use the Meterpreter command, `autoroute,` to get a route into the `192.168.202.0/24`
    network.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, when we set up the handler, we will send the session into the background
    using the `-j` flag when we run the `exploit` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbec0765-7d32-470c-842f-e60639c1319b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then the victim machine calls in. This tells us that the firewall in the target
    network has not been adjusted to block that outbound packet-stream, and that the
    anomalous behavior has not alerted their **intrusion detection system** (**IDS**).
    We have a connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/038c6f49-36e2-4411-8df5-9456164eac08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are inside the victim machine, so we can run DOS commands. If we run `ipconfig,`
    we see the two interfaces and their addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efb5ee64-fc9b-4a58-93e4-1c2ec6604db6.png)'
  prefs: []
  type: TYPE_IMG
- en: As we know, sysadmins often reuse passwords all across their networks, so let's
    get the hash from this machine and try it on the DC. Save these hashes to a text
    file or to your **KeepNote**. You'll need them later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the `hashdump` command has also found and downloaded the password
    hint for `BO Weaver`. The hint is `funny`. This may make your password guessing
    easier. Some people make their password hint almost their password, such as *Raiders
    Star Qback 1970*. A tiny bit of research could tell you the Quarterback was George
    Blanda, he was 43 years old, and that was the first season for the Raiders in
    the NFL. His jersey number was 16\. Your password list would need to include *GeorgeBlanda16*,
    *Blanda1970*, and other related things:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b53d897-6728-46bf-8cd5-d0ef0bd8a3e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run the following to print out the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We see we have a route into the backend network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/faee21d5-13de-4f22-b275-1137be0bdf16.png)'
  prefs: []
  type: TYPE_IMG
- en: Running a port scanner inside Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you have a route, it is time to reconnoiter. To keep down the noise, we
    will use a simple port scanner within Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back out of our Meterpreter by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This keeps the session running open and in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up the scanner as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We have set the port `389` to find the domain controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the number of active threads as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the scanner as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The scanner runs and we see a Windows domain controller. This is our new target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77fa5d16-fc3c-481e-98ec-8cce27a5ad62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now have our target and a password hash so the next step is to upload an
    exploit. Since we have login credentials, we''re going to use the `psexec` module
    to connect to the domain controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ae67851-4bd6-48f0-bb90-cea423f45265.png)'
  prefs: []
  type: TYPE_IMG
- en: We are not using a clear-text password because we captured the hash from the
    Win7 machine's administrator's account. Since we have the hash, we do not have
    to brute-force the password. It is always possible that the passwords for the
    different classes of the machine might be different, but in this case they are
    one and the same.
  prefs: []
  type: TYPE_NORMAL
- en: Passing the Hash
  prefs: []
  type: TYPE_NORMAL
- en: Hashes work as well as passwords in Metasploit. This is known as **Passing the
    Hash**. Pass-the-Hash exploits have been around for at least a decade, and they
    use the Windows login session information available on the network. The exploit
    takes the **Local Security Authority** (**LSA**) information to get a list of
    the NTLM hashes for users logged into the machines on the network. Tools, such
    as the Metasploit Framework or the Pass-the-Hash Toolkit, that are used to get
    the information get the username, domain name, and LM and NT hashes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the exploit has run, we get a Meterpreter shell and, by running `sysinfo`,
    we can see we are in the domain controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/32c79140-c39a-4e26-880f-9bdb40322e4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we covered earlier, Windows Active Directory stores the password hashes
    in the SAM database, so we can use `hashdump` command to dump all the hashes in
    the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/9688cb6c-ea24-4620-ad42-3d41bc0c63da.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have all the keys to the kingdom compromised from a backend network with
    no internet access. If you notice the numbers behind the usernames in the `hashdump`,
    you can see that the administrator is user `500`. Many experts tell Windows network
    administrators to change the name of the admin account, so that nobody can tell
    which users have which permissions. Clearly, this will not work. Even with the
    username `NegligibleNebbish`, just having a UID of `500` shows that this is a
    user with administrative powers.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we put this session in the background and run the sessions command, we can
    see both sessions running from the `//rogue3` evil server to our compromised systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/17112a06-c06a-4d3f-91ce-58b35ad7c583.png)'
  prefs: []
  type: TYPE_IMG
- en: The Drop Box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Drop Box, sometimes also called a **Jump Box**, is a small device that you
    can hide somewhere within a physical location that you are targeting. Getting
    the device into the location will sometimes take other skills, such as social
    engineering, or even a little breaking and entering, to get the device into the
    location. A Drop Box can also be a box sent by the security consultant firm to
    be installed on a network for internal pentesting from a remote location.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/becbafe6-9120-49b3-ac03-c4137c157153.png)'
  prefs: []
  type: TYPE_IMG
- en: The Pineapple
  prefs: []
  type: TYPE_NORMAL
- en: These days, small full-fledged computers are cheap and easy to configure. There
    are also devices on the market that are specifically designed for this use and
    are ready to go right out of the box. The Raspberry Pi is a small computer on
    a board that runs a full Linux distro and can be configured for this work. Two
    devices made for this use are the Wi-Fi Pineapple and Pwnie Express. The Wi-Fi
    Pineapple is our personal favorite. It comes with two separately configurable
    Wi-Fi access points. It is only slightly larger than a pack of cigarettes. Having
    the two Wi-Fi radios makes this device capable of connecting and pivoting from
    any network. A USB CAT5 adapter can also be attached for connections to a wired
    network. These devices are full-fledged Linux systems that any Linux application
    can be installed on.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi is another neat device that can be used for this. The Raspberry
    Pi is a small single-board ARM system that can run many versions of the Linux
    operating system. Yes, our good friends at Offensive Security have built us a
    version of Kali just for the Raspberry Pi. A simple copy of the image to a micro
    SD and the system is ready to go. They also have another neat trick with this
    image for covert operations. A Pi setup can be fully encrypted and set up to fully
    boot from a remote system. This system can also be remotely bricked or disabled
    by deleting the private encryption key with the use of a special password. The
    full details of how to set up this device can be found in the links at the end
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: So, now you have to sneak this onto the network. For a wired network, a perennial
    favorite intrusion is the friendly Telco guy approach. Employee badges can be
    easily found for various companies on the internet. Making a badge is also an
    easy process. You can find out who provides Telco services for your target during
    your passive footprinting phase. Once you have your badge, you show up at the
    target location carrying your tool bag and laptop, go to the front desk and say
    *"Hi, I'm here from Telco Provider"*. We had a ticket turned in that the internet
    is running slow." You'll be surprised how easily this works to get into the door
    and be led directly to the phone closet. Once in the phone closet, you can hide
    and connect your preconfigured Drop Box. When it fires up, it phones home and
    you are in! Remember, the weakest link to security is always the human interface.
  prefs: []
  type: TYPE_NORMAL
- en: For a less intrusive method, if your target has Wi-Fi in the office, you can
    use it as your attack vector. This is where the two Wi-Fi radios come in to play.
    One can be used to attack and connect to the target network and the other can
    be used as your connection to pivot from. The Pineapple is designed to be powered
    by a USB battery pack like one that you would use to recharge you phone. Depending
    on the battery size, a Pineapple can be powered to run up to 72 hours or more
    before power loss. With this arrangement, your evil package can even be easily
    hidden in the bushes and run without AC power. Captured data can also be copied
    to a flash card on the device if being in the area during your attack isn't feasible,
    and you can't phone home to the evil server.
  prefs: []
  type: TYPE_NORMAL
- en: When doing your physical recon of a location, look for cabling running outside
    the building. Sometimes when expansions are done at a location, the people running
    the cable will run a drop on the outside of a building just to make the install
    easier but this leaves a door open to attack. With a good hiding place, a couple
    of RJ45 connectors, and a cheap switch, you can get access to a wired network.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking the Network Access Controller (NAC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These days NAC appliances are becoming more common on networks. NACs do give
    an increased level of security, but they are not the *end all* solution that their
    vendors' marketing and sales materials suggest that they are. We will show you
    a simple method of bypassing NAC controls on a company network.
  prefs: []
  type: TYPE_NORMAL
- en: The following information comes from a real hack to a real company we performed
    a while back. Of course, all the names and IP addresses have been changed to protect
    the company. This is not theory. This is a real-world hack. The good thing for
    the company in this dramatization is that we are the good guys. The sad thing
    is it only took about 30 minutes to figure this out, and maybe 2 hours to fully
    implement it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be bypassing the NAC for the company, https://www.widgetmakers.com.
    The Widget Makers company has two networks: one, the corporate LAN (CorpNET),
    and the other, a production network (ProdNET) containing classified data. The
    two networks are of a flat design, and both networks have full access to each
    other. A NAC appliance was configured and installed on the CorpNET. Employees
    must now use a NAC agent on their machines to connect to the CorpNET. Widget Makers
    uses SIP phones for voice communications. These phones are not on a separate VLAN.
    They are connected to the CorpNET VLAN for ease of use. Widget Makers also has
    a number of network printers on the CorpNET.'
  prefs: []
  type: TYPE_NORMAL
- en: NAC appliances use an agent that is installed on the user's machine for login
    and verification of the user and the machine's identity. These appliances can
    be configured to use a **Remote Authentication Dial in User System** (**RADIUS**)
    server or domain controller for the user credentials. Sometimes, NAC appliances
    use certificates to authenticate the machine. Trying to spoof an internal machine's
    MAC address without an agent and a login will normally result in the MAC address
    getting locked out of the network.
  prefs: []
  type: TYPE_NORMAL
- en: The weakness in the system is the agents. Most NAC systems are proprietary and
    tied to one vendor. One vendor's agent will not work with another, and there is
    no standard for NAC controls. Most vendors only make agents that run on Windows
    so if you have Macs or Linux workstations on your network, these cannot be joined
    to the network using NAC controls. Now the vendor will tell you to run a Windows
    Only network. If you are a sysadmin reading this book, you know that in reality
    there is no such thing. Even if all workstations and servers are running Windows
    on any network, there are other devices that either don't or can't run Windows.
  prefs: []
  type: TYPE_NORMAL
- en: So what do you do with phones, printers, and workstations not running a Windows
    operating system to get them to work within the NAC controls? You have to whitelist
    their MAC and IP addresses within the NAC settings. So, by taking one of these
    devices off the network and spoofing its identity you now have access to the restricted
    VLAN with the access level of the device you have spoofed. On a flat network,
    normally you have access to everything in all local networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the easiest marks for this hack is a SIP phone. People would definitely
    notice if a printer went offline. Everyone uses printers. To use a printer for
    this type of exploit, you must pick a printer that isn''t used often. Phones are
    a different case. Offices always have extra phones for guests, and often, if you
    know the work schedule of the employees, you can pick the phone of someone who
    is away on vacation. Unplug their phone, tape your Drop Box under the desk, and
    connect it to the phone drop and you are in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/375f89d6-1116-4bed-b615-df5524e59717.png)'
  prefs: []
  type: TYPE_IMG
- en: So how do you protect from this?
  prefs: []
  type: TYPE_NORMAL
- en: First thing, don't count on NAC being the ultimate security feature on your
    network. NAC should be only one layer of many in the security architecture of
    the network. Actually, it should be one of the upper layers of your network security.
    One simple workaround is to turn off (unplug) network ports that are not in use.
    This will not save you from a hacker subverting a desk-phone of somebody who is
    on vacation, but it can keep an empty cube from becoming a hacker's headquarters.
  prefs: []
  type: TYPE_NORMAL
- en: The first layer in any network security should be proper segmentation. If you
    can't route to it, you can't get to it. Notice in the preceding diagram that **CorpNET**
    and **ProdNET** have full access to each other. An attacker coming in through
    **CorpNET**, spoofing a network device, can gain access to the restricted **ProdNET**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a spear-phishing attack with the Social Engineering Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Social Engineering Toolkit** (**SET**) license agreement states that
    SET is designed purely for good and not evil. Any use of this tool for malicious
    purposes that are unauthorized by the owner of the network and equipment violates
    the **terms of service** (**TOS**) and license of this toolset. To find this tool,
    go through the menu Kali Linux 08- Exploitation Tools | social engineering toolkit,
    or type `setoolkit` on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4c42417-c224-4786-bd86-26828aab53a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This attack is going to use a Metasploit reverse HTTP payload, so there are
    a couple of steps that you have to put in place before using the SET:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the Metasploit service. Start up the Metasploit console by going through
    the menus: Applications | 08 - Exploitation Tools | metasploit framework. You
    can also start the Metasploit Framework console by typing `msfconsole` at a Command
    Prompt, avoiding the GUI menu altogether.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ascertain the local host address your listener will be listening on, so that
    your malware has something to phone home to. In our test network, the Kali server
    is running on a virtual machine running on a physical host. Either the host's
    IP or a bridged pseudo-Ethernet card from the virtual machine must be the destination
    when the malware calls in. If you were running your Kali from a VMS machine on
    the internet, this would be slightly less difficult.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here are the configs for the test network. There are two machines with internet
    access, and two servers that are only accessible from the internal network. Kali
    186 is the attacker's laptop, and the Windows 10 workstation is the jump box for
    the internal network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have started Metasploit, you need to start the listener, so the malware
    you are about to create has something with which to answer the call when it phones
    home.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command in the MSF Command Prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The listener is an open running process, and so the cursor does not return
    to the ready state. To show that the listener is active, we can run a port scan
    against it with `nmap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21521e32-60f1-4665-83d5-deccdcb5c9ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the other side, the listener has responded to the `nmap` scan with a readout
    of the data from the scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0ff3f00-86bb-4235-a0d8-f2aaf3f0a7da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following diagram, we can see that the source of the scan is marked
    by the listener, and all of the scan requests are recorded as coming from `10.0.2.15`,
    which is the internal IP of the Kali machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/277a7f2e-2df2-41fa-a9ff-c3bfe4bf48cd.png)'
  prefs: []
  type: TYPE_IMG
- en: The malware we are going to create will be an executable file wrapped in a PDF
    file. This will be an attachment, on an email that is from a purportedly safe
    source, to an identified systems administrator in the target company. We will
    start with a review of the menu structure of the Social Engineering Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main menu has six entries, and an exit cue:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1) Social-Engineering Attacks`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2) Fast-Track Penetration Testing`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`3) Third-Party Modules`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`4) Update the Social-Engineer Toolkit`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`5) Update SET configuration`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`6) Help, Credits, and About`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`99) Exit the Social Engineering Toolkit`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under entry #1, `Social-Engineering Attacks`, there are 11 entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1) Spear-Phishing Attack Vectors`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2) Website Attack Vectors`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`3) Infectious Media Generator`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`4) Create a Payload and Listener`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`5) Mass Mailer Attack`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`6) Arduino-Based Attack Vector`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`7) Wireless Access Point Attack Vector`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`8) QRCode Generator Attack Vector`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`9) Powershell Attack Vectors`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`10) Third Party Modules`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`99) Return back to the main menu.`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Spear-Phishing Attack Vectors menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Spear-Phishing Attack Vectors` menu has four options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1) Perform a Mass Email Attack`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2) Create a FileFormat Payload`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`3) Create a Social-Engineering Template`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`99) Return to Main Menu`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we are going to set up a persistent threat that lets us stay in command
    of the victim's machine, and have to overcome a user's possible reluctance to
    double-click an attachment, we have to create an irresistible spear-phishing mail
    piece. To do this properly, it is important to have done effective reconnaissance
    ahead of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Company address books and calendars are useful for creating the urgency needed
    to get an email opened. Just like with marketing by email, either legitimate or
    spammy, a spear-phishing email title has to be interesting, intriguing, or frightening
    to the victim:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/501e35a9-7355-4c94-8bd9-cd6a2a64c88a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This email is short, interesting, and can create urgency by greed. The attachment
    could be any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A ZIP file, presumed to have a document inside
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Word document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PDF file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The SET gives 21 possible payloads. Some of these will work better on Mac operating
    systems than Windows systems. Most Windows workstations are not provisioned to
    handle RAR-compressed files. The following are the choices available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1) SET Custom Written DLL Hijacking Attack Vector (RAR, ZIP)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2) SET Custom Written Document UNC LM SMB Capture Attack`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`3) MS14-017 Microsoft Word RTF Object Confusion (2014-04-01)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`4) Microsoft Windows CreateSizedDIBSECTION Stack Buffer Overflow`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`5) Microsoft Word RTF pFragments Stack Buffer Overflow (MS10-087)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`6) Adobe Flash Player "Button" Remote Code Execution`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`7) Adobe CoolType SING Table "uniqueName" Overflow`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`8) Adobe Flash Player "newfunction" Invalid Pointer Use`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`9) Adobe Collab.collectEmailInfo Buffer Overflow`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`10) Adobe Collab.getIcon Buffer Overflow`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`11) Adobe JBIG2Decode Memory Corruption Exploit`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`12) Adobe PDF Embedded EXE Social Engineering`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`13) Adobe util.printf() Buffer Overflow`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`14) Custom EXE to VBA (sent via RAR) (RAR required)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`15) Adobe U3D CLODProgressiveMeshDeclaration Array Overrun`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`16) Adobe PDF Embedded EXE Social Engineering (NOJS)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`17) Foxit PDF Reader v4.1.1 Title Stack Buffer Overflow`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`18) Apple QuickTime PICT PnSize Buffer Overflow`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`19) Nuance PDF Reader v6.0 Launch Stack Buffer Overflow`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`20) Adobe Reader u3D Memory Corruption Vulnerability`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`21) MSCOMCTL ActiveX Buffer Overflow (ms12-027)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd7b9407-5bf6-410d-8623-38eaf4fbd7b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s just choose the default, which is item 12\. When you hit *Enter*, the
    next screen lets you use a doctored PDF file of your own choosing, or to use the
    built-in blank PDF. Choosing the second option, we see seven options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1) Windows Reverse TCP Shell`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2) Windows Meterpreter Reverse_TCP`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`3) Windows Reverse VNC DLL`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`4) Windows Reverse TCP Shell (x64)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`5) Windows Meterpreter Reverse_TCP (X64)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`6) Windows Shell Bind_TCP (X64)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`7) Windows Meterpreter Reverse HTTPS`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6ce59fb0-5deb-462b-a6a3-4f605a32b927.png)'
  prefs: []
  type: TYPE_IMG
- en: Since three of the options are going to run code that gets the victim machine
    to phone home to your Metasploit Framework Meterpreter tool, and you have been
    practicing with that tool, it might make sense to choose one of those as your
    evil payload. Let's choose option, `7) Windows Meterpreter Reverse HTTPS`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we type `7`, we get several options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`IP address of the listener (LHOST)`: Use the host address where you are going
    to have the listener. My Kali workstation thinks it is 10.0.2.15.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Port to connect back to [443]`: Port `443` is the default here, but you can
    have the listener at any port on your listening device. `443` is the HTTPS port,
    so it would not look unusual because of its number. Port `12234` would look unusual
    and might also be blocked if the firewall administrators are whitelisting approved
    ports, and blacklisting all the others. It states that payloads are sent to the
    `/root/.set/template.pdf` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is not what it does. The executable is set as `legit.exe` in this case.
    When you enter the name of the file, as in shown the following screenshot, you
    need to use the full path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5be5dade-6d9e-460a-8dfe-d068018856f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have chosen the name of the PDF, fire up the Social-Engineering Toolkit
    Mass E-Mailer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mailer will use an open mail relay, if you have found one, a Gmail account,
    or any legitimate email SMTP server. The SET does not contain its own SMTP server.
    You might want to find a free email service that you can use for this purpose,
    or use an open relay mail server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a860d416-3adb-4f5a-85b0-3715dd2b0fa6.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose a subject, or write a new email message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The SET allows you to choose several different tasty email subjects for your
    phishing email attack, and you can easily add new templates to customize the approach.
    The fourth choice in the following list is the one we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea8b6337-4dc8-4013-acec-c973d0042ed6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For this test of the system, I chose to send the attack to and from a Gmail
    account over which I have control. The SET does not return to the mailer section
    in the event of an error in sending the message. Google Mail caught the bogus
    PDF file and sent back a link to its security pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ad7cd15-7d83-4f80-bab7-3c1070ecc993.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use an email account from a server that does not check for infected attachments.
    We used `evilhacker@act23.com`, and sent the email to `kalibook@act23.com`, and
    this worked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c9f74d7-6cfe-431d-8be3-2b32c54f5793.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Backdoor Factory to evade antivirus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The exploit code worked well on an XP SP2 machine with no antivirus software,
    and would work well on any machine that didn't have AV installed, but it was less
    effective on a Windows 10 machine with the basic default Windows antivirus installed.
    We had to turn off the real-time checking feature on the antivirus to get the
    email to read without errors, and the antivirus scrubbed out our doctored file.
    As security engineers, we are happy that Microsoft Windows 10 has such an effective
    anti-malware feature, right out of the gate. As penetration testers, we are disappointed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Backdoor Factory inserts shellcode into working EXE files without otherwise
    changing the original all that much. You can use the executables in the `/usr/share/windows-binaries`
    directory, as shown in the following screenshot, or any other Windows binary that
    does not have protection coded into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28f499f6-38d8-4c5d-a6b7-98ee4b56d76b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code to run Backdoor Factory and create a remote shell with a listener
    at `10.0.0.2`, on port `43434` is as follows. The cave-jumping option spreads
    your code across the voids in the executable to further confuse the antivirus
    scans:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you make an error in the shellcode choice, the application shows you your
    choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c25fd43e-5741-4d32-bb29-1b3ffa7e30af.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The Backdoor Factory then carries on and gives options for injecting the shellcode
    into all the voids or caves in the binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5df754f-1f57-41b9-a382-f03992a1216f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will just choose Cave 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d2fbe20-617e-428e-afeb-d6f2c5db0cf8.png)'
  prefs: []
  type: TYPE_IMG
- en: The `backdoored` directory is in the root `home` directory, `~/backdoored/`,
    so it is easy to find. We could use the SET to push this doctored file to a mass
    mailing, but you can just email it from a spoofed account to the Windows 10 box
    to see if it can clear the antivirus hurdle. The executable had to be zipped to
    get past the filters on our mail server, and as soon as it was unzipped on the
    Windows 10 machine, it was scrubbed away as a malware file.
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10's default antivirus found this file as it found the other file from
    the SET. Unpatched, older versions of Windows are plainly at risk.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have seen five different ways to gain control and put in
    back-doors on Windows machines, from Ncat scripting, to Metasploit Meterpreter
    attacks, to adding a Drop Box, to using SET for sending phishing emails, and to
    using Backdoor Factory to create executables with shell-script backdoors.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we have also learned the set up and use of a Jump Box on various
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will address reverse-engineering malware you collect,
    so you can understand what it is likely to do in the wild or in your network,
    and stress-testing your equipment.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Kali Raspberry Pi set up**: [https://docs.kali.org/kali-on-arm/install-kali-linux-arm-raspberry-pi](https://docs.kali.org/kali-on-arm/install-kali-linux-arm-raspberry-pi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Raspberry Pi disk encryption**: [https://docs.kali.org/kali-dojo/04-raspberry-pi-with-luks-disk-encryption](https://docs.kali.org/kali-dojo/04-raspberry-pi-with-luks-disk-encryption)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
