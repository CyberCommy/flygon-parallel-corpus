- en: Using Debian Package Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we focused on the steps to install a Linux distribution.
    We first worked with the concept of a LiveCD, as opposed to a regular installation.
    We saw how the system could be booted up without having a hard disk. Then we discussed
    why we would use a LiveCD. After that, we switched our attention to a demo of
    performing a fresh installation of Linux distribution. Emphasis was placed on
    the partitioning, particularly the common mount points. Next, we saw how to do
    an installation side by side with a Windows OS. Following this, we did a side-by-side
    installation between Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will continue our lesson by focusing on the points surrounding
    software installation. We will begin by looking at the Debian style of package
    management. First, we will start with the `dpkg` command, and look at the various
    methods of using the `dpkg` command. Also, we will look at the various options
    which can be passed with the `dpkg` command. Next, we will turn our attention
    toward the `apt-get` utility. This is another popular command for installing applications
    within a Debian environment. We will pay close attention to the options that can
    be passed with the `apt-get` command. Following this, the focus will be switched
    to the `aptitude` utility. Finally, we will close by looking at the `synaptic`
    utility. In a similar way to the previous commands, we will focus on the syntax
    for deploying software within a Debian environment. All the utilities discussed
    in this chapter are commonly used for managing software within a Debian environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The `dpkg` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `apt-get` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `aptitude` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `synaptic` utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dpkg command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firstly, the `dpkg` utility is a low-level system tool to extract, analyze,
    unpack, and install, and remove packages with a `.deb` extension. The scripts
    read by `dpkg` inside each `.deb` file are important as they give information
    to the program regarding the packages'' installation, removal, and configuration.
    The `dpkg` utility resides at the base of the package management system in Debian-based
    distributions. The Debian package, `dpkg`, provides the `dpkg` utility, as well
    as several other programs necessary for runtime functioning of the packaging system;
    namely: `dpkg-deb`, `dpkg-split`, `dpkg-query`, `dpkg-statoverride`, `dpkg-divert`,
    and `dpkg-trigger`. We can take a glance at the `/var/log/dpkg.log` file. There
    are a lot of verbose details about triggers and packages going through varying
    stages of unpacking and configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at `/var/log/dpkg.log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, we have learned about the various packages that
    the `dpkg` utility is managing. If we want to see a list of packages on this system,
    we can use the `l` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding output, we read the output from left to right. We should now
    focus our attention on the far right of the output. This is the description section;
    the packages are presented in a human-readable summary for each package that is
    currently installed onto this system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also narrow down our output by filtering the `dpkg` command; let''s
    just look for the `xterm` program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify whether a package is installed or not with `--get-selections`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can view the files owned by a package by using the `L` option. Let''s continue
    with our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can search for a particular package in this system by using the `s` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this case, Apache is not installed by default on this system.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve downloaded a `tftp` client for this demonstration. Let''s verify that
    the `tftp` client isn''t installed on this system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll install a package using the `dpkg` command. Let''s try to install
    the `tftp` client package using the `i` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, you can see that we would need root privileges to
    install or remove a package. Let''s retry as root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now, let''s retry the `dpkg` command with the `l` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! We can now see that our `tftp` client is listed. We can also run the
    `dpkg` with the `--get-selections` to verify that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When you use `dpkg` to install a package, sometimes you may run into dependency
    issues. To work around this, you will need to download and install each of the
    dependencies before you install your package using `dpkg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also remove a package using the `dpkg` command. Let''s remove the `tftp`
    package which we installed in the previous example. We will use the `-r` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s verify that the `tftp` package has indeed been uninstalled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! However, when we use the `-r` option, it does not remove the configuration
    file(s). In order to remove the package, along with the configuration files, we
    should use the `-P` (purge) option. Here is how that works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also extract the content of a package without installing it. We should
    use the `-x` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we can download any packages and install them using the `dpkg` utility,
    we need to know the correct hardware architecture of the system. Fortunately,
    we can use the `dpkg-architecture` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we can see that this system supports either
    32-bit or 64-bit packages. We can also garner useful information regarding the
    purpose of a package. We need to use the `dpkg-query` command with the `-s` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we are given a description at the bottom regarding
    the use of the `tftp` package.
  prefs: []
  type: TYPE_NORMAL
- en: The apt-get command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Advanced Package Tool** (**APT**) is a command-line tool that is used
    for easy interaction with the `dpkg` packaging system. APT is the ideal method
    used for managing software within Debian-based Linux distributions, such as Ubuntu.
    It manages dependencies effectively, maintains large configuration files, and
    properly handles upgrades and downgrades to ensure system stability. `dpkg` on
    its own does not handle dependencies properly. `apt-get` performs installations,
    package searches, updates, and many other operations to packages available to
    your system. Keeping packages up to date is extremely important, as using out-of-date
    packages can lead to security issues on your system. The `apt-get` utility requires
    root privileges, similar to the `dpkg` utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, before we make it perform in any software installation, it''s always
    best practice to update the package database. We should run the `apt-get` update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Based on the preceding output, the first section will be `Hit`, `Get`, `Ign`.
    Now, `Hit` means that there is no change in the package version, and `Get` means
    that there is a new version available. Then `Ign` means that the package is being
    ignored. There are various reasons why you see `Ign`, ranging from a package being
    too recent to there being an error in retrieving the the file. Usually, the errors
    are harmless.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, before we install an application, we can search for it using the `apt-cache`
    command. Let''s say that we want to install a messenger application. We can do
    this in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we can see that a wide range of messenger packages
    are available to be installed. If, for some reason, we wanted to see all the available
    packages, we could use the `pkgnames` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see a variety of packages which we can install onto this system. We
    can see a brief description of each package by specifying the correct package
    name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we can see the descriptions for various packages
    that we passed with the `search` option. We can also check the details of a package
    by using the `show` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even filter this information to only look for dependencies. We should
    use the `showpkg` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also view the statistics for the cache on this system, by using the
    `stats` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can download a package without installing it. We can use the `download`
    option with `apt-get`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also install a package that has been downloaded. We need to specify
    the path with the `apt-get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, sometimes you may run into the problem as seen in the previous example.
    The easiest way to fix this would be to rerun the `apt-get` command with the `-f`
    option, leaving out the package name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'There we go! As we can see, the installation was successful. This is what is
    so great about the `apt-get` utility. It finds the dependencies that are needed
    and offers to install them to fix the problem being reported. We can also install
    multiple applications simultaneously. We simply place each package name on the
    same line, separated by a space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! So, now you can see the power of the `apt-get` utility in action. We
    can also upgrade all of the packages that are currently installed, by using the
    `upgrade` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also remove some packages that were previously used, to ensure a particular
    package was installed correctly. In our case, if we rerun the `upgrade` option,
    we should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We should use the `autoremove` option as suggested to free up some disk space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also free up disk space by using the `clean` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the command ran very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: It's always best practice to clean up disk space regularly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also remove an application by using the `remove` option. This would
    remove the application but not the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We would then run the `autoremove` option to clean up unnecessary packages.
  prefs: []
  type: TYPE_NORMAL
- en: The autoremove option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often, when we uninstall a package, there are some unnecessary packages which
    were initially installed in order for the specific package to function. These
    unneeded packages take up hard disk space; we could reclaim space by using the
    `autoremove` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! We can remove the package and its configuration by using the `purge`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: The purge option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `purge` option, when used, not only removes a package, it also removes
    a package configuration file. This is ideal because most of the time when we uninstall
    a package using `uninstall`, it leaves unwanted configuration files in our system.
    Here is how we use the `purge` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Great!
  prefs: []
  type: TYPE_NORMAL
- en: It is always a good idea to run the `apt-get` command with the `clean` option
    regularly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever we install a package using the `apt` utility, it uses repositories
    to download the packages into the cache. By default, when we install a Debian
    distribution, the installation comes with official repositories. These are stored
    in the `/etc/apt/sources.list` file. Let''s take a look at that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The entries that start with `deb` refer to where to search for packages. The
    entries that start with `deb-src` refer to source packages.
  prefs: []
  type: TYPE_NORMAL
- en: The aptitude command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aptitude is a frontend to APT, which is the Debian package manager. It's best
    suited in shell environments where a GUI is not present. The `aptitude` command allows
    users to view the list of packages, and perform package management tasks such
    as installing, removing or upgrading packages. There is an interactive mode; also,
    it could be used as a command-line tool, similar to `apt-get`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see this in action by simply entering the `aptitude` command without
    passing any option(s):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the screen shown in the preceding screenshot, we can interact by using our
    keyboard or mouse to navigate. At the top, there is a menu. We can select Actions
    from the menu and see the available options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also go directly to Package from the menu and see options similar to
    doing package management from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, `aptitude` is very intuitive when we use this method for package
    management.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also manage packages using the command line. This would require us to
    pass options with the `aptitude` command, if we prefer typing commands over a
    menu type of environment. The `aptitude` command supports most of the options
    that we would pass with the `apt-get` command. Let''s start with the `search`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: The search option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we execute the `search` option, the `aptitude` command does a search for
    possible matches based on the criteria specified after the `search` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we can see similar patterns of the `aptitude`
    command to that of APT. We can also install and update the package list by passing
    the `update` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have updated the package list, we can upgrade the packages by passing
    the `safe-upgrade` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also install a package by passing the `install` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! We can also remove a package. We would simply pass the `remove` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Great! As we can see, the `aptitude` command is very useful for any Linux administrator.
  prefs: []
  type: TYPE_NORMAL
- en: The synaptic utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a graphical form of package management; it is based on the APT. This
    powerful GUI utility enables us to install, update, or remove packages within
    an easy-to-use environment. Using the `synaptic` utility enables us to manage
    packages without requiring us to work at the Command Prompt. Let''s take a look
    at the `synaptic` utility within the Ubuntu 18 system. The `synaptic` utility
    is not installed within Ubuntu 18 by default. We can see information about the
    `synaptic` utility before we install it, by using the `apt-cache` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding screenshot, we can see there are a number of dependencies
    that the `synaptic` utility depends on. Let''s install the `synaptic` utility
    by using the `apt-get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We have just installed the `synaptic` utility. We could launch the `synaptic`
    utility to explore its features from the **Search your computer** button at the
    top left-hand corner of the Ubuntu 18 system based on the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as we select the `synaptic` package manager, it will prompt us for
    authentication, as can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once have authenticated, we will then be presented with the `synaptic` utility.
    We can use the Search button to find specific packages. The following screenshot depicts
    the Search function dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Awesome job! As can be seen in the preceding screenshot, we can perform searches
    by simply entering the desired package name. When compared to the command-line
    counterpart, it''s much easier to use a GUI. To perform a search, we would simply
    select the Search button. Also, we can update the package database from within
    the `synaptic` utility by simply selecting the Reload button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Great! As you can see, the `synaptic` utility is very intuitive in nature. It
    can be navigated in a similar way to other GUI programs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on the various methods for package management. First,
    we delved into the traditional way of package management; that is, to use the
    `dpkg` utility. We looked at ways to view the current packages on the system.
    We also touched on querying for a particular package. Then we looked at the various
    locations in which a package would install files. Adding to that, we did an actual
    installation of a package. We then verified that the package was indeed installed.
    This was followed up by a removal of a package. Next, we switched our attention
    to a more common approach to package management; namely, APT. We used best practice,
    which is to always pass the `update` option with `apt`. We then focused on the
    method of searching for a package. Adding to this, we looked at the current packages.
    Also, we focused on getting some useful information on a particular package.
  prefs: []
  type: TYPE_NORMAL
- en: This was followed up by the installation of a package. Then we saw that we can
    install multiple packages on a single `apt-get` command. This was followed by
    a demo on updating the packages. Also, we saw how to remove a package using the
    `apt-get` command. Finally, we worked with `aptitude`. The `aptitude` command
    on its own presents a user-interactive, menu-driven environment. We also looked
    at passing options with the `aptitude` command. Initially, we updated the package
    list. This was followed by an upgrade of the packages. Adding to this, we saw
    the technique for searching for packages. Then a package installation was performed
    using the command line. Following this, we did a demo on removing a package at
    the command line. Finally, we ended with an alternative to the command line, the
    `synaptic` utility. The `synaptic` utility, which is based on APT, is a GUI for
    package management.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we take a deep dive into the world of Red-Hat package management;
    particularly Fedora. We will cover the various techniques we would use to manage
    packages, such as `rpm`, `yum`, `dnf`, and `yumex`. I hope you come and join in,
    because I'm confident you will be better equipped to manage packages in the Red
    Hat world after going through the next chapter. This will ultimately take you
    one step closer to certification.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which option with the `dpkg` command is used to display the packages that `dpkg`
    is managing on a system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `dpkg -a`
  prefs: []
  type: TYPE_NORMAL
- en: B. `dpkg -l`
  prefs: []
  type: TYPE_NORMAL
- en: C. `dpkg -i`
  prefs: []
  type: TYPE_NORMAL
- en: D. `dpkg –d`
  prefs: []
  type: TYPE_NORMAL
- en: Which option with `dpkg-query` is used to show a human-readable description
    of a package?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `dpkg-query -a`
  prefs: []
  type: TYPE_NORMAL
- en: B. `dpkg-query-c`
  prefs: []
  type: TYPE_NORMAL
- en: C. `dpkg-query -s`
  prefs: []
  type: TYPE_NORMAL
- en: D. `dpkg-query-r`
  prefs: []
  type: TYPE_NORMAL
- en: Which log file is used to display `dpkg` package-related messages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `cat /var/log/dpkg.log`
  prefs: []
  type: TYPE_NORMAL
- en: B. `cat /var/dpkg/dpkg.log`
  prefs: []
  type: TYPE_NORMAL
- en: C. `cat /var/dpkg-query/dpkg.log`
  prefs: []
  type: TYPE_NORMAL
- en: D. `cat /var/log/dpkg.dpkg`
  prefs: []
  type: TYPE_NORMAL
- en: Which option is used to display packages that are installed with the `dpkg`
    command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `dpkg --get-selections`
  prefs: []
  type: TYPE_NORMAL
- en: B. `dpkg –set-selections`
  prefs: []
  type: TYPE_NORMAL
- en: C. `dpkg –get-selection`
  prefs: []
  type: TYPE_NORMAL
- en: D. `dpkg-query –get-selection`
  prefs: []
  type: TYPE_NORMAL
- en: Which option is used to add a package using the `dpkg` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `dpkg -e`
  prefs: []
  type: TYPE_NORMAL
- en: B. `dpkg –r`
  prefs: []
  type: TYPE_NORMAL
- en: C. `dpkg -Add`
  prefs: []
  type: TYPE_NORMAL
- en: D. `dpkg -i`
  prefs: []
  type: TYPE_NORMAL
- en: Which option is used to remove a package along with its configuration files
    using the `dpkg` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `dpkg -p`
  prefs: []
  type: TYPE_NORMAL
- en: B. `dpkg-e`
  prefs: []
  type: TYPE_NORMAL
- en: C. `dpkg -P`
  prefs: []
  type: TYPE_NORMAL
- en: D. `dpkg-a`
  prefs: []
  type: TYPE_NORMAL
- en: Which option is used to update the `apt cache`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `apt-get -c`
  prefs: []
  type: TYPE_NORMAL
- en: B. `apt-get update`
  prefs: []
  type: TYPE_NORMAL
- en: C. `apt-get upgrade`
  prefs: []
  type: TYPE_NORMAL
- en: D. `apt-get -u`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used to search the cache for a package?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `apt-get search`
  prefs: []
  type: TYPE_NORMAL
- en: B. `apt-cache search`
  prefs: []
  type: TYPE_NORMAL
- en: C. `apt-get -update`
  prefs: []
  type: TYPE_NORMAL
- en: D. `apt-get clean`
  prefs: []
  type: TYPE_NORMAL
- en: Which option is used to remove a package and its configuration using the `apt`
    command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `apt-get remove`
  prefs: []
  type: TYPE_NORMAL
- en: B. `apt-get purge`
  prefs: []
  type: TYPE_NORMAL
- en: C. `apt-get --remove`
  prefs: []
  type: TYPE_NORMAL
- en: D. `apt-get --update`
  prefs: []
  type: TYPE_NORMAL
- en: Which option is used to update the package list using the `aptitude` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `aptitude purge`
  prefs: []
  type: TYPE_NORMAL
- en: B. `aptitude clean`
  prefs: []
  type: TYPE_NORMAL
- en: C. `aptitude update`
  prefs: []
  type: TYPE_NORMAL
- en: D. `aptitude --clean`
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This first website gives you useful information about the Debian distributions: [https://wiki.debian.org](https://wiki.debian.org).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This website gives you tips and best practices for the Debian distributions: [https://www.debian.org](https://www.debian.org).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This next website gives you a lot of useful tips and best practices from users
    in the Linux community, particularly for the Debian distributions such as Ubuntu:  [https://askubuntu.com](https://askubuntu.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This last website gives you a lot of useful resources on various problems faced
    by other Linux users for various tasks: [https://unix.stackexchange.com](https://unix.stackexchange.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
