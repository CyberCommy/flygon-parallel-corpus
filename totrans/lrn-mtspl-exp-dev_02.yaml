- en: Chapter 2. Metasploit Framework Organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will investigate the organization of Metasploit Framework.
    Metasploit Framework is an open source project created by *HD Moore* in 2003,
    and then acquired by Rapid7 LLC on October 21, 2009\. Metasploit 2.0 was released
    in April 2004 and this version included 19 exploits with over 27 payloads. There
    has been constant development since then and now we have Metasploit 4.5.2, which
    includes hundreds of exploits and payloads. Moore created this framework for exploit
    code development and attacking vulnerable remote systems. It is considered one
    of the best penetration testing tools with support for vulnerability assessment
    using Nessus and other famous tools. The development of this project started off
    in Perl and was later rewritten in Ruby. Since its acquisition, Rapid7 has added
    two more proprietary editions known as Metasploit Express and Metasploit Pro.
    Metasploit supports all platforms including Windows, Linux, and Mac OS.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit interfaces and basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First we will see how to access Metasploit Framework from terminal and in other
    ways. Open your terminal and type in `msfconsole`. In the terminal it will appear
    as `root@bt:~# msfconsole`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit interfaces and basics](img/3589OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have opened `msfconsole` from the terminal program; however there are
    other ways in which we can access Metasploit Framework, these include MsfGUI,
    Msfconsole, Msfcli, Msfweb, Metasploit Pro, and Armitage. For our purposes, in
    this book we will use `msfconsole` for the most part.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit interfaces and basics](img/3589OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So how is Metasploit really organized? We can see many interfaces here. We will
    look at details of the architecture as we dig deeper into the various aspects
    of Metasploit. Now the important thing we need to understand is the overall architecture.
    The architecture is open source, and this allows you to create your own modules,
    scripts, and many other interesting things in Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The library architecture in Metasploit is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rex**: This is the basic library used in Metasploit for various protocols,
    transformations, and socket handling. It supports SSL, SMB, HTTP, XOR, Base64,
    and random text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Msf::Core**: This library defines the framework and provides the basic application
    interface for Metasploit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Msf::Base**: This library provides a simplified and friendly application
    interface for the Metasploit Framework.![Metasploit interfaces and basics](img/3589OS_02_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we will explore the Metasploit directory a little more. Just follow these
    steps to explore the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your BackTrack5 R2 virtual machine and your terminal. Type `cd /opt/metasploit/msf3`
    and then press *Enter*. Now we have entered the Metasploit Framework directory.
    To view the list of files and directories in the Metasploit directory type in
    `ls`.![Metasploit interfaces and basics](img/3589OS_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After typing the `ls` command we can see a bunch of directories and scripts
    here. The important directories listed are `data`, `external`, `tools`, `plugins`,
    and `scripts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will explore all of these important directories one-by-one:'
  prefs: []
  type: TYPE_NORMAL
- en: We enter the `data` directory by typing the command `cd data/`. This directory
    contains a lot of helper modules such as `meterpreter`, `exploits`, `wordlists`,
    `templates`, and many more.![Metasploit interfaces and basics](img/3589OS_02_05.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next we will explore the `meterpreter` directory. To enter the directory, type
    in `cd meterpreter/` and we will see many `.dll` files. Actually it contains `.dll`
    files as well as other interesting things, which are typically required to enable
    the Meterpreter functionality called **post exploitation**. As an example we can
    see different types of DLL files here, such as OLE, Java version, PHP version,
    and so on.![Metasploit interfaces and basics](img/3589OS_02_06.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another directory is the `wordlist` directory in the `data` directory. This
    directory contains the list of usernames and passwords for different services
    such as HTTP, Oracle, Postgres, VNC, SNMP, and more. Let us explore the wordlist
    directory, type in `cd ..` and press *Enter* to get back into the `data` directory
    from the `meterpreter` directory. After that, type in `cd wordlists` and press
    *Enter*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Metasploit interfaces and basics](img/3589OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another interesting directory is `external` in `msf3`, which contains external
    libraries used by Metasploit. Let us explore the `external` directory by typing
    `cd external`.![Metasploit interfaces and basics](img/3589OS_02_08.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then have a look at the `scripts` directory, which is contained in the `msf3`
    directory. This directory contains a lot of scripts that are used by Metasploit.
    To enter the `scripts` directory type in `cd scripts` and then type in the `ls`
    command to view the list of files and folders.![Metasploit interfaces and basics](img/3589OS_02_09.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another important directory in `msf3` is the `tools` directory. This directory
    contains tools to be used in exploitation. We will explore the `tools` directory
    by typing in `cd tools` and then the `ls` command to see the list of tools such
    as `pattern_create.rb` and `pattern_offset.rb`, which are extremely useful for
    exploit research.![Metasploit interfaces and basics](img/3589OS_02_10.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last useful directory is `plugins` in the `msf3` directory. The `plugins`
    directory contains plugins for integrating third-party tools such as nessus plugins,
    nexpose plugins, wmap plugins, and other plugins with Metasploit. Let us have
    a look at the `plugins` directory by typing `cd plugins` and then the `ls` command
    to see the list of plugins.![Metasploit interfaces and basics](img/3589OS_02_11.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the preceding explanation, we now have a brief understanding of the directory
    structure of Metasploit and its functions. One important thing is to update Metasploit
    to have the latest versions of the exploits. Open your terminal and type in `msfupdate`.
    It may take a few hours to update the latest modules.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit interfaces and basics](img/3589OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exploit modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before moving to the exploitation techniques, first we should understand the
    basic concepts of an exploit. An exploit is a computer program that takes advantage
    of a particular vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Now look at the exploit modules in the modules directory of `msf3`. Open your
    terminal and type in `cd /opt/metasploit/msf3/modules/exploits` followed by the
    `ls` command to see the list of exploits.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploit modules](img/3589OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we can see the list of exploit modules. Basically exploits are categorized
    on the basis of operating systems. So let us look at the `windows` directory of
    exploit modules by typing `cd windows`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploit modules](img/3589OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the `windows` directory we can see a lot of exploit modules which are categorized
    according to the Windows services such as `ftp`, `smb`, `telnet`, `browser`, `email`,
    and more. Here we will show you one type of service exploit by exploring a directory.
    As an example we select `smb`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploit modules](img/3589OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We see the list of `smb` service exploits which are basically Ruby scripts.
    So to view the code of any exploit we type in `cat <exploitname>`. As an example
    here we select `ms08_067_netapi.rb`. So we type in `cat ms08_067_netapi.rb`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploit modules](img/3589OS_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, we can explore all types of exploits according to the operating systems
    and their services.
  prefs: []
  type: TYPE_NORMAL
- en: Auxiliary modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Auxiliary modules are exploits without payload. They are used for a variety
    of tasks such as port scanning, fingerprinting, service scanners, and more. There
    are different types of auxiliary modules such as scanners for protocols, Network
    protocol fuzzers, Port scanner modules, wireless, Denial of Service modules, Server
    modules, Administrative access exploits, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Now let us explore the auxiliary modules directory under the `msf` directory.
    Type `cd /opt/metasploit/msf3/modules/auxiliary` and then the `ls` command to
    view the list of auxiliary modules.
  prefs: []
  type: TYPE_NORMAL
- en: '![Auxiliary modules](img/3589OS_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we can see the list of auxiliary modules such as `admin`, `client`, `fuzzers`,
    `scanner`, `vsploit`, and more. Now we will explore the scanner directory as an
    auxiliary module.
  prefs: []
  type: TYPE_NORMAL
- en: '![Auxiliary modules](img/3589OS_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the `scanner` directory we will see modules that are categorized according
    to the service scans. We can select any service module for exploration. Here we
    will select `ftp` as the scanner module.
  prefs: []
  type: TYPE_NORMAL
- en: '![Auxiliary modules](img/3589OS_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the `ftp` directory we can see three Ruby scripts. To view the exploit Ruby
    code just type in `cat <module name>`; for example, here we would type `cat anonymous.rb`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Auxiliary modules](img/3589OS_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Payloads – in-depth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A payload is a piece of software that runs after a system is compromised. The
    payload is typically attached to and delivered with an exploit. There are three
    different types of payloads in Metasploit, which are `singles`, `stagers`, and
    `stages`. The main role of Stages payloads is that they use tiny stagers to fit
    into small exploitation spaces. During exploitation, an exploit developer has
    a very limited amount of memory that he can play with. The stagers use this space
    and their work is to pull down the rest of the staged payload. On the other hand,
    singles are self-contained and completely standalone. It is as simple as running
    a small executable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us have a look at the `payload` `modules` directory in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payloads – in-depth](img/3589OS_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Singles are self-contained payloads for a specific task such as creating a user,
    binding a shell, and so on. As an example, the `windows`/`adduser` payload creates
    a user account. Now we will explore the `singles` payload directory. Here we will
    see that the payloads are categorized according to operating systems such as AIX,
    BSD, Windows, Linux, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![Payloads – in-depth](img/3589OS_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will use the `windows` directory as a demonstration of how the payload works.
  prefs: []
  type: TYPE_NORMAL
- en: '![Payloads – in-depth](img/3589OS_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will use the `adduser` payload, which has already been explained. We can
    view the code of this payload by typing in `cat adduser.rb`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Payloads – in-depth](img/3589OS_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Stagers are payloads that make a connection between the attacker and the victim
    machine. As an example, if we want to inject a `meterpreter` payload we cannot
    fit the entire Meterpreter DLL into one payload, so the entire process is broken
    up into two parts. The first is the smaller payload called stagers. After the
    stagers are executed they make a network connection between the attacker and the
    victim. Over this network connection a larger payload is delivered to the victim
    machine and this larger payload is known as stages.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now explore the `stagers` payload directory. As we can see in the following
    screenshot, the payloads are categorized according to the different operating
    systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payloads – in-depth](img/3589OS_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As an example we will explore the `bsd` directory and examine the list of payloads.
  prefs: []
  type: TYPE_NORMAL
- en: '![Payloads – in-depth](img/3589OS_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Stages are the type of payload that are downloaded and executed by the stagers
    payload such as Meterpreter, VNC server, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will explore the `stages` directory to view the list of payloads.
  prefs: []
  type: TYPE_NORMAL
- en: '![Payloads – in-depth](img/3589OS_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we have the same result we saw in the `singles` and `stagers` directory;
    the payloads are categorized according to the different operating systems. We
    open the `netware` directory to view the list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Payloads – in-depth](img/3589OS_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we covered the different interfaces and the architecture of
    Metasploit Framework. The chapter flow included operation techniques of Metasploit
    followed by the architectural base. We further covered the various Metasploit
    libraries and application interfaces such as Rex, Msf core, and Msf base. We then
    explored the Metasploit directories deeply along with descriptions of the important
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to the exploit directory and briefly explained how exploits
    are categorized according to operating systems and their services. We then moved
    to the auxiliary directory, and explored how auxiliary modules are classified
    according to services such as scanning and fuzzing.
  prefs: []
  type: TYPE_NORMAL
- en: Another important directory we covered was the payload directory which shows
    how the payloads are categorized into three different types. We further classified
    the payloads according to operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Through this chapter we were able to cover the description of the basic Metasploit
    Framework and architecture. In the next chapter we will start some hands on action
    with Exploitation basics.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Metasploit_Project](http://en.wikipedia.org/wiki/Metasploit_Project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Metasploit_Architecture](http://www.offensive-security.com/metasploit-unleashed/Metasploit_Architecture)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Metasploit_Fundamentals](http://://www.offensive-security.com/metasploit-unleashed/Metasploit_Fundamentals)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Exploits](http://://www.offensive-security.com/metasploit-unleashed/Exploits)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Payloads](http://://www.offensive-security.com/metasploit-unleashed/Payloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.securitytube.net/video/2635](http://www.securitytube.net/video/2635)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://metasploit.hackplanet.in/2012/07/architecture-of-metasploit.html](http://metasploit.hackplanet.in/2012/07/architecture-of-metasploit.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
