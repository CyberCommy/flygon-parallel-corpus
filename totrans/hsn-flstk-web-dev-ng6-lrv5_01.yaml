- en: Understanding the Core Concepts of Laravel 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the title of this chapter suggests, we will be providing a general overview
    of the Laravel framework, covering the main concepts related to the development
    of web applications using a web services architecture. More precisely, we will
    use a RESTful architecture in this book.
  prefs: []
  type: TYPE_NORMAL
- en: We assume that you already have a basic understanding of the RESTful architecture
    and how web services (here, we call them **Application Programming Interface** (**API**)
    endpoints) work.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you are new in this concept, don't worry. We will help you get started.
  prefs: []
  type: TYPE_NORMAL
- en: The Laravel framework will be a helpful tool because with it, all of the data
    inside our controllers will be converted to the JSON format, by default.
  prefs: []
  type: TYPE_NORMAL
- en: The Laravel framework is a powerful tool for the development of web applications,
    using the paradigm *convention over configuration*. Out of the box, Laravel has
    all of the features that we need to build modern web applications, using the **Model
    View Controller** (**MVC**). Also, the Laravel framework is one of the most popular
    PHP frameworks for developing web applications today.
  prefs: []
  type: TYPE_NORMAL
- en: From now until the end of this book, we will refer to the Laravel framework
    simply as Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: The Laravel ecosystem is absolutely incredible. Tools such as Homestead, Valet,
    Lumen, and Spark further enrich the experience of web software development using
    PHP.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to start developing web applications using Laravel, meaning
    that there are many ways to configure your local environment or your production
    server. This chapter does not favor any specific way; we understand that each
    developer has his or her own preferences, acquired over time.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of your preferences for tools, servers, virtual machines, databases,
    and so on, we will focus on the main concepts, and we will not assume that a certain
    way is right or wrong. This first chapter is just to illustrate the main concepts
    and the actions that need to be performed.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that regardless of the methods you choose (using Homestead, WAMP,
    MAMP, or Docker), Laravel has some dependencies (or server requirements) that
    are extremely necessary for the development of web applications.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more useful information in the official Laravel documentation at [https://laravel.com/docs/5.6](https://laravel.com/docs/5.6).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic architecture of a Laravel application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Laravel application life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artisan CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC and routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting with the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember, no matter how you have configured your environment to develop web
    applications with PHP and Laravel, keep the main server requirements in mind,
    and you will be able to follow the examples in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to note that some operating systems do not have PHP installed.
    As this is the case with Windows machines, here are some alternatives for you
    to create your development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: HOMESTEAD (recommended by Laravel documentation): [https://laravel.com/docs/5.6/homestead](https://laravel.com/docs/5.6/homestead)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MAMP: [https://www.mamp.info/en/](https://www.mamp.info/en/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XAMPP: [https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAMP SERVER (only for Windows OS): [http://www.wampserver.com/en/](http://www.wampserver.com/en/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHPDOCKER: [https://www.docker.com/what-docker](https://www.docker.com/what-docker)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Composer package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Laravel uses **Composer**, a dependency manager for PHP, very similar to **Node
    Package Manager** **(NPM)** for Node.js projects, PIP for Python, and Bundler
    for Ruby. Let''s see what the official documentation says about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '"A Composer is a tool for dependency management in PHP. It allows you to declare
    the libraries your project depends on and it will manage (install/update) them
    for you."'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s install Composer, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://getcomposer.org/download/](https://getcomposer.org/download/)
    and follow the instructions for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: You can get more information at [https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md).
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can install Composer on your machine locally or globally; don't
    worry about it right now. Choose what is easiest for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'All PHP projects that use Composer have a file called `composer.json` at the
    root project, which looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is also very similar to the `package.json` file on Node.js and Angular
    applications, as we will see later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Here's a helpful link about the basic commands: [https://getcomposer.org/doc/01-basic-usage.md](https://getcomposer.org/doc/01-basic-usage.md)
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use Docker in this chapter. Even though the official documentation of
    Laravel suggests the use of Homestead with virtual machines and Vagrant, we chose
    to use Docker because it's fast and easy to start, and our main focus is on Laravel's
    core concepts.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about Docker at [https://www.docker.com/what-docker](https://www.docker.com/what-docker).
  prefs: []
  type: TYPE_NORMAL
- en: 'As the Docker documentation states:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker is the company driving the container movement and the only container
    platform provider to address every application across the hybrid cloud. Today’s
    businesses are under pressure to digitally transform, but are constrained by existing
    applications and infrastructure while rationalizing an increasingly diverse portfolio
    of clouds, datacenters, and application architectures. Docker enables true independence
    between applications and infrastructure and developers and IT ops to unlock their
    potential and creates a model for better collaboration and innovation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install Docker, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://docs.docker.com/install/](https://docs.docker.com/install/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose your platform and follow the installation steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have any trouble, check the getting started link at [https://docs.docker.com/get-started/](https://docs.docker.com/get-started/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we are using Docker containers and images to start our application and won''t
    get into how Docker works behind the scenes, here is a short list of some Docker
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command**: | **Description**: |'
  prefs: []
  type: TYPE_TB
- en: '| `docker ps` | Show running containers |'
  prefs: []
  type: TYPE_TB
- en: '| `docker ps -a` | Show all containers |'
  prefs: []
  type: TYPE_TB
- en: '| `docker start` | Start a container |'
  prefs: []
  type: TYPE_TB
- en: '| `docker stop` | Stop a container |'
  prefs: []
  type: TYPE_TB
- en: '| `docker-compose up -d` | Start containers in background |'
  prefs: []
  type: TYPE_TB
- en: '| `docker-compose stop` | Stop all containers on `docker-compose.yml` file
    |'
  prefs: []
  type: TYPE_TB
- en: '| `docker-compose start` | Start all containers on `docker-compose.yml` file
    |'
  prefs: []
  type: TYPE_TB
- en: '| `docker-compose kill` | Kill all containers on `docker-compose.yml` file
    |'
  prefs: []
  type: TYPE_TB
- en: '| `docker-compose logs` | Log all containers on `docker-compose.yml` file |'
  prefs: []
  type: TYPE_TB
- en: You can check the whole list of Docker commands at [https://docs.docker.com/engine/reference/commandline/docker/](https://docs.docker.com/engine/reference/commandline/docker/).
    And Docker-compose commands at [https://docs.docker.com/compose/reference/overview/#command-options-overview-and-help](https://docs.docker.com/compose/reference/overview/#command-options-overview-and-help).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring PHPDocker.io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PHPDocker.io is a simple tool that helps us to build PHP applications using
    the Docker/Container concept with Compose. It''s very easy to understand and use;
    so, let''s look at what we need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://phpdocker.io/](https://phpdocker.io/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Generator link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the information, as in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Generate project archive button and save the folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0bfba06b-93cf-41eb-baa6-1162b0f4fe5d.png)PHPDocker interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'The database configuration is as per the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3d363633-a23b-4ed5-a8cf-d49b15f3eea7.png)Database configurationNote
    that we are using the latest version of the MYSQL database in the preceding configuration,
    but you can choose whatever version you prefer. In the following examples, the
    database version will not matter.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up PHPDocker and Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have filled in the previous information and downloaded the file
    for our machine, let's begin setting up our application so as to delve deeper
    into the directory structure of a Laravel application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `bash/Terminal/cmd`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `Users/yourname` on Mac and Linux, or `C:/` on Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your Terminal inside the folder and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of your Terminal window, you will see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Terminal window, type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The results will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/460a8a5e-ccea-4297-8b42-84a7d4ce6066.png)Terminal window output'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have your first Laravel application, built with the `Composer`
    package manager.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to join our application with the file downloaded from PHPDocker
    (our PHP/MySQL Docker screenshot). To do so, follow the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: Grab the downloaded archive, `hands-on-full-stack-web-development-with-angular-6-and-laravel-5.zip`,
    and unzip it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy all of the folder content (a `phpdocker` folder and a file, `docker-compose.yml`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `chapter-01` folder and paste the content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, inside the `chapter-01` folder, we will see the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/002f2cd2-0736-445b-a096-510ba7b07fba.png)chapter-01 folder structure'
  prefs: []
  type: TYPE_NORMAL
- en: Let's check to make sure that everything will go well with our configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It's important to remember that at this point, you need to have Docker up and
    running on your machine. If you are completely new to how to run Docker on your
    machine, you can find more information at [https://github.com/docker/labs/tree/master/beginner/](https://github.com/docker/labs/tree/master/beginner/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that this command may take more time to create and build all of the containers.
    The results will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d7931a7a-4c40-47eb-9e03-b8d66cb23a7e.png)Docker containers up and
    running'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot indicates that we have started all containers successfully:
    `memcached`, `webserver` (Nginx), `mysql`, and `php-fpm`.'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and type `http://localhost:8081`; you should see the welcome
    page for Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, it is time to open our sample project in a text editor and check
    all of the Laravel folders and files. You can choose the editor that you are used
    to, or, if you prefer, you can use the editor that we will describe in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code text editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, and throughout the book, we will be using **Visual Studio
    Code** (**VS Code**), a free and highly configurable multiplatform text editor.
    It is also very useful for working with projects in Angular and TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install VS Code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the download page and choose your platform at [https://code.visualstudio.com/Download](https://code.visualstudio.com/Download).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the installation steps for your platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: VS Code has a vibrant community with tons of extensions. You can research and
    find extensions at [https://marketplace.visualstudio.com/VSCode](https://marketplace.visualstudio.com/VSCode).
    In the next chapters, we will install and use some of them.
  prefs: []
  type: TYPE_NORMAL
- en: For now, just install VS Code icons from [https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons](https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons).
  prefs: []
  type: TYPE_NORMAL
- en: The basic architecture of Laravel applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, Laravel is an MVC framework for the development of
    modern web applications. It is a software architecture standard that separates
    the representation of information from users' interaction with it. The architectural
    standard that it has adopted is not so new; it has been around since the mid-1970s.
    It remains current, and a number of frameworks still use it today.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the MVC pattern at [https://en.wikipedia.org/wiki/Model-view-controller](https://en.wikipedia.org/wiki/Model-view-controller).
  prefs: []
  type: TYPE_NORMAL
- en: Laravel directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s look at how this pattern is implemented within an application with
    Laravel:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the VS Code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this is the first time you are opening VS Code, click on the top menu and
    navigate to File | Open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the `chapter-01` folder, and click Open**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `app` folder at the left-hand side of VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The application files are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f0eff070-8dd1-4a97-8c20-710ab5b5afc5.png)Laravel root folderThe
    `phpdocker` folder and `docker-compose.yml` files are not part of the Laravel
    framework; we added these files manually, earlier in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: The MVC flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a very basic MVC workflow, when a user interacts with our application, the
    steps in the following screenshot are performed. Imagine a simple web application
    about books, with a search input field. When the user types a book name and presses
    *Enter*, the following flow cycle will occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1bf73eab-92c2-4a84-978c-c5fae90f9155.png)MVC flow'
  prefs: []
  type: TYPE_NORMAL
- en: 'The MVC is represented by the following folders and files:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **MVC Architecture** | **Application Path** |  | **File** |'
  prefs: []
  type: TYPE_TB
- en: '| Model | `app/` |  | `User.php` |'
  prefs: []
  type: TYPE_TB
- en: '| View | `resources/views` |  | `welcome.blade.php` |'
  prefs: []
  type: TYPE_TB
- en: '| Controller | `app/Http/Controllers` |  | `Auth/AuthController.php` `Auth/PasswordController.php`
    |'
  prefs: []
  type: TYPE_TB
- en: Note that the application models are at the root of the `app` folder, and the
    application already has at least one file for MVC implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also note that the `app` folder contains all of the core files for our application. The
    other folders have very intuitive names, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Bootstrap | Cache, autoload, and bootstrap applications |'
  prefs: []
  type: TYPE_TB
- en: '| Config | Application''s configuration |'
  prefs: []
  type: TYPE_TB
- en: '| Database | Factory, migrations, and seeds |'
  prefs: []
  type: TYPE_TB
- en: '| Public | JavaScript, CSS, fonts, and images |'
  prefs: []
  type: TYPE_TB
- en: '| Resource | Views, SASS/LESS, and localization |'
  prefs: []
  type: TYPE_TB
- en: '| Storage | This folder has separated apps, frameworks, and logs |'
  prefs: []
  type: TYPE_TB
- en: '| Tests | Unit tests using PHPunit |'
  prefs: []
  type: TYPE_TB
- en: '| Vendor | Composer dependencies |'
  prefs: []
  type: TYPE_TB
- en: Now, let's see how things work in the Laravel structure.
  prefs: []
  type: TYPE_NORMAL
- en: Laravel application life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a Laravel application, the flow is almost the same as in the previous example,
    but a little more complex. When the user triggers an event in a browser, the request
    arrives on a web server (Apache/Nginx), where we have our web application running.
    So, the server redirects the request into `public/index.php`, the starting point
    for the entire framework. In the `bootstrap` folder, the `autoloader.php` is started
    and loads all of the files generated by the composer retrieving an instance to
    the Laravel application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb7f983b-d19f-46a1-b284-0c317a4c3ee8.png)Laravel application cycle'
  prefs: []
  type: TYPE_NORMAL
- en: 'The diagram is complex enough for our first chapter, so we will not get into
    all of the steps performed by the user''s request. Instead, we will go on to another
    very important feature that is a main concept in Laravel: the Artisan **command-line
    interface (CLI)**.'
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the request life cycle in Laravel in the official documentation
    at [https://laravel.com/docs/5.2/lifecycle](https://laravel.com/docs/5.2/lifecycle).
  prefs: []
  type: TYPE_NORMAL
- en: Artisan command-line interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, it is common practice to create web applications by using the command
    line; and, with the evolution of web development tools and technologies, this
    has become very popular.
  prefs: []
  type: TYPE_NORMAL
- en: We will mention that NPM is one of the most popular. However, for the development
    of applications using Laravel, we have an advantage. The Artisan CLI is automatically
    installed when we create a Laravel project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at what the official documentation of Laravel says about the Artisan
    CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: Artisan is the name of the command-line interface included with Laravel. It
    provides a number of helpful commands for your use while developing your application.
  prefs: []
  type: TYPE_NORMAL
- en: Inside of the `chapter-01` folder, we find the Artisan bash file. It's responsible
    for running all of the commands available on the CLI, and there are many of them,
    to create classes, controllers, seeds, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this small introduction to the Artisan CLI, there would be nothing better
    than looking at some practical examples. So, let''s get hands on, and don''t forget
    to start Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window inside the `chapter-01` folder, and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s get inside the `php-fpm container` and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We now have all of the Artisan CLI commands available in the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the simplest way to interact with the Teminal within our Docker container.
    If you are using another technique to run the Laravel application, as mentioned
    at the beginning of the chapter, you do not need to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can just type the same commands from the next steps into the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in the Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the framework version and a list of all available commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the list of commands is very large. Note that the above code
    snippet, we did not put all the options available with the `php artisan list`
    command, but we will see some combinations on next lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Terminal, type the following combination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will explain exactly what the `migrate` command can do and what
    options we have, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/81c6afbf-151a-4ae5-80f1-f7871a674726.png)Output of php artisan -h
    migrate'
  prefs: []
  type: TYPE_NORMAL
- en: It's also possible to see what options we have for the `migrate` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in the Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/62d6573a-0b93-4cce-acd0-6e1fd7526b49.png)Output of php artisan -h
    make:controller'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at how to create the MVC in the Laravel application, using the
    Artisan CLI.
  prefs: []
  type: TYPE_NORMAL
- en: MVC and routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, we will now create a component each of the model, view,
    and controller, using the Artisan CLI. However, as our heading suggests, we will
    include another important item: the routes. We have already mentioned them in
    this chapter (in our diagram of the request life cycle in Laravel, and also in
    the example diagram of the MVC itself).'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will focus on creating the file, and checking it after it
    has been created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get hands on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window inside the `chapter-01` folder, and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After the command, you should see a success message in green, stating: Model
    created successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to your code editor; inside the `app` folder, you will see the `Band.php`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it is time to use the artisan to generate our controller, let''s see how
    we can do that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the Terminal window, and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After the command, you should see a message in green, stating: Controller created
    successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, inside `app/Http/Controllers`, you will see `BandController.php`, with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As a good practice, always create your controller with the suffix `<Somename>Controller`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we can see earlier when using the `php artisan list` command,  we do not
    have any alias command to create the application views automatically. So we need
    to create the views manually:'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to your text editor, and inside the `resources/views` folder, create
    a new file, named `band.blade.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the following code inside the `band.blade.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Creating routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The routes within Laravel are responsible for directing all HTTP traffic coming
    from the user's requests, so the routes are responsible for the entire inflow
    in a Laravel application, as we saw in the preceding diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will briefly look at the types of routes available in Laravel,
    and how to create a simple route for our MVC component.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, it is only necessary to look at how the routes work. Later in
    the book, we will get deeper into application routing.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s look at what we can use to handle routes in Laravel:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | HTTP &#124; METHOD &#124;Verb |'
  prefs: []
  type: TYPE_TB
- en: '| `Route::get($uri, $callback);` | GET |'
  prefs: []
  type: TYPE_TB
- en: '| `Route::post($uri, $callback);` | POST |'
  prefs: []
  type: TYPE_TB
- en: '| `Route::put($uri, $callback);` | PUT |'
  prefs: []
  type: TYPE_TB
- en: '| `Route::patch($uri, $callback);` | PATCH |'
  prefs: []
  type: TYPE_TB
- en: '| `Route::delete($uri, $callback);` | DELETE |'
  prefs: []
  type: TYPE_TB
- en: '| `Route::options($uri, $callback);` | OPTIONS |'
  prefs: []
  type: TYPE_TB
- en: 'Each of the routes available is responsible for handling one type of HTTP request
    method. Also, we can combine more than one method in the same route, as in the
    following code. Do not be too concerned with this now; we''ll see how to deal
    with this type of routing later in the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create our first route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On your text editor, open `web.php` inside the `routes` folder, and add the
    following code, right after the `welcome view`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your browser to `http://localhost:8081/band`, and you will see the following
    message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hi i'm a view
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to start all Docker containers using the `docker-compose up -d`
    command. If you followed the previous examples, you will already have everything
    up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Bravo! We have created our first route. It is a simple example, but we have
    all of the things in place and working well. In the next section, we'll look at
    how to integrate a model with a controller and render the view.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting with a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw previously, the controllers are activated by the routes and transmit
    information between the model/database and the view. In the preceding example,
    we used static content inside the view, but in larger applications, we will almost
    always have content coming from a database, or generated within the controller
    and passed to the view.
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, we will see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the database inside a Docker container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s now time to configure our database. If you use Homestead, you probably
    have your database connection configured and working well. To check, open your
    Terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything goes well, you will see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/993a52c8-b364-46ff-9cb1-aa0283760ff7.png)Database connection message'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, however, we are using Docker, and we need to do some configuration
    to accomplish this task:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of the root project, open the `.env` file and look at line 8 (the database
    connection), which looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, replace the preceding code with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note that we need to change a bit to get the Docker MySQL container directions;
    if you don't remember what you chose in the `PHPDocker.io` generator, you can
    copy it from the container configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Open `docker-compose.yml` at the root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the environment variables from the MySQL container setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, it's time to test our connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Terminal window, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s check our connection; type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You should see the same message as the previous screenshot. Then, you will have
    everything you need to go ahead with the example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a migrations file and database seed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Migration** files are very common in some MVC frameworks, such as Rails,
    Django, and, of course, Laravel. It is through this type of file that we can keep
    our database consistent with our application, since we cannot versioning the database schemes .
    Migration files help us to store each change in our database, so that we can version
    these files and keep the project consistent.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Database seeds** serveto populate the tables of a database with an initial
    batch of records; this is extremely useful when we are developing web applications
    from the beginning. The data of the initial load can be varied, from tables of
    users to administration objects such as passwords and tokens, and everything else
    that we require.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how we can create a migration file for the `Bands` model in
    Laravel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Open the `database/migrations` folder, and you will see a file called`<timestamp>create_bands_table.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open this file and paste the following code inside `public function up()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Paste the following code inside `public function down()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The final result will be the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside of the `database/factories` folder, open the `ModalFactory.php` file
    and add the following code, right after the `User Factory`. Note that we are using
    a PHP library called `faker` inside a `factory` function, in order to generate
    some data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Go back to your Terminal window and create a database seed. To do this, type
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `database/seeds` folder, open the `BandsTableSeeder.php` file and type
    the following code, inside `public function run()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `database/seeds` folder, open the `DatabaseSeeder.php` file and
    add the following code, inside `public function run()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about Faker PHP at [https://github.com/fzaninotto/Faker](https://github.com/fzaninotto/Faker).
  prefs: []
  type: TYPE_NORMAL
- en: Before we go any further , we need to do a small refactoring on the `Band` model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of the app root, open the `Band.php` file and add the following code,
    inside the `Band` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Go back to your Terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'After the command, you will see the following message in the Terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command was just to populate the database with our seed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to your Terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We now have five items ready to use in our database.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check whether everything will go smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of your Terminal, to exit `php-fpm container`, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the application root folder, type the following command in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will give you access to the MySQL console inside `mysql
    Docker container`, almost exactly the same as how we gained access to `php-fpm
    container`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of the Terminal, type the following command to see all of the databases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have two tables: `information_schema` and `laravel-angular-book`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s access the `laravel-angular-book` table; type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, let''s check our tables, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s `SELECT` all records from the `bands` tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We will see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6aa9f6e1-dbe6-4289-87db-c7c57e97568b.png)Database bands table'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, exit the MySQL console with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Using the resource flag to create CRUD methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see another feature of the Artisan CLI, creating all of the **Create**,
    **Read**, **Update**, **and** **Delete** (**CRUD**) operations using a single
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in the `app/Http/Controllers` folder, delete the `BandController.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This action will create the same file again, but now, it includes the CRUD
    operations, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'For this example, we will write only two methods: one to list all of the records,
    and another to get a specific record. Don''t worry about the other methods; we
    will cover all of the methods in the upcoming chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s edit `public function index()` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, edit `public function show()` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line, right after `App\Http\Requests`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `routes.php` file, inside the routes folder, to the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your browser and go to `http://localhost:8081/bands`, where you will see
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry if your data is different from the previous code; this is due to
    Faker generating random data. Note that we are returning a JSON directly to the
    browser, instead of returning the data to the view. This is a very important feature
    of Laravel; it serializes and deserializes data, by default.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Blade template engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it''s time to create another view component. This time, we will use the
    Blade template engine to show some records from our database. Let''s look at what
    the official documentation says about Blade:'
  prefs: []
  type: TYPE_NORMAL
- en: <q>Blade is the simple, yet powerful, templating engine provided with Laravel.
    Unlike other popular PHP templating engines, Blade does not restrict you from
    using plain PHP code in your views. All Blade views are compiled into plain PHP
    code and cached until they are modified, meaning Blade adds essentially zero overhead
    to your application.</q>
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to see this behavior in action:'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the code editor and create another folder inside `resources/views`,
    called `bands`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file, `show.blade.php`, inside `resources/views/bands`, and place
    the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: You can find out more about Blade at [https://laravel.com/docs/5.2/blade](https://laravel.com/docs/5.2/blade).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser to `http://localhost:8081/bands/1`. You will see the template
    in action, with results similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/88d7abed-5777-4c77-9327-8a4d51b376b6.png)View of the template engine'
  prefs: []
  type: TYPE_NORMAL
- en: Note that here, we are using the Blade template engine to show a record from
    our database. Now, let's create another view to render all of the records.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another file, called `index.blade.php`, inside `resources/views/bands`,
    and place the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Go back to your browser and visit `http://localhost:8081/bands/`, where you
    will see a result similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0e5fd10e-9e6a-492e-8aee-6b1f25f78916.png)View template engine'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have finally finished the first chapter, and we have covered many of the
    core concepts of the Laravel framework. Even with the simple examples that we
    discussed in this chapter, we have provided a relevant basis for all of Laravel's
    functionality. It would be possible to create incredible applications with only
    this knowledge. However, we intend to delve deeper into some concepts that deserve
    separate chapters. Throughout the book, we will create an entire application,
    using a RESTful API, Angular, and some other tools, such as TypeScript, which
    we will look at in the next chapter.
  prefs: []
  type: TYPE_NORMAL
