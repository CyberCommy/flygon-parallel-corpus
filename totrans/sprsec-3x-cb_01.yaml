- en: Chapter 1. Basic Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: JAAS-based security authentication on JSPs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAAS-based security authentication on servlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container-based basic authentication on servlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form-based authentication on servlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form-based authentication with open LDAP and servlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hashing/Digest Authentication on servlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic authentication for JAX-WS and JAX-RS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling and disabling the file listing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication and authorization has become a major part of all web applications.
    Authentication involves checking who is accessing the application. Authorization
    is a process of checking the access rights of the user. In the native approach,
    we usually store the user's information in the database and write the code in
    the application. We also create roles for the user and we do the mapping. Here,
    it is tightly coupled with the application because we have to rewrite the entire
    code when we connect to a new database or use any other tools such as LDAP or
    Kerbose. But there are advance options to handle authentication and authorization.
    J2EE container provides different ways to authenticate the user by configuring
    the XML files. We can classify authentication into two types, that is, the container-based
    authentication and authorization and application level authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: J2EE container provides interfaces and classes to provide authentication. In
    this chapter, we can see how we authenticate the user using JAAS, basic authentication,
    and form-based authentication.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we have used JAAS because it a standard framework for authentication.
    JAAS works on the **PAM** (**pluggable authentication module**) framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Authentication and authorization can be provided in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic authentication: In this technique the application server gives a login
    form with a username and password textbox, so you don''t have to create a login
    page yourself. You will also know the caller identity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Form-based authentication: In this technique the container handles the authentication,
    but the login form is provided by the user as a JSP page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Digest-based authentication: In this method user credentials are hashed with
    certain algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Certificate-based authentication: In this technique the client and the server
    exchange certificates to verify their identity. Achieving an SSL certificate makes
    the data transfer over the network secure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAAS-based security authentication on JSPs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The deployment descriptor is the main configuration file of all the web applications.
    The container first looks out for the deployment descriptor before starting any
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The deployment descriptor is an XML file, `web.xml`, inside the `WEB-INF` folder.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the XSD of the `web.xml` file, you can see the security-related
    schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'The schema can be accessed using the following URL: [http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd](http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the schema element available in the XSD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need the following to demonstrate authentication and authorization:'
  prefs: []
  type: TYPE_NORMAL
- en: JBoss 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse Indigo 3.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a dynamic web project and name it `Security Demo`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a package, `com.servlets`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an XML file in the `WebContent` folder, `jboss-web.xml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create two JSP pages, `login.jsp` and `logoff.jsp`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to achieve JAAS-based security for JSPs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `login.jsp` file with the input fields `j_username`, `j_password`,
    and submit it to `SecurityCheckerServlet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `j_username` and `j_password` are the indicators of using form-based authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the `web.xml` file to protect all the files that end with `.jsp`.
    If you are trying to access any JSP file, you would be given a login form, which
    in turn calls a `SecurityCheckerServlet` file to authenticate the user. You can
    also see role information is displayed. Update the `web.xml` file as shown in
    the following code snippet. We have used `2.5 xsd`. The following code needs to
    be placed in between the `webapp` tag in the `web.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'JAAS Security Checker and Credential Handler: Servlet is a security checker.
    Since we are using JAAS, the standard framework for authentication, in order to
    execute the following program you need to import `org.jboss.security.SimplePrincipal`
    and `org.jboss.security.auth.callback.SecurityAssociationHandle` and add all the
    necessary imports. In the following `SecurityCheckerServlet`, we are getting the
    input from the JSP file and passing it to the `CallbackHandler`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are then passing the Handler object to the `LoginContext` class which has
    the `login()` method to do the authentication. On successful authentication, it
    will create `Subject` and `Principal` for the user, with user details. We are
    using iterator interface to iterate the `LoginContext` object to get the user
    details retrieved for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `SecurityCheckerServlet` Class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `UserCredentialHandler` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `jboss-web.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`Other` is the name of the application policy defined in the `login-config.xml`
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: All these will be packed in as a `.war` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring the JBoss Application Server. Go to `jboss-5.1.0.GA\server\default\conf\login-config.xml`
    in JBoss. If you look at the file, you can see various configurations for database
    LDAP and a simple one using the properties file, which I have used in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Create the `users.properties` file in the same folder. The following is the
    `Users.properties` file with username mapped with role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User.properties
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: roles.properties
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Restart the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JAAS consists of a set of interfaces to handle the authentication process.
    They are:'
  prefs: []
  type: TYPE_NORMAL
- en: The `CallbackHandler` and `Callback` interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `LoginModule` interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LoginContext`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `CallbackHandler` interface gets the user credentials. It processes the
    credentials and passes them to `LoginModule`, which authenticates the user.
  prefs: []
  type: TYPE_NORMAL
- en: JAAS is container specific. Each container will have its own implementation,
    here we are using JBoss application server to demonstrate JAAS.
  prefs: []
  type: TYPE_NORMAL
- en: In my previous example, I have explicitly called JASS interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: '`UserCredentialHandler` implements the `CallbackHandler` interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: So, `CallbackHandler`s are storage spaces for the user credentials and the `LoginModule`
    authenticates the user.
  prefs: []
  type: TYPE_NORMAL
- en: '`LoginContext` bridges the `CallbackHandler` interface with `LoginModule`.
    It passes the user credentials to `LoginModule` interfaces for authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `web.xml` file defines the security mechanisms and also points us to the
    protected resources in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a failed authentication window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_01_01_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows a successful authentication window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *JAAS-based security authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Container-based basic authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Form-based authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Form-based authentication with open LDAP and servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Hashing/Digest Authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling and disabling the file listing* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAAS-based security authentication on servlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JAAS-based security authentication on servlet is an extension of JAAS-based
    security authentication for JSPs. In this section, we are demonstrating that we
    can even apply security on servlets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new **Web Project** in Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a package, `com.packt.security.servlets`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Servlet with name `ProtectedServlets`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps for JAAS-based security for servlet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a servlet and name it `ProtectedServlets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, edit the `web.xml` file to secure the servlet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Restart the server and access the URL: `http://localhost:8080/jaas-jboss/ProtectedServlets`.'
  prefs: []
  type: TYPE_NORMAL
- en: You would get a login form, which will authenticate the user. The servlet is
    the protected resource, and anyone accessing the servlet will be asked to log
    in. The authentication is handled by JAAS API, which is application-server-specific.
    Each application server will have its own implementation of security.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Container-based basic authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Form-based authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Form-based authentication with open LDAP and servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Hashing/Digest Authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling and disabling the file listing* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container-based basic authentication on servlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our previous examples we used interfaces provided by JAAS to authenticate
    with `loginform.jsp`. The previous application had a custom login form design
    with authentication handled by JAAS API provided by the application server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a simple web-app project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a servlet class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `web.xml` file for basic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a constraint to restrict the user from accessing the servlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we will see the basic authentication. The container provides the login
    form and authenticates the user and redirects the user to the servlet after authentication
    is successful. There is no login form involved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make the following changes in the `web.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Export the `.war` to JBoss, restart the server, and access the servlet.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example the container decides the mechanism for authenticating
    the servlet by reading the `web.xml` file. Here the `<auth-method>` tag has defined
    `BASIC` as the mode of authentication. We should get a login dialog box popped
    up when we access the secured resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshots show the workflow of the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_01_03.jpg)![How it works...](img/7525OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Form-based authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Form-based authentication with open LDAP and servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Hashing/Digest Authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling and disabling the file listing* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form-based authentication on servlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we demonstrated the basic authentication on servlets
    and JSPs. Now let's use form-based authentication on servlets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's apply form-based authentication on servlet. You will need a simple web
    application with a servlet, a web container to handle the authentication, and
    the `web.xml` file that tells the container what to authenticate.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see some simple steps for implementing form-based authentication on
    servlets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a JSP file named `Containerform.jsp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What do you observe in the previous code?
  prefs: []
  type: TYPE_NORMAL
- en: '`action=j_security_check` is the default URL, which is recognized by the web
    container. It tells the container that it has the user credentials to be authenticated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, edit the `web.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Build the project and export the `.war` files to JBoss.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example demonstrated the Form-based authentication. The J2EE container
    reads the `web.xml` file, the `<auth-method>` tag has the `form` attribute set.
    Then it further looks for the `login.jsp` file, which needs to be displayed to
    do form-based authentication. The `<form-error-page>` and `<form-login-page>`
    has the login file name and the error page that needs to be displayed on authentication
    failure. When the user tries to access the secured resource, the J2EE container
    redirects the request to the login page. The user credentials are submitted to
    `j_security_check` action. This action is identified by the container and does
    the authentication and authorization; on success the user is redirected to the
    secured resource and on failure the error page shows up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the screenshots of the workflow which shows the login page
    for the user and displays the user information on successful authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_01_05.jpg)![How it works...](img/7525OS_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Form-based authentication with open LDAP and servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Hashing/Digest Authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling and disabling the file listing* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form-based authentication with open LDAP and servlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will see how we can authenticate users by retrieving the
    user information stored in open LDAP and JAAS. Open LDAP, as its name suggests,
    is a free version of the lightweight user directory protocol, which allows us
    to create groups and add users to it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download open LDAP, create roles, groups, and user.
  prefs: []
  type: TYPE_NORMAL
- en: In the JBoss application server, edit the `login-config.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure the application server to retrieve
    users from Open LDAP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `login-config.xml` file provide the LDAP port with the URL, credentials,
    and the domain that needs to be searched to find the username and password provided
    by the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `jboss-web.xml` file, we will specify the lookup name for JAAS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Build and deploy the WAR on JBoss, restart the server, and access the browser.
  prefs: []
  type: TYPE_NORMAL
- en: You will be prompted with a login form and JBoss authenticates the user based
    on the open LDAP credentials provided. The user is retrieved and is authorized
    with roles mentioned in the application policy. The container provides built-in
    APIs for authentication. The module `org.jboss.security.auth.spi.LdapExtLoginModule`
    handles the LDAP authentication process.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Hashing/Digest Authentication on servlet* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling and disabling the file listing* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hashing/Digest authentication on servlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous authentication mechanisms, the client sends the user credentials
    and the container validates.
  prefs: []
  type: TYPE_NORMAL
- en: The client doesn't attempt to encrypt the password.
  prefs: []
  type: TYPE_NORMAL
- en: So, our application is still not safe and is vulnerable to attacks.
  prefs: []
  type: TYPE_NORMAL
- en: This section is about passing an encrypted user credential to the server and
    telling the server which encryption algorithm can be used to decrypt the data.
  prefs: []
  type: TYPE_NORMAL
- en: JBoss is the application server that I have chosen to demonstrate it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modify `Login-config.xml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create `encrypt-users. properties`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create `encrypt-roles. properties`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it....
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify the `web.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, modify the `jboss-web.xml` file. The realm name is used for hashing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Modify the `login-config.xml` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to tell JBoss to encrypt the user''s password. To do that perform
    the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `E:\JBOSS5.1\jboss-5.1.0.GA\common\lib`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open `jbosssx-server.jar`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to the folder where JBoss is installed. I have installed JBoss on my `E:`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now on the command line, write `cd E:\JBOSS5.1\jboss-5.1.0.GA>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And then paste the following command: `java -cp client/jboss-logging-spi.jar;common/lib/jbosssx-server.jar
    org.jboss.security.auth.spi.RFC2617Digest anjana "PACKTSecurity" role1`![How to
    do it....](img/7525OS_01_07.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now edit `Encrypt-users. properties`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Encrypt roles and update `roles.properties`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example demonstrates the digest authentication mechanism. The password
    given in the J2EE container is encrypted using the MD5 algorithm. The container
    decrypts it and verifies the user credentials against the decrypted password.
    The authentication mechanism is `digest` and the container pops up a login dialog
    box for the digest mechanism similar to the basic authentication mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It behaves like basic authentication, but uses the encrypted password along
    with the realm name to decrypt.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Basic authentication for JAX-WS and JAX-RS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling and disabling the file listing* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic authentication for JAX-WS and JAX-RS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The authentication configuration remains the same for JAX-WS and JAX-RS.
  prefs: []
  type: TYPE_NORMAL
- en: We need to give the JAX-WS or JAX-RS URL in `<web-resource collection>`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Auth_type` can be basic. The container would come with a form for the user
    to enter the username and password.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication handled by container**'
  prefs: []
  type: TYPE_NORMAL
- en: We will first create a web service and then make the container handle the security
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create an interface which will expose the `service` method and then declare
    an `implementation` class.
  prefs: []
  type: TYPE_NORMAL
- en: Let's use Tomcat 6.0 to demonstrate this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Eclipse-Indigo, create a dynamic web project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Server: Tomcat 6'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JARs to be added to Tomcat `lib` folder: [https://jax-ws.java.net/2.2.7/](https://jax-ws.java.net/2.2.7/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the project and copy the `lib` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an `interface` and an `implementation` class. Add the `@WebService`
    annotations to it. Create a package named `com.packt.ws`. Create an interface
    named `EmployeeProfile` and an `implementation` Class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Also add the `sun-jaxws.xml` file under `WEB-INF`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `web.xml` file as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Authenticate the web services. Edit the `tomcat-users.xml` file and add this
    to `server.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By accessing the following URL, you should be prompted for a login.
  prefs: []
  type: TYPE_NORMAL
- en: Each web service URL is authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: You will be prompted with a login page (`http://localhost:8080/EmployeeProfile/employee`)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Enabling and disabling the file listing* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling and disabling the file listing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's generally not advisable to enable directory listing in your application.
    By default directory listing will be disabled on JBoss.
  prefs: []
  type: TYPE_NORMAL
- en: If it is enabled, go to your JBoss installation folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help to disable and enable file listing in the application
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the path `\server\default\deployers\jbossweb.deployer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `web.xml` in the `WEB-INF` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the listing to `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Struts2* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
