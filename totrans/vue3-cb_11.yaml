- en: Directives, Plugins, SSR, and More
  prefs: []
  type: TYPE_NORMAL
- en: Now you are in the Pro League! You are an advanced Vue developer. Let's have
    some fun and check out some great recipes that are custom made for you! Here are
    some hand-picked optimization solutions that can improve the quality of your Vue
    application and make your life easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatically loading `vue-router` routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically loading `vuex` modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom directive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Vue plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an SSR, SPA, PWA, Cordova, and Electron application in Vue with Quasar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating smarter Vue watchers and computed properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a `Nuxt.js` SSR with Python `Flask` as the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dos and don'ts of Vue applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using Node.js, `Vue-CLI`, `Cordova`, `Electron`, `Quasar`, `Nuxt.js`,
    and Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention Windows users: you are required to install an `npm` package called
    `windows-build-tools` to be able to install the following required packages. To
    do so, open PowerShell as an Administrator and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `Vue-CLI`, you need to execute the following command in Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To install **`Cordova`**, you need to execute the following command in Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are running on a macOS and you want to run an iOS simulator, you need to
    execute the following command in Terminal (macOS):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To install `Electron`**,** you need to execute the following command in Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To install `Quasar`**,** you need to execute the following command in Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To install **`Nuxt.js`,** you need to execute the following command in Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Automatically loading Vue routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create maintainable code, we can use the strategy of auto-importing
    files that have the same structure in our project. Like the routes in `vue-router`,
    when the application gets larger, we find a huge amount of files being imported
    and handled manually. In this recipe, we will learn a trick to use the webpack
    `require.context` function to automatically inject files for us.
  prefs: []
  type: TYPE_NORMAL
- en: This function will read the file content and add the routes to an array that
    will be exported into our file by default. You can improve this recipe by adding
    a more controlled route import or even environment-based route rules.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will need to create a new Vue project with `Vue-CLI`, or use the project
    created in previous recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the* Enter *key to continue, and the *spacebar *to
    select an option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two methods for starting a new project. The default method is a basic
    `babel` and `eslint` project without any plugins or configuration, and the `Manually` mode,
    where you can select more modes, plugins, linters, and options. We will go for `Manually`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are asked about the features that we want on the project. Those features
    are some Vue plugins such as `Vuex` or `Router` (`vue-router`), testers, linters,
    and more. Select `Babel`, `Router`, and `Linter / Formatter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select the `ESLint + Airbnb` config:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied `on save` or fixed `on commit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is in
    a dedicated file, but it is also possible to store them in `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can choose whether you want to make this selection a preset for future
    projects so that you don''t need to reselect everything:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`Vue-CLI` will create the project, and automatically install the packages for
    us.‌'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to check the project on `vue-ui` when the installation has finished,
    open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can run the built-in `npm` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute one of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm run serve` – To run a development server locally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run build` – To build and minify the application for deployment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run lint` – To execute the lint on the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to create an auto-import of the router files in your
    project that will handle the router files inside a specific folder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With our route files created and placed inside the `routes` folder, we need
    to make sure that every route file has a default `export` object in it. In the
    `index.js` file, inside the `src/router` folder, remove the default array of `routes` that
    is present in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create an empty array of `routes` that will be populated by the imported
    ones from the folder, and start the import. With that, `requireRoutes` will be
    an object with the keys being the filename and the values being the ID of the
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To push those files inside the `routes` array, we need to add the following
    code and create a folder named `routes` inside the `router` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now you have your routes loaded on your application automatically as you create
    a new `.js` file inside the `routes` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`require.context` is a webpack built-in function that allows you to pass in
    a directory to search, a flag indicating whether subdirectories should be examined
    too, and a regular expression to match files.'
  prefs: []
  type: TYPE_NORMAL
- en: When the building process starts, webpack will search for all the `require.context`
    functions and will pre-execute them, so the files needed on the import will be
    there for the final build.
  prefs: []
  type: TYPE_NORMAL
- en: 'We pass three arguments to the function: the first is the folder where it will
    start the search, the second asks whether the search will go to descending folders,
    and finally, the third is a regular expression for filename matching.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, to automatically load the routes as the first argument of the
    function, we define `./routes` for the folder. As the second argument of the function,
    we define `false` to not search in subdirectories. Finally, as the third argument,
    we define `/^(?!.*test).*\.js$/is` as the Regex to search for `.js` files and
    ignore the files that have `.test` in their names.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With this recipe, it's possible to take your application to the next level by
    using the subdirectories for router modules and environments for router control.
  prefs: []
  type: TYPE_NORMAL
- en: With those increments, the function may be extracted to another file, but in
    `router.js`, it still needs to be imported into the `main.js` file. Or, you can
    obtain the `import` function, and pass the array of `routes` to `router.js`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read more about webpack dependency management and `require.context` in the webpack
    documentation at [https://webpack.js.org/guides/dependency-management/.](https://webpack.js.org/guides/dependency-management/)
  prefs: []
  type: TYPE_NORMAL
- en: Automatically loading Vuex modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, when we are working on a big project, we need to manage a lot of
    imported `Vuex` modules and stores. To handle those modules, we always need to
    import them by creating a file that will have all the files imported and then
    export those to the Vuex store creation.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn about a function that uses the webpack `require.context` function
    to automatically load and inject those files into the Vuex store creation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will need to create a new Vue project with `Vue-CLI`, or use the project
    created in previous recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the* Enter* key to continue, and the* spacebar *to
    select an option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two methods for starting a new project. The default method is a basic `babel`
    and `eslint` project without any plugins or configuration, and the `Manually` mode,
    where you can select more modes, plugins, linters, and options. We will go for `Manually`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are asked about the features that we will want on the project. Those
    features are some Vue plugins such as `Vuex` or `Router` (`vue-router`), testers,
    linters, and more. Select `Babel`, `Vuex`, and `Linter / Formatter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select the `ESLint + Airbnb` config:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied `on save` or fixed `on commit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is in
    a dedicated file, but it is also possible to store them in `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can choose whether you want to make this selection a preset for future
    projects, so you don''t need to reselect everything:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`Vue-CLI` will create the project, and automatically install the packages for
    us.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to check the project on `vue-ui` when the installation has finished,
    open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can run the built-in `npm` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm run serve` – To run a development server locally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run build  ` – To build and minify the application for deployment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run lint ` – To execute the lint on the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to create an auto-import of the `vuex` modules in
    your project that will handle the router files inside a specific folder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With our route files created and placed inside the `store` folder, we need
    to make sure that every `store` file has a default `export` object in it. In the `index.js` file,
    inside the `src/store` folder, we will need to extract the array of `stores` or `modules`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another file named `loader.js` in the `src/store` folder (which will
    be our `module` loader). It''s important to remember that when using this recipe,
    you will use `vuex` namespaced because all the `stores` need to be used as a module
    and need to be exported in a single JavaScript object. Each filename will be used
    as a reference to a namespace, and it will be parsed to a camelCase text style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As we will be importing by default each file inside the `modules` folder, a
    good practice is to create a file for each module. For example, as you will be
    creating a module named `user`, you need to create a file named `user.js` that
    imports all the `stores` actions, mutations, getters, and state. Those can be
    placed inside a folder that has the same name as the module. The `modules` folder
    will have a structure similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `user.js` file inside the `src/store/modules` folder will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `index.js` file in the `src/store` folder, we need to add the imported
    modules that were automatically loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Now you have your `vuex` modules loaded on your application automatically as
    you create a new `.js` file inside the `src/store/modules` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`require.context` is a webpack built-in function that receives a directory
    to execute a search, a Boolean flag indicating whether subdirectories are included
    in this search, and a regular expression for the pattern matching for the filename
    (all as arguments).'
  prefs: []
  type: TYPE_NORMAL
- en: When the building process starts, webpack will search for all the `require.context` functions,
    and will pre-execute them, so the files needed on the import will be there for
    the final build.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we passed `./modules` for the folder, `false` to not search in
    subdirectories, and `/^(?!.*test).*\.js$/is` as the Regex to search for `.js` files
    and ignore the files that have `.test` in their names.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the function will search for the files and will pass the result through
    a `for` loop to add the content of the files in the array of `vuex` modules.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read more about webpack dependency management and `require.context` in the webpack
    documentation at [https://webpack.js.org/guides/dependency-management/.](https://webpack.js.org/guides/dependency-management/)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom directive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Talking about visual frameworks such as Vue, we always think about components,
    rendering, and visual elements, and we forget that there are a lot of things besides
    the components themselves.
  prefs: []
  type: TYPE_NORMAL
- en: There are the directives that make the components work with the template engine,
    which are the binding agents between the data and the visual result. And there
    are built-in directives in the core of Vue, such as `v-if`, `v-else`, and `v-for`.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to make our directive.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will need to create a new Vue project with `Vue-CLI`, or use the project
    created in previous recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the* Enter* key to continue, and the s*pacebar *to
    select an option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two methods for starting a new project. The default method is a basic `babel`
    and `eslint` project without any plugins or configuration, and the `Manually` mode,
    where you can select more modes, plugins, linters, and options. We will go for `Manually`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are asked about the features that we want on the project. Those features
    are some Vue plugins such as `Vuex` or `Router` (`vue-router`), testers, linters,
    and more. Select `Babel` and `Linter / Formatter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select the `ESLint + Airbnb` config:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied `on save` or fixed `on commit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is in
    a dedicated file, but it is also possible to store them in `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can choose whether you want to make this selection a preset for future
    projects so you don''t need to reselect everything:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`Vue-CLI` will create the project, and automatically install the packages for
    us.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to check the project on `vue-ui` when the installation has finished,
    open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, you can run the built-in npm commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm run serve` – To run a development server locally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run build ` – To build and minify the application for deployment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run lint ` – To execute the lint on the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to create a directive for a masked input field:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `formMaskInputDirective.js` in the `src/directives` folder,
    and a file named `tokens.js` in the same folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `tokens.js` file, we will add our mask base tokens. Those tokens will
    be used to identify the kind of value our input will accept:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We import the token from `token.js` and create our functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `maskDirective` function, we will need to check for the binding value
    on the directive that is passed by the callee of the directive and check whether
    it''s a valid binding. To do so, we will first check whether the `value` property
    is present on the `binding` argument, and then add it to the `config` variable
    with the `tokens` that were imported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to check for the element and validate whether it''s an `input`
    HTML element. To do so, we will check whether the element that was passed down
    by the directive has a `tagName` of `input`, and if it doesn''t, we will try to
    find an `input` HTML element in the element that was passed down:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to add an event listener to the input on the element. The listener
    will call two external functions, one for dispatching the events and another to
    return the masked value to the input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the `eventDispatcher` function; this function will emit the events
    that will be listened to by the `v-on` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'And now the complicated part: returning the masked input value to the input.
    To do so, we will need to create the `maskerValue` function. This function receives
    the value, mask, and token as parameters. The function checks for the current
    value against the mask, to see whether the mask is complete or the value is of
    a valid token. If everything''s okay, it will pass the value to the input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'With our file ready, we need to import the mask directive in the `main.js` file
    and add the directive to Vue, giving the directive the name `''input-mask''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the directive on our application, we need to call the directive on an
    `input` HTML element inside a single file component `<template>` section, passing
    the `token` template `''###-###-###''` in the `v-input-mask` directive like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Vue directive has five possible hooks. We used just one, `bind`. It's bound
    directly to the element and component. It gets three arguments: `element`, `binding`,
    and `vnode`.
  prefs: []
  type: TYPE_NORMAL
- en: When we add the directive in the `main.js` file to Vue, we make it available
    everywhere in our application, so the directive is already at `App.vue` to be
    used by the input.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time we call `v-input-mask` on the input element, we pass the first
    argument, `element`, to the directive, and the second argument, `binding`, is
    the value of the attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Our directive works by checking each new character value on the input. A Regex
    test is executed and validates the character to see whether it is a valid character
    on the token list that was given on the directive instantiation. Then, it returns
    the character if it passes the test, or returns nothing if it's an invalid character.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Vue plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes a new addition to your application is needed, and this addition needs
    to be shared. The best way to share it is by using a plugin. In Vue, a plugin
    is an addition to the Vue global prototype by extending the initialized application
    with new features such as directives, mixings, filters, prototype injection, or
    totally new functions.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will learn how to make our plugin, and how we can use it to interact
    with Vue as a whole (without messing with the prototype and breaking it).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will need to create a new Vue project with the `Vue-CLI`, or use the project
    created in previous recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the s*pacebar *to
    select an option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two methods for starting a new project. The default method is a basic `babel`
    and `eslint` project without any plugins or configuration, and the `Manually` mode,
    where you can select more modes, plugins, linters, and options. We will go for `Manually`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are asked about the features that we want on the project. Those features
    are some Vue plugins such as `Vuex` or `Router` (`vue-router`), testers, linters,
    and more. Select `Babel`, and `Linter / Formatter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select the `ESLint + Airbnb` config:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied `on save` or fixed `on commit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is in
    a dedicated file, but it is also possible to store them in `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can choose whether you want to make this selection a preset for future
    projects, so you don''t need to reselect everything:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '`Vue-CLI` will create the project, and automatically install the packages for
    us.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to check the project on `vue-ui` when the installation has finished,
    open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, you can run the built-in npm commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm run serve` – To run a development server locally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run build ` – To build and minify the application for deployment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run lint ` – To execute the lint on the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Writing a Vue plugin is simple, and there is no need to learn more about Vue
    itself. The basic concept of a plugin is an object that needs to have an `install`
    function, which will be executed when called by the `Vue.use()` method. The `install`
    function will receive two arguments: Vue, and the options that will be used to
    instantiate the plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions to write a plugin that adds two new functions to
    the Vue global prototype, `$localStorage` and `$sessionStorage`:'
  prefs: []
  type: TYPE_NORMAL
- en: In our project, we need to create a file inside the `src/plugin` folder named
    `storageManipulator.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we will create the plugin installation object – we''ll add the
    default plugin options and the base prototype for the functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to create the `generateStorageObject` function. This function will
    receive two arguments: the first will be the window storage object, and the second
    will be the plugin options. With this, it will be possible to generate the object
    that will be used on the prototype that will be injected into Vue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to import the plugin into the `main.js`, and then with the `Vue.use`
    function, install the plugin in our Vue application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Now you can use the plugin anywhere in your Vue application, calling the `this.$localStorage` method
    or `this.$sessionStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Vue plugin works by adding all the code that was instructed to be used to
    the Vue application layer (like a mixin).
  prefs: []
  type: TYPE_NORMAL
- en: When we used `Vue.use()` to import our plugin, we told Vue to call the `install()`
    function on the object of the imported file and executed it. Vue will automatically
    pass the current Vue as the first argument, and the options (if you declare them)
    as the second argument.
  prefs: []
  type: TYPE_NORMAL
- en: In our plugin, when the `install()` function is called, we first create `baseOptions`,
    merging the default options with the passed parameter, then we inject two new
    properties into the Vue prototype. Those properties are now available everywhere
    because the `Vue` parameter that was passed is the `Vue global` being used in
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: Our `generateStorageObject` is a pure abstraction of the Storage API of the
    browser. We use it as a generator for our prototypes inside the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Vue plugins at [https://vuejs.org/v2/guide/plugins.html.](https://vuejs.org/v2/guide/plugins.html)
  prefs: []
  type: TYPE_NORMAL
- en: You can find a curated list of awesome Vue plugins at [https://github.com/vuejs/awesome-vue.](https://github.com/vuejs/awesome-vue)
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SSR, SPA, PWA, Cordova, and Electron application in Vue with Quasar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quasar is a framework based on Vue and Material Design that takes advantage
    of "write once, use everywhere."
  prefs: []
  type: TYPE_NORMAL
- en: The CLI can deploy the same code base to different flavors, such as **Single-Page
    Application** (**SPA**), **Server-Side Rendering** (**SSR**), **Progressive Web Application** (**PWA**),
    **Mobile Application** (Cordova), and **Desktop Application** (Electron).
  prefs: []
  type: TYPE_NORMAL
- en: This takes some of the problems away from the developer, such as configuring
    webpack, Cordova, and Electron with **HMR** (**Hot Module Reload**) for development,
    or adding an SSR configuration in the SPA project. The framework helps the developer
    start production as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use Quasar and the CLI to create a basic
    project, and how to use the CLI to add the development targets for SPA, PWA, SSR,
    Mobile Application, and Desktop Application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global object that is required is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will need to create a new Quasar project with the Quasar CLI, or use the
    project created in previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do it, open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when asked, we need to choose to manually select features:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Quasar-CLI` will ask you for a project name. Define your project name. In
    our case, we choose `quasar_project`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Then `Quasar-CLI` will ask for a project product name. This will be used by mobile
    apps to defined their title name. In our case, we stayed with the default name
    provided:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now `Quasar-CLI` will ask for a project description. This is used for a meta
    tag in search engines when the page is shared. In our case, we used the default
    description provided:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Then `Quasar-CLI` will ask for the project author. Fill this with a `package.json`
    valid name (for example, `Heitor Ribeiro<heitor@example.com>`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s time to choose the CSS preprocessor. In our case, we will go with `Sass
    with indented syntax`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Then `Quasar-CLI` will ask about the import strategy for the components and
    directives. We will use the default `auto-import` strategy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to choose the extra features for the project. We will select `EsLint`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, `Quasar-CLI` will ask for a preset for ESLint. Choose the `Airbnb`
    preset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, `Quasar-CLI` will ask for the application you want to use to install
    the dependencies of the project. In our case, we used `yarn` because we have installed
    it already (but you can choose the one you prefer):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Now open the created folder in your IDE or code editor.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using Quasar to create an application, you always need to choose a flavor
    to start, but the main code will be an SPA. Therefore, the other flavors will
    have their special treats and delicacies based on their needs, but you can personalize
    and make your build execute some code based on the build environment.
  prefs: []
  type: TYPE_NORMAL
- en: Developing an SPA (Single-Page Application)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting the development of an SPA is an out-of-the-box solution; there is no
    need to add any new configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s start adding a new page to our application. Open Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '`Quasar-CLI` will automatically create the Vue page for us. We need to add
    the reference to the page in the router file, and the page will be available on
    the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do it, we need to open the `routes.js` file in the `src/router` folder,
    and add the `About` page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Then open the `About.vue` file in the `src/pages` folder. You will find that
    the file is a single file component that has an empty `QPage` component in it,
    so we need to add a basic title and page indication in the `<template>` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `MainLayout.vue` file, in the `src/layouts` folder, to the `q-drawer`
    component, we need to add the links to the `Home` and `About` page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: And we are finished with a simple example of an SPA running inside a Quasar
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: Commands
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can run the `Quasar-CLI` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`quasar dev` – To start development mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quasar build` – To build the SPA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a PWA (Progressive Web Application)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To develop a PWA, we first need to inform Quasar that we want to add a new
    mode of development. Open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '`Quasar-CLI` will create a folder called `src-pwa` that will have our `service-workers` files,
    separated from our main code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To clean the newly added files, and to lint it into the Airbnb format, we need
    to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The code that we added to the SPA will still be used as our base so that we
    can add new pages, components, and other functions to it as well, which will be
    used on the PWA.
  prefs: []
  type: TYPE_NORMAL
- en: So, are you wondering why `service-worker` is not in the main `src` folder?
    This is because those files are exclusively for PWAs, and are not needed in any
    other case than this one. The same will happen in different build types, such
    as Electron, Cordova, and SSR.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring quasar.conf on a PWA
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For PWA development, you can set some special flags on the `quasar.conf.js` file
    in the `root` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Commands
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can run the `Quasar-CLI` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`quasar dev -m pwa` – To start development mode as a PWA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quasar build -m pwa` – To build the code as a PWA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing SSR (Server-Side Rendering)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To develop SSR, we first need to inform Quasar that we want to add a new mode
    of development. Open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '`Quasar-CLI` will create a folder called `src-ssr` that will have our `extension` and `server` starter
    files, separated from our main code.'
  prefs: []
  type: TYPE_NORMAL
- en: The `extension` file is not transpiled by `babel` and runs on the Node.js context,
    so it is the same environment as an Express or `Nuxt.js` application. You can
    use server plugins, such as `database`, `fileread`, and `filewrites`.
  prefs: []
  type: TYPE_NORMAL
- en: The `server` starter files will be our `index.js` file in the `src-ssr` folder.
    As the extension, it is not transpiled by `babel` and runs on the Node.js context.
    For the HTTP server, it uses Express**,** and if you configure `quasar.conf.js` to
    pass the client a PWA, you can have an SSR with PWA at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring quasar.conf on SSR
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For SSR development, you can configure some special flags on the `quasar.conf.js` file
    in the `root` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Commands
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can run the `Quasar-CLI` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`quasar dev -m ssr` – To start development mode as SSR'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quasar build -m ssr` – To build the code as SSR'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quasar serve` – To run an HTTP server (can be used in production)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a mobile application (Cordova)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To develop SSR, we first need to inform Quasar that we want to add a new mode
    of development. Open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the `Quasar-CLI` will ask you some configuration questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**What is the Cordova app ID?** `(org.cordova.quasar.app)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**May Cordova anonymously report usage statistics to improve the tool over
    time?** **(Y/N)** `N`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Quasar-CLI`will create a folder called `src-cordova`, which will have a Cordova
    project inside.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The folder structure of a Cordova project looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: As a separate project inside Quasar, to add Cordova plugins, you need to call
    `plugman` or `cordova plugin add command` inside the `src-cordova` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring quasar.conf on Cordova
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For Cordova development, you can set some special flags on the `quasar.conf.js`
    file in the `root` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Commands
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can run the `Quasar-CLI` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have a Cordova environment already configured on your desktop,
    you can find more information on how to set it up here: [https://quasar.dev/quasar-cli/developing-cordova-apps/preparation#Android-setup](https://quasar.dev/quasar-cli/developing-cordova-apps/preparation#Android-setup).
  prefs: []
  type: TYPE_NORMAL
- en: '`quasar dev -m cordova -T android` – To start development mode as an Android
    Device Emulator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quasar build -m cordova -T android` – To build the code as Android'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quasar dev -m cordova -T ios` – To start development mode as an iOS device
    emulator (macOS only)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quasar build -m cordova -T ios` – To start build mode as an iOS device emulator
    (macOS only)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a desktop application (Electron)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To develop an SSR, we first need to inform Quasar that we want to add a new
    mode of development. Open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '`Quasar-CLI` will create a folder called `src-electron`, which will have an
    Electron project inside.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The folder structure for Electron projects looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `icons` folder, you will find the icons that `electron-packager` will
    use when building your project. In the `main-process` folder will be your main
    Electron files, spliced into two files: one that will only be called on development
    and another that will be called on development and production.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring quasar.conf on Electron
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For Electron development, you can set some special flags on the `quasar.conf.js` file
    in the root folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The `packager` key uses the API options for the `electron-packager` module,
    and the `builder` key uses the API options for the `electron-builder` module.
  prefs: []
  type: TYPE_NORMAL
- en: Commands
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can run the `Quasar-CLI` commands by opening Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and executing one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`quasar dev -m electron` – To start development mode as Electron'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quasar build -m electron` – To build the code as Electron'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is all possible because Quasar framework encapsulates the building, parsing,
    and bundling for you on the CLI. You don't need to worry about webpack and configurations
    with Electron, Cordova, or even Babel.
  prefs: []
  type: TYPE_NORMAL
- en: A simple CLI command can generate an entirely new page, layout, component, store,
    route, or even a new build for you. As the CLI is just a wrapper around Vue, webpack,
    Babel, and other tools, you are not tied to using only Quasar visual components.
    If you don't want to use them, it's possible to not import them and use the power
    of the CLI for building your application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can check out more about Quasar framework in the documentation at [https://quasar.dev/introduction-to-quasar.](https://quasar.dev/introduction-to-quasar)
  prefs: []
  type: TYPE_NORMAL
- en: Read more about SPA development with Quasar at [https://quasar.dev/quasar-cli/developing-spa/introduction.](https://quasar.dev/quasar-cli/developing-spa/introduction)
  prefs: []
  type: TYPE_NORMAL
- en: Read more about PWA development with Quasar at [https://quasar.dev/quasar-cli/developing-pwa/introduction.](https://quasar.dev/quasar-cli/developing-pwa/introduction)
  prefs: []
  type: TYPE_NORMAL
- en: Read more about SSR development with Quasar at [https://quasar.dev/quasar-cli/developing-ssr/introduction.](https://quasar.dev/quasar-cli/developing-ssr/introduction)
  prefs: []
  type: TYPE_NORMAL
- en: Read more about mobile application development with Quasar at [https://quasar.dev/quasar-cli/developing-cordova-apps/introduction.](https://quasar.dev/quasar-cli/developing-cordova-apps/introduction)
  prefs: []
  type: TYPE_NORMAL
- en: Read more about the Cordova project at [https://cordova.apache.org.](https://cordova.apache.org)
  prefs: []
  type: TYPE_NORMAL
- en: Read more about desktop application development with Quasar at [https://quasar.dev/quasar-cli/developing-electron-apps/introduction.](https://quasar.dev/quasar-cli/developing-electron-apps/introduction)
  prefs: []
  type: TYPE_NORMAL
- en: Read more about the Electron project at [https://electronjs.org/.](https://electronjs.org/)
  prefs: []
  type: TYPE_NORMAL
- en: Read more about `electron-packager` at [https://github.com/electron/electron-packager.](https://github.com/electron/electron-packager)
  prefs: []
  type: TYPE_NORMAL
- en: Find the `electron-packager` options API at [https://electron.github.io/electron-packager/master/interfaces/electronpackager.options.html.](https://electron.github.io/electron-packager/master/interfaces/electronpackager.options.html)
  prefs: []
  type: TYPE_NORMAL
- en: Read more about `electron-build` at [https://www.electron.build/.](https://www.electron.build/)
  prefs: []
  type: TYPE_NORMAL
- en: Find the electron-build options API at [https://www.electron.build/configuration/configuration.](https://www.electron.build/configuration/configuration)
  prefs: []
  type: TYPE_NORMAL
- en: Creating smarter Vue watchers and computed properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Vue, using watchers and computed properties is always an excellent solution
    to check and cache your data, but sometimes that data needs some special treatment
    or needs to be manipulated differently than expected. There are some ways to give
    these Vue APIs a new life, helping your development and productivity.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will divide this recipe into two categories: one for the watchers and another
    for the computed properties. Some methods are commonly used together, such as
    the `non-cached` computed and `deep-watched` values.'
  prefs: []
  type: TYPE_NORMAL
- en: Watchers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These three watcher recipes were selected to improve productivity and the final
    code quality. The usage of these methods can reduce code duplication and improve
    code reuse.
  prefs: []
  type: TYPE_NORMAL
- en: Using method names
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'All watchers can receive a method name instead of functions, preventing you
    from writing duplicated code. This will help you avoid re-writing the same code,
    or checking for values and passing them to the functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Immediate calls and deep listening
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can set your watcher to execute as soon as it is created by passing a property
    immediately and make it execute no matter the value''s depth of mutation by calling
    the `deep` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Multiple handlers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can make your watcher execute various handlers at the same time, without
    needing to set the watch handler to bind to a unique function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Computed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes computed properties are just used as simple cache-based values, but
    there is more power to them. Here are two methods that show how to extract this
    power.
  prefs: []
  type: TYPE_NORMAL
- en: No cached value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can make your computed property an always updated value, rather than a
    cached value, by setting the `cache` property to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Getter and setter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can add a setter function to your computed property and make it a fully
    complete data attribute, but not bound to the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s not recommended to do this, but it''s possible, and in some cases, you
    may need to do it. An example is when you have to save a date in milliseconds,
    but you need to display it in an ISO format. Using this method, you can have the
    `dateIso` property `get` and `set` the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about the Vue `watch` API at [https://vuejs.org/v2/api/#watch.](https://vuejs.org/v2/api/#watch)
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the Vue `computed` API at [https://vuejs.org/v2/api/#computed.](https://vuejs.org/v2/api/#computed)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Nuxt.js SSR with Python Flask as the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Nuxt.js` is a server-side rendering framework that renders everything at the
    server and delivers it loaded. With this process, the page gets the power of SEO
    and fast API fetching before rendering.'
  prefs: []
  type: TYPE_NORMAL
- en: Using it correctly, you can achieve a powerful SPA or PWA with other functions
    that weren't possible before.
  prefs: []
  type: TYPE_NORMAL
- en: In the backend, Python is an interpreted dynamic language that is fast and stable.
    With an active user base and quick learning curve, this is perfect for server
    APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Joining both together, it is possible to get a powerful application deployed
    as fast as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready‌
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global object that is required is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`create-nuxt-app`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install `create-nuxt-app`, you need to execute the following command in
    Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'For the backend of this recipe, we will use **Python**. The Python global objects
    required for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`flask`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flask-restful`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flask-cors`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install `flask`, `flask-restful`, and `flask-cors`, you need to execute the
    following command in Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need to split our recipe into two parts. The first part is the backend
    part (or API if you prefer), which will be done with Python and Flask. The second
    part will be the frontend part, and it will run on `Nuxt.js` in SSR mode.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your Flask API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our API server will be based on the Python Flask framework. We will need to
    create a server folder to store our server files and start the development of
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to install the following Python packages. To do so, open Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Flask framework, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the Flask RESTful extension, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the Flask CORS extension, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Initializing the application
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To create our simple RESTful API, we will create a single file and use SQLite3
    as a database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder named `server` and create a file named `app.py` in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will create our `ToDo` class, and on the constructor of the class,
    we will connect to the database and select all `tasks`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'To implement the RESTful POST method, create a function that receives `task`
    as an argument, and will add an object with the `task` that was added, the `status`
    of the addition to the tasks list, and then return the list to the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create the RESTful PUT method by creating a function that will
    receive the `task` and `id` as arguments of the function. Then, this function
    will update `task` with the current `id`, and return to the user the updated `task`
    and the `status` of the update:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a RESTful DELETE method by creating a function that will receive
    the `ID` of the `task`, which will be removed, and then will return to the user
    the `ID`, `status`, and the `task` that was removed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will add the `ToDo` class as a resource to the API on the `''/''`
    route, and initialize the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Starting the server
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To start your server, you need to open Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Your server will be running and listening on `http://localhost:5000`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your Nuxt.js server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To render your application, you will need to create your `Nuxt.js` application. Using
    the `Nuxt.js` `create-nuxt-app` CLI, we will create it and choose some options
    for it. Open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you will be asked some questions about the installation process. We will
    use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you start creating your project with `Nuxt-CLI`, it will first ask for
    the project name. In our case, we will choose `client` as the name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you need to choose the programming language that will be used in the project.
    We will select `JavaScript`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, `Nuxt-CLI` will ask for the package manager that will be used to install
    the dependencies. In our case, we choose `Yarn`, but you can choose the one you
    prefer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, `Nuxt-CLI` will ask for a UI framework to be used in the project. From
    the available list, choose `Bulma`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, `Nuxt-CLI` will ask whether you want to select extra modules for the
    project. We will select `Axios` from the current list of modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '`Nuxt-CLI` will ask for the linting tools we want to use on our project; we
    will choose `None`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, `Nuxt-CLI` will ask for the test framework we want to implement on our
    project; we will choose `None`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, `Nuxt-CLI` will ask for the rendering mode that will be used by the project;
    we will select `Universal (SSR)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '`Nuxt-CLI` will ask for the deployment target that will be used on the building
    structure; we will choose `Server (Node.js hosting)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, `Nuxt-CLI` will ask for the development tool configuration that we
    want to use; we will select `jsconfig.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: After the CLI finishes the installation process, we can open the `client` folder
    on our editor or IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Bulma to the global CSS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To add Bulma to the application, we need to declare it in the `nuxt` configuration
    file by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `nuxt.config.js,` in the `client` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, update the CSS property and add the Bulma import, to make it available
    in the global scope of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the axios plugin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To start creating our API calls, we need to add the `axios` plugin in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we will need to open the `nuxt.config.js,` file in the root folder,
    and add the `axios` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `axios` property, add the following configuration properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HOST` and define it as `''127.0.0.1''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PORT` and define it as `''5000''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`https` and define it as `false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug` and define it as `true`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Running the Nuxt.js server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you have everything set, you want to run the server and start to see
    what is going on. `Nuxt.js` comes with some pre-programmed `npm` scripts out of
    the box. You can run one of the following commands by opening Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and executing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm run dev` – To run the server in development mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run build` – To build the files with webpack and minify the CSS and JS
    for production'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run generate` – To generate static HTML pages for each route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm start` – To start the server in production, after running the build command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the TodoList component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the TodoList app, we will need a component that will fetch the tasks and
    delete the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will create the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `client/components` folder, create a file named `TodoList.vue` and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we will export a `default` JavaScript object, with a `name` property defined
    as `TodoList`, then define the `beforeMount` life cycle hook as an asynchronous
    function. Define the `computed` and `methods` properties as an empty JavaScript
    object. Then, create a `data` property defined as a singleton function returning
    a JavaScript object. In the `data` property, create a `taskList` property as an
    empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `computed` property, create a new property called `taskObject`. This
    `computed` property will return the result of `Object.fromEntries(new Map(this.taskList))`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `methods` property, create a new method called `getTask` – it will be
    an asynchronous function. This method will fetch the tasks from the server, then
    will use the response to define the `taskList` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a `deleteTask` method. This method will be an asynchronous function
    and will receive an `id` as a parameter. Using this parameter, it will execute
    an API execution to delete the task and then execute the `getTask` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `beforeMount` life cycle hook, we will execute the `getTask`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It''s time to create the `<template>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `client/components` folder, open the `TodoList.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<template>` section, create a `div` HTML element, and add the `class`
    attribute with the value `box`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'As a child of the `div.box` HTML element, create a `div` HTML element, with
    the `class` attribute defined as `content`, with a child element defined as an `ol`
    HTML element and the attribute `type` defined as `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'As a child of the `ol` HTML element, create a `li` HTML element, with the `v-for`
    directive defined as `(task, i) in taskObject`, and the `key` attribute defined
    as a variable, `i`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, as a child of the `ol` HTML element, add `{{ task }}` as the inner
    text, and as a sibling of the text, create a `button` HTML element, the `class`
    attribute defined as `delete is-small`, and the `@click` event listener defined
    as the `deleteTask` method, passing the `i` variable as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Todo form component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To send the task to the server, we will need a form. That means we need to make
    a form component that will handle this for us.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will create the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `client/components` folder, create a file named `TodoForm.vue` and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we will export a `default` JavaScript object, with a `name` property defined
    as `TodoForm`, then define the `methods` property as an empty JavaScript object.
    Then, create a `data` property defined as a singleton function returning a JavaScript
    object. In the `data` property, create a `task` property as an empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `methods` property, create a method named `save`, which will be an asynchronous
    function. This method will send the `task` to the API, and if the API receives `Ok
    Status`, it will emit a `''new-task''` event with the `task` and clean `task`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It''s time to create the `<template>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `client/components` folder, open the `TodoForm.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<template>` section, create a `div` HTML element, and add the `class` attribute
    with the value `box`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `div.box` HTML element, create a `div` HTML element with the `class`
    attribute defined as `field has-addons`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside the `div.field.has-addons` HTML element, create a child `div`
    HTML element, with the `class` attribute defined as `control is-expanded`, and
    add a child input HTML element with the `v-model` directive defined as the `task`
    property. Then, define the `class` attribute as `input`, the `type` attribute
    as `text`, and `placeholder` as `ToDo Task`. Finally, in the `@keypress.enter`
    event listener, define the `save` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, as a sibling of the `div.control.is-expanded` HTML element, create
    a `div` HTML element, with the `class` attribute defined as `control`, and add
    a child `a` HTML element, with the `class` attribute defined as `button is-info`,
    and on the `@click` event listener, define it as the `save` method. As inner text
    of the `a` HTML element, add the `Save Task` text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Creating the layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we need to create a new layout to wrap the application as a simple high-order
    component. In the `client/layouts` folder, open the file named `default.vue`,
    remove the `<style>` section of the file, and change the `<template>` section
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Creating the page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we will create the main page of our application, where the user will be
    able to view their `TodoList` and add a new `TodoItem`.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will create the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `index.vue` file in the `client/pages` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `todo-form` and the `todo-list` component that we created, then
    we will export a `default` JavaScript object, with a `components` property with
    the imported components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It''s time to create the `<template>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `client/pages` folder, open the `index.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<template>` section, create a `div` HTML element, add as a child a
    `section` HTML element, with the `class` property defined as `hero is-primary`.
    Then, as a child of the `section` HTML element, create a `div` HTML element, with
    the `class` attribute defined as `hero-body`. As a child of the `div.hero-body`
    HTML element, create a `div` HTML element with the `class` attribute defined as
    `container` and add as a child an `h1` HTML element with `class` defined as `title`,
    with the inner text as `Todo App`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'As a sibling of the `section.hero.is-primary` HTML element, create a `section`
    HTML element, with the `class` attribute defined as `section` and the `style`
    attribute defined as `padding: 1rem`. Add as a child a `div` HTML element with
    the `class` attribute defined as `container` with a child `todo-list` component
    with the `ref` attribute defined as `list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, as a sibling of the `section.section` HTML element, create a `section` HTML
    element, with the `class` attribute defined as `section` and the `style` attribute
    defined as `padding: 1rem`. Add as a child a `div` HTML element with the `class` attribute
    defined as `container` with a child `todo-form` component, with the `@new-task`
    event listener defined as `$refs.list.getTasks()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe shows the integration between a local API server via Python and
    an SSR platform served via `Nuxt.js`.
  prefs: []
  type: TYPE_NORMAL
- en: When you start the Python server first, you are opening the ports to receive
    data from clients as a passive client, just waiting for something to happen to
    start your code. With the same process, the `Nuxt.js` SSR can do a lot of stuff
    behind the scenes, but when it finishes, it goes idle, waiting for user action.
  prefs: []
  type: TYPE_NORMAL
- en: When the user interacts with the frontend, the application can send some requests
    to the server that will be handed back to the user with data, to be shown on the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can learn more about Flask and the HTTP project inside Python at [https://palletsprojects.com/p/flask/.](https://palletsprojects.com/p/flask/)
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about `Nuxt.js`, you can read the documentation at [https://nuxtjs.org/guide/.](https://nuxtjs.org/guide/)
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about the `Nuxt.js` implementation of Axios and how
    to configure it and use the plugin, you can read the documentation at [https://axios.nuxtjs.org/options.](https://axios.nuxtjs.org/options)
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about Bulma, the CSS framework used in this recipe,
    you can find more information at [https://bulma.io.](https://bulma.io)
  prefs: []
  type: TYPE_NORMAL
- en: The dos and don'ts of Vue applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is always something everyone is worried about, and this is no different
    for technology. You need to be aware and alert all the time. In this section,
    we'll look at how you can prevent attacks with some techniques and simple solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Linters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using ESLint, make sure you have enabled the Vue plugin, and you are following
    the strongly recommended rules. Those rules will help you with the development,
    checking for some common mistakes that can open doors to attacks such as the `v-html`
    directive.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a `Vue-CLI` project, with the options for linters selected, a file named `.eslintrc.js` will
    be created along with the project files. In this file, a set of basic rules will
    be pre-determined. The following is an example of a set of good practice rules
    for an `ESLint + AirBnb` project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you have any code that breaks the lint rules, it won't be parsed on
    development or build.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript has some vulnerabilities that can be prevented by following some
    simple checklists and simple implementations. Those implementations can be in
    client-server communications or DOM manipulation, but you always need to be careful
    not to forget them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some tips for using JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: Always use an authenticated and encrypted API when possible. Remember that JWT
    isn't encrypted by itself; you need to add the layer of encryption *(JWE)* to
    have the whole JSON.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always use `SessionStorage` if you want to store an API token.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always sanitize the HTML input from the user before sending it to the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always sanitize the HTML before rendering it to the DOM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always escape any `RegeExp` from the user; it will be executed, to prevent any
    CPU thread attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always catch errors and don't show any stack trace to the user, to prevent any
    code manipulation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some tips on what not to do when using JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: Never use `eval()`; it makes your code run slowly and opens a door for malicious
    code to execute inside your code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Never render any input from the user without any sanitization or escaping the
    data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Never render any HTML on the DOM without any sanitization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Never store an API token on `LocalStorage`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Never store sensitive data in the JWT object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When developing a Vue application, you need to check for some basic rules that
    can help the development and won't open any doors for the external manipulation
    of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some tips for using Vue:'
  prefs: []
  type: TYPE_NORMAL
- en: Always add type validation to your props, and if possible, a validator check.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid the global registration of components; use local components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always use lazy-loaded components, when possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `$refs` instead of direct DOM manipulation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some tips on what not to do when using Vue:'
  prefs: []
  type: TYPE_NORMAL
- en: Never store `Vue`, `$vm`, `$store`, or any application variable on the window
    or any global scope.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Never modify the Vue prototype; if you need to add a new variable to the prototype,
    make a new Vue plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's not recommended to use a direct connection between components, as it will
    make the component bound to the parent or child.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about XSS (cross-site scripting) on OWASP CheatCheat
    at [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.md) and
    about HTML XSS at [https://html5sec.org/.](https://html5sec.org/)
  prefs: []
  type: TYPE_NORMAL
- en: Find more information about `eslint-vue-plugin` at [https://eslint.vuejs.org/.](https://eslint.vuejs.org/)
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about Node.js security best practices at [https://github.com/i0natan/nodebestpractices#6-security-best-practices.](https://github.com/i0natan/nodebestpractices#6-security-best-practices)
  prefs: []
  type: TYPE_NORMAL
- en: Find more information about the dos and don'ts of a Vue application at [https://quasar.dev/security/dos-and-donts.](https://quasar.dev/security/dos-and-donts)
  prefs: []
  type: TYPE_NORMAL
