- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This learning path helps you get comfortable in the world of Python. It starts
    with a thorough and practical introduction to Python. You'll quickly start writing
    programs in the first part of the learning path. With the power of linked lists,
    binary searches, and sorting algorithms, you'll easily create complex data structures,
    such as graphs, stacks, and queues. After understanding cooperative inheritance,
    you'll expertly raise, handle, and manipulate exceptions. You will effortlessly
    integrate the object-oriented and not-so-object-oriented aspects of Python, and
    create maintainable applications using higher level design patterns. Once you've
    covered the core topics, you’ll understand the joy of unit testing and just how
    easy it is to create unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this learning path, you will have built components that are easy
    to understand, debug, and can be used across different applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This learning path includes content from the following Packt products:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Learn Python Programming - Second Edition by Fabrizio Romano](https://www.packtpub.com/application-development/learn-python-programming-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Data Structures and Algorithms by Benjamin Baka](https://www.packtpub.com/application-development/python-data-structures-and-algorithms)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python 3 Object-Oriented Programming by Dusty Phillips](https://www.packtpub.com/application-development/python-3-object-oriented-programming-third-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are relatively new to coding and want to write scripts or programs to
    accomplish tasks using Python, or if you are an object-oriented programmer for
    other languages and seeking a leg up in the world of Python, then this learning
    path is for you. Though not essential, it will help you to have basic knowledge
    of programming and OOP.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](1bcb5c5b-39cb-4561-846f-363111c7a2bc.xhtml), *A Gentle Introduction
    to Python*, introduces you to fundamental programming concepts. It guides you
    through getting Python up and running on your computer and introduces you to some
    of its constructs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](c8b5469e-e120-49c2-95ec-cc3caae33027.xhtml), *Built-in Data Types*,
    introduces you to Python built-in data types. Python has a very rich set of native
    data types, and this chapter will give you a description and a short example for
    each of them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ef39b6a7-bb42-4484-84a1-56dd5375ca64.xhtml), *Iterating and Making
    Decisions*, teaches you how to control the flow of your code by inspecting conditions,
    applying logic, and performing loops.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](6fca8068-0037-4e99-986b-805a74d5729f.xhtml), *Functions, the Building
    Blocks of Code*, teaches you how to write functions. Functions are the keys to
    reusing code, to reducing debugging time, and, in general, to writing better code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](04aeb51c-53fa-438f-b872-fe9b22b272bf.xhtml), *Files and Data Persistence*,
    teaches you how to deal with files, streams, data interchange formats, and databases,
    among other things.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](1a948770-4fa7-4af3-9c4b-925c7ae45060.xhtml), *Principles of Algorithm
    Design*, covers how we can build structures with specific capabilities using the
    existing Python data structures. In general, the data structures we create need
    to conform to a number of principles. These principles include robustness, adaptability,
    reusability, and separating the structure from a function. We look at the role
    iteration plays and introduce recursive data structures.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](acabf45b-084d-4617-8977-5d5b501dc3a0.xhtml), *Lists and Pointer
    Structures*, covers linked lists, which are one of the most common data structures
    and are often used to implement other structures, such as stacks and queues. In
    this chapter, we describe their operation and implementation. We compare their
    behavior to arrays and discuss the relative advantages and disadvantages of each.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](af3bbe72-d2c7-4269-8d7a-6b6ae0725d23.xhtml), *Stacks and Queues*,
    discusses the behavior and demonstrates some implementations of these linear data
    structures. We give examples of typical applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](00988d81-5ca6-4d6e-8690-8e406a0ab9a5.xhtml), *Trees*, will look
    at how to implement a binary tree. Trees form the basis of many of the most important
    advanced data structures. We will examine how to traverse trees and retrieve and
    insert values. We will also look at how to create structures such as heaps.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](dff95e7c-80d5-45c3-9dbf-b53a5481dcf6.xhtml), *Hashing and Symbol
    Tables*, describes symbol tables, gives some typical implementations, and discusses
    various applications. We will look at the process of hashing, give an implementation
    of a hash table, and discuss the various design considerations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](db2adce8-072d-4722-ae9d-6e32791c97d6.xhtml), *Graphs and Other
    Algorithms*, looks at some of the more specialized structures, including graphs
    and spatial structures. Representing data as a set of nodes and vertices is convenient
    in a number of applications, and from this, we can create structures such as directed
    and undirected graphs. We will also introduce some other structures and concepts such
    as priority queues, heaps, and selection algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](c485b63a-a472-4176-aa15-1a8e737af07b.xhtml), *Searching*, discusses
    the most common searching algorithms and gives examples of their use for various
    data  structures. Searching a data structure is a fundamental task and there are
    a number of approaches.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](40b124ee-3b32-4a76-9524-463dbe813217.xhtml), *Sorting*, looks
    at the most common approaches to sorting. This will include bubble sort, insertion
    sort, and selection sort.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](d284cb2f-9636-47b1-b416-c84eb5be9fd2.xhtml), *Selection Algorithms*,
    covers algorithms that involve finding statistics, such as the minimum, maximum,
    or median elements in a list. There are a number of approaches and one of the
    most common approaches is to first apply a sort operation.  Other approaches include
    partition and linear selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](c232a9c5-f0ac-46d8-8c31-41aa4d225a71.xhtml), *Object-Oriented
    Design*, covers important object-oriented concepts. It deals mainly with terminology
    such as abstraction, classes, encapsulation, and inheritance. We also briefly
    look at UML to model our classes and objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](9179e7f0-fea3-4c8a-b134-a190544099b4.xhtml), *Objects in Python*,
    discusses classes and objects as they are used in Python. We will learn about
    attributes and behaviors of Python objects, and the organization of classes into
    packages and modules. Lastly, we will see how to protect our data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](63f74e80-a17c-456d-969e-2a36ffb0067b.xhtml), *When Objects Are
    Alike*, gives us a more in-depth look into inheritance. It covers multiple inheritance
    and shows us how to extend built-in. This chapter also covers how polymorphism
    and duck typing work in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 18](50624d2e-4cec-4b84-89d0-5198af26590d.xhtml), *Expecting the Unexpected*,
    looks into exceptions and exception handling. We will learn how to create our
    own exceptions and how to use exceptions for program flow control.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 19](e639a907-22c5-4f1d-b125-f2b9a269c9f6.xhtml), *When to Use Object-Oriented
    Programming*, deals with creating and using objects. We will see how to wrap data
    using properties and restrict data access. This chapter also discusses the DRY
    principle and how not to repeat code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 20](72a5d45b-2ade-4c5d-a00c-1c1a36e1a510.xhtml), *Python Object-Oriented
    Shortcuts*, as the name suggests, deals with time-savers in Python. We will look
    at many useful built-in functions, such as method overloading using default arguments.
    We''ll also see that functions themselves are objects and how this is useful.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 21](b9232138-1747-4f88-b7ac-002c40332e92.xhtml), *The Iterator Pattern*,
    introduces the concept of design patterns and covers Python''s iconic implementation
    of the iterator pattern. We''ll learn about list, set, and dictionary comprehensions.
    We''ll also demystify generators and coroutines.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 22](f09b264b-a4c5-4a1e-9911-8f00ca74144c.xhtml), *Python Design Patterns
    I*, covers several design patterns, including the decorator, observer, strategy,
    state, singleton, and template patterns. Each pattern is discussed with suitable
    examples and programs implemented in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 23](3e7c30d8-a939-4a5e-9eb4-53d9f24a0306.xhtml), *Python Design Patterns
    II*, wraps up our discussion of design patterns with coverage of the adapter,
    facade, flyweight, command, abstract, and composite patterns. More examples of
    how idiomatic Python code differs from canonical implementations are provided.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 24](55ac5d0e-194c-479b-9a2b-550e4045086b.xhtml), *Testing Object-Oriented
    Programs*, opens with why testing is so important in Python applications. It focuses
    on test-driven development and introduces two different testing suites: unittest
    and py.test. Finally, it discusses mocking test objects and code coverage.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code in this book will require you to run Python 2.7.x or higher. Python's
    default interactive environment can also be used to run the snippets of code.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the examples in this book rely on third-party libraries that do not
    ship with Python. They are introduced within the book at the time they are used,
    so you do not need to install them in advance.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Getting-Started-with-Python](https://github.com/PacktPublishing/Getting-Started-with-Python). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "The `if`, `else`, and `elif` statements control the conditional
    execution of statements."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Then you have to manually click Yes or No if the label matches
    the color."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
