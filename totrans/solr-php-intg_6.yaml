- en: Chapter 6. Debug and Stats Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Debug and stats are two components in Solarium used to get more information
    about the index statistics and how queries are executed and results returned.
    In this chapter we will explore both the components and go in depth on how to
    retrieve the index statistics using the stats component. We will also look at
    how Solr calculates relevance scores and how we can use PHP to get and display
    the query explanation returned by Solr. We will explore:'
  prefs: []
  type: TYPE_NORMAL
- en: How Solr does relevance ranking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a debug through PHP code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a debug on Solr interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the output of debug query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display query result statistics using the stats component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You could say why should I go into the theory about these components? What will
    this help me achieve? The benefit of using the debug component is to understand
    and analyze how the search result was ranked. Why did a certain document come
    on the top and why did another document come at the end? Further if you want to
    alter the ranking to suit the way you want results to be displayed, you have to
    boost certain fields and again debug and analyze how the query is performing after
    applying the boosts. In a single line, the debug component helps us in analyzing
    and modifying the ranking to suit our requirements. The stats component is mostly
    used for displaying index statistics—something that can be used to show the complexity
    of the index being handled.
  prefs: []
  type: TYPE_NORMAL
- en: Solr relevance ranking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a query is passed to Solr, it is converted to an appropriate query string
    that is then executed by Solr. For each document in the result, Solr calculates
    the relevance score according to which the document is sorted. By default higher
    scoring documents are given priority in the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Solr relevancy algorithm is known as the **tf-idf model** where **tf**
    stands for **term frequency** and **idf** stands for **inverse document frequency**.
    The meaning of the parameters used in relevance calculation so we can interpret
    the output of debug query are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tf**: The term frequency is the frequency with which a term appears in a
    document. Higher term frequency results in a high document score.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**idf**: The inverse document frequency is the inverse of the number of documents
    in which the term appears. It indicates the rarity of the term across all documents
    in the index. Documents having a rare term are scored higher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**coord**: It is the coordination factor that says how many query terms were
    found in a document. A document with more query terms will have higher score.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**queryNorm**: It is a normalizing factor used to make the scores across queries
    comparable. Since all documents are multiplied by the same queryNorm, it does
    not affect the document ranking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fieldNorm**: Field normalization penalizes fields with a large number of
    terms. If a field contains more terms than the other, its score is lower than
    the other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have seen query time boosts earlier. The purpose of debugging a query is
    to see how relevance is being calculated and use our knowledge of query time boosts
    to tune the output as per our requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Executing debug through PHP code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To enable debugging of our Solr query using PHP, we need to get the debug component
    from our query.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to getting debug information of the default query, we can call
    the `explainOther()` function to get a score of certain documents that match the
    query specified in `explainOther()` function with respect to the main query as
    shown in the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding piece of code, we are searching for all books and boosting
    books by author `martin` by `2`. In addition to this we are getting the debug
    information for books by author `king`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the query, we need to get the debug component from the `ResultSet`.
    We then use it to get the query string, parsed query string, the query parser
    and information about the debug other query as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to iterate over the debug result-set and for each document we need
    to get the total score value, the match and the score calculation description.
    We can also get into the details of the debug information and obtain the value,
    match, and calculation description for each term in the query with respect to
    the document as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To obtain the debug information for the other query we need to call the `getExplainOther()`
    function and follow the same process as above. In addition to the scoring information,
    we also get the time taken for each phase of query execution. This can be obtained
    by using the `getTiming()` function as below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To obtain the time spent in each phase of the query, we need to iterate over
    the output of the `getPhases()` function and get the phase name related data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Running debug on Solr interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The parameters appended to the Solr query URL in our example are `debugQuery=true`,
    `explainOther=author:king`, and `debug.explain.structured=true`. Let us check
    the Solr output for a debug query by visiting the URL `http://localhost:8080/solr/collection1/select/?omitHeader=true&debugQuery=true&fl=id,name,author,series_t,score,price&start=0&q=cat:book+OR+author:martin^2&rows=5`
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the output of the previous query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running debug on Solr interface](graphics/4920_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the debug component after the results component in Solr query results
    interface. It contains the raw query and parsed query. The explain element in
    the debug component contains the score and the calculations that were done to
    achieve the score
  prefs: []
  type: TYPE_NORMAL
- en: Since debugging a Solr query is required to tune the relevance, it makes more
    sense to use the Solr interface to see the debug output. PHP interface to the
    debug component can be used to create an interactive user interface where field
    level boosts are taken from the user and used to calculate and display the relevance.
    Such an interface can be used to see how changes in boost affect the relevance
    score and tune the same.
  prefs: []
  type: TYPE_NORMAL
- en: The stats component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The stats component can be used to return simple statistics for indexed numeric
    fields in the document set returned by a Solr query. Let us get the statistics
    for prices of all books in our index. We will also facet on `price` and availability
    (`inStock`) and see the output.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is advisable to use a templating engine instead of writing HTML code inside
    PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the query to fetch all books and set the number of rows to `0` as we
    are not interested in the results but only the statistics, which will be fetched
    as a separate component as given in the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Get the stats component and create statistics for field `price` and create facets
    on `price` and `inStock` fields.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the query and fetch the stats component from the result-set as given
    in the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Loop through the fields we have fetched in our stats component earlier. Get
    all statistics for each field as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the facets for each field in the statistics result-set and fetch the statistics
    for each element in the facet results as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of our script can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The stats component](graphics/4920_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On checking Solr logs we can see the query being executed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To enable statistics, we have to pass `stats=true` along with `stats.field`
    and faceting parameters. We can see the same statistics output on Solr using the
    URL `http://localhost:8080/solr/collection1/select/?omitHeader=true&rows=0&stats.field=price&stats=true&q=cat:book&f.price.stats.facet=price&f.price.stats.facet=inStock`
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The stats component](graphics/4920_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot we can see the statistics for **price** and statistics
    facets for **price** and **inStock**. Out of our complete stock of books, the
    minimum price is **3.06** and the maximum price is **30.5**. The sum of all prices
    is **246.76** and the mean is **8.225**. We can see similar information for each
    element in our facet output.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter gave us some insight into our index and into how results are ranked.
    We saw the parameters used to calculate the relevance score and how to extract
    the calculation from Solr using PHP. We discussed the use of the debug query.
    We saw how to extract statistics of numeric fields for a query from our index
    and how to display the information using PHP. The information retrieved from these
    modules is used to analyze and improve the Solr search results. Statistics can
    also be used for reporting purposes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will explore how to build spell suggestions using the
    Solr and PHP. We will also build an auto complete feature to suggest query options
    during a search.
  prefs: []
  type: TYPE_NORMAL
