- en: Chapter 10. The Kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief look at module commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a kernel from kernel.org
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using xconfig to modify the configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with GRUB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding GRUB 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The kernel is the main component, or the heart of an operating system. It controls
    all of the resources, timings, interrupts, memory allocation, process separation,
    error handling, and logging in the system. In a typical Linux computer, the kernel
    is modular, in that it has a core file (or files) and then loads the other device
    drivers as needed. In some cases, say an embedded device, the kernel may consist
    of one big image with all of the drivers it needs contained inside a file. This
    is known as a monolithic kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Before deciding whether you need to build a custom kernel, you should first
    make sure you really do need one. Here are some of the pros and cons to running
    a custom kernel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the pros to running a custom kernel:'
  prefs: []
  type: TYPE_NORMAL
- en: If you know what you are doing and have the time to research it, you can end
    up with a kernel that gets the most out of your hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can take advantage of the features or devices that the stock kernel might
    not have
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By going through all of the kernel settings you gain a better understanding
    of Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and running your own kernels is just plain fun
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the cons of running a custom kernel:'
  prefs: []
  type: TYPE_NORMAL
- en: Your own custom kernel might not contain features needed by your distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMware, and other virtual environments will probably not work without additional
    effort
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be aware that if you run your own kernel, you will most likely no longer be
    supported by your distribution support channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most of these cons of running your own kernel can be worked around and/or solved.
    It just depends on how much time you have to spend on getting it right.
  prefs: []
  type: TYPE_NORMAL
- en: A brief look at module commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several commands that are used to manipulate the modules on your system.
    Note that depending on your distribution, these commands may only be run as root.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we will run the `lsmod`, `modprobe`, `insmod`, and
    `modinfo` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: To see the status of the modules currently loaded on the system, run `lsmod`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To load a module from the current `/lib/modules/<kernel name>` directory, you
    would use the `modprobe` command. An example would be `modprobe pcnet32`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To load a module directly, use the `insmod` command. An example would be `insmod
    /temp/pcnet32.ko`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To display the information about a module, use the `modinfo` command. Try this
    on your system by first running `lsmod` to find a module and then `modinfo` on
    one of the names `modinfo video`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `lsmod` command takes the contents of the `/proc/modules` file and displays
    it in a nice, easy to read format. Use it to determine what modules are loaded
    in the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a partial listing of `lsmod` from my Fedora
    19 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3008OS_10_00.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `modprobe` command is used to add and remove modules from the Linux kernel.
    It loads the module from the current `/lib/modules/<kernel name>` directory. The
    `modprobe` command does a lot more than `insmod`, such as load more than one module
    at a time to resolve dependencies, and is generally preferred over `insmod`. Since
    `modprobe` can load multiple modules, the files in `/etc/modprobe.d` and the `/etc/modules.conf`
    file are used to resolve any issues.
  prefs: []
  type: TYPE_NORMAL
- en: The `insmod` command can be used to insert a module into the system. It is normally
    used to load a module directly. For example, if you wanted to load a newly created
    version of the `pcnet32` module, you would first change the directory to the proper
    directory and then run `insmod pcnet32.ko`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `modinfo` command shows information about a Linux kernel module. It is
    a very useful command that allows you to see the details about a particular module,
    such as what parameters it will accept. The following is what the output from
    `modinfo` looks like on my Fedora 17 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `rmmod` command allows you to remove a loaded module from the Linux kernel.
    The usual syntax is `rmmod modulename`. The extension is not used. You can also
    use the `modprobe -r` command.
  prefs: []
  type: TYPE_NORMAL
- en: The `depmod` program generates the `modules.dep` and `.map` files. It does not
    normally need to be executed manually by the user as it is run during the kernel
    build. It creates a list of module dependencies by examining the modules in `/lib/modules/<kernelname>`
    and determining what symbols they need and which symbols they export.
  prefs: []
  type: TYPE_NORMAL
- en: Some of these commands have a force option available. It will attempt to perform
    the desired function, bypassing any checks. I have never seen this work reliably
    and so do not recommend its use. If you do decide to try it, make sure you have
    a complete OS backup available.
  prefs: []
  type: TYPE_NORMAL
- en: When running device driver commands, in many cases more information is available
    by looking at the `/var/log/messages` file. I suggest opening a terminal and running
    `tail -f /var/log/messages` in it. Keep this terminal where you can see it at
    all times. Also note that the file will eventually be recycled, so the command
    will have to be stopped and started again (about once a week on my systems). A
    simple test is to run `logger hellojim`. If you don't see that show up, then it's
    time to restart the tail session again.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also run the `dmesg` command. The following is an abbreviated example
    of the output of `dmesg` on Fedora 17:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consult the man or info pages for any of these commands for more information.
    In particular, look at `man modprobe.conf` for details on how to use the configuration
    options available with `modprobe`.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `uname -r` command to see the current kernel version. You will
    often see that the expression `uname -r` in scripts and aliases works great.
  prefs: []
  type: TYPE_NORMAL
- en: Building a kernel from kernel.org
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this example, we will be using kernel files from the [http://kernel.org](http://kernel.org)
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should be able to perform all but the last step without any possible harm
    to your system. The `make install` command will modify your GRUB file(s), and
    so at a minimum, I would back those up. To be very safe, and since we already
    know I am paranoid, if you are going to install the new kernel, I would run all
    of these steps on a test machine.
  prefs: []
  type: TYPE_NORMAL
- en: This example assumes your computer has been installed as a full development
    system. You will need up-to-date versions of `GCC`, `make`, the QT development
    package, and others. If you have a current distribution elected to install the
    Software Development package (or equivalent), you are probably good to go. I suggest
    having at least 10 GB of file space available on the partition you plan to do
    the builds in; more if you are going to be creating a lot of kernel trees (the
    files in kernel 3.9.1 are using 6.5 GB).
  prefs: []
  type: TYPE_NORMAL
- en: The `vmlinuz`, `initramfs`, and `map` files will be copied to `/boot`, so make
    sure it is large enough to handle the number of extra kernels you want (about
    500 MB is typical).
  prefs: []
  type: TYPE_NORMAL
- en: You will need to be root to run the `make modules_install` and `make install`
    commands. I suggest becoming root for all of this procedure to avoid any file
    permission problems.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to get and build a kernel:'
  prefs: []
  type: TYPE_NORMAL
- en: On your browser, navigate to [http://kernel.org](http://kernel.org).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click inside the yellow square where it says **Latest Stable Kernel** and save
    the file. On Fedora, the `Downloads` directory is `/home/<user>/Downloads`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where you want to build is pretty much up to you. I personally dislike long
    directory paths and so I have put mine in the `/temp` directory. You may choose
    another location if you wish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or move the `.xz` file from the `Downloads` directory to `/temp`. For this
    example, the filename is `linux-3.9.1.tar.xz`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the directory to `/temp` and extract the file `tar xvf linux-3.9.1.tar.xz`.
    This used to take a long time, but it's not too bad these days.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When it's finished, change directory to the `cd /temp/linux-3.9.1` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to obtain a kernel configuration file. Unless you have a specific
    one already in mind, I usually take the latest one out of the `/boot` directory.
    On my system, I ran the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You could have copied the file directly to `.config`, however, I like seeing
    what I started with. So do it now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to run a kernel build program to get everything in sync. We will
    use the `xconfig` program, which will be discussed in more detail in the next
    section. For now, just run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will bring up a cool-looking screen with about a million things on it.
    Click on **File** | **Save** and then **File** | **Quit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now be back at the text screen, with it showing something like the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now run the `make` command. Depending on the speed of your computer, this may
    take a long while. If you're a coffee or tea drinker, this might be a good time
    to go get some.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check to make sure there were no errors, and then run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This next step will modify your GRUB configuration. I always make sure I have
    backups for those just in case. When done, to install the kernel, run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In most cases, the `make install` command will set the new kernel as the default.
    You can check this by viewing your GRUB configuration files (we will see more
    on GRUB later in this chapter).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To actually try out the new kernel, you must reboot the system (more on that
    later). When the screen comes up, make sure the proper kernel is selected on the
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we made no real changes, the kernel should boot up without any issues.
    Check this by running the `uname -a` command to make sure it booted the right
    one. You should not see or notice any differences in this kernel. However, depending
    on several factors it may not work as expected, or it may not even boot at all.
    If this is the case, you should be able to reboot back into the previous good
    kernel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When rebooting, I strongly suggest a cold start. Perform an orderly shutdown
    (`shutdown -h now`) and let the machine sit for at least a few seconds; minutes
    wouldn't hurt either. I have seen some very strange things happen with warm boots
    that any sane person would say was impossible.
  prefs: []
  type: TYPE_NORMAL
- en: Using xconfig to modify the configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As was mentioned in the previous section, the `.config` file is what controls
    everything that goes into the kernel files. This includes both the `vmlinuz` and
    `initramfs` files, and the device driver modules. The `.config` is a text file
    but is not meant to be edited directly, instead one of several different programs
    can be used. In this chapter we show you how to use the `xconfig` program to make
    changes to the `.config` file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please see the previous section on what is needed to prepare before performing
    these steps.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we will use `xconfig` to modify the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to the kernel build directory and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: That cool-looking screen should come up again. This program takes a few minutes
    to get used to, so we will go through it step-by-step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, locate the string **Processor type and features** and click on it. You
    will see the screen change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now in the panel on the right-hand side under **Processor family**, click on
    **Core 2/newer Xeon**. Click on the text, *not* the radio button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be seeing something like the following screenshot (from my Fedora
    19 system using a 3.9.9 kernel):![How to do it...](img/3008OS_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must use caution when using this program. It is quite easy to accidentally
    click on a radio button, changing something you did not intend to. For this reason
    I suggest making frequent backups of your `.config` file. Since it is a text file,
    you can use the `diff` program to look for changes between files. If you are unfamiliar
    with `diff`, run `man diff` for more information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, let's go ahead and change something. If you are running modern hardware,
    it probably has a Core 2 or Xeon processor in it. Run `cat /proc/cpuinfo` to see
    what you have. If it looks appropriate, click the radio button on the **Core 2/newer
    Xeon** line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Those are the basics for configuring a new kernel. When first getting started,
    I suggest making as few changes as possible between builds. This way it will be
    much easier to track down what change caused a problem, if one should occur.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To complete this discussion of `xconfig`, let's try another field. On the left-hand
    side, click on the text of **General setup**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the text on the right change. In general, when using `xconfig`
    you click on the text to change the display, to expand or compress an entry click
    on the appropriate button, and to actually change a value click on the radio button.
    A small black dot in a box means a module will be built.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the `diff` command to look at the differences between the `.config`
    files you have saved. This will save a lot of time when debugging.
  prefs: []
  type: TYPE_NORMAL
- en: The program can be somewhat confusing. In places, the text on the right will
    indicate **Say Y here**. That means to make sure there is a check in the checkbox.
    Likewise, **No** means no checkmark. In some cases the program will say to indicate
    Y or N in a field that doesn't even have a checkbox. I suppose those are bugs,
    if so, they have been there for a long time.
  prefs: []
  type: TYPE_NORMAL
- en: You may also click on **Help** | **Introduction** for some brief text on how
    `xconfig` is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extra care must be taken when building kernels. It is easy to make a mistake
    when using `xconfig` to modify your `.config` file resulting in an unbootable
    kernel. The following are a few pointers:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a backup of the current `.config` every single time you make a change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make as few changes as possible at one time. It's tempting to try and save time
    by making a lot of changes, if this works for you that is great. It does not work
    for me though.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your latest kernel will not boot, try using `diff` to compare your latest
    `.config` file with the last good one. You might be able to spot the problem right
    away.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If all fails, go back to a known working configuration file and start again
    from there. You have been making backups of your `.config` files all this time,
    right?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with GRUB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with kernels, you may need to change your GRUB configuration file
    from time to time. You can modify which kernel comes up by default, the timeout
    value for the kernel selection menu, the parameters passed to the kernel, boot
    other operating systems, and many other things.
  prefs: []
  type: TYPE_NORMAL
- en: The `grub.conf` file is normally located in `/boot/grub`, or you can use the
    `/etc/grub.conf` file, which is a symbolic link.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is what `grub.conf` looks like on my Fedora 14 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we will show you how to change some of the items in the `grub.conf` file.
    Note that a mistake here can render your system unbootable, so either just follow
    along or be very careful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to the proper directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a backup copy: `cp grub.conf /temp` (or some other suitable location).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit it with vi or equivalent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Referring to my file above let's boot the first stanza by default. Change the
    `default=2` line to `default=0`. Note that they count starting at 0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's increase the amount of time it will wait for you to make a selection;
    change the `timeout` value to `10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Suppose you want to boot up in text mode, to do this comment out (that is, put
    a `#` in front of) the `splashimage` and `hiddenmenu` lines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And also remove the `rhgb quiet` from the stanza (or all of them).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have any parameters you want passed to the kernel, you can just add them
    to the end of the `kernel` line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us see the break-up of the above mentioned steps in the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: The commented section says `You have a /boot partition. This means that all
    kernel and initrd paths are relative to /boot`. What this is trying to say is
    when you come across a line later containing something like `/vmlinuz-3.9.1`,
    it really means `/boot/vmlinuz-3.9.1`. Don't forget that it works this way, and
    you will save yourself a lot of grief later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `default=2` means to use the third title or stanza (yes, this is another
    place where they start counting at 0 instead of 1).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `timeout=5` means to display the kernel boot menu for 5 seconds before booting
    into the default one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `splashimage` line shows a graphical image on the screen while booting.
    I dislike this immensely and so I comment it out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `hiddenmenu` line means to hide the kernel boot menu. You comment this line
    out to show the menu. Yes, it's backwards again, but not quite as awkward as counting
    things starting at 0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first title line begins a kernel stanza. Everything between that line and
    the next title line (or end of file) is associated with that kernel. In this case,
    the first listed kernel is the latest one I have created (3.9.1).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `root (hd0,0)` line means that my `/boot` directory is located on the first
    hard drive on the first partition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next line is the actual kernel file and parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last line of this stanza is the initial RAM disk image file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, there are two more stanzas (kernels) available on this machine.
    I am running `2.6.35-6-45.fc14.x86_64`, the default kernel for Fedora 14 64-bit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding GRUB 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GRUB 2 is now being used in many Linux distributions. It is a complete rewrite
    and was created to fix some of the perceived issues in GRUB Legacy. It is still
    being developed, and so the information here may not be complete or up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: The boot configuration when using GRUB 2 is in the `/boot/grub2/grub.cfg` file.
    You can also refer to it by the `/etc/grub2.cfg` file which is a symbolic link.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is what the first few lines look like on my Fedora 17 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As the commented line says, this file is not intended to be edited directly.
    Instead, the `/etc/default/grub` file is used in combination with the set of files
    in the `/etc/grub.d` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are the steps to make changes to the boot configuration when using
    GRUB 2\. Remember, the `grub.cfg` file is not edited directly; changes are instead
    made to the files in the `/etc/grub.d` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change the `timeout` and `rhgb` values. Edit the `/etc/default/grub` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change `GRUB_TIMEOUT` to `10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `GRUB_CMDLINE_LINUX`, remove the `rhgb quiet`. Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the new file by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The modified `grub.cfg` file should be ready for booting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a description of what the scripts in `/etc/grub.d` are for:'
  prefs: []
  type: TYPE_NORMAL
- en: '`00_header`: This generates the header for `grub2.cfg` and gets the info from
    the `/etc/default/grub` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`10_linux`: This loads the menu entries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`20_linux_xen`: This looks for zen kernels to add them to the menu'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`20_ppc_terminfo`: This checks for a correct size terminal on PPC systems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`30_os-prober`: This searches the hard drives for other operating systems so
    it can add them to the boot menu'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`40_custom`: This is a template that can be used to add extra entries to the
    boot menu'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`41_custom`: This reads information from `/boot/grub/custom.cfg` if it exists'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README`: This is a file that contains some other useful information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a partial list of the GRUB 2 commands available in the operating
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '`grub2-editenv`: This edits the GRUB environment block'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-fstest`: This is a debug tool for GRUB filesystem drivers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-kbdcomp`: This generates a GRUB keyboard layout file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-menulst2cfg`: This transforms legacy `menu.lst` into `grub.cfg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-mkfont`: This makes GRUB font files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-mkimage`: This makes a bootable image of GRUB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-mklayout`: This generates a GRUB keyboard layout file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-mkpasswd-pbkdf2`: This generates a hashed password for GRUB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-mkrelpath`: This makes a system path relative to its root'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-mkrescue`: This makes a GRUB rescue image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-mkstandalone`: This makes a memdisk-based GRUB image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-script-check`: This checks `grub.cfg` for syntax errors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-bios-setup`: This sets up a device to boot using GRUB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-install`: This installs GRUB to a device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-mkconfig`: This generates a GRUB configuration file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-mknetdir`: This prepares a GRUB netboot directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-ofpathname`: This finds an OpenBOOT path for a device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-probe`: This probes device information for GRUB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-reboot`: This sets the default boot entry for GRUB, for the next boot
    only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-set-default`: This sets the saved default boot entry for GRUB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grub2-sparc64-setup`: This sets up a device to boot using GRUB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about GRUB 2, the official web page is [http://www.gnu.org/software/grub/grub.html](http://www.gnu.org/software/grub/grub.html).
  prefs: []
  type: TYPE_NORMAL
