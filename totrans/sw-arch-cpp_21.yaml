- en: Assessments
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why should you care about software architecture?
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Architecture allows you to achieve and maintain the requisite qualities of software.
    Being mindful and caring about it prevents a project from having accidental architecture,
    thereby losing quality, and also prevents software decay.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should the architect be the ultimate decision maker in an Agile team?
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. Agile is about empowering the whole team. An architect brings their experience
    and knowledge to the table, but if a decision has to be accepted by the whole
    team, the team should own it, not just the architect. Considering the needs of
    stakeholders is also of great importance here.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the **Single Responsibility Principle** (**SRP**) relate to cohesion?
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Following the SRP leads to better cohesion. If a component starts having multiple
    responsibilities, usually it becomes less cohesive. In such instances, it's best
    to just refactor it into multiple components, each having a single responsibility.
    This way, we increase cohesiveness, so the code becomes easier to understand,
    develop, and maintain.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During what phases of a project's lifetime can benefit be derived from having
    an architect?
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An architect can bring value to a project from its inception until the time
    it goes into maintenance. The most value can be achieved during the early phases
    of the project's development, as this is where key decisions about how it should
    look will be taken. However, this doesn't mean that architects cannot be valuable
    during development. They can keep the project on the right course and on track.
    By aiding decisions and overseeing the project, they ensure that the code doesn't
    end up with accidental architecture and is not subject to software decay.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the benefit of following the SRP?
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code that follows the SRP is easier to understand and maintain. This also means
    that it has fewer bugs.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 2
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the traits of a RESTful service?
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obviously, the use of REST APIs.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statelessness – Each request contains all the data required for its processing.
    Remember, this doesn't mean that RESTful services cannot use databases, quite
    the opposite.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using cookies instead of keeping sessions.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What toolkit can you use to assist you in creating a resilient distributed architecture?
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Simian Army by Netflix.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should you use centralized storage for your microservices? Why/why not?
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microservices should use decentralized storage. Each microservice should choose
    the storage type that suits it best, as this leads to increased efficiency and
    scalability.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When should you write a stateful service instead of a stateless one?
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only when it's not reasonable to have a stateless one and you won't need to
    scale. For instance, when the client and service have to keep their state in sync
    or when the state to send would be enormous.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does a broker differ from a mediator?
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A mediator "mediates" between services, so it needs to know how to process each
    request. A broker only knows where to send each request, so it's a lightweight
    component. It can be used to create a publisher-subscriber (pub-sub) architecture.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the difference between an N-tier and an N-layer architecture?
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Layers are logical and specify how you organize your code. Tiers are physical
    and specify how you run your code. Each tier has to be separated by others, either
    by being run in a different process, or even on a different machine.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you approach replacing a monolith with a microservice-based architecture?
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Incrementally. Carve small microservices out of the monolith. You can use the
    strangler pattern described in *Chapter 4, Architectural and System Design*, to
    help you with this.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 3
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are quality attributes?
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Traits, or qualities, that a system may have. Often called "ilities," as many
    of them have this postfix in their names, for instance, portability.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What sources should you use when gathering requirements?
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The context of your system, existing documentation, and the system's stakeholders.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you be able to tell whether a requirement is architecturally significant?
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A****rchitecturally significant requirements** (**A****SRs**) often require
    a separate software component, impact a large part of the system, are hard to
    achieve, and/or force you to make trade-offs.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you document graphically the functional requirements various parties
    may have regarding your system?
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare a use case diagram.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When is development view documentation useful?
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In cases where you're developing a large system with many modules and need to
    communicate global constraints and common design choices to all the software teams.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you automatically check whether your code's API documentation is
    out of date?
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Doxygen has built-in checks, like the one that warns you about mismatches between
    the function signatures and their parameters in comments.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you show on a diagram that a given operation is handled by different
    components of the system?
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use one of the UML interaction diagrams for this purpose. Sequence diagrams
    are a good choice, although communication diagrams can be fine in certain scenarios,
    too.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 4
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is event sourcing?
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is an architectural pattern that relies on keeping track of events that
    change the state of the system instead of keeping track of the state *per se*.
    It brings benefits such as lower latency, free audit logs, and debugability.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the practical consequences of the CAP theorem?
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As network partitions happen, if you want a distributed system, you'll need
    to choose between consistency and availability. In cases of partitions, you can
    either return stale data, an error, or risk timeouts.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What can you use Netflix's Chaos Monkey for?
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It can help you prepare for unexpected downtime of your services.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where can caching be applied?
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either on your client's side, in front of web servers, databases, or applications,
    or on a host near your potential client, depending on your needs.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you prevent your app from going down when an entire data center does?
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using geodes.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why should you use an API gateway?
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To simplify client code, as it doesn't need to hardcode the addresses of your
    service instances.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can Envoy help you to achieve various architectural goals?
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It aids your system's fault tolerance by providing backpressure, circuit breaking,
    automatic retries, and outlier detection.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It aids deployability by allowing canary releases and blue-green deployments.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also offers load balancing, tracing, monitoring, and metrics.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 5
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How should you ensure each file of our code that's open, will be closed when
    no longer in use?
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using the RAII idiom; for instance, by using `std::unique_ptr`, which will
    close it in its destructor.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When should you use "naked" pointers in C++ code?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only to pass optional (nullable) references.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a deduction guide?
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A way of telling the compiler what parameters it should deduce for a template.
    They can be implicit or user-defined.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When should you use `std::optional`, and when should you use `gsl::not_null`?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The former is for cases where we want to pass the contained value around. The
    latter just passes the pointer to it. Also, the former can be empty, while the
    latter will always point to an object.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do range algorithms differ from views?
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Algorithms are eager, while views are lazy. Algorithms also allow the use of
    projections.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you constrain your type more than just by specifying the concept
    name when you're defining a function?
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using a `requires` clause.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does `import X` differ from `import <X>`?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The latter allows macros from the imported `X` header to be visible.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 6
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the rules of three, five, and zero?
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Best practices to follow for writing types with unsurprising semantics and fewer
    bugs.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When should you use niebloids versus hidden friends?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Niebloids "disable" ADL, while hidden friends rely on it to be found. The former
    can therefore speed up compilation (fewer overloads to consider), while the latter
    can help you implement customization points.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can an `Array` interface be improved to be more production-ready?
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`begin`, `end`, and their constant and reverse equivalents should be added
    so it can be used like a proper container. Traits such as `value_type`, `pointer`,
    and `iterator` can be useful to reuse it in generic code. Sprinkling the members
    with `constexpr` and `noexcept` could aid safety and performance. The `const`
    overload for `operator[]` is also missing.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are fold expressions?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expressions that fold, or reduce, a parameter pack over a binary functor. In
    other words, statements that apply a given operation to all the passed variadic
    template arguments so that a single value (or `void`) is produced.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When shouldn't you use static polymorphism?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you need to provide the consumers of your code with a way to add more types
    at runtime.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can we save on one more allocation in the winking out example?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By avoiding the resizing of the vector when adding elements.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 7
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What's the difference between installing and exporting your targets in CMake?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exporting means the targets will be available for other projects that try to
    find our package, even if our code is not installed. CMake's package registry
    can be used to store data about locations of the exported targets. The binaries
    never leave the build directory. Installation requires the targets to be copied
    somewhere and, if it's not a system directory, setting up paths to the config
    files or the targets themselves.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you make your template code compile faster?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the Rule of Chiel.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you use multiple compilers with Conan?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Conan profiles.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What should you do if you'd like to compile your Conan dependencies with the
    pre-C++11 GCC ABI?
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `compiler.libcxx` to `libstdc++` instead of `libstdc++11`.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you ensure that you force a specific C++ standard in CMake?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By calling `set_target_properties(our_target PROPERTIES CXX_STANDARD our_required_cxx_standard
    CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)`.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you build documentation in CMake and ship it along with your RPM
    package?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a target to generate the documentation as described in [Chapter 3](https://cdp.packtpub.com/hands_on_software_architecture_with_c__/wp-admin/post.php?post=26&action=edit),
    *Functional and Nonfunctional Requirements*, install it to `CMAKE_INSTALL_DOCDIR`,
    and then make sure the path is not specified in the `CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST`
    variable.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 8
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the base layer of the testing pyramid?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unit tests.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What kinds of non-functional tests are there?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performance, endurance, security, availability, integrity, and usability.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the name of a famous method for root cause analysis?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5 whys
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it possible to test compile-time code in C++?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, for example, using `static_assert`.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What should you use when writing unit tests for code with external dependencies?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test doubles such as mocks and fakes.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the role of unit tests in Continuous Integration/Continuous Deployment?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They are the basis of a gating mechanism and act as an early warning feature.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name some tools that allow the testing of infrastructure code.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Serverspec, Testinfra, Goss.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it a good idea to access the class's private attributes and methods in a
    unit test?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should design classes in such a way that you never have to access their
    private attributes directly.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 9
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In what ways does Continuous Integration save time during development?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It allows you to catch bugs earlier and fix them before they enter production.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you need separate tools to implement Continuous Integration and Continuous
    Deployment?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The pipelines are usually written using a single tool; multiple tools are used
    for actual testing and deployment.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When does it make sense to perform a code review in a meeting?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When an asynchronous code review is taking too long.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What tools can you use to assess the quality of your code during Continuous
    Integration?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tests, static analysis.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who participates in specifying BDD scenarios?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Developers, QA, the business.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When should you consider using immutable infrastructure? When should you rule
    it out?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is best used with stateless services or services that can outsource storage
    using a database or a network storage. It is not suitable for stateful services.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How would you characterize the differences between Ansible, Packer, and Terraform?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ansible is designed for the configuration management of existing VMs, Packer
    is for building cloud VM images, and Terraform is for building the cloud infrastructure
    (such as networks, VMs, and load balancers).
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 10
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is security important in modern systems?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modern systems are typically connected to a network and are therefore potentially
    vulnerable to external attacks.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are some of the challenges associated with concurrency?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code is harder to design and to debug. Update problems may arise.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the C++ core guidelines?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Best practices that document how to build C++ systems.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the difference between secure coding and defensive coding?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Secure coding offers robustness to end users, whereas defensive coding offers
    robustness to interface consumers.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you check whether your software contains known vulnerabilities?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using a CVE database or an automated scanner such as OWASP Dependency-Check
    or Snyk.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the difference between static and dynamic analysis?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Static analysis is performed on source code without executing it. Dynamic analysis
    requires execution.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the difference between static and dynamic linking?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With static linking, the executable contains all the code necessary to run the
    application. With dynamic linking, some parts of the code (the dynamic libraries)
    are shared between different executables.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you use the compiler to fix security problems?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modern compilers include sanitizers that check for certain flaws.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you implement security awareness in your Continuous Integration pipeline?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using automated tools that scan for vulnerabilities and perform all kinds
    of static and dynamic analysis.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 11
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What can we learn from the performance results from this chapter's microbenchmarks?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fact that a binary search is a lot faster than a linear search, even if
    the number of elements to check is not that high. This means that computational
    complexity (aka the Big O) matters. Probably on your machine, even the longest
    search on the biggest dataset for a binary search was still faster than the shortest
    one for a linear search!
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on your cache sizes, you may have also noticed how increasing the
    required memory caused slowdowns when the data could no longer fit in specific
    cache levels.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is how we traverse a multi-dimensional array important for performance? Why/why
    not?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's crucial, as we may access the data linearly in memory, which the CPU prefetcher
    would like and reward us with better performance, or jump through the memory,
    hindering thereby our performance.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our coroutines example, why can't we create our thread pool inside the `do_routine_work`
    function?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because of lifetime issues.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can we rework our coroutine example so that it uses a generator instead
    of just tasks?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The body of the generator would need to `co_yield`. Also, the threads from our
    pool would need to synchronize, probably using an atomic.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 12
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the properties of a service in service-oriented architecture?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is a representation of business activity with a defined outcome.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is self-contained.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is opaque to its users.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may be composed of other services
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are some of the benefits of web services?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They are easy to debug using common tools, they work well with firewalls, and
    they may take advantage of existing infrastructure, such as load balancing, caching,
    and CDNs.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When are microservices not a good choice?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the cost of RPC and redundancy outweighs the benefits.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are some of the use cases of message queues?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IPC, transactional services, IoT.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are some of the benefits of choosing JSON over XML?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JSON requires lower overhead, is gaining in popularity over XML, and should
    be easier to read by a human.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does REST build on web standards?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It uses HTTP verbs and URLs as building blocks.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do cloud platforms differ from traditional hosting?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloud platforms offer easy-to-use APIs, meaning the resources can be programmed.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 13
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do microservices help you to use the system's resources better?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is easier to scale just the resources that are lacking instead of entire
    systems.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can microservices and monoliths coexist (in an evolving system)?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: New features may be developed as microservices, while some features may be split
    and outsourced from the monolith.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which types of teams benefit the most from microservices?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cross-functional autonomous teams following DevOps principles.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is it necessary to have a mature DevOps approach when introducing microservices?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing and deploying lots of microservices is almost impossible to be effected
    manually by separate teams.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a unified logging layer?
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is a configurable facility for collecting, processing, and storing logs.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do logging and tracing differ?
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Logging is usually human-readable and focused on operations, whereas tracing
    is usually machine-readable and focused on debugging.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why might REST not be the best choice for connecting microservices?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It may provide bigger overhead compared to gRPC, for example.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the deployment strategies for microservices? What are the benefits
    of each of them?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Single service per host – easier to tweak the machines to the workload.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple services per host – better utilization of resources.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 14
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do application containers differ from operating system containers?
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Application containers are designed to host a single process, while operating
    system containers usually run all the processes typically available in a Unix
    system.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are some early examples of sandboxing environments in Unix systems?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: chroot, BSD Jails, Solaris Zones.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why are containers a good fit for microservices?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They offer a unified interface to run applications regardless of the underlying
    technology.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the main differences between containers and virtual machines?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Containers are more lightweight as they don't require a hypervisor, a copy of
    an operating system kernel, or auxiliary processes, such as an init system or
    syslog.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When are application containers a bad choice?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you want to put a multi-process application in a single container.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name some tools for building multi-platform container images.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: manifest-tool, docker buildx.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides Docker, what are some other container runtimes?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Podman, containerd, CRI-O.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are some popular orchestrators?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kubernetes, Docker Swarm, Nomad.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 15
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What's the difference between running your applications in the cloud and making
    them cloud-native?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloud-native design encompasses modern technologies such as containers and serverless
    that break the dependency on virtual machines.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you run cloud-native applications on-premises?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, it's possible with solutions such as OpenStack, for example.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the minimum **highly available** (**HA**) cluster size for Kubernetes?
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The minimum HA cluster requires three nodes in the control plane and three worker
    nodes.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which Kubernetes object represents a microservice that allows network connections?
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Service.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is logging insufficient in distributed systems?
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gathering logs and looking for correlations between them in distributed systems
    is problematic. Distributed tracing is better suited for certain use cases.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does a service mesh help with building secure systems?
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A service mesh abstracts connectivity between different systems, which allows
    encryption and auditing to be applied.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does GitOps increase productivity?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It uses a familiar tool, Git, to handle the CI/CD without the need to write
    dedicated pipelines.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用一个熟悉的工具Git来处理CI/CD，而无需编写专门的流水线。
- en: What's the standard CNCF project for monitoring?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控的标准CNCF项目是什么？
- en: Prometheus.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prometheus。
