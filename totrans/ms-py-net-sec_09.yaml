- en: Connecting with the Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the Metasploit framework as a tool to exploit vulnerabilities,
    and how to use it programmatically from Python with the `Python-msfprc` and `pyMetasploit`
    modules. These modules help us to interact between Python and Metasploit's msgrpc
    to automate the execution of the modules and exploits that can be found in the
    Metasploit framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Metasploit framework as a tool to exploit vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfconsole` as the commands console interface to interact with the Metasploit
    Framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting Metasploit to the `python-msfrpc` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting Metasploit to the `pyMetasploit` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter9` folder: [https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)[.](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to install Python distribution on your local machine with at least
    4 GB memory. In this chapter, we will use a virtual machine with which some tests
    related to port analysis and vulnerability-detection will be carried out. It can
    be downloaded from the sourceforge page: [https://sourceforge.net/projects/Metasploitable/files/Metasploitable2](https://sourceforge.net/projects/metasploitable/files/Metasploitable2).
  prefs: []
  type: TYPE_NORMAL
- en: 'To log in, you must use msfadmin as both the username and the password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fd4a5855-2f1e-4aee-b971-2e4dfdcc22e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Metasploitable is a virtual machine created by the Metasploit group, which consists
    of an image of an Ubuntu 8.04 system in which there are, deliberately, services
    with insecure configurations and vulnerabilities, that can be exploited using
    Metasploit Framework. This virutal machine was created with the aim of practice
    with several of the options offered by Metasploit, being of great help to execute
    tests in a controlled environment.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Metasploit framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we review Metasploit as one of today's most-used tools, which
    allows to make attacks and to exploit vulnerabilities of servers with the objective
    of carrying out pentesting tests.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to exploiting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The exploitation phase is the process of gaining control over a system. This
    process can take many different forms, but the ultimate goal is always the same:
    to obtain administrative-level access to the attacked computer.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation is the phase of the most free execution, since each system is different
    and unique. Depending on the scenario, attack vectors vary from one target to
    another, since different operating systems, different services, and different
    processes require different types of attacks. Skilled attackers must understand
    the nuances of each system they intend to exploit and, eventually, they will be
    able to perform their own exploits.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit is a framework for performing real attacks and exploiting vulnerabilities.
    Basically, we need to start the server and connect to the Metasploit console.
    For each command we need to execute, we create a console session to execute the
    exploit.
  prefs: []
  type: TYPE_NORMAL
- en: The Metasploit framework allows external applications to use the modules and
    exploits integrated in the tool itself. To do this, it offers a plugin service
    that we can build on the machine where we are executing Metasploit, and through
    an API we can execute the different modules that offers.To do this, it is necessary
    to know the Metasploit Framework API (Metasploit Remote API), which is available
    at [https://community.rapid7.com/docs/DOC-1516](https://community.rapid7.com/docs/DOC-1516).
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main components of the Metasploit architecture are libraries that consist
    of Rex, framework-core, and framework-base. The other components of the architecture
    are interfaces, custom plugins, protocol tools, modules, and security tools. Modules
    included are exploits, payloads, encoders, NOPS, and auxiliary.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this diagram, we can see the main modules and Metasploit architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6bb099b4-0910-4d68-b08b-c9b60fdc3711.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The main modules of the Metasploit architecture are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rex**: The basic library for most tasks that the framework will execute.
    It is responsible for handling things such as connections to websites (for example,
    when we search for sensitive files in a site), Sockets (which are responsible
    for making a connection from our machine to an SSH server, for example), and a
    lot of similar utilities related to SSL and Base64.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MSF :: Core:** It defines the functioning of the framework in general (how
    the modules, exploits, and payloads will work)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MSF :: Base:** Works in a similar way to MSF :: Core,the main difference
    is that its more friendly and simplified for the developer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins**: Tools that extend the functionality of the framework, for example,
    they allow us to integrate with third-party tools such as Sqlmap, OpenVas, and
    Nexpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools:** Several tools that are usually useful (for example, "list_interfaces"
    shows us the information of network interfaces, and "virustotal" checks whether
    any file is infected through the virustotal.com database).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interfaces:** All interfaces where we can use Metasploit. A console version,
    a web version, a **GUI** version (**Graphical User Interface**), and CLI, a version
    of metasploit console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modules**: A folder that contains all the exploits, payloads, encoders, auxiliaries,
    nops, and post.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploits:** A program that exploits one or several vulnerabilities in a particular
    software; it is often used to gain access to a system and have a level of control
    over it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payloads:** A program (or "malicious" code) that accompanies an exploit to
    perform specific functions once the exploit has been successful. The choice of
    a good payload is a very important decision when it comes to taking advantage
    of and maintaining the level of access obtained in a system. In many systems,
    there are firewalls, Antivirus, and intrusion-detection systems that can hinder
    the activity of some payloads. For this reason, encoders are often used to try
    to evade any AV or Firewall.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encoders:** Provides algorithms to encode and obfuscate the payloads that
    we will use after the exploit has been successful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aux:** Allows interaction with tools such as vulnerability scanners and sniffers.
    In order to obtain the necessary information about the objective to determine
    possible vulnerabilities that may affect it, this type of tool is useful for establishing
    an attack strategy on an objective system, or in the case of a security officer,
    define defensive measures that allow us to mitigate threats on a vulnerable system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nops:** An assembly-language instruction that does not do anything apart
    from increasing the counter of a program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to the work modules described here, Metasploit Framework has four
    different user interfaces: msfconsole (Metasploit Framework console), msfcli (Metasploit
    Framework client), msfgui (Metasploit Framework graphic interface), and msfweb
    (server and web interface Metasploit Framework).'
  prefs: []
  type: TYPE_NORMAL
- en: The next section focuses on the **Metasploit Framework console interface**,
    although the use of any of the other interfaces can provide the same results.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the Metasploit framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will review `msfconsole` for interacting with the Metasploit
    framework, showing the main commands for obtaining exploits and payload modules.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to msfconsole
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Msfconsole` is the tool we can use to interact with modules and execute exploits.
    This tool is installed by default in the Kali linux distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/75680b5c-eee1-4119-a6fa-8b33019f2fe8.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to the Metasploit exploit module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The exploits, as explained before in the section "*Introducing the Metasploit
    framework*", are codes that allow an attacker to take advantage of a vulnerable
    system and compromise its security, this can be a vulnerability in the operating
    system or some software installed in it.
  prefs: []
  type: TYPE_NORMAL
- en: The Metasploit `exploit` module is the basic module in Metasploit used to encapsulate
    an exploit for which users can target many platforms with a single exploit. This
    module comes with simplified meta-information fields.
  prefs: []
  type: TYPE_NORMAL
- en: In the Metasploit Framework, there is a large number of exploits that already
    come by default and that can be used to carry out the penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see Metasploit''s exploits, you can use the `show exploits` command once
    you are working on that tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d1c475e6-f4b2-4c5e-8981-c9f99820ac7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The five steps to exploit a system in the Metasploit framework are:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure an active exploit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the exploit options
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a target
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the payload
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the exploit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Introduction to the Metasploit payload module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Payloads` are codes that run in the system after it has been compromised and
    are used mostly to establish a connection between the attacker''s machine and
    the victim''s machine. Payloads are mainly used to execute commands that give
    access to the remote machine.'
  prefs: []
  type: TYPE_NORMAL
- en: In the Metasploit Framework, there is a set of payloads that can be used and
    loaded in an exploit or `auxiliary` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see what''s available, use the `show payloads` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3c5c2a69-00f7-4121-a894-835e30f8e332.png)'
  prefs: []
  type: TYPE_IMG
- en: Among those available in the Metasploit environment are **generic/shell_bind_tcp**
    and **generic/shell_reverse_tcp**, both of which establish a connection with the
    victim's machine by providing the attacker with a shell, which provides a user
    interface to access the operating system resources in the form of a console. The
    only difference between them is that in the first case the connection is made
    from the machine of the attacker to the machine of the victim, while in the second,
    the connection is established from the machine of the victim, which requires that
    the attacker's machine have a program that is listening to detect that connection.
  prefs: []
  type: TYPE_NORMAL
- en: '**Reverse shells** are most useful whenwe detect there is a firewall or IDS
    in the target machine''s that is blocking incoming connections. For more information
    about when to use a reverse shell, check out [https://github.com/rapid7/Metasploit-framework/wiki/How-to-use-a-reverse-shell-in-Metasploit](https://github.com/rapid7/metasploit-framework/wiki/How-to-use-a-reverse-shell-in-Metasploit).'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we can find other payloads, such as **meterpreter/bind_tcp** and
    **meterpreter/reverse_tcp**, which provide a meterpreter session; both differ
    in the same way as the payloads referred to the shell, that is, they are distinguished
    by the way in which the connection is established.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to msgrpc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to use the `msgrpc` plugin to start an instance of the server.
    To do this, you can load the module from `msfconsole` or directly using the `msfrpcd`
    command. First, you’ll need to load `msfconsole` and start the `msgrpc` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this way, we load the process in order to attend to requests from another
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With this command, we can execute the process that connects with msfconsole
    establishing as parameters `username` (`-U`), `password` (`-P`) and `port` (`-p`)
    where is listening to the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this way, Metasploit's RPC interface is listening on port 55553\. We can
    proceed to interact from the Python script with modules such as `python-msfrpc`
    and `pyMetasploit`. Interacting with MSGRPC is almost similar to interacting with
    msfconsole.
  prefs: []
  type: TYPE_NORMAL
- en: The server was designed with the intention of running as a daemon, which allows
    several users to authenticate and execute specific Metasploit framework commands.
    In the preceding example, we are starting our `msfrpcd` server with `msf` as the
    name and password as the password, on port 55553.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the Metasploit framework and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we review Metasploit and how we can integrate this framework
    with Python. The programming language used to develop modules in Metasploit is
    Ruby, but with Python it is also possible to take advantage of the benefits that
    this framework has thanks to the use of libraries such as `python-msfrpc`.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to MessagePack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before beginning to explain the operation of this module, it is convenient to
    understand the MessagePack format, which is used by the MSGRPC interface for the
    exchange of information between the client and server.
  prefs: []
  type: TYPE_NORMAL
- en: MessagePack is a specialized format for the serialization of information, which
    allows messages to be more compact in order to transmit information quickly between
    different machines. It works similarly to JSON; however, since the data is serialized
    using the MessagePack format, the number of bytes in the message is drastically
    reduced.
  prefs: []
  type: TYPE_NORMAL
- en: To install the `msgpack` library in python, just download the package from the
    MessagePack website and run the `setup.py` script with the install argument. We
    can also perform the installation with the `pip install msgpack-python` command.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about this format, you can query the official website: [http://msgpack.org](http://msgpack.org)
  prefs: []
  type: TYPE_NORMAL
- en: 'In this screenshot, we can see the API and languages that supports this tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2f56099e-531a-4621-8398-a2f110cb2dc6.png)'
  prefs: []
  type: TYPE_IMG
- en: The Metasploit framework allows external applications to employ the modules
    and exploits through the use of the MSGRPC plugin. This plugin raises an instance
    of an RPC server on the local machine and in this way, it is possible to take
    advantage of all the features offered by the Metasploit framework from external
    routines at any point in the network. The operation of this server is based on
    the serialization of messages using the MessagePack format, with which it is necessary
    to use the python implementation of this format, which is achieved using the `msgpack`
    library.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the `python-msfrpc` library is responsible for encapsulating
    all the details related to the exchange of packages with the MSGRPC server and
    a client that uses msgpack. In this way, it is possible to perform an interaction
    between any python script and the msgrpc interface.
  prefs: []
  type: TYPE_NORMAL
- en: Installing python-msfrpc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can install the `python-msfrpc` library from the [github.com/SpiderLabs/msfrpc](http://github.com/SpiderLabs/msfrpc)
    repository and execute the `setup.py` script with the install option: [https://github.com/SpiderLabs/msfrpc/tree/master/python-msfrpc](https://github.com/SpiderLabs/msfrpc/tree/master/python-msfrpc).
  prefs: []
  type: TYPE_NORMAL
- en: This module is designed to allow interaction with Metasploit msgrpc plugin to
    allow the execution of Metasploit commands and scripts remotely.
  prefs: []
  type: TYPE_NORMAL
- en: To verify that both libraries have been installed correctly, use the python
    interpreter to import the main modules of each and verify that there is no error.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can verify the installation executing these commands in the python interpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/478bdb6a-75e0-46a8-853e-f1df4ec12f62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An alternative to installing msfrpc is to get the latest version of the `msfrpc
    Python` module from the SpiderLabs GitHub repository and use the `setup.py` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the service is running and waiting for a connection from a client,
    from a python script we can connect directly using the `msfrpc` library. Our next
    step is to write our code to **connect to Metasploit**, and authenticate with
    the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To interact with the Metasploit server, it is necessary to know the API that
    allows to control remotely an instance of the Metasploit framework, also known
    as the Metasploit remote API. This specification contains the functions necessary
    to interact with the MSGRPC server from any client and describes the functionalities
    that users of the community version of the framework can implement.
  prefs: []
  type: TYPE_NORMAL
- en: The official guide is available at [https://Metasploit.help.rapid7.com/docs/rpc-api](https://metasploit.help.rapid7.com/docs/rpc-api) and [https://Metasploit.help.rapid7.com/docs/sample-usage-of-the-rpc-api](https://metasploit.help.rapid7.com/docs/sample-usage-of-the-rpc-api).
  prefs: []
  type: TYPE_NORMAL
- en: The following script shows a practical example of how you can interact with
    the server once we it has been authenticated. In the host parameter, you can use
    localhost, or `127.0.0.1` if the Metasploit instance is running in your local
    machine, or you can specify a remote address. As can be seen, the use of the `call`
    function allows us to indicate the function to be executed and its corresponding
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the `msfrpc_connect.py` file in the msfrpc
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the previous script, several of the functions available in the API are used,
    which allow us to establish configuration values ​​and obtain exploits and `auxiliary`
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to interact with the framework in the same way that is usually
    done with the msfconsole utility, it is only necessary to create an instance of
    a console with the `console.create` function and then use the console identifier
    returned by that function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new console, add the following code to the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Executing API calls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `call` method allows us to call API elements from within Metasploit that
    are surfaced through the msgrpc interface. For the first example, we will request
    the list of all exploits form the server. To do this, we call the  `module.exploits`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Get a list of the exploits from the server`'
  prefs: []
  type: TYPE_NORMAL
- en: '`mod = client.call(''module.exploits'')`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to find all of the payloads that were compatible, we could call
    the `module.compatible_payloads` method to find the payloads compatible with our
     exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Get the list of compatible payloads for the first option`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ret = client.call(''module.compatible_payloads'',[mod[''modules''][0]])`'
  prefs: []
  type: TYPE_NORMAL
- en: If this example, we are obtaining this information and getting the list of compatible
    payloads for the first option.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the`msfrpc_get_exploits.py` file in the msfrpc
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We also have commands to start a session in the Metasploit console. To do this,
    we use the call function passing the `console.create` command as a parameter and
    then we can execute commands on that console. The command can be read from the
    console or from a file. In this example, we are obtaining commands from a file
    and for each command we execute it in the console created.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the` msfrpc_create_console.py` file in the msfrpc
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we need a method for checking whether the console is ready for more information
    or whether there are errors being printed back to us. We achieve this using our
    `processData` method. We could define a function that will read the output of
    the executed command and show the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Exploiting the Tomcat service with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the **Metasploitable** virtual machine environment is installed an apache
    tomcat service, which is vulnerable to several attacks by remote attackers. A
    first attack can be the brute-force one, starting from a list of words, to try
    to capture the access credentials to the Tomcat Application Manager (the Tomcat
    Application Manager allows us to see and manage the applications installed in
    the server). If the execution of this module is successful, it will provide a
    valid username and password to access the server.
  prefs: []
  type: TYPE_NORMAL
- en: In the Metasploit Framework, there is an `auxiliary` module named `tomcat_mgr_login`,
    which provides the attacker, if its execution is successful, a username and password
    to access Tomcat Manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `info` command, we can see the options needed to execute the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/75336c52-cfbe-460a-bda4-8b0feac20533.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this screenshot, we can see the parameters we need to set to execute the
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/acf10566-11b0-48e4-b3f2-17c66da734e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once `auxiliary/scanner/http/ tomcat_mgr_login`module has been selected, the
    configuration of the parameters is established necessary according to the depth
    of the analysis that you want to carry out: for example, `STOP_ON_SUCCESS = true`,
    `RHOSTS = 192.168.100.2`, `RPORT = 8180`, `USER_FILE` and `USERPASS_FILE`; and
    then the execution is carried out.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After execution, **the result is that the username is tomcat and the password
    is also tomcat**, which again shows the vulnerability: weak username and password.
    With this result, you can access the server and upload files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a65241a-5e9b-4b5f-9f2d-5cb30831aab1.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the tomcat_mgr_deploy exploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another attack that can be victimized by Tomcat is the exploit called Apache
    Tomcat Manager Application Deployer Authenticated Code Execution. This exploit
    is associated with a vulnerability present in Tomcat, identified as CVE-2009-3843
    and with a high degree of severity (10). This vulnerability allows the execution
    of a payload on the server, which was previously loaded into it as a .war file.
    For the execution of said exploit, it is necessary to have obtained a user and
    their password, by means of the `auxiliary` module or an alternative route. This
    exploit is located in the `multi/http/tomcat_mgr_deploy` path.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the `msf>` `command line`, enter: `use exploit/multi/http/tomcat_mgr_deploy`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the exploit has been loaded, you can type `show payloads` and `show options`
    to configure the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f58f0ef7-5cf9-47b8-a8b0-192fe0f44c01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With **show options**, we can see the required parameters to execute the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/807d2b1d-38d9-4190-b6b2-05a56953a20b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To use it, execute the `exploit/multi/http/tomcat_mgr_deploy` command. the
    configuration of the necessary parameters is established: `RPORT = 8180, RHOST
    = 192.168.100.2, USERNAME = tomcat, PASSWORD = tomcat`, the payload `java/meterpreter/bind_tcp` is
    selected, which establishes a meterpreter session and the exploit is executed.'
  prefs: []
  type: TYPE_NORMAL
- en: After the successful execution of the exploit, a connection is established through
    the `meterpreter` command interpreter, which provides a set of useful options
    to perform actions to scale privileges within the attacked system.
  prefs: []
  type: TYPE_NORMAL
- en: Once initiated, the shell will call back its master and enable them to enter
    commands with whatever privileges the exploited service had. We'll use a Java
    Payload to achieve just in MSF.
  prefs: []
  type: TYPE_NORMAL
- en: In the next script, we are automating the process, setting the parameters and
    payload, and executing the module with the exploit option.
  prefs: []
  type: TYPE_NORMAL
- en: The `RHOST` and `RPORT` parameters can be given as parameters at the command
    line with the `optparse` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the `exploit_tomcat.py` file in the `msfrpc`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Connecting Metasploit with pyMetasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we review Metasploit and how we can integrate this framework
    with Python. The programming language used to develop modules in Metasploit is
    ruby, however with Python it is also possible to take advantage of the benefits
    that this framework has thanks to the use of libraries such as **pyMetasploit**.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to PyMetasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyMetasploit is a `msfrpc` library for Python and allowus us to automate the
    exploitation tasks with Python. It is meant to interact with the msfrpcd daemon
    that comes with the latest versions of Metasploit. Therefore, before you can begin
    to use this library, you'll need to initialize msfrpcd and optionally (highly
    recommended) PostgreSQL: [https://github.com/allfro/pyMetasploit](https://github.com/allfro/pymetasploit).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install the module from the source code with the `setup.py` script install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have installed it , we can import the module in our scripts and establish
    a connection with the MsfRpcClient class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Interacting with the Metasploit framework from python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **MsfRpcClient** class provides the core functionality to navigate through
    the Metasploit framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like the Metasploit framework, MsfRpcClient is segmented into different management
    modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**auth:** Manages the authentication of clients for the msfrpcd daemon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**consoles:** Manages interaction with consoles/shells created by the Metasploit
    modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**core:** Manages the Metasploit framework core.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**db:** Manages the backend database connectivity for msfrpcd.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**modules:** Manages the interaction and configuration of Metasploit modules
    (such as exploits and auxiliaries).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**plugins:** Manages the plugins associated with the Metasploit core.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sessions:** Manages the interaction with the Metasploit meterpreter sessions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Just like the Metasploit console, you can retrieve a list of all the modules
    encoders, payloads, and exploits that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will list the exploit modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`exploits = client.modules.exploits`'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can activate one of these exploits with the `use` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scan = client.modules.use(''exploits'', ''multi/http/tomcat_mgr_deploy'')`'
  prefs: []
  type: TYPE_NORMAL
- en: In a similar way that we have done with `python-msfprc`, with this module, we
    can also connect to the console and run the commands as we do in the msfconsole.
    We can do this in two ways. The first one is using the scan object after activating
    the exploit. The second one is using a console object to execute the command in
    the same way that we do when we interact with msfconsole.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the `exploit_tomcat_maanger.py` file in
    the `pyMetasploit` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the objectives of this chapter has been to learn about the Metasploit
    framework as a tool to exploit vulnerabilities and how can we interact programmatically
    in Python with the Metasploit console. With modules such as Python-msfrpc and
    pyMetasploit, it is possible to automate the execution of the modules and exploits
    that we can find in the Metasploit framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next [chapter](0fb36b4d-c490-4762-8d1e-574401aacfc8.xhtml), we will explore
    vulnerabilities that we can find in the Metasploitable virtual machine, and how
    connect to with vulnerability scanners, such as `nessus` and `nexpose`, from Python
    modules to extract these vulnerabilities .
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the interface for interacting with modules and executing exploits in
    Metasploit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the main steps to exploit a system with the Metasploit framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the interface that uses the Metasploit framework for the
    exchange of information between the clients and the Metasploit server instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between generic/shell_bind_tcp and generic/shell_reverse_tcp?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which is the command we can execute to connect with msfconsole?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the function we need to use to interact with the framework in the same
    way that we can do with the msfconsole utility?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the remote-access interface that uses the Metasploit framework
    for the exchange of information between clients and the Metasploit server instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How we can obtain the list of all exploits form the Metasploit server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which are the modules in the Metasploit Framework that obtain access to the
    application manager in tomcat and exploit the apache tomcat server to get a session
    meterpreter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which is the the payload name that establishes a meterpreter session when the
    exploit is executed in tomcat server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In these links, you will find more information about tools such as kali linux
    and the Metasploit framework, and the official documentation for the Metasploitable
    virtual machine that we used for the scripts'' execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.kali.org/general-use/starting-Metasploit-framework-in-kali](https://docs.kali.org/general-use/starting-Metasploit-framework-in-kali)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/rapid7/Metasploit-framework](https://github.com/rapid7/Metasploit-framework)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://information.rapid7.com/Metasploit-framework.html](https://information.rapid7.com/Metasploit-framework.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automatic Vulnerability Exploiter: This tool uses the subprocess module to
    interact with the Metasploit framework console and automates some exploits you
    can find with msfconsole: [https://github.com/anilbaranyelken/arpag](https://github.com/anilbaranyelken/arpag).'
  prefs: []
  type: TYPE_NORMAL
