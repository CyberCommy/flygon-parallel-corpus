- en: ASSESSMENTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chapter 1: Understanding Kubernetes and Helm'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An application is `monolithic` if it contains all necessary logic and features
    in a single application. Monolithic applications can be broken up into multiple
    different applications, referred to as **microservices**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kubernetes is a container orchestration tool. To give a few examples, it solves
    problems around workload scheduling, availability, and scalability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`create`, `describe`, `edit`, `delete`, and `apply`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are many different types of resources a user must understand in order
    to deploy an application. It is also challenging to maintain synchronized local
    and live states, manage application life cycle, and maintain boilerplate YAML
    resource files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Helm includes four life cycle commands that provide users with the ability to
    easily manage Kubernetes applications. Users apply these commands to interact
    with Helm charts, which is a packaging of the Kubernetes resources required to
    deploy an application. Helm abstracts the complexity of Kubernetes resources and
    provides a history of revisions for a given application, allowing applications
    to be rolled back to a previous snapshot. It also allows YAML resources to be
    dynamically generated and simplifies the synchronization between local and live
    state. Finally, Helm applies Kubernetes resources in a predeterministic order
    and allows automated life cycle hooks, which can be used to perform various automated
    tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the `helm rollback` command. Helm assigns a revision to each application
    snapshot. A new revision is assigned when one or more areas of an application
    are modified from their previously applied state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Install`, `Upgrade`, `Rollback`, and `Uninstall.`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 2: Preparing a Kubernetes and Helm Environment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows and Mac users can install Helm using the Chocolatey or Homebrew package
    managers, respectively. All users (Windows, Mac, and Linux) can also install Helm
    from its GitHub releases page at [https://github.com/helm/helm/releases](https://github.com/helm/helm/releases).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Helm authenticates using the local `kubeconfig` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kubernetes roles provide authorization. An administrator can manage these privileges
    by creating a `RoleBinding`, which binds a role to a user or group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `helm repo add` command is used to locally configure a Helm chart repository.
    It is a requirement to install the charts contained within that repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The three `XDG` environment variables used by Helm are `XDG_CACHE_HOME`, `XDG_CONFIG_HOME`,
    and `XDG_DATA_HOME`. `XDG_CACHE_HOME` is used to assign the location for cached
    files (which includes downloaded charts from upstream chart repositories). `XDG_CONFIG_HOME`
    is used to set the location for Helm configuration (which includes repository
    information saved by `helm repo add`). `XDG_DATA_HOME` is used to save plugin
    information, added using the `helm plugin install` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Minikube` allows users to easily create a single-node Kubernetes cluster on
    their local machine. `Minikube` automatically configures the `Kubeconfig` for
    authentication and assigns users with `cluster-admin` to perform any desired action.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 3: Installing Your First Helm Chart'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Helm Hub is a centralized location for upstream chart repositories. Users
    can interact with it by using the `helm search hub` command, or by visiting the
    Helm Hub website at [https://hub.helm.sh/](https://hub.helm.sh/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `helm get` commands are used to get details of an installed Helm release
    such as the applied values and generated Kubernetes resources. The `helm show`
    commands are used to show general information of a Helm chart such as the list
    of supported values and the chart `README`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `--set` flag is used to provide inline values and is useful for providing
    simple values or values that contain secrets that should not be saved to a file.
    The `--values` flag is used to provide values by using a values file and is useful
    for providing large amounts of values at a time and saving applied values to a
    source control repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `helm history` command can be used to list the revisions for a release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you upgrade a release without providing any values, the `--reuse-values`
    flag is applied by default, which will reuse each of the values applied in the
    previous release. If at least one value is provided, the `--reset-values` flag
    is applied instead, which resets each value to their defaults and then merges
    the provided values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `helm history` command would reveal six releases, with the sixth release
    indicating that the application was rolled back to revision 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `helm list` command can be used to view all of the releases deployed to
    a namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `helm search repo` command can be used to list each of the repository’s
    charts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 4: Understanding Helm Charts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: YAML is the format most commonly used, though JSON can be used alternatively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The three required fields are `apiVersion`, `name`, and `version`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Values from a chart dependency can be referenced or overridden by placing desired
    dependency values in a map whose name is equal to the name of the dependency chart.
    Values can also be imported using the `import-values` setting, which can be used
    to allow dependency values to be referenced using a different name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can create an upgrade hook to ensure that a data snapshot is taken before
    running the `helm upgrade` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can provide the `README.md` file to provide documentation for your chart.
    You can also create the `templates/NOTES.txt` file, which can dynamically generate
    release notes upon installation. Finally, the `LICENSE` file can be used to provide
    legal information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `range` action allows chart developers to generate repeating YAML portions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Chart.yaml` file is used to define metadata about a Helm chart. This file
    is also called the Chart Definition. The `Chart.lock` file is used to save chart
    dependency state, providing metadata about the exact dependency versions used
    so the `charts/` folder can be recreated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `helm.sh/hook` annotation is used to define a hook resource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Functions and pipelines allow chart developers to perform complex processing
    and formatting of data within a template. Common functions include `date`, `include`,
    `indent`, `quote`, and `toYaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 5: Building Your First Helm Chart'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The `helm create` command can be used to scaffold a new Helm chart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declaring the Redis dependency prevented you from needing to create Redis templates
    in your Helm chart. It allowed you to deploy Redis without needing to know the
    proper Kubernetes resource configuration required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `helm.sh/hook-weight` annotation can be used to set the execution order.
    Hooks are executed in ascending order by weight.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `fail` function is used to immediately fail rendering and can be used to
    restrict user input against a set of valid settings. The `required` function is
    used to declare a required value, in which chart templating will fail if that
    value is not provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To publish a Helm chart to a GitHub Pages chart repository, you must first use
    the `helm package` command to package your Helm chart in TGZ format. Next, you
    should generate the repository’s `index.yaml` file with the `helm repo index`
    command. Finally, the repository contents should be pushed to GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `index.yaml` file contains metadata about each of the charts included in
    a chart repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 6: Testing Helm Charts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The `helm template` command is used to generate your Helm templates locally.
    The `helm lint` command is used to lint for errors in your chart’s structure and
    chart definition file. It also attempts to find errors that will result in a failed
    installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To validate your chart templates prior to installation, you can run the `helm
    template` command to generate your YAML resources locally to ensure they were
    generated properly. You can also use the `--verify` flag to check with the API
    server that your YAML schemas are correct without installing the resources. The
    `helm install --dry-run` command can also perform this check with the API server
    prior to installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One tool that can be used to lint the style of your YAML resources is the `yamllint`
    tool. It can be used alongside `helm template` to lint your generated resources
    (for example, `helm template my-test test-chart | yamllint -`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A chart test is created by creating a chart template with the `helm.sh/hook:
    test` annotation added. Chart tests are typically Pods that execute a script or
    short command. They can be executed by running the `helm test` command.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Chart Testing (**ct**) tool allows Helm chart maintainers to more easily
    test Helm charts in a git monorepo. It performs thorough testing and ensures that
    charts that are modified have had their versions incremented.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `ci/` folder is used to test multiple different combinations of Helm values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the `--upgrade` flag will help ensure regressions have not occurred for
    charts that have not had their major version incremented. It will first install
    the older version of the chart and then upgrade to the newer version. Then, it
    will delete the release, install the new version, and attempt an upgrade against
    itself. Testing will take place between each installation/upgrade.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 7: Automating Helm Processes Using CI/CD and GitOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: CI is an automated software development process that can be repeated when a
    software change occurs. CD is a set of defined steps written to progress software
    through a release process (commonly referred to as a pipeline).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While CI/CD describes the software development and release process, GitOps describes
    the act of storing configuration in Git. An example of this is storing a values
    file in Git, which can be applied to deploy an application to Kubernetes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A CI pipeline for creating and releasing Helm charts can lint, install, and
    test the Helm charts. The Chart testing tool can help perform these steps more
    easily, especially when maintaining a chart monorepo. The pipeline should also
    package each Helm chart and deploy the charts to the chart repository. For GitHub
    Pages chart repositories, the `index.yaml` file must be generated, and the contents
    must be pushed to the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CI allows charts to be easily and quickly tested and released. It can also help
    prevent regressions as new features are added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A CD pipeline would deploy Helm charts to each desired environment, with each
    environment being a different pipeline stage. Smoke testing can be performed by
    using the `helm test` command after each deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A CD pipeline allows users to easily deploy their applications without needing
    to manually invoke the Helm CLI commands. This can help prevent the possibility
    of human error when deploying applications with Helm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To maintain configuration for multiple environments, separate folders can be
    used to separate the values files by environment. To reduce boilerplate, a file
    containing the common values used across each environment can be saved and applied
    to each Helm deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 8: Using Helm with the Operator Framework'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An operator works by leveraging a custom controller and custom resources. When
    a new custom resource is created, the operator will perform the logic implemented
    by the custom controller. Changes to the custom resource also trigger the controller
    logic. Operators are typically implemented to install and manage the life cycle
    of an application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using the Helm CLI, you must execute the `install`, `upgrade`, `rollback`,
    and `uninstall` commands from the command line. However, when using a Helm-based
    operator, these commands are performed automatically when you `create`, `modify`,
    or `delete` a custom resource. When using a Helm-based operator, you don’t have
    to run any Helm CLI commands locally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With regard to the application life cycle, the Helm CLI allows users to roll
    back to a previous revision, while the Helm operator does not allow this because
    it does not keep a history of revisions.
  prefs: []
  type: TYPE_NORMAL
- en: You could first use the `operator-sdk new` command to scaffold a new Helm operator,
    pointing the command to an existing Helm chart with the `--helm-chart` flag. Next,
    you could build the operator using the `operator-sdk build` command. Finally,
    you could push the operator image to a container registry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installation is performed by creating a new custom resource. Upgrading is performed
    by modifying the custom resource. Rolling back is performed automatically if an
    upgrade fails, but cannot be explicitly performed. Uninstallation is performed
    by deleting the custom resource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `crds/` folder allows **Custom Resource Definitions (CRDs)** to be created
    before the contents in `templates/` are created. It provides an easy way to deploy
    operators that are dependent on CRDs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers will vary, but an example of these charts has been provided at [https://github.com/PacktPublishing/-Learn-Helm/tree/master/ch8-q6-answer](https://github.com/PacktPublishing/-Learn-Helm/tree/master/ch8-q6-answer).
    The example creates one chart called **guestbook-operator**, which is used to
    deploy the operator resources (including the CRD), while the other chart is called
    **guestbook-cr** and is used to deploy the custom resource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 9: Helm Security Considerations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Data provenance is about determining the origin of data. Data integrity determines
    whether the data you received is the data that you expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A user needs to download the accompanying `.asc` file, which contains the digital
    signature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `helm verify` command can be used to verify locally downloaded charts, while
    the `helm install --verify` command can be used against charts stored in an upstream
    chart repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can incorporate regular vulnerability scanning. You can also try to avoid
    deploying images that need to be run as root or a subset of root capabilities.
    Finally, you can reference images using a `sha256` value instead of a tag to ensure
    that you are always deploying the expected image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resource limits help prevent an application from being able to exhaust the underlying
    node resources. You can also leverage `LimitRanges` to set the maximum amount
    of resources per Pod or PVC, and you can leverage `ResourceQuotas` to set the
    maximum amount of resources per namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Least privilege refers to a user or application being granted only the minimum
    set of permissions that is needed to properly function. To achieve least privilege
    access, you can use Kubernetes `Roles` and `RoleBindings` to create least privilege
    roles and bind those roles to users or groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `helm repo add` command provides the `--username` and `--password` flags,
    which are used for basic authentication and the `--ca-file`, `--cert-file`, and
    `--key-file` flags, which are used for certificate-based authentication. The `--ca-file`
    flag is also used to verify a chart repository’s certificate authority.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
