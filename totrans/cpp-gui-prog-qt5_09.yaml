- en: The Camera Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After working your way through so many chapters with increasing difficulty,
    let's try out something simpler and more fun for this chapter instead! We will
    learn how to access our camera through Qt's multimedia module and take photos
    using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Qt multimedia module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to the camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing a camera image to file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recording a camera video to file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use this to create a video conference app, a security camera system,
    and more. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: The Qt multimedia module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The multimedia module in Qt is the module that handles a platform's multimedia
    capabilities, such as media playback and the use of camera and radio devices.
    This module covers a wide range of topics, but we will just focus on the camera
    for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, create a new Qt Widgets Application project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the first thing we need to do is to open up the project file (`.pro`)
    and add two keywords—`multimedia` and `multimediawidgets`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'By detecting these keywords in the project file, Qt will include the multimedia
    module and all the widgets that are related to multimedia into your project when
    it compiles. The multimedia module includes four major components which are listed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Audio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each component includes a range of classes that provide respective functionality.
    By using this module, you no longer have to implement low-level, platform-specific
    code yourself. Let Qt do the job for you. It's really that easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have finished adding the multimedia module, let''s open `mainwindow.ui`
    and drag and drop a Horizontal Layout on to the main window, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59be5c52-c020-4ae8-8db0-3485497ad386.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, add a Label, Combo Box (name it `deviceSelection`), and a Push Button
    into the Horizontal Layout we just added in the previous step. After that, add
    a Horizontal Spacer between the combo box and a push button to push them apart
    from each other. Once you're done, select the central widget and click on the
    Layout Vertically button located above the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add another Horizontal Layout to the bottom of the previous horizontal
    layout and right-click on it and select Morph into | QFrame. After that, set its
    sizePolicy (Horizontal Policy and Vertical Policy) settings to Expanding. Refer
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/afc05a4b-5788-4b1d-ac84-33e5cd81fd92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your program''s user interface should look something like this by now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e31cada6-b831-4f34-bad4-3c3096644d80.png)'
  prefs: []
  type: TYPE_IMG
- en: The reason we convert the layout to a frame is so that we can set the sizePolicy
    (both Horizontal policy and Vertical policy) to Expanding. However, if we just
    add a Frame widget (which is essentially a QFrame) from the widget box, we don't
    get the layout component on it which is needed for attaching the viewfinder later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, right click on the QFrame again and select Change styleSheet. A window
    will pop up for setting the style sheet of that widget. Add the following style
    sheet code to make the background black:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64d7d9eb-31d7-463e-b806-0c13f4de32b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This step is optional; we made its background black just to indicate the viewfinder''s
    location. Once this is done, let''s put another Horizontal Layout above the QFrame,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb45ce27-fc97-4962-a84f-f3e7f3cac303.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, add two Push Buttons to the Horizontal Layout and a Horizontal
    Spacer to keep them aligned to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd4977c9-a179-4245-a431-8f3ef6622ba3.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it; we have finished setting up our project with the multimedia module
    and laid out the user interface nicely for our next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here comes the most exciting part. We are going to learn how to access our
    camera(s) using Qt''s multimedia module! First, open `mainwindow.h` and add the
    following headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following variable, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open up `mainwindow.cpp` and add the following code to the class constructor
    to initiate the `QCamera` object. We then use the `QCameraInfo` class to retrieve
    a list of connected cameras and fill in that information in the combo box widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build and run the project now. After that, check the debug output for
    any detected cameras on your computer. The cameras that have been detected should
    also be displayed in the drop-down box. If you are running on a laptop with a
    supported camera, you should see it listed. If you''re running a system with no
    built-in camera, then the debug output may not display anything and the drop-down
    box will remain empty as well. If that''s the case, try plugging in an inexpensive
    USB camera and run the program again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/653beee6-57b1-4705-8987-5387abe142b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, open up `mainwindow.ui` and right click on the Connect button,
    and select Go to slot.... Select the `clicked()` option and click OK. Qt Creator
    will automatically create a `slot` function for you; add the following code into
    the function, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When the Connect button is being clicked, we first check whether the `camera`
    is already connected by checking the `connect` variable. If it's not connected
    yet, we run the `connectCamera()` function which we will define in the next step.
    If the camera is already connected, we stop the `camera`, delete the `viewfinder`
    and set the Connect button's text to `Connect`. Finally, set the `connected` variable
    to `false`. Do note that we're using `deleteLater()` here instead of `delete()`,
    which is the recommended way to delete a memory pointer. `deleteLater()` is called
    on an object that lives in a thread with no running event loop, the object will
    be destroyed when the thread finishes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add a new function in our `MainWindow` class called `connectCamera()`.
    The function looks like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the `connectCamera()` function, we repeat what we did in the construction
    and get the current list of connected cameras. Then, we loop through the list
    and compare the name of the camera (stored in the `description` variable) with
    the currently selected device name on the combo box widget.
  prefs: []
  type: TYPE_NORMAL
- en: If there's a matching name, it means the user is intending to connect to that
    particular camera, and thus we will proceed to connect to that camera by initializing
    a `QCamera` object and a new `QCameraViewFinder` object. We then link the `viewfinder`
    to the `camera` and add the `viewfinder` to the layout with the black color background.
    Then, we set the `connected` variable to `true` and set the Connect button's text
    to `Disconnect`. Finally, call the `start()` function to start running the camera.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run the project now. Select the camera you are intending to connect
    to and click the Connect button. You should be able to connect to your camera
    and see yourself in the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6d70bb6-30f2-426f-815c-a92e80f674e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If your camera is unable to connect, do the following steps to display any
    errors returned by the operating system. First, open up `mainwindow.h` and add
    in the following `slot` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, open `mainwindow.cpp` and add the following code to `connectCamera()`
    function to connect the `error()` signal to the `cameraError()`, `slot` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `cameraError()` slot function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we display the error message and make sure the camera
    has completely stopped, just in case. By looking at the error message, you should
    be able to debug the problem more easily.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing a camera image to file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to connect to our camera using Qt's multimedia module in
    the previous section. Now, we will try and capture a still image from the camera
    and save it into a JPEG file. It's actually very very simple with Qt.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open `mainwindow.h` and add the following variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, right-click on the Capture button in `mainwindow.ui` and select Go to
    slot.... Then, select `clicked()` and press OK. Now, a new `slot` function will
    be created for you in `mainwindow.cpp`. Add the following code to capture an image
    from the camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: What we did in the preceding code is basically create a new `QCameraImageCapture`
    object and set its media object as the active camera. Then, set its capture mode
    as a still image. Before we ask the `QCameraImageCapture` object to capture an
    image, we must lock the camera so that the settings remain unchanged during the
    process of capturing the image. You may unlock it by calling `camera->unlock()`
    after you have successfully captured the image.
  prefs: []
  type: TYPE_NORMAL
- en: We used `qApp->applicationDirPath()` to get the application directory so that
    the image will be saved alongside the executable file. You can change this to
    whatever directory you want. You can also put your desired filename behind the
    directory path; otherwise, it will save the images sequentially using the default
    filename format starting with `IMG_00000001.jpg`, `IMG_00000002.jpg`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Recording a camera video to file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we have learned how to capture a still image from our camera, let''s
    proceed to learn how to record videos as well. First, open `mainwindow.h` and
    add the following variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open `mainwindow.ui` again and right-click on the Record button. Choose
    Go to slot... from the menu and select the `clicked()` option, then, click the
    OK button. A `slot` function will be created for you; then proceed to add the
    following code into the `slot` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This time, we use a `QMediaRecorder` for recording video instead. We must also
    set the camera's capture mode to `QCamera::CaptureVideo` before calling `recorder->record()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the error message produced by the media recorder during the recording
    stage, you may connect the `error()` signal of the media recorder to a `slot`
    function like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, simply display the error message in the `slot` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Do note that, at the time of writing this chapter, the `QMediaRecorder` class
    only supports video recording on macOS, Linux, mobile platforms and Windows XP.
    It doesn't work on Windows 8 and Windows 10 at the moment, but it will be ported
    over in one of the upcoming versions. The main reason is that Qt is using Microsoft's
    `DirectShow` API to record video on the Windows platform, but it has since been
    deprecated from the Windows operating system. Hopefully, by the time you're reading
    this book, this feature has been completely implemented in Qt for Windows 8 and
    10.
  prefs: []
  type: TYPE_NORMAL
- en: If it hasn't, you may use third-party plugins that use `OpenCV` API for recording
    video, such as the **Qt Media Encoding Library** (**QtMEL**) API, as a temporary
    solutions. Do note that the code used in QtMEL is completely different than the
    one we're showing here in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about QtMEL, please check out the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://kibsoft.ru](http://kibsoft.ru).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to connect to our camera using Qt. We have
    also learned how to capture an image or record a video from the camera. In the
    next chapter, we will learn about the networking module and try and make an instant
    messenger using Qt!
  prefs: []
  type: TYPE_NORMAL
