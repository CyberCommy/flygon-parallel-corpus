- en: Organize + Automate + Deploy = Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will talk about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Extracting logic from your components to keep the code tidy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bundling your component with Webpack[Preview](https://cdp.packtpub.com/vue_js_2_cookbook/wp-admin/post.php?post=70&action=pdfpreview)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing your dependencies with Webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using external components in your Webpack project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing with continuous feedback with hot reloading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Babel to compile from ES6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a code linter while developing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using only one command to build both a minified and a development .js file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing your components to the public
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack coupled with npm is a very powerful tool. In essence, it's just a bundler
    that takes some files along with their dependencies and bundles everything into
    one or more consumable files. It's now in its second version and represents much
    more than before, especially for Vue developers.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack will enable you to write components conveniently isolated in single
    files and shippable on command. It will enable you to use different JavaScript
    standards, such as ES6, but also other languages altogether, all thanks to **loaders**
    , a concept that will recur in the following recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting logic from your components to keep the code tidy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue components can become very complex sometimes. In these cases, it's better
    to split them up and try to hide some complexity with abstraction. The best place
    to put such complexity is external JavaScript files. This way you have the added
    benefit that, if necessary, it's easier to share the extracted logic with additional
    components.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is of intermediate level. Before coming here, you should have completed
    the  *Choosing a development environment*  recipe in [Chapter 1](text00026.html)
    , *Getting Started with Vue.js* , and should know how to set up a project with
    npm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, ensure that you have the `vue-cli` package installed globally with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will build a calculator for compound interest; you will discover how much
    money you will have after an initial investment.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a clean Webpack project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new directory and a new `Vue` project inside it with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can choose the default values for the questions asked.
  prefs: []
  type: TYPE_NORMAL
- en: Run `npm install` to install all the required dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Then, navigate to `src/App.vue` in the directory structure and delete pretty
    much everything inside the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final result should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve already done this for you, and, you can use another template with the
    following command instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '`vue init gurghet/webpack`'
  prefs: []
  type: TYPE_NORMAL
- en: Building the compound interest calculator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build the compound interest calculator, you need three fields: the initial
    capital or principal, the yearly interest rate, and the investment length. You
    will then add an output field to display the final result. Here''s the corresponding
    HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We put the `.number` modifier, or otherwise the numbers we put inside will be
    converted to strings by JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the JavaScript part, declare the three model variables by writing the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To calculate the compound interest, we take the math formula for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00143.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'In JavaScript, it can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You have to add this to the `Vue` component as a computed property, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run your application with the following command (launched from your
    directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that our application works, you can see how much we will gain by putting
    0.93 dollars into a bank account with 2.25 percent interest and hibernating for
    1,000 years (4.3 billion dollars!):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00144.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The formula inside the code is not much of a bother right now. Still, what if
    we had another component that also does the same calculation? We would also like
    to make it more explicit that we are computing the compound interest and we don't
    actually care what the formula does in this scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file, named `compoundInterest.js` , inside the `src` folder; write
    the following code inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We then modify the code in `App.vue` accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, remember to import the file we just created at the top of the JavaScript
    part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working in a component or when programming in general, it's much better
    to reduce the scope of the code to only one layer of abstraction. When we write
    a computed function that returns the final capital value, we should only worry
    about calling the right function--the one that does the right calculation for
    our purpose. The internals of the formula are on a lower layer of abstraction
    and we don't want to deal with that.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we have done is that we brought all the nitty gritty of the calculations
    in a separate file. We then exported the function from the file with the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes the function available by default when we import the file from our
    `Vue` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: So, now `compoundInterest` is the function we defined in the other file. Furthermore,
    this separation of concerns allow us to use this function to compute compound
    interest everywhere in our code, even in other files (potentially other projects
    too).
  prefs: []
  type: TYPE_NORMAL
- en: Bundling your component with Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack lets you package your project in minified JavaScript files. You can
    then distribute these files or use them yourself. When you use the inbuilt templates
    that come with `vue-cli` , Webpack is configured to build an entire working application
    with it. Sometimes we want to build a library to publish or use in another project.
    In this recipe, you will tweak the default configuration of the Webpack template
    to release a component instead.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will make sense to you only after you have installed npm (refer
    to the  *Choosing a development environment*  recipe in [Chapter 1](text00026.html)
    , *Getting Started with Vue.js* ) and got familiar with `vue-cli` and the Webpack
    template.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you will build a reusable component that shakes whatever you
    put into it; for this, we will use the excellent CSShake library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new clean project based on the Webpack template. You can take a look
    at the previous recipe to see how to do that, or you can use the prebuilt template
    I made. You can use my template by creating a new directory and running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Choose the default answers if you don't know what they mean. Remember to run
    `npm install` to bring in the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first rename a couple of things: rename the `App.vue` file to `Shaker.vue`
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside it, write the following as the HTML template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note how we changed the `<div>` into a `<span>`  with respect to the original
    template. That's because we want our shaker to be an inline component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component is complete as it is; we just need a minor cosmetic edit in the
    JavaScript part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To manually test our application, we can modify the `main.js` file in the following
    way (the highlighted text is the modified code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a sample page as shown in the following screenshot, in which
    we can prototype our component with hot-reloading. Launch it by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/Image00145.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Placing the cursor over the word `test` should make it shake.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we would like to package this component in a single JavaScript file that
    can be reused in the future.
  prefs: []
  type: TYPE_NORMAL
- en: There is no configuration present for this in the default template, but it's
    easy enough to add one.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you have to do some hammering in the `webpack.prod.js` file inside
    the `build` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get rid of some plugins that we don''t need for releasing a library;
    find the `plugins` array inside the file. It''s an array containing plugins in
    the form of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We only need the following plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '`webpack.DefinePlugin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack.optimize.UglifyJsPlugin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack.optimize.OccurrenceOrderPlugin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Get rid of all the other plugins as we don''t need them; the final array should
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The first one allows you to add some more configuration, the second plugin minifies
    the file, and the third one will optimize the size of the resulting file.
  prefs: []
  type: TYPE_NORMAL
- en: Another property we need to edit is `output` , as we want to simplify the output
    path.
  prefs: []
  type: TYPE_NORMAL
- en: 'The original property looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'What it does originally is create a series of output files inside a `js` directory.
    There are variables in square parentheses; we won''t need them because you only
    have one self-contained module for our application, which we''ll call *shaker*
    . We need to obtain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Since, as just said, you want the component to be self-contained, we need some
    more modifications, which will also depend on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want the component to have any CSS styling built-in (we have none in
    our case as we are using an external CSS library), you should disable the `ExtractTextPlugin`
    ; we already deleted the plugin from the list but some other files are still using
    it. Find the `extract` option inside the `vue-loader.conf.js`  file (the `vue`
    section of the same file in some versions) and replace it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Our component will normally contain the Vue library inside; if you want to
    use the component in a Vue project, you don''t need this, as it would be duplicated
    code. You can tell Webpack to just search for dependencies externally and not
    include them. Add the following property in the `webpack.prod.js`  file you just
    modified before `plugins` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This will tell Webpack not to write the Vue library into the bundle but to
    just take a global, named `Vue` , and use it wherever the `vue` dependency is
    imported in our code. The Webpack configuration is almost done; we just need to
    add another property before the `module` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start the compilation reading code from the `dist.js` file. Wait
    a minute, this file doesn''t exist yet. Let''s create it and add the following
    code inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the final JavaScript minified file, the Vue dependency will be taken externally,
    and then we register the component globally.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the last change, I would suggest modifying the folder in which the minified
    file gets saved. In the `config/index.js` file, edit the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Swap the preceding line with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the command to build the minified file with npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see an output that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To test our file, we can use JSFiddle
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the content of the file you created inside `dist/shaker.js` , then go
    to [https://gist.github.com/](https://gist.github.com/) (you may need to register)
    and paste the content of the file inside the text area. Name it `shaker.js` :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00147.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since the text is a single line, you will not see much with the No wrap option
    on. Click on Create public gist and when you are presented with the next page,
    click on Raw , as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00148.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the URL in the address bar and go to [http://rawgit.com/](http://rawgit.com/)
    , where you can paste the link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00149.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click and copy the link you get on the right. Congratulations, you just published
    your component on the Web!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now head to JSFiddle and pick Vue as a library. You can now add the link you
    copied in the left and you have your component available to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00150.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack configuration in the official templates is quite involved. On the other
    hand, don't try to understand everything straight away, or you will get stuck
    and not learn much anyway.
  prefs: []
  type: TYPE_NORMAL
- en: We created a **UMD** (**Universal Module Definition** ) module that will try
    and see whether there is a Vue dependency available and install itself as a component.
  prefs: []
  type: TYPE_NORMAL
- en: You can even add CSS and styling to your component and, the way we configured
    Webpack, the styles will still ship with your component.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Releasing your components to the public*  recipe in this chapter,  you
    will learn how to publish your component in the npm publish registry. We'll use
    a different approach than this, but you'll find there the missing steps to publish
    it to the registry.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing your dependencies with Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack is a tool for organizing your code and dependencies. Furthermore, it
    gives you a way to develop and build with JavaScript files that embed all the
    dependencies and modules that we pass to them. We'll use this in this recipe to
    build a small Vue application and bundle everything in a single file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe doesn't require any particular skill except the use of npm and some
    knowledge of the command line. You can find out more in the  *Organizing your
    dependencies with Webpack*  recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new folder for your recipe and create a `package.json`  file with
    the following content inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This defines an npm project in our folder. You can, of course, use `npm init`
    or `yarn init` if you know what you're doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will install Webpack 2 for this recipe. To add it to your project dependencies,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `--save-dev` option means that we will not ship the code for Webpack in
    our final product, but we will use it only for development purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `app` directory and an `App.vue` file inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This file will be a simple `Vue` component; it can be as simple as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to tell Webpack how to turn `.vue` files into `.js` files. To do that,
    we create a configuration file in the root folder, named `webpack.config.js` ;
    this file will be automatically picked up by Webpack. Inside this file, write
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The line inside rules says the following:'
  prefs: []
  type: TYPE_NORMAL
- en: <q>Hey Webpack, when you see a file that ends in `.vue` , use the `vue-loader`
    to turn it into a JavaScript file.</q>
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to install such a loader with npm using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This loader internally uses other dependencies that will not be installed automatically;
    we need to do it manually by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also take this opportunity to install Vue itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our `Vue` component is ready. We need to write a page in which to place
    it and try it. Create a file called `index.js` inside the `app` folder. We will instantiate
    the component in a Vue instance. Inside `index.js` , write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This will mount the Vue instance inside an element with `id="app"` , and it
    will contain a single component--our `App.vue` .
  prefs: []
  type: TYPE_NORMAL
- en: 'We need one more file--an HTML file. In the root directory, create `index.html`
    with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We don''t want to refer to `app/index.js` directly here; this is because `index.js`
    itself doesn''t contain much. It has an `import` statement that won''t be recognized
    by the browser. Webpack can instead easily create `dist/bundle.js` with `index.js`
    inside, along with all its dependencies. To do it, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This should generate an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00151.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now open `index.html`  and you'll see the component working.
  prefs: []
  type: TYPE_NORMAL
- en: However, it's not so much fun to launch this long command every time. Webpack
    and npm can do better.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `webpack.config.js` , add the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This will specify the entry point of Webpack and where the resulting file should
    be saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also add a script to `package.json` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Now, launching `npm run build` will have the same effect as the long command
    we used.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we basically created a JavaScript file (`bundle.js` ) that simultaneously
    contains Vue and the component we wrote. In the `index.html` , there is no trace
    of Vue because it's embedded in `bundle.js` .
  prefs: []
  type: TYPE_NORMAL
- en: This way of working is much better when we have a lot of dependencies. We don't
    need to add a lot of tags in the head or the body of the page anymore. Also, we
    don't have to be afraid to load a dependency that we don't need.
  prefs: []
  type: TYPE_NORMAL
- en: As an added bonus, Webpack has the power and flexibility to minify our final
    file and other advanced optimizations that are simply not possible by loading
    the dependencies manually.
  prefs: []
  type: TYPE_NORMAL
- en: Using external components in your Webpack project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using external Vue components in your own project is usually straightforward.
    Sometimes though, things aren't so simple. In particular, there are some configurations
    in the official templates with Webpack that (weirdly) actually prevent you from
    using some external components. In this recipe, we will install a modal dialog
    component from the Bulma project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will tweak the Webpack configuration. It is suggested to
    have completed the  *Organizing your dependencies with Webpack*  recipe before
    taking up this task.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start with a fresh Webpack project. You can create a new one using
    the `vue-cli` and the official Webpack template. My suggestion, however, is to
    begin with my Webpack template, which is a clean slate. To do  it, run the following
    command in a new directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We will install `vue-bulma-modal` , which is a component written in Vue with
    the Bulma CSS framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command we installed `bulma` too, which contains the actual
    CSS styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'To actually make the styles work, we need to turn them into JavaScript for
    Webpack; this means we need to install a couple of loaders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The SASS loader is already configured, so there is no need to touch anything.
    What we will touch though, is the Webpack configuration related to the Babel loader
    (learn more about it in the *Developing with continuous feedback with hot reloading*
     recipe).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the official template (but this may change, watch out), there is a line
    that prevents Webpack from compiling dependencies. Go to `build/webpack.base.conf.js`
    and find this block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the version of Webpack you are using, you may need to slightly
    tweak the loader syntax. In older versions of Webpack, for example, you would
    write `babel` instead of `babel-loader` .
  prefs: []
  type: TYPE_NORMAL
- en: 'You have to remove the highlighted line and, instead, write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This is telling Webpack to compile the component we just installed with `babel-loader`
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, write the following HTML layout in `App.vue` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can write the logic, as shown, in the JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To actually use the Bulma styles, we need to kick in the SASS loader and import
    the `bulma` file. Add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Note how we are specifying the language of our styles in the first line (we
    are writing SCSS, but in this case we write it as it is).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you now try to run your app with the `npm run dev` command, you will see
    the Bulma modal dialog in all its splendor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00152.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The official Webpack template contains the configuration rule to never compile
    files inside the `node_modules` directory. This means that authors of web components
    are encouraged to distribute an already compiled file because otherwise users
    will import raw JavaScript files (since Webpack won't compile them) in their projects,
    causing all sorts of errors in browsers. Personally, I don't think this is good
    engineering. One problem with this setup is that since the files you are importing
    in your project are compiled against one version of Vue, the component might not
    work (this actually happened in the past) if you use a newer version of Vue.
  prefs: []
  type: TYPE_NORMAL
- en: A better approach is to import the raw files and components and let Webpack
    compile them in a single file. Unfortunately, the majority of components available
    in the wild are distributed already compiled, so while it's very quick to import
    them given the official template, you're more likely to encounter compatibility
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'When importing external components, the first thing to do is to examine their
    `package.json` file. Let''s see what the `vue-bulma-modal`  package contains in
    this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The file referred to by the `main` property is the file we are importing when
    we write the following line in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The `src/index.js` file, in turn, contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This is not a compiled file; it's raw ES6 and we know it because `import` is
    not defined in regular JavaScript. That's why we need Webpack to compile this
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, consider that we write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'With the tilde sign (`~` ), we tell Webpack to resolve the style like it was
    a module and so, what we are really importing is the file referred to by the main
    in the `package.json` of the `bulma` package, which, if we check, looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Since we are importing a SASS with the SASS syntax, we need to specify in the
    Vue component that we are using `lang="sass"` .
  prefs: []
  type: TYPE_NORMAL
- en: Developing with continuous feedback with hot reloading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hot reloading is a really useful technology that lets you develop while looking
    at the results in the browser, without even refreshing the page. It's a very tight
    loop and can really speed up your development process. In the official Webpack
    template, hot reloading is installed by default. In this recipe, you will learn
    how to install it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before attempting this recipe, you should have at least a vague idea of how
    Webpack works; the  *Organizing your dependencies with Webpack*  recipe in this
    chapter will have you covered.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new npm project in a new directory, either with `npm init -y` or `yarn
    init -y` . I personally prefer the second one because the resulting `package.json`
    is much more compact.
  prefs: []
  type: TYPE_NORMAL
- en: To install Yarn, you can use the `npm install -g yarn`  command. The main benefit
    of Yarn is that you will be able to lock your dependencies to a known version.
    This prevents bugs when working in teams and the application gets cloned from
    Git with slightly different versions that introduce incompatibilities.
  prefs: []
  type: TYPE_NORMAL
- en: You will create a digital swear jar. For every swear word you pronounce, you
    donate an amount of money to a swear jar for a long term objective.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file, named `SwearJar.vue` , and add the following code inside
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: You will insert this component in a web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file named `index.html`  in the same directory and write the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The `bundle.js`  file will be created (in memory) by Webpack for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last app file you need is a JavaScript file that will contain our Vue root
    instance. Create it in the same directory and name it `index.js` ; put the following
    content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you need to create a file, `webpack.config.js` , to tell Webpack a couple
    of things. The first thing is the entry point of our application (`index.js` )
    and where we would like to place the compiled files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will tell Webpack to turn `.vue` files into JavaScript with `vue-loader`
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'To make everything work, we still need to install the dependencies we implied
    in our code. We can install them with the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The last one in particular--`webpack-dev-server` --is a development server that
    will help us develop with hot reloading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to start the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Actually, let's put this command in an npm script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `package.json` and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now run `npm run dev` and we''ll get the same result--a browser will
    pop up--as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00153.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the plus button will make the counter go up, but what about the
    style of this application? Let's make it more attractive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your code editor and the window side by side and make the following modifications
    to `SwearJar.vue` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Save the file, and you will see the page updating itself. Even better, the state
    will be retained if the counter was already set above zero, and this means that
    if you have a complex component you don't have to bring it manually into the same
    state again after each modification. Try to set the swear count to some number
    and edit the template. Most of the time, the counter will not get reset to zero.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Webpack dev server is very helpful software that lets you develop with
    a very tight feedback loop. We used plenty of arguments to make it run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: All these parameters are the same inside the `webpack.config.js` . Instead,
    we are putting these parameters in the command line for convenience. The `--output-path`
     is where the Webpack server will serve `bundle.js` ; in our case, we said that
    we want it served at the root path, so it will effectively bind the `/bundle.js`
    path to the actual `bundle.js`  file.
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter, `--inline` , will inject some JavaScript code in our browser
    so that our app can communicate with the Webpack dev server.
  prefs: []
  type: TYPE_NORMAL
- en: The `--hot` parameter will activate the Hot Module Replacement plugin, which
    will communicate with the `vue-loader` (actually with the `vue-hot-reload-api`
    , which is inside it) and will either restart or rerender (preserving the state)
    each Vue model inside the page.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, `--open` just opens the default browser for us.
  prefs: []
  type: TYPE_NORMAL
- en: Using Babel to compile from ES6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ES6 has a lot of useful features, and in this recipe you will learn how you
    can use it in your projects. It's worth noting that ES6 currently has very good
    browser support. You won't have compatibility issues with 80% of the browsers
    in the wild, but you may need to even reach people who're still using Internet
    Explorer 11, depending on your audience, or you may just want to maximize your
    audience. Moreover, some tools for development and Node.js still don't fully support
    ES6, deeming Babel necessary even for development.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use npm and the command line. If you completed the 
    *Choosing a development environment*  recipe in [Chapter 1](text00026.html) ,
    *Getting Started with Vue.js* ,  you are probably good to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new directory with an empty npm project. You can use the `npm init
    -y` command or, if you have Yarn installed, you can use `yarn init -y` inside
    the directory. This command will create a new `package.json` inside the directory.
    (Refer to the note in the *Developing with continuous feedback with hot reloading*
    recipe on Yarn.)
  prefs: []
  type: TYPE_NORMAL
- en: 'For this npm project, we will need a couple of dependencies other than Vue:
    Webpack, and Babel in the form of a loader for Webpack. Oh yes, we will need the
    `vue-loader` as well for Webpack. To install them, launch the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same directory, let''s write a component that uses ES6 syntax; let''s
    call it `myComp.vue` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'This component doesn''t do much except print the `[2,4,6]` array to the console,
    but it does it with arrow syntax at the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: This is not understood by some browsers and tools; we need to compile this component
    with Webpack, but we need to do it with the Babel loader.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `webpack.config.js` file and write the following inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: This will tell Webpack to start compiling from our `myComp.vue` file, but before
    that, it will be processed by the `vue-loader` to turn it into a js file and then
    by the `babel-loader` to turn the arrow function into something simpler and more
    compatible.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can achieve the same thing with a different and more standard configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This is a more general configuration and it says that whenever we encounter
    a file that ends with `.vue` , it should be parsed and processed with the `vue-loader`
    and `.js` files with the `babel-loader` .
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the Babel loader, there are a couple of options; we''ll follow
    the recommended way. Create a file called `.babelrc` inside your project folder
    (note the initial point) and to specify that we want the `es2015` preset applied,
    we write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, I always like to add a new script to the `package.json`  file to make
    launching commands easier. Add the following line at the end of the file (but
    before the last curly brace):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run `npm run build` . This creates a file inside the `dist` directory,
    named `bundle.js` ; open it and search for a line that contains, for example, `double`
    . You should find something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: This was our `var double = n => n * 2` , transformed from ES6 to *regular*  JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `es2015` Babel preset is a collection of Babel plugins that aims to transform
    ECMAScript2015 (ES6) syntax into simpler JavaScript. For example, it contains
    the `babel-plugin-transform-es2015-arrow-functions` plugin, which as you may have
    guessed, transforms arrow functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Transform the arrow functions into simpler JavaScript as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'To select the files and their respective loaders, we filled the test field
    inside `webpack.config.js` and to match the `.vue` files, we wrote the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: This syntax is a regular expression and it always starts with a forward slash
    and ends with another forward slash. The first character it matches is the point,
    which is expressed as `\.` because the `.` character is already taken for other
    purposes. The point has to be followed by the `vue` string and the end of string
    character is expressed as a dollar sign. If you put them all together, it will
    match all the strings that end with `.vue` . A similar thing is followed for the
    `.js` files.
  prefs: []
  type: TYPE_NORMAL
- en: Running a code linter while developing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linting your code drastically reduces small bugs and inefficiencies that accumulate
    during development, it guarantees that the coding style is consistent across a
    team or organization, and it makes your code more readable. Instead of running
    the linter once in a while, it's useful to have it constantly running. This recipe
    teaches you how to do it with Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will play with Webpack once again. You will build a tight
    loop with `webpack-dev-server` , which is covered in the *Developing with continuous
    feedback with hot reloading*  recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a new folder, create a new npm project (you can use `npm init -y` or `yarn
    init -y` ).
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the folder, create a new directory named `src` and put a file inside
    it, called `MyComp.vue` . Let the file contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'We can already spot a problem--the `John`  name property will be overwritten
    by the later property, `Jane` , with the same key. Let''s pretend that we didn''t
    notice this and put the component inside a web page. For this, we need another
    file, named `index.js` , in the `src` directory. Write the following code inside
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'In the root directory, place an `index.html` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need a `webpack.config.js` file to tell Webpack how to compile our files; write
    the following inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: This just tells Webpack to start compiling from the `index.js` file and, whenever
    it finds a `.vue` file, to turn it into JavaScript with the `vue-loader` . Beyond
    this, we want to scan all our files with a linter to ensure that we didn't make silly
    mistakes in our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following loader to the `rules` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The `enforce: ''pre''` property will run this loader before the others, so
    it will apply to the code you wrote and not a transformation of it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing we need is to configure ESLint. Create a new file in the root
    directory named `.eslintrc.js` , and add the following inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: We are saying a couple of things here. First is the set of rules we want to
    apply to our code; in other words, our set of rules (which is empty now) is extending
    the recommended set of rules. Second, we are using the `babel-eslint` parser instead
    of the default one. Finally, we are using the HTML ESLint plugin, which will help
    us to deal with the `.vue` files and will extract the JavaScript code in them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to launch our development machinery, but first we need to
    install the dependencies using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'We can launch the Webpack dev server directly, but I highly suggest adding
    the following code to the `package.json`  file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we launch `npm run dev` , a browser should open with the component
    incorrectly displaying the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<q>Hello Jane!</q>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also be able to see the problem in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '`11:7  error  Duplicate key ''name''  no-dupe-keys`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that we have two keys with the same *name* . Correct the error by
    removing the property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: In the console, after you save the Vue component, you should note that Webpack
    already performed the compilation again, this time with no errors.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basically, what happens here is that the linter loader processes the files before
    other compilation steps and writes the errors in the console. This way, you will
    be able to see imperfections in your code while you develop continuously.
  prefs: []
  type: TYPE_NORMAL
- en: ESLint and Webpack are available in the Vue official template. You now know
    that if, for some reason, you want to modify the ESLint rules, you can do it from
    the `.eslintrc.js` file and that if you want to use another linter altogether,
    you can use another loader in the Webpack configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Using only one command to build both a minified and a development .js file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While working on the release of your components, you may need a reliable process
    to issue your built files. A common operation is to release two versions of a
    library/component: one for development purposes and one to be consumed in production
    code, usually minified. In this recipe, you will tweak the official template to
    release both a minified and a development JavaScript file at the same time.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe makes sense if you are already building and distributing your own
    components. If you want to learn more, I suggest you refer to the *Bundling your
    component with Webpack*  recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll start with a project with the official Webpack template. You can use your
    own, or you can spin up a new project with `vue init webpack` and install the
    dependencies with `npm isntall` .
  prefs: []
  type: TYPE_NORMAL
- en: Go inside the `build` directory. When you launch the `npm run build` command,
    you are effectively launching the `build.js` file in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you examine the file, you will find something like this near the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to launching Webpack from the command line using the same
    configuration specified in the first argument, `webpackConfig` . To have a minified
    and non-minified file, we have to bring the `webpackConfig` to a common denominator,
    then we will specify only the differences between the development and production
    versions of the files.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, go inside `webpack.prod.conf.js` in the same directory. Here, you
    can see the configuration we are passing; in particular, you will find `UglifyJsPlugin`
    , which is responsible for minifying the file if you look at the plugin array.
    Remove the plugin since it represents the main difference between the two distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, write the following in `build.js` before the Webpack command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: You now have an array with two different configurations, one with the plugin
    required to minify the file and one without it. If you merge each of them with
    the configuration inside the `webpack.prod.conf.js` , you will obtain a different
    result.
  prefs: []
  type: TYPE_NORMAL
- en: 'To merge the two configurations, we will use the `webpack-merge` package. Add
    the following line to the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, modify the first line of the Webpack command to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: This will launch as many different merged configurations as we specify in the
    configs array.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can launch the `npm run build` command now, but the problem is that the
    files will have the same name. Cut the output property from the `webpack.prod.conf.js`
    and paste it in the `config` array, which should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: If you build your project now, you will have both a minified and a development
    file. You can, of course, personalize your configurations to grow very different.
    For example, you can add source maps in one and leave the other as is.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We first created an array of objects that represent differences in the Webpack
    configuration. We then mapped each piece of configuration into a larger, common
    configuration with the help of `webpack-merge` . When we now call the `npm run
    build` command, both the configurations run one after the other.
  prefs: []
  type: TYPE_NORMAL
- en: It's a common convention to postfix the name of the file with `min` to signal
    that the file is minified and ready to be used in production.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing your components to the public
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At a certain point, there comes a moment when you want to give back to the community.
    Maybe you built a "fart button" or maybe you built an automates stock options
    trader; whatever it is that you've built, the JavaScript and Vue community will
    be happy to welcome you. There is a big chunk of things to be done on the side
    of marketing and licensing, but in this recipe you will concentrate on the more
    technical aspects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is directed at those who want to share their work in Vue with the
    rest of the community. In the *Bundling your component with Webpack*  recipe,
    you will find how to tweak the official Webpack template to bundle your component
    correctly; this recipe can be thought of as a second part. We will not use the
    official template though.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The approach I will take for this recipe is to use the excellent `vue-share-components`
    template by *Guillaume Chau* . We'll build a joke button from that starting point.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your command line, create a new directory and type the following command
    inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'It will ask you some questions; you can copy the responses from the following
    image. The only thing to note is that you (sadly) cannot use the `joke-button`
    name for your project because I have already registered it while writing this
    recipe. However, you can come up with a similar sounding name (you may want to
    check whether the name is available in the `npm` registry before moving ahead):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00154.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the project is created, you can install the dependencies with `npm install`
    , just as in the console output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the project, let''s create the joke button component. Inside the `component`
    folder, you will find a `Test.vue` component; rename it to `JokeButton.vue` and
    make it look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, you can create the component you prefer; this is just an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `index.js` file, you will see the `Test` component imported and installed;
    you will need to install the `JokeButton`  instead. The lines you need to change
    are highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Our component is ready!
  prefs: []
  type: TYPE_NORMAL
- en: Now you have to go to the npm website to register for an account (if you don't
    have one already).
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [npmjs.com](https://www.npmjs.com/) :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00155.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on sign up and enter your details, like I did here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00156.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, you can subscribe to the npm weekly newsletter if you like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once registered, you''re done and can come back to the command line. You must
    log in to the npm registry from the terminal with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00157.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will have to enter the password you just entered for the npm website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next command will publish your library in the public repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can even look up your package and, sure enough, you will find it as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00158.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To try it, you can find the instructions in your own `README` , how cool is
    that?
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `vue-share-components` is simpler than the official template, so it's a
    good way to learn by examining it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we can take a look at is the `package.json` file. The following
    lines are relevant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'The `main` property is what we actually get when we write the following command
    in our programs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we get it when we add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: So, the `JokeButton` variable will actually contain what is exported in our
    `joke-button.common.js` .
  prefs: []
  type: TYPE_NORMAL
- en: You can edit the main property of `package.json` to point directly to a `.vue`
    component. This way, you give the user the responsibility to compile the component.
    While this is more work for the user, it also helps when one wants the freedom
    to compile against the most recent version of Vue.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the latter case, if you have some logic of your component exported in `external.js`
    files (like in the first recipe of this chapter), always remember to add the directory
    in the Webpack rules, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  test: /.js$/,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  loader: ''babel-loader'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  include: [resolve(''src''), resolve(''test''), resolve(''node_modules/myComponent'')]`'
  prefs: []
  type: TYPE_NORMAL
- en: '`},`'
  prefs: []
  type: TYPE_NORMAL
- en: The unpkg is particular of [unpkg.com](https://unpkg.com/#/) , which is a CDN.
    This is very nice because as soon as we publish our project, we will have our
    script published at [https://unpkg.com/joke-button](https://unpkg.com/joke-button)
    , and it will point to the  `joke-button.browser.js` file that is suited for the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: The `prepublish` script is a special script that will be called before publishing the
    project to npm with the `npm publish`  command. This eliminates the possibility
    that you forget to build the files before publishing your component (it happened
    to me many times, so I was forced to increase the version of the software artificially,
    build the files manually, and publish again).
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting fact to note is the difference between `webpack.config.common.js`
    , which outputs the  `joke-button.common.js` file, and  `webpack.config.browser.js`
    , which outputs the  `joke-button.browser.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first file has the output set to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'So, it will output a library that will expose a commonJS interface; this is
    tailored for non-browser environments, and you will have to require or import
    this library to use it. On the other hand, the second file for the browser has
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'A UMD will expose itself in a global scope, no need to import anything, so
    it''s perfect for the browser because we can include the file in a Vue webpage
    and use the component freely. This is also possible, thanks to the `index.js`
    auto-install feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: What this code is doing is packaging the install function (which registers the
    component(s) with Vue) inside the `plugin` constant and exporting it in the meantime.
    Then, it checks whether there is either `window` or `global` defined, in that
    case, it gets hold of the `Vue` variable that represents the Vue library and uses
    the plugin API to install the component(s).
  prefs: []
  type: TYPE_NORMAL
