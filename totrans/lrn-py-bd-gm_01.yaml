- en: Getting to Know Python - Setting Up Python and the Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is notorious in the data and analytics industry, but it is still a hidden
    artifact in the gaming industry. While making games using other gaming engines
    such as Unity and Godot, we tend to combine our design logic with core programming
    principles. But in the case of Python, it is mostly the analysis of problems and
    programming paradigms that coalesce together. A program flow or structure is a
    sequence that is dovetailed with its programming paradigms. A programming paradigm,
    as its name suggests, facilitates the programmer to write a solution to a problem
    in the most economical and efficient way possible. For instance, writing a program
    in two lines of code instead of ten lines is an outcome of using a programming
    paradigm. The purpose of program flow analysis or structural analysis is to uncover
    information about procedures that need to be invoked for various design patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing programming with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The building blocks of Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the PyCharm IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming code without *Hello World*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of the minimum hardware requirements you''ll need for
    this book:'
  prefs: []
  type: TYPE_NORMAL
- en: A working PC with a minimum of 4GB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An external mouse adapter (if you are using a laptop)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A minimum of 5GB of hard disk space to download an external IDE and Python packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will need the following software to get the most out of this book (we will
    download all of them in this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: Various open source Python packages like pygame, pymunk and pyopenGL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Pycharm IDE (community version), which you can find at [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various open source packages, such as `pygame` and `pycharm`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code for this chapter, which can be found in this book's GitHub repository: [https://github.com/PacktPublishing/Learning-Python-by-building-games/tree/master/Chapter01](https://github.com/PacktPublishing/Learning-Python-by-building-games/tree/master/Chapter01)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2o2pVgA](http://bit.ly/2o2pVgA)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing programming with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The old adage of programming states the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Coding is basically the computer language that''s used to develop apps, websites,
    and software. Without it, we''d have none of the major technology we''ve come
    to rely on such as Facebook, our smartphones, the browser we choose to view our
    favorite blogs on, or even the blogs themselves. It all runs on code."'
  prefs: []
  type: TYPE_NORMAL
- en: We couldn't agree more with this. Computer programming can be both a rewarding
    and tedious activity. Sometimes, we might be in a situation where we can't find
    the tweaks of the exception (unexpected behavior of the program) that we caught
    in the program and, later, we find that the error was because of wrong modules
    or bad practices. Writing programs is similar to *writing essays*; first, we have
    to learn about the patterns of an essay; then, we analyze the topics and write
    them; and finally, we check the grammar.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the process of writing an essay, when writing code, we have to analyze
    the patterns or grammar of the programming language, then we analyze the problems,
    and then we write a program. Finally, we check its grammar, which we normally
    do with alpha and beta testing.
  prefs: []
  type: TYPE_NORMAL
- en: This book will try to turn you into a person who can analyze a problem, build
    noble logic, and come up with an idea that will solve that problem. We won't make
    this journey monotonous; instead, we will learn about Python syntax by building
    games in each chapter. By the end of this book, you will be thinking like a programmer—maybe
    not a professional one, but at least you will have developed the skill to make
    your own programs using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two crucial things you''ll learn about in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, you will learn about the vocabulary and grammar of Python. I don't
    mean learning about Python theory or history. First, we have to learn about Python
    syntax; then, we will see how we can create statements and expressions with that
    syntax. This step includes collecting data and information and storing it in an
    appropriate data structure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, you will learn about the procedures that come with the idea of calling
    the appropriate methods. This process includes using the data that was collected
    in the first step to get the intended output. This second step is not specific
    to any programming language. This is going to teach us about various programming
    prototypes rather than just Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning any other programming languages after learning about Python is a lot
    easier. The only difference you will observe in other programming language is
    syntax complexities and program debugging tools. In this book, we will try to
    learn about as many programming paradigms as possible so that we can start a programming
    career.
  prefs: []
  type: TYPE_NORMAL
- en: Are you still unsure about Python?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some of the products that have been made with Python:'
  prefs: []
  type: TYPE_NORMAL
- en: No list starts without mentioning Google. They use it in their web search system
    and page rank algorithm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disney uses Python for its creative processes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BitTorrent and DropBox are written in Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mozilla Firefox uses it to explore content and is a major contributor to Python
    packages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NASA uses it for scientific purposes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list goes on and on!
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how code procedures work in simple terms.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining code procedures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To explain how code procedures work in simple terms, let's take the example
    of making an omelet. You start by learning the basics from a recipe book. First,
    you gather some utensils and make sure they are clean and dry. After that, you
    beat the eggs, salt, and pepper until it's all blended. Then, you add butter to
    your non-stick pan, add your egg mixture, and cook it or even tilt the pan to
    check whether every part of the omelet is cooked or not.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of programming, first, we talk about collecting our tools, such as
    the utensils and eggs, which relates to collecting data that will be manipulated
    by the instructions we write in our programs. After that, we talk about cooking
    the eggs, which is your methods. We normally manipulate data in methods to get
    output in a form that is meaningful to the user. Here, the output is an omelet.
  prefs: []
  type: TYPE_NORMAL
- en: Giving instructions to a program is the job of a programmer. But let's distinguish
    between a client and a programmer. If you are using a product where you give instructions
    to the computer to perform tasks for you, then you are a client, but if you design
    instructions that will complete tasks for a product you've created for everyone,
    this indicates that you are a programmer. It is only a matter of *for one* or
    *for everyone* to determine whether a user is a client or programmer.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the instructions we will use in our Windows Command Prompt or Linux
    Terminal will be for opening the directory of our machine. There are two ways
    of performing this action. You can either do it using a GUI, or you can use the
    Terminal or command prompt. If you type in the `dir` command in the respective
    field, you are now telling the computer to display the directories in that location.
    The same thing can be done in any programming language. In Python, we have modules
    to do this for us. We have to import that module before we can use it. Python
    provides a lot of modules and libraries to perform such operations. In a procedural
    programming language such as C, which allows low-level interaction with memory,
    this makes it harder to code, but with Python, it is easier to use the standard
    library, which makes the code shorter and readable. David Beazley, the author
    of *How to Think Like a Computer Scientist Learning Python*, was once asked, *why
    Python?* He simply replied, *Python is simply a lot of fun and more productive*.
  prefs: []
  type: TYPE_NORMAL
- en: Conversing with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python has been around for many years (nearly 29), and regardless of all of
    the upgrades it has had to go through, it's still standing as the easiest language
    for beginners to learn. The primary reason for this is that it can be correlated
    to the English vocabulary. Similar to how we make statements with English words
    and vocabulary, we can write statements and operations with Python syntax that
    commands can interpret, execute, and provide us with a result. We can make a sentence
    such as *go there* as a command to reflect the position of something with conditionals
    and flow controls. Learning the syntax of Python is pretty easy; the actual task
    is to use all of the resources provided by Python to build brand new logic to
    solve intricate problems. Just learning the basic syntax and writing a couple
    of programs is never enough; you have to practice enough so that you can come
    up with revolutionary ideas to solve real-world problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a lot of vocabulary in the English dictionary. Unlike the English dictionary,
    Python only contains a few words in its container, which we normally call reserved
    words. There are 33 of them in total. They are instructions that tell the Python
    interpreter to perform specific operations. Modifying them isn''t possible—they
    can only be used to perform specific tasks. In addition, when we call a print
    statement and write some text in it, it is expected that it prints out that message.
    If you want to make a program that takes input from the user, calling the print
    statement is useless; the input statement has to be called to achieve that. The
    following table shows our 33 reserved words:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `False` | `class` | `finally` | `is` | `return` |'
  prefs: []
  type: TYPE_TB
- en: '| `None` | `continue` | `for` | `lambda` | `try` |'
  prefs: []
  type: TYPE_TB
- en: '| `True` | `def` | `from` | `nonlocal` | `while` |'
  prefs: []
  type: TYPE_TB
- en: '| `and` | `del` | `global` | `not` | `with` |'
  prefs: []
  type: TYPE_TB
- en: '| `as` | `elif` | `if` | `or` | `yield` |'
  prefs: []
  type: TYPE_TB
- en: '| `assert` | `else` | `import` | `pass` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `break` | `except` | `in` | `raise` |  |'
  prefs: []
  type: TYPE_TB
- en: Each of the preceding words can be found in our English dictionary. In addition,
    if we search for the word `return` in the dictionary, it simply gives us the verb
    meaning of coming or going back to the original place. The same semantics are
    used in Python; when you use the return statement with functions, then you are
    pulling out something from the function. In the upcoming chapters, we will see
    all of these keywords in action.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have started to learn how to converse in Python by examining its
    keywords, we will install Python. Gear yourself up and open your machine for some
    fun.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at installing Python on Windows and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: For the Windows platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python doesn''t come pre-installed on Windows. We have to download it manually
    from its official website and then install it. Let''s look at how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, open your favorite browser and open the following URL: [https://www.Python.org/](https://www.python.org/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be directed to the page that''s shown in the following screenshot. Once
    you have been redirected to Python''s official website, you will see three sections: Download,
    Docs, and Jobs. Click on the Download section at the bottom of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/418d7334-70bb-4486-a8ec-a9fb501b7e51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see a list of files, as shown in the following screenshot. Pick the
    file that''s appropriate for your platform. We''re looking at the installation
    for Windows in this section, so we will click on the Windows executable link.
    This is highlighted in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/a9ed1edb-d919-4d0c-85cc-b1777249bac6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on that, you will get a file that needs to be downloaded. After
    opening that downloaded file, you will get the installer, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/32dc46f2-a12d-4779-97d3-0836ea61f2d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the installer, make sure you check the Add Python to PATH box. This will
    put the Python library files in our environment variables so that we can execute
    our Python programs. Afterward, you will get a message about its successful installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/cd48caf9-57f4-4522-8a64-2781194055fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press the Windows key + *R* to open Run and type `cmd` in the Run tab to open
    your Windows Command Prompt. Then, type `Python` in the command shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/1c6076a2-5cd9-4d90-858d-cb9f9d069092.png)'
  prefs: []
  type: TYPE_IMG
- en: If you get the Python version that's displayed in the preceding screenshot,
    then Python has been successfully installed on your machine. Congratulations!
    Now, you can get your hands dirty by writing your first program with Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you get an error saying **Python is not recognized as an internal or external
    command**, you have to explicitly add Python to the path environment variable.
    Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Control Panel, navigate to System and Security, and then go to System
    to view the basic information about your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your Advanced system settings and then Environment Variables....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Variable section, search for Path. Select the Path variable and press
    the Edit... tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click New in the Edit Environment Variable tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add this path so that it's pointing to your Python installation directory, that
    is, C:\Users\admin\AppData\Local\Programs\Python\Python37\.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the OK button to save these changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7b357caf-b0c1-43a3-8edd-8975e0497710.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have successfully installed Python for Windows. If you are using a Mac,
    the next section will help you to access Python too.
  prefs: []
  type: TYPE_NORMAL
- en: For the Mac platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python comes pre-installed with Mac OS X. To check the version of Python you
    have installed, you should open your command line and type `Python --version`.
    If you get a version number of 3.5 or newer, you don''t need to go through the
    installation process, but if you have version 2.7, you should follow these instructions
    to download the latest available version:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser and type in [https://www.Python.org/downloads/](https://www.python.org/downloads/).
    You will be sent to the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/663aa19c-0e4d-47ca-87f9-a0688af61e29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the macOS 64-bit/32-bit installer. You will be provided with a `.pkg`
    file. Download it. Then, navigate to that installed directory and click on that
    installer. You will see the following tab. Press Continue to initiate the installer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/60d48855-ca1a-4a01-aca4-2655797228b4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Whenever you download Python, a bundle of packages will be installed on your
    computer. We can't use those packages directly, so we should call them individually
    for each independent task. To write programs, we need an environment where we
    can call Python so that it can complete tasks for us. In the next section, we
    will explore the user-friendly environment provided by Python where we can write
    our own programs and run them to view their output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have installed Python version 3.7 on Mac OS X, you can open your
    Terminal and check the version of Python you have with the `python --version` command.
    You will see Python 2.7.10\. The reason for this is that Mac OS X comes preinstalled
    with version 2.7+ of Python. To use the newer version of Python, you have to use
    the `python3` command. Type the following command into your Terminal and observe
    the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to make sure Python uses the interpreter with the newer version that you
    just installed, you can use an aliasing technique that will replace the current
    working Python version with Python3\. To perform aliasing, you have to follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Terminal and type in the `nano ~/.bash_profile` command to open a
    bash file using the nano editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go to the end of the file (after import PATH) and type in the `alias python=python3` command.
    To save a nano file, press *Ctrl* + *X* and then *Y* to save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open your Terminal again and type in the same command that we used previously
    to check the Python version we have. It will be updated to the newer version of
    Python. From now on, in order to run any Python file from your Mac, you can use
    this Python command, followed by the signature of the file or filename.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Python Shell and IDLE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Python Shell is similar to Command Prompt for Windows and the Terminal
    for Linux and Mac OS X where you write commands that will be executed in the filesystem.
    The results of these commands are printed instantly within the shell. You can
    also get direct access to this shell using a Python command (> python)  in any
    Terminal. The result will contain an exception and an error due to the improper
    execution of the code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we ran into an error and the Python IDE is explicitly telling
    us the name of error we ran into, which in this case is `NameError` (a type of
    syntax error). `SyntaxError` occurs due to an incorrect pattern of code. In the
    preceding code example, when you write the `I love Python` syntax, this implies
    nothing to  the Python interpreter. You should write proper commands or define
    something properly if you want to rectify that problem. Writing `imput` instead
    of input is also a syntax error.
  prefs: []
  type: TYPE_NORMAL
- en: Logic errors or semantic errors occur even if your program syntax is correct.
    However, this doesn't solve your problem domain. They are dangerous as they are
    hard to track. The program is perfectly correct but does not solve any problem
    that it's intended to.
  prefs: []
  type: TYPE_NORMAL
- en: When you download the Python package on your machine, a **Python** **Integrated
    Development Environment** (**IDE**) called IDLE (Python's built-in IDE) is downloaded
    automatically onto your machine. You can type `IDLE` into the search bar to navigate
    to this environment. IDLE is a free open source program that provides two interfaces
    where you can write code. We can write scripts and Terminal commands in IDLE.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are familiar with what not to do in the Python Shell, let's talk
    about the particulars of the Python Shell—an environment where you can write your
    Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Particulars of the Python Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned previously, in this section, we are going to take a tour of
    the particulars of Python. This includes Python's built-in shell, Python's text
    editor (usually called Python script), and the Python documentation page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to learn about the particulars of the Python Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open Python Shell, you will see the following window. The first thing
    you will see in the shell is Python''s current version number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/a0bf29a2-3565-4a42-b1ed-133c27e51b65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Python shell, there are three angular brackets placed next to each other,
    like this: `>>>`. You can start writing your code from there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/90030578-dd0c-4d5c-b99c-0ba50a871dd7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press *F1* to open the Python documentation or go to the Help tab and click
    Python Docs F1 (on a Windows machine). To get access the documentation online,
    please go to [https://docs.python.org/3/](https://docs.python.org/3/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/152dcd04-ce27-4a80-bf41-db37e2330bdd.png)'
  prefs: []
  type: TYPE_IMG
- en: I hope that you are now familiar with the Python Shell. We are going to write
    a lot of code in the shell, so make sure you get familiar with it by customizing
    or playing with this environment a bit longer. After you are done with it, you
    can proceed to the next section, where you are going to learn about what you need
    to know before you write your first Python program.
  prefs: []
  type: TYPE_NORMAL
- en: Building blocks of Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some conventional patterns that we make use of while writing programs
    in Python. Python, being a high-level language, doesn''t care about low-level
    routines, but has the capability to interact with them. Python is made up of six
    building blocks. Every program that is made with Python revolves around them.
    These building blocks are input, output, sequential execution, conditionals, recursion,
    and reuse. Let''s go over them now:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**: Input is everywhere. If you make an application with Python, it
    mainly deals with formatting the input of the user in a way that would harvest
    meaningful results. There is an built-in `input()` method in Python so that we
    can get data input from the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Output**: After we have manipulated the data that was entered by a user,
    it''s time for us to present it. In this layer, we make use of design tools and
    presentation tools to format meaningful output and send it to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sequential execution**: This preserves the sequence of execution of statements.
    In Python, we normally use indentation, which is spaces that denotes scopes. Any
    commands that are at zero-level indentation are executed first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conditionals**: These provide flow control to programs. Based on comparisons,
    we make logic that will make a flow of the code and will either execute or skip
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recursion**: This is anything that needs to be done until some condition
    is met. We normally call them **loops**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reuse**: Write code once, use it a million times. Reuse is a paradigm where
    we write a set of code, give it a reference, and use it whenever required. Functions
    and objects provide reusability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a program in Python Shell may be easy to debug for most programmers,
    but it can create overhead in the long run. If you want to save your code for
    future reference or you want to write multi-line statements, you will probably
    be overwhelmed with the deficit feature of the Python interpreter. To solve this
    problem, we have to create a script file. They are called scripts because they
    allow you to write multi-line statements in single files that you can run immediately.
    This comes in handy when we have multiple data storage and files to deal with.
    You can distinguish a Python file from other files by its extension, that is, `.py`.
    You should also save your Python script files with the `.py` extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run your script file from a Terminal or Windows Command Prompt, you have
    to tell your Python interpreter to run that file by its filename, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, `$` is an operating system prompt. First, you have
    to call the Python interpreter with the `Python` command and tell it to execute
    the file name next to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see the content of the `Python` file within the Terminal, use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To exit the Python Terminal, write the `exit()` command in the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve learned how to open and exit the interface of the Python environment,
    we have to learn about its building blocks. Many beginners make a fallacious assumption
    that a program has only two building blocks: input and output. In the next section,
    we will see how to debunk this assumption by employing six building block of programming.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The toughest part of programming is learning the art of programming paradigms
    such as object-oriented programming, DRY principles, or the linear time complexity
    model. If you get a good grasp of these prototypes, learning any new programming
    language will be a piece of cake. Having that said, learning all of these paradigms
    with Python is a lot easier than Java or C# as, in Python, the code will be shorter
    and the syntax is English-friendly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/940ac0b9-a662-43c9-9a87-88d7accbce8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we write our first program, we will install one more IDLE for the upcoming
    chapters where we will be writing program-intricate games. In those types of games,
    the features that are provided by IDLE are not enough, and so we will see how
    to install PyCharm—an advance IDLE—in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the PyCharm IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this chapter, we discovered IDLE. We have already seen an environment
    where we can write code and get output straightaway. However, you can probably
    imagine what happens if we have lots of code to be executed at once, maybe 1,000
    lines of code, one by one. We have to solve this problem by writing a script,
    which is a collection of Python code. This will be executed at once instead of
    being executed line by line in the shell of IDLE.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to write a script, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Search tab from your PC and type `IDLE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the File tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press on New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new file will be generated. You can write multiple expressions, statements,
    and commands in that single file. The left-hand side of the following screenshot
    shows the Python script where you can write multi-line statements, while the right-hand
    side of the following screenshot shows the Python Shell, where you will execute
    your script and get instant results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/83321431-77d1-42cd-8cef-856e1ffb2058.png)'
  prefs: []
  type: TYPE_IMG
- en: After you've finished writing your scripts, you have to save it before running
    it. To save your file, go to File and click on Save. Provide the appropriate filename
    for your script by placing the `.py` extension at the end of it, for example, `test.py`.
    Press *F5* to execute your script file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build many games throughout this book where we will have to deal with
    images, physics, rendering, and the installation of Python packages. This IDE,
    that is, IDLE, is not capable of providing smart IDE features such as code completion,
    integration and plugins, and branching of packages. Hence, we have to upgrade
    to the best Python text-enriched IDE, that is, the PyCharm IDE. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)
    to download the PyCharm environment. The installation of PyCharm is as simple
    as the installation of any other program. After you''ve downloaded the installer
    from the website, click on that installer. You should see the following window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/c9a4caf9-823a-4248-81e6-f5ab098bec4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Next> button and install it on the appropriate drive. After you've
    installed it, search for `PyCharm` in the search bar and open it. You should see
    the following window:![](Images/ac6b5f5e-7caa-41c4-9661-e5a39606e5ca.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click +Create New Project and give your project a name. To create a new
    Python file, left-click on your project name, click on New, and then click the Python
    File tab:![](Images/c7753959-cb44-41e4-b346-8f4a7b602dbb.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we have everything that we need to master this book—I mean the tools, but
    obviously, we have to learn every possible paradigm of Python to master the concept
    of Python. Now that you are fully equipped with these tools, let's write our first
    effective Python program, *No Hello World.*
  prefs: []
  type: TYPE_NORMAL
- en: Programming code without Hello World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a tradition in the programming world to print *Hello World* as our
    first program. Let''s break the mold and make our first program one that takes
    input from the user and prints it to the console. Follow these steps to execute
    your first program:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your IDLE and type in the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Press *Enter* to execute the command. You will get a message saying Enter your
    Name:. Type in your name and hit *Enter*. You will see the output print the name
    that you just passed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We made use of two commands here, also known as functions We will learn about
    them in the upcoming chapters. Let''s go over these two functions now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`input()` is a built-in function of Python that will take input from the user.
    Spaces are also included as characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print()` is a built-in function of Python that will print whatever is passed
    inside the parentheses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have started to code our first program with Python using Python's
    built-in IDLE, it's your turn to test the working of IDLE. Since we are going
    to be building lots of games using IDLE, make sure you get familiar with its interface.
    The core programming modules that we learned about in this chapter, such as Python
    keywords and the input-print function, are important as they help us to build
    programs that can take input from users and display it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a tour of the basics of Python and learned how similar
    its vocabulary is to English. We installed the Python package on our machine and
    viewed the pre-installed IDE of Python, known as IDLE. We saw how scripts can
    be written on the Python IDE and how we can execute them. Then, we installed the
    feature-rich Python text editor known as PyCharm IDE on our machine. We wrote
    our first Python program, which is able to take input from the user and display
    it on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The skills that you have acquired in this chapter are fundamental for building
    the flow of a program. For instance, our program was able to take input/output
    data. Any game that's made in Python has to be interactive for the users or players,
    and this is done through the input and output interface. In this chapter, we looked
    at how to take input from a user and display it. As we continue with this book,
    we will explore various ways to build a program that handles user events such
    as taking input from the mouse, keyboard, and screen-taps.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will be crucial as we will look at Python essentials such as
    values, types, variables, operators, and modules. We will also start to build
    a tic-tac-toe game.
  prefs: []
  type: TYPE_NORMAL
