- en: 'Section 3: Reaping the Benefits of Functional Programming'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned a lot about the building blocks of functional programming, how
    to write them in C++, and how to use them to build function-centric design. It's
    time to look at a few specialized topics strongly related to functional programming.
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll dive into the huge topic of performance optimization. We'll learn
    a few optimization techniques that fit particularly well with pure functions (for
    example, memoization and tail recursion optimization). We will look at both memory
    footprint and execution time optimization, carry out many measurements, and compare
    approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will look into how functional programming enables parallel and asynchronous
    execution. Immutability leads to the avoidance of shared state, therefore, to
    simpler patterns of parallel execution.
  prefs: []
  type: TYPE_NORMAL
- en: But we can take advantage of more functional programming. Data generators and
    pure functions enable an automated testing paradigm called **property-based testing**,
    which allows us to check, with very little code, many possible scenarios. Then,
    if we need to refactor complex existing code, we will see that we can first refactor
    it to pure functions, quickly write tests for them, and then decide whether to
    redistribute them into classes or preserve them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we''ll go one level higher, to an architectural paradigm based on
    immutable state and, therefore, something that is closely connected to functional
    programming: event sourcing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following chapters will be covered in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml), *Performance Optimization*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 11](56c096aa-67a7-48ad-bf22-a78367941a26.xhtml), *Property-Based Testing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 12](3b3ccc61-d5b6-4e3c-b142-cf32355f6229.xhtml), *Refactoring to and
    through Pure Functions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 13](03d5f0b0-bfc9-4526-992e-8e4f23cec30b.xhtml), *Immutability and
    Architecture - Event Sourcing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
