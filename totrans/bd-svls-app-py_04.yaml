- en: Deploying Serverless APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have come a long way in our journey of learning about serverless
    applications and building serverless engineering. We have learned what the serverless
    paradigm actually is, how the AWS Lambda function works, understanding the internals
    of AWS Lambda, along with a detailed understanding of how several triggers work.
    We have also done several mini projects around experimenting with triggers and
    deploying them as end-to-end serverless pipelines.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will be learning how to build efficient and scalable serverless
    APIs, using the AWS Lambda and AWS API Gateway services. We will start with understanding
    how the API Gateway works, instead of diving directly to building the serverless
    API. After that, we will understand how API Gateway and AWS Lambda integrate with
    each other. And finally, we will be creating and deploying a fully functional
    serverless API, as part of your learning from this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: API methods and resources
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up integration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the Lambda function for API execution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling authentication and user controls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API methods and resources
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will be learning about the API service of AWS, which is
    the API Gateway, and understanding the components and settings available in the
    console for the user who is creating APIs. We will go through all of the components
    and understand the API Gateway better. The steps to create the serverless APIs
    are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by opening the API Gateway console, which looks like this:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77983079-abbd-4875-851d-6e09321bdc6c.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: 'In the API Gateway console, click on the Get Started button to start creating
    an API. It will take you to an API creation wizard with a popup saying Create
    Example API:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8453d058-8208-40d0-8c88-c518a75b43d0.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the OK button, you will be redirected to a page where the
    Example API is shown, from which you can get an idea of what an API response looks
    like:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a58f0ab-0c83-4c3b-a724-d6b68316d241.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: 'The API we are building in this example is for a pet store and for maintaining
    the pets inside the store. By going through the API, you will see what the bits
    and pieces of an API looks like. The API looks like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1850eb9c-f409-44c6-a7a8-56e6754e29bf.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the Import button at the end, you will be redirected to the
    PetStore (b7exp0d681) API page that we have just created. The API page with all
    the components looks like this:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/314f78ff-589d-4cd6-b632-7989087b0f9c.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: 'The resources in this API are the GET and POST resources, where you can add
    pets and view the pets, which are available as a list. The list of resources from
    the API we have created is as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6cf3936a-cc2f-46cf-b706-090012aee0ea.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on the first GET resource, we can see a detailed execution flow
    from the client to the endpoint and back to the client. The execution flow of
    the resource looks like this:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f473698f-c3d1-4c97-a106-a7d2eebecb55.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: 'Now, if we click on the POST resource, we will find a similar model execution
    flow for the POST resource. It looks very similar to that of the GET resource,
    however, here the API endpoint is mentioned as a URL, as we are trying to retrieve
    the result from it. The execution model looks as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c4d2b07-3fa4-4230-ad87-fda3eb91fb73.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: 'In the API Gateway, there is something called Stages, which can be used as
    versioning models for an API. Some common names for Stages in practice are **test**, **development**,
    and **production**. The Stages menu looks like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/862e05dd-969e-43ee-8d11-87e3174223fd.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the Create option, it will open a creation wizard for the
    stage. This looks as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/24dfbf47-6fa7-4e7a-bce3-c019246ad81c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: 'You can select any name for the Stage name value, and add the Stage description value
    according to the name you have assigned and the purpose you have in mind for this
    stage. Before that, you need to deploy the API that you have created. This can
    be selected in the Actions drop-down menu as the Deploy API button, as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以为阶段名称值选择任何名称，并根据您分配的名称和此阶段的目的添加阶段描述值。在此之前，您需要部署已创建的API。这可以在“操作”下拉菜单中选择“部署API”按钮来完成：
- en: '![](img/1f42a071-fc01-4eff-b37c-5f3c41c299d3.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f42a071-fc01-4eff-b37c-5f3c41c299d3.png)'
- en: 'In the next menu, you can choose the Stage name and other details, before finally
    clicking on the Deploy button, which will deploy your API with that particular
    stage. This can be seen as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个菜单中，您可以选择阶段名称和其他详细信息，然后最终单击“部署”按钮，这将使用特定阶段部署您的API。如下所示：
- en: '![](img/f694b7f3-ae32-4f2e-9f5b-5bf35a054543.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f694b7f3-ae32-4f2e-9f5b-5bf35a054543.png)'
- en: 'The deployed stage would look as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的阶段如下所示：
- en: '![](img/13c5a18c-5468-4bce-9a6b-5b38c41659ca.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13c5a18c-5468-4bce-9a6b-5b38c41659ca.png)'
- en: Setting up integration
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置集成
- en: As we now understand how the AWS API Gateway service works at a basic level,
    we will move on to use that knowledge for building an end-to-end project which
    involves deploying a completely serverless API.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经了解了AWS API Gateway服务的基本工作原理，我们将继续使用这些知识来构建一个涉及部署完全无服务器API的端到端项目。
- en: 'In this section, we will be building and deploying a completely serverless
    API function from scratch, along with learning the internals and other implementation
    details of the AWS Lambda—AWS API Gateway integrations. We will be building the
    serverless API step-by-step. So, follow along with the steps in this order. The
    procedure is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从头开始构建和部署一个完全无服务器的API函数，并学习AWS Lambda与AWS API Gateway集成的内部和其他实现细节。我们将逐步构建无服务器API。因此，请按照以下顺序进行操作。该过程如下：
- en: 'Firstly, we will start by creating a new API. This can be done via the Lambda
    console which looks like this:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将开始创建一个新的API。这可以通过Lambda控制台完成，如下所示：
- en: '![](img/70ae1912-ad8b-499f-a057-7643a4028bb5.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70ae1912-ad8b-499f-a057-7643a4028bb5.png)'
- en: 'Once you have clicked on the +Create API button, you will be redirected to
    the API creation wizard, where you will be asked to enter the name and description
    of the API you are intending to build. For now, I have entered the name as `TestLambdaAPI`.
    However, you are free to add whatever name and description you would like to enter.
    The API creation console looks like this:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“+创建API”按钮后，您将被重定向到API创建向导页面，在那里您将被要求输入您打算构建的API的名称和描述。目前，我已将名称输入为“TestLambdaAPI”。但是，您可以自由添加任何名称和描述。API创建控制台如下所示：
- en: '![](img/547a9a71-871c-4385-b1e4-af300a8f7980.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/547a9a71-871c-4385-b1e4-af300a8f7980.png)'
- en: 'Once you click on the Create API button, you will be redirected to the page
    of the API you have created. The API page would look similar to this:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建API”按钮后，您将被重定向到您创建的API页面。API页面看起来类似于这样：
- en: '![](img/9062284a-2428-4469-b50b-b3d75a24e582.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9062284a-2428-4469-b50b-b3d75a24e582.png)'
- en: 'Now that we have successfully created an API, we will now go ahead and create
    resources in the API. You can do that by clicking on the Create Resource option
    in the Actions drop-down menu:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经成功创建了一个API，我们现在将继续在API中创建资源。您可以通过单击“操作”下拉菜单中的“创建资源”选项来执行此操作：
- en: '![](img/91bb7f8c-6aa0-42cd-9657-d7d3d26a801d.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91bb7f8c-6aa0-42cd-9657-d7d3d26a801d.png)'
- en: 'This would open up a resource creation wizard where you can add the name and
    resource path of the API resource which we are intending to build. After creating
    the resource, click on the Create Resource button for your settings for the API
    resource to be created accordingly. For the sake of this tutorial, I have named
    it `LambdaAPI`. However, you can give it any name you want. The API creation wizard
    looks like this:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个资源创建向导，在这里您可以添加我们打算构建的API资源的名称和资源路径。创建资源后，单击“创建资源”按钮，以便相应地创建API资源的设置。出于本教程的目的，我将其命名为“LambdaAPI”。但是，您可以随意命名。API创建向导如下所示：
- en: '![](img/c1399e16-8ea2-4093-9731-40da3feafbd5.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1399e16-8ea2-4093-9731-40da3feafbd5.png)'
- en: 'The resource that you have just created is now live in the API console; you
    can see it under the Resources section:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚创建的资源现在在API控制台中处于活动状态；您可以在“资源”部分下看到它：
- en: '![](img/8d176ac4-5444-4d97-908b-377d008e9bf9.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d176ac4-5444-4d97-908b-377d008e9bf9.png)'
- en: 'You can create versions of a resource or even just a resource under a resource.
    Let''s go ahead and create one. For this, you need to click on the resource that
    you have already created. Then, click on the Create Resource option in the drop-down
    menu in the Actions menu:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以创建资源的版本，甚至只是资源下的资源。让我们继续创建一个。为此，您需要单击已创建的资源，然后单击“操作”菜单中的下拉菜单中的“创建资源”选项：
- en: '![](img/7133db2c-ff1c-4d50-9f16-4ec673ec2f21.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7133db2c-ff1c-4d50-9f16-4ec673ec2f21.png)'
- en: 'This would open up a similar resource creation wizard under the resource which
    we have already created. You can name that resource as `version1` or just as `v1`
    which is a regular software practice. I have named it `v1`. However, you can name
    it whatever you want to:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在我们已经创建的资源下打开一个类似的资源创建向导。您可以将该资源命名为“version1”或只是“v1”，这是一种常规的软件实践。我将其命名为“v1”。但是，您可以根据需要命名它：
- en: '![](img/ee774cc7-8eaa-4cfe-9b61-51654b86ffd6.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee774cc7-8eaa-4cfe-9b61-51654b86ffd6.png)'
- en: 'Now, we have a resource named `v1` under the already existing resource, `/lambdaapi`.
    We can see this under our Resources section. So, now the resources hierarchy of
    our API looks like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在已有资源“/lambdaapi”下有一个名为“v1”的资源。我们可以在“资源”部分中看到这一点。因此，现在我们的API的资源层次结构如下：
- en: '![](img/3f05ee06-fdd4-4f28-9089-254cd78b0b5e.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f05ee06-fdd4-4f28-9089-254cd78b0b5e.png)'
- en: 'We will be creating a serverless API for getting and querying the list of pets
    in a pet store. So, the following steps will be aligned accordingly. The API should
    return the name of the pets. So, we will have a new resource for pets for that
    purpose. We will be creating a resource for this under the `/v1` resource:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/942939eb-4f65-48bf-b506-3b0fb5a7bbb1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'The resulting hierarchical structure for our API looks like this, after adding
    the `/pets` resource under the `/v1` resource:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c04c2044-ddb5-42ca-b54c-2ddd1236f97f.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will add a custom resource which enables us to query the API. By custom,
    we mean that any string can be added to the resource when sending a request to
    this API, and the API would send back a request after checking and querying for
    that string via a Lambda code. The custom resources can be differentiated from
    the normal ones, as they can be created with curly braces. The following screenshot
    will help you understand how to create them:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5664f793-4837-4cd6-856f-e83a0541f088.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on the Create Resource button, the new custom child resource
    for `/pets` will be created. The hierarchy of the resources is now as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/48c41ba6-1303-4315-a62f-d2861059cf79.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'The overall structure of the API looks like this, as specified in the top-right
    part of the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/783da33a-f27a-4981-965d-5d5fcf215529.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will add methods to this custom resource. As we will only be querying
    the list of pets, we will only add the GET method. This can be done by clicking
    on the {type} resource and clicking on Create Method in the drop-down Actions menu
    in the top panel:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fc5dcff4-b616-48f4-a946-c1d94f887678.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: 'This would create a small drop-down style menu under the {type} resource where
    you can select a method from the available methods:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f86516df-6431-4f81-8d74-837a5b629442.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: 'We need to select the GET option from the available options. This would look
    as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7415aff4-6d63-4832-8736-fb8a7877e7e9.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the GET option and clicking on the small tick button beside
    it, we will have created the GET method under our {type} resource. The hierarchy
    now looks like this:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef4c6cd9-0912-4457-8dec-95c6acf52921.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: Deploying the Lambda function for API execution
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will have a look at the steps to deploy the Lambda function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'The details of the GET method can also be seen on the right-hand side of the
    API console, when you click on that method. The details look as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c67dfce-45f9-4648-8922-7b02b8eb568e.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'In the GET method console, click on the Lambda Function option. Select any
    one region depending on your preference. I have chosen us-east-1 as the region
    as shown in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4ab15692-b5bf-4825-9b11-e15eef1bdd6f.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: 'As expected, it says we do not have a Lambda function in that region. So, we
    need to go ahead and create one. Click on the Create a Lambda Function link. This
    will take you to the Lambda creation console which we are already comfortable
    with:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27281b9e-3209-4530-8784-256f386b2f18.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: 'From here, choose the keyword : hello-world-python blueprint from the list
    of blueprints:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc88530b-ba15-4927-8a60-a196fc2219da.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: 'In the next console, choose the basic information for the Lambda function as
    we have done in the previous chapters:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2983dee9-a909-4091-b017-3316de0044ef.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: 'After adding the relevant details, click on the orange Create function button.
    That will take you to the page of the Lambda function you have just created. The
    code can be edited from there onwards:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96a0e196-367d-4920-8553-2a3e28bf186a.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: 'In the function''s code, use this code instead of the one which is provided
    along with the blueprint:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e675ac9d-79e7-4a7a-bb1f-b6decc56f2ce.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: 'We are now done with tweaking the function code. Now, you can go ahead and
    save the function:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aacde03a-2d88-4c33-8949-74da00fed010.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: 'Now, head back to the API Gateway console to the GET method page. Here, under
    the Lambda functions in the us-east-1 region, I start getting the Lambda function
    which I have just created (serverless-api) as an option:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e6d06af-02dc-4b95-ac11-a7e242aca617.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: 'On clicking Save, you will see a popup asking you to confirm that you are giving
    API Gateway permission to invoke your Lambda function, you can acknowledge it
    by clicking on OK:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/852f0f08-5d10-41e9-b073-94f4f2e49223.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on OK, you will be redirected to the data flow page of the GET method,
    that looks like this:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1f73f62-da07-4029-a727-ee926996d125.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: Handling authentication and user controls
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After deploying, next we will discuss how to handle the authentication and
    user controls. The steps are as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have successfully created the skeleton of our serverless API, we
    will now work on the nitty-gritty details which are needed to make it a fully
    functional API. We will start with applying the mapping templates. This can be
    done in the Integration Request menu. Clicking on the Integration Request link
    will take you to a console which looks like this:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5251a40d-48d2-48c1-a7af-f649a985fce3.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: 'If you scroll down a bit in the same console, you will notice the Body Mapping
    Templates section at the end:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f301f36-d13b-43be-8435-b925bd566be2.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Body Mapping Templates will unfurl the options available in
    that particular section:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f52aa43b-becc-406a-84e5-51ad7dab2f78.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: 'Select the second option which says When there are no templates defined (recommended).
    And then, click on the Add mapping template option and add `application/json`, and
    click on the small grey tick symbol beside it:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef5353b2-1f3a-4e5e-acc0-e515394882af.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: 'After clicking the small grey tick symbol beside it, the Body Mapping Templates
    section space will look like this:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/094fc096-36f9-4054-b7bd-b13d313773a6.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the template textbox, add the following code and click the Save button
    underneath the text box:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/480207dc-5a03-4384-af3e-3b5c9bc224ba.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: 'So, after all these steps, the resulting Body Mapping Templates section will
    look like this:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e9e666be-3cb8-4849-9ef0-18d743d2949b.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: 'Now, going back to the Method Execution page, we can see the TEST option on
    the left with a lightning bolt symbol beneath it:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff995a15-e50f-49e0-b231-2780b4d09551.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the TEST button on the left-side in the Client section and above
    the thunderbolt option will take you to a page where you can test the API that
    you''ve just created:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88b995a6-60cf-4c81-9957-29eda8e0c2b2.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s type `Exotic` in the textbox below {type} and click on the Test button
    at the bottom. If everything goes right, we should see the list of all the exotic
    pets we have entered in the function code of our Lambda function:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/849e6fda-c63d-42d8-90be-e4a32cb2fd18.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: And rightly so, we did get the list of all of the exotic pets in the catalog.
    So, this brings this chapter to an end, where you have learned how to build a
    fully fledged serverless API from scratch, including how to deploy it.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In addition, if you want to add additional security settings, such as Authorizations
    and API Key Required, you can do it in the Method Request menu:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1387a18f-b76d-4345-a542-94ee7923f244.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to build a completely serverless API from
    scratch. We have also learned how to add more resources and methods for the API,
    as well as how to deploy it successfully to multiple stages of development and
    how to add additional security settings such as authorization and API keys for
    authentication purposes.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: We then learned how to associate a Lambda function with our API Gateway's API
    service for handling the computational tasks of our API.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be learning about logging and monitoring serverless
    applications. In that chapter, we will learn about the logging and monitoring
    services of AWS such as CloudWatch Metrics, CloudWatch Logs, and CloudWatch Dashboards
    in detail, and try to set them up for our serverless applications. We will also
    learn how to create a logging and monitoring pipeline from AWS Lambda to these
    monitoring tools using some AWS services.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习有关无服务器应用程序的日志记录和监控。在该章节中，我们将详细了解AWS的日志记录和监控服务，如CloudWatch指标、CloudWatch日志和CloudWatch仪表板，并尝试为我们的无服务器应用程序设置它们。我们还将学习如何使用一些AWS服务从AWS
    Lambda创建日志记录和监控管道到这些监控工具。
