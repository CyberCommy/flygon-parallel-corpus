- en: Chapter 3. Network Reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've come to grips with the way the bash shell works and learnt a
    couple of tricks and tips to wield it effectively, we can move on to using the
    shell and the Kali Linux command-line utilities to collect information about the
    networks you find yourself in, in your day-to-day routines.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how to use tools like Nmap, Whois, Dig, and various
    other network information grabbing Swiss Army knives to learn more about the security
    standing of the hosts on your local network or on networks external to yours.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover a tool called `whois` that facilitates querying
    Whois servers for information about organizations and the IP addresses and domains
    they are responsible for.
  prefs: []
  type: TYPE_NORMAL
- en: Interrogating the Whois servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whois servers hold information about what IP addresses, domain names, and other
    network addressing relevant information certain organizations are responsible
    for or strictly associated with. When you request information about a Whois record,
    all you are doing is querying a database hosted on a Whois server using a special
    application protocol called Whois. The details of the protocol are referenced
    in the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: During a penetration test, you may be given a list of IP addresses to work with,
    or a domain name that resolves to an IP address. Often, you might want to know
    who this IP belongs to and what else is likely hosted on the same logical network
    block; Whois is a great tool to find out this kind of information.
  prefs: []
  type: TYPE_NORMAL
- en: Interrogating Whois servers from your command line is done by using a tool called
    `whois`, which comes shipped with many Linux/Unix distributions, Kali included.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of options you can specify when you use the `whois` tool.
    Here, we will only be covering a few very useful ones. For those of you who would
    like to learn more about the `whois` tool, please see the information included
    in the *Further reading* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic functionality of Whois is to return a given set of attributes associated
    with an IP address: this collection of attributes is called a **whois** record.
    Looking up a record using the IP address is as simple as firing off the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example, here''s how you retrieve the Whois record for one of the Google
    server addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interrogating the Whois servers](img/5107OT_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'What you have in front of you when you run a Whois query or lookup is called
    an object, and each object has a bunch of attributes associated to it in key-value
    pairs. Each object has information regarding the person responsible for the record/object
    itself: this person is referred to as a maintainer. It is up to the maintainer
    to decide which attributes to use when he/she describes the related object. There
    are a number of possible attributes, which are referenced in the *Further reading*
    section for those of you who are interested in getting the full story.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides just querying the Whois server for information associated with an IP
    address, you may also want to look up certain information associated with a given
    organization or maybe you want to look up all the information in the database
    that mentions a given value, for instance, the maintainer or a given e-mail address.
    Doing this is referred to as a reverse look attribute look up. The following command
    is used to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, consider looking up all the whois records that are maintained
    by the folks from Yahoo!. The following command shows how you do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may want to look up the maintainer name for some of your favorite IP address
    ranges and use them in this example. You may not get exactly the same results
    as in the following demonstrations since by default the `Whois` tool may rely
    on a Whois server specific to your country.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may want to filter out the IP addresses from this query. The simplest way
    to do this is with `grep`, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also want to filter out only the IP address for use in other tools
    such as `Nmap` and `Dig`, which we will be covering in further sections of this
    chapter. The following is a little bash command that will be able to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command should produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interrogating the Whois servers](img/5107OT_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Other attributes that you can use to do inverse queries are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-i admin-c [NIC-handle or person]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i person [NIC-handle or person]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i nsserver [Domain or address prefix or range or a single address]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i sub-dom [Domain]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i upd-to [email]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i local-as [autonomous system number]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are a number of them you could use: please see the *Further reading*
    section for the full list.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You could also use the `whois` tool to look up domain names related to a given
    domain name using the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, you could use it in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you could use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding a little `grep` and `awk` magic to the lookup, you could filter out
    useful information such as domain names, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We've pretty much covered the functions of the `whois` service that the penetration
    testers and security engineers may find useful. In the next section, we're going
    to cover using Dig to perform DNS interrogation.
  prefs: []
  type: TYPE_NORMAL
- en: Interrogating the DNS servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS servers exist to provide an association between the IP addresses that computers
    use and the domain names that people use. Usually, companies and organizations
    use multiple subdomains and may even use multiple domain names for a given IP
    address. Naturally, this means DNS servers are a wealth of information for a penetration
    tester looking to define the public footprint of an organization and map out his/her
    attack surface.
  prefs: []
  type: TYPE_NORMAL
- en: Using Dig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first command-line tool we will be using here is called **Dig**. Dig is
    essentially a DNS lookup Swiss Army knife and facilitates just about everything
    you would need to know about a given domain or the domains related to an IP address.
    Using Dig, you will be emulating—actually performing—the kinds of queries browsers
    and other network applications use when they interact with DNS servers all across
    the world. Some queries even emulate the behavior of other DNS servers. Let's
    see how `dig` works and how we can make the best of it during a penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to use `dig` is to supply it with a domain name to look up.
    The following command shows you how do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, you could try `google.com` for the domain as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Dig](img/5107OT_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The highlighted output in the previous screenshot shows the actual result returned,
    which is the IP address(es) of Google.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also let `dig` know what kinds of records you''re looking for by making
    use of the `type` option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if you''re looking for the mail exchange records (MX records)
    for `google.com` you can supply the following options to `dig`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, you can use the `–t` option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Your output should look something like the following screenshot if the command
    executes correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Dig](img/5107OT_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the record types you can look up using `dig`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`A`: This is address record and holds the IPs associated with the queried domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AAAA`: This is the IP Version 6 address record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CNAME`: This is the canonical name record, which will return the domain names
    for which the specified domain is a canonical record. This is like asking `dig`
    whether the supplied domain is a nick name for another, or more precisely, whether
    the given domain name uses the IP address of another domain, and `dig` returns
    these domains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MX`: This is the mail exchange record and lists the addresses that are associated
    with the supplied domain as message transfer agents. You would use this to find
    the mail domains for a given domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PTR`: This is for pointer records, which are often used in reverse DNS lookups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SOA`: This is the start of authority/zone record, which will return records
    related to the primary domain server "authoritive" for the supplied domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AXFR`: This is for authority zone transfer, which asks a given name server
    to return all the records related to a given domain. Modern DNS servers should
    not have this option enabled remotely as it presents considerable information
    about disclosure vulnerabilities—primarily internal address disclosure — and enables
    quite effective denial of service attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a number of other interesting record types. I've listed the most commonly
    used ones here. For those of you who would like to find out what others are all
    about, please check the RFCs in the *Further reading* section at the end of the
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command is an example of some of these record types in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command should return the result shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Dig](img/5107OT_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Otherwise, you could look up the domains for which `mail.google.com` is the
    canonical name. This is done using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command should produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Dig](img/5107OT_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Often, you may want to skip all the detail returned from a DNS query and have
    `dig` only return the important data, namely the addresses you''ve requested.
    The `+short` option allows you to do this. It is used as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This option allows `dig` to be a little more manageable if it is used in pipes
    and bash for loops or other scripting, since it mitigates having to filter out
    all the other output. For example, you could use `dig` with `whois` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Dig also allows reverse IP resolution using the `–x` option. For instance,
    if you''d like to find out which domain name is associated to a given IP, you
    would use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Often you may have a long list of IP addresses or a list you''ve managed to
    enumerate through other means, such as using `whois`, and you''d like to find
    out which of these are mapped to IP addresses. Now, you could manually fire off
    `dig` queries for each IP. However, using a little bash scripting with dig, you
    could automate the entire process very easily. Let''s suppose that the IPs you
    have are in a file, each on their own separate line. You would fire off the following
    command to reverse look up all of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the previous command, `[ip list]` would be the file containing the mentioned
    IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: So that's it as far as the `dig` tool and a basic introduction to DNS protocol
    goes. I urge you to read more about how DNS works in the *Further reading* section.
    The next few sections will discuss tools that allow you to recover records from
    DNS servers using brute-forcing and other open source intelligence gathering.
    The two tools mentioned are used by penetration testers usually as a last resort,
    given that they brute-force the records and are quite an aggressive alternative
    to dig.
  prefs: []
  type: TYPE_NORMAL
- en: Using dnsmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may, at times, need to result to brute-forcing domain names or sub-domains,
    since these can prove very tricky to enumerate, for a given host or network if
    the other options such as `dig` and `whois` do not provide you with enough information
    to work with. In times like these, tools such as `dnsmap` and `dnsenum` come in
    very handy.
  prefs: []
  type: TYPE_NORMAL
- en: Using `dnsmap` is pretty straightforward. If you've been following the other
    commands we covered this should be a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the usage specification for `dnsmap`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we get into what these options mean, let''s see what `dnsmap` does in
    its most basic invocation, namely with no options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, consider the following lookup for the `google.com` domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using dnsmap](img/5107OT_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If invoked with no arguments, `dnsmap` uses its own built-in wordlist to enumerate
    the domains. This word list can be found under the `/usr/share/wordlist_TLAs.txt`
    path.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the `dnsmap` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-w WORDLIST`: This option accepts a wordlist as an argument. `dnsmap` will
    use this wordlist to enumerate the possible subdomains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r RESULTS-FILE`: This option tells `dnsmap` where to save the results of
    its operation. There may be hundreds of enumerated IP addresses and subdomains,
    and it''s always good to save them somewhere to be processed later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c CSV-RESULTS-FILE`: This is the same as the preceding option, except results
    are saved in a **Common Separated Vector** (**CSV**) file, which is a popular
    format for databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i IP-IGNORE-LIST`: This option accepts a list of IPs to ignore during lookups,
    in case they muddle or introduce false positives to the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That''s about it for `dnsmap`: not a very complex tool but it always gets the
    job done!'
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating targets on the local network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enumerating targets on your local network will be done here using a tool called
    **Network mapper** (**Nmap**) and another tool called **Arping**. Nmap itself
    is the de facto standard for network assessment and can pretty much do anything
    Hping, Fping, and Arping can do. In many situations, especially in firewall assessments,
    penetration testers need to be able to fine-tune the packets that are sent and
    perform analysis on precisely collected data. Tools such as Hping, Fping, and
    Arping are perfect for this as they allow penetration testers to construct any
    arbitrary packets for almost any networking protocol required.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll cover the Arping tool and demonstrate how it can
    be used to perform discovery-based on the ARP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Host discovery with Arping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arping is a utility that allows you to craft ARP or ICMP packets and send them
    to arbitrary hosts on your local network. Naturally, this makes for a great way
    to enumerate live hosts. It's also a very information-driven tool and actually
    prints the ICMP and ARP replies straight to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following examples will demonstrate some simple usage of the Arping command.
    To start off, before we cover some of the options and addressing modes, let''s
    see how a simply ARP ping is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is what your output should look like, with the exception
    that the MAC address is returned and possibly the IP address is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Host discovery with Arping](img/5107OT_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you receive a reply from a host, it's a strong indication that the mentioned
    host actually exists on the network. Of course, due to the lack of cryptographic
    strength of the ARP protocol, there really is no guarantee that this information
    is strictly true. You should remember this about all information communicated
    over insecure protocols.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may want to walk through a list of IPs on a given subnet. Using a little
    bash scripting, you can do it the following way. The following code will be made
    available on the book''s website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous script, we used the `–c` command to make sure only three requests
    are sent. We also allow the user to specify the interface being used because often
    Arping doesn''t really look it up interfaces autonomously really well. Also, a
    prefix for the local IP address must be entered here. So, if you''d like to use
    this script, save it in a file (for this example, we will call it `arpsweep.sh`)
    and invoke it as follows if you''re using the default Ethernet interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, if you''re using the default wireless LAN interface, then use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The other options for Arping are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c COUNT`: This means only send `COUNT` amount of requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`: This finds duplicate replies. This option is great as a monitoring tool.
    It will be able to pick up if anyone on your network is spoofing the MAC address
    of another host; attackers often do this to initiate man-in-the-middle attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i`: This is the interface. Don''t try to autonomously find the interface;
    use the one supplied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: This turns on promiscuous mode for the specified interface and allows
    you to specify MAC addresses other than your own as the source, that is, MAC spoofing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r`: This displays raw output and means only the MAC and IP addresses are
    displayed for each reply.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As for the addressing modes, the options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-s MAC`: This means use `MAC` as the source MAC address. This option works
    great if the network or selection of hosts you are enumerating use source MAC
    filtering by only serving responses to a select number of hosts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before sending off any packets, try running a packet capturing tool (which is
    covered later in the book) and try to get a feel for which communication patterns
    are regular. Which host is talking to which host using which protocol and how
    frequently. This may allow you to piggyback the natural rhythm of the network
    as much as possible and possibly fly completely under the radar of things such
    as Snort and other IDS/IPS tools.
  prefs: []
  type: TYPE_NORMAL
- en: '`-S IP`: This options instructs to use IP as the source IP address, that is,
    IP spoofing. If the host-based firewalls only allow a limited number of IP addresses
    to communicate with them, this option is great for spoofing one of the allowed
    IP addresses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t MAC`: This options instructs to use `MAC` as the target MAC address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-T IP`: This options instructs to use `IP` as the target IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's about it as far as Arping goes. I would urge you to try out `arping`.
    When it comes to fine-tuning ICMP and ARP traffic, there are few tools that work
    as well as Arping does. If you need a little background on the ARP protocol, I've
    included some interesting links in the *Further reading* section for you to check
    out.
  prefs: []
  type: TYPE_NORMAL
- en: Target enumeration with Nmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ICMP may often at times be abused by attackers on a local network, since by
    its nature, it is not designed to provide security or designed to take into account
    any current security mechanisms. This often results in ICMP being abused by attackers
    to obtain sensitive information or information that can be used to determine or
    deduce sensitive details about hosts on a network.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start off, let''s probe a host for responses using the ICMP protocol. Nmap''s
    usage specification for ICMP probing looks like the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `–sn` switch tells Nmap to use the ICMP protocol to determine whether the
    hosts in the mentioned range are reachable, and it also disables port scanning.
    `-v` means verbose mode and `–-reason` tells Nmap to actually print information
    about why it has determined certain results about a host. The output of the previous
    command is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Target enumeration with Nmap](img/5107OT_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ICMP protocol is a networking protocol used to request debugging or troubleshooting
    information from network hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other host discovery options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-PE`: This tells Nmap to use ICMP echo requests, which is the packet that''s
    sent when you ping a host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-PP`: This tells Nmap to use timestamp requests. Hosts that respond to timestamp
    requests are usually reported as findings in penetration tests. Often, default
    and weakly configured cryptographic libraries use system time to generate the
    cryptographic primitives. `-PM` uses ICMP net mask requests; these ICMP packets
    were originally implemented so that network engineers could query a host for information
    about its network configuration. The following command is an example of this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to make use of other protocols to identify your targets, Nmap offers
    a wide range of functionality. The following are some of those options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-PS TCP SYN` **flag scan**: This option sends SYN packets to a host and determines
    whether they are actually on the network by interpreting the response or the lack
    there of.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-PA TCP ACK` **flag scan**: This option tells Nmap to send TCP ACK flags to
    the target to determine whether it is alive and responding to packets. Machines
    on a network will often try to strictly respect the TCP protocol standard and
    respond to packets with the ACK flag set by sending a packet with the REST packet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-PO IP` **protocol ping**: This option enumerates the protocols supported
    by a target host, by listening for TCP packets with the REST flag set, since live
    hosts will often respond this way to invalid packets with arbitrary identifiers
    set for the protocol number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more options available in Nmap regarding host discovery, please see the
    links included in the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on basic methods and tools penetration testers use
    to glean information about the networks they target during security assessments.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter started off by demonstrating the Whois tool and covered tips and
    tricks one can use to automate the whois tool as well as do very rewarding look
    ups and integrate the output from Whois with other useful tools. We then moved
    on to the DNS protocol and covered tools available from the Kali Linux command
    line that can be used to gain information from DNS servers about a specific target.
    We specifically discussed `dig` and `dnsmap`. After this, we covered how to enumerate
    targets on a local network by making use of the light-weight addressing protocols
    commonly used in networks. The target enumeration section focused on demonstrating
    ways to use Arping and Nmap to enumerate local targets.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RIPE Whois Database Query Reference Manual at [http://www.ripe.net/ripe/docs/ripe-358](http://www.ripe.net/ripe/docs/ripe-358)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dig (1) Linux man page at [http://linux.die.net/man/1/dig](http://linux.die.net/man/1/dig)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing Certificates in the Domain Name System (DNS) at [http://tools.ietf.org/html/rfc4398](http://tools.ietf.org/html/rfc4398)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain Names – Implementation and Specification at [http://www.ietf.org/rfc/rfc1035.txt](http://www.ietf.org/rfc/rfc1035.txt)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap Online Book at [http://nmap.org/book/toc.html](http://nmap.org/book/toc.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
