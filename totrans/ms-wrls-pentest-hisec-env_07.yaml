- en: Chapter 7. Client-side Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed how to execute a vulnerability assessment
    on the network. This chapter will cover client-side attacks, which will help you
    understand how hackers can target and attack systems and other devices on the
    network. So what is a client-side attack? I'm glad you asked!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Types of client-side attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sniffing unencrypted traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Honeypot attacking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Client-side Attacks](img/3183OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How client-side attacks work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To fully understand how a client-side attack works, we need to discuss how server-side
    attacks work in contrast to client-side attacks. Servers run many different applications
    and services that interact with clients. These server services are accessible
    to the client that makes the service available to them at their disposal to try
    and exploit. As more services run on a server, it becomes more vulnerable to attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '![How client-side attacks work](img/3183OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Client-side attacks are different. These kinds of attacks target vulnerabilities
    within the client applications that interact with a malicious server. If the client
    is not connected to a server, it is not at risk because it doesn't process anything
    sent from a server. Instant messaging applications can potentially expose a client
    to attacks because most clients are automatically configured to log in to the
    server.
  prefs: []
  type: TYPE_NORMAL
- en: '![How client-side attacks work](img/3183OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The most common client-side attacks are carried out when someone visits a malicious
    web page that targets their web browser application. If the attack is successful,
    the attacker could easily take control of the client. There are more attacks than
    just web-based attacks such as attacks via e-mail, instant messaging, and FTP.
  prefs: []
  type: TYPE_NORMAL
- en: '![How client-side attacks work](img/3183OS_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clients are only protected when there is defense available. Firewalls and proxies
    help restrict network traffic to only trusted websites and servers. Hardware firewalls
    such as WatchGuard's XTM 800 Series have packet filtering, intrusion prevention
    services, and application control. If you are a business and don't have a hardware
    firewall on your network, all of your systems and devices are at risk.
  prefs: []
  type: TYPE_NORMAL
- en: Types of client-side attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Client-side attacks exploit the trust between the user and the website or server
    they visit.
  prefs: []
  type: TYPE_NORMAL
- en: '![Types of client-side attacks](img/3183OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following types of attacks are the most common client-side attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spoofing**: Tricking the user into believing a website or server is legitimate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-site scripting (XSS)**: This allows an attacker to execute from within
    the user''s web browser. This attack can be used to take control of a user''s
    session, conduct phishing attacks to steal login credentials, or even humiliate
    the user with explicit content. All web applications are vulnerable to this exploit.
    Typically, an exploit will use HTML, JavaScript, VBScript, ActiveX, Java, or Flash
    to execute on the user''s web browser application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Types of client-side attacks](img/3183OS_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sniffing unencrypted traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should know by now that unencrypted wireless traffic can be viewed by anyone
    and so your data can be easily compromised. Have you ever connected to a public
    wireless network such as Starbucks or a hotel? Have you ever thought who else
    might be connected and could be listening to your network traffic? Sounds pretty
    scary, huh?
  prefs: []
  type: TYPE_NORMAL
- en: It actually takes little to no experience at all! It is remarkably easy for
    anyone to view unencrypted traffic. In this next demonstration, I will be showing
    you in detail how to sniff your unencrypted traffic. This demonstration will help
    you understand how important it is to always connect using a secure connection.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Applications** | **Internet** | **Wireshark**:![Sniffing unencrypted
    traffic](img/3183OS_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also open Wireshark by opening a Terminal and typing `sudo wireshark`.
  prefs: []
  type: TYPE_NORMAL
- en: If you receive an error message or information message, click on **OK**:![Sniffing
    unencrypted traffic](img/3183OS_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, it is simply stating that `dofile` is disabled
    due to running Wireshark as a superuser. We can simply ignore this error message
    by clicking on **OK** as it will not affect our work. It is simply stating that
    we are running Wireshark as an unprivileged user.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing unencrypted traffic](img/3183OS_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Wireshark graphical interface should appear:![Sniffing unencrypted traffic](img/3183OS_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, navigate to **Capture** | **Interfaces...** as follows:![Sniffing unencrypted
    traffic](img/3183OS_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this demonstration, we have selected **eth0**. This might be **wlan0** or
    **wlan1** for some of you. Check the box and click on **Start**:![Sniffing unencrypted
    traffic](img/3183OS_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see Wireshark beginning to capture network traffic:![Sniffing unencrypted
    traffic](img/3183OS_07_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this demonstration, we will be filtering `telnet`. Click on **Save**:![Sniffing
    unencrypted traffic](img/3183OS_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `telnet` command to connect to a telnet server. You will need to run
    your own telnet server to follow this:![Sniffing unencrypted traffic](img/3183OS_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Wireshark, you should see a lot of different telnet packets. Right-click
    on one of them and select **Follow TCP Stream**:![Sniffing unencrypted traffic](img/3183OS_07_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It should display the telnet session output with the login and password in plain
    text:![Sniffing unencrypted traffic](img/3183OS_07_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To use a secure form of this connection, you must use SSH-2\. SSH-1 has man-in-the-middle
    attack problems and security vulnerabilities. SSH-1 is also obsolete and should
    be avoided at all costs. Make sure you update your `sshd_config` file, change
    the default SSH port, limit users' SSH access, configure IDL logout timeout interval,
    disable the root login, and set a warning banner according to your legal terms
    and legal notice details. Use strong SSH passwords and passphrases. I cannot stress
    enough how important this is.
  prefs: []
  type: TYPE_NORMAL
- en: Honeypot attacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With technology advancing, wireless networks are becoming much larger in terms
    of bandwidth and range. A hacker can easily set up a wireless honeypot to lure
    victims into what they believe is a trusted wireless network. What is a wireless
    honeypot? A **wireless honeypot** is a device configured to be an access point
    in which it may have the same SSID as another access point in the area and is
    also configured with a proxy to point to the attacker's computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a user were to connect to a honeypot, all their network traffic would be
    filtered or monitored by the attacker, which may end up in a man-in-the-middle
    attack. The attacker would then be able to view any unencrypted traffic within
    that connection, such as e-mail, instant messaging, FTP, and telnet sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Honeypot attacking](img/3183OS_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the attacker has a high-power gain antenna, the client is more than likely
    to see it on the top of the wireless list for available wireless networks. Another
    thing to note is that most Microsoft Windows operating systems are configured
    to automatically connect to a wireless network, which can be very bad if a honeypot
    happened to be nearby with the same SSID and passphrase. This feature can be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: How do I protect myself from a honeypot or man-in-the-middle attack?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the easiest ways to protect yourself from a honeypot attack is to simply
    not use wireless. What if your organization requires wireless? On BYOD devices,
    profiles should be created to only allow trusted wireless networks to connect
    to the client's devices. Use a 3G/4G connection or go wired. What if you still
    need wireless? There are software- and hardware-based Wireless Intrusion Prevention
    Systems (WIPS) that can detect rogue access points.
  prefs: []
  type: TYPE_NORMAL
- en: '![How do I protect myself from a honeypot or man-in-the-middle attack?](img/3183OS_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WIPS identifies these access points by SSID, channel, signal strength, and MAC
    address. If the parameters do not match, then there is a chance that the AP is
    a honeypot. What if the hacker operates at the same SSID and channel? The WIPS
    will then go by the signal strength. The signal strength can determine whether
    it is a legitimate AP or not.
  prefs: []
  type: TYPE_NORMAL
- en: '**KFSensor** is a Windows-based honeypot **Intrusion Detection System** (**IDS**).
    It acts like a honeypot to attract and detect hackers, worms, rogues, and vulnerabilities.
    By acting as a decoy, it can divert from attacks to provide an additional level
    of security. The KFSensor interface is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How do I protect myself from a honeypot or man-in-the-middle attack?](img/3183OS_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can download a 30-day trial from [http://www.keyfocus.net/kfsensor/download/](http://www.keyfocus.net/kfsensor/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Karmetasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Karmetasploit is very much like a honeypot, but it focuses on vulnerabilities
    and exploiting the client. Karmetasploit is a fake rogue access point application.
    When a victim connects to it, Karmetasploit will launch all exploits within the
    Metasploit framework against the client. It can also capture logins and passwords.
    The Karmetasploit interface is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Karmetasploit](img/3183OS_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this next demonstration, we will be creating a fake AP using Karmetasploit.
    Please understand that these demonstrations are only to be used for educational
    purposes. Broadcasting Karmetasploit can be illegal in some locations. Please
    consult with a competent attorney licensed to practice in your jurisdiction before
    using Karmetasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin the demonstration!
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal and download PwnSTAR from [www.github.com](http://www.github.com):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Karmetasploit](img/3183OS_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Navigate to the `PwnSTAR` directory:![Karmetasploit](img/3183OS_07_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `installer.sh` and follow the prompts:![Karmetasploit](img/3183OS_07_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When asked where to install PwnSTAR, just press *Enter* or type `/usr/bin`.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `pwnstar` directory `/user/bin`:![Karmetasploit](img/3183OS_07_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `y`:![Karmetasploit](img/3183OS_07_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose option **5) Karmetasploit**:![Karmetasploit](img/3183OS_07_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the prompts:![Karmetasploit](img/3183OS_07_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, you can see we are providing Internet access. This
    way the user knows they are connected to the Internet; however, DNS can be spoofed
    so that DNS requests will go to the attacker and not to the Internet. `wlan0`
    is the interface used for the wireless access point.
  prefs: []
  type: TYPE_NORMAL
- en: Follow the prompts, as shown:![Karmetasploit](img/3183OS_07_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should take you to the following screen:![Karmetasploit](img/3183OS_07_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, when asked for the channel, you can enter any channel
    number (`1` to `11`). In this demonstration, I used `6`.
  prefs: []
  type: TYPE_NORMAL
- en: Choose option **3) SoftAP Channel** and enter channel number `6`:![Karmetasploit](img/3183OS_07_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the letter `c` to continue and choose option **2) Bullzeye**:![Karmetasploit](img/3183OS_07_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bullzeye broadcasts only the SSID that you want to assign. When a user connects
    to the wireless AP, they will receive Internet access from `eth0` as it is being
    shared to `wlan0`.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the SSID name that you want to use:![Karmetasploit](img/3183OS_07_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are asked to check for DHCP server parameters, you do not need to do
    that. DHCP will be automatically set and configured.
  prefs: []
  type: TYPE_NORMAL
- en: If all goes well, Karmetasploit and several other Terminal windows will prompt
    you for input:![Karmetasploit](img/3183OS_07_37.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You have successfully installed and run Karmetasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Jasager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not many people know much about Jasager. If you are one of those people, today's
    your lucky day because in this section, you are going to learn what Jasager is
    and what it has to offer to wireless penetration testers.
  prefs: []
  type: TYPE_NORMAL
- en: Jasager is built off Karma. It's designed to run on OpenWrt. Jasager supports
    most wireless access points and Wi-Fi network adapters. Its key features are a
    web interface that displays network information, full control of Karma features
    through AJAX and Lynx, autorun scripts that make it easy to execute tasks, logging,
    and support for basic commands.
  prefs: []
  type: TYPE_NORMAL
- en: The WiFi Pineapple Mark 5 is the perfect device for all your wireless network
    auditing tools. Darren Kitchen, owner of hak5.com, focuses on making the most
    affordable wireless device that extends the use of wireless hacking tools. The
    WiFi Pineapple has been around since 2008 and has served penetration testers,
    military and government, law enforcement, and hacktivists. Be sure to check it
    out at [https://wifipineapple.com](https://wifipineapple.com).
  prefs: []
  type: TYPE_NORMAL
- en: In this next demonstration, I will show you how to enable Jasager on the WiFi
    Pineapple. Those of you who don't have one should still follow along because it's
    important to understand how it works and how easy it is to execute over the network.
  prefs: []
  type: TYPE_NORMAL
- en: Connect to your WiFi Pineapple directly to your computer via an Ethernet cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your web browser and navigate to `http://172.16.42.1/pineapple`. Sign in
    as `root`; the password is `pineapplesareyummy`:![Jasager](img/3183OS_07_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left-hand side, you should see a list of services; click on the **Start**
    button next to **MK4 Karma**:![Jasager](img/3183OS_07_42.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You have successfully enabled Jasager. So what is Jasager?
    **Jasager** is an implementation of Karma designed to run on OpenWRT. With Jasager,
    you can see the currently connected clients with their MAC address, IP address,
    and SSID. You can autorun scripts to automate your tasks for association and IP
    assignment, log information, and make use of a full-blown command-line interface
    for quick and easy access. For a business, you could use Jasager to notify you
    if a new client connects to the network and then provide the new client with a
    website banner indicating that they are being monitored and that any unauthorized
    access is prohibited. At home, you can identify if you have neighbors trying to
    steal your wireless Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Preventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Okay, so you are fully aware that the next hotel visit could be dangerous,
    even if it''s only flooded with kittens on each web page redirection. Well, the
    good news is we still have ways to protect ourselves from these honeypots or rogue
    access points. Some of them are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Disable Wi-Fi**: Turning off the Wi-Fi is the easiest way to ensure your
    security. Without Wi-Fi, you are reducing your security risk to these attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Never connect to open Wi-Fi networks**: Free Internet sounds great, but what
    if someone happens to be sniffing all the network traffic? Don''t take any chances
    with open Wi-Fi networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connect to a secure VPN connection**: If an open network is your only way
    of access, always use a secure VPN connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This has been a great chapter! We covered a lot of stuff. Let's take a few moments
    to look back at what you've learned. In this chapter, you learned how to capture
    unencrypted traffic, and gained an understanding of honeypot attacks and methods,
    Karmetasploit, Jasager, and prevention from threats.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn to capture encrypted network traffic and
    get to know about man-in-the-middle attacks.
  prefs: []
  type: TYPE_NORMAL
