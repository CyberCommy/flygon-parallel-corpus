- en: Chapter 14. Using Query Bookmarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers query bookmarks—one of the features of the phpMyAdmin configuration
    storage. Being able to label queries, and recall them by label, can be a real
    time saver. Bookmarks are queries that have the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: Stored permanently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erasable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Related to one database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recorded only as a consequence of a user's action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labeled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private by default (only available to the user creating them) but possibly public
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bookmark can also have a variable part, as explained in the *Passing a parameter
    to a bookmark* section later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There is no bookmark page for managing bookmarks. Instead, the various actions
    for bookmarks are available on specific pages, such as results pages or query
    box pages.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing bookmark and query history features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 11](ch11.html "Chapter 11. Entering SQL Statements"), we learned
    about the SQL history feature, which automatically stores queries (temporarily
    or permanently). There are similarities between queries stored in the history
    and bookmarks. After all both features are intended to store queries for later
    execution. However, there are important differences regarding the way the queries
    are stored and the action that triggers the recording of a query.
  prefs: []
  type: TYPE_NORMAL
- en: Storing of queries in the history is automatic; whereas a query is saved as
    a bookmark via an explicit request from the user. Also, there is a configurable
    limit (refer to [Chapter 11)](ch11.html "Chapter 11. Entering SQL Statements")
    on the number of queries stored in the permanent history; however, the number
    of bookmarks is not limited. Finally, the history feature presents the queries
    in the reverse order of the time they were sent. However, bookmarks are shown
    by label (not showing the query text directly).
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, the automatic query history is useful when we neither plan to
    recall a query, nor wish to remember which queries we typed. This contrasts with
    the bookmark facility where we intentionally ask the system to remember a query,
    and even give it a name (label). Therefore, we can do more with bookmarks than
    with the query history, but both features have their own importance.
  prefs: []
  type: TYPE_NORMAL
- en: Creating bookmarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two instances when it is possible to create a bookmark—after a query
    is executed (in which case we don't need to plan ahead for its creation), and
    before sending the query to the MySQL server for execution. Both of these options
    are explored in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bookmark after a successful query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Initial bookmark creation is made possible by the **Bookmark this SQL query**
    button. This button appears only after executing a query that generates a result
    (when at least one row is found); so this method for creating bookmarks only stores
    `SELECT` statements. For example, a complex query produced by the multi-table
    query generator (as seen in [Chapter 12)](ch12.html "Chapter 12. Generating Multi-table
    Queries") could be stored as a bookmark in this way, provided that it finds some
    results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us see an example. In the **Search** page for the `book` table, we select
    the columns that we want in the results, and enter the search values as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a bookmark after a successful query](img/7782_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After clicking on **Go**, we see that the results page shows a bookmark dialog.
    We enter only a label, **books for author 1**, for this bookmark, and then click
    on **Bookmark this SQL query** to save this query as a bookmark. Bookmarks are
    saved in the table defined by `$cfg['Servers'][$i]['bookmarktable']`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a bookmark after a successful query](img/7782_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This bookmark dialog can be seen on any page that contains results. As a test,
    we could just click on **Browse** for a table to get results, and then store this
    query as a bookmark. However, it does not make much sense to store (in a bookmark)
    a query that can easily be made with one click.
  prefs: []
  type: TYPE_NORMAL
- en: Storing a bookmark before sending a query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen that it's easy to create a bookmark after the execution of a `SELECT`
    statement that generates results. Sometimes, we may want to store a bookmark even
    if a query does not find any results. This may be the case if the data to which
    the query refers is not yet present, or if the query is a statement other than
    `SELECT`. To achieve this, we have the **Bookmark this SQL query** dialog available
    in the **SQL** tab of the `Database` view, `Table` view, and the Query window.
  prefs: []
  type: TYPE_NORMAL
- en: We now go to the **SQL** page of the `book` table, enter a query to retrieve
    French books, and directly put the **books in French** bookmark label in the **Bookmark
    this SQL query** dialog. If this bookmark label has been used previously, a new
    bookmark with the same name will be created, unless we check the **Replace existing
    bookmark of same name** checkbox. Bookmarks carry an internal identifying number,
    as well as a label chosen by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '![Storing a bookmark before sending a query](img/7782_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On clicking on **Go**, the query is executed and stored as a bookmark. It does
    not matter if the query does not find anything. This is how we can generate bookmarks
    for non-SELECT queries such as `UPDATE, DELETE, CREATE TABLE`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This technique can also be used for a `SELECT` statement that either returns
    results or does not return results.
  prefs: []
  type: TYPE_NORMAL
- en: Making bookmarks public
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All bookmarks we create are private by default. When a bookmark is created,
    the username, which we are logged in as, is stored with the bookmark. Let us suppose
    that we check the **Let every user access this bookmark** checkbox as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making bookmarks public](img/7782_14_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This would have the following effect:'
  prefs: []
  type: TYPE_NORMAL
- en: All users having access to the same database (the current one) will have access
    to the bookmark.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user's ability to see meaningful results from the bookmark depends on the
    privileges they have on the tables referenced in the bookmark.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any user will be able to delete the bookmark.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will be permitted to change the bookmark's query, by storing this bookmark
    before sending a query and using the **Replace existing bookmark of same name**
    option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public bookmarks are shown with a **(shared)** suffix when recalled.
  prefs: []
  type: TYPE_NORMAL
- en: The default initial query for a table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous examples, we chose bookmark labels according to our preferences.
    However, by convention, if a private bookmark has the same name as a table, it
    will be executed when **Browse** is clicked for this table. Thus, instead of seeing
    the normal **Browse** results of this table, we will see the bookmark's results.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that we are interested in viewing (by default, in the **Browse** mode)
    all books with a page count lower than 300\. We first generate the appropriate
    query, which can be done easily from the **Search** page, and then we use **book**
    as a bookmark label on the results page.
  prefs: []
  type: TYPE_NORMAL
- en: '![The default initial query for a table](img/7782_14_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Following this action, every time the user, who created this bookmark, browses
    the `book` table, he sees the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The default initial query for a table](img/7782_14_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Multi-query bookmarks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A single bookmark can also store more than one query (separated by a semicolon).
    This is mostly useful for non`-SELECT` queries. As an example, let us assume that
    we need to clean data about authors by removing an invalid area code from the
    phone numbers on a regular basis. This operation would always be followed by a
    display of the `author` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'To accomplish this goal, we store a bookmark (before sending it for execution)
    that contains these queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the bookmark, we could put many data modification statements such as `INSERT,
    UPDATE`, or `DELETE`, followed optionally by one `SELECT` statement. Stacking
    a lot of `SELECT` statements would not yield the intended result because we would
    only see the data fetched by the last `SELECT` statement.
  prefs: []
  type: TYPE_NORMAL
- en: Recalling bookmarks from the bookmarks list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any created bookmarks can be found on the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Table` view: **SQL** page of any table from **marc_book**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Query window: The **SQL-History** tab'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Database` view: **SQL** page of the **marc_book** database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Recalling bookmarks from the bookmarks list](img/7782_14_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Three choices are available when recalling a bookmark— **Submit, View only**,
    and **Delete. (Submit** being the default).
  prefs: []
  type: TYPE_NORMAL
- en: Executing bookmarks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Choosing a bookmark and hitting **Go** executes the stored query and displays
    its results. The page resulting from a bookmark execution does not have another
    dialog to create a bookmark, as this would be superfluous.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The results we get are not necessarily the same as when we created the bookmark.
    They reflect the current contents of the database. Only the query is stored as
    a bookmark.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating bookmarks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, we may just want to ascertain the contents of a bookmark. This is
    done by choosing a bookmark and selecting **View only**. The query is then displayed
    and we have the opportunity of reworking its contents. By doing so, we would be
    editing a copy of the original bookmarked query. To keep this new, edited query,
    we can save it as a bookmark. Again, this will create another bookmark even if
    we choose the same bookmark label, unless we explicitly ask for the original bookmark
    to be replaced.
  prefs: []
  type: TYPE_NORMAL
- en: A bookmark can be erased with the **Delete** option. There is no confirmation
    dialog to confirm the deletion of the bookmark. We should now proceed with the
    deletion of our **book** bookmark.
  prefs: []
  type: TYPE_NORMAL
- en: '![Manipulating bookmarks](img/7782_14_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Passing a parameter to a bookmark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we look again at the first bookmark we created (finding all books for **author
    1)**, we realize that although it's useful, it's limited to finding just one author—always
    the same one.
  prefs: []
  type: TYPE_NORMAL
- en: Special query syntax enables the passing of parameters to bookmarks. This syntax
    uses the fact that SQL comments enclosed within `/*` and `*/` are ignored by MySQL.
    If the `/*[VARIABLE]*/` construct exists somewhere in the query, it will be expanded
    at execution time with the value provided when recalling the bookmark.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a parameterized bookmark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us say we want to find all the books for a given author when we don''t
    know the author''s `id`. We first enter the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The part between the comment characters `(/* */)` will be expanded later, and
    the tags will be removed. We label this query as a bookmark named **find author
    by name** (before executing it) and then click on **Go**. The first execution
    of the query just stores the bookmark while retrieving all books by all the authors,
    as this time we haven't passed a parameter to the query.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we have two conditions in the `WHERE` clause, of which one
    contains the special syntax. If our only criterion in the `WHERE` clause needs
    a parameter, we can use a syntax such as `/* WHERE author_id = [VARIABLE] */`.
  prefs: []
  type: TYPE_NORMAL
- en: Passing the parameter value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test the bookmark, we recall it as usual and enter a value in the **Variable**
    dialog.
  prefs: []
  type: TYPE_NORMAL
- en: '![Passing the parameter value](img/7782_14_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we click on **Go**, we see the expanded query, and the author Smith's books.
  prefs: []
  type: TYPE_NORMAL
- en: '![Passing the parameter value](img/7782_14_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw an overview of how to record bookmarks (after or before
    sending a query), how to manipulate them, and how some bookmarks can be made public.
    The chapter also introduced us to the default initial query for **Browse** mode.
    It also covered passing parameters to bookmarks.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will explain how to produce documentation that explains the
    structure of your databases via the tools offered by phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
