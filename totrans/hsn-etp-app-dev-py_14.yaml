- en: Deploying to the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of our focus until now has been spent working on the development of the
    applications, be it in the form of a big monolithic application or in the form
    of a microservices-based application where a lot of services are present. For
    these applications to be made available to the users, the applications need to
    be deployed somewhere where general users can interact with the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In the modern world of DevOps, the deployment strategies and where the deployment
    of the application is going to happen play an important role in defining how the
    application is going to work and be made accessible to the user. The decisions
    taken about the deployment of the applications can influence a lot of things inside
    the infrastructure, such as the complexity of infrastructure that will be required
    to run a particular application or how the new features inside the application
    will be rolled out.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Over the course of this chapter, we will take a look at how to create deployments
    for the monolithic applications as well as microservices-based applications, and
    how we can work on implementing the deployment strategies that prioritize the
    stability of the application when it has been deployed over the infrastructure.
    We will also take a look at differentiating the modern ways of deploying an application
    using the containers and making a choice between the private, public, and hybrid
    cloud deployments.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'As a reader of this chapter, you will get to learn about the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: The need for deployment strategies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containerizing applications for deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating testing as a part of the deployment strategy
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment on a private cloud
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment on a public cloud
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shift toward the hybrid cloud
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For understanding this chapter, a fair knowledge of containerization using Docker
    and knowledge about how to use the CLI from at least one of the cloud providers
    will be of use.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Deploying enterprise applications
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the course of this book, we have seen how to develop an enterprise application
    using different principles, be it a monolithic way of application development
    or through the use of small microservices for developing the application. But
    these things converge at a common point. For our applications to be made available
    for general use, they need to be deployed at some place outside the development
    environment that is accessible to the general users.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'This infrastructure and the type of deployment chosen for a particular application
    need to offer a certain set of features for the deployment to be successful:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '**High uptime:** Any infrastructure where an application is deployed needs
    to provide high uptime so as to provide a near interruption free service of the
    application to its users. If the infrastructure is vulnerable to frequent downtimes,
    then it might cause severe downtimes in the availability of the application, and
    can cause the processes that are dependent upon the application to come to a halt
    until the infrastructure on which the application is running comes back online.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low latency:** The latency of the infrastructure serving the application
    should be low so as to enable adequate response times to the users. If the infrastructure
    latency is high, the users may keep waiting to interact with the application,
    or the response to be generated by the application may severely impact their productivity.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fault tolerance:** The deployment infrastructure should be fault tolerant
    and should be able to recover from an occasional failure of a few nodes. In case
    of the absence of fault tolerance, even a single issue inside the infrastructure
    will be enough to bring the whole application down, causing severe reliability
    issues for the users of the application.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just a basic set of requirements that need to be present for an infrastructure
    to be considered for the deployment of the application. There could be additional
    requirements that might get imposed as a result of the choice of a particular
    deployment strategy for the infrastructure, but the discussion of those requirements
    is beyond the scope of this book.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Untill now, we have heard the words *Deployment strategies* a lot, but what
    exactly do we mean when we say we need to choose an appropriate deployment strategy
    for the application? Let's spend some time exploring this.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Making a choice about the deployment strategy
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have figured out that we are now ready for taking our application into
    production, we are now tasked with the work of figuring out the application deployment
    strategy that we are going to use.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The deployment strategy for the application will usually lay out the rules for
    how the application will be rolled out, depending upon the kind of application
    we have. These deployment strategies cover the information about the kind of steps
    that are required to have the application available in production, and may also
    cover some other important areas about how the new features are rolled out in
    the application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: So, let's spend some time discussing the different kinds of deployment strategies
    available ...
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The different deployment strategies
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inside the software development world, there is no one solution fits all, and
    this is true even when making a choice for the type of deployment strategy that
    we are going to follow for the deployment of our application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Every deployment strategy we choose will have certain advantages and disadvantages
    associated with it. Some of the deployment strategies do not provide a lot of
    flexibility but are simple to implement, whereas the other deployment strategies
    are very flexible but can become a pain while implementing it in the process.
    As developers, the choices depend upon how we want to approach the deployment
    of the application. Majorly, there are six deployment strategies that we are going
    to cover over the course of this chapter, namely:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Recreated deployments
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling deployments
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blue/green deployments
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canary deployments
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A/B deployments
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shadow deployments
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's spend some time getting familiar with each of them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Recreated deployments
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the most traditional approach to the deployment of the applications.
    In this strategy of deployment, we simply destroy the old version of the application
    and introduce a new version of the application, and, route all the user requests
    to the new version of the application. The following diagram shows a representation
    of the Recreate deployment strategy:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/53fd297d-1f07-4082-83dc-cf68c4f2a3c7.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: This kind of strategy is really useful for the deployment of an application
    that follows the monolithic development approach, because for every new feature
    or upgrade, the whole application needs to be redeployed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The advantages of going with the recreate deployment ...
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Rolling deployments
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the rolling deployments model of deploying an application, we do not abruptly
    take down all the instances of the older version of the application to replace
    them with the newer version. Instead, we take a gradual approach of rolling out
    the new application version across the infrastructure.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'In this process, we first launch a new instance of the upgraded application
    behind the **Load Balancer**, and once it is ready to accept the traffic, we remove
    the equivalent instance of the older version of the application. This process
    continues until all the older instances of the application have been replaced
    with the newer instances. The following diagram shows a representation of the
    Rolling deployments strategy:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c60520ce-7582-416e-8eb5-543c232c06c8.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: This kind of deployment strategy is also a good choice for monolithic applications
    in case we want to achieve low downtimes with the application upgrades, because
    the application is rolled out gradually inside the infrastructure.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'The rolling deployments provide several benefits, such as the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**Easy to revert faulty upgrades:** In case an upgraded version of the application
    introduces some bug or fault, we can easily roll back the upgrade in the mid phase.
    This is possible because the new version is rolled out gradually inside the infrastructure.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy to set up:** With the knowledge of the infrastructure on which the application
    is running, this deployment strategy is easy to set up and automate, where the
    different parts of the infrastructure are updated one by one.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blue/green deployments
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The blue/green deployment strategy is an interesting strategy. This strategy
    implements a mix of techniques there are used for testing the application and
    launching it in production.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Inside the blue/green approach to deployments, the updated application is introduced
    inside the infrastructure with the equivalent number of instances as that of the
    older version of the application. Once this is done, the new version of the application
    is tested inside the infrastructure. Once the version is found to be stable, the
    traffic is then switched from the older version to the newer version of the application
    and the older version of the application is decommissioned. The following diagram
    shows a representation of the Blue/Green ...
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Canary deployments
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this approach of deployment, we follow the same strategy as in the blue/green
    deployments but with a minor change. Inside the blue/green deployments, the testing
    was carried out internally, and once the new version of the application was marked
    stable, all of the requests were used to switch to the new version in one go.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Inside the canary deployment approach, the testing happens based on the actual
    user requests. The **Load Balancer** is configured to redirect a certain percentage
    of the requests to the canary version that has been deployed in the infrastructure
    to see how the new version performs in the presence of the actual requests.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a representation of the Canary deployments strategy:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8ae7255b-7930-4943-bc9e-e0185f4c2b31.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: This kind of deployment approach is usually used for microservices-based applications
    when the internal testing of the application is deemed not to be enough, and there
    is a doubt about the stability of the infrastructure on which the application
    is running.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: This testing approach provides the advantage of testing the application in the
    production use case, while allowing for easy rollback in case the application
    does not meet the expected results.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: The drawback to using this kind of approach for deployment is the added complexity
    inside the infrastructure, which now needs to be intelligent to route a part of
    the incoming requests to the canary versions of the applications.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: A/B deployments
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The A/B deployment approach shares a lot of similarities with the canary deployment
    approach, where a new version of the application is introduced into the production
    infrastructure and a certain number of incoming requests are redirected toward
    the canary version.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: In the A/B deployments, the upgraded version of the application (version B)
    is introduced into the production infrastructure, and the load balancer is then
    configured to redirect a certain set of requests to the upgraded version based
    on some predefined criteria.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: This kind of deployment approach is required when we are not sure how an upgraded
    version will affect a certain subset of users. For example, how will the users
    using a smartphone be affected by an upgraded ...
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Shadow deployments
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the shadow deployment approach, we introduce a new approach. In comparison
    with canary deployments or A/B deployments, where a certain number of requests
    are handled by the old version and a certain number of requests are handled by
    the new version of the application, we have two versions of the applications inside
    the production infrastructure. These are the old version and the new version,
    which contain the latest updates.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the shadow deployments, the updated version of the application sees
    the exact same requests that are being sent to the old stable version of the application,
    with the catch that any processing done by the new version of the application
    instances does not affect the response for the request that is handled only by
    the stable instances inside production. The following diagram shows a representation
    of the shadow deployments strategy:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f40c94ef-25c4-43e7-ad46-7d3b2ab0c542.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: This kind of deployment approach is usually preferred for microservices-based
    applications, and is used when developers want to test the application for its
    behavior when the load on the application varies.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: This kind of deployment is also employed to check if the application behaves
    correctly in real-world use cases, which cannot be tested in internal environments.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: The only con to taking this kind of approach is the fact that the infrastructure
    costs are increased for these kinds of deployments because we need to run both
    the older version and the newer version at full scale.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Now, with this, we are accustomed to the different kind of deployment strategies
    that are present to help us decide how we want to deploy our application in production.
    While some of these deployment strategies focus on the simplicity of the process,
    others focus on making sure that the newer versions being deployed are stable
    enough and provide the best possible results.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Which deployment strategy to choose for the deployment of your application is
    greatly dependent upon several factors, which include the cost of infrastructure
    you can take up, the amount of time that can be spent in the maintenance of the
    infrastructure, and the type of application that you plan to deploy. Another important
    factor that limits the choice of the deployment strategy that can be utilized
    is the fact of having the APIs between the applications changed. Usually, these
    kinds of changes are governed by the use of SLAs, and if they take place, the
    deployment strategy might need to be updated to accommodate for the changes made.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, a lot of organizations are moving to the cloud
    as their preferred choice of infrastructure to deploy their applications in production.
    So, let's spend some time understanding the various kinds of cloud infrastructures
    that are present, and how can we decide upon which one to use for our deployments.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Making a choice of infrastructure
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An application needs an infrastructure over which it can run. Depending on the
    type of application that is there, the infrastructure that's required may be changed.
    The choice of which infrastructure to choose for the deployment of the application
    is greatly influenced by the type of the application that is being deployed, the
    complexity of the application, and the kind of use cases the application is going
    to support.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Another important factor while choosing the infrastructure for the deployment
    of the application is the concern for the scalability of the application, which
    includes the complexity with which we can scale the application up and the type
    of scaling we can employ.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: First let's take a look at ...
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: The traditional infrastructure
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the past, when the applications used large monoliths to perform a number
    of business processes, the developers and the organizations used to resort to
    an infrastructure that was composed of large mainframes or virtual machines running
    over beefy servers to provide the adequate amount of resources required to run
    the applications.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: These bare metal machines or virtual machines were provisioned with all the
    requirements that are essential for running the application, and then the application
    was deployed on these machines and made available to users for general use.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: This kind of infrastructure choice worked well and even allowed multiple applications
    to exist on the same beefy bare metal server, isolated through the use of virtual
    machines, abstracting away the hardware of the server.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'However,  this approach was plagued by a number of issues, such as the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '**High cost of infrastructure**: For deployments that utilized bare metal systems
    or virtual machines, the cost of infrastructure was high. The organizations either
    needed to purchase those beefy servers that were capable of running these applications,
    or had to resort to dedicated hosting providers, which used to cost a lot.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increased overhead**: For any application that was running inside a virtual
    machine, the overhead incurred by running a full-fledged virtualized operating
    system that supported the application was very high, greatly reducing the number
    of applications that could coexist on the same hardware.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High start up times**: As the load increased, new instances of the application
    needed to be spawned up to handle the increased number of incoming requests. However,
    starting the complete virtual machines with the application instances running
    inside them was a slow procedure due to the whole process that needed to be carried
    out for a virtual machine to boot up.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Difficulty in scaling**: In the traditional infrastructure, the amount of
    horizontal scaling that could be done was very limited, and usually the only choice
    left for scaling the applications up was through the use of vertical scaling,
    where the resources dedicated to the application were increased based on the needs.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These drawbacks made the developers think about the alternatives to the traditional
    way of deploying applications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Another major reason that fueled this move away from using the traditional infrastructure
    was the move toward the containerized approach to application packaging. Let's
    take a look at what this is.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Containerized approach toward application packaging
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the advent of modern hardware and progress in software engineering, some
    operating systems introduced a light-weight alternative to heavy virtual machines.
    This alternative came in the form of containers, which promised not only a lower
    overhead approach to application segregation but also the fact that they were
    also fast enough to spawn up due to the fact that they did not abstract the underlying
    hardware at all.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: As the development of the applications moved toward the use of microservices
    architecture, the containerized approach to application packaging became more
    and more mainstream. In this approach, every microservice used to be packaged
    as a separate container that could be deployed ...
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: The move toward the cloud
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last decade, a number of cloud providers have come into existence to
    help provide support in regards application deployment. Each of these cloud providers
    offers a distinguished set of features to make their service stand out from the
    competition when it comes to luring the organizations and developers to use their
    platform for the deployment of their applications.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'The shift toward the cloud deployment model provides various kinds of advantages
    for the developers/organizations that are responsible for the development of the
    applications, including the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '**Reduced cost of infrastructure maintenance**: As the application deployments
    move to the cloud, the costs of maintaining the infrastructure are reducing. This
    is happening due to the fact that the cloud providers are now responsible for
    maintaining the hardware on which the applications are running, and the individual
    developers and organizations do not need to purchase this hardware and handle
    any kind of issues that may happen with it.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High uptimes**: Most of the cloud providers guarantee a high uptime for their
    infrastructure, which is made possible due to the high amount of infrastructure
    replication done on their end. The end beneficiaries of this are the developers
    who are maintaining a particular application in the cloud, because now they can
    provide a high uptime to their application users without worrying about the productivity
    losses that may happen if the infrastructure goes down.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low latency**: Inside the cloud deployment approach, the developers can aim
    to provide low latency to the application for the users. This is made possible
    by replicating the application instances across the different geographical data
    centers of the cloud service provider. Once the application is replicated, the
    cloud service provider then re-routes the requests to the application servers,
    which are in close proximity of the client so as to facilitate low latency responses.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy scaling**: As the load on the application increases, new application
    instances might need to be spawned up to handle the increased load. The cloud
    service providers usually provide the facility of dynamically scaling up the application
    as the load on it increases and scaling down of the instances as the load subsides.
    This provides a high throughput, low cost solution to handle the peak loads without
    worrying about the manual intervention that is usually required in the traditional
    infrastructure. Also, the response times associated with this scaling are usually
    low in comparison with what is present in the case of traditional infrastructures.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of the preceding points make a compelling argument for the shift to cloud-based
    deployments for the applications. But based on the needs of an organization, they
    may or may not want their application to be deployed on a third-party server where
    the organization barely has any control. To handle such scenarios, the organizations
    may decide to move toward their own private clouds that run on their infrastructure
    and handle the deployments of all the applications inside the organization. So,
    let's spend some time understanding the various models of cloud deployments that
    are out there.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: The different types of cloud deployments
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to enterprises, they are highly sensitive about where their applications
    are running. This happens because of the fact that the enterprises deal with a
    wide variety of data that may contain a lot of sensitive information, and any
    kind of breach may threaten their business. As a developer who is building an
    enterprise application, it is our responsibility to suggest and decide which kind
    of cloud deployment should be used for the deployment of the application. Mainly,
    the type of clouds that exist currently are categorized into two main categories:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Public clouds
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private clouds
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recently, a third kind of category is also on the rise, known as hybrid cloud.
    So, let's take a look at what ...
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Private clouds
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A private cloud is a set of computing resources that are tightly governed by
    an enterprise. These clouds run inside the corporate intranet and are usually
    located either in the data centers owned by the organization or are maintained
    by the third parties.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: These clouds implement a very strict security policy that defines how the applications
    running on them can be accessed and who can access them.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, an enterprise chooses a private cloud due to the following points:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: The enterprise already has a data center of its own and it doesn't want to reinvest
    in a third-party cloud
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The kind of application that is being run by the enterprise is highly security
    sensitive and the security policies implemented by a public cloud provider cannot
    be trusted or are not enough for the required use case
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The private clouds offer a certain set of advantages:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '**More flexibility:** Since the organization is in control of deciding what
    compute resources will be present inside the private cloud, the organization maintains
    the flexibility to take decisions that will be in their best interests'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improved security:** The organization is free to run their cloud infrastructure
    behind a corporate firewall or an internal network with tightened security policies
    that may not be possible when using a public cloud'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For any enterprise that is dealing with security sensitive data and does not
    have the barriers of cost, a private cloud makes a good choice for deploying and
    running applications.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Public clouds
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a public cloud, the compute resources are owned and managed by a third-party
    cloud service provider. As an enterprise, the application deployed by you shares
    the same hardware resources with a number of other applications, which may be
    developed by you or some other organization.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: The organization usually resorts to a public cloud when their applications are
    not dealing with some kind of security conscious data that may require strict
    security policies to prevent any kind of incidents, or to run the applications
    that are of common use, such as their email servers.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages offered by a public cloud could are vast. Some of them are as
    follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '**Lower costs:** Since the infrastructure provided by a public cloud provider
    ...'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid clouds
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The hybrid cloud deployment model provides the best of both worlds of the private
    cloud and public cloud approach. Here, the compute resources from the private
    cloud and the public cloud are pooled, and the applications can move from the
    private cloud to the public cloud as and when required.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: The enterprises usually employ this kind of deployment model to run some of
    their less security sensitive applications on the public cloud while running the
    security sensitive applications inside the private cloud.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Another approach that is usually taken is to deploy the application in the private
    cloud first and then when the number of requests increase, the resources from
    the public cloud are pooled in to scale the application up by launching more processes
    inside the public cloud.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits associated with the hybrid cloud approach are as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '**Control**: The organization can take control over running the security sensitive
    applications inside their private clouds while running the less security sensitive
    application on the public cloud'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexibility**: As and when the need arises, the organizations can pool in
    the resources from the public cloud to handle higher loads'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost effectiveness**: Since the resources from the public cloud are only
    pooled when the demand for the application is high, the organization can save
    upon the costs of the public cloud by using the public cloud resources only when
    required'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For applications that can easily transition from one place to another, or any
    that may require the facility of dynamic scaling up while also keeping security
    in check, the hybrid cloud deployment approach provides a good choice for infrastructure.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During our journey through this chapter, we took a look at how we can make decisions
    related to the deployment of enterprise applications. We explored the different
    deployment strategies that are there and how they can affect the way our application
    runs inside the production. Moving on, we learned about six different deployment
    strategies that can be used for the deployment of monolithic and microservices-based
    applications, and saw what advantages and disadvantages they offer.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Once accustomed to the deployment strategies, we took a deep dive into the infrastructure
    choices on which the applications are deployed and got to know about how the move
    to a microservices-based development approach has fueled a transition from traditional
    ...
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the benefits of having a blue/green deployment approach?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does a canary deployment help in testing the applications before the application
    goes into production?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序投入生产之前，金丝雀部署如何帮助测试应用程序？
- en: What are the issues that we may face if we run microservices-based applications
    using the approach of virtual machines?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用虚拟机的方法来运行基于微服务的应用程序，可能会面临哪些问题？
- en: How can we handle deployments in the hybrid cloud model?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在混合云模型中处理部署？
