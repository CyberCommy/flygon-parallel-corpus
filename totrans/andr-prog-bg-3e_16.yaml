- en: '*Chapter 16*: Adapters and Recyclers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this brief chapter, we will achieve a lot. We will first go through the theory
    of adapters and lists – how we can extend the `RecyclerAdapter` class in Java
    code and add a `RecyclerView` instance that acts as a list to our UI – and then
    through the apparent magic of how the Android API binds them together so that
    `RecyclerView` displays the contents of `RecyclerAdapter` and allows the user
    to scroll through the contents. You have probably guessed that we will be using
    this technique to display our list of notes in the Note to Self app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the theory of adapters and binding them to our UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the layout with `RecyclerView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Laying out a list item for use in `RecyclerView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the adapter with `RecyclerAdapter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding the adapter to `RecyclerView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing notes in `ArrayList` and displaying them in `RecyclerView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing how we can improve the Note to Self app further
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Soon we will have a self-managing layout that holds and displays all of our
    notes, so let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2016.](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2016
    )
  prefs: []
  type: TYPE_NORMAL
- en: RecyclerView and RecyclerAdapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B16773_05_ePub_RK.xhtml#_idTextAnchor101), *Beautiful Layouts
    with CardView and ScrollView*, we used `ScrollView` and we populated it with a
    few `CardView` widgets so we could see it scrolling. We could take what we have
    just learned about arrays and `ArrayList` and create an array of `TextView` widgets,
    use them to populate a `ScrollView`, and within each `TextView` place the title
    of a note. This sounds like a perfect solution for showing each note so that it
    is clickable in the Note to Self app.
  prefs: []
  type: TYPE_NORMAL
- en: We could create the `TextView` widgets dynamically in Java code, set their `text`
    property to be the title of a note, and then add the `TextView` widgets to a `LinearLayout`
    contained in a `ScrollView`. However, this is imperfect.
  prefs: []
  type: TYPE_NORMAL
- en: The problem with displaying lots of widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This might seem fine, but what if there were dozens, hundreds, or even thousands
    of notes? We couldn't have thousands of `TextView` widgets in memory because the
    Android device might simply run out of memory or at the very least grind to a
    halt as it tries to handle the scrolling of such a vast amount of widgets and
    their data.
  prefs: []
  type: TYPE_NORMAL
- en: Now, also imagine that we wanted (which we do) each note in the `ScrollView`
    to show whether it was important, a to-do, or an idea. And how about a short snippet
    from the text of the note as well?
  prefs: []
  type: TYPE_NORMAL
- en: We would need to devise some clever code that loads and destroys `Note` objects
    and multiple `TextView` widgets per note from multiple `ArrayList` instances.
    It can be done, but doing it efficiently is far from straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: The solution to the problem of displaying lots of widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fortunately, this is a problem faced so commonly by mobile developers that the
    Android API has a solution built in.
  prefs: []
  type: TYPE_NORMAL
- en: We can add a single widget called `RecyclerView` (like an environmentally friendly
    `ScrollView` but with boosters too) to our UI layout. The `RecyclerView` class
    was designed precisely as a solution to the problem we have been discussing. In
    addition, we need to interact with `RecyclerView` with a special type of class
    that understands how `RecyclerView` works.
  prefs: []
  type: TYPE_NORMAL
- en: We will interact with it using an adapter. We will use the `RecyclerAdapter`
    class, extend it, customize it, and then use it to control the data from our `ArrayList`
    instance (which will hold our `Note` instances) and display it in `RecyclerView`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's find out a bit more about how the `RecyclerView` and `RecyclerAdapter`
    classes work.
  prefs: []
  type: TYPE_NORMAL
- en: How to use RecyclerView and RecyclerAdapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We already know how to store almost unlimited notes; we can do so in an `ArrayList`
    instance, although we haven't implemented it yet. We also know that there is a
    UI layout called `RecyclerView` that is specifically designed to display potentially
    long lists of data from an `ArrayList` instance. We just need to see how to put
    it all into action.
  prefs: []
  type: TYPE_NORMAL
- en: To add a `RecyclerView` widget to our layout, we can simply drag and drop it,
    from the palette onto our UI, in the usual way. Don't do it yet. Let's just discuss
    it for a bit first.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `RecyclerView` widget will look like this in the UI designer if you added
    one underneath the button in `content_main.xml`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1 – RecyclerView widget'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.01_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.1 – RecyclerView widget
  prefs: []
  type: TYPE_NORMAL
- en: This appearance, however, is more a representation of the possibilities than
    the actual appearance of an app. If we run the app straight after adding a `RecyclerView`
    widget, we just get a blank area where the `RecyclerView` widget is.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do, to make practical use of `RecyclerView`, is to
    decide what each item in the list will look like. It could be just a single `TextView`
    widget or it could be an entire layout. We will use `LinearLayout`. To be clear
    and specific, we will use a `LinearLayout` that holds three `TextView` widgets
    for each item in our `RecyclerView`. This will allow us to display the note status
    (important, idea, or to-do), the note title, and a short snippet of text from
    the actual note contents.
  prefs: []
  type: TYPE_NORMAL
- en: A list item needs to be defined in its own XML file, then `RecyclerView` can
    hold multiple instances of this list item layout.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, none of this explains how we overcome the complexity of managing
    what data is shown in which list item and how it is retrieved from an `ArrayList`.
  prefs: []
  type: TYPE_NORMAL
- en: This data handling is taken care of by our own customized implementation of
    the `RecyclerAdapter` class. The `RecyclerAdapter` class implements the `Adapter`
    interface. We don't need to know how `Adapter` works internally; we just need
    to override the necessary methods, and then `RecyclerAdapter` will do all the
    work of communicating with our `RecyclerView` widget.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up an implementation of `RecyclerAdapter` to `RecyclerView` is certainly
    more complicated than dragging 20 `TextView` instances onto a `ScrollView` – but
    once it is done, we can forget about it and it will keep on working and manage
    itself regardless of how many notes we add to the `ArrayList`. It also has built-in
    features for handling things such as neat formatting and detecting which item
    in a list was clicked.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to override some methods of the `RecyclerAdapter` class and add
    a little code of our own.
  prefs: []
  type: TYPE_NORMAL
- en: What we will do to set up RecyclerView with RecyclerAdapter and an ArrayList
    of notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s look at an outline of the required steps so we know what to expect.
    To get the whole thing up and running, we would do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the temporary button and related code, and then add a `RecyclerView`
    widget to our layout with a specific `id` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an XML layout to represent each item in the list. We have already mentioned
    each item in the list will be a `LinearLayout` that contains three `TextView`
    widgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new class that extends `RecyclerAdapter` and add code to several overridden
    methods to control how it looks and behaves, including using our list item layout
    and `ArrayList` full of `Note` instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add code to the `MainActivity` class to use the `RecyclerAdapter` class and
    the `RecyclerView` widget and bind it to our `ArrayList` instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `ArrayList` to `MainActivity` to hold all our notes and update the `createNewNote`
    method to add any new notes created in the `DialogNewNote` class to this `ArrayList`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's walk through each of these steps in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Adding RecyclerView, RecyclerAdapter, and ArrayList to the Note to Self project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the Note to Self project. As a reminder, if you want to see the completed
    code and working app as a result of completing this chapter, it can be found in
    the [*Chapter 16*](B16773_16_ePub_RK.xhtml#_idTextAnchor285)`/Note to self` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As the required actions in this chapter jump around between different files,
    classes, and methods, I encourage you to follow along with the files from the
    download bundle by keeping it open for reference in your preferred text editor.
  prefs: []
  type: TYPE_NORMAL
- en: Removing the temporary "Show Note" button and adding RecyclerView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These next few steps will get rid of the temporary code we added in [*Chapter
    14*](B16773_14_ePub_RK.xhtml#_idTextAnchor249)*, Android Dialog Windows*, and
    set up our `RecyclerView` widget ready for binding to `RecyclerAdapter` later
    in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `content_main.xml` file, remove the temporary `Button` with an ID of
    `button`, which we added previously for testing purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `onCreate` method of the `MainActivity.java` file, delete the `Button`
    instance declaration and initialization along with the anonymous class that handles
    its clicks as this code now creates an error. We will delete some more temporary
    code later in this chapter. Delete the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now switch back to the `content_main.xml` file in design view and drag a **RecyclerView**
    widget from the **Containers** category of the palette onto the layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `id` property to `recyclerView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have removed the temporary UI aspects from our project and we have a
    `RecyclerView` widget complete with a unique `id` value ready to be referenced
    from our Java code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a list item for RecyclerView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we need a layout to represent each item in our `RecyclerView` widget.
    As previously mentioned, we will use a `LinearLayout` that holds three `TextView`
    widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following steps to create a list item for use within our `RecyclerView`:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `listitem` in the `LinearLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you are on the `orientation` attribute to `vertical`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at the next screenshot to see what we are trying to achieve with the remaining
    steps of this section. I have annotated it to show what each part will be in the
    finished app:![Figure 16.2 – List item for use within our RecyclerView
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.02_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.2 – List item for use within our RecyclerView
  prefs: []
  type: TYPE_NORMAL
- en: Drag three `TextView` widgets onto the layout, one above the other, as per the
    reference image. The first (top) will hold the note status/type (idea, important,
    or to-do). The second (middle) will hold the note title and the third (bottom)
    the snippet of text from the note itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the various attributes of the `LinearLayout` and `TextView` widgets
    as shown in the following table:![](img/B16773_table_16.1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have a `RecylerView` widget for the main layout and a layout to use for
    each item in the list of `RecyclerView`. We can go ahead and code our `RecyclerAdapter`
    class implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the RecyclerAdapter class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now create and code a brand-new class. Let's call our new class `NoteAdapter`.
    Create a new class called `NoteAdapter` in the same folder as the `MainActivity`
    class (and all the other classes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the code for the `NoteAdapter` class by adding these `import` statements
    and extending it with the `RecyclerView.Adapter` class, and then add these two
    important member variables. Edit the `NoteAdapter` class to be the same as the
    following code that we have just discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notice the class declaration is underlined in red showing there is an error
    in our code. The error is there because the `RecylerView.Adapter` class (that
    we are extending) needs us to override some of its abstract methods.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We discussed abstract classes and their methods in [*Chapter 11*](B16773_11_ePub_RK.xhtml#_idTextAnchor201),
    *More Object-Oriented Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The quickest way to do this is to click the class declaration, hold the *Alt*
    key, and then tap the *Enter* key. Choose **Implement methods**, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3 – Selecting Implement methods'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.03_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.3 – Selecting Implement methods
  prefs: []
  type: TYPE_NORMAL
- en: Then, click **OK** to have Android Studio auto-generate the required methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'This process adds the following three methods:'
  prefs: []
  type: TYPE_NORMAL
- en: The `onCreateViewHolder` method, which is called when a layout for a list item
    is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onBindViewHolder` method, which is called when `RecyclerAdapter` is bound
    to (connected/associated with) `RecyclerView` in the layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getItemCount` method, which will be used to return the number of `Note`
    instances in `ArrayList`. Now it just returns `0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will soon add code to each of these methods to do the required work at the
    specified time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note, however, that we still have multiple errors in our code, including in
    the auto-generated methods as well as the class declaration. A screenshot of the
    code editor at this stage might be useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.4 – Multiple errors in our code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.04_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.4 – Multiple errors in our code
  prefs: []
  type: TYPE_NORMAL
- en: The errors are there because the `NoteAdapter.ListItemHolder` class does not
    exist. `ListItemHolder` was added by us when we extended `NoteAdapter`. It is
    our chosen class type that will be used as the holder for each list item. At the
    moment, it doesn't exist, hence the error. The two methods that also have the
    same error for the same reason were auto-generated when we asked Android Studio
    to implement the missing methods.
  prefs: []
  type: TYPE_NORMAL
- en: Let's solve the problem by making a start on the required `ListItemHolder` class.
    It is useful to us if `ListItemHolder` instances share data/variables with `NoteAdapter`,
    therefore we will create `ListItemHolder` as an inner class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the error in the class declaration and select **Create class ''ListItemHolder''**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.5 – Selecting Create class ''ListItemHolder'''
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.05_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.5 – Selecting Create class 'ListItemHolder'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code has been added to the `NoteAdapter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'But there is still one error with the class declaration, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.6 – Error with the class declaration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.06_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.6 – Error with the class declaration
  prefs: []
  type: TYPE_NORMAL
- en: The error message reads `ListItemHolder` but `ListItemHolder` must also extend
    `RecyclerView.ViewHolder` in order to be used as the parameterized type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amend the declaration of the `ListItemHolder` class to match this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the error is gone from the `NoteAdapter` class declaration but because
    we implemented `View.OnClickListener`, we need to implement the `onClick` method.
    Furthermore, `ViewHolder` doesn''t provide a default constructor, so we need to
    do it. Add the following `onClick` method (empty for now) and this constructor
    method (empty for now) to the `ListItemHolder` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Be sure you added the code to the inner `ListItemHolder` class and not the `NoteAdapter`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: After much tinkering and auto-generating, we finally have an error-free `NoteAdapter`
    class complete with overridden methods and an inner class that we can code to
    get our `RecyclerAdapter` class working. In addition, we can write code to respond
    to clicks (in the `onClick` method) on each of our `ListItemHolder` instances.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the NoteAdapter constructor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we will code the `NoteAdapter` constructor method, which will initialize
    the members of the `NoteAdapter` class. Add this constructor to the `NoteAdapter`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: First, notice the parameters of the constructor. It receives a `MainActivity`
    instance as well as a `List`. This implies that when we use this class, we will
    need to send in a reference to the main activity of this app (`MainActivity`)
    as well as a `List`/`ArrayList`. We will see what use we put the `MainActivity`
    reference to shortly, but we can sensibly guess that the reference to a `List`
    with the parameterized `<Note>` type will be a reference to our `ArrayList` of
    `Note` instances that we will soon code in the `MainActivity` class. `NoteAdapter`
    will then hold a permanent reference to all the user's notes.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the onCreateViewHolder method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we will adapt the auto-generated `onCreateViewHolder` method. Add the
    two highlighted lines of code to the `onCreateViewHolder` method and study the
    parameters that were auto-generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This code works by initializing `itemView` using `LayoutInflater` and our newly
    designed `listitem` layout. It then returns a new `ListItemHolder` instance complete
    with an inflated and ready-to-use layout.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the onBindViewHolder method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we will adapt the `onBindViewHolder` method. Add the highlighted code
    to make the method the same as this code and also make sure to study the method''s
    parameters as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: First, the code checks whether the note is longer than 15 characters and if
    it is, it truncates it so it looks sensible in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Then, it checks what type of note it is (idea, to-do, or important) and assigns
    the appropriate label from the string resources.
  prefs: []
  type: TYPE_NORMAL
- en: This new code has left some errors in the code with the `holder.mTitle`, `holder.mDescription`,
    and `holder.mStatus` variables because we need to add them to our `ListItemHolder`
    inner class. We will do this very soon.
  prefs: []
  type: TYPE_NORMAL
- en: Coding getItemCount
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Amend the `return` statement in this auto-generated method to be the same as
    the highlighted line of code shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This code is used internally by the class and it supplies the current number
    of items in `ArrayList`.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the ListItemHolder inner class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we can turn our attention to the inner class, `ListItemHolder`. Adapt the
    `ListItemHolder` inner class by adding the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `ListItemHolder` constructor just gets a reference to each of the `TextView`
    widgets in the layout. The final two lines of code set the whole view as clickable
    so that the operating system will call the next method we discuss, `onClick`,
    when a holder is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: In the `onClick` method, the call to the `mMainActivity.showNote` method has
    an error because the method doesn't exist yet, but we will fix that in the next
    section. The call will show the clicked note in its appropriate `DialogFragment`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Coding MainActivity to use the RecyclerView and RecyclerAdapter classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, switch over to the `MainActivity` class in the editor window. Add these
    three new members to the `MainActivity` class and remove the temporary code shown
    commented out next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `import` directives if you haven''t already:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These three members are our `ArrayList` for all our `Note` instances, our `RecyclerView`
    instance, and an instance of our class, `NoteAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding code to the onCreate method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following highlighted code to the `onCreate` method after the code
    that handles presses on the floating action button (shown again for context):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will need the following three `import` directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we initialize the `recyclerView` reference with the `RecyclerView`
    instance in the layout. Our `NoteAdapter` (`mAdapter`) is initialized by calling
    the constructor we coded and note that a reference to `MainActivity` (`this`)
    and the `ArrayList` instance is passed in, just as required by the class we have
    coded previously.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a new object, `LayoutManager`. In the next line of code, we
    call `setLayoutManager` on `recyclerView` and pass in this new `LayoutManager`
    instance. Now we can configure some properties of `recyclerView`.
  prefs: []
  type: TYPE_NORMAL
- en: The `setItemAnimator` and `addItemDecoration` methods make each list item a
    little more visually enhanced with a separator line between each item in the list.
    Later, when we build a settings screen, we will give the user the option to add
    and remove this separator.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing we do is call the `setAdapter` method, which combines our adapter
    with our view.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will make some changes to the `addNote` method.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the addNote method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `addNote` method, delete the temporary code we added in [*Chapter 14*](B16773_14_ePub_RK.xhtml#_idTextAnchor249)*,
    Android Dialog Windows*, (shown commented out) and add the new highlighted code
    shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The new highlighted code adds a note to `ArrayList` instead of simply initializing
    a solitary `Note` object, which has now been commented out. Then, we need to call
    the `notifyDataSetChanged` method, which lets our adapter know that a new note
    has been added.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the showNote method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add this new method, which is called from the `NoteAdapter` class using the
    reference to this class that was passed into the `NoteAdapter` constructor. More
    specifically, it is called from the `ListerItemHolder` inner class when one of
    the items in `RecyclerView` is tapped by the user. Add the `showNote` method to
    the `MainActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All the errors in the `NoteAdapter.java` file are now gone.
  prefs: []
  type: TYPE_NORMAL
- en: The code just added will launch a new instance of `DialogShowNote` and pass
    in the specific, required note as pointed to by `noteToShow`.
  prefs: []
  type: TYPE_NORMAL
- en: Running the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can now run the app and enter a new note as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.7 – Adding a new note'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.07_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.7 – Adding a new note
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have entered several notes of several types, the list (`RecyclerView`)
    will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.8 – List of notes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.08_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.8 – List of notes
  prefs: []
  type: TYPE_NORMAL
- en: Reader challenge
  prefs: []
  type: TYPE_NORMAL
- en: We could have spent more time formatting the layouts of our two dialog windows.
    Why not refer to [*Chapter 5*](B16773_05_ePub_RK.xhtml#_idTextAnchor101)*, Beautiful
    Layouts with CardView and ScrollView*, as well as the Material Design website
    and do a better job than we have done so far? Furthermore, you could enhance the
    `RecyclerView` class/list of notes by using `CardView` instead of `LinearLayout`.
  prefs: []
  type: TYPE_NORMAL
- en: Don't spend too long adding new notes, however, because there is a slight problem.
    Close and restart the app. Uh oh, all the notes are gone!
  prefs: []
  type: TYPE_NORMAL
- en: Frequently asked questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I still don't understand how `RecyclerAdapter` works – why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That''s because we haven''t really discussed it. The reason we have not discussed
    the behind-the-scenes details is that we don''t need to know them. If we override
    the required methods, as we have just seen, everything will work. This is how
    `RecyclerAdapter` and most other classes we use are meant to be: hidden implementations
    with public methods to expose the necessary functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: Do I need to know what is going on inside the `RecyclerAdapter` class and other
    classes as well?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is true that there are more details about `RecyclerAdapter` (and almost
    every class that we use in this book) that we don''t have the space to discuss.
    It is good practice to read the official documentation of the classes you use.
    You can read more about all the classes from the Android API here: [https://developer.android.com/reference](https://developer.android.com/reference).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have added the ability to hold multiple notes and implemented the ability
    to display them.
  prefs: []
  type: TYPE_NORMAL
- en: We achieved this by learning about and using the `RecyclerAdapter` class, which
    implements the `Adapter` interface, which allows us to bind together `RecyclerView`
    and `ArrayList`, allowing the seamless display of data without us (the programmer)
    having to worry about the complex code that is part of these classes and that
    we don't even see.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start with making the user's notes persist when
    they quit the app or switch off their device. In addition, we will create a settings
    screen and see how we can make the settings persist as well. We will use different
    techniques to achieve each of these goals.
  prefs: []
  type: TYPE_NORMAL
