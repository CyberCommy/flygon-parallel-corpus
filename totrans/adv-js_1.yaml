- en: '*Chapter 1*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introducing ECMAScript 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the different scopes in JavaScript and characterize variable declaration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplify JavaScript object definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destructure objects and arrays, and build classes and modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transpile JavaScript for compatibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compose iterators and generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, you'll be learning how to use the new syntax and concepts of
    ECMAScript.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JavaScript**, often abbreviated as JS, is a programming language designed
    to allow the programmer to build interactive web applications. JavaScript is one
    of the backbones of web development, along with HTML and CSS. Nearly every major website,
    including Google, Facebook, and Netflix, make heavy use of JavaScript. JS was
    first created for the Netscape web browser in 1995\. The first prototype of JavaScript
    was written by Brendan Eich in just a mere 10 days. Since its creation, JavaScript
    has become one of the most common programming languages in use today.'
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will deepen your understanding of the core of JavaScript and
    its advanced functionality. We will cover the new features that have been introduced
    in the ECMAScript standard, JavaScript's asynchronous programming nature, DOM
    and HTML event interaction with JavaScript, JavaScript's functional programming
    paradigms, testing JavaScript code, and the JavaScript development environment.
    With the knowledge gained from this book, you will be ready to begin using JavaScript
    in a professional setting to build powerful web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning with ECMAScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ECMAScript** is a scripting language specification standardized by **ECMA
    International**. It was created to standardize JavaScript in an attempt to allow
    for independent and compatible implementations. **ECMAScript 6**, or **ES6**,
    was originally released in 2015 and has gone through several minor updates since
    then.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You may refer to the following link for more information about ECMA specification:[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In computer science, **scope** is the region of a computer program where the
    binding or association of a name to an entity, such as a variable or function,
    is valid. JavaScript has the following two distinct types of scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Function scope**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block scope**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Until ES6, function scope was the only form of scope in JavaScript; all variable
    and function declarations followed function scope rules. Block scope was introduced
    in ES6 and is used only by the variables declared with the new variable declaration
    keywords `let` and `const`. These keywords are discussed in detail in the *Declaring
    Variables* section.
  prefs: []
  type: TYPE_NORMAL
- en: Function Scope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Function scope** in JavaScript is created inside functions. When a function
    is declared, a new scope block is created inside the body of that function. Variables that
    are declared inside the new function scope cannot be accessed from the parent scope;
    however, the function scope has access to variables in the parent scope.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a variable with function scope, we must declare the variable with
    the `var` keyword. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`var example = 5;`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet provides an example of function scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.1: Function Scope'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Parent scope** is simply the scope of the section of code that the function
    was defined in. This is usually the global scope; however, in some cases, it may
    be useful to define a function inside a function. In that case, the nested function''s
    parent scope would be the function in which it is defined. In the preceding snippet,
    the function scope is the scope that was created inside the function test. The
    parent scope is the global scope, that is, where the function is defined.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Parent scope is the block of code, which the function is defined in. It is not
    the block of code in which the function is called.
  prefs: []
  type: TYPE_NORMAL
- en: Function Scope Hoisting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a variable is created with function scope, it''s declaration automatically
    gets hoisted to the top of the scope. **Hoisting**means that the interpreter moves
    the instantiation of an entity to the top of the scope it was declared in, regardless
    of where in the scope block it is defined. Functions and variables declared using
    `var` are hoisted in JavaScript; that is, a function or a variable can be used
    before it has been declared. The following code demonstrates this, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.2: Function Scope Hoisting'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Since a hoisted variable that's been declared with `var` can be used before
    it is declared, we have to be careful to not use that variable before it has been
    assigned a value. If a variable is accessed before it has been assigned a value,
    it will return the value as `undefined`, which can cause problems, especially
    if variables are used in the global scope.
  prefs: []
  type: TYPE_NORMAL
- en: Block Scope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A new block scope in JavaScript is created with curly braces (`{}`). A pair
    of **curly braces** can be placed anywhere in the code to define a new scope block.
    If statements, loops, functions, and any other curly brace pairs will have their
    own block scope. This includes floating curly brace pairs not associated with
    a keyword (if, for, etc). The code in the following snippet is an example of the
    block scope rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.3: Block Scope'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Variables declared with the keywords `let` and `const` have **block scope**.
    When a variable is declared with block scope, it does NOT have the same variable
    hoisting as variables that are created in function scope. Block scoped variables
    are not hoisted to the top of the scope and therefore cannot be accessed until
    they are declared. This means that variables that are created with block scope
    are subject to the **Temporal Dead Zone** (**TDZ**). The TDZ is the period between
    when a scope is entered and when a variable is declared. It ends when the variable
    is declared rather than assigned. The following example demonstrates the TDZ:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.4: Temporal Dead Zone'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a variable is accessed inside the Temporal Dead Zone, then a runtime error
    will be thrown. This is important because it allows our code to be built more
    robustly with fewer semantic errors arising from variable declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a better understanding of scope blocks, refer to the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1: Function Scope versus Block Scope](image/Figure_1.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: Function Scope versus Block Scope'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In summary, scope provides us with a way to separate variables and restrict
    access between blocks of code. Variable identifier names can be reused between
    blocks of scope. All new scope blocks that are created can access the parent scope,
    or the scope in which they were created or defined. JavaScript has two types of
    scope. A new function scope is created for each function defined. Variables can
    be added to function scope with the `var` keyword, and these variables are hoisted
    to the top of the scope. Block scope is a new ES6 feature. A new block scope is
    created for each set of curly braces. Variables are added to block scope with
    the `let` and `const` keywords. The variables that are added are not hoisted and
    are subject to the TDZ.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1: Implementing Block Scope'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To implement block scope principles with variables, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a function called `fn1` as shown (`function fn1())`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the string as `scope 1.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a variable called `scope` with the value of 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the value of the variable called `scope`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new block scope inside of the function with curly braces (`{}`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the new scope block, log the string called `scope 2.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new variable called `scope`, inside the scope block and assign the
    value `different scope`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the value variable `scope` inside our block scope (scope 2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Outside of the block scope defined in step 5 (scope 2), create a new block scope
    (use curly braces).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the string called `scope 3.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a variable inside the scope block (scope 3) with the same name as the
    variables (call it `scope`) and assign it the value `a third scope`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the new variable's value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `fn1` and observe its output
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code**'
  prefs: []
  type: TYPE_NORMAL
- en: 'index.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[https://bit.ly/2RoOotW](https://bit.ly/2RoOotW)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Snippet 1.5: Block implementation output'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Outcome**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2: Scope outputs'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.2: Scope outputs'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have successfully implemented block scope in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we covered the two types of JavaScript scope, function and
    block scope, and the differences between them. We demonstrated how a new instance
    of function scope was created inside each function and how block scope was created
    inside each set of curly braces. We discussed the variable declaration keywords
    for each type of scope, `var` for function scope and `let/const` for block scope.
    Finally, we covered the basics of hoisting with both function and block scope.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Basic JavaScript uses the keyword `var` for **variable declaration**. ECMAScript
    6 introduced two new keywords to declare variables; they are `let` and `const`.
    In the world of Professional JavaScript variable declaration, `var` is now the
    weakest link. In this topic, we will go over the new keywords, `let` and `const`,
    and explain why they are better than `var`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three ways to declare variables in JavaScript are by using `var`, `let`,
    and `const`. All function in slightly different ways. The key differences between
    the three variable declaration keywords are the way they handle variable reassignment,
    variable scope, and variable hoisting. These three features can be explained briefly
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variable reassignment:** The ability to change or reassign the variable''s
    value at any time.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variable scope:** The extent or area of the code from which the variable
    may be accessed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variable hoisting**: The variable instantiation and assignment time in relation
    to the variable''s declaration. Some variables can be used before they are declared.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `var` keyword is the older variable declaration keyword that''s used to
    declare variables in JavaScript. All variables created with `var` can be reassigned,
    have function scope, and have variable hoisting. This means that variables created
    with `var` are hoisted to the top of the scope block, where they are defined and
    can be accessed before declaration. The following snippet demonstrates this, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.6: Variables created using var are hoisted'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Since variables that are created with the keyword `var` are not constants,
    they can be created, assigned, and reassigned a value at will. The following code
    demonstrates this aspect of the functionality of `var`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.7: Variables created using var are not constant'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Variables created with `var` can be reassigned at any time and once the variable
    is created, it can be accessed from anywhere in the function, even before the
    original declaration point.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `let` keyword functions similar to the keyword `var`. As expected, the
    keyword let allows us to declare a variable that can be reassigned at any time.
    This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.8: Variables created with let are not constant'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are two significant differences between `let` and `var`. Where `let` and
    `var` differ is their scoping and variable hoisting properties. Variables declared
    with `let` are scoped at the block level; that is, they are only defined in the
    block of code contained within a matching pair of curly braces (`{}`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables declared with `let` are not subject to variable hoisting. This means
    that accessing a variable declared with `let` before the assignment will throw
    a runtime error. As discussed earlier, this is the Temporal Dead Zone. An example
    of this is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.9: Variables created with let are not hoisted'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The last variable declaration keyword is `const`. The `const` keyword has the
    same scoping and variable hoisting rules as the `let` keyword; variables declared
    with `const` have block scoping and do not get hoisted to the top of the scope.
    This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.10: Variables created with const are not hoisted'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The key difference between `const` and `let` is that `const` signifies that
    the identifier will not be reassigned. The `const` identifier signifies a read-only
    reference to a value. In other words, the value written in a `const` variable
    cannot be changed. If the value of a variable initialized with `const` is changed,
    a `TypeError` will be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though variables created with `const` cannot be reassigned, this does
    not mean that they are immutable. If an array or object is stored in a variable
    declared with `const`, the value of the variable cannot be overwritten. However,
    the array content or object properties can be changed. The contents of an array
    can be modified with functions such as `push()`, `pop()`, or `map()` and object
    properties can be added, removed, or updated. This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.11: Variables created with const are constant but not immutable'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To understand the different keywords in more detail, refer to the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3: Differences between var, let, and const'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.3: Differences between var, let, and const'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now that we understand the nuances among `var`, `let`, and `const`, we can decide
    on which one to use. In the professional world, we should always use `let` and
    `const`, because they provide all the functionality of `var` and allow the programmer
    to be specific and restrictive with the variable scope and usage.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, `var`, `let`, and `const` all function similarly. The key differences
    are in the nature of `const`, the scope, and the hoisting. `Var` is function scoped,
    not constant, and hoisted to the top of the scope block. `let` and `const` are
    both block-scoped and not hoisted. `let` is not constant, while, `const` is constant
    but immutable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2: Utilizing Variables'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To utilize the `var`, `const`, and `let` variable declaration keywords for
    variable hoisting and reassignment properties, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log the string `Hoisted before assignment:` and the value of the `hoisted` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a variable called `hoisted` with the keyword `var` and assign it the
    value `this got hoisted`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the string `hoisted after assignment:` and the value of the `hoisted` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a try-catch block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `try` block, log the value of the variable called `notHoisted1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `catch` block, give the catch block the `err` parameter, then log
    the string `Not hoisted1 with error:` and the value of `err.message`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the try-catch block, create the `notHoisted1` variable with the `let`
    keyword and assign the value `5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the string `notHoisted1 after assignment` and the value of `notHoisted1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another try-catch block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `try` block, log the value of the `notHoisted2` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the catch block, give the catch block the `err` parameter, then log the
    string `Not hoisted2 with error:` and the value of `err.message`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the second try-catch block, create the `notHoisted2` variable with the
    keyword `const` and assign the value [`1`,`2`,`3`].
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the string `notHoisted2 after assignment` and the value of `notHoisted2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a final try catch block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `try` block, reassign `notHoisted2` to the `new value` string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the catch block, give the catch block the `err` parameter, then log the
    string `Not hoisted 2 was not able to be changed`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the try-catch block, push the value `5` onto the array in `notHoisted2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the string `notHoisted2 updated. Now is:` and the value of `notHoisted2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code**'
  prefs: []
  type: TYPE_NORMAL
- en: 'index.js:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.12: Updating the contents of the object'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[https://bit.ly/2RDEynv](https://bit.ly/2RDEynv)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Outcome**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4: Hoisting the variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.4: Hoisting the variables'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have successfully utilized keywords to declare variables.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed variable declaration in ES6 and the benefits of
    using the `let` and `const` variable declaration keywords over the `var` variable
    declaration keyword. We discussed each keywords variable reassignment properties,
    variable scoping, and variable hoisting properties. The keywords `let` and `const`
    are both `create` variables in the block scope where `var` creates a variable
    in the function scope. Variables created with `var` and `let` can be reassigned
    at will. However, variables created with `const` cannot be reassigned. Finally,
    variables created with the keyword `var` are hoisted to the top of the scope block
    in which they were defined. Variables created with `let` and `const` are not hoisted.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Arrow Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Arrow functions**, or **Fat arrow functions**, are a new way to create functions
    in ECMAScript 6\. Arrow functions simplify function syntax. They are called **fat
    arrow functions** because they are denoted with the characters =>, which, when
    put together look like a fat arrow. Arrow functions in JavaScript are frequently
    used in callback chains, promise chains, array methods, in any situation where
    unregistered functions would be useful.'
  prefs: []
  type: TYPE_NORMAL
- en: The key difference between arrow functions and normal functions in JavaScript
    is that arrow functions are **anonymous**. Arrow functions are not named and not
    bound to an identifier. This means that an arrow function is created dynamically
    and is not given a name like normal functions. Arrow functions can however be
    assigned to a variable to allow for reuse.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating an arrow function, all we need to do is remove the function keyword
    and place an arrow between the function arguments and function body. Arrow functions
    are denoted with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.13: Arrow function syntax'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you can see from the preceding syntax, arrow functions are a more concise
    way of writing functions in JavaScript. They can make our code more concise and
    easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: 'Arrow function syntax can also vary, depending on several factors. Syntax can
    vary slightly depending on the number of arguments passed in to the function,
    and the number of lines of code in the function body. The special syntax conditions
    are outlined briefly in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: Single input argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No input arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single line function body
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single expression broken over multiple lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object literal return value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exercise 3: Converting Arrow Functions'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To demonstrate the simplified syntax by converting a standard function into
    an arrow function, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a function that takes in parameters and returns the sum of the two parameters.
    Save the function into a variable called `fn1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the function you just created to an arrow function and save into another
    variable called `fn2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To convert the function, remove the `function` keyword. Next, place an arrow
    between the function arguments and the function body.
  prefs: []
  type: TYPE_NORMAL
- en: Call both functions and compare the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code**'
  prefs: []
  type: TYPE_NORMAL
- en: 'index.js:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.14: Calling the functions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[https://bit.ly/2M6uKwN](https://bit.ly/2M6uKwN)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Outcome**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5: Comparing the function''s output](image/Figure_1.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: Comparing the function''s output'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have successfully converted normal functions into arrow functions.
  prefs: []
  type: TYPE_NORMAL
- en: Arrow Function Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If there are multiple arguments being passed in to the function, then we create
    the function with the parentheses around the arguments as normal. If we only have
    a single argument to pass to the function, we do not need to include the parentheses
    around the argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one exception to this rule, and that is if the parameter is anything
    other than a simple identifier. If we include a default value or perform operations
    in the function arguments, then we must include the parentheses. For example,
    if we include a default parameter, then we will need the parentheses around the
    arguments. These two rules are shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.15: Single argument arrow function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If we create an arrow function with no arguments, then we need to include the
    parentheses, but they will be empty. This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.16: No argument'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Arrow functions can also have varied syntax, depending on the body of the function.
    As expected, if the body of the function is multiline, then we must surround it
    with curly braces. However, if the body of the function is a single line, then
    we do not need to include the curly braces around the body of the function. This
    is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.17: Single line body'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'When using arrow functions, we may also exclude the return keyword if the function
    is a single line. The arrow function automatically returns the resolved value
    of the expression on that line. This syntax is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.18: Single line body when value is returned'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Since arrow functions with single expression bodies can be defined without
    the curly braces, we need special syntax to allow us to split the single expression
    over multiple lines. To do this, we can wrap the multi-line expression in parentheses.
    The JavaScript interpreter sees that the line are wrapped in parentheses and treats
    it as if it were a single line of code. This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.19: Single line expression broken into multiple lines'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If we have a single line arrow function returning an object literal, we will
    need special syntax. In ES6, scope blocks, function bodies, and object literals
    are all defined with curly braces. Since single line arrow functions do not need
    curly braces, we must use the special syntax to prevent the object literal''s
    curly braces from being interpreted as either function body curly braces or scope
    block curly braces. To do this, we surround the returned object literal with parentheses.
    This instructs the JavaScript engine to interpret curly braces inside the parentheses
    as an expression instead of a function body or scope block declaration. This is
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.20: Object literal return value'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When using arrow functions, we must be careful of the scope that these functions
    are called in. Arrow functions follow normal scoping rules in JavaScript, with
    the exception of the `this` scope. Recall that in basic JavaScript, each function
    is assigned a scope, that is, the `this` scope. Arrow functions are not assigned
    a `this` scope. They inherit their parent's `this` scope and cannot have a new
    `this` scope bound to them. This means that, as expected, arrow functions have
    access to the scope of the parent function, and subsequently, the variables in
    that scope, but the scope of `this` cannot be changed in an arrow function. Using
    the `.apply()`, `.call()`, or `.bind()` function modifiers will NOT change the
    scope of an arrow function's `this` property. If you are in a situation where
    you must bind `this` to another scope, then you must use a normal JavaScript function.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, arrow functions provide us with a way to simplify the syntax of
    anonymous functions. To write an arrow function, simply omit the function keyword
    and add an arrow between the arguments and function body.
  prefs: []
  type: TYPE_NORMAL
- en: Special syntax can then be applied to the function arguments and body to simplify
    the arrow function even more. If the function has a single input argument, then
    we can omit the parentheses around it. If the function body has a single line,
    we can omit the `return` keyword and the curly braces around it. However, single-line
    functions that return an object literal must be surrounded with parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use parentheses around the function body to break a single line
    body into multiple lines for readability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4: Upgrading Arrow Functions'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To utilize the ES6 arrow function syntax to write functions, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the `exercises/exercise4/exercise.js` file and perform the updates
    in this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert `fn1` with basic ES6 syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the function keyword before the function arguments. Add an arrow between
    the function arguments and function body.
  prefs: []
  type: TYPE_NORMAL
- en: Convert `fn2` with single statement function body syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the function keyword before the function arguments. Add an arrow between
    the function arguments and function body.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the curly braces `({})` around the function body. Remove the return keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Convert `fn3` with Single input argument syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the function keyword before the function arguments. Add an arrow between
    the function arguments and function body.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the parentheses around the function input argument.
  prefs: []
  type: TYPE_NORMAL
- en: Convert `fn4` with no input argument syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the function keyword before the function arguments. Add an arrow between
    the function arguments and function body.
  prefs: []
  type: TYPE_NORMAL
- en: Convert `fn5` with object literal syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the function keyword before the function arguments. Add an arrow between
    the function arguments and function body.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the curly braces `({})` around the function body. Remove the return keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Surround the returned object with parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs: []
  type: TYPE_NORMAL
- en: 'index.js:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Snippet 1.21: Arrow function conversion'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[https://bit.ly/2M6qSfg](https://bit.ly/2M6qSfg)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Outcome**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6: Converting the function''s output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.6: Converting the function''s output'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have successfully utilized the ES6 arrow function syntax to write functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we introduced arrow functions and demonstrated how they can
    be used to greatly simplify function declaration in JavaScript. First, we covered
    the basic syntax for arrow functions: `( arg1, arg2, argn ) => { /* function body
    */ }`. We proceeded to cover the five special syntax cases for advanced arrow
    functions, as outlined in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Single input argument: `arg1 => { /* function body */ }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No input arguments: `( ) => { /* function body */ }`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Single line function body: `( arg1, arg2, argn ) => /* single line */`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Single expression broken over multiple lines: `( arg1, arg2, argn ) => ( /*
    multi line single expression */ )`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Object literal return value: `( arg1, arg2, argn ) => ( { /* object literal
    */ } )`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning Template Literals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Template literals** are a new form of string that was introduced in ECMAScript
    6\. They are enclosed by the **backtick** symbol ([PRE21]'
  prefs: []
  type: TYPE_NORMAL
- en: const example = "pretty";
  prefs: []
  type: TYPE_NORMAL
- en: console.log( `Template literals are ${ example } useful!!!` );
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: Template literals are pretty useful!!!'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: // Using normal strings
  prefs: []
  type: TYPE_NORMAL
- en: console.log( 'This is line 1\nThis is line 2' );
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: This is line 1'
  prefs: []
  type: TYPE_NORMAL
- en: // This is line 2
  prefs: []
  type: TYPE_NORMAL
- en: // Using template literals
  prefs: []
  type: TYPE_NORMAL
- en: console.log( `This is line 1
  prefs: []
  type: TYPE_NORMAL
- en: This is line 2` );
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: This is line 1'
  prefs: []
  type: TYPE_NORMAL
- en: // This is line 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: let a = 5, b = 10;
  prefs: []
  type: TYPE_NORMAL
- en: console.log( a + ' + ' + b + ' is equal to ' + ( a + b ) );
  prefs: []
  type: TYPE_NORMAL
- en: console.log( `${a} + ${b} is equal to ${a + b}` );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: function javascriptOrCPlusPlus() { return 'JavaScript'; }
  prefs: []
  type: TYPE_NORMAL
- en: const outputLiteral = `We are learning about ${ `Professional ${ javascriptOrCPlusPlus()
    }` }`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: // Define the tag function
  prefs: []
  type: TYPE_NORMAL
- en: function tagFunction( strings, numExp, fruitExp ) {
  prefs: []
  type: TYPE_NORMAL
- en: const str0 = strings[0]; // "We have"
  prefs: []
  type: TYPE_NORMAL
- en: const str1 = strings[1]; // " of "
  prefs: []
  type: TYPE_NORMAL
- en: 'const quantity = numExp < 10 ? ''very few'' : ''a lot'';'
  prefs: []
  type: TYPE_NORMAL
- en: return str0 + quantity + str1 + fruitExp + str2;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const fruit = 'apple', num = 8;
  prefs: []
  type: TYPE_NORMAL
- en: '// Note: lack of parenthesis or whitespace when calling tag function'
  prefs: []
  type: TYPE_NORMAL
- en: const output = tagFunction`We have ${num} of ${fruit}. Exciting!`
  prefs: []
  type: TYPE_NORMAL
- en: console.log( output )
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: We have very few of apples. Exciting!!'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: function tagFunction( strings ){ console.log( strings.raw[0] ); }
  prefs: []
  type: TYPE_NORMAL
- en: tagFunction`This is line 1\. \n This is line 2.`
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: "This is line 1\. \n This is line 2." The characters //''\''
    and ''n'' are not parsed into a newline character'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'address: ''123 Main St, San Francisco CA, USA'','
  prefs: []
  type: TYPE_NORMAL
- en: 'floors: 2,'
  prefs: []
  type: TYPE_NORMAL
- en: 'price: 5000000,'
  prefs: []
  type: TYPE_NORMAL
- en: 'owner: ''John Doe'''
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: function parseHouse( property ) {
  prefs: []
  type: TYPE_NORMAL
- en: return `${property.owner} is selling the property at ${property.address} for
    ${property.price} USD`
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const house = {
  prefs: []
  type: TYPE_NORMAL
- en: 'address: "123 Main St, San Francisco CA, USA",'
  prefs: []
  type: TYPE_NORMAL
- en: 'floors: 2,'
  prefs: []
  type: TYPE_NORMAL
- en: 'price: 5000000,'
  prefs: []
  type: TYPE_NORMAL
- en: 'owner: "John Doe"'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: console.log( parseHouse( house ) );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: function getPersionES5( name, age, height ) {
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: name,'
  prefs: []
  type: TYPE_NORMAL
- en: 'age: age,'
  prefs: []
  type: TYPE_NORMAL
- en: 'height: height'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: getPersionES5( 'Zachary', 23, 195 )
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: { name: ''Zachary'', age: 23, height: 195 }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: function getPersionES6( name, age, height ) {
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: name,
  prefs: []
  type: TYPE_NORMAL
- en: age,
  prefs: []
  type: TYPE_NORMAL
- en: height
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: getPersionES6( 'Zachary', 23, 195 )
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: { name: ''Zachary'', age: 23, height: 195 }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: function getPersonES5( name, age, height ) {
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: 'name: name,'
  prefs: []
  type: TYPE_NORMAL
- en: 'height: height,'
  prefs: []
  type: TYPE_NORMAL
- en: 'getAge: function(){ return age; }'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: getPersonES5( 'Zachary', 23, 195 ).getAge()
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: 23'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: function getPersionES6( name, age, height ) {
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: name,
  prefs: []
  type: TYPE_NORMAL
- en: height,
  prefs: []
  type: TYPE_NORMAL
- en: getAge(){ return age; }
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: getPersionES6( 'Zachary', 23, 195 ).getAge()
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: 23'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: const varName = 'firstName';
  prefs: []
  type: TYPE_NORMAL
- en: const person = {
  prefs: []
  type: TYPE_NORMAL
- en: '[ varName ] = ''John'','
  prefs: []
  type: TYPE_NORMAL
- en: 'lastName: ''Smith'''
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( person.firstName ); // Expected output: John'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: const varName = 'first';
  prefs: []
  type: TYPE_NORMAL
- en: function computeNameType( type ) {
  prefs: []
  type: TYPE_NORMAL
- en: return type + 'Name';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const person = {
  prefs: []
  type: TYPE_NORMAL
- en: '[ varName + ''Name'' ] = ''John'','
  prefs: []
  type: TYPE_NORMAL
- en: '[ computeNameType( ''last'' ) ]: ''Smith'''
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( person.firstName ); // Expected output: John'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( person.lastName ); // Expected output: Smith'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: const PI = 3.1415;
  prefs: []
  type: TYPE_NORMAL
- en: const INCHES_TO_FEET = 0.083333;
  prefs: []
  type: TYPE_NORMAL
- en: const exportObject = {
  prefs: []
  type: TYPE_NORMAL
- en: PI,
  prefs: []
  type: TYPE_NORMAL
- en: INCHES_TO_FEET,
  prefs: []
  type: TYPE_NORMAL
- en: sum( n1, n2 ) {
  prefs: []
  type: TYPE_NORMAL
- en: return n1 + n2;
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: subtract( n1, n2 ) {
  prefs: []
  type: TYPE_NORMAL
- en: return n1 - n2;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: console.log( exportObject );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: let names = [ 'John', 'Michael' ];
  prefs: []
  type: TYPE_NORMAL
- en: let [ name1, name2 ] = names;
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( name1 ); // Expected output: ''John'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( name2 ); // Expected output: ''Michael'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: let names = [ 'John', 'Michael' ];
  prefs: []
  type: TYPE_NORMAL
- en: let [ name1 ] = names
  prefs: []
  type: TYPE_NORMAL
- en: let [ name2, name3, name4 ] = names;
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( name1 ); // Expected output: ''John'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( name2 ); // Expected output: ''John'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( name3 ); // Expected output: ''Michael'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( name4 ); // Expected output: undefined'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: let names = [ 'John', 'Michael', 'Jessica', 'Susan' ];
  prefs: []
  type: TYPE_NORMAL
- en: let [ name1,, name3 ] = names;
  prefs: []
  type: TYPE_NORMAL
- en: // Note the missing variable name for the second array item
  prefs: []
  type: TYPE_NORMAL
- en: let [ ,,, ] = names; // Ignores all items in the array
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( name1 ); // Expected output: ''John'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( name3 ); // Expected output: ''Jessica'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: let [ a = 1, b = 2, c = 3 ] = [ 'cat', null ];
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( a ); // Expected output: ''cat'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( b ); // Expected output: null'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( c ); // Expected output: 3'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: let a = 10;
  prefs: []
  type: TYPE_NORMAL
- en: let b = 5;
  prefs: []
  type: TYPE_NORMAL
- en: '[ a, b ] = [ b, a ];'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( a ); // Expected output: 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( b ); // Expected output: 10'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: const data = [ 1, 2, 3 ];
  prefs: []
  type: TYPE_NORMAL
- en: const [ a, , b, c = 4 ] = data;
  prefs: []
  type: TYPE_NORMAL
- en: console.log( a, b, c );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: function fn( num1, num2, ...args ) {
  prefs: []
  type: TYPE_NORMAL
- en: // Destructures an indefinite number of function parameters into the
  prefs: []
  type: TYPE_NORMAL
- en: //array args, excluding the first two arguments passed in.
  prefs: []
  type: TYPE_NORMAL
- en: console.log( num1 );
  prefs: []
  type: TYPE_NORMAL
- en: console.log( num2 );
  prefs: []
  type: TYPE_NORMAL
- en: console.log( args );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: fn( 1, 2, 3, 4, 5, 6 );
  prefs: []
  type: TYPE_NORMAL
- en: // Expected output
  prefs: []
  type: TYPE_NORMAL
- en: // 1
  prefs: []
  type: TYPE_NORMAL
- en: // 2
  prefs: []
  type: TYPE_NORMAL
- en: // [ 3, 4, 5, 6 ]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: function fn( ...[ n1, n2, n3 ] ) {
  prefs: []
  type: TYPE_NORMAL
- en: // Destructures an indefinite number of function parameters into the
  prefs: []
  type: TYPE_NORMAL
- en: // array args, which is destructured into 3 variables
  prefs: []
  type: TYPE_NORMAL
- en: console.log( n1, n2, n3 );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'fn( 1, 2 ); // Expected output: 1, 2, undefined'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: function fn( n1, n2, n3 ) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log( n1, n2, n3 );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const values = [ 1, 2, 3 ];
  prefs: []
  type: TYPE_NORMAL
- en: 'fn( ...values ); // Expected output: 1, 2, 3'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: const [ n1, n2, n3, ...remaining ] = [ 1, 2, 3, 4, 5, 6 ];
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( n1 ); // Expected output: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( n2 ); // Expected output: 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( n3 ); // Expected output: 3'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( remaining ); // Expected output: [ 4, 5, 6 ]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  prefs: []
  type: TYPE_NORMAL
- en: const { firstName, lastName } = obj;
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( firstName ); // Expected output: ''Bob'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( lastName ); // Expected output: ''Smith'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  prefs: []
  type: TYPE_NORMAL
- en: const { firstName, middleName } = obj;
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( firstName ); // Expected output: ''Bob'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( middleName ); // Expected output: undefined'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  prefs: []
  type: TYPE_NORMAL
- en: 'const { firstName: first, lastName } = obj;'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( first ); // Expected output: ''Bob'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( lastName ); // Expected output: ''Smith'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  prefs: []
  type: TYPE_NORMAL
- en: const { firstName = 'Samantha', middleName = 'Chris' } = obj;
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( firstName ); // Expected output: ''Bob'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( middleName ); // Expected output: ''Chris'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  prefs: []
  type: TYPE_NORMAL
- en: 'const { firstName: first = ''Samantha'', middleName: middle = ''Chris'' } =
    obj;'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( first ); // Expected output: ''Bob'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( middle); // Expected output: ''Chris'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'const data = { f1: ''v1'', f2: ''2'', f3: ''v3'' };'
  prefs: []
  type: TYPE_NORMAL
- en: 'const { f1, f2: field2, f4 = ''v4'' } = data;'
  prefs: []
  type: TYPE_NORMAL
- en: console.log( f1, field2, f4 );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  prefs: []
  type: TYPE_NORMAL
- en: let firstName, lastName;
  prefs: []
  type: TYPE_NORMAL
- en: '( { firstName: first, lastName } = obj );'
  prefs: []
  type: TYPE_NORMAL
- en: // Note parentheses around expression
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( firstName ); // Expected output: ''Bob'''
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( lastName ); // Expected output: ''Smith'''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'const obj = { firstName: ''Bob'', middleName: ''Chris'', lastName: ''Smith''
    };'
  prefs: []
  type: TYPE_NORMAL
- en: const { firstName, ...otherNames } = obj;
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( firstName ); // Expected output: ''Bob'''
  prefs: []
  type: TYPE_NORMAL
- en: console.log( otherNames );
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: { middleName: ''Chris'', lastName: ''Smith'' }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'const data = { arr: [ 1, 2, 3 ] };'
  prefs: []
  type: TYPE_NORMAL
- en: 'const { arr: [ , v2 ] } = data;'
  prefs: []
  type: TYPE_NORMAL
- en: console.log( v2 );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '['
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'title: ''Linear Algebra II'','
  prefs: []
  type: TYPE_NORMAL
- en: 'description: ''Advanced linear algebra.'','
  prefs: []
  type: TYPE_NORMAL
- en: 'texts: [ {'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: ''James Smith'','
  prefs: []
  type: TYPE_NORMAL
- en: 'price: 120,'
  prefs: []
  type: TYPE_NORMAL
- en: 'ISBN: ''912-6-44-578441-0'''
  prefs: []
  type: TYPE_NORMAL
- en: '} ]'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '{ ... },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ ... }'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[ course ] = [ … ]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[ { texts: textbooks} ] = [ … ]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[ { texts: [ textbook ] } ] = [ … ]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[ { texts: [ { ISBN } ] } ] = [ … ]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: const courseCatalogMetadata = [
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'title: ''Linear Algebra II'','
  prefs: []
  type: TYPE_NORMAL
- en: 'description: ''Advanced linear algebra.'','
  prefs: []
  type: TYPE_NORMAL
- en: 'texts: [ {'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: ''James Smith'','
  prefs: []
  type: TYPE_NORMAL
- en: 'price: 120,'
  prefs: []
  type: TYPE_NORMAL
- en: 'ISBN: ''912-6-44-578441-0'''
  prefs: []
  type: TYPE_NORMAL
- en: '} ]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  prefs: []
  type: TYPE_NORMAL
- en: const [ course ] = courseCatalogMetadata;
  prefs: []
  type: TYPE_NORMAL
- en: 'const [ { texts: textbooks } ] = courseCatalogMetadata;'
  prefs: []
  type: TYPE_NORMAL
- en: 'const [ { texts: [ textbook ] } ] = courseCatalogMetadata;'
  prefs: []
  type: TYPE_NORMAL
- en: 'const [ { texts: [ { ISBN } ] } ] = courseCatalogMetadata;'
  prefs: []
  type: TYPE_NORMAL
- en: console.log( course );
  prefs: []
  type: TYPE_NORMAL
- en: console.log( textbooks );
  prefs: []
  type: TYPE_NORMAL
- en: console.log( textbook );
  prefs: []
  type: TYPE_NORMAL
- en: console.log( ISBN );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: class name { /* class stuff goes here */ }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: class House{
  prefs: []
  type: TYPE_NORMAL
- en: constructor(address, floors = 1, garage = false) {
  prefs: []
  type: TYPE_NORMAL
- en: this.address = address;
  prefs: []
  type: TYPE_NORMAL
- en: this.floors = floors;
  prefs: []
  type: TYPE_NORMAL
- en: this.garage = garage;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: class Vehicle {
  prefs: []
  type: TYPE_NORMAL
- en: constructor( wheels, topSpeed ) {
  prefs: []
  type: TYPE_NORMAL
- en: this.wheels = wheels;
  prefs: []
  type: TYPE_NORMAL
- en: this.topSpeed = topSpeed;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const tricycle = new Vehicle( 3, 20 );
  prefs: []
  type: TYPE_NORMAL
- en: console.log( tricycle.wheels, tricycle.topSpeed );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: class House{
  prefs: []
  type: TYPE_NORMAL
- en: constructor(address, floors = 1) {
  prefs: []
  type: TYPE_NORMAL
- en: this.address = address;
  prefs: []
  type: TYPE_NORMAL
- en: this.floors = floors;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Instantiate the class
  prefs: []
  type: TYPE_NORMAL
- en: let myHouse = new House( '1100 Fake St., San Francisco CA, USA', 2, false );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: class House{
  prefs: []
  type: TYPE_NORMAL
- en: constructor( address, floors = 1) {
  prefs: []
  type: TYPE_NORMAL
- en: this.address = address;
  prefs: []
  type: TYPE_NORMAL
- en: this.floors = floors;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: getFloors() {
  prefs: []
  type: TYPE_NORMAL
- en: return this.floors;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: let myHouse = new House( '1100 Fake St., San Francisco CA, USA', 2 );
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( myHouse.getFloors() ); // Expected output: 2'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: class House {}
  prefs: []
  type: TYPE_NORMAL
- en: class Mansion extends House {}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: class House {
  prefs: []
  type: TYPE_NORMAL
- en: constructor( address = 'somewhere' ) {
  prefs: []
  type: TYPE_NORMAL
- en: this.address = address;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: class Mansion extends House {
  prefs: []
  type: TYPE_NORMAL
- en: constructor( address, floors ) {
  prefs: []
  type: TYPE_NORMAL
- en: super( address );
  prefs: []
  type: TYPE_NORMAL
- en: this.floors = floors;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: let mansion = new Mansion( 'Hollywood CA, USA', 6, 'Brad Pitt' );
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log( mansion.floors ); // Expected output: 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: // math-module-1.js
  prefs: []
  type: TYPE_NORMAL
- en: export const PI = 3.1415;
  prefs: []
  type: TYPE_NORMAL
- en: export const DEGREES_IN_CIRCLE = 360;
  prefs: []
  type: TYPE_NORMAL
- en: export function convertDegToRad( degrees ) {
  prefs: []
  type: TYPE_NORMAL
- en: return degrees * PI / ( DEGREES_IN_CIRCLE /2 );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // math-module-2.js
  prefs: []
  type: TYPE_NORMAL
- en: const PI = 3.1415;
  prefs: []
  type: TYPE_NORMAL
- en: const DEGREES_IN_CIRCLE = 360;
  prefs: []
  type: TYPE_NORMAL
- en: function convertDegToRad( degrees ) {
  prefs: []
  type: TYPE_NORMAL
- en: return degrees * PI / ( DEGREES_IN_CIRCLE /2 );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export { PI, DEGREES_IN_CIRCLE, convertDegToRad };
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: // HouseClass.js
  prefs: []
  type: TYPE_NORMAL
- en: export default class() { /* Class body goes here */ }
  prefs: []
  type: TYPE_NORMAL
- en: // myFunction.js
  prefs: []
  type: TYPE_NORMAL
- en: export default function() { /* Function body goes here */ }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: // math-module.js
  prefs: []
  type: TYPE_NORMAL
- en: export const PI = 3.1415;
  prefs: []
  type: TYPE_NORMAL
- en: export const DEGREES_IN_CIRCLE = 360;
  prefs: []
  type: TYPE_NORMAL
- en: // index1.js
  prefs: []
  type: TYPE_NORMAL
- en: import { PI } from 'math-module.js'
  prefs: []
  type: TYPE_NORMAL
- en: // index2.js
  prefs: []
  type: TYPE_NORMAL
- en: import { PI, DEGREES_IN_CIRCLE } from 'math-module.js'
  prefs: []
  type: TYPE_NORMAL
- en: // index3.js
  prefs: []
  type: TYPE_NORMAL
- en: import { PI as pi, DEGREES_IN_CIRCLE as degInCircle } from 'math-module.js'
  prefs: []
  type: TYPE_NORMAL
- en: // index4.js
  prefs: []
  type: TYPE_NORMAL
- en: import * as MathModule from 'math-module.js'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: // email-callback-api.js
  prefs: []
  type: TYPE_NORMAL
- en: export function authenticate( … ){ … }
  prefs: []
  type: TYPE_NORMAL
- en: export function sendEmail( … ){ … }
  prefs: []
  type: TYPE_NORMAL
- en: export function listEmails( … ){ … }
  prefs: []
  type: TYPE_NORMAL
- en: // app.js
  prefs: []
  type: TYPE_NORMAL
- en: import * as EmailAPI from 'email-callback-api.js';
  prefs: []
  type: TYPE_NORMAL
- en: 'const credentials = { password: ''****'', user: ''Zach'' };'
  prefs: []
  type: TYPE_NORMAL
- en: EmailAPI.authenticate( credentials, () => {
  prefs: []
  type: TYPE_NORMAL
- en: 'EmailAPI.send( { to: ''ceo@google.com'', subject: ''promotion'', body: ''Please
    promote me'' }, () => {} );'''
  prefs: []
  type: TYPE_NORMAL
- en: '} );'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: <script type="module" src="./path/to/module.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: <script type="module">
  prefs: []
  type: TYPE_NORMAL
- en: import * as ModuleExample from './path/to/module.js';
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: <script type="module" src="es6-module-supported.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: <script nomodule src="es6-module-NOT-supported.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: class Car {
  prefs: []
  type: TYPE_NORMAL
- en: constructor( make, model, year, color ) {
  prefs: []
  type: TYPE_NORMAL
- en: this.make = make;
  prefs: []
  type: TYPE_NORMAL
- en: this.model = model;
  prefs: []
  type: TYPE_NORMAL
- en: this.year = year;
  prefs: []
  type: TYPE_NORMAL
- en: this.color = color;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: setColor( color ) {
  prefs: []
  type: TYPE_NORMAL
- en: this.color = color;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: let subaru = new Car( 'Subaru', 'Outback', 2005, 'Grey' );
  prefs: []
  type: TYPE_NORMAL
- en: subaru.setColor( 'Red' );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"devDependencies": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"babel-cli": "^6.26.0"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '"devDependencies": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"babel-cli": "^6.26.0",'
  prefs: []
  type: TYPE_NORMAL
- en: '"babel-preset-es2015": "^6.24.1"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"presets": ["es2015"]'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: const sum5 = inputNumber  => inputNumber + 5;
  prefs: []
  type: TYPE_NORMAL
- en: console.log( `The sum of 5 and 5 is ${sum5(5)}!`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '"scripts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"transpile": "babel app.js --out-file app.transpiled.js --source-maps"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '// File 1: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"scripts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"transpile": "babel ./app.js --out-file app.transpiled.js --source-maps"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"devDependencies": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"babel-cli": "^6.26.0",'
  prefs: []
  type: TYPE_NORMAL
- en: '"babel-preset-es2015": "^6.24.1"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '// File 2: .babelrc'
  prefs: []
  type: TYPE_NORMAL
- en: '{ "presets": ["es2015"] }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '// File 3: app.transpiled.js'
  prefs: []
  type: TYPE_NORMAL
- en: var fn1 = function fn1(a, b) { … };
  prefs: []
  type: TYPE_NORMAL
- en: var fn2 = function fn2(a, b) { … };
  prefs: []
  type: TYPE_NORMAL
- en: var fn3 = function fn3(a) { … };
  prefs: []
  type: TYPE_NORMAL
- en: var fn4 = function fn4() { … };
  prefs: []
  type: TYPE_NORMAL
- en: var fn5 = function fn5(a) { … };
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: function createIterator( array ){
  prefs: []
  type: TYPE_NORMAL
- en: let currentIndex = 0;
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: next(){
  prefs: []
  type: TYPE_NORMAL
- en: return currentIndex < array.length ?
  prefs: []
  type: TYPE_NORMAL
- en: '{ value: array[ currentIndex++ ], done: false} :'
  prefs: []
  type: TYPE_NORMAL
- en: '{ done: true };'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: // Using an iterator
  prefs: []
  type: TYPE_NORMAL
- en: let it = createIterator( [ 'Hello', 'World' ] );
  prefs: []
  type: TYPE_NORMAL
- en: console.log( it.next() );
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: { value: ''Hello'', done: false }'
  prefs: []
  type: TYPE_NORMAL
- en: console.log( it.next() );
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: { value: ''World'' , done: false }'
  prefs: []
  type: TYPE_NORMAL
- en: console.log( it.next() );
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output: { value: undefined, done: true }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: function *testGen( data ) { yield 0; }.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: function *gen() {
  prefs: []
  type: TYPE_NORMAL
- en: let i = 0;
  prefs: []
  type: TYPE_NORMAL
- en: while (true){
  prefs: []
  type: TYPE_NORMAL
- en: yield i++;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: function *gen() {
  prefs: []
  type: TYPE_NORMAL
- en: let i = 1;
  prefs: []
  type: TYPE_NORMAL
- en: while (true){
  prefs: []
  type: TYPE_NORMAL
- en: yield i;
  prefs: []
  type: TYPE_NORMAL
- en: i = i * 2;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const generator = gen();
  prefs: []
  type: TYPE_NORMAL
- en: console.log( generator.next(), generator.next(), generator.next() );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: let sequence = gen();
  prefs: []
  type: TYPE_NORMAL
- en: console.log(sequence.next());
  prefs: []
  type: TYPE_NORMAL
- en: '//Expected output: { value: 0, done: false }'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(sequence.next());
  prefs: []
  type: TYPE_NORMAL
- en: '//Expected output: { value: 1, done: false }'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(sequence.next());
  prefs: []
  type: TYPE_NORMAL
- en: '//Expected output: { value: 2, done: false }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: function *gen() {
  prefs: []
  type: TYPE_NORMAL
- en: let i = 0;
  prefs: []
  type: TYPE_NORMAL
- en: while (true){
  prefs: []
  type: TYPE_NORMAL
- en: let inData = yield i++;
  prefs: []
  type: TYPE_NORMAL
- en: console.log( inData );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: let sequence = gen();
  prefs: []
  type: TYPE_NORMAL
- en: sequence.next()
  prefs: []
  type: TYPE_NORMAL
- en: sequence.next( 'test1' )
  prefs: []
  type: TYPE_NORMAL
- en: sequence.next()
  prefs: []
  type: TYPE_NORMAL
- en: sequence.next( 'test2' )
  prefs: []
  type: TYPE_NORMAL
- en: '// Expected output:'
  prefs: []
  type: TYPE_NORMAL
- en: // 'test1'
  prefs: []
  type: TYPE_NORMAL
- en: // undefined
  prefs: []
  type: TYPE_NORMAL
- en: // 'test2'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Snippet 1.86 Yield keyword
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In summary, generators are an iterative way of building a collection of data.
    They return values one at a time while tracking internal state. When the `yield`
    keyword is reached, internal execution is stopped and a value is returned. When
    the `next` function is called, execution resumes until a `yield` is reached. Data
    can be passed into a generator through the next function. Data that's passed in
    is returned through the `yield` expression. When a generator emits a value object
    with the `done` parameter set to true, calls to `generator.next()` should not
    yield any new values.
  prefs: []
  type: TYPE_NORMAL
- en: In the final topic, Topic I, we introduced iterators and generators. Iterators
    traverse through data in a collection of data and return the value requested at
    each step. Once they have reached the end of the collection, a done flag is set
    to true and no new items will be iterated over. Generators are a way to generate
    a collection of data. At each step, the generator produces a new value based on
    its internal state. Iterators and generators both track their internal state as
    they progress through their life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 1: Implementing Generators'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have been tasked with building a simple app that generates numbers in the
    Fibonacci sequence upon request. The app generates the next number in the sequence
    for each request and resets the sequence it is given as input. Use a generator
    to generate the Fibonacci sequence. If a value is passed into the generator, reset
    the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a complex iterative dataset using a generator, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Look up the Fibonacci sequence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a generator that provides the values in the Fibonacci sequence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the generator's `yield` statement returns a value, reset the sequence
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Outcome**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18: Implementing generators output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_1.18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.18: Implementing generators output'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have successfully created a generator that can be used to build an iterative
    dataset based on the Fibonacci sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 280.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we saw how ECMAScript is a scripting language specification
    for modern JavaScript. ECMAScript 6, or ES6, was released in 2015\. Through this
    chapter, we covered some of the various key points of ES6 and their differences
    from previous versions of JavaScript. We highlighted the rules of variable scoping,
    the keywords for declaring variables, fat arrow function syntax, template literals,
    enhanced object property notation, destructuring assignment, classes and modules,
    transpilation, and iterators and generators. You are ready to begin applying this
    knowledge to your professional JavaScript projects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn what an asynchronous programming language
    is and how to write and understand asynchronous code.
  prefs: []
  type: TYPE_NORMAL
