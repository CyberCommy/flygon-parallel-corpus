- en: 3\. Servers and Clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces network and database access security for the MongoDB
    Atlas Cloud service. You will learn about MongoDB clients and how you can connect
    clients to cloud databases to run MongoDB commands. You will create and manage
    user authentication and authorization using Atlas Cloud security configuration
    and create a user account for MongoDB database. After you connect to MongoDB database,
    you will explore the Compass GUI client for MongoDB Server commands.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have explored the basics of the MongoDB database in the cloud, and have seen
    how MongoDB is different from other databases. *Chapter 2*, *Documents and Data
    Types* explained the data structures used in MongoDB. By now, you know how to
    connect to your MongoDB Atlas Console and how to browse the database using Data
    Explorer. In this chapter, you will continue your journey into the world of MongoDB,
    and connect and access the new MongoDB database and discover its internal architecture
    and commands.
  prefs: []
  type: TYPE_NORMAL
- en: In today's world, internet and cloud computing are the main driving forces that
    dictate the rules for existing and future applications. So far, we have learned
    that MongoDB Atlas is a powerful cloud version of MongoDB, offering performance,
    security, and flexibility for clients. While cloud infrastructure provides many
    benefits for users, it also increases the security risk associated with data stored
    in the cloud. Cybersecurity incidents are frequently seen on the news. One such
    incident occurred with the Target Corporation in 2013, when they became the victim
    of a large cyber attack and the personal data of over 100 million customers was
    stolen.
  prefs: []
  type: TYPE_NORMAL
- en: One of the advantages of the MongoDB Atlas service is that many security features
    are enabled by default, thus protecting against attacks over the internet. Therefore,
    it is very important to understand the basics of configuring Atlas security.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a scenario in which you are working on a project based on MongoDB.
    Your colleagues from the IT department have deployed a new MongoDB database in
    the Atlas Cloud and have sent you the connection details. However, after taking
    a look, you discover that you are not able to connect to the new database because
    of security rules for network and user access. The first thing to configure will
    be to provide yourself with access to the new database. You also need to make
    sure that access will continue to be disabled for unauthorized access over the
    internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure access to your project''s database, there are two key aspects
    that you will have to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network access**: Configures IP network access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database access**: Configures users and database roles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step, after we have a database installed and running, is to be able
    to successfully connect to our database. Network access is a low-level security
    configuration that's available for databases deployed in the Atlas Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: For a database installed locally on a laptop, we usually don't need to configure
    any network security. The connection is directed to the database installed locally.
    However, for a database that is deployed on cloud infrastructure, security is
    enabled by default and needs to be configured. It is very important to protect
    access to the database so that the data is protected from unauthorized access
    over the internet. Before we learn how to configure network access in MongoDB,
    let's go through some of its core underlying concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Network Protocols
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Internet Protocol** (**IP**) is a decades-old standard, and the **Transmission
    Control Protocol/Internet Protocol** (**TCP/IP**) is the transport protocol used
    by all applications to reliably communicate data packets over the internet. Each
    computer or device on the internet has its unique IP address or hostname. Communication
    between devices is possible by including the source IP address and the destination
    IP address in the network packet header.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A network packet header is an additional piece of data found at the start of
    a data packet containing information about the data the packet carries. This information
    includes the source IP, destination IP, the protocol, and other information.
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB makes no exception in using TCP/IP as its network protocol to transport
    data. Furthermore, there are currently two versions of the IP: IPv4 and IPv6\.
    Both versions are supported by the Atlas Cloud platform. IPv4 defines a standard
    4-byte (32-bit) address, whereas IPv6 defines a standard 16-byte (128-bit) address.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Both IPv4 and IPv6 are used to specify the complete address of a device on
    the internet. The latest standard, IPv6, is designed to overcome the limitations
    of the IPv4 protocol. An IP address has two parts: the IP network and the IP host
    address. A netmask is a sequence of bits (mask) that is used to indicate the network
    and host part of the IP address. The network address is the IP address'' prefix,
    while the address of the host is the remainder (the suffix of the IP address):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1: Diagrammatic representation of an IP address'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.1: Diagrammatic representation of an IP address'
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 3.1*, the netmask 255.255.0.0 (or (1111 1111).(1111 1111).(0000 0000)(0000
    0000) in binary format) acts as a mask, indicating the IP network and IP host
    part of the address. The IP network part of the address (prefix) is composed of
    the first 16 bits of the general IPv4 address, 100.100, while the host address
    is the rest of the address – 20.50.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Atlas uses **Classless Inter-Domain Routing** (**CIDR**) notation instead
    of an IP netmask to specify IP addresses. The CIDR format is a shorter format
    that is used to describe an IP network and host format. Moreover, CIDR is more
    flexible than the older IP netmask notation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a netmask and its equivalent CIDR notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2: Netmask and its CIDR notation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.2: Netmask and its CIDR notation'
  prefs: []
  type: TYPE_NORMAL
- en: They both describe the same IP network – 54.175.147.0 (24 bits from the left,
    or 3 bytes), and host number –155\. There could be 254 hosts (from 1 to 254) in
    this network.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is beyond the goal of this course to present a comprehensive guide to internet
    network standards. For more details, refer to *Understanding TCP/IP* ([https://www.packtpub.com/networking-and-servers/understanding-tcpip](https://www.packtpub.com/networking-and-servers/understanding-tcpip)),
    which is a clear and comprehensive guide to TCP/IP protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Public versus Private IP Addresses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As explained previously, any device connected on the internet needs a unique
    IP address in order to communicate with other servers. Those types of IP addresses
    are called **public** IP addresses. Apart from public IPs, the internet standard
    also defines a few IP addresses that are reserved for private use, called **private**
    IP addresses. These are more commonly used in corporate environments that need
    to limit their employees' access to a private network (intranet) instead of giving
    them access to the public internet.
  prefs: []
  type: TYPE_NORMAL
- en: The following table describes the private IP addresses available for IP version
    4.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3: Private IP addresses for IP4'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.3: Private IP addresses for IP4'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, a public IP address is unique on the internet and can have
    any value that is different from the ones in *Figure 3.3*.
  prefs: []
  type: TYPE_NORMAL
- en: Domain Name Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where the IP address `52.206.222.245` is the public
    IP address of the MongoDB website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we used the name `mongodb.com` to run the ping command, and
    not the IP address of the MongoDB website directly. The `mongodb.com`), and the
    DNS server responds with the public IP addresses registered for that host and
    domain: IP `54.175.147.155`.'
  prefs: []
  type: TYPE_NORMAL
- en: Transmission Control Protocol
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Transmission Control Protocol** (**TCP**), part of the IP address, defines
    sockets, or ports, that can be used for different types of network connections.
    Every process that needs to communicate over the internet uses a TCP port to establish
    a connection.
  prefs: []
  type: TYPE_NORMAL
- en: The default TCP port for MongoDB Server is 27017\. In the MongoDB Atlas free
    tier, the default TCP port cannot be changed. This is one of the limitations of
    the Atlas free-tier M0 server. However, on a local installation, the TCP listener
    port can be configured when the server is started.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Atlas Cloud always encrypts network communication between the server
    and applications. Data is protected using a specialized network encryption protocol
    called TLS (Transport Layer Security).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few important aspects of TCP/IP communication to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: The server always listens for new connections from clients, usually on TCP port 27017\.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client always initiates the connection to the server by sending a special
    TCP packet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If network access is configured, the client can establish a TCP connection with
    the database server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server only accepts the connection if the client passes the security checks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The network communication is always encrypted for databases in the Atlas Cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the connection is established, the client communicates with the server
    by sending database commands and receiving data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Wire Protocol
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internally, MongoDB stores documents in a special binary format called **Binary
    JSON** (**BSON**). We learned about the structure of a JSON document in *Chapter
    2*, *Documents and Data Types*. BSON is a more efficient way to store data than
    JSON. Therefore, BSON is used by MongoDB to store data in files and to transport
    data over the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Wire Protocol is MongoDB''s solution to encapsulate BSON data into network
    packets that can be sent over the internet. The Wire Protocol defines standard
    datagrams, or data packets, in a format that can be understood by both MongoDB
    servers and clients. The structure of a datagram is composed of a header and a
    body, with a simple but rigorous format defined by MongoDB. The Wire Protocol
    datagrams are also encapsulated in TCP/IP packets, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4: Encapsulated Wire Protocol datagrams'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.4: Encapsulated Wire Protocol datagrams'
  prefs: []
  type: TYPE_NORMAL
- en: Network Access Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Atlas project owner or cluster manager can modify network access from the
    Atlas web management console. After logging on to the Atlas console, you can access
    the `Network Access` tab from the Atlas web console, from the `SECURITY` menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5: MongoDB Atlas console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.5: MongoDB Atlas console'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Network Access` configuration page appears on the right side of the page.
    MongoDB Atlas consists of three methods to manage network access, which can be
    accessed using the following tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`IP Access List`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Peering`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Private Endpoint`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IP Access List
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`IP Access List` helps the Atlas administrator to specify a list of valid IP
    addresses that are allowed to connect to the MongoDB database. To add your first
    IP addresses, you can click the green button `ADD IP ADDRESS`, which is in the
    middle of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you already added one IP address (or a few of them), then `+ ADD IP ADDRESS`
    button is displayed on the right side of the network access IP list, as shown
    in *Figure 3.6*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6: Adding an IP address list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.6: Adding an IP address list'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on the `ADD IP ADDRESS` button (or `+ ADD IP ADDRESS`), a pop-up
    window appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7: Adding a new IP access list entry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.7: Adding a new IP access list entry'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following options are available in the Add IP Access List form:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ADD CURRENT IP ADDRESS`: This is the most common method that can be used for
    simple deployments. It allows you to add your own IP address to the IP access
    list, as shown in *Figure 3.7*. Atlas automatically detects the IP source address
    from the web management console''s current session, so you don''t have to remember
    the IP address. Most likely, your computer has an internal IP address from a private
    IP class, such as 192.168.0.xx, which is quite different from the address that
    Atlas has detected. This is because Atlas always detects the external IP address
    of your network gateway, instead of internal network private IP addresses. Private
    IP addresses are not visible from the internet. You can always verify your external
    IP address by searching `what is my IP?` in Google. The result in the Google search
    should match the address in Atlas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALLOW ACCESS FROM ANYWHERE`: As the name suggests, this option enables network
    access from any location by disabling the network protection for your database,
    as shown in *Figure 3.7*. The special IP class 0.0.0.0/0 is added to the IP access
    list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The option to allow access from anywhere is not recommended because it will
    disable network security protection and will expose our cloud database to possible
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'While adding a custom IP address to the `IP List Entry` field, the IP address
    needs to be in CIDR notation, as described in the introduction to this chapter.
    A short description can also be typed in the `Comment` field, as shown in *Figure
    3.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8: Filling in the Comment field in the IP Access list entry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.8: Filling in the Comment field in the IP Access list entry'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the current version of the Atlas console, it is not possible to add a hostname
    or a **Fully Qualified Domain Name** (**FQDN**) to the IP access list. Only IP
    addresses are accepted as valid entries. Both IPv4 and IPv6 are supported for
    MongoDB Atlas. For example, it is not possible to add a hostname such as *server01prd*
    or *server01prd.mongodb.com* (including the domain), but rather the host public
    IP address. The IP address can be obtained from a DNS lookup or just a ping hostname.
  prefs: []
  type: TYPE_NORMAL
- en: Temporary Access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Entries in the access list can be permanent or they can have an expiration
    time. Temporary entries are automatically removed from the list when they expire.
    If you wish to add a temporary IP address, check the switch `This entry is temporary
    and will be deleted in` option in the `Add IP Access List Entry` form, as shown
    in *Figure 3.9*. You can specify the expiration time using the dropdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9: Adding a temporary IP Access list entry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.9: Adding a temporary IP Access list entry'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click `Confirm`, the IP/host address is saved in the access list and
    the network configuration is activated. The process usually completes in less
    than a minute and during this time, the entry status will be `Pending` for a few
    seconds, as shown in *Figure 3.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10: Network access window displaying the Pending status'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.10: Network access window displaying the Pending status'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the network configuration is activated, `Status` will be `Active`, as
    shown in *Figure 3.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11: Network Access window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.11: Network Access window'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A message saying `You will only be able to connect to your cluster from the
    following list of IP Addresses:` appears on the screen to notify the user of the
    list of available IP addresses, as shown in *Figure 3.11*.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the IP was saved in the IP access list, the administrator can modify
    the entry. The permission of the following operations can be accessed from the
    `Actions` tab, as shown in *Figure 3.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete an existing entry from the IP access list by clicking `DELETE`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit an existing entry from the IP access list by clicking `EDIT`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can add multiple IP addresses to the access list. For example, if you need
    to access your cloud database from your office and from your home, you can add
    both IP addresses to the access list table. Nevertheless, please note that there
    is a limit of 200 addresses that can be added to the list.
  prefs: []
  type: TYPE_NORMAL
- en: Network Peering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Network peering is another method of controlling network access on the Atlas
    Cloud infrastructure, which is different from an IP access list. It enables companies
    to set up a **Virtual Private Cloud** (**VPC**) connection between the local company
    network and the Atlas network infrastructure, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Private IP networks are used to configure VPC between the client's private network
    and MongoDB Atlas servers. Any type of private IP is supported for VPC network
    peering.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All cloud providers are supported for network peering, such as AWS's, Microsoft's,
    or Google's cloud infrastructure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network peering is appropriate only for large implementations (M10+), and therefore
    is not available for Atlas free-tier users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The details of network peering and private endpoint are beyond the scope of
    this introductory course.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.01: Enabling Network Access'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use the Atlas web management console to enable network
    access for your new database in the cloud. This is necessary to permit network
    connections over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The exercise will guide you through the steps to add your own IP address to
    the access list. As a result, network access will be permitted from your location,
    and you''ll be able to connect to the MongoDB database using a client running
    on your local computer. Follow these steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://cloud.mongodb.com](http://cloud.mongodb.com) to connect to the
    Atlas console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log on to your new MongoDB Atlas web interface using your username and password,
    which was created when you registered for the Atlas Cloud:![Figure 3.12: MongoDB
    Atlas login page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.12: MongoDB Atlas login page'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the `SECURITY` menu, click the `Network Access` tab:![Figure 3.13: Network
    Access window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.13: Network Access window'
  prefs: []
  type: TYPE_NORMAL
- en: Click `ADD IP ADDRESS` in the `IP Access List` tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the `Add IP Access List Entry` window that appears, click the `ADD CURRENT
    IP ADDRESS` button:![Figure 3.14: IP Access list window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.14: IP Access list window'
  prefs: []
  type: TYPE_NORMAL
- en: The MongoDB web interface will automatically detect your external IP address
    and will reflect it in the `IP Access List Entry` field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `This is my IP Address` in the `Comment` field (this is optional):![Figure
    3.15: Typing in a comment in the Add IP Access List Entry window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.15: Typing in a comment in the Add IP Access List Entry window'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `Confirm` button to save the new entry. Atlas is deploying the new
    IP access list rules to the cloud system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The IP address will appear in the access list table (as active):![Figure 3.16:
    Network Access window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.16: Network Access window'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The IP `100.100.10.10/32` is a dummy IP address as an example. In your practical
    case, the IP address will be your own public IP address, which is different. Moreover,
    your ISP (Internet Service Provider) may assign you a dynamic IP address, which
    is not permanent, and it may be changed after a period of time.
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully "whitelisted" our current public IP address into the Atlas
    Cloud console so that TCP/IP connections will be allowed from our public IP address.
    If you have multiple locations, such as home and a work office, add multiple IP
    addresses to the access list in the Atlas console.
  prefs: []
  type: TYPE_NORMAL
- en: Database Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB databases deployed on the Atlas Cloud have several security features
    enabled by default, such as user access control. Database access control verifies
    user authentication credentials, such as the username and password. Therefore,
    even if network access is available from anywhere, you will still need to authenticate
    before successfully connecting to the MongoDB database in the cloud. This is necessary
    to protect databases deployed in the cloud from unauthorized access over the internet.
    More importantly, when compared with other security features, access control cannot
    be disabled for cloud databases and will always remain enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Database access covers the following aspects of database security:'
  prefs: []
  type: TYPE_NORMAL
- en: Database users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When compared with other MongoDB installations, the management of user accounts
    in the Atlas Cloud is configured at the project level. Users created in one Atlas
    project are shared among all MongoDB database clusters created in that project.
    The basic methods to configure Atlas database security (users and roles) are both
    covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Database access refers only to the access to database services deployed in Atlas,
    and not to the Atlas Console itself. As an Atlas project owner, you will always
    be able to connect to the Atlas web console to manage your cloud database access.
    If you need to add more project team members to the Atlas project, then this is
    possible from the `PROJECT` tab on the Atlas web application. In the scope of
    this course, the examples are relevant when connected as an Atlas project owner.
  prefs: []
  type: TYPE_NORMAL
- en: User Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The validation of user identity is an essential aspect of database security
    and is necessary in order to protect data integrity and confidentiality. This
    is exactly the reason why all MongoDB databases deployed in the Atlas Cloud require
    users to be authenticated before they can create new database sessions. Therefore,
    only trusted database users are granted access to the cloud database.
  prefs: []
  type: TYPE_NORMAL
- en: The database authentication process consists of a procedure to validate the
    user identity prior to connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user identity must qualify the following two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: A valid username must be provided at connection time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user's identity must be confirmed via validation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declaring a valid username is straightforward. The only prerequisite is that
    the username must exist, which means the username must have been created previously
    and its account must be activated.
  prefs: []
  type: TYPE_NORMAL
- en: Username Storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Users need to be declared in Atlas before they can be used. The username and
    password can either be stored internally (within the database) or externally (outside
    the database) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internally**: The username is stored within the MongoDB database, in a special
    collection of the admin database. There are a few restrictions. The admin database
    is accessible only to system administrators. When a user tries to connect, the
    username must exist in the list of existing usernames in the admin database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Externally**: The username is stored in an external system, such as **Lightweight
    Directory Access Protocol (LDAP)**. For example, the Microsoft Active Directory
    is an LDAP directory implementation that can be configured for MongoDB username
    authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: LDAP authentication is only available for bigger Atlas clusters (M10+) and permits
    enterprise-specific configuration of many database users' accounts. This configuration
    is not covered in this introductory course.
  prefs: []
  type: TYPE_NORMAL
- en: Username Authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Authentication is the process of validating user identity. If user authentication
    is successful, the user is confirmed and trusted to access the database. Otherwise,
    the user is rejected and will not be allowed to establish a database connection.
    The following are some authentication mechanisms, each one with a different technology
    and level of security.
  prefs: []
  type: TYPE_NORMAL
- en: '**Password Authentication**'
  prefs: []
  type: TYPE_NORMAL
- en: Simple password authentication. The user needs to provide the correct password.
    The database system validates the password against the declared username. The
    process of securely validating user passwords over the internet is called a **handshake**
    or **challenge response**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passwords are validated by the MongoDB database. In the case of LDAP authentication,
    passwords are validated externally. Since version 4.0, MongoDB has a new challenge-response
    method to validate passwords known as the **Salted Challenge Response Authentication
    Mechanism** (**SCRAM**). SCRAM guarantees that the user password can be validated
    securely over the internet without transferring or storing passwords in cleartext.
    This is because transferring cleartext passwords over the internet's public infrastructure
    is considered extremely insecure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In older versions of MongoDB, a different challenge-response method was used.
    If you upgrade your applications from MongoDB 2.0 or 3.0 to the latest version,
    verify the MongoDB client's compatibility with MongoDB version 4.0 or higher.
    At the time of writing, the current version on premises of MongoDB server is version
    4.4.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**X.509 Certificate Authentication**'
  prefs: []
  type: TYPE_NORMAL
- en: This refers to the use of cryptographic certificates for user authentication
    instead of simple passwords. Certificates are longer and far more secure than passwords.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An X.509 certificate is a digitally encrypted key, created using a cryptographical
    standard **Public Key Infrastructure** (**PKI**). Certificates are created in
    a pair of keys (public-private).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method also permits password-less authentication for users, which allows
    users and applications to connect using a private key X.509 certificate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Authentication in Atlas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended to use only the Atlas web application to create and configure
    database users.
  prefs: []
  type: TYPE_NORMAL
- en: Atlas project owners can add users to an Atlas project and configure users'
    authentication from the Atlas web interface. Atlas users can be added to all database
    clusters within the respective Atlas project. Authentication settings can be made
    available by clicking `Database Access` from the Atlas application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot from the Atlas web application ([http://cloud.mongodb.com](http://cloud.mongodb.com)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17: Database Access window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.17: Database Access window'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 3.17*, you will notice two tabs, `Database Users` and `Custom Roles`.
    Let''s first focus on the options available for `Database Users`. Once you click
    the `ADD NEW DATABASE USER` option to create a new user, the following window
    will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18: Add New Database User window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.18: Add New Database User window'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Password SCRAM authentication is the only option available for Atlas M0 free-tier
    cluster, which is used for examples in this course. The other authentication method
    options, a certificate and AWS IAM, are available for larger Atlas M10+ clusters.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two fields in the window, as shown in *Figure 3.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19: Username and password fields in the Add New Database User window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.19: Username and password fields in the Add New Database User window'
  prefs: []
  type: TYPE_NORMAL
- en: In the first field, you can type the new database username. The username should
    not contain spaces or special characters. Only ASCII letters, numbers, hyphens,
    and underscores are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: The second field is for the user password. A password can be entered manually
    by the administrator or it can be generated by the Atlas application. The `Autogenerate
    Secure Password` button automatically generates a secure, complex password. The
    `SHOW` and `HIDE` options will either display or hide the password input on the
    screen. There is also an option to copy the password to the clipboard by clicking
    the `COPY` button, as shown in *Figure 3.19*.
  prefs: []
  type: TYPE_NORMAL
- en: Temporary Users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Atlas administrator can decide to add temporary user accounts. A temporary
    user account is an account that is valid only for a limited period. The account
    will be automatically deleted by Atlas after its expiration time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20: Temporary User option in the Add New User window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.20: Temporary User option in the Add New User window'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, the user account, `my_user`, is set to expire automatically
    in 1 day (24 hours). The checkbox for `Save as temporary user for` is selected,
    and the stipulated time is set.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: From the `built-in role or privilege` drop-down menu, the administrator can
    assign a database privilege when the new user is created. By default, the assigned
    privilege is `Read and write to any database`. Database privilege options are
    explained in detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Add User` button completes the add new user process. Once the user account
    is created, it will appear in the MongoDB user list, as shown in *Figure 3.21*.
    The user account can be changed or deleted if required. The user account details
    can be changed or removed using the `EDIT` or `DELETE` options in the `Actions`
    tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21: The Database Access window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.21: The Database Access window'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As you may observe, in my example in *Figure 3.21*, the `my_user` account is
    set to automatically expire after 24 hours (23:57). The user account will be automatically
    deleted after the expiration time.
  prefs: []
  type: TYPE_NORMAL
- en: Database Privileges and Roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Database authorization is the part of database security that covers privileges
    and roles for MongoDB databases. Once you authenticate a user successfully and
    create a new database session, the database privileges and roles are assigned
    to the user. The accessibility of a database's collections and objects is verified
    against the database privileges that are assigned to the user.
  prefs: []
  type: TYPE_NORMAL
- en: A privilege (or action) is the right to perform a particular action or operation
    within the MongoDB database on a specific database resource. For example, the
    read privilege grants the right to query a specific database collection or view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple database privileges can be grouped within a role. There is a long
    list of database privileges, each one for a different function in MongoDB. Instead
    of directly assigning privileges to users, the privileges are assigned to roles,
    and these roles are then assigned to users. As a result, the management of privileges
    and roles in the database is easier to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22: Pictorial representation of database privileges'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.22: Pictorial representation of database privileges'
  prefs: []
  type: TYPE_NORMAL
- en: 'Roles can have a global or local scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GLOBAL`: This role applies to all MongoDB databases and collections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Database`: This role applies only to a specific database name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Collection`: This role applies only to a specific collection name within a
    database. It has the most restrictive scope.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predefined Roles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a few predefined database roles, and for each role, there is a list
    of specific privileges assigned. For example, the administrator role contains
    all the privileges necessary to administer a MongoDB database. Assigning a predefined
    role is the most common way to manage your MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: 'If none of the predefined roles fit the security requirements for your application,
    custom roles can be defined in MongoDB. The following roles are predefined in
    the Atlas application, and can be assigned when new database users are created:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbAdminAnyDatabase`, `readWriteAnyDatabase`, and `clusterMonitor`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `Atlas admin` role is different from the MongoDB database `dbAdmin` role.
    The `Atlas admin` role includes the `dbAdmin` plus other roles, and is available
    only on the Atlas Cloud platform.
  prefs: []
  type: TYPE_NORMAL
- en: '**Read and write to any database**: This Atlas role has the read and write
    to any database role and is applicable to all database clusters created within
    one Atlas project account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Only read any database**: This is a read-only Atlas role that is applicable
    to all database clusters created within one Atlas project account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Built-In Roles in Atlas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The simplest way to assign a built-in role is at the time when a new user is
    created. Atlas offers a very simple and intuitive interface to add new database
    users. The default `built-in role or privilege` is assigned when a new user is
    created. Nevertheless, the administrator can assign a different role for a new
    user or can edit the privileges for existing users.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended to use only the Atlas web interface to manage database
    roles and privileges. Atlas will automatically disable and roll back any changes
    to database roles that are not made through the Atlas web interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user roles in Atlas can be managed in the `+ADD NEW USER` window or the
    `EDIT` user window, as presented in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23: Add New Database User window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.23: Add New Database User window'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the built-in `Read and write any database` role is automatically
    selected in the window, as you can see in *Figure 3.23*. Nevertheless, the administrator
    can assign a different role (for example, `Atlas admin`) by clicking in the drop-down
    menu, as shown in *Figure 3.24*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24: Selecting a role in the Add New User window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.24: Selecting a role in the Add New User window'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Privileges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, none of the built-in Atlas database roles are suitable for the access
    we need for the database. There are cases when the intended database design requires
    a special user access, or applications require a specific security policy that
    needs to be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Custom roles, which are presented later in this chapter, offer better functionality
    than advanced privileges. It is always recommended to create a custom role and
    assign individual permissions to a role rather than assigning specific privileges
    directly to users.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select `Grant specific privileges` from the drop-down list, the interface
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.25: Granting specific privileges in the Add New User window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.25: Granting specific privileges in the Add New User window'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in *Figure 3.25*, administrators can quickly assign specific
    MongoDB privileges to a user. This advanced functionality is covered in the custom
    roles later in this chapter. For the moment, let's configure database access in
    the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.02: Configuring Database Access'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal of this exercise is to enable database access for your new MongoDB
    database. Your database now allows connections, and it is asking for username
    and password validation. In order to enable access, you need to create a new user
    and grant appropriate database permissions for access.
  prefs: []
  type: TYPE_NORMAL
- en: Create an admin user with the username `admindb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat *steps* *1*, *2*, and *3* from *Exercise 3.01*, *Enabling Network Access*,
    to log on to your new MongoDB Atlas web interface and select `project 0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the `SECURITY` menu, select the `Database Access` option:![Figure 3.26:
    Selecting the Database Access option'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.26: Selecting the Database Access option'
  prefs: []
  type: TYPE_NORMAL
- en: Click `ADD NEW DATABASE USER` in the `Database Users` tab to add a new database
    user. The `Add New User` window opens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep the default authentication method, `Password`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a username or type `admindb` as the username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide the password or click `Autogenerate Secure Password` to generate the
    password. Click `SHOW` to see the autogenerated password:![Figure 3.27: Add New
    Database User window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.27: Add New Database User window'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the drop-down menu under `Database User Privileges` and select the
    `Atlas admin` role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click `Add User`. The system will apply the changes to the databases:![Figure
    3.28: New admin user details'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.28: New admin user details'
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 3.28*, you can see that a new user, `admindb`, has been created with
    `Authentication Method` of `SCRAM` and `MongoDB Role` (global) set to `atlasAdmin@admin`
    for all databases in the project.
  prefs: []
  type: TYPE_NORMAL
- en: The new database user is now configured and deployed in Atlas.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Custom Roles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the name suggests, a custom role is a collection of selected database permissions
    that are not included in any of the built-in Atlas database roles. For example,
    if the read and update permissions are required, but without the right to delete
    and insert new documents, then a custom role needs to be created as this combination
    of permissions is not part of any built-in role.
  prefs: []
  type: TYPE_NORMAL
- en: From the `Database Access` window, click on the second tab in the application,
    `Custom Roles`. This option is used to create and modify custom Atlas roles.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Custom roles need to be defined in Atlas before they can be assigned to users.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new custom role can be created by clicking the `ADD NEW CUSTOM ROLE` button.
    The new custom role window appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29: MongoDB custom roles'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.29: MongoDB custom roles'
  prefs: []
  type: TYPE_NORMAL
- en: 'Actions can be selected based on the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Collection Actions**: Actions that are applicable to a collection database
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database Actions**: Actions that are applicable to a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global Actions**: Actions that are applicable globally to all Atlas projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, the database administrator permits users to only update a database
    collection. The user cannot delete or insert new documents in a collection. This
    specific combination of actions is not contained in any Atlas predefined role.
  prefs: []
  type: TYPE_NORMAL
- en: 'There could be many combinations of Collection/Database/Global actions defined
    under one complex role. When the definition is complete, click the `Add Custom
    Role` button to create the new role in Atlas. The new role becomes visible in
    the list, as shown in *Figure 3.30*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30: Custom role list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.30: Custom role list'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Once custom roles are created, they become visible in Atlas and can be assigned
    to database users. The new custom role can be assigned from the `ADD/EDIT` user
    window, in the `Database Privileges` drop-down list, under `Select pre-defined
    custom roles`.
  prefs: []
  type: TYPE_NORMAL
- en: The Database Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we cover the specifics of the different types of clients of a MongoDB
    database, let''s look at a short introduction to clarify the basics of a database
    client. A database client is a software application that is designed to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to a MongoDB database server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request information from the database server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify data by sending MongoDB CRUD requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send other database commands to the database server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interaction and compatibility with the MongoDB database server are essential.
    A difference in compatibility between the client and the server—for example, different
    versions—could produce unexpected results or generate database or application
    errors. This is the reason why clients are usually tested and certified for compatibility
    with a specific version of the MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s categorize the MongoDB clients depending on the purpose for which they
    were created:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic**: This is a minimalist version of the client. Usually delivered with
    the database software, basic clients provide an interactive application to work
    with the database server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data-oriented**: This type of client is designed to work with data. It usually
    provides a **Graphical User Interface** (**GUI**), and the tools that assist you
    to efficiently query, aggregate, and modify data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drivers**: These are designed to provide the interface between the MongoDB
    database and another software system, such as a general-use programming language.
    The main use of drivers is in software development and application deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You now have all the configuration changes in place for the new MongoDB database
    deployed in the Atlas Cloud. The installation of MongoDB client on a local computer
    has already been covered in previous chapters. If necessary, review *Chapter 1*,
    *Introduction to MongoDB*, for basic MongoDB installation. The next step is to
    use your local MongoDB client to connect to your new database in the cloud. Secondly,
    a custom collection of Python scripts will be used for data migration, so you
    need to know how you can connect from Python to a MongoDB database in Atlas. The
    next section discusses all aspects regarding client connection in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Connection Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What exactly is a connection string and why is it important? A connection string
    is nothing more than a method to identify the database service address and its
    parameters so that clients can connect to the server over the network. It is important
    because without a connection string, the client would have no clue how to connect
    to the database service.
  prefs: []
  type: TYPE_NORMAL
- en: Database clients, such as users and applications, need to form a valid connection
    string in order to be able to connect to the database service. Moreover, the MongoDB
    connection string follows the **Uniform Resource Identifier** (**URI**) format
    to pass all connection details to the database client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the general format of a MongoDB connection string: `mongodb+srv://user:pass@hostname:port/database_name?options`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The elements of the connection string are described in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.31: Elements of the connection string'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.31: Elements of the connection string'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: More details about the new prefix `mongodb+srv` and how DNS SRV records are
    used for identifying the MongoDB service will be covered in *Chapter 10*, *Replication*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now look at some of the examples of connection strings, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mongodb+srv://guest:passwd123@atlas1-u7xxx.mongodb.net:27017/data1`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This connection string is suitable to attempt a database connection with the
    following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The server is running on the Atlas Cloud (the hostname is `mongodb.net`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database cluster name is `atlas1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The connection is attempted with the username `guest` and the password `passwd123`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database service is presented on the standard TCP port `27017`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default database name on the server is `data1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While the preceding connection string is valid for Atlas database connections,
    it is generally not a good idea to display the password in the connection string.
    Here is an example where the password is requested at connection time:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mongodb+srv://guest@atlas1-u7xxx.mongodb.net:27017/data1`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mongodb+srv://atlas1-u7xxx.mongodb.net:27017/data1 --username guest`'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the connection is attempted with the `guest username`. However,
    the password is not part of the connection string, and it will be requested by
    the server at connection time.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the database name is omitted (or is invalid), connection to the default
    database is attempted, which is the admin database. Also, if the TCP port is omitted,
    it will attempt to connect to the default TCP port 27017, as in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mongodb+srv://guest@atlas1-u7xxx.mongodb.net`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For non-cloud database connections or for legacy MongoDB connections, the simple
    `mongodb` prefix should be used instead. Here are a few examples of non-cloud
    connection strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mongodb://localhost/data1`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the hostname is `localhost`, which means that the database
    server is running on the same computer as the application, and connecting to the
    database `data1` is attempted. Here is another example of a remote network connection
    on the non-default TCP port `5500`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mongodb://devsrv01.dev-domain-example.com:5500/data1`'
  prefs: []
  type: TYPE_NORMAL
- en: As no username is specified in the connection string, connection is attempted
    without a username. This type of connection works for databases that have no authorization
    mode (no user security configured). Authorization mode is always configured for
    cloud databases.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A MongoDB connection string can be different if the database service is configured
    in a replication or sharded cluster. Examples of connection strings for MongoDB
    clusters will be provided later, in *Chapter 10*, *Replication*.
  prefs: []
  type: TYPE_NORMAL
- en: The Mongo Shell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Probably the simplest way to connect to a MongoDB database is to use the mongo
    shell. The mongo shell offers a simple terminal mode client for a MongoDB database:'
  prefs: []
  type: TYPE_NORMAL
- en: The mongo shell is included in all MongoDB installations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be used to run server interactive commands in terminal mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be used to run JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mongo shell has its own commands.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To start the mongo shell, run the `mongo` command in Command Prompt, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 3.03: Connecting to the Cloud Database Using the Mongo Shell'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This simple exercise will show you the steps to connect to Atlas using the
    mongo shell. For this exercise, use the `mongodb+srv` prefix in the connection
    string. The first step is to obtain the cluster name (the DNS SRV record) for
    your Atlas Cloud database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log on to your new MongoDB Atlas web interface using your username and password,
    which was created when you registered for the Atlas Cloud:![Figure 3.32: MongoDB
    Atlas login page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.32: MongoDB Atlas login page'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the `Clusters` tab in the `Atlas` project menu, as shown in *Figure
    3.33*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `CONNECT` button in the `Clusters` menu. In the case of M0 free-tier,
    there is a single cluster called `Cluster0`:![Figure 3.33: Clusters window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.33: Clusters window'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Connect to Cluster0` window appears:![Figure 3.34: Connect to Cluster0
    window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.34: Connect to Cluster0 window'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `Connect with the mongo shell`. The following window appears:![Figure
    3.35: Connect to Cluster0 page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.35: Connect to Cluster0 page'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `I have the mongo shell installed` option and select the correct
    mongo shell version (the latest mongo shell version is 4.4 at the time of writing).
    Alternatively, you can select `I do not have the mongo shell installed` and install
    the mongo shell, if you have not installed it yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Copy` to copy the connection string to the clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start a command prompt window or terminal in your operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the mongo shell with the new connection string command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following details will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To connect to the Atlas database as the `admindb` database user created in *Exercise
    3.02*, *Configuring Database Access*, when prompted, provide the password for
    the `admindb` user and complete the connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the connection is established successfully, the shell prompt will display
    the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The details for this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Enterprise`: This refers to the MongoDB Enterprise edition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`atlas1-#####-shard-0`: This refers to the MongoDB replica set name. We will
    learn about this in more detail later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PRIMARY>`: This refers to the state of the MongoDB instance, which is `PRIMARY`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You may see a message saying `WARNING: shell and server versions do not match`.
    This is because the latest version of mongo shell is 4.4, while the M0 Atlas cloud
    database is version 4.2.8\. This warning can be ignored.'
  prefs: []
  type: TYPE_NORMAL
- en: Type `exit` to exit the mongo shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, you connected to a cloud database using the mongo shell client.
    For convenience, you used the Atlas interface to copy the connection string for
    our Atlas cluster. In practice, developers already have the database connection
    string prepared in advance, so they don't need to copy it from the Atlas application
    every time they connect to the database.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Compass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MongoDB Compass is a graphical tool for data visualization in MongoDB. It is
    installed together with MongoDB Server installation, as MongoDB Compass is part
    of the standard distribution. Alternatively, MongoDB Compass can be downloaded
    and installed separately, without the MongoDB Server software.
  prefs: []
  type: TYPE_NORMAL
- en: The simple and powerful GUI interface of MongoDB Compass helps you to easily
    query and analyze data in the database. MongoDB Compass has a query builder graphical
    interface that greatly simplifies the work of creating complex JSON database queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MongoDB Compass version 1.23 is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.36: MongoDB Compass connected to Atlas cloud'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.36: MongoDB Compass connected to Atlas cloud'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the most important MongoDB Compass features in the standard version:'
  prefs: []
  type: TYPE_NORMAL
- en: Easy management of database connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interaction with data, queries, and CRUD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficient graphical query builder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Management of query execution plans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aggregation builder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Management of collection indexes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schema Analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real Time Server Stats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apart from standard MongoDB Compass standard version, at the time when this
    chapter was written there are other two versions of MongoDB Compass available
    for download:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compass Isolated: For highly secure environments. The isolated version of Compass
    initiates network requests only to MongoDB server on which is connected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compass Read Only: As the name suggests, the read only version of Compass does
    not change any data in the database and it is used only for queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note:'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Compass Community version is now deprecated. Instead you can use full
    version of MongoDB Compass, which is free to use and includes enterprise edition
    features like MongoDB schema analysis.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Drivers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a misconception that MongoDB is only a database for the JavaScript
    stack. It is inappropriate to minimize the power of MongoDB and to use it only
    for JavaScript applications.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB is a multi-platform database with a flexible data model that can be
    used for any type of application. Also, there is great support for MongoDB in
    almost every programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Probably the most useful and popular versions of MongoDB clients are represented
    by drivers. MongoDB drivers are the glue between the database and the world of
    software development. Currently, there are many drivers for the most popular programming
    languages, such as C/C++, C#, Java, Node, and Python.
  prefs: []
  type: TYPE_NORMAL
- en: The Driver API, which is the software library interface, makes it possible to
    use MongoDB database functions directly in programming language structures. For
    example, specific BSON data types from MongoDB are translated into a data format
    that can be used in a programming language such as Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.04: Connecting to a MongoDB Cloud Database Using the Python Driver'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Business decisions are often made on the basis of data analysis. Sometimes,
    in order to obtain useful results, developers use a programming language such
    as Python to analyze data. Python is a powerful programming language, yet it is
    easy to learn and practice. In this exercise, you will connect to a MongoDB database
    from Python 3\. Before you connect to MongoDB using Python, note the following
    points:'
  prefs: []
  type: TYPE_NORMAL
- en: You need not install MongoDB locally on your computer in order to connect using
    Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Python library uses the `pymongo` module to connect to MongoDB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pymongo` module is available for both Python 2 and Python 3\. However,
    as Python 2 is now end-of-life, it is highly recommended to use Python 3 for new
    software development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB client is part of the `pymongo` Python library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You also need to install the DNSPython module because the Atlas connection string
    is a DNS SRV record. Therefore, the DNSPython module is needed to perform a DNS
    lookup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Follow these steps to complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the Python version is 3.6 or higher, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For macOS or Linux, the Python shell can start with `python3` instead of `python`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before installing `pymongo`, make sure the Python package manager, `pip`, is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `pymongo` `client`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the `dnspython` module, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have prepared the Python environment, the next step is to get the
    correct connection string for your cloud database. Test the MongoDB connection
    to confirm this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the connection string and add your database name and password. The connection
    is attempted with the `admindb` username created in *Exercise 3.02*, *Configuring
    Database Access*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Replace `<server_link>` with your server link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider this case in which the connection string is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"mongodb+srv://admindb:xxxxxx@cluster0-u7xxx.mongodb.net/test?retryWrites=true&w=majority"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the server link can be quickly identified as : `cluster0-u7xxx.mongodb.net`'
  prefs: []
  type: TYPE_NORMAL
- en: Replace `<database_name>` with your database name, in this case, `sample_mflix`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace `<password>` with the `admindb` user password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you want to connect with a different user—not `admindb`—replace `admindb`
    with your username, and `<password>` with your password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit a test script in Python to test your connection and execute the Python
    script. In Windows, open the Notepad text editor and type in the following Python
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Note:'
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to update the URI with your Atlas connection details. If you use
    the URI provided in this example, then you will receive a connection error.
  prefs: []
  type: TYPE_NORMAL
- en: Save the text script with the name `mongo4_atlas.py`—for example, in `C:\Temp\mongo4_atlas.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Windows'' Command Prompt, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In a macOS/Linux shell prompt, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the script will show the collections in the database, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this exercise, you practiced working with MongoDB in the cloud in practical
    terms using a programming language such as Python. The possibilities are unlimited
    in terms of using the extended Python library; you can create web applications,
    perform data analytics, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Server Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is a database server that has clients that connect to the server over
    the network. The database server manages the database, while clients are used
    by applications or users to query data from the database. If you're wondering
    whether there are only databases (without a server), then yes, there are. For
    example, Microsoft Access is an example of a relational database without a database
    server. The main advantage of the client-server architecture is that the server
    consolidates control data management, user security, and concurrency for parallel
    access.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a separation of physical and logical structures. The database
    server manages the database's physical structures, such as storage and memory.
    On the other hand, database clients usually have access only to logical database
    structures, such as collections, indexes, and views.
  prefs: []
  type: TYPE_NORMAL
- en: This section will briefly explain the physical and logical structures in MongoDB
    4.4.
  prefs: []
  type: TYPE_NORMAL
- en: Physical Structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The physical structure of the database consists of computing resources allocated
    for MongoDB Server, such as processor threads, memory allocation, and database
    file storage. Computing requirements and tuning are important parts of database
    management, especially for on-premises database servers. Nevertheless, in the
    case of databases deployed on the MongoDB Atlas Cloud, the physical structure
    of the database is not visible to users. The database is managed internally by
    MongoDB. Therefore, cloud users can focus exclusively on database utilization
    and application development rather than spending time on the database management
    of physical resources such as storage and memory.
  prefs: []
  type: TYPE_NORMAL
- en: As described in the introduction, MongoDB Atlas allocates physical resources
    based on cluster tier size. Resource management is done entirely through the cloud
    Atlas application. If more resources are needed, the cluster can be extended to
    a larger size.
  prefs: []
  type: TYPE_NORMAL
- en: The free-tier M0 cluster has no dedicated resources (only shared CPU and memory).
    However, the free-tier M0 cluster is a great database cluster because it's always
    available for learning about and testing MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Database Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'MongoDB automatically creates many types of files, such as data files and log
    files, on disk. In the case of Atlas Cloud databases, all database files are managed
    internally by MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Datafiles:** These are files used for database collections and other database
    objects. MongoDB has a configurable storage engine for data files, and WiredTiger
    is a high-performance storage engine, that has been introduced in MongoDB since
    version 3.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oplog:** These are files used for transaction replication between cluster
    members. We will learn about these in detail in *Chapter 10*, *Replication.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other files:** These are files such as config files, database logs, and audit
    files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database Metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While data files and memory management are not topics for databases deployed
    in the cloud, it is necessary to monitor the utilization of allocated cloud resources.
    Atlas resource monitoring provides a graphical interface where performance metrics
    are displayed. There are many metrics available in Atlas, such as logical database
    metrics, physical database metrics, and network bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: The content coverage of this topic is beyond the scope of this book. For more
    details, you can refer to the MongoDB Atlas documentation, *Monitoring and Alerts*
    ([https://docs.atlas.mongodb.com/monitoring-alerts/](https://docs.atlas.mongodb.com/monitoring-alerts/)).
  prefs: []
  type: TYPE_NORMAL
- en: Logical Structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The logical structure of the database consists of databases, collections, and
    other database objects. The following diagram represents the main logical structure
    of MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.37: Logical structure of MongoDB'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.37: Logical structure of MongoDB'
  prefs: []
  type: TYPE_NORMAL
- en: '**MongoDB Server:** Physical or virtual computer where the MongoDB server instance
    is running. For a MongoDB cluster, there is a set of few MongoDB instances when
    a client connects to MongoDB'
  prefs: []
  type: TYPE_NORMAL
- en: '**Database:** A MongoDB cluster contains many databases. Each database is a
    logical storage container in MongoDB for database objects. There are a few system
    databases, created when a database is deployed. System databases are used internally
    by MongoDB Server for database configuration and security, and they cannot be
    used for user data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objects:** A database contains the following objects:'
  prefs: []
  type: TYPE_NORMAL
- en: Collections of JSON documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic logical entity in MongoDB is the JSON document. Multiple documents
    are grouped in a collection, and multiple collections are grouped in a database.
    In MongoDB version 4, more objects were introduced, such as database views, which
    add more functionality to the database. We will learn about database view objects
    with a suitable example in *Exercise 3.05*, *Creating a Database View Object*.
  prefs: []
  type: TYPE_NORMAL
- en: Server Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a client-server database server architecture, such as MongoDB Server, clients
    send requests to the database server and MongoDB Server executes the requests
    on the server side. Therefore, there is no client processing involved when a server
    executes a client request. Once the request is complete, the server sends the
    execution results or messages back to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'While MongoDB Server has many functions, there are a few different categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CRUD operations**: Database **Create, Read, Update, Delete** (**CRUD**) operations
    are commands that modify data documents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database Commands**: These are all the commands that differ from data queries
    and CRUD operations. Database commands have other functions, such as database
    management, security, and replication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most database commands are executed in the background by Atlas every time a
    user changes a database configuration. For example, when the Atlas project owner
    adds a new user, the Atlas application runs database commands in the background
    to create the user in the database. Nevertheless, it is possible to execute server
    commands from MongoDB Shell or from MongoDB Driver.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, the syntax to run a database command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`db_command` is the database command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to retrieve the current operations being executed in
    MongoDB, we can run a command with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The server will return a JSON formatted document with the operations in progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some database commands have their own shorter syntax and can run without the
    general `db.runCommand` syntax. This is used for convenience to remember the syntax
    for commands that are used more often. For example, the syntax for the command
    to list all collections in the current database is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: For databases deployed in the Atlas Cloud, there are some database admin commands
    that cannot be executed directly from the mongo shell. The complete list of commands
    is available in the MongoDB Atlas documentation, *Unsupported Commands in M0/M2/M5
    Clusters* ([https://docs.atlas.mongodb.com/reference/unsupported-commands/](https://docs.atlas.mongodb.com/reference/unsupported-commands/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.05: Creating a Database View Object'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will practice database commands. The goal of the exercise
    is to create a new database object from the mongo shell terminal. You will create
    a database view object to display only three columns: movie name, release year,
    and collection information. You will use the MongoDB console to execute all the
    database commands.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps to execute this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to the Atlas database using the connection string for the MongoDB console.
    Repeat *steps 1 to 9* from *Exercise 3.03*, *Connecting to the Cloud Database
    using the Mongo Shell*, to connect using the mongo shell client. If you have the
    connection string already prepared for your Atlas database, start the mongo shell
    and connect as described in *step 8* of *Exercise 3.03*, *Connecting to the Cloud
    Database using the Mongo Shell*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `mflix` movie database using the `use` database command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'List the existing collections using the `getCollectionNames` database command
    to return a list of all the collections in the current database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `short_movie_info` view from the movies collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `$project` operator is used to select only three fields (`year`, `title`,
    and `plot`) from the movie collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `createView` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'A response of `"ok" : 1` indicates that the command to create and view the
    database was executed successfully with no errors, as in the following code output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The output details may vary based on the server runtime values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the view was created. The view just shows as a collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This command returns an array with the view name in the collection list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Query the view, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The view database object behaves exactly like a normal collection. You can query
    a view in the same way you query a database collection. You will run a short query
    to return just one document.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output for this query will show only the document `id`, `plot`, `year`,
    and `title`. The complete session output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.38: Session output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_38.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.38: Session output'
  prefs: []
  type: TYPE_NORMAL
- en: This was an example of how to create a new database object, such as a simple
    view. Views can be very useful for users and developers to join multiple collections
    and to limit visibility to just some fields in JSON documents. Once we have learned
    more about MongoDB queries and aggregation, we can apply all those techniques
    to create more complex views in the database, from multiple collections to using
    the aggregation pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3.01: Managing Your Database Users'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine you are in charge of managing your company's MongoDB database, which
    is in the MongoDB Atlas Cloud infrastructure in **Amazon Web Services** (**AWS**).
    Recently, you've been informed that a new developer, Mark, has joined the team.
    As a new team member, Mark needs access to the MongoDB movie database for a new
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following high-level steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new database called `dev_mflix`, which will be used for development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new custom role for developers, called `developers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grant read-write permissions on the `dev_mflix` database to the `developers` role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grant read-only permissions on the `sample_mflix` movie database to the `developers`
    role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new database account for Mark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grant the `developers` custom role to Mark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the account by connecting to the database with Mark as the user and verify
    the access permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark should not be able to modify the production movie database, nor should
    he see any other databases on the server except `sample_mflix` and `dev_mflix`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Mark is successfully added to the Atlas project, you should be able to
    test the connection with that account. Connect with the mongo shell using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Your actual connection string is different and needs to be copied from the Atlas
    connect window, as explained in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of the output terminal (from the mongo shell):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.39: Connecting the MongoDB Shell'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.39: Connecting the MongoDB Shell'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15507_Solution_Final_SZ_ePub.xhtml#_idTextAnchor465)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the basics of Atlas service management. As security
    is a very important aspect of cloud computing, controlling network access and
    database access is essential for the Atlas platform, and you should now be able
    to set up new users and grant permissions to database resources. Database connections
    and MongoDB database commands were also explored in detail. The next chapter will
    introduce you to the world of MongoDB query syntax. The MongoDB NoSQL language
    is a rich and powerful database language that integrates very well with all programming
    languages.
  prefs: []
  type: TYPE_NORMAL
