- en: CRUD Operations in Plain REST (Without Reactive) and File Upload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we explored a CRUD operation with Reactive support. As
    the Spring development team is still updating more Reactive entities, Reactive
    support hasn't reached their level yet. Though Spring 5 Reactive support is working
    fine, they still need to improve it to make it stable. After considering these
    pointers, we plan to avoid Reactive support in order to make it simple for you.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go through basic CRUD (Create, Read, Update, and Delete)
    APIs in Spring 5 (without Reactive) REST. After this chapter, you will be able
    to do a simple CRUD operation in Spring 5 without Reactive support. Also, we will
    talk about file upload options in Spring 5.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Mapping CRUD operations to HTTP methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading (selecting) a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File uploads in Spring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping CRUD operations to HTTP methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, you saw CRUD operations in the controller. In this chapter,
    we will have the same CRUD operations; however, we've excluded all Reactive components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create basic Spring project resources, you can use Spring Initializr ([https://start.spring.io/](https://start.spring.io/))
    . In Spring Initializr, provide the necessary details:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a Maven Project with Java and Spring Boot 1.5.9.
  prefs: []
  type: TYPE_NORMAL
- en: 'Group: `com.packtpub.restapp`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Artifact: `ticket-management`'
  prefs: []
  type: TYPE_NORMAL
- en: Search for dependencies:  Select `Web (Full Stack Web Development with Tomcat
    and Web MVC) ` dependency
  prefs: []
  type: TYPE_NORMAL
- en: After filling in the details, just click Generate Project; then it will create
    Spring basic resources in ZIP format. We can start using the project by importing
    them into Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Spring 5 POM file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s remove the parent to simplify the POM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As we removed the parent, we may need to add the version in all of our dependencies.
    Let''s add the version in our dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As the dependency artifact `spring-boot-starter-web` version `1.5.9` is based
    on Spring 4.3.11, we will have to upgrade to Spring 5\. Let''s clean and upgrade
    our POM file to bring in Spring 5 updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see Spring 5-related dependencies in the preceding POM file. Let''s
    test them with the REST endpoint. First, create a Spring Boot main file to initialize
    Spring Boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can start running the Spring Boot on Eclipse by right-clicking the project
    and selecting Run As | Spring Boot App. If you do this, you will see logs in the
    Eclipse console.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't see the console, you can get it via Window | Show View | Console.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample log. You may not see an exact match; however, you
    will get an idea of how the server running log will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see `Tomcat started on port(s): 8080` in the last lines of the log.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you check the URI `http://localhost:8080`, you will see the following
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding error is saying that there is no corresponding URI configured
    in the application. Let''s fix this issue by creating a controller called `HomeController`
    under the `com.packtpub.restapp` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we created a dummy controller called `HomeController`
    with a simple `map` as a result. Also, we added the new controller we need to
    have these classes autoscanned by our main application, in our case the `TicketManagementApplication`
    class. We will tell them by adding `@ComponentScan("com.packtpub")` in the main
    class. Finally, our main class will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When you restart the Spring Boot App, you will see the REST endpoint working
    (`localhost:8080`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: CRUD operation in Spring 5 (without Reactive)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s perform user CRUD operations. As we have discussed CRUD concepts before,
    here we will only discuss User management on Spring 5 (without Reactive support).
    Let''s fill in all dummy methods for CRUD endpoints. In here, we can create `UserContoller`
    and fill in all methods for CRUD user operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We have filled the basic endpoints for all CRUD operations. If you call them
    on Postman with proper methods such as `GET`, `POST`, `PUT`, and `DELETE`,  you
    will see the result mentioning the appropriate messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for the `getAllUsers` API (`localhost:8080/user`), you will get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: getAllUsers – implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s implement the `getAllUsers` API. For this API, we may need to create
    a model class called `User` under the package `com.packtpub.model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will add code for the `getAllUsers` implementation. As this is business
    logic, we will create a separate `UserService` and `UserServiceImpl` class. By
    doing this, we can keep the business logic in a different place to avoid code
    complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UserService` interface will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `UserServiceImpl` class implementation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding implementation, we created dummy users in the constructor.
    When the class is initialized by a Spring configuration, these users will be added
    to the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UserController` class for calling the `getAllUsers` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have called the `getAllUsers` method by autowiring
    it in the controller file. `@Autowired` will do all the instantiation magic behind
    the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the application now, you may face the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason behind this error is that your application is not able to identify
    `UserService`, as it is in a different package. We can fix this issue by adding
    `@ComponentScan("com.packtpub")` in the `TicketManagementApplication` class. This
    will identify all `@service` and other beans in different sub-packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can see the result when you call the API (`http://localhost:8080/user`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: getUser – implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like we did earlier in [Chapter 4](6692606f-fda4-42d3-b9ce-22350d5691bb.xhtml),
    *CRUD Operations in Spring REST* we are going to implement `getUser` business
    logic in this section. Let's add the `getUser` method here by using Java 8 Streams.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UserService` interface will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `UserServiceImpl` class implementation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the previous `getUser` method implementation, we used Java 8 Streams and
    lambda expressions to get the user by `userid`. Instead of using the traditional
    `for` loop, lambda expressions make it easier to fetch the details. In the preceding
    code, we check the user by filter criteria. If the user is matched, it will return
    the specific user; otherwise, it will create a dummy user with the `"Not available"`
    message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UserController` class for the `getUser` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify the API by accessing `http://localhost:8080/user/100` in the
    client (use Postman or SoapUI to test it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: createUser – implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can add the code for creating a user option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UserService` interface will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `UserServiceImpl` class implementation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The `UserController` class for the `createUser` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will add the user in our map. Here, we have used `userid`
    and `username` as method parameters.  You can view the `userid` and `username`
    in the following API call:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7eeaca9a-ea63-487a-94ef-2274187f0065.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you call this method using SoapUI/Postman, you will get the following
    result. In this case, we used parameters (`userid`, `username`) instead of JSON
    input. This is just to simplify the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: updateUser – implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can add the code for the update user option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UserService` interface will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `UserServiceImpl` class implementation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding method, we have used a Java Streams-based implementation to
    update the user. We simply apply the filter and check for whether the user is
    available or not. If the `userid` is not matched, it will throw `RuntimeException`.
    If the user is available, we will get the corresponding user, and then we update
    `username`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UserController` class for the `updateUser` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We will try to update `username` from `David` to `Sammy` on `userid` with value
    `100`. We can check the API details from the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af20ba48-60bf-42c3-901f-8b2fa59d37d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we call this API (the `UPDATE` method) using the SoapUI/Postman extension
    (`http://localhost:8080/user`), we will get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the result by checking the `getAllUsers` API (the `GET` method)
    in the Postman extension (`http://localhost:8080/user`); you will get the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: deleteUser – implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can add the code for the `deleteUser` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UserService` interface will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `UserServiceImpl` class implementation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `UserController` class for the `deleteUser` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'When you call this API (the `DELETE` method) using the Postman extension (`http://localhost:8080/user/100`),
    you will get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: You can also check the `getAllUsers` method to verify that you have deleted
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: File uploads – REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File uploading becomes very easy with the support of the `NIO` libraries and
    Spring's `MultipartFile` options. Here, we will add the code for file uploading.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `FileUploadService` interface will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we just defined the method to let the concrete class
    (implementation class) override our method. We used `MultipartFile`  here to forward
    a file, such as a media file to fulfill our business logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `FileUploadServerImpl` class implementation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we set the location in the constructor itself, so when
    the Spring Boot App is initialized, it will set the correct path; if needed, it
    will create a specific folder on the mentioned location.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `uploadFile` method, we get the files and clean them first. We use a
    Spring utility class called `StringUtils` to clean the file path. You can see
    the cleaning process here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If the file is empty, we simply throw an exception. You can check the exception
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then comes the real file upload logic! We just use the `Files.copy` method
    to copy the file from the client to the server location. If any error happens,
    we throw `RuntimeException`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: As the main implementation is done by the concrete class, the controller just
    passes the `MultipartFile` to the service. We have used the `POST` method in here,
    as it will be the perfect method to upload the file. Also, you can see that we
    used the `@Autowired` option to use the `service` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `FileController` class for the `uploadFile` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Testing the file upload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create an HTML file as follows and test the file upload API. You can
    also use any REST client to test this. I have given you this HTML file to simplify
    the testing process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered CRUD operations in Spring 5 (without Reactive
    support) by starting with basic resources and customizing them. Also, we have
    learned how to upload a file in Spring. In the next chapter, we will learn more
    about Spring Security and JWT (JSON Web Token).
  prefs: []
  type: TYPE_NORMAL
