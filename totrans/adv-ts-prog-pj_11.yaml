- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using union types, we can write a method that accepts either the `FahrenheitToCelsius`
    class or the `CelsiusToFahrenheit` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To accept a key/value pair, we need to use a map. Adding our records to it
    would look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have actually added two methods here. If we want to add multiple commands
    in one go, we can use REST parameters to accept the array of commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use a decorator to automatically log when our `Add` method is called.
    Our `log` method, for example, could look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We are only going to add this to the following `Add` method because the `Add` method
    that accepts the REST parameters calls this one anyway:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget that we use the `@` symbol to denote that this is a decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a row with six medium columns of equal size, we use six `div` statements
    with the class set to `col-md-2`, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Remember, from our discussion on Bootstrap, that the number of columns in a
    row should equal 12.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React provides us with special file types, `.jsx` (for JavaScript) or `.tsx`
    (for TypeScript), to create a file that can be *transpiled* down to JavaScript,
    so React takes the elements that look like HTML and renders them as JavaScript
    instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both `class` and `for` are reserved keywords in JavaScript. Since `.tsx` files
    seemingly mix JavaScript and HTML together inside the same method, we need aliases
    to specify the CSS class and the control a `label` is associated with. React provides
    `className` to specify the class that should be applied to an HTML element and
    `htmlFor` to specify what control the label is associated with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we created our validators, we were creating reusable pieces of code that
    could be used to actually perform specific types of validation; for example, checking
    to ensure that a string was a minimum length. Since these were designed to be
    reusable, we had to separate them from our validation code, which was where we
    actually applied the validation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By replacing `[0-9]` with `\d`, we convert `^(?:\\((?:[0-9]{3})\\)|(?:[0-9]{3}))[-.
    ]?(?:[0-9]{3})[-. ]?(?:[0-9]{4})$` into the following expression: `^(?:\\((?:\d{3})\\)|(?:\d{3}))[-.
    ]?(?:\d{3})[-. ]?(?:\d{4})$`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With a hard delete, we remove the physical record from the database. With soft
    deletes, we leave the record in place, but we apply a marker to it that means
    the record is no longer active.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MEAN stack consists of four major components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**MongoDB**: MongoDB is a NoSQL database that became the de facto standard
    in building database support into client/server applications with Node. There
    are other database options available, but MongoDB is a very popular choice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Express**: Express wraps up a log of the complications of working with server-side
    code under Node and makes it easier to use. For instance, if we want to deal with
    HTTP requests, Express makes this trivial, as opposed to writing the equivalent
    Node code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular**: Angular is the client-side framework that makes creating powerful
    web frontends easier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node**: Node (or Node.js) is the runtime environment for our application
    on the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We supply a prefix to make our component unique. Suppose we had a component
    that we wanted to call `label`; obviously, this will clash with the built-in HTML
    label. To avoid this clash, our component selector would be `atp-label`. Since
    HTML controls never use hyphens, we guarantee that we aren't going to *collide*
    with existing control selectors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To start our Angular application, we run the following command in the top-level
    Angular folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the same way that our own language is broken down and structured into words
    and punctuation, we can break visual elements down into structures such as color
    and depth. As an example, the language tells us what colors mean, so if we see
    a button with one color on one screen in our application, it should have the same
    underlying usage across other screens in our application; we wouldn't use a green
    button to signify OK on one dialog and then Cancel on another. The idea behind
    a design language is that elements should be consistent. So, if we create our
    application as a Material application, it should be familiar to someone using
    Gmail (for instance).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We create services using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be shortened to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Whenever a request comes into our server, we need to determine how to handle
    the request the best, which means that we have to route it to the appropriate
    piece of functionality to handle the request. Express routing is the mechanism
    we use to accomplish this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: RxJS implements the observer pattern. This pattern has an object (known as the
    **subject**) that keeps track of an array of dependencies (known as the **observers**)
    and notifies them of *interesting* behaviors, such as state changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**CORS** stands for **Cross-Origin Request Sharing**. With CORS, we let *known*
    external locations have access to restricted operations on our site. In our code,
    since Angular is running from a different site to our web server (`localhost:4200`,
    as opposed to `localhost:3000`), we need to enable CORS support to post, otherwise
    we won''t return anything when we make requests from Angular.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GraphQL is not intended to fully replace REST clients. It can act as a cooperative
    technology, so it could very well consume multiple REST APIs itself to produce
    graphs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A mutation is an operation that is intended to change the data in the graph
    in some way. We might want to add new items to the graph, update items, or delete
    items. It is important to remember that the mutation is just changing the graph
    – if the change has to be persisted to where the graph got the information from,
    then it is the graph's responsibility to call out to underlying services to make
    those changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to pass a value to a subcomponent, we need to use `@Input()` to expose
    a field for binding from the parent. In our code example, we set up a `Todo` item
    like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With GraphQL, a resolver represents an instruction on how to turn an operation
    into data; they are organized as a one-to-one mapping to the fields. The schema,
    on the other hand, represents a number of resolvers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create a singleton, the first thing that we need to do is create our class
    with a private constructor. A private constructor means that the only place that
    we can instantiate our class is from inside the class itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing we need to do is add a field to hold a reference to the class
    instance and then offer a public static property to access that instance. The
    public property will take care of instantiating the class if it''s not already
    available so that we''ll always be able to access it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using `io.emit`, we can send a message to all connected clients.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we wanted to send a message to all the users in a particular room, we would
    use something like the following, where we say what room we are sending the message
    to and then use `emit` to set the `event` and `message`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To send the message to all users, except for the sender, we need to broadcast
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There are certain event names that we cannot use as a message because they have
    been restricted due to them having a special meaning to Socket.IO. These are `error`,
    `connect`, `disconnect`, `disconnecting`, `newListener`, `removeListener`, `ping`,
    and `pong`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Socket.IO is made up of a number of different cooperating technologies, one
    of which is called Engine.IO. This provides the underlying transport mechanism.
    The first type of connection it takes, when connecting, is an HTTP long poll,
    which is a fast and efficient transport mechanism to open. During idle periods,
    Socket.IO attempts to determine whether or not the transport can be changed over
    to a socket and, if it can use a socket, it seamlessly and invisibly upgrades
    the transport to use sockets. As far as the client is concerned, they connect
    quickly, and messages are reliable since the Engine.IO part establishes connections,
    even if firewalls and load balancers are present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `@Component` definition, we use `host` to map the host event that we
    want to work with to the relevant Angular method. In our `MapViewComponent`, for
    instance, we used the following component definition to map the `window load`
    event to a `Loaded` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Latitude and longitude are geographic terms that are used to identify exactly
    where something is on the planet. Latitude tells us how far north or south something
    is from the equator, with the equator being 0; a positive number means we are
    north of the equator, while a negative number means we are going south from the
    equator. Longitude tells us how far east or west we are from the vertically centered
    line of the Earth which, by convention, runs through Greenwich in London. Again,
    if we are moving east, the numbers are positive, while moving west means the numbers
    are negative.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The act of converting a location, represented by latitude and longitude, into
    an address is called reverse geocoding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use a Firestore database, part of Google's Firebase cloud service, to save
    our data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A container is a running instance that takes in the various pieces of software
    that's needed to run the application. This is the starting point for us; containers
    are built from images, which you can either build yourself or download from a
    central Docker database. Containers can be opened up to other containers, such
    as the host operating system, or even to the wider world using ports and volumes.
    One of the big selling points with a container is that it is easy to set up and
    create and can be stopped and started very quickly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we were starting up Docker containers, we discussed two methods of achieving
    this. The first approach involves using a combination of `docker build` and `docker
    run` to start the services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The use of `-d` signifies that it do not block the console as it detach and
    run silently in the background. This allows us to run a group of these commands
    together. In the download, you will find a batch file that I created to start
    them like this on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second approach, and the one that I would recommend, uses Docker composition.
    In our example, we created a `docker-compose.yml` file that we used to group our
    microservices together. To run our composition file, we need to use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If we use `docker run` to start our container, we can specify the port inside
    it using the `-p` switch. The following example remaps port `3000` to `17171`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When we use Docker composition, we specify the port remapping inside the `docker-compose.yml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Swagger provides many useful features for us. We can use it for things such
    as creating API documentation, prototyping APIs, and using it to auto-generate
    our code, as well as for API testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a React method cannot see the state, we have two options. We can either
    change it to use the fat arrow, `=>`, so that the `this` context is automatically
    captured, or we can use the JavaScript `bind` feature to bind to the correct context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While TensorFlow is now available with TypeScript/JavaScript support, it was
    originally released as a Python library. The backend of TensorFlow was written
    to use high-performance C++.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supervised machine learning takes previous learning and uses this to work against
    new data. It uses labeled examples for this so that it learns correct answers.
    Behind this, there are training datasets that supervised algorithms work against
    to refine their knowledge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MobileNet is a specialist **Convolutional Neural Network** (**CNN**) that, among
    other things, provides pre-trained image classification models.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The MobileNet `classify` method defaults to returning three classifications
    containing the classification name and the probability. This can be overridden
    by specifying the number of classifications to return as a parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we want to create our Vue application, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Since we want to create TypeScript applications, we choose to manually select
    features and, on the features screen, we make sure that we choose TypeScript as
    our option.
  prefs: []
  type: TYPE_NORMAL
- en: When we create a class in a `.vue` file, we use `@Component` to mark it as a
    component that can be registered in Vue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript and C# both trace their syntax roots back to C, so they largely follow
    similar language paradigms such as using `{ }` to denote the scope of an operation.
    Since all JavaScript is valid TypeScript, this means that TypeScript has exactly
    the same style here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The method that starts our program is the `static Main` method. It looks like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: ASP.NET Core uses a rewritten .NET version that removes the constraint that
    it can only run on the Windows platform. This means that the reach of ASP.NET
    has greatly increased because it can now run on Linux platforms, as well as on
    Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Discog limits the number of requests that can be issued from a single IP. For
    authenticated requests, Discog limits the rate of requests to 60 per minute. For
    unauthenticated requests, for most cases, the number of requests that can be sent
    is 25 per minute. The number of requests is monitored using a moving window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
