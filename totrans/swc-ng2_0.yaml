- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AngularJS is a JavaScript development framework that makes building web applications
    easier. It is used today in large-scale, high-traffic websites that struggle with
    underperformance and portability issues, as well as SEO unfriendliness and complexity
    at scale. Angular 2 changes these.
  prefs: []
  type: TYPE_NORMAL
- en: It is the modern framework you need to build performant and robust web applications.
    *Switching to Angular 2* is the quickest way to get to grips with Angular 2, and
    it will help you transition into the brave new world of Angular 2.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the book, you'll be ready to start building quick and efficient
    Angular 2 applications that take advantage of all the new features on offer.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0015_split_000.html#E9OE1-a118c4c18dd64e8ab73e171b466b6582
    "Chapter 1. Getting Started with Angular 2"), *Getting started with Angular 2*,
    kicks off our journey into the world of Angular 2\. It describes the main reasons
    behind the design decisions of the framework. We will look into the two main drivers
    behind the shape of the framework—the current state of the Web and the evolution
    of frontend development.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0019_split_000.html#I3QM1-a118c4c18dd64e8ab73e171b466b6582
    "Chapter 2. The Building Blocks of an Angular 2 Application"), *The Building Blocks
    of an Angular 2 Application*, gives an overview of the core concepts introduced
    by Angular 2\. We''ll explore how the foundational building blocks for the development
    of applications provided by AngularJS 1.x differ from the ones in the last major
    version of the framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0027_split_000.html#PNV61-a118c4c18dd64e8ab73e171b466b6582
    "Chapter 3. TypeScript Crash Course"), *TypeScript Crash Course*, explains that
    although Angular 2 is language agnostic, Google''s recommendation is to take advantage
    of the static typing of TypeScript. In this chapter, you''ll learn all the essential
    syntax you need to develop Angular 2 applications in TypeScript!'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0040_split_000.html#164MG1-a118c4c18dd64e8ab73e171b466b6582
    "Chapter 4. Getting Started with Angular 2 Components and Directives"), *Getting
    Started with Angular 2 Components and Directives*, describes the core building
    blocks for developing the user interface of our applications—directives and components.
    We will dive into concepts such as view encapsulation, content projection, inputs
    and outputs, change detection strategies, and more. We''ll discuss advanced topics
    such as template references and speeding up our applications using immutable data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0056_split_000.html#1LCVG1-a118c4c18dd64e8ab73e171b466b6582
    "Chapter 5. Dependency Injection in Angular 2"), *Dependency Injection in Angular
    2*, covers one of the most powerful features in the framework, which was initially
    introduced by AngularJS 1.x: its dependency injection mechanism. It allows us
    to write more maintainable, testable, and understandable code. By the end of this
    chapter, we will know how to define the business logic in services and glue them
    together with the UI through the DI mechanism. We will also look into some more
    advanced concepts, such as the injectors hierarchy, configuring providers, and
    more.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0062_split_000.html#1R42S1-a118c4c18dd64e8ab73e171b466b6582
    "Chapter 6. Working with the Angular 2 Router and Forms"), *Working with the Angular
    2 Router and Forms*, explores the new module for managing forms in the process
    of developing a real-life application. We will also implement a page that shows
    the entered through the form data. In the end, we will glue the individual pages
    together into an application by using the component-based router.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0069_split_000.html#21PMQ2-a118c4c18dd64e8ab73e171b466b6582
    "Chapter 7. Explaining Pipes and Communicating with RESTful Services"), *Explaining
    Pipes and Communicating with RESTful services*, dives into the router and the
    forms modules in detail. Here, we will explore how we can develop model-driven
    forms and define parameterized and child routes. We will also explain the HTTP
    module and see how we can develop pure and impure pipes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](part0075_split_000.html#27GQ62-a118c4c18dd64e8ab73e171b466b6582
    "Chapter 8. Development Experience and Server-Side Rendering"), *SEO and Angular
    2 in the Real World*, explores some advanced topics in the Angular 2 application
    development, such as running an application in Web Workers and server-side rendering.
    In the second part of the chapter, we will explore tools that can ease our daily
    life as developers, such as `angular-cli`, and `angular2-seed`, explain the concept
    of hot reloading, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All you need to work through most of the examples in this book is a simple text
    editor or an IDE, Node.js, TypeScript installed, Internet access, and a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Each chapter introduces the software requirements for running the provided snippets.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do you want to jump in at the deep end of Angular 2? Or perhaps you're interested
    in assessing the changes before moving over? If so, then *Switching to Angular
    2* is the book for you.
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of the book, you'll need to have basic understanding of
    AngularJS 1.x and have a good understanding of JavaScript. No knowledge of the
    changes made to Angular 2 is required to follow along.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "You
    should see the same result, but without the `test.js` file stored on the disk."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Each code snippet which is in the repository with the code from this book starts
    with a comment with its corresponding file location, relative to the `app` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "When the markup is rendered onto the screen, all that the user will see
    is the label: **Loading…**."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
