- en: Configuring MySQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Using config file
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using global and session variables
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using parameters with startup script
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the parameters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the data directory
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL has two types of parameters:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**Static**, which takes effect after restarting MySQL server'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic**, which can be changed on the fly without restarting MySQL server'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Variables can be set through the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '**Config file**: MySQL has a configuration file in which we can specify the
    location of data, the memory that MySQL can use, and various other parameters.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Startup script**: You can directly pass the parameters to the `mysqld` process.
    It remains in effect only for that invocation of the server.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using SET command** (only dynamic variables): This will last until the server
    restarts. You also need to set the variable in the config file to make the change
    persistent across restarts. Another way to make changes persistent is by preceding
    the variable name by the `PERSIST` keyword or `@@persist`.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using config file
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default config file is `/etc/my.cnf` (on Red Hat and CentOS systems) and
    `/etc/mysql/my.cnf` (Debian systems). Open the file in your favorite editor and
    modify the parameters as needed. The main parameters are discussed in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The config file has sections specified by `section_name`. All the parameters
    related to a section can be put under them, for example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`[mysql]`: Section is read by the `mysql` command-line client'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[client]`: Section is read by all connecting clients (including `mysql cli`)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[mysqld]`: Section is read by the `mysql` server'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[mysqldump]`: The section is read by the backup utility called `mysqldump`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[mysqld_safe]`: Read by the `mysqld_safe` process (MySQL Server Startup Script)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from that the `mysqld_safe` process reads all options from the `[mysqld]`
    and `[server]` sections in option files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: For example, `mysqld_safe` process reads the `pid-file` option from `mysqld`
    section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In systems that use `systemd`, `mysqld_safe` will not be installed. To configure
    the startup script, you need to set the values in `/etc/systemd/system/mysqld.service.d/override.conf`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using global and session variables
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen in the previous chapters, you can set the parameters by connecting
    to MySQL and executing the `SET` command.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of variables based on the scope of the variable:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '**Global**: Applies to all the new connections'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session**: Applies only to the current connection (session)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For example, if you want to log all queries that are slower than one second,
    you can execute:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To make the changes persistent across restarts use:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The persisted global system variable settings are stored in mysqld-auto.cnf
    which is located in data directory.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you want to log queries only for this session and not for all the connections.
    You can use the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using parameters with startup script
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you wish to start MySQL using a startup script and not through `systemd`,
    especially for testing or for some temporary change. You can pass the variables
    to the script rather than changing it in the config file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see that the `--init-file` parameter is passed to the server. The server
    executes the SQL statements in that file before starting.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the parameters
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installation, the basic things you need to configure are covered in this
    section. The rest all can be left as default or tuned later according to the load.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get into the details.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: data directory
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data managed by the MySQL server is stored under a directory known as the `data
    directory`. Each sub-directory of the `data directory` is a database directory
    and corresponds to a database managed by the server. By default, the
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '`data directory` has three sub directories:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '`mysql`: MySQL system database'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`performance_schema`: Provides information used to inspect the internal execution
    of the server at runtime'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sys`: Provides a set of objects to help interpret performance schema information
    more easily'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from these, the `data directory` contains the log files, `InnoDB` tablespace
    and `InnoDB` log files, SSL and RSA key files, `pid` of `mysqld`, and `mysqld-auto.cnf`,
    which stores persisted global system variable settings.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the `data directory` change/add the value of `datadir` to the config
    file. The default is `/var/lib/mysql`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can set it to wherever you want to store the data, but you should change
    the ownership of the `data directory` to `mysql`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the disk volume bearing the `data directory` has sufficient space
    to hold all your data.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: innodb_buffer_pool_size
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the most important tuning parameter that decides how much memory the `InnoDB`
    storage engine can use to cache data and indexes in memory. Setting it too low
    can degrade the performance of the MySQL server, and setting it too high can increase
    the memory consumption of MySQL process. The best thing about MySQL 8 is that `innodb_buffer_pool_size`
    is dynamic, meaning you can vary `innodb_buffer_pool_size` without restarting
    the server.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple guide on how to tune it:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Find out the size of your dataset. Do not set the value of `innodb_buffer_pool_size`
    higher than that of your dataset. Suppose you have a 12 GB RAM machine and your
    dataset is 3 GB; then you can set `innodb_buffer_pool_size` to 3 GB. If you expect
    growth in your data, you can increase it as and when needed without restarting
    MySQL.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Usually, the size of the dataset is much bigger than the available RAM. Out
    of the total RAM, you can set some for the operating system, some for other processes,
    some for per-thread buffers inside MySQL, and some for the MySQL server apart
    from `InnoDB`. The rest can be assigned to the `InnoDB` buffer pool size.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is a very generic table and gives you a good value to start with, assuming
    that it is a dedicated MySQL server, all the tables are `InnoDB`, and per-thread
    buffers are left as default. If the system is running out of memory, you can decrease
    the buffer pool dynamically.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '| **RAM** | **Buffer Pool Size (Range)** |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| 4 GB | 1 GB-2 GB |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| 8 GB | 4 GB-6 GB |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '| 12 GB | 6 GB-10 GB |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| 16 GB | 10 GB-12 GB |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '| 32 GB | 24 GB-28 GB |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| 64 GB | 45 GB-56 GB |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| 128 GB | 108 GB-116 GB |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '| 256 GB | 220 GB-245 GB |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: innodb_buffer_pool_instances
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can divided the `InnoDB` buffer pool into separate regions to improve concurrency,
    by reducing contention as different threads read and write to cached pages. For
    example, if the buffer pool size is 64 GB and `innodb_buffer_pool_instances` are
    32, the buffer is split into 32 regions with 2 GB each.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: If the buffer pool size is more than 16 GB, you can set the instances so that
    each region gets at least 1 GB of space.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: innodb_log_file_size
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the size of the redo log space used to replay committed transactions
    in case of a database crash. The default is 48 MB, which may not be sufficient
    for production workloads. To start with, you can set 1 GB or 2 GB. This change
    requires a restart. Stop the MySQL server and make sure that it shuts down without
    errors. Make the changes in `my.cnf` and start the server. In earlier versions,
    you need to stop the server, remove the log files, and then start the server.
    In MySQL 8, it is automatic. Modifying the redo log files is explained in [Chapter
    11](part0388.html#BI0Q80-faa69fe6f4c04957afca3568dcd9cd83), *Managing Tablespace*,
    in the *Changing the number or size of InnoDB redo log files* section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Changing the data directory
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your data can grow over time, and when it outgrows the filesystem, you need
    to add a disk or move the `data directory` to a bigger volume.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check the current `data directory`. By default, the `data directory` is `/var/lib/mysql`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Stop `mysql` and make sure it has stopped successfully:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Check the status:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It should show `Stopped MySQL Community Server`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 应该显示`已停止MySQL Community Server`。
- en: 'Create the directory at the new location and change the ownership to `mysql`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新位置创建目录并将所有权更改为`mysql`：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Move the files to the new `data directory`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件移动到新的`data目录`：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In Ubuntu, if you''ve enabled AppArmor, you need to configure the Access Control:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Ubuntu中，如果已启用AppArmor，您需要配置访问控制：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Start MySQL server and verify that the `data` directory has changed:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MySQL服务器并验证`data`目录已更改：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Verify that the data is intact and remove the old `data directory`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证数据是否完好并删除旧的`data目录`：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If MySQL fails to starts with the error—`MySQL data dir not found at /var/lib/mysql,
    please create one`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果MySQL启动失败并显示错误—`MySQL数据目录在/var/lib/mysql未找到，请创建一个`：
- en: Execute, `sudo mkdir /var/lib/mysql/mysql -p`
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`sudo mkdir /var/lib/mysql/mysql -p`
- en: If it says `MySQL system database not found`, run the ;`mysql_install_db` tool,
    which creates the required directories.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果显示`MySQL系统数据库未找到`，运行`mysql_install_db`工具，该工具将创建所需的目录。
