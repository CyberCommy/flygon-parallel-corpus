- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Constructing a compiler is a complex and fascinating task. The LLVM project
    provides reusable components for your compiler. The LLVM core libraries implement
    a world-class optimizing code generator, which translates a source language-independent
    intermediate representation of machine code for all popular CPU architectures.
    The compilers for many programming languages already take advantage of LLVM technology.
  prefs: []
  type: TYPE_NORMAL
- en: This book teaches you how to implement your own compiler and how to use LLVM
    to achieve it. You will learn how the frontend of a compiler turns source code
    into an abstract syntax tree, and how to generate **intermediate representation**
    (**IR**) from it. Adding an optimization pipeline to your compiler, you can compile
    the IR to performant machine code.
  prefs: []
  type: TYPE_NORMAL
- en: The LLVM framework can be extended in several ways, and you will learn how to
    add new passes, new machine instructions, and even a completely new backend to
    LLVM. Advanced topics such as compiling for a different CPU architecture and extending
    clang and the clang static analyzer with your own plugins and checkers are also
    covered. This book follows a practical approach and is packed with example source
    code, which makes it easy to apply the knowledge gained in your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for compiler developers, enthusiasts, and engineers who are new
    to LLVM and are interested in learning about the LLVM framework. It is also useful
    for C++ software engineers looking to use compiler-based tools for code analysis
    and improvement, as well as casual users of LLVM libraries who want to gain more
    knowledge of LLVM essentials. Intermediate-level experience with C++ programming
    is mandatory to understand the concepts covered in this book more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B15647_01_ePub_RK.xhtml#_idTextAnchor015), *Installing LLVM*,
    explains how to set up and use your development environment. At the end of the
    chapter, you will have compiled the LLVM libraries and learned how to customize
    the build process.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B15647_02_ePub_RK.xhtml#_idTextAnchor032), *Touring the LLVM
    Source*, introduces you to the various LLVM projects and discusses the common
    directory layout shared by all projects. You will create your first project using
    the LLVM core libraries, and you will also compile it for a different CPU architecture.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B15647_03_ePub_RK.xhtml#_idTextAnchor048), *The Structure of
    a Compiler*, gives you an overview of the components of a compiler. At the end
    of the chapter, you will have implemented your first compiler producing LLVM IR.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B15647_04_ePub_RK.xhtml#_idTextAnchor066), *Turning the Source
    File into an Abstract Syntax Tree*, teaches you in detail how to implement the
    frontend of a compiler. You will create your own frontend for a small programming
    language, ending with the construction of an abstract syntax tree.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B15647_05_ePub_RK.xhtml#_idTextAnchor079), *Basics of IR Generation*,
    shows you how to generate LLVM IR from an abstract syntax tree. At the end of
    the chapter, you will have implemented a compiler for the example language, emitting
    assembly text or object code files as a result.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B15647_06_ePub_RK.xhtml#_idTextAnchor102), *IR Generation for
    High-Level Language Constructs*, illustrates how you translate source language
    features commonly found in high-level programming languages to LLVM IR. You will
    learn about the translation of aggregate data types, the various options to implement
    class inheritance and virtual functions, and how to comply with the application
    binary interface of your system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B15647_07_ePub_RK.xhtml#_idTextAnchor111), *Advanced IR Generation*,
    shows you how to generate LLVM IR for exception-handling statements in the source
    language. You will also learn how to add metadata for type-based alias analysis,
    and how to add debug information to the generated LLVM IR, and you will extend
    your compiler-generated metadata.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B15647_08_ePub_RK.xhtml#_idTextAnchor126), *Optimizing IR*, explains
    the LLVM pass manager. You will implement your own pass, both as part of LLVM
    and as a plugin, and you will learn how to add your new pass to the optimizing
    pass pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B15647_09_ePub_RK.xhtml#_idTextAnchor140), *Instruction Selection*,
    shows how LLVM lowers IR to machine instructions. You will learn how instructions
    are defined in LLVM, and you will add a new machine instruction to LLVM so that
    instruction selection takes the new instruction into account.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B15647_10_ePub_RK.xhtml#_idTextAnchor153), *JIT Compilation*,
    discusses how you can use LLVM to implement a **just-in-time** (**JIT**) compiler.
    By the end of the chapter, you will have implemented your own JIT compiler for
    LLVM IR in two different ways.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B15647_11_ePub_RK.xhtml#_idTextAnchor163), *Debugging Using
    LLVM Tools*, explores the details of various libraries and components of LLVM,
    which helps you to identify bugs in your application. You will use the sanitizers
    to identify buffer overflows and other bugs. With the libFuzzer library, you will
    test functions with random data as input, and XRay will help you to find performance
    bottlenecks. You will use the clang static analyzer to identify bugs at the source
    level, and you will learn that you can add your own checker to the analyzer. You
    will also learn how to extend clang with your own plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B15647_12_ePub_RK.xhtml#_idTextAnchor177), *Creating Your Own
    Backend*, explains how you can add a new backend to LLVM. You will implement all
    the necessary classes, and at the end of the chapter you will compile LLVM IR
    to yet another CPU architecture.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*You need a computer running Linux, Windows, macOS, or FreeBSD, with the development
    toolchain installed for the operating system. Please see the table for the required
    tools. All tools should be in the search path of your shell.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15647_Preface_table_1.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To view the DAG visualization in [*Chapter 9*](B15647_09_ePub_RK.xhtml#_idTextAnchor140),
    *Instruction Selection*, you must have the Graphviz software from [https://graphviz.org/](https://graphviz.org/)
    installed. By default, the generated image is in PDF format, and you need a PDF
    viewer to show it.
  prefs: []
  type: TYPE_NORMAL
- en: To create the flame graph in [*Chapter 11*](B15647_11_ePub_RK.xhtml#_idTextAnchor163),
    *Debugging Using LLVM Tools*, you need to install the scripts from [https://github.com/brendangregg/FlameGraph](https://github.com/brendangregg/FlameGraph).
    To run the script, you also need a recent version of Perl installed, and to view
    the graph you need a web browser capable of displaying SVG files, which all modern
    browsers do. To see the Chrome Trace Viewer visualization in the same chapter,
    you need to have the Chrome browser installed.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Learn-LLVM-12](https://github.com/PacktPublishing/Learn-LLVM-12).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code in Action videos for this book can be viewed at [https://bit.ly/3nllhED](https://bit.ly/3nllhED)
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781839213502_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781839213502_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "You can observe in the code that a quantum circuit
    operation is being defined and a variable called `numOnes`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select **System info** from the **Administration** panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at [customercare@packtpub.com](mailto:customercare@packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://packt.com).
  prefs: []
  type: TYPE_NORMAL
