- en: Chapter 8. Towards Production-Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll look at considerations to move to production. We will
    also show some helpful tools and third-party projects available in the Kubernetes
    community at large and where you can go to get more help.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Production characteristics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kubernetes ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to get help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ready for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've walked through a number of typical operations using Kubernetes. As we
    saw, K8s offers a variety of features and abstractions that ease the burden of
    day-to-day management for container deployments.
  prefs: []
  type: TYPE_NORMAL
- en: There are many characteristics that define a production-ready system for containers.
    Figure 8.1 provides a high-level view of the major concerns for production-ready
    clusters. This is by no means an exhaustive list, but it's meant to provide some
    solid ground heading into production operations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Ready for production](../images/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1\. Production characteristics for container operations.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how the core concepts and abstractions of Kubernetes address a few of
    these concerns. The service abstraction has built in service discovery and health
    checking at both the service and application level. We also get seamless application
    updates and scalability from the replication controller construct. All three core
    abstractions of services, replication controllers, and pods work with a core scheduling
    and affinity ruleset and give us easy service and application composition.
  prefs: []
  type: TYPE_NORMAL
- en: There is a built-in support for a variety of persistent storage options, and
    the networking model provides manageable network operations with options to work
    with other third-party providers. Also, we took a brief look at CI/CD integration
    with some of the popular tools in the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we have built-in system events tracking, and with the major cloud
    providers, an out-of-the box setup for monitoring and logging. We also saw how
    this can be extended with third-party providers such as StackDriver and Sysdig.
    These services also address overall node health and proactive trend deviation
    alerts.
  prefs: []
  type: TYPE_NORMAL
- en: The core constructs also help us address high availability in our application
    and service layers. The scheduler can be used with autoscaling mechanisms to provide
    this at a node level. There is also a support to make the Kubernetes master itself
    highly available.
  prefs: []
  type: TYPE_NORMAL
- en: We finally explored a new breed of operating systems that give us a slim base
    to build on and secure update mechanisms for patching and updates. The slim base,
    together with scheduling, can help us with efficient resource utilization. In
    addition, there is functionality in the OS and Docker itself for trusted image
    verification.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have not explored many of the areas around security in depth. The subject
    itself could fill its own book. However, Kubernetes does provide one very important
    construct out of the box named **secrets**.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets give us a way to store sensitive information without including plaintext
    versions in our resource definition files. Secrets can be mounted to the pods
    that need them and then accessed within the pod as files with the secret values
    as content.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets are still in their early stages, but a vital component for production
    operations. There are several improvements planned here for future releases.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about secrets and even get a walk-through, check out the **Secrets**
    section in the K8s user guide at [http://kubernetes.io/v1.0/docs/user-guide/secrets.html](http://kubernetes.io/v1.0/docs/user-guide/secrets.html).
  prefs: []
  type: TYPE_NORMAL
- en: Ready, set, go
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While there are still some gaps, a variety of the remaining security and operations
    concerns are actively being addresses by third-party companies as we will see
    in the following section. Going forward, the Kubernetes project will continue
    to evolve, and the community of projects and partners around K8s and Docker will
    also grow. The community is closing the remaining gaps at a phenomenal pace.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party companies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the Kubernetes project's initial release, there has been a growing ecosystem
    of partners. We looked at CoreOS in the previous chapter, but there are many more
    projects and companies in this space. We will highlight a few that may be useful
    as you move towards production.
  prefs: []
  type: TYPE_NORMAL
- en: Private registries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In many situations, organizations will not want to place their applications
    and/or intellectual property in public repositories. For those cases, a private
    registry solution is helpful in securely integrating deployments end to end.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Cloud offers the **Google Container Registry**: [https://cloud.google.com/container-registry/](https://cloud.google.com/container-registry/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker has their own **Trusted Registry** offering: [https://www.docker.com/docker-trusted-registry](https://www.docker.com/docker-trusted-registry).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Quay.io** also provides secure private registries, vulnerability scanning,
    and comes from the CoreOS team: [https://quay.io/](https://quay.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: Google Container Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google was the main author of the original Kubernetes project and still a major
    contributor. Although this book has mostly focused on running Kubernetes on our
    own, Google is also offering a fully managed container service through the Google
    Cloud Platform.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Find more information on the **Google Container Engine** (**GKE**) website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/container-engine/](https://cloud.google.com/container-engine/)'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes will be installed on GCE and managed by Google engineers. They also
    provide private registries and integration with your existing private networks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Create your first GKE cluster**'
  prefs: []
  type: TYPE_NORMAL
- en: From the GCP console, under **Compute**, click on **Container Engine** and then
    **Container Clusters**.
  prefs: []
  type: TYPE_NORMAL
- en: If this is your first time creating a cluster, you'll have an information box
    in the middle of the page. Click on the **Create a container cluster** button.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a name for your cluster and the zone. You'll also be able to choose the
    machine type (instance size) for your nodes and how many nodes (cluster size)
    you want in your cluster. The master is managed and updated by the Google team
    themselves. Leave the **Cloud Logging** checked. Click on **Create**, and in a
    few minutes, you'll have a new cluster ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: You'll need `kubectl` that is included with the Google SDK to begin using your
    GKE cluster. Refer to [Chapter 1](part0015_split_000.html#E9OE1-22fbdd9ef660435ca6bcc0309f05b1b7
    "Chapter 1. Kubernetes and Container Operations"), *Kubernetes and Container Operations*,
    for details on installing the SDK. Once we have the SDK, we can configure `kubectl`
    and the SDK for our cluster using the steps outlined at [https://cloud.google.com/container-engine/docs/before-you-begin#install_kubectl](https://cloud.google.com/container-engine/docs/before-you-begin#install_kubectl).
  prefs: []
  type: TYPE_NORMAL
- en: Twistlock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Twistlock.io** is a vulnerability and hardening tool tailor-made for containers.
    They provide the ability to enforce policy and audit risk at the container level
    itself. While not specifically designed for Kubernetes, this promises to be a
    core piece of governance and compliance for container operations. Here is a brief
    description from their website:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Twistlock is the first security solution designed specifically to protect
    containerized computing and micro-services.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*The Twistlock Security Suite detects vulnerabilities, hardens container images,
    and enforces security policies across the lifecycle of applications.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*We are portable and agentless; we run everywhere your containers do… dev workstations,
    public clouds, private clouds."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Please refer to the Twistlock website for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.twistlock.io/](https://www.twistlock.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: Kismatic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kismatic** was founded by a few folks with ties to both the Kubernetes and
    the Mesos ecosystems. They are aiming to provide enterprise support for Kubernetes.
    They were early contributors and built much of the user interface we saw in [Chapter
    1](part0015_split_000.html#E9OE1-22fbdd9ef660435ca6bcc0309f05b1b7 "Chapter 1. Kubernetes
    and Container Operations"), *Kubernetes and Container Operations*. In addition,
    they are building the following plugins, as listed on their site.'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Role-based access controls (RBAC): Cluster-level virtualization is achieved
    using Kubernetes namespaces, a mechanism in Kubernetes for partitioning resources
    created by users into a logically named group. We extend Kubernetes namespaces
    with support for RBAC, the standard enterprise systems security method used to
    implement mandatory access control (MAC) or discretionary access control (DAC).*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*Kerberos for bedrock authentication: Kubernetes currently uses client certificates,
    tokens, or HTTP basic authentication to authenticate users for API calls. For
    many enterprises, this level of authentication fails to meet production demands.
    Kismatic extends existing functionality by taking the API server tokens issued
    after the user has been (re)authenticated and integrating with bedrock authentication
    in Kerberos.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*LDAP/AD integration: For enterprises looking to manage user access via existing
    directory services, Kismatic integrates Kubernetes such services for authentication
    through LDAP / Active Directory.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*Auditing controls: In compliance sensitive enterprise environments, we have
    recognized that rich auditing and logging instrumentation and persistence are
    key to production stability. Therefore, we are excited to announce our audit log
    plugin for Kubernetes, providing a trusted way to track security-relevant information
    on your running Kubernetes microservices and cluster activities."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Please refer to the following Kismatic website for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://kismatic.com/](https://kismatic.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Mesosphere (Kubernetes on Mesos)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Mesosphere** itself is building a commercially supported product (**DCOS**)
    around the open source Apache Mesos project. **Apache Mesos** is a cluster management
    system that offers scheduling and resource sharing a bit like Kubernetes itself,
    but at a much higher level. The open source project is used by several well-known
    companies, such as **Twitter** and **AirBnB**.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Get more information on the Mesos OS project and the Mesosphere offerings at
    these sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://mesos.apache.org/](http://mesos.apache.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://mesosphere.com/](https://mesosphere.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mesos by its nature is modular and allows the use of different frameworks for
    a variety of platforms. A Kubernetes framework is now available, so we can take
    advantage of the cluster managing in Mesos while still maintaining the useful
    application-level abstractions in K8s. Refer to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/mesosphere/kubernetes-mesos](https://github.com/mesosphere/kubernetes-mesos)'
  prefs: []
  type: TYPE_NORMAL
- en: Deis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Deis** project provides an open source **Platform as a Service** (**PaaS**)
    solution. This allows companies to deploy their own PaaS on premise or in the
    public cloud. Deis uses CoreOS as an underlying operating system and runs applications
    in Docker. Version 1.9 now has the preview support for Kubernetes as a scheduler.
    While this is not production-ready at the moment, it's a good one to watch if
    you are interested in deploying your own PaaS.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can refer to the following website for more information on Deis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.deis.io/en/latest/customizing_deis/choosing-a-scheduler/#k8s-scheduler](http://docs.deis.io/en/latest/customizing_deis/choosing-a-scheduler/#k8s-scheduler)'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another PaaS solution is **OpenShift** from Red Hat. The OpenShift platform
    uses the Red Hat Atomic platform as a secure and slim OS for running containers.
    In version 3, Kubernetes has been added as the orchestration layer for all container
    operations on your PaaS. This is great combination to manage PaaS installations
    at a large scale.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More information on OpenShift can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://enterprise.openshift.com/](https://enterprise.openshift.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Where to learn more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Kubernetes project is an open source effort, so there is a broad community
    of contributors and enthusiasts. One great resource in order to find more assistance
    is the Kubernetes **Slack** channel as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://slack.kubernetes.io/](http://slack.kubernetes.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a containers group on Google groups. You can join here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://groups.google.com/forum/#!forum/google-containers](https://groups.google.com/forum/#!forum/google-containers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you enjoyed this book, you can find more of my articles, how tos, and various
    musings on my blogs and twitter page as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.cloudtp.com/meet-the-advisors/jonathan-baier/](http://www.cloudtp.com/meet-the-advisors/jonathan-baier/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://medium.com/@grizzbaier](https://medium.com/@grizzbaier)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://twitter.com/grizzbaier](https://twitter.com/grizzbaier)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we left a few breadcrumbs to guide you on your continued
    journey with Kubernetes. You should have a solid set of production characteristics
    to get you started. There is a wide community in both the Docker and Kubernetes
    world. There are also a few additional resources we provided if you need a friendly
    face along the way.
  prefs: []
  type: TYPE_NORMAL
- en: By now, we have seen the full spectrum of container operations with Kubernetes.
    You should be more confident in how Kubernetes can streamline the management of
    your container deployments and how you can plan to move containers off the developer
    laptops and onto production servers.
  prefs: []
  type: TYPE_NORMAL
