- en: Chapter 1. Getting Started with C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will talk about the general state of the industry at the
    time when C# was first introduced, and some of the reasons that it is a great
    language. By the end of the chapter, you will have a fully working development
    environment that is ready to go through all of the examples in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Origins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As every comic book super hero has an origin story, so does every professional
    in every walk of life. Sharing origin stories with your colleagues is great because
    it can serve as a point of reflection about how things were in the past, how they
    have evolved, and where they may go in the future. My own personal story originated
    in high school in the late nineties, watching my brother, who was five years my
    elder and in college, learning C++. With a few arcane instructions, complex programs
    came to life and were ready for action. I was fascinated.
  prefs: []
  type: TYPE_NORMAL
- en: This first glimpse of power was just the beginning. Around the same time, a
    friend of mine in class started working on a game, again written in C++, in the
    style of the NES game, *The Legend of Zelda*. Although I had briefly peeked at
    old QBasic games such as *Gorillas* in the past, I was amazed at the quality that
    he was able to achieve in his small demo. I decided to start learning how to program
    in earnest, and seeing as everyone I knew was using C++, that was the default
    choice for my first programming language.
  prefs: []
  type: TYPE_NORMAL
- en: The first program I ever wrote was a very simple financial budgeting program.
    Having just recently started working at my first job in high school, I was keenly
    aware of the new responsibilities involved in the management of money, and so
    I wanted to write a program to help me better manage my funds. First, it asked
    for the amount of my paycheck in dollars, and then for a list of bills that I
    had to pay.
  prefs: []
  type: TYPE_NORMAL
- en: After a few basic calculations, it gave me a report of how much disposable income
    would remain after my responsibilities were taken care of. As far as programs
    go, it was not the most complex piece of software, but it helped me learn the
    basics, such as loops, conditional statements, storage of an indeterminate list
    of items, and performing aggregate operations on an array.
  prefs: []
  type: TYPE_NORMAL
- en: It was a great personal triumph, but after some initial exploration with C++,
    I found myself hitting a bit of a brick wall. C++ was difficult to fully grasp
    as someone brand new to programming (and in high school). Not only did I have
    to learn about the basics of software, but I had to be constantly aware of the
    memory that I was using. Eventually, I discovered the tools of web development
    which were, to me at the time, much simpler to understand. I had moved from one
    end of the complexity spectrum to the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Much of the software landscape at that time was dominated by computer languages
    that sat in one of three camps: low level system languages such as C++, which
    offered the most in terms of performance and flexibility, but were also difficult
    and complex to master; interpreted languages such as JavaScript and VBScript,
    whose instructions were evaluated at runtime, were very easy to use and learn,
    but could not match the performance of low level languages; and finally a group
    of languages that come somewhere in the middle.'
  prefs: []
  type: TYPE_NORMAL
- en: This middle of the road, which encompassed languages such as Java and Visual
    Basic, offered some of the best of both worlds, along with the worst of both worlds.
    In these languages you have a **garbage collector** , which means that when you
    create an object you do not have to explicitly release the used memory when you
    are done. They are also compiled to an intermediate language (for example, p-code
    for VB, and byte code for Java) which are then executed in a Virtual Machine running
    natively on the target platform. Because this intermediate language is similar
    to machine code, it is able to execute much faster than the purely interpreted
    languages. This performance, however, was still not really a match for a properly
    tuned C++ program, so Java and Visual Basic programs were often regarded as slow
    languages in comparison with C++.
  prefs: []
  type: TYPE_NORMAL
- en: Despite some of these drawbacks, the benefits of having a managed memory environment
    were evident to Microsoft. Because the programmer did not have to worry about
    complex concepts such as pointers and manual memory management, programs could
    be written faster and with fewer bugs. **Rapid Application Development** (**RAD**
    for short) seemed to be the future direction for Microsoft's platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In the late nineties, they developed a version of the Java Virtual Machine,
    which by many accounts was faster than some of the other implementations available
    on the market. Unfortunately due to their inclusion of some proprietary extensions,
    and the fact that they did not completely implement the Java 1.1 standard, they
    ran into some legal troubles in 1997\. This resulted ultimately in Microsoft discontinuing
    the development on their implementation of Java, and ultimately removing it from
    their platform in 2001.
  prefs: []
  type: TYPE_NORMAL
- en: Although it is impossible to know if what happened next was a direct result
    of the legal action against the Microsoft Java Virtual Machine, what we do know
    is that in 1999 Microsoft started working on a new programming language, which
    was named **Cool** (**C-like Object Oriented Language**).
  prefs: []
  type: TYPE_NORMAL
- en: C# is born
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'And then it happened; in 2000, Microsoft announced that they were working on
    a new programming language. The language which was originally called Cool, was
    unveiled at the Professional Developers Conference 2000 in Orlando, FL as **C#**.
    Some of the highlights of this new language are:'
  prefs: []
  type: TYPE_NORMAL
- en: It is based on the syntax of the C family of programming languages, so the syntax
    was very familiar for anyone who had experience with C++, Java, or JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory management of C# is similar to that of Java and Visual Basic, with a
    very powerful garbage collector. This meant that the users could focus on the
    content of their application, rather than worrying about boilerplate memory management
    code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C# compiler along with a static type system means that certain classes of
    bugs can be caught at compile time, rather than having to deal with them at runtime
    as you would in JavaScript. This is a **Just-In-Time** compiler, which means that
    the code would be compiled to a native executable at runtime, and optimized for
    the operating system that is executing the code. Performance is an important goal
    of the new platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This language has a strong and extensive **base class library**, which means
    that many pieces of functionality would be built right into the framework. Aside
    from some industry standard libraries such as Boost, there were not very many
    common C/C++ libraries, which resulted in people often rewriting common functionality.
    Java, on the other hand, had a great many libraries, but they were written by
    a diverse set of developers, which meant that consistency in functionality and
    style was a problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also has interoperability with other languages that worked on the **Common
    Language Runtime** (**CLR**). So a single program could use functionality written
    in different languages, thus using each language for what it was best at.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft submitted the specification to the ISO working group. This opened
    the door to a vibrant open source community around the framework, because it meant
    that there would always be a standard to work against. A popular open source implementation
    of the .NET Framework and C# called **Mono** lets you run your code on different
    platforms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although none of the elements described in this list were particularly new,
    C# aimed to take the best aspects of programming languages that came before, and
    incorporate them, namely the strength and power of C++, the simplicity of JavaScript,
    and the ease of hosting of VBScript/ASP, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: People coming from ANY language (C, C++, or Java) could be productive in C#
    with little effort. C# found the sweet spot where productivity, features, and
    the learning curve all intersected.
  prefs: []
  type: TYPE_NORMAL
- en: Over the next decade, the language would go on to evolve a very attractive set
    of features that make it easier and faster to write great programs. Now in its
    fifth iteration, the C# language has become more expressive and powerful with
    features, such as **Language Integrated Queries** (**LINQ**), **Task Parallel
    Library** (**TPL**), a **Dynamic Language Runtime** (**DLR**), and asynchronous
    programming features. What's more, with the Mono framework, you can not only target
    Windows, but also every other mainstream platform such as Linux, Mac OS, Android,
    iOS, and even game consoles such as the Playstation Vita.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you have been writing C# for the last decade, or are just picking it
    up now, this book will take you through all of the features of the latest version
    5.0\. We will also explore the evolution and history of C# so that you can understand
    why certain features developed the way they did, and how you can use them to their
    full potential.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin though, we need to configure your computer to be able to compile
    all of the samples. This chapter will guide you through installing everything
    you need to go through every example in this book.
  prefs: []
  type: TYPE_NORMAL
- en: The tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever you approach a new programming language, or a tool, there are several
    questions that you can ask yourself in order to quickly become proficient in that
    environment, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: How do you build a program, or otherwise prepare it for deployment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you debug a program? Quickly figuring out what the problem is, and where
    it is when there is one. This is just as important as writing the program in the
    first place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will review several tools that are available to
    you in order to get a development environment up and running on your local machine.
    These options vary across a number of different licensing terms and cost structures.
    No matter your situation or preferences, you will able to get a development environment
    up and running and you will be able to answer the previous questions by the end
    of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft provides the de facto compiler and development environment for the
    C# language. Although the compiler is available as a command-line executable since
    the first release of the .NET Framework, most developers will stay within the
    confines of Visual Studio, which is Microsoft's **Integrated Development Environment**
    (**IDE**).
  prefs: []
  type: TYPE_NORMAL
- en: Full versions of Visual Studio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft's full commercial offerings of Visual Studio come in several different
    versions, each with a cumulative number of features as you move up the ladder.
  prefs: []
  type: TYPE_NORMAL
- en: '**Professional**: This is the base commercial package. It allows you to build
    all available projects, in all available languages. In the context of C#, some
    of the project types available are ASP.NET WebForms, ASP.NET MVC, Windows 8 App,
    Windows Phone, Silverlight, Library, Console, along with a robust testing framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium**: In this version, all professional features are included, in addition
    to the code metrics, expanded testing tools, architecture diagramming, lab management,
    and project management features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ultimate**: This version includes code clone analysis, more testing tools
    (including Microsoft Fakes), and IntelliTrace, in addition to all the features
    of the previous levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out these versions at [http://www.microsoft.com/visualstudio/11/enus/products/visualstudio](http://www.microsoft.com/visualstudio/11/enus/products/visualstudio).
  prefs: []
  type: TYPE_NORMAL
- en: Licensing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several different options for licensing the full version of Visual
    Studio.
  prefs: []
  type: TYPE_NORMAL
- en: '**MSDN Subscription**: The Microsoft Developer Network provides a subscription
    service where you can pay an annual fee to gain access to versions of Visual Studio.
    Additionally, you can get an MSDN Subscription as part of Microsoft''s MVP program,
    which rewards the active community members in the development community. You can
    find more information about purchasing an MSDN Subscription at [https://msdn.microsoft.com/en-us/subscriptions/buy/buy.aspx](https://msdn.microsoft.com/en-us/subscriptions/buy/buy.aspx).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BizSpark**: If you are creating a startup, Microsoft offers the BizSpark
    program to give you access to Microsoft software (including Visual Studio) at
    no cost for three years. After your graduation date, you keep the licenses that
    you''ve downloaded over the course of the program, and get discounts on MSDN Subscriptions,
    in addition to other alumni benefits. BizSpark is a great option for any entrepreneur
    that wants to use the Microsoft technology stack. Find out if you qualify for
    the BizSpark program at [http://www.microsoft.com/bizspark](http://www.microsoft.com/bizspark).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DreamSpark**: Students can enroll in the DreamSpark program, which lets you
    download Visual Studio Professional (in addition to other applications and servers).
    As long as you are a student in a valid academic institution, you will have access
    to everything you need to develop applications using C#.Students. Sign up today
    at [https://www.dreamspark.com/](https://www.dreamspark.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Individual and Volume licensing**: If none of the previous options for the
    commercial version of Visual Studio are appropriate, then you can always purchase
    licenses directly from Microsoft or various resellers at [http://www.microsoft.com/visualstudio/en-us/buy/small-midsize-business](http://www.microsoft.com/visualstudio/en-us/buy/small-midsize-business).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Express
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Visual Studio Express** product line is a nearly fully featured version
    of Visual Studio that is free of cost. Anyone can download these products and
    begin learning and developing at no charge.
  prefs: []
  type: TYPE_NORMAL
- en: 'The available versions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Express 2012 for Windows 8**: This is for creating Metro style
    applications for Windows 8'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Express 2012 for Windows Phone**: This lets you write programs
    for Microsoft''s Windows Phone devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Express 2012 for Web**: All web applications can be built using
    this version of Visual Studio, from ASP.NET (forms and MVC), to Azure hosted projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Express 2012 for Desktop**: Applications that target the *classic*
    Windows 8 Desktop environment can be built with this version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s a common misconception that Visual Studio Express may only be used for
    non-commercial projects, but this is not the case. You are entirely free to develop
    and release a commercial product while still adhering to the EULA. The only limitations
    are technical, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Express versions of Visual Studio are limited by vertical stack, meaning you
    have to install a separate product for each project type that is supported (Web,
    desktop, phone, and so on). This is hardly a huge limitation though, and would
    only be a burden in the most complex of solutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no plugins. There are many productivity enhancing plugins that are
    available for the full version of Visual Studio, so for some users this exclusion
    can be a big deal. However, the good news is that one of the most popular plugins
    in recent memory, **NuGet**, is now being shipped with all versions of Visual
    Studio 2012\. NuGet helps you manage your project's library dependencies. You
    can browse through the NuGet catalog and add open source third-party libraries,
    in addition to libraries from Microsoft.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The express versions of Visual Studio can be downloaded from [http://www.microsoft.com/visualstudio/11/en-us/products/express](http://www.microsoft.com/visualstudio/11/en-us/products/express).
  prefs: []
  type: TYPE_NORMAL
- en: Using Visual Studio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Regardless of which version of Visual Studio you decide to use, getting started
    is very simple once the product has been installed. The following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Visual Studio, or if you are using Express, launch Visual Studio Express
    for Desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new project by clicking on **File** | **New Project…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Console Application** from **Installed** | **Templates** | **Visual
    C#**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the project a name such as `program`, and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a line of code in the `Main` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Run the program by choosing **Debug** | **Run without Debugger**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the expected **Hello World** output and you are now ready to start
    using Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line compiler
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you prefer to work at a lower level than with an IDE like Visual Studio,
    you can always opt to simply use the command-line compiler directly. Microsoft
    provides everything you need to compile C# code entirely for free by downloading
    and installing the .NET 4.5 Redistributable package from [http://www.microsoft.com/en-us/download/details.aspx?id=8483](http://www.microsoft.com/en-us/download/details.aspx?id=8483).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that''s downloaded and installed, you can find the compiler at `C:\windows\microsoft.net\Framework\v4.0.30319\csc.exe`,
    assuming you maintain all of the default installation options:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the .NET 4.5 version of the .NET Framework will actually replace the
    4.0 framework if you have that installed. That's why the path mentioned previously
    shows as `v4.0.30319`. You won't be the first person confused by versions in the
    .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'A small tip that will make working with the command-line compiler much easier
    is to simply add it to the environment''s `Path` variable. If you''re using PowerShell
    (which I highly encourage), you can easily do so by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That makes it so you can just type `csc` instead of the whole path. Usage of
    the command-line compiler is very simple, take the following class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this class as a file named `program.cs` using your favorite text editor.
    Once saved, you can compile it from the command line using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce an executable file named `ch1_hello.exe`, which when executed,
    will produce a familiar greeting as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, `csc` will output an executable file. However, you can also produce
    libraries using the target argument. Consider the following class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This class encapsulates the functionality of the previous program, and even
    makes it reusable by letting you define the name to be greeted. Although this
    is a somewhat trite example, the point is to show how to create a `.dll` file
    that you can use from multiple programs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'An assembly named `ch1_greeter.dll` will be generated, which you can then use
    from a slightly modified version of the previous program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you try to compile the previous program just as you did before, the compiler
    will rightly complain about not knowing anything about the `Greeter` class as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Any time you have an error in your programs, it will be shown in the output,
    along with information about the file it was found in, and the line, so you can
    find it easily. In order for this to work, you will have to tell the compiler
    to use the `ch1_greeter.dll` file that you created using the `/r:` argument as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: And now when you run the resulting `ch1_greeter_program.exe` program, you will
    see the output say, **Hello, Componentized World**.
  prefs: []
  type: TYPE_NORMAL
- en: Though most developers will not use the command-line compiler directly these
    days, it is good to know that it is available and also how to use it, especially
    if you have to support advanced scenarios such as merging multiple modules into
    a single assembly.
  prefs: []
  type: TYPE_NORMAL
- en: SharpDevelop
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you launch SharpDevelop, the tagline on the loading screen, **The Open
    Source .NET IDE**, is a concise description. since the very early days of the
    .NET Framework, it provided developers a free option for writing C# before Microsoft
    shipped the Express versions. Since that time, it has continued to mature, and
    add features, and as of version 4.2, SharpDevelop supports targeting the .NET
    4.5, and more specifically, compilation and debugging of C# 5.0\. Although Visual
    Studio Express is a compelling option, the lack of source control plugins can
    be a deal breaker for some users. Thankfully, SharpDevelop will gladly let you
    integrate with a source control server in the IDE. Additionally, some of the more
    niche project types such as creating Windows Services (one of the few project
    types not supported by Express) are fully supported with SharpDevelop.
  prefs: []
  type: TYPE_NORMAL
- en: Projects use the same format (`.sln`, `.csproj`) as Visual Studio, so project
    portability is high. You can usually take a project written in Visual Studio and
    open it in SharpDevelop.
  prefs: []
  type: TYPE_NORMAL
- en: Download the application from [http://www.icsharpcode.net/OpenSource/SD/](http://www.icsharpcode.net/OpenSource/SD/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation is straightforward, and you can verify correct installation by
    creating the following sample program:'
  prefs: []
  type: TYPE_NORMAL
- en: Start SharpDevelop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new project by clicking on **File** | **New** | **Solution**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Console Application** from **C#** | **Windows Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the project a name such as `program`, and click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the project node in the **Projects** window, and choose the **Properties**
    menu item; check the **Compiling** tab to see if the **Target Framework** says
    **.NET Framework 4.0 Client Profile**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it does, then simply click on the **Change** button, select **.NET Framework
    4.5** in the **Change Target Framework** drop-down menu, and finally click on
    the **Convert** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the program by choosing **Debug** | **Run without Debugger**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the expected **Hello World** output.
  prefs: []
  type: TYPE_NORMAL
- en: MonoDevelop
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **Mono** framework is an open source version of the Common Language Runtime
    and C#. It has had over a decade of active development, and as a result, is very
    mature and stable. There are versions of Mono for just about any platform you
    might be interested in developing for Windows, OS X, Unix/Linux, Android, iOS,
    PlayStation Vita, Wii, and Xbox 360.
  prefs: []
  type: TYPE_NORMAL
- en: MonoDevelop is based on SharpDevelop, but was forked some time ago to specifically
    act as a development environment for Mono that would run on multiple platforms.
    It runs on Windows, OS X, Ubuntu, Debian, SLE, and openSUSE; so, as a developer,
    you can truly choose what platform you want to work on.
  prefs: []
  type: TYPE_NORMAL
- en: You can get started by installing the Mono Development Kit 2.11 or higher from
    [http://www.go-mono.com/mono-downloads/download.html](http://www.go-mono.com/mono-downloads/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have installed that for your platform, you can go ahead and install
    the latest version of MonoDevelop from [http://monodevelop.com/](http://monodevelop.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the C# 5.0 compiler is but a few short steps away:'
  prefs: []
  type: TYPE_NORMAL
- en: Start MonoDevelop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new project by clicking on **File** | **New** | **Solution…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Console Application** from the **C#** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the project a name such as `program`, and click on **Forward**, then on
    **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the project node in the **Solution** window, and choose the **Options**
    menu item. Now go to **Build** | **General** to see if the **Target Framework**
    says **Mono / .NET 4.0**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it does, then simply choose **.NET Framework 4.5** from the dropdown and
    click on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the program by choosing **Run** | **Start without Debugging**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all goes well, you will see a terminal window (if running on OS X, for example)
    with the **Hello World** text.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it was introduced, C# came as a breath of fresh air at just the right time.
    It is a modern object oriented language, which takes the best qualities of many
    that came before it. Low-level power with just-in-time compilation, the simplicity
    of a garbage collected environment, and the flexibility of runtime that allows
    for easy interoperability with other languages, not to mention a great base class
    library, thriving open source community, and the ability to target multiple platforms
    make C# a compelling option.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we discussed setting up your development environment and downloading
    all of the relevant tools and runtimes:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio, both commercial and free options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command line, useful for plugging directly into automated tools that use shell
    commands.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SharpDevelop, an open source alternative to Visual Studio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MonoDevelop, the official IDE of the open source implementation of the .NET
    Framework and C#. This allows you to target multiple platforms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have chosen a preferred development environment, and followed the steps
    detailed in this chapter, you will be ready to go through the rest of the book
    and all of the samples contained therein.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about the evolution of the language, which,
    in turn, will help you understand the feature that was introduced along the way
    and contributes to where we stand today with C# 5.0.
  prefs: []
  type: TYPE_NORMAL
