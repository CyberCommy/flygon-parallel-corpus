- en: Chapter 7. Scanning Large Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter shows you how to do some things that in many situations might be
    illegal, unethical, a violation of the terms of service, or just not a good idea.
    It is provided here to give you information that may be of use to protect yourself
    against threats and make your own system more secure. Before following these instructions,
    be sure you are on the right side of the legal and ethical line... use your powers
    for good!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Scanning an IP address range
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading targets from a text file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning random targets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skipping tests to speed up long scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the correct timing template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting timing parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting performance parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting signatures of web servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributing a scan among several clients by using Dnmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the things I like the most about Nmap is its stability and how customizable
    it is when scanning large networks. Nmap can be used to scan millions of IPs in
    a single run with incredible efficiency. We just need to be careful to understand
    and adjust the variables that can affect performance, and really think about our
    scan objectives beforehand.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers the most important aspects that one needs to consider when
    scanning large networks. We start by introducing basic tasks such as reading target
    lists, selecting the correct timing template, generating random targets, and skipping
    phases to save time. The advanced tasks covered in this chapter include an overview
    of the timing and performance arguments available in Nmap, and how to use them
    correctly. I will also show you how to collect HTTP headers from the Internet
    for analysis, such as the popular service "ShodanHQ", but using only Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I cover a non-official tool named Dnmap that helps us distribute Nmap
    scans among several clients, allowing us to save time and take advantage of extra
    bandwidth and CPU resources.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning an IP address range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very often, penetration testers and system administrators need to scan not a
    single machine but a range of hosts. Nmap supports IP address ranges in different
    formats, and it is essential that we know how to deal with them.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to work with IP address ranges when scanning with Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively you can use any of the following notations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap supports several target formats. The most common type is when we specify
    the target's IP or host, but it also supports the reading of targets from files,
    ranges, and we can even generate a list of random targets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any arguments that are not valid options are read as targets by Nmap. This
    means that we can tell Nmap to scan more than one range in a single command, as
    shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three ways that we can handle IP ranges in Nmap:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiple host specification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Octet range addressing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CIDR notation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To scan the IP addresses `192.168.1.1`, `192.168.1.2`, and `192.168.1.3`, the
    following command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also specify octet ranges by using the character "-". For example, to
    scan the hosts `192.168.1.1`, `192.168.1.2`, and `192.168.1.3`, we could use the
    expression `192.168.1.1-3` as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The CIDR notation can also be used when specifying targets. The CIDR notation
    consists of an IP address and a suffix. The most common network suffixes used
    are /8, /16, /24, and /32\. To scan the 256 hosts in `192.168.1.0-255` using the
    CIDR notation, the following command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Additionally, you may exclude the hosts from the ranges by specifying the parameter
    the `--exclude` option as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can write your exclusion list in a file and read it with`--exclude-file`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: CIDR notation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Classless Inter Domain Routing (CIDR)** notation (pronounced as "cider")
    is a compact method for specifying IP addresses and their routing suffixes. This
    notation gained popularity due to its granularity when compared to classful addressing
    because it allows subnet masks of variable length.
  prefs: []
  type: TYPE_NORMAL
- en: The CIDR notation is specified by an IP address and network suffix. The network
    or IP suffix represents the number of network bits. IPv4 addresses are 32 bit,
    so the network can be between 0 and 32\. The most common suffixes are /8, /16,
    /24, and /32.
  prefs: []
  type: TYPE_NORMAL
- en: 'To visualize it, take a look at the following CIDR-to-Netmask conversion table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| CIDR | Netmask |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| /8 | 255.0.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| /16 | 255.255.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| /24 | 255.255.255.0 |'
  prefs: []
  type: TYPE_TB
- en: '| /32 | 255.255.255.255 |'
  prefs: []
  type: TYPE_TB
- en: For example, 192.168.1.0/24 represents the 256 IP addresses from 192.168.1.0
    to 192.168.1.255\. And 50.116.1.121/8 represents all the IP addresses between
    50.0-255.0-255.0-255\. The network suffix /32 is also valid and represents a single
    IP.
  prefs: []
  type: TYPE_NORMAL
- en: Privileged versus unprivileged
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Running `nmap <TARGET>` as a privileged user launches a **SYN Stealth Scan**.
    For unprivileged accounts that can't create raw packets, a **TCP Connect Scan**
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between these two is that a TCP Connect Scan uses the high-level
    system call `connect` to obtain information about the port state. This means that
    each TCP connection is fully completed, and therefore is slower and more likely
    to be detected and recorded in system logs. SYN Stealth Scans use raw packets
    to send specially-crafted TCP packets to detect port states that are more reliable.
  prefs: []
  type: TYPE_NORMAL
- en: Port states
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap categorizes ports by using the following states:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open**: This state indicates that an application is listening for connections
    on this port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closed**: This state indicates that the probes were received but there is
    no application listening on this port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filtered**: This state indicates that the probes were not received and the
    state could not be established. It also indicates that the probes are being dropped
    by some kind of filtering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unfiltered**: This state indicates that the probes were received but a state
    could not be established.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open/Filtered**: This state indicates that Nmap cannot establish the state
    if the port is filtered or open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closed/Filtered**: This state indicates that Nmap cannot establish the state
    if the port is filtered or closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port scanning techniques
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nmap supports a vast number of port scanning techniques. Use `nmap -h` for a
    complete list.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Reading targets from a text file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning random targets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting the correct timing template* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing open ports of a remote host* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning using specific port ranges* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Distributing a scan among several clients by using Dnmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading targets from a text file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes we need to work with multiple hosts and perform more than one scan,
    but having to type a list of targets in the command line with each scan is not
    very practical. Fortunately, Nmap supports the loading of targets from an external
    file.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to scan the targets loaded from an external file by using
    Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the list of targets into a text file, each separated by a new line, tab,
    or space(s):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To load the targets from the file `targets.txt`, the following command can
    be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This feature can be combined with any scan option or method, except for exclusion
    rules set by `--exclude` or `--exclude-file`. The option flags `--exclude` and
    `--exclude-file` will be ignored when `-iL` is used.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The arguments `-iL <filename>` tell Nmap to load the targets from the file `filename`.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap supports several formats in the input file. The target list contained in
    the input file may be separated either by spaces, tabs, or newlines. Any exclusions
    should be reflected in the input target file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also use different target formats in the same file. In the following
    file, we specify an IP address and an IP range:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Target files may contain comments by using the character "#":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: CIDR notation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Classless Inter Domain Routing** **(CIDR)** notation (pronounced as "cider")
    is a compact method for specifying IP addresses and their routing suffixes. This
    notation gained popularity due to its granularity when compared to classful addressing
    because it allows subnet masks of variable length.
  prefs: []
  type: TYPE_NORMAL
- en: The CIDR notation is specified by an IP address and network suffix. The network
    or IP suffix represents the number of network bits. IPv4 addresses are 32 bit,
    so the network can be between 0 and 32\. The most common suffixes are /8, /16,
    /24, and /32.
  prefs: []
  type: TYPE_NORMAL
- en: 'To visualize it, take a look at the following CIDR-to-Netmask conversion table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| CIDR | Netmask |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| /8 | 255.0.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| /16 | 255.255.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| /24 | 255.255.255.0 |'
  prefs: []
  type: TYPE_TB
- en: '| /32 | 255.255.255.255 |'
  prefs: []
  type: TYPE_TB
- en: For example, 192.168.1.0/24 represents the 256 IP addresses from 192.168.1.0
    to 192.168.1.255\. And 50.116.1.121/8 represents all the IP addresses between
    50.0-255.0-255.0-255\. The network suffix /32 is also valid and represents a single
    IP.
  prefs: []
  type: TYPE_NORMAL
- en: Excluding a host list from your scans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap also supports the argument `--exclude-file <filename>` to exclude the
    targets listed in `<filename>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Scanning random targets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Excluding hosts from your scans* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running NSE scripts* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap Fundamentals"),
    *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP address* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe in [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting signatures of web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Distributing a scan among several clients by using Dnmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning random targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap supports a very interesting feature that allows us to run scans against
    random targets on the Internet. This is very useful when conducting research that
    needs a sample of random hosts.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to generate random hosts as targets of your Nmap scans.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To generate a random target list of 100 hosts, use the following Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Nmap will generate a list of 100 external IP addresses and scan them using
    the specified options. Let''s combine this option with a ping scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-iR 100` tells Nmap to generate 100 external IP addresses and
    use them as targets in the specified scan. This target assignment can be used
    with any combination of scan flags.
  prefs: []
  type: TYPE_NORMAL
- en: While this is a useful feature for conducting Internet research, I recommend
    you be careful with this flag. Nmap does not have control over the external IP
    addresses it generates; this means that inside the generated list could be a critical
    machine that is being heavily monitored. To avoid getting into trouble, use this
    feature wisely.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To tell Nmap to generate an unlimited number of IPs and hence run indefinitely,
    set the argument `-iR` to `0` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to find random NFS shares online, you could use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Legal issues with port scanning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Port scanning without permission is not very welcome, and is even illegal in
    some countries. I recommend you research your local laws to find out what you
    are permitted to do and if port scanning is frowned upon in your country. You
    also need to consult with your ISP as they may have their own rules on the subject.
  prefs: []
  type: TYPE_NORMAL
- en: The official documentation of Nmap has an amazing write-up about the legal issues
    involved with port scanning, available at [http://nmap.org/book/legal-issues.html](http://nmap.org/book/legal-issues.html).
    I recommend that everyone reads it.
  prefs: []
  type: TYPE_NORMAL
- en: Target library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The argument `--script-args=newtargets` forces Nmap to use these new-found
    hosts as targets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note how we did not specify a target, but the `newtargets` argument added the
    IPs `192.168.1.106` and `192.168.1.105` to the scanning queue anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 'The argument `max-newtargets` sets the maximum number of hosts to be allowed
    to be added to the scanning queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Scanning an IP address range* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Geo-locating an IP address* recipe in [Chapter 3](ch03.html "Chapter 3. Gathering
    Additional Host Information"), *Gathering Additional Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting information from WHOIS records* recipe in [Chapter 3](ch03.html
    "Chapter 3. Gathering Additional Host Information"), *Gathering Additional Host
    Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reading targets from a text file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reporting vulnerability checks recipe* in [Chapter 8](ch08.html "Chapter 8. Generating
    Scan Reports"), Generating *Scan Reports*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting signatures of web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Distributing a scan among several clients by using Dnmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skipping tests to speed up long scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap scans break down into different phases. When we are working with a large
    list of hosts, we can save up time by skipping tests that return information we
    don't need. By carefully selecting our scan flags, we can significantly improve
    the performance of our scans.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains the process that takes place behind the curtains when scanning,
    and how to skip certain phases in order to speed up long scans.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform a full port scan with the timing template set to aggressive, and
    without the reverse DNS resolution or ping, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The command we just used gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Compare the running time that we got against a full port scan with default
    arguments, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The command we just used gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This time difference really adds up when you work with a large number of hosts.
    I recommend that you think about your objectives and determine the information
    you need, in order to consider the possibility of skipping some scanning phases.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nmap scans are divided in several phases. Some of them require some arguments
    to be set in order to run, but others, such as the reverse DNS resolution, are
    executed by default. Let''s review the phases that can be skipped, and their corresponding
    Nmap flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Target enumeration**: In this phase Nmap parses the target list. This phase
    can''t exactly be skipped, but you can save DNS forward lookups by using only
    the IP addresses as targets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host discovery**: This is the phase, where Nmap establishes if the targets
    are online and in the network. By default, Nmap performs an ICMP echo request
    ping for external hosts, but it supports several methods and different combinations.
    To skip the host discovery phase (no ping) use the flag `-Pn`. Let''s see the
    packet trace of scans with and without `-Pn`, using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The command we just used gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'For scanning without skipping host discovery we have the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Reverse DNS resolution**: Nmap performs reverse DNS lookups, as often hostnames
    may reveal additional information, such as the hostname `mail.company.com`. This
    step can be skipped by adding the argument `-n` to your scan arguments. Let''s
    see the traffic generated by the two scans with and without reverse DNS resolution,
    using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The command we just used gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'For scanning without skipping reverse DNS resolution we have the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This command gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**Port scanning**: In this phase, Nmap determines the state of the ports. By
    default it uses SYN scanning, but several port scanning techniques are supported.
    This phase can be skipped with the argument `-sn`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, we can see that an ICMP echo request and a reverse
    DNS lookup were performed, but no port scanning was done.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I recommend that you also run a couple of test scans to measure the speeds
    of the different DNS servers, if you plan on performing reverse DNS lookups. I''ve
    found that ISPs tend to have the slowest DNS servers, but you can set your DNS
    server by specifying the argument `--dns-servers`. To use Google''s DNS servers,
    use the argument `--dns-servers 8.8.8.8,8.8.4.4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You can test your DNS server speed by comparing the scan times. The following
    command tells Nmap to not ping or scan the port, and only perform a reverse DNS
    lookup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Scanning phases of Nmap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap scans are divided into the following phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Script pre-scanning**: This phase is only executed when you use the options
    `-sC` or `--script`, and it attempts to retrieve additional host information via
    a collection of NSE scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target enumeration**: In this phase, Nmap parses the target(s) and resolves
    it into an IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host discovery**: This is the phase where Nmap determines if the target(s)
    is online and in the network by performing the specified host discovery technique(s).
    The option `-Pn` can be used to skip this phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reverse DNS resolution**: In this phase, Nmap performs a reverse DNS lookup
    to obtain a hostname for each target. The argument `-R` can be used to force DNS
    resolution, and the argument`-n` can be used to skip it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port scanning**: During this phase, Nmap determines the state of the ports.
    It can be skipped by using the argument `-sn`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version detection**: This phase is in charge of detecting the advanced version
    for the ports that were found open. It is only executed when the argument `-sV`
    is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS detection**: In this phase, Nmap attempts to determine the operating system
    of the target. It is only executed when the option `-O` is present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traceroute**: In this phase Nmap performs a traceroute to the targets. This
    phase only runs when the option `--traceroute` is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Script scanning**: In this phase, the NSE scripts are run depending on their
    execution rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Output**: In this phase, Nmap formats all of the gathered information and
    returns it to the user in the specified format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Script post-scanning**: In this phase, the NSE scripts with post-scan execution
    rules are evaluated and given a chance to run. If there are no post-scan NSE scripts
    in the default category, this phase will be skipped, unless the argument `--script`
    is specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Nmap scans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If something unexpected happens during an Nmap scan, turn on the debugging
    to get additional information. Nmap uses the flag `-d` for the debugging level,
    and you can set any integer between `0` and `9`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Aggressive detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap has a special flag to activate aggressive detection `-A`. An aggressive
    mode enables OS detection (`-O`), version detection (`-sV`), script scanning (`-sC`),
    and traceroute (`--traceroute`). Needless to say this mode sends a lot more probes
    and is more likely to be detected, but provides a lot of valuable host information.
    We can use one of the following commands for the aggressive mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Scanning an IP address range* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reading targets from a text file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Excluding a host list from your scan* section in the *Reading targets from
    a text file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting the correct timing template* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting timing parameters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting performance parameters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Distributing a scan among several clients by using Dnmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the correct timing template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap includes six templates that set different timing and performance arguments
    to optimize your scans. Even though Nmap automatically adjusts some of these values,
    it is recommended that you set the correct timing template to hint Nmap with a
    provide as to the speed of your network connection and the target's response time.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe will teach you about Nmap's timing templates and how to
    choose the correct one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and type the following command to use the "aggressive" timing
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: You may use the integers between `0` and `5`, for example `-T[0-5]`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The option `-T` is used to set the timing template in Nmap. Nmap provides six
    timing templates to help users tune some of the timing and performance arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The available timing templates and their initial configuration values are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Paranoid** (`-0`): This template is useful for avoiding detection systems,
    but it is painfully slow because only one port is scanned at a time, and the timeout
    between probes is 5 minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**Sneaky** (`-1`): This template is useful for avoiding detection systems but
    is still very slow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**Polite** (`-2`): This template is used when scanning is not supposed to interfere
    with the target system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '**Normal** (`-3`): This is Nmap''s default timing template, which is used when
    the argument `-T` is not set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '**Aggressive** (`-4`): This is the recommended timing template for broadband
    and Ethernet connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**Insane** (`-5`): This timing template sacrifices accuracy for speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Interactive mode in Nmap allows users to press keys to dynamically change the
    runtime variables. Although the discussion of including timing and performance
    options in interactive mode has come up a few times in the development mailing
    list, when this book was being written, there weren't any official patches available.
    However, there is an experimental patch, which was submitted in June 2012, that
    allows you to change the values of `--max-rate` and `--min-rate` dynamically.
    If you would like to try it out, it's located at [http://seclists.org/nmap-dev/2012/q2/883](http://seclists.org/nmap-dev/2012/q2/883).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting timing parameters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting signatures of web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Distributing a scan among several clients by using Dnmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting timing parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap not only adjusts itself to different network and target conditions while
    scanning, but it also supports several timing parameters, which can be tuned to
    improve performance.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe describes the timing parameters supported by Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following command to adjust the corresponding values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap supports different timing arguments that can be tuned to improve performance.
    It is important to note that setting these values incorrectly will most likely
    hurt performance rather than improving it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The RTT value is used by Nmap to know when to give up or retransmit a probe
    response. Nmap tries to determine the correct values by analyzing previous responses,
    but you can set the initial RTT timeout with the argument `--initial-rtt-timeout`,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally you can set the minimum and maximum RTT timeout values by setting
    `--min-rtt-timeout` and `--max-rtt-timeout` respectively, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Another very important setting we can control in Nmap is the waiting time between
    probes. Use the arguments `--scan-delay` and `--max-scan-delay` to set the waiting
    time and maximum amount of time allowed to wait between probes respectively, as
    shown in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Note that the arguments previously shown are very useful when avoiding detection
    mechanisms. Be careful not to set `--max-scan-delay` too low because it will most
    likely miss the ports that are open.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you would like Nmap to quit a scan after a certain amount of time, you can
    set the argument `--host-timeout` as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The command that we just used gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'To use Nping to estimate the round trip time taken between the target and you,
    the following command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: This will make Nping send 30 ICMP echo request packets, and after it finishes,
    it will show the average, minimum, and maximum RTT values obtained.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Examine the round trip times and use the maximum to set the correct `--initial-rtt-timeout`
    and `--max-rtt-timeout` values. The official documentation recommends using double
    the maximum RTT value for the `--initial-rtt-timeout`, and as high as four times
    the maximum round time value for the `–max-rtt-timeout`.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning phases of Nmap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap scans are divided into the following phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Script pre-scanning**: This phase is only executed when you use the options
    `-sC` or `--script`, and it attempts to retrieve additional host information via
    a collection of NSE scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target enumeration**: In this phase, Nmap parses the target(s) and resolves
    it into an IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host discovery**: This is the phase where Nmap determines if the target(s)
    is online and in the network by performing the specified host discovery technique(s).
    The option `-Pn` can be used to skip this phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reverse DNS resolution**: In this phase, Nmap performs a reverse DNS lookup
    to obtain a hostname for each target. The argument `-R` can be used to force DNS
    resolution, and the argument `-n` can be used to skip it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port scanning**: During this phase, Nmap determines the state of the ports.
    It can be skipped by using the argument `-sn`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version detection**: This phase is in charge of detecting the advanced version
    for the ports that were found open. It is only executed when the argument `-sV`
    is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS detection**: In this phase, Nmap attempts to determine the operating system
    of the target. It is only executed when the option `-O` is present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traceroute**: In this phase, Nmap performs a traceroute to the targets. This
    phase only runs when the option `--traceroute` is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Script scanning**: In this phase, the NSE scripts are run depending on their
    execution rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Output**: In this phase, Nmap formats all of the gathered information, and
    returns it to the user in the specified format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Script post-scanning**: In this phase, NSE scripts with post-scan execution
    rules are evaluated and given a chance to run. If there are no post-scan NSE scripts
    in the default category, this phase will be skipped unless the argument `--script`
    is specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Nmap scans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If something unexpected happens during an Nmap scan, turn on the debugging
    to get additional information. Nmap uses the flag `-d` for the debugging level
    and you can set any integer between `0` and `9`, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Scanning random targets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting the correct timing template* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting performance parameters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting signatures of web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Distributing a scan among several clients by using Dnmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting performance parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap not only adjusts itself to different network and target conditions while
    scanning, but it also supports several parameters that affect the behavior of
    Nmap, such as the number of hosts scanned concurrently, number of retries, and
    number of allowed probes. Learning how to adjust these parameters properly will
    save you a lot of scanning time in your life.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe explains the Nmap parameters that can be adjusted to improve
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following command, adjusting the values according to your needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The command shown previously tells Nmap to scan and report by grouping no less
    than 100 (`--min-hostgroup 100`) and no more than 500 hosts (`--max-hostgroup
    500`). It also tells Nmap to retry only twice before giving up on any port (`--max-retries
    2`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: It is important to note that setting these values incorrectly will most likely
    hurt the performance or accuracy rather than improving it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nmap sends many probes during its port scanning phase due to the ambiguity,
    or a lack of, a response; either the packet got lost, the service is filtered,
    or the service is not open. By default Nmap adjusts the number of retries based
    on the network conditions, but you can set this value manually by specifying the
    argument `--max-retries`. By increasing the number of retries, we can improve
    Nmap''s accuracy, but keep in mind that we also sacrifice speed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The arguments `--min-hostgroup` and `--max-hostgroup` control the number of
    hosts that we probe concurrently. Keep in mind that reports are also generated
    based on this value, so adjust it depending on how often would you like to see
    the scan results. Larger groups are preferred and improve performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also a very important argument that can be used to limit the number
    of packets sent per second by Nmap. The arguments `--min-rate` and `--max-rate`
    need to be used carefully to avoid undesirable effects. These rates are set automatically
    by Nmap if the arguments are not present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the arguments `--min-parallelism` and `--max-parallelism` can be used
    to control the number of probes for a host group. By setting these arguments,
    Nmap will no longer adjust the values dynamically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you would like Nmap to quit a scan after a certain amount of time, you can
    set the argument `--host-timeout`, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Interactive mode in Nmap allows users to press keys to dynamically change the
    runtime variables, but when this book was being written, there weren't any official
    patches available. However, there is an experimental patch, which was submitted
    in June 2012, that allows you to change the values of `--max-rate` and `--min-rate`
    dynamically. You can find this patch at [http://seclists.org/nmap-dev/2012/q2/883](http://seclists.org/nmap-dev/2012/q2/883).
  prefs: []
  type: TYPE_NORMAL
- en: Scanning phases of Nmap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap scans are divided into the following phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Script pre-scanning**: This phase is only executed when you use the options
    `-sC` or `--script`, and it attempts to retrieve additional host information via
    a collection of NSE scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target enumeration**: In this phase Nmap parses the target(s) and resolves
    it into an IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host discovery**: This is the phase where Nmap determines if the target(s)
    is on-line and in the network by performing the specified host discovery technique(s).
    The option `-Pn` can be used to skip this phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reverse DNS resolution**: In this phase, Nmap performs a reverse DNS lookup
    to obtain a hostname for each target. The argument `-R` can be used to force DNS
    resolution, and the argument `-n` can be used to skip it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port scanning**: During this phase, Nmap determines the state of the ports.
    It can be skipped by using the argument `-sn`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version detection**: This phase is in charge of detecting the advanced version
    for the ports that were found open. It is only executed when the argument `-sV`
    is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS detection**: In this phase, Nmap attempts to determine the operating system
    of the target. It is only executed when the option `-O` is present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traceroute**: In this phase, Nmap performs a traceroute to the targets. This
    phase only runs when the option `--traceroute` is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Script scanning**: In this phase, the NSE scripts are run depending on their
    execution rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Output**: In this phase, Nmap formats all the gathered information, and returns
    it to the user in the specified format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Script post-scanning**: In this phase, NSE scripts with post-scan execution
    rules are evaluated and given a chance to run. If there are no post-scan NSE scripts
    in the default category, this phase will be skipped unless the argument `--script`is
    specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Nmap scans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If something unexpected happens during an Nmap scan, turn on the debugging
    to get additional information. Nmap uses the flag `-d` for debugging level, and
    you can set any integer between `0` and `9`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Scanning random targets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting the correct timing template* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting timing parameters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting signatures of web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Distributing a scan among several clients by using Dnmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting signatures of web servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap is a de facto tool for information gathering, and the variety of tasks
    that can be done with the Nmap Scripting Engine is simply remarkable. The popular
    service "ShodanHQ" ([http://shodanhq.com](http://shodanhq.com)) offers a database
    of HTTP banners, which is useful for analyzing the impact of vulnerabilities.
    Its users can find out the number of devices that are online, by country, which
    are identified by their service banners. ShodanHQ uses its own built-in house
    tools to gather its data, but Nmap is also perfect for this task.
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipe, we will see how to scan indefinitely for web servers,
    and collect their HTTP headers by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will launch an instance of Nmap that will run indefinitely, looking
    for web servers in port 80, and then save the output to `output.xml`. Each host
    that has port 80 open will return something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following command will tell Nmap to only check port 80 (`-p80`), without
    ping (`-Pn`), without reverse DNS resolution (`-n`), and using the aggressive
    timing template (`-T4`). If port 80 is open, Nmap will run the NSE scripts `http-title`
    and `http-headers` (`--script http-headers,http-title`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The script arguments that are passed are used to set the HTTP User Agent in
    the requests (`--script-args http.useragent="A friendly web crawler [http://someurl.com]"`)
    and use a `GET` request to retrieve the HTTP headers (`--script-args http-headers.useget`).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the arguments `-iR 0` tell Nmap to generate external IP addresses indefinitely,
    and save the results in a file in XML format (`-oX random-webservers.xml`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap's HTTP library has cache support, but if you are planning to scan a large
    number of hosts, there is something that you should consider. The cache is stored
    in a temporary file that grows with each new request. If this file starts to get
    too big, cache lookups start to take a considerable amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can disable the cache system of the HTTP library by setting the library
    argument `http-max-cache-size=0`, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests using Nmap''s
    default HTTP User Agent. You can use a different HTTP User Agent by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Scanning an IP address range* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reading targets from a text file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning random targets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting the correct timing template* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting timing parameters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting performance parameters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Distributing a scan among several clients by using Dnmap* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributing a scan among several clients using Dnmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dnmap is an excellent project for distributing Nmap scans among different clients.
    The extra resources available, such as bandwidth, allow us to scan one or more
    targets faster when time is a limiting factor during a security assessment.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe will show you how to perform distributed port scanning
    with Dnmap.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the latest version of Dnmap from the official SourceForge repositories
    at [http://sourceforge.net/projects/dnmap/files/](http://sourceforge.net/projects/dnmap/files/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Dnmap depends on python''s library "twisted". If you are on a Debian-based
    system, you can install it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: It is also worth mentioning that Nmap is not self-contained in Dnmap; we must
    install it separately on each client. Please refer to the *Compiling Nmap from
    source code* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap Fundamentals"),
    *Nmap Fundamentals* for instructions on installing Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a file that will contain your Nmap commands. Each command must be separated
    by a new line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the `dnmap_server.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the Dnmap server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7485_07_01_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dnmap server
  prefs: []
  type: TYPE_NORMAL
- en: 'On your clients, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the Dnmap server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7485_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dnmap client
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dnmap is a set of python scripts published by Sebastian García "el draco" from
    Mateslab ([http://mateslab.com.ar](http://mateslab.com.ar)), to distribute Nmap
    scans using a server-client connection model.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7485_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Server-client model of Dnmap from mateslab.com.ar
  prefs: []
  type: TYPE_NORMAL
- en: Commands are stored in a file that is read by the server. The script `dnmap_server.py`
    handles all of the incoming connections and assigns commands to the clients. Each
    client executes only one Nmap command at a time.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Additionally, you can increase the debugging level on the server by using the
    argument `-d [1-5]`, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: The server handles disconnections by reinserting the commands at the end of
    the file. Dnmap creates a file named `.dnmap-trace file` to keep a track of the
    current state of progress.
  prefs: []
  type: TYPE_NORMAL
- en: If the server itself loses connectivity, the clients will automatically try
    to reconnect indefinitely, until the server comes back online.
  prefs: []
  type: TYPE_NORMAL
- en: Dnmap statistics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The server of Dnmap returns the following statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of commands executed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last time online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uptime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commands per minute and its average
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Scanning an IP address range* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reading targets from a text file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning random targets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skipping tests to speed up long scans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Selecting the correct timing template* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting timing parameters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adjusting performance parameters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting signatures of web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
