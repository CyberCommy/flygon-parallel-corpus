- en: Appendix 5. Assessment Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lesson 1: Project 1 – Car Booking App'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Question Number** | **Answer** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 |'
  prefs: []
  type: TYPE_TB
- en: '`shadowColor`: This adds the hexadecimal or RGBA value of the color we want
    for our component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shadowOffset`: This shows how far we want our shadow to be casted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shadowRadius`: This shows the value of the radius in the corner of our shadow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shadowOpacity`: This shows how dark we want our shadow to be'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 2: Project 2 – Image Sharing App'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Question Number** | **Answer** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | True |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 |'
  prefs: []
  type: TYPE_TB
- en: '`onPress`: What the component needs to do when the **Send** button is pressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`busy`: This means "Are we waiting for remote data?"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loginError/registrationError`: Description of the error that happened when
    logging/register (in case it happened)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 3: Project 3 – Messaging App'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Question Number** | **Answer** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | True |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 |'
  prefs: []
  type: TYPE_TB
- en: '`tick()`: To calculate the next position of the sprites on the screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bounce()`: To make the parrot fly up'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start()`: To initialize the game variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lesson 4: Project 4 – Game'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Question Number** | **Answer** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | True |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | True |'
  prefs: []
  type: TYPE_TB
- en: '| 4 |'
  prefs: []
  type: TYPE_TB
- en: '`mapStateToProps()`: This gets the data for all the sprites in the store and
    injects them into the component as props. The sprites will be stored in an array
    and therefore they will be accessed by an index. On top of these, the Score, a
    flag noting if the current game is over and a flag noting if the game is in progress,
    will also be retrieved from the state and injected into the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mapStateActionsToProps()`: This will inject the three available actions (`tick`,
    `bounce`, and `start`) into the component so they can be used by it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 5 | 3 |'
  prefs: []
  type: TYPE_TB
