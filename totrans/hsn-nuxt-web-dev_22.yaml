- en: Creating a Framework-Agnostic PHP API for Nuxt
  prefs: []
  type: TYPE_NORMAL
- en: In previous chapters, such as [Chapter 8](232649f7-ae3b-43d7-a74e-55b481c4830c.xhtml),
    *Adding a Server-Side Framework*, and [Chapter 9](232649f7-ae3b-43d7-a74e-55b481c4830c.xhtml),
    *Adding a Server-Side Database*, you learned how to create APIs using Nuxt's default
    server with Node.js JavaScript frameworks such as Koa and Express. In [Chapter
    12](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml), *Creating User Logins and API
    Authentication*, you learned how to create APIs using an external server with
    the same Node.js JavaScript framework – Koa.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will guide you through how to create APIs using an external
    server with **PHP: Hypertext Preprocessor** (or simply PHP) instead. In [Chapter
    9](232649f7-ae3b-43d7-a74e-55b481c4830c.xhtml), *Adding a Server-Side Database*, you
    also learned how to use MongoDB to manage the database. However, in this chapter,
    we will use MySQL instead, which you used with Koa in [Chapter 12](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml),
    *Creating User Logins and API Authentication*.'
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, in this chapter, you will learn all about PHP standards and
    the **PHP Standards Recommendations** (**PSRs**). In particular, you will learn
    about PSR-4 for autoloading, PSR-7 for HTTP messages, and PSR-15 for composing
    middleware components and handling HTTP server requests. We will put together
    the packages that are based on these PSR standards from different vendors such
    as Zend Framework and The PHP League to make a **framework-agnostic** PHP RESTful
    API for our Nuxt app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding HTTP messages and PHP standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing CRUD operations with PHP database frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with Nuxt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP has come a long way. It existed long before Node.js and was created by Rasmus
    Lerdorf in 1994\. It stood for **Personal Home Page** originally. The PHP reference
    implementation is now produced by The PHP Group ([https://www.php.net/](https://www.php.net/)).
    PHP was originally developed as a templating language that allowed us to mix HTML
    with PHP code itself, just like Twig ([https://twig.symfony.com/](https://twig.symfony.com/))
    and Pug ([https://pugjs.org/](https://pugjs.org/)) do these days.
  prefs: []
  type: TYPE_NORMAL
- en: Now, PHP is more than just a templating language. Over the years, it has evolved
    into a general-purpose scripting language and object-oriented language, especially
    suited for server-side web development. You can still use it for templating, but
    we should make use of its full power in modern PHP development. If you want to
    check out what else PHP can do, visit [https://www.php.net/manual/en/intro-whatcando.php](https://www.php.net/manual/en/intro-whatcando.php).
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the current stable version of PHP is 7.4.x.
    If you are getting started with PHP, start with PHP 7.4\. If you are using PHP
    7.2 or 7.3, you should consider upgrading it to PHP 7.4 as it contains several
    bug fixes. For more about the changes in this release, visit [https://www.php.net/ChangeLog-7.php](https://www.php.net/ChangeLog-7.php).
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will guide you through how to install or upgrade to PHP 7.4
    on Ubuntu with Apache2 support. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Installing or upgrading PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are on macOS, please use this guide: [https://phptherightway.com/mac_setup](https://phptherightway.com/#mac_setup).
    If you are on Windows, then please use this guide: [https://phptherightway.com/windows_setup](https://phptherightway.com/#windows_setup).
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re using an Apache2 HTTP server but you can use an Nginx HTTP server if
    you have it installed on your machine already. Now, follow these simple steps
    to install PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to update the local packages on your Ubuntu server
    and install Apache2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing Apache2, verify it with the `-v` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the following commands to stop, start, and enable the Apache2 service
    so that it always starts up when the server boots up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the following command to check the status of Apache2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should always get `active (running)` as the output in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands to install PHP 7.4:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should also install PHP 7.4-related modules and extensions that may be
    needed when developing PHP apps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Disable PHP 7.3 (if you are on PHP 7.3) and then enable PHP 7.4:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are installing PHP for the first time, then you don''t have to disable
    the older version. If you want to uninstall PHP and all its related modules, you
    can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the Apache2 and PHP services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can verify the PHP you just installed with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following version information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have Apache2 and PHP 7.4 installed, the next thing you should do
    is configure PHP. We'll do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring PHP 7.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that Apache2 and PHP are installed, you may want to configure PHP so that
    you can use it according to what suits your PHP apps. The default PHP configuration
    file is located at `/etc/php/7.4/apache2/php.ini`, so follow these steps to configure
    your version of PHP 7.4:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to edit or configure PHP 7.4:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You may need to change the default allowance of `upload_max_filesize` for uploaded
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can find more information about this configuration at [http://php.net/upload-max-filesize](http://php.net/upload-max-filesize).
  prefs: []
  type: TYPE_NORMAL
- en: '2 MB maximum for uploaded files can be considered small for PHP apps. So, go
    ahead and change it to suit your needs, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are some other important lines/PHP directives to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can find more information about the preceding PHP directives and other directives
    for configuring your PHP at [https://www.php.net/manual/en/ini.core.php](https://www.php.net/manual/en/ini.core.php).
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart Apache for the aforementioned modified PHP settings to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: PHP 7.4 is powerful. You can just have it installed and serving your site for
    development without relying on the Apache server if you don't want to install
    Apache on your local development machine. In the next section, you'll learn how
    to use PHP 7.4 without the Apache server.
  prefs: []
  type: TYPE_NORMAL
- en: Running PHP apps with a built-in PHP web server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since PHP 5.4, you can run PHP scripts and apps with the built-in PHP web server,
    without needing a common web server such as Apache or Nginx. As long as you have
    PHP 7.4 installed, you can skip the preceding Apache installation. To start the
    PHP server, just open a terminal from your project''s root directory and run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to start the app from a specific document root directory, such
    as from the `public` directory, in the project directory called `www`, do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a classic "Hello World" example that will be served up by this
    built-in PHP web server to see whether everything is set up correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple "Hello World" message page in a PHP file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to your project directory and start it with the built-in PHP web server
    by using the preceding command. The terminal should show the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, load `localhost:8181` on your browser. You should see Hello world! on your
    screen, without any errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to learn about this built-in web server, visit [https://www.php.net/features.commandline.webserver](https://www.php.net/features.commandline.webserver).
  prefs: []
  type: TYPE_NORMAL
- en: Next, you'll learn how to arm yourself with some PHP standards. You'll also
    understand what HTTP messages are and why we need PSR for modern PHP apps.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding HTTP messages and PSRs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Hypertext Transfer Protocol** (**HTTP**) is a communication protocol between
    client computers and web servers. A web browser such as Chrome, Safari, or Firefox
    can be the web client or the user-agent, while a web application on a computer
    that''s listening on some port can be the web server. Web clients are not only
    browsers but any application that can speak to the web server, such as cURL or
    Telnet.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A client opens a connection via the internet to make a request to the server
    and waits until they receive a response from the server. The request contains
    request information, while the response contains status information and the requested
    content. These two types of exchanged data are called HTTP messages. They are
    just bodies of text encoded in ASCII and they span multiple lines in the following
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This looks very simple and straightforward, doesn''t it? Although this may
    be the case, let''s elaborate on this structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Start-line` describes the implemented request method (such as `GET`, `PUT`,
    or `POST`), the request target (usually a URI), and the HTTP version or the status
    (such as 200, 404, or 500) of the response and the HTTP version. `Start-line`
    is always a single line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `HTTP Headers` line describes the specific details (meta-information) of
    the request or the response, such as `Host`, `User-Agent`, `Server`, `Content-type`,
    and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The blank line indicates that all the meta-information for the request has been
    sent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Body` (or, message body) contains the exchanged data of the request (such
    as the content of an HTML form) or the response (such as the content of an HTML
    document). The message body is optional (sometimes, it is not needed in the request
    for requesting data from the server).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s use cURLto see how the data of the HTTP request and response is
    exchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Serve the PHP "Hello World" app that you learned about in the previous section
    on `localhost:8181` using the built-in PHP web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a new tab on your terminal and run the following cURL script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see that the request message is displayed in the first part, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see that the blank line is represented at `004a:` and that there
    is no message body in the request at all. The response message is displayed in
    the second part, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see the status is `200 OK` in the start line in the response.
    But in the preceding example, we did not send any data, so there is no message
    body in the request message. Let''s create another very basic PHP script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a PHP page with the PHP `print` function so that it displays `POST`
    data, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Serve the page on `localhost:8181` using the built-in PHP web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Send some data over cURL on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, the request message will be displayed in the first part, along with
    the message body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The response message is displayed in the second part, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can also see the request message and the request message for the
    `PUT` method over cURL on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The same applies for the `DELETE` method over cURL, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but not least, we also can use the Developer Tools in Google Chrome to
    help us inspect the exchanged data. Let''s create another simple PHP script that
    will receive data from the URI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Send some data on your browser by using `0.0.0.0:8181/?param1=value1&param2=value2`.
    By doing this, the data is sent as `param1=value1&param2=value2`, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e4fb51b8-fde2-4b80-b57d-c433f69124cf.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to know more about HTTP and HTTP messages, please visit [https://developer.mozilla.org/en-US/docs/Web/HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP)
    for HTTP in general and [https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages)
    for HTTP messages specifically.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to server-side development, HTTP messages are better encapsulated
    in objects so that they are easier to work with. For example, Node.js has a built-in
    HTTP module ([https://nodejs.dev/the-nodejs-http-module](https://nodejs.dev/the-nodejs-http-module))
    for HTTP communication, in which you can get the HTTP messages objects from the
    callback in the `http.createServer()` method when using it to create an HTTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using a Node.js framework such as Koa, you can find the HTTP messages
    objects in `ctx`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, `ctx` is the Koa context, while `ctx.request` is the
    HTTP request message and `ctx.response` is the HTTP response message. We can do
    the same in Express; you can find the HTTP messages as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Unlike Node.js, PHP has never had built-in HTTP message objects like these.
    There are a bunch of ways to get and set the web data, both manually and directly,
    just like we saw in the previous PHP examples, by using superglobals (`$_GET`,
    `$_POST`) and the built-in functions (`echo`, `print_r`). If you want to catch
    the incoming request, you can use `$_GET`, `$_POST`, `$_FILE`, `$_COOKIE`, `$_SESSION`,
    or any other superglobals ([https://www.php.net/manual/en/language.variables.superglobals.php](https://www.php.net/manual/en/language.variables.superglobals.php)),
    depending on the situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same goes for returning a response: you use global functions such as `echo`,
    `print`, and `header` to set response headers manually. In the past, PHP developers
    and frameworks had their own ways of implementing HTTP messages. This led to a
    time where different frameworks had different abstractions to **represent** HTTP
    messages, and any app based on a specific implementation of HTTP messages could
    hardly be interoperable in the project for using other frameworks. This lack of
    industry standards made the components of a framework tightly coupled. If you
    didn''t start with a framework, you would end up building one yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But today, the PHP community has learned and enforced PHP standards and recommendations.
    You don''t have to fully comply with these standards and recommendations; you
    can ignore them if you have philosophical reasons that urge you to. But they are
    a measure with a good intention to end the PHP war – at least commercially and
    collaboratively. And once for all, PHP developers can focus on PHP standards rather
    than frameworks in a framework-agnostic way. When we talk about PHP standards,
    we tend to refer to the PSR, a PHP specification defined and published by the PHP
    Framework Interop Group (PHP-FIG). PSR-7: HTTP message interfaces is one of the
    specifications suggested by the PHP-FIG members and was voted for according to
    the established protocol that they agreed upon.'
  prefs: []
  type: TYPE_NORMAL
- en: PSR-7 was officially accepted in May 2015\. It is basically used to standardize
    HTTP message interfaces. Before jumping into PSR-7, we should know about some
    other PSR numbers as well, notably PSR-12 (replacement of PSR-2), PSR-4, and PSR-15\.
    We will guide you through them in this book so that you can write reusable, framework-agnostic
    apps and components that can be used on their own or can be interoperable with
    other frameworks, whether they are a full-stack or micro frameworks. Let's get
    started!
  prefs: []
  type: TYPE_NORMAL
- en: Why PSRs?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Internally, PHP never tells developers how they should write their PHP code.
    For example, Python uses indentation to indicate a block of code, while for other
    programming languages such as PHP and JavaScript, indentation in code is done
    for readability. The following is an example of what Python will accept:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Python will return an error if there''s no indentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The number of spaces is up to the coder''s preference, but you must use at
    least one and have the same number of spaces for other lines in the same block;
    otherwise, Python will return an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, in PHP, you can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is valid in PHP too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Python internally enforces readability and tidiness for code. PHP does not.
    You can imagine that without some basic enforcement, and depending on the experience
    of the coder, PHP code can end up very messy, ugly, and unreadable. Perhaps the
    low barrier to entry in PHP web development plays a part in that. So, your PHP
    code must adhere to a common code style to make it easy for collaboration and
    maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few PHP coding standards around for specific frameworks, but they
    are more or less based on (or similar to) PSR standards:'
  prefs: []
  type: TYPE_NORMAL
- en: Zend Coding Standard at [https://framework.zend.com/manual/2.4/en/ref/coding.standard.html](https://framework.zend.com/manual/2.4/en/ref/coding.standard.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symfony Coding Standards at [https://symfony.com/doc/master/contributing/code/standards.html](https://symfony.com/doc/master/contributing/code/standards.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CakePHP Coding Standards at [https://book.cakephp.org/3.0/en/contributing/cakephp-coding-conventions.html](https://book.cakephp.org/3.0/en/contributing/cakephp-coding-conventions.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FuelPHP Coding Standards at [https://fuelphp.com/docs/general/coding_standards.html](https://fuelphp.com/docs/general/coding_standards.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress Coding Standards at [https://codex.wordpress.org/WordPress_Coding_Standards](https://codex.wordpress.org/WordPress_Coding_Standards)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pragmatically, your code should adhere to the framework that you are tied to,
    and that specific framework only. But if you are only using some components or
    libraries from the framework, then you can comply with any combination of PSRs,
    or the coding standards made by PEAR. The PEAR Coding Standards can be found at
    [https://pear.php.net/manual/en/standards.php](https://pear.php.net/manual/en/standards.php).
  prefs: []
  type: TYPE_NORMAL
- en: This book focuses on a variety of PSRs because this chapter aims to create framework-agnostic
    PHP apps. You don't have to agree with PSR, but if you are looking for a standard
    to start a project with and do not have any standard of your own within your organization,
    it might be a good place to start. You can find out more about the PSR at [https://www.php-fig.org/psr/](https://www.php-fig.org/psr/).
  prefs: []
  type: TYPE_NORMAL
- en: 'On top of what we have mentioned here, you should also check out **PHP: The
    Right Way** at [https://phptherightway.com/](https://phptherightway.com/). It
    outlines things that a modern PHP coder can use as references, from setting up
    PHP, dependency management with **Composer** (which we will cover later in this
    chapter), coding style guides (in which PSRs are recommended), dependency injection,
    databases, templating, to testing frameworks and more. It is a good start for
    new PHP coders who want to avoid the mistakes of the past and find links to authoritative
    PHP tutorials on the web. It is also a good place for experienced PHP coders who
    need a quick reference and updates from the PHP community at large, or anything
    they might have missed in the past few years.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's dive into PSRs, starting with **PSR-12**.
  prefs: []
  type: TYPE_NORMAL
- en: PSR-12 – Extended Coding Style guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PSR-12 is a revised coding style guide of PSR-2 that takes PHP 7 into account.
    The PSR-12 specification was approved on 9 August 2019\. Since PSR-2 was accepted
    in 2012, many changes have been made to PHP that have had some impact on coding
    style guidelines, the most notable of which is **return type declarations**, which
    are introduced in PHP 7 and not described in PSR-2\. Hence, a standard should
    be defined for using them so that they can be adopted by the wider PHP community
    before individual PHP coders implement their standards, which might conflict with
    each other eventually.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the **return type declarations** that have been added in PHP 7
    simply specifies the type of value that a function should return. Let''s take
    a look at the following function, which adopts the **return type declarations**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the correct result of `2` as an integer. However, let''s see what
    happens if you change the code inside the `returnInt` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'PHP will give up with the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'So, to cater for the need of this new feature of PHP 7, PSR-12 requires you
    to use a single space after the colon, followed by the type declaration for the
    methods with the return type declaration. Also, the colon and declaration must
    be on the same line as the argument list''s closing parenthesis with no spaces
    between the two characters. Let''s take a look at a simple example that has a
    `return` type declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Some rules are kept the same in PSR-2 and PSR-12\. For example, in both PSRs,
    you must not use tabs for indentation but four single spaces instead. But the
    rule in PSR-2 regarding the list of blocks has been revised. Now, in PSR-12, the
    blocks that use statements for importing classes, functions, and constants must
    be separated by a single blank line, even though there is just one import of them.
    Let''s take a quick look at some code that complies with this rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you should notice that, in PSR-12, you must use a single blank line right
    after the opening `<?php` tag. However, in PSR-2, this isn''t necessary. For example,
    you can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: It is worth knowing that PSR-2 was extended from PSR-1, which was a basic coding
    standard, but since PSR-12 was accepted, PSR-2 is now officially deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement these PSRs for your code, please visit the following sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.php-fig.org/psr/psr-1/](https://www.php-fig.org/psr/psr-1/) for
    the PSR-1: Basic Coding Standard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.php-fig.org/psr/psr-2/](https://www.php-fig.org/psr/psr-2/) for
    the PSR-2: Coding Style Guide (deprecated)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.php-fig.org/psr/psr-12/](https://www.php-fig.org/psr/psr-12/) for
    the PSR-12: Extended Coding Style'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to find out the new features in PHP 7, such as scalar type declarations
    and return type declarations, please visit [https://www.php.net/manual/en/migration70.new-features.php](https://www.php.net/manual/en/migration70.new-features.php).
  prefs: []
  type: TYPE_NORMAL
- en: PSR-12 helps PHP coders write more readable and structured code, so it is worth
    adopting it in your code when writing in PHP. Now, let's move on to **PSR-4**,
    which allows us to use autoloading in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: PSR-4 – Autoloader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the old days of PHP, if you wanted to bring a third-party library into your
    PHP project, or bring in your functions and classes from separate PHP files, you
    would use `include` or `require` statements. With the arrival of PHP autoloading,
    you would use the `__autoload` magic method (which is now deprecated since PHP
    7.2) or `spl_autoload` to automatically call your code. Then came **true namespace**
    support in PHP 5.3, where developers and frameworks can devise their approaches
    to prevent naming collisions. But still, it was quite far from ideal because of
    the battle between different approaches. You can imagine a situation where you
    have two frameworks – framework A and framework B – and individual developers
    disagreeing with each other and implementing their own ways to achieve the same
    result. This was madness.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, we comply with PSR-4 (which is the successor of PSR-0) to standardize
    the autoloading approach and bind developers and frameworks together. It specifies
    the standard for autoloading classes from **file paths**. It also describes the
    location of the file. So, a **fully qualified class name** should adhere to the
    following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'In this rule, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The namespace for a fully qualified class must have a top-level vendor namespace,
    which is the `<NamespaceName>` part in the preceding code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use one or more sub-namespaces, as shown by the `<SubNamespaceNames>` part
    of the preceding code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, you must end the namespace with your class name, as shown by the `<ClassName>`
    part of the preceding code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, if you are writing an autoloader, it is recommended to use this standard.
    However, you don't have to (and probably shouldn't) go through the hassle of writing
    your own autoloader while complying with PSR-4\. This is because you can use **Composer**
    to help you do this. Composer is a package manager for PHP. It is akin to npm
    in Node.js. It was initially released in 2012\. Since then, it has been used by
    all modern PHP frameworks and PHP coders alike. This means you can focus more
    on your code development and worry less about the interoperability of different
    packages and libraries that you are going to bring into your project environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start, make sure you have Composer installed on your system. Depending
    on your system, you can follow the following guides to install Composer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md) and [https://getcomposer.org/download/](https://getcomposer.org/download/) from the
    official Composer site'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://php](https://phptherightway.com/#dependency_management)[therightway.com/dependency_management](https://phptherightway.com/#dependency_management) from **PHP:
    The Right Way**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The current version is 1.10.9\. Follow these steps to install Composer and
    make use of the autoloader that it offers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Composer in your current directory by running the following script
    in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the Composer setup file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the Composer setup file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the installation by running `php composer.phar` on your terminal. If
    you want to use Composer **globally**, then move Composer to `/usr/local/bin`
    (if you are using Linux/Unix):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can run Composer globally. To verify it, just run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the logo for Composer, as well as its available commands and
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the `-V` option to check the version you''ve installed
    directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have Composer installed on your system, simply navigate to your
    project''s root through your terminal and use `composer require`, followed by
    `<package-name>`, to install any third-party packages (also known as dependencies)
    that you need in your project, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing the required packages, you can go to your project root. You
    should see that a `composer.json` file has been created that contains the dependency
    of your project in a `require` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to install all the dependencies again next time, you can just run
    the `install` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have installed your project dependencies, whether that be with the
    `require` or `install` command, you will always get a `/vendor/` folder generated
    by Composer that contains all your dependencies. An `autoload.php` file will always
    be generated and located inside the `/vendor/` folder. You then can include this
    file and start using the classes that those packages provide straight away, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Most importantly, you can even add your classes to the autoloader by adding
    the `autoload` key, along with your custom namespace, to the `composer.json` file.
    For example, you can have your classes stored in an `/src/` folder in the project
    root, on the same level where the `/vendor/` directory is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have the source files in multiple locations, you can use an array, `[]`,
    to associate it with your custom namespace, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Composer will register a PSR-4 autoloader for the `Spectre` namespace. After
    that, you can start writing your classes. For example, you can create a `/src/Foo.php`
    file that contains a `Spectre\Foo` class. After that, just run `dump-autoload`
    on your terminal to regenerate the `autoload.php` file inside the `/vendor/` directory.
    You also can add multiple custom namespaces to the `autoload` field, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Besides PSR-4, Composer also supports PSR-0\. You can add a PSR-0 key to the
    `composer.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: For more information and examples of how to use PSR-0 with Composer, please
    visit [https://getcomposer.org/doc/04-schema.mdautoload](https://getcomposer.org/doc/04-schema.md#autoload).
    However, please note that PSR-0 is now deprecated. If you want to read more about
    these two PSRs, please visit [https://www.php-fig.org/psr/psr-0/](https://www.php-fig.org/psr/psr-0/)
    for PSR 0 (deprecated) and [https://www.php-fig.org/psr/psr-4/](https://www.php-fig.org/psr/psr-4/)
    for PSR-4. If you want to know about Monolog, which we used in the preceding example
    for logging in PHP, please visit [https://github.com/Seldaek/monolog](https://github.com/Seldaek/monolog).
    If you want to read more about Autoloading Classes in PHP, please visit [https://www.php.net/manual/en/language.oop5.autoload.php](https://www.php.net/manual/en/language.oop5.autoload.php)[.](https://www.php.net/manual/en/language.oop5.autoload.php)
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you have armed yourself with knowledge about PSR-12 and PSR-4, it
    will be easier for you to build PHP apps that comply with other PSRs. The other
    two PSRs that this book focuses on are PSR-7 and PSR-15\. Let's move on and look
    at **PSR-7** first.
  prefs: []
  type: TYPE_NORMAL
- en: PSR-7 – HTTP Message Interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier, we mentioned that PHP does not have HTTP request and response message
    objects, which is why PHP frameworks and coders came out with different abstractions
    to represent (or "imitate") HTTP messages in the past. Luckily, in 2015, PSR-7
    came to the rescue to end these "disagreements" and differences.
  prefs: []
  type: TYPE_NORMAL
- en: PSR-7 is a set of common interfaces (abstractions) that specify public methods
    for HTTP messages and URIs when communicating over HTTP. In object-oriented programming
    (OOP), an interface is, in fact, an abstraction of the actions (public methods)
    that an object (a class) must implement, without defining the complexities and
    details of how these actions are implemented. For example, the following table
    shows the methods that your HTTP message classes must implement when composing
    them so that they comply with the PSR-7 specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'The specified methods for accessing and modifying the request and response
    objects are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  **To access** |  **To modify** |'
  prefs: []
  type: TYPE_TB
- en: '| `getProtocolVersion()` | `withProtocolVersion($version)` |'
  prefs: []
  type: TYPE_TB
- en: '| `getHeaders()` | `withHeader($name, $value)` |'
  prefs: []
  type: TYPE_TB
- en: '| `hasHeader($name)` | `withAddedHeader($name, $value)` |'
  prefs: []
  type: TYPE_TB
- en: '| `getHeader($name)``getHeaderLine($name)` | `withoutHeader($name)` |'
  prefs: []
  type: TYPE_TB
- en: '| `getBody()` | `withBody(StreamInterface $body)` |'
  prefs: []
  type: TYPE_TB
- en: 'The specified methods for accessing and modifying just **request** objects
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **To access** | **To modify** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`getRequestTarget()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getMethod()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getUri()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getServerParams()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getCookieParams()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getQueryParams()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getUploadedFiles()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getParsedBody()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getAttributes()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getAttribute($name, $default = null)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`withMethod($method)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withRequestTarget($requestTarget)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withUri(UriInterface $uri, $preserveHost = false)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withCookieParams(array $cookies)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withQueryParams(array $query)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withUploadedFiles(array $uploadedFiles)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withParsedBody($data)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withAttribute($name, $value)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withoutAttribute($name)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'The specified methods for accessing and modifying just **response** objects
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **To access** | **To modify** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`getStatusCode()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getReasonPhrase()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`withStatus($code, $reasonPhrase = '''')`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since PSR-7 was accepted on 18 May 2015, many packages have been made based
    on it. You can develop your own version as long as you implement the interfaces
    and methods specified in PSR-7\. However, you might be "reinventing the wheel"
    since there are PSR-7 HTTP messages packages out there already – unless you have
    some strong reasons to do so. So, for the sake of getting it started quickly,
    let''s use `zend-diactoros` from Zend Framework. We will "reuse" the PSR knowledge
    (PSR-12 and PSR-4) you gained in the previous sections to create a simple "Hello
    World" server-side app with HTTP messages. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `/public/` directory in the app root with an `index.php` file in it.
    Add the following lines to it to bootstrap the app environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: In these two lines of code, we have changed the current directory from `/path/to/public` to `/path/to` so
    that we can import the `autoload.php` file by writing `vendor/autoload.php` instead
    of `../vendor/autoload.php`.
  prefs: []
  type: TYPE_NORMAL
- en: The `__DIR__` (magic) constant is used to get the directory path of the current
    file, which is `index.php`, in the `/path/to/public/` directory. The `dirname` function
    is then used to get the parent directory's path, which is `/path/to`.  The `chdir` function
    is then used to change the current directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that in the upcoming sections on PSRs, we will use this pattern to bootstrap
    the app environment and import the autoload file. Please visit the following links
    to find out more about the constants and functions mentioned previously:'
  prefs: []
  type: TYPE_NORMAL
- en: The `__DIR__` (magic) constant: [https://www.php.net/manual/en/language.constants.predefined.php](https://www.php.net/manual/en/language.constants.predefined.php)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `dirname` function: [https://www.php.net/manual/en/function.dirname.php](https://www.php.net/manual/en/function.dirname.php)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `chdir` function: [https://www.php.net/manual/en/function.chdir.php](https://www.php.net/manual/en/function.chdir.php)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, note that you must run all the incoming PHP apps on a terminal by using
    the built-in PHP web server, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `zend-diactoros` into the app''s root directory via Composer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'To marshal an incoming request, you should create a request object in the `index.php` file
    in the `/public/` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can create a response object and manipulate the response, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the `write` method is specified in the stream interface (`StreamInterface`)
    and that we can also append more data by making multiple calls with this method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then manipulate the headers if needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the headers should be added after data is written to the body. Then,
    that''s it – you have managed to transform the simple PHP "Hello World" app that
    you learned about at the beginning of this chapter into a modern PHP app with
    PSR-7! However, if you run this PSR-7 "Hello World" app on your browser with `php
    -S localhost:8181 -t public` from your terminal, you will see nothing on the screen.
    This is because we did not **emit** the response to the browser with **PSR-15
    HTTP Server Request Handlers** and **PSR-7 HTTP Response Emitter**, which we will
    cover in the next section. If you want to see the output, for now, you can access
    the data by using the `getBody` method and then using `echo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: If you inspect the `Content-type` of your page through the Developer Tools on
    Chrome, you'll get `text/html` instead of `text/plain`, which is what we modified
    with the `withHeader` method. We will get the correct content type with the emitter
    in the next chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For more information about `zend-diactoros` and their advanced usage, please
    visit [https://docs.zendframework.com/zend-diactoros/](https://docs.zendframework.com/zend-diactoros/).
    Besides `zend-diactoros` from Zend Framework, you also can use the HTTP messages
    package from other frameworks and libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: Guzzle and PSR-7 from Guzzle at [http://docs.guzzlephp.org/en/latest/psr7.html](http://docs.guzzlephp.org/en/latest/psr7.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTPlug from PHP-HTTP at [http://docs.php-http.org/en/latest/](http://docs.php-http.org/en/latest/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PSR-7 Bridge from Symfony at [https://symfony.com/doc/master/components/http_foundation.html](https://symfony.com/doc/master/components/http_foundation.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slim at [http://www.slimframework.com](http://www.slimframework.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should check out the PSR-7 documentation at [https://www.php-fig.org/psr/psr-7/](https://www.php-fig.org/psr/psr-7/) for
    more information about this PSR. If you are new to PHP interfaces, please visit [https://www.php.net/manual/en/language.oop5.interfaces.php](https://www.php.net/manual/en/language.oop5.interfaces.php) for
    further reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the PSR-7 documentation, you can find out the rest of the public methods
    that are not mentioned in this book. They should be expected in any PSR-7 HTTP
    messages package, such as `zend-diactoros`. It is useful to know about these methods
    so you know what you can do with them. You also can use the built-in PHP `get_class_methods`
    method at runtime to list all the methods that you can use in the request and
    response objects. For example, for the `request` object, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get a list of request methods in an array that you can call. The same
    goes for the `response` object; you will get a list of response methods in an
    array by doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's move on and look at **PSR-15**, where we'll find out how to emit
    the response to the client (browser).
  prefs: []
  type: TYPE_NORMAL
- en: PSR-15 – HTTP Server Request Handlers (request handlers)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PSR-7 was a great step in the PHP community, but it is only halfway to the goal
    that **could** free PHP coders from monolithic MVC frameworks and allow them to
    compose agnostic PHP apps out of a range of reusable middlewares. It only defines
    HTTP messages (the request and the response); it never defines how to deal with
    them afterward. So, we need a request handler to process the request in order
    to produce a response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like PSR-7, PSR-15 is a set of common interfaces, but they take things a step
    further and specify the standard for request handlers (HTTP server request handlers)
    and middleware (HTTP server request middleware). It was accepted on 22 January
    2018\. We will cover the HTTP server request middleware in the next section. Now,
    let''s understand the HTTP server request handlers in the PSR-15 interface, `RequestHandlerInterface`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this is a very simple interface. It only has one specified
    public method, `handle`, which only accepts a PSR-7 HTTP request message and **must**
    return a PSR-7 HTTP response message. We will use the `zend-httphandlerrunner`
    component from Zend Framework, which implements this interface, to provide utilities
    that we can use to emit PSR-7 responses. Let''s get it hooked up to the app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `zend-httphandlerrunner` via Composer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'As soon as we have it installed in our project environment, we can send the
    response that we created previously to the browser, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: If you inspect `Content-Type` of your page again through the Developer Tools
    on Chrome, you'll get the correct content type, which is `text/plain`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about `zend-httphandlerrunner`, visit [https://docs.zendframework.com/zend-httphandlerrunner/](https://docs.zendframework.com/zend-httphandlerrunner/).
    For more information about PSR-15, visit [https://www.php-fig.org/psr/psr-15/](https://www.php-fig.org/psr/psr-15/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides `zend-httphandlerrunner`, you can also use Http Response Emitter from
    Narrowspark at [https://github.com/narrowspark/http-emitter](https://github.com/narrowspark/http-emitter)
    to handle the request and emit the response. Now, let''s move on and look at the
    **second interface** of PSR-15: `MiddlewareInterface`.'
  prefs: []
  type: TYPE_NORMAL
- en: PSR-15 – HTTP Server Request Handlers (middleware)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The middleware interface in PSR-15 has the following abstraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Again, you can see it is a very simple interface. It only has one specified
    public method process for middleware implementation. The component (middleware)
    that implements this interface will only accept a PSR-7 HTTP request message and
    a PSR-15 HTTP server request handler and then **must** return a PSR-7 HTTP response
    message.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `zend-stratigility` components from Zend Framework, which implement
    this interface, to allow us to create PSR-15 middleware in our app. Let''s learn
    how to get it hooked up to the app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `zend-stratigility` via Composer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'As soon as we have it installed in our project environment, we will import
    the `middleware` function and `MiddlewarePipe` class, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can use this `middleware` function to create **three** middlewares
    and attach them to the pipeline, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the "Hello World" code block we created previously now is a
    piece of middleware that''s stacked with other middleware. Finally, we can generate
    a **final** response from these pieces of middleware and emit it to the browser,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a result similar to the following on your browser at `0.0.0.0:8181`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: For more information about `zend-stratigility`, visit [https://docs.zendframework.com/zend-stratigility/](https://docs.zendframework.com/zend-stratigility/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides `zend-stratigility`, you can also use the following packages to create
    your middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: Northwoods Broker at [https://github.com/northwoods/broker](https://github.com/northwoods/broker)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relay at [https://relayphp.com/](https://relayphp.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, there you go. With the help of several interoperable components, we have
    bootstrapped a modern PHP app that complies with PSR-12, PSR-7, and PSR-15, which
    means you can freely pick (agnostically) from a broad range of vendor implementations
    of those standards for your HTTP messages, request handler, and middleware. But
    we haven't finished yet. As you may have noticed, the app we have created is just
    a one-page app that runs on a single "route" at `0.0.0.0:8181`. It doesn't have
    any other routes, such as `/about`, `/contact`, and so on. Therefore, we need
    a router that implements PSR-15\. We'll cover this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: PSR-7/PSR-15 router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use Route from The League of Extraordinary Packages (a PHP developer
    group) so that we have a PSR-7 routing system and dispatch our PSR-15 middleware
    on it. In short, Route is a fast PSR-7 routing/dispatcher package.
  prefs: []
  type: TYPE_NORMAL
- en: It is a PSR-15 server request handler and can handle the invocation of a stack
    of middleware. It is built on top of FastRoute ([https://github.com/nikic/FastRoute](https://github.com/nikic/FastRoute))
    by Nikita Popov.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s learn how to get it hooked up to the app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `league/route` via Composer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have it installed, we can refactor our "Hello World" component with
    a route, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we just have to create a PSR-7 HTTP response by using a `dispatch` method
    from Route and emitting it to the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Check out the list of HTTP request methods (`get`, `post`, `put`, `delete`,
    and so on) that you can use at [https://route.thephpleague.com/4.x/route](https://route.thephpleague.com/4.x/route).
    What's more, we can attach middleware to our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to lock down the entire app, you can add the middleware to the
    router, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to lock down a group of routes, you can add the middleware to the
    group, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to lock down a specific route, you can add the middleware to that
    route, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, you can use Route with `zend-stratigility`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t want to use the `middleware` function or prefer not to use `zend-stratigility`
    at all, you can create anonymous middleware, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: As long as you comply with PSR7 and PSR-15 by implementing the `process` method
    in your middleware, there's no need for `zend-stratigility` at all. If you want
    to create class-based middleware in a separate PHP file, please check out the
    example provided at [https://route.thephpleague.com/4.x/middleware/](https://route.thephpleague.com/4.x/middleware/).
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about Route from The League of Extraordinary Packages,
    visit [https://route.thephpleague.com/](https://route.thephpleague.com/). You
    can also check out other packages that have been created by this group of developers
    at [https://thephpleague.com](https://thephpleague.com)/. Besides Route from The
    League of Extraordinary, you can also use the following packages for HTTP routers
    based on PSR-7 and PSR-15:'
  prefs: []
  type: TYPE_NORMAL
- en: '`delolmo/symfony-router` at [https://github.com/delolmo/symfony-router](https://github.com/delolmo/symfony-router)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`middlewares/aura-router` at [https://github.com/middlewares/aura-router](https://github.com/middlewares/aura-router)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`middlewares/fast-route` at [https://github.com/middlewares/fast-route](https://github.com/middlewares/fast-route)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timtegeler/routerunner` at [https://github.com/timtegeler/routerunner](https://github.com/timtegeler/routerunner)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sunrise-php/http-router` at [https://github.com/sunrise-php/http-router](https://github.com/sunrise-php/http-router)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may need a dispatcher to use with some of these packages. The advantage
    of using Route from The League of Extraordinary Packages is that it provides a
    router and a dispatcher in one package.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have composed an agnostic PHP app by using PSR-12, PSR-4, PSR-7,
    and PSR-15\. But our PHP API isn't done yet. There's one more task to do – we
    need to add a database framework for CRUD operations. We will guide you through
    this task in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Writing CRUD operations with PHP database frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may recall from [Chapter 9](232649f7-ae3b-43d7-a74e-55b481c4830c.xhtml),
    *Adding a Server-Side Database*, **CRUD** stands for **c**reate, **r**ead, **u**pdate,
    and **d**elete. In that chapter, we used MongoDB to create CRUD operations. In
    this section, we will use MySQL to create backend authentication. We will use
    MySQL with PHP in the PHP app we have just created with PSRs. So, let's start
    by creating the table that we will need in the MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating MySQL tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure you have installed MySQL Server on your local machine and created
    a database called `nuxt-php`. Once you''ve done that, follow these steps to finish
    up the first part of our API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the following SQL query to create the table in the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: The first thing you will have noticed is that we are using `uuid` instead of
    `id` like we did in [Chapter 12](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml), *Creating
    User Logins and API Authentication*. UUID stands for **Universally Unique Identifier**.
    There may be reasons why and benefits that will make you want to choose UUIDs
    over auto increment keys for indexing records in database tables. For example,
    you can create a UUID without connecting to the database. It is practically unique
    across apps, so you can easily combine data from different databases and never
    get a clash. To generate UUIDs in a PHP app, we can use `ramsey/uuid` by Ben Ramsey
    to help us generate RFC 4122 ([https://tools.ietf.org/html/rfc4122](https://tools.ietf.org/html/rfc4122))
    version 1, 3, 4, and 5 UUIDs.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s install `ramsey/uuid` via Composer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can use this package to generate version 1 of UUID, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more information about this package, visit [https://github.com/ramsey/uuid](https://github.com/ramsey/uuid).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's learn how to use PHP to work with MySQL databases and find out why
    we need a database framework to speed up our development in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Using Medoo as a database framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the old days of PHP, developers used MySQL functions ([https://www.php.net/manual/en/ref.mysql.php](https://www.php.net/manual/en/ref.mysql.php))
    to manage MySQL databases. Then, the MySQLi extension ([https://www.php.net/manual/en/book.mysqli.php](https://www.php.net/manual/en/book.mysqli.php))
    came to replace MySQL functions, which are now deprecated. However, now, developers
    are encouraged to use **PHP Data Objects** (**PDO**) ([https://www.php.net/manual/en/book.pdo.php](https://www.php.net/manual/en/book.pdo.php)).
    PDO is a built-in PHP interface abstraction, just like PSR-7 and PSR-15 are. It
    is a data-access abstraction layer that provides a consistent interface (a unified
    API) for accessing and managing databases (for example, MySQL and PostgreSQL),
    which means regardless of which database you are using, you use the same functions
    to query and fetch data. It supports the following databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: CUBRID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MS SQL Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebird
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Informix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ODBC and DB2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4D
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that PDO is a data-access abstraction layer, not a database abstraction
    layer. Hence, depending on which database you use, a PDO driver for that database
    must be installed for using PDO. We are using a MySQL database, so we must make
    sure that the `PDO_MYSQL` driver is installed. In Ubuntu, you can use the following
    command to check whether you have the PDO extension is enabled and that `PDO_MYSQL`
    driver is installed in your environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a list of PHP modules. Look for `PDO` and `pdo_mysql`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Another more specific option you can use to check for PDO and its drivers is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'If you just want to search for PDO drivers, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also create a PHP page with `phpinfo()` to look for them. Alternatively,
    you can use the `getAvailableDrivers` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a list of PDO drivers, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, there are some built-in PHP functions that can help you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t see any PDO drivers, then you must install the driver for MySQL
    support. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for the package name (Ubuntu):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `php7.4-mysql` and restart your Apache server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have the `PDO_MYSQL` driver in place, you can start writing CRUD operations
    immediately. For example, let''s write an `insert` operation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the MySQL database connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Note that `<username>`, `<password>`, and `<dbname>` are placeholders for the
    actual connection details. You must change them according to your own database
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare the SQL query and `bind` parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert a fresh row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: This is not ideal because you have to `prepare` the statement every time and
    bind parameters where they needed, and this takes quite a lot of lines to operate.
    For this reason, we should pick a PHP database framework to accelerate development.
    **Medoo** ([https://medoo.in/](https://medoo.in/)) is one of the choices out there.
    It is lightweight and very easy to integrate and use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get it installed and hooked up to our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Medoo via Composer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is set and in place, you can import Medoo and pass in an array
    of configuration to start the database connection, just as we did previously in
    the vanilla approach:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: That's it for establishing a connection to the MySQL database through this database
    framework. You can find the actual usage of this snippet in `/chapter-16/nuxt-php/proxy/backend/core/mysql.php`
    in this book's GitHub repository. We will show you how to implement it in the
    upcoming section, but for now, let's explore how to write some basic CRUD operations
    with Medoo.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the `insert` method when you want to insert new records into a
    table, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more details about this method, visit [https://medoo.in/api/insert](https://medoo.in/api/insert).
  prefs: []
  type: TYPE_NORMAL
- en: Querying records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the `select` method when you want to list records from a table,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'The `select` method gives you a list of records. If you just want to select
    a specific row, you can use the `get` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more details, visit [https://medoo.in/api/select](https://medoo.in/api/select)
    for the `select` method and [https://medoo.in/api/get](https://medoo.in/api/get)
    for the `get` method.
  prefs: []
  type: TYPE_NORMAL
- en: Updating records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the `update` method when you want to modify the data of a record
    in a table, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more details about this method, visit [https://medoo.in/api/update](https://medoo.in/api/update).
  prefs: []
  type: TYPE_NORMAL
- en: Deleting records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the `delete` method when you want to remove a record from a table,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more details about this method, visit [https://medoo.in/api/delete](https://medoo.in/api/delete).
  prefs: []
  type: TYPE_NORMAL
- en: That's it regarding how to write basic CRUD operations with Medoo and PDO.
  prefs: []
  type: TYPE_NORMAL
- en: Please check out Medoo's documentation at [https://medoo.in/doc](https://medoo.in/doc)
    for the rest of the methods that you can use. There are other alternatives to
    Medoo, such as Doctrine DBAL at [https://github.com/doctrine/dbal](https://github.com/doctrine/dbal) and Eloquent
    at [https://github.com/illuminate/database](https://github.com/illuminate/database).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you studied a handful of PSRs and CRUD operations. Next, we
    will cover how to put all these together and integrate them with Nuxt. Since PHP
    and JavaScript are two different languages, the only way for them to talk to each
    other is through JSON in the API.
  prefs: []
  type: TYPE_NORMAL
- en: But before we write a script that will enable that, we should look into the
    cross-domain application structure for these two programs.We have been using cross-domain
    application structures for our Nuxt apps since [Chapter 12](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml),
    *Creating User Logins and API Authentication*, so this should be familiar to you.
    Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Structuring cross-domain app directories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again, just like when structuring cross-domain app directories, the following
    is our holistic view for Nuxt and our PHP API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Individually, the directory structure for Nuxt remains the same. We only have
    to make a slight change to the API directory''s structure, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'The directory structure for the PHP API is a suggestion. You can always design
    a structure that you prefer and that suits you the most. So, at a glance, we have
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `/vendor/` directory is where all the third-party packages or dependencies
    are kept.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/public/` directory only contains an `index.php` file that initiates our
    API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/static/` directory for static files, such as a favicon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/config/` directory stores the configuration files, such as MySQL files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/core/` directory stores the common objects and functions that we can use
    across the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/middleware/` directory stores our PSR-15 middleware.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/module/` directory stores the custom modules we will create later, just
    as we did in [Chapter 12](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml), *Creating
    User Logins and API Authentication*, with Koa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `composer.json` file is always located at the root level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `middlewares.php` file is the core location for importing middleware from
    the `/middleware/` directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `routes.php` file is the core location for importing routes from the `/module/`
    directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have the structure ready, you can start writing the top-level code
    that will glue the other code from the different locations and directory into
    a single app in the `index.php` file in the `/public/` directory. So, let''s get
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Put the `foreach` loop in the `routes.php` file to iterate each module that
    you will create later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `routes.php` file in the `/config/` directory that will list the filename
    of your module, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'In this PHP API, the `middlewares.php` file will import a piece of middleware
    that is used to decorate the CRUD operation''s output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'This decorator will print the CRUD operation''s output in JSON in the following
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `outputDecorator.php` in the `/middleware/` directory
    that contains the following code. This will wrap the operation''s output in the
    preceding format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use the `middleware` method from the `zend-stratigility` component to
    create the decorator middleware. Then, we lock down the entire application with
    this middleware by using the router from `league/route` by The League of Extraordinary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `mysql.php` file in the `/core/` directory that returns the Medoo
    instance for the MySQL connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'As we mentioned earlier, the `/public/` directory only contains an `index.php`
    file. This is used to initiate our program, so it contains the script that you
    learned about previously regarding PSRs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that the `middlewares.php` and `routes.php` files are imported
    into this file to produce a PSR-7 response. They are wrapped in the `try` and
    `catch` blocks to catch any HTTP errors, such as 404 and 506 errors. Due to this,
    any output from the module and any errors will be emitted to the browser through
    the last line. Hopefully, this has given you a bird's-eye view on this simple
    API. Now, let's move on and dive into the `/module/` directory in more detail
    to learn how to create modules and routes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the API's public routes and their modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating the API''s public routes and their modules is very similar to the
    API you learned to build in the previous chapters of this book; the main difference
    is the language. We used JavaScript and the Node.js framework – Koa, previously,
    while for the API in this chapter, we are using PHP and PSRs to create a framework-agnostic
    API. So, let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create two directories in the `/module/` directory: one called `Home` and another
    called `User`. These two sub-directories are the modules in this API. In each
    module, create a `/_routes/` directory and an `index.php` file that will import
    the routes from the `/_routes/` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Home` module, output a "Hello world!" message and map it to the `/`
    route, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `User` module, write the CRUD operations so that we can create, read,
    update, and delete our users. So, in the `/_routes/` directory, create five files
    called `fetch_user.php`, `fetch_users.php`, `insert_user.php`,  and `update_user.php`,
    and `delete_user.php`. In each of these files, we will map the route for each
    of the CRUD operations in the `/Controller/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, in the `fetch_users.php` file, we will define a `/users` route
    for listing all the users, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that we import the Medoo instance as `$database` and pass
    it the controller that will perform the **Read** operation and then call the `fetch`
    method to get all the available users.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the next thing we will do is create some CRUD directories: `Insert`, `Fetch`,
    `Update`, and `Delete`. In each of these CRUD directories, we will store the PSR-4
    classes inside the `/Controller/` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'First of all, create an `abstract` class that can be extended by the classes
    in the CRUD directories. This class will only accept the `Medoo\Medoo` database
    in its constructor, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the preceding `abstract` class and extend it to any other classes that
    need to connect to the MySQL database, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: In this class, we use the `select` method to fetch all the users from the `user`
    table in the MySQL database. Medoo will return an `Array` containing the list
    of users or an empty `Array` if there are no users. This result will then be converted
    into JSON using the `JsonResponse` method from `zend-diactoros` in the `fetch_users.php`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, it will be decorated by the middleware in the `/middleware/` directory.
    This will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: That's it regarding the PHP API. It's pretty easy, isn't it? In this exercise,
    we will skip the task of dealing with CORS on the API side as we will be using
    the Nuxt Axios and Proxy modules to handle CORS seamlessly and effortlessly for
    us in the Nuxt app that we are going to create. So, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: You can find this PHP API in `/chapter-16/nuxt-php/proxy/backend/` and the rest
    of the CRUD classes of this API in `/chapter-16/nuxt-php/proxy/backend/module/User/Controller/`
    in this book's GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Nuxt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `@nuxtjs/axios` module is well integrated with the `@nuxtjs/proxy` module
    and is very useful in many cases. Preventing the CORS problem is one of the benefits
    of using these two modules together. You learned how to install and use them in
    [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml), *Writing Plugins and
    Modules*. Let''s recap:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `@nuxtjs/axios` and `@nuxtjs/proxy` modules via npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'Register `@nuxtjs/axios` in the `modules` option in the Nuxt config file, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Note that it is not required to register the `@nuxtjs/proxy` module when you
    are using it with `@nuxtjs/axios`, as long as it is installed and in the `dependencies`
    field in `package.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding configuration, we use `/api/` as the proxy for `http://0.0.0.0:8181`,
    which is where our PHP API is running. So, whenever we use `/api/` in any of our
    API endpoint requests, it is calling `0.0.0.0:8181`. For example, let''s say you
    are making an API call, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@nuxtjs/axios` and `@nuxtjs/proxy` modules will convert that `/api/users`
    endpoint into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'But since we don''t use `/api/` in our PHP API''s routes, we use `pathRewrite`
    in the configuration to `remove` it during the call. Then, the actual URL that''s
    sent by the `@nuxtjs/axios` and `@nuxtjs/proxy` modules to the API is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'Once more, visit the following links for more information about these two modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://axios.nuxtjs.org/](https://axios.nuxtjs.org/) for `@nuxtjs/axios`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/nuxt-community/proxy-module](https://github.com/nuxt-community/proxy-module) for `@nuxtjs/proxy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the installation and configuration are in place, we can start creating
    the **frontend UI** for communicating with the PHP API. We'll look at this in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating CRUD pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again, this is not a completely new task to you as this is almost the same
    as creating the CRUD pages you learned to create in [Chapter 9](232649f7-ae3b-43d7-a74e-55b481c4830c.xhtml),
    *Adding a Server-Side Database*. Let''s recap:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following pages in the `/pages/users/` directory for sending and
    fetching data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, use the following script to fetch all the available users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'The scripts, templates, and directory structure in this Nuxt app are the same
    as the app you learned to create in [Chapter 9](232649f7-ae3b-43d7-a74e-55b481c4830c.xhtml),
    *Adding a Server-Side Database*. The difference is that an `_id` was used in that
    chapter but in this chapter, we''re using `_slug`. By now, you should be able
    to complete the rest of the CRUD pages on your own. However, you can always revisit
    the following sections in [Chapter 9](232649f7-ae3b-43d7-a74e-55b481c4830c.xhtml),
    *Adding a Server-Side Database*, for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating an Add page*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating an Update page*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a Delete page*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have created these pages, you can run the Nuxt app with `npm run dev`.
    You should see the app running on your browser at `localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete source code for this app in `/chapter-16/nuxt-php/proxy/frontend/nuxt-universal/`
    in this book's GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to use the `@nuxtjs/axios` and `@nuxtjs/proxy` modules in
    this Nuxt app, you can find the complete source regarding how to enable CORS in
    the PHP API for the Nuxt app in `/chapter-16/nuxt-php/cors/` in this book's GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: You can also find a copy of the database saved as `user.sql` in `/chapter-16/nuxt-php/`
    in this book's GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's summarize what you've learned in this long chapter. We hope you have
    enjoyed this chapter and found it inspiring.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have not only managed to decouple a Nuxt app from an API,
    similar to what you did in [Chapter 12](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml), *Creating
    User Logins and API Authentication*, but you also managed to write an API in a
    different language, PHP, one of the most popular server-side scripting languages
    in web development. You learned how to install PHP and Apache in order to run
    PHP apps or use the built-in PHP web server for development, all while complying
    with PSR-12, PSR4, PSR7, and PSR-15 in order to build a modern framework-agnostic
    app. You also learned to use the PHP database framework known as Medoo for writing
    CRUD operations, reusing the Nuxt app from [Chapter 9](232649f7-ae3b-43d7-a74e-55b481c4830c.xhtml), *Adding
    a Server-Side Database*, but with a few modifications, and gluing the frontend
    UI and the backend API together perfectly. Now, you also understand HTTP messages
    in more detail and know how to use PDO for modern PHP database management. Well
    done.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will discover what else you can do with Nuxt in terms
    of real-time apps. Here, you will learn about **Socket.io** and **RethinkDB**. We
    will walk you through the installation process for these two technologies. Then,
    you will learn how to perform real-time CRUD operations in a RethinkDB database,
    write real-time code in JavaScript with Socket.io, and integrate them with the
    Nuxt app. This will be another interesting and exciting chapter that we will guide
    you through. So, stay tuned!
  prefs: []
  type: TYPE_NORMAL
