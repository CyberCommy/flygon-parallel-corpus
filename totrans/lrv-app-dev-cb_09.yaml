- en: Chapter 9. Using Security and Sessions Effectively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting and decrypting data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hashing passwords and other data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CSRF tokens and filters in forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using advanced validation in forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Redis to save sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using basic sessions and cookies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a secure API server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is one of the most important things we need to consider when building
    web applications, especially if we're dealing with sensitive user information.
    Laravel provides many ways for us to keep our application secure.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll look at various ways to mask sensitive data, how to secure
    our forms from cross-site attacks, and how to secure an API. We'll also see how
    we can use sessions for building a shopping cart and using Redis to store session
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting and decrypting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When writing applications that deal with sensitive data, we may often want to
    encrypt any data that we store in our database. Laravel provides us with a solution
    to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard installation of Laravel, as well as a properly
    set-up and configured MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is how we''ll complete the recipe using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `app/config` directory, open the `app.php` file and make sure the `key`
    is empty
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, go to the root of the application and generate a new key
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a table in the database to hold our sensitive information using this
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/models` directory, create a file named as `Account.php` by entering
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` file, create the routes to view and submit information
    by adding the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In our `views` directory, create a file named as `accounts.php`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by removing the default key that comes with Laravel. Then, we use the
    `artisan` command to generate a new key for us and it's automatically saved in
    the correct file. The `artisan` command creates a fairly strong key, so we don't
    have to worry about coming up with one on our own.
  prefs: []
  type: TYPE_NORMAL
- en: After you have created a key for an application, make sure it doesn't get changed,
    as that will break your application if you've already used some encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Then we set up a database table that will hold our sensitive data. In this example,
    we'll be storing business names along with some of their financial data.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step is to set up our model, using the `Eloquent` model. To make things
    a little easier, we'll use the getters and setters in the model, so that whenever
    a value is set in our `Account` model, it will automatically get encrypted using
    the Laravel `Crypt::encrypt` class. Also, to get the information back out of the
    database, our model will automatically decrypt it for us.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a couple of routes. The first route will show a form to add
    in information, as well as display anything already saved in the database. The
    next route simply takes the form input and saves it to a new row in our accounts
    table. After adding the information, we'll be redirected back to the account list
    and form page and the new data will be displayed at the bottom of the page.
  prefs: []
  type: TYPE_NORMAL
- en: However, if we look at the database itself, the information we're storing is
    unreadable text. This way, if someone happens to hack into our database, they
    won't get much information.
  prefs: []
  type: TYPE_NORMAL
- en: Hashing passwords and other data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's common practice to hash a user's password when we store it in a database.
    This helps prevent anyone who gets unauthorized access to the database from seeing
    people's passwords. However, we may also want to hide our user's e-mail address
    or other information, so no one will be able to access them as well. We can use
    Laravel's **Hash** to do this easily.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard installation of Laravel, as well as a properly
    set-up and configured MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are the steps for this recipe…
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up the database table by using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named as `register.php` with the help
    of the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` file, create our routes by adding the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start this recipe, we first set up a basic users table to hold a username,
    e-mail address, and password. In this example, the username is the only thing
    that will need to be in regular text.
  prefs: []
  type: TYPE_NORMAL
- en: In our view, we'll create two forms—one for registering, and one for logging
    in. Just to show the raw data from the database, we'll also display a list of
    all the users, as well as the way their e-mail and password will look in the table.
  prefs: []
  type: TYPE_NORMAL
- en: When we submit the registration form, the information is posted to our register
    route and put into an array. For the e-mail and password, we use Laravel's `Hash::make()`
    function to hash it. We then insert the array into our register table and redirect
    back to the form and list page.
  prefs: []
  type: TYPE_NORMAL
- en: After redirecting, we'll see the new row added, our e-mail and password hashed,
    and an unrecognizable string. Interestingly, with the way hashing works, we could
    add two rows using the exact same data, and the hashes would be totally different.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can try to log in using the username, e-mail, and password. That route
    will grab a row from our table that corresponds with the username, then run Laravel's
    `Hash::check()` function on the input values and the database results. If it passes,
    it returns `TRUE` and we can proceed to our application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use this recipe in a production environment, we'd need some validation on
    the input. We might also want to utilize the **Eloquent ORM** to make hashing
    a little easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we don''t need to hide our users'' emails, we could also use Laravel''s
    built in `Auth::attempt()` method. More information about that can be found on
    the Laravel website: [http://laravel.com/docs/security#authenticating-users](http://laravel.com/docs/security#authenticating-users)'
  prefs: []
  type: TYPE_NORMAL
- en: Using CSRF tokens and filters in forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web forms are notorious for hackers trying to access a website or user's information.
    To make our forms a little more secure, we can use a **Cross-Site Request Forgery**
    (**CSRF**) strategy that's built into Laravel. This will stop form submissions
    from outside the user's session.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard installation of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `routes.php` file, create routes to hold and process the form by the
    code given below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `filters.php` file, make sure the `filter` for the `csrf` token is present
    as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `views` directory, create a file named as `cross-site.php`, and add
    two forms for testing as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the browser, go to `http://{your-server}/cross-site` (where `{your-server}`
    is the name of the server we're working on), and then submit each form to see
    the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first step is to create the route for our CSRF form. In the form, all we
    need to do is add the `Form::token()` function; this will insert a hidden field
    with the name `_token`, and the value of our user session ID. For the route where
    the form is submitted, we add the `csrf` before filter to our route. If the request
    is determined to be forged, the page will return with a server error.
  prefs: []
  type: TYPE_NORMAL
- en: Our next form is an example of what would happen if a request was trying to
    be forged. For this form, instead of the `Form::token()` function, we manually
    add the hidden field and add some random value. Then when we submit the form,
    the page will display a fail message with a `TokenMismatchException` error.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Laravel will also generate a `csrf` token automatically when you use the `Form::open()`
    function, so you don't need to add it manually.
  prefs: []
  type: TYPE_NORMAL
- en: Using advanced validation in forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There might be times when we need to validate our forms for something that's
    not part of the framework. This recipe will show you how to build a custom validation
    rule and apply it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard installation of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `views` directory, create a file named `valid.php` to hold our form
    using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php` file, create our routes with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Also in the `routes.php` file, create our custom validation as given in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, we create the form in our view. We ask for a valid e-mail and exactly
    three of the checkboxes to be checked. Since there's no Laravel validation method
    for exactly three checkboxes, we need to create a custom validation.
  prefs: []
  type: TYPE_NORMAL
- en: Our custom validation takes the input array and does a simple count. If it comes
    up to three, it returns `TRUE`. If not, it returns `FALSE` and fails the validation.
  prefs: []
  type: TYPE_NORMAL
- en: Back in our form processing route, all we then need to do is add the name of
    the custom validator we created to our validation rules. If we want to set a custom
    message, we can add that as well.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The additional validators for this recipe are in the `routes.php` file for simplicity.
    If we were to have multiple custom validators, it might be a better idea to put
    them in their own validator files. To do this, we should create a file named `validator.php`
    in our `app` directory and add in any code we want. Then, open up the `global.php`
    file in the `app/start` directory and, at the very end of the file, add the `require
    app_path().'/validator.php'` function. This will load all of our validators automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Building a shopping cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: E-commerce is a huge business on the web. An integral part of most e-commerce
    sites is the use of a shopping cart system. This recipe will walk through how
    to use Laravel sessions to store items for sales and build a shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard installation of Laravel, as well as a properly
    set up and configured MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our database, create a table and add some data with this SQL code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php` file, create the routes for our cart with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `items.php` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `item-detail.php` by the given
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `cart.php` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can go in our browser to `http://{your-server}/items` to view the list
    of items from our database, links to their detail pages, and an option to add
    them to a cart. When added to the cart, they will show at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin this recipe, we need to set up a database table that will hold items
    that we want to add to the cart. We'll also add in a few test items, so we have
    some data to work with.
  prefs: []
  type: TYPE_NORMAL
- en: In our first route, we get all of the existing items in our table and display
    them. We're also nesting in a cart view that will show the items we already added.
    In that nested view, we also send in our cart session, so the list can populate.
  prefs: []
  type: TYPE_NORMAL
- en: Our next route does something similar but it accepts only one item and displays
    the full information.
  prefs: []
  type: TYPE_NORMAL
- en: The next route actually adds the items. First, we get the item from the database
    based on its ID. Then we save the existing cart session to a variable, so we can
    manipulate it. We add the item to the array, using php's `uniqid()` function as
    our key. Then we put the `cart` array back into the `Session` and redirect it.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to remove an item, we first make a way to get the item's ID and remove
    it from the `cart` array. The other way is to just delete all the session and
    start over.
  prefs: []
  type: TYPE_NORMAL
- en: In our view, we'll also notice that we are only allowing the `cart` list to
    show if there actually is anything in the cart.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe can easily be extended to be more full-featured. For example, instead
    of adding a new record if we click on the same item multiple times, we could store
    a total number along with each item. That way, we could add a form field asking
    for the quantity next to the item.
  prefs: []
  type: TYPE_NORMAL
- en: Using Redis to save sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redis is a popular key/value data store and is quite fast. Laravel includes
    Redis support, and makes it easy to interact with the Redis data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need to have a Redis server properly configured and running.
    More information on that can be found at [http://redis.io/](http://redis.io/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `routes.php` file, create the routes as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `redis-login.php` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can open our browser and go to `http://{your-server}/redis-login` and
    fill in the form. After submitting, we will display the information from Redis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first step is to create a simple form that we will use to input data to
    Redis. In our `redis-login` route, we use a view that will ask for a name and
    e-mail address and, when submitted, will post to the `redis-login` route.
  prefs: []
  type: TYPE_NORMAL
- en: After posting, we create a new Redis instance using the `Redis::connection()`
    function, which will use the default settings found in our `app/config/database.php`
    file. To store the information in Redis, we're using a hash and setting the data
    using the `hset()` function. Our Redis instance can use any command that Redis
    accepts, so we could easily choose between functions such as `set()` or `sadd()`.
  prefs: []
  type: TYPE_NORMAL
- en: Once the data is in Redis, we redirect to a route that will display the data.
    For that, we just need to call the `hget()` function with the key and the field
    we added.
  prefs: []
  type: TYPE_NORMAL
- en: Using basic sessions and cookies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be times when we want to pass data from one page of our app to another
    page without needing to store the information in a database. To accomplish this,
    we can use the various `Session` and `Cookie` methods that Laravel provides us.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `views` folder, create a file named `session-one.php` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php` file, create our routes as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, we create a simple form that we will use to submit information to
    the sessions and cookies. After posting the values, we take the `email` field
    and add it to a regular session. The `name` field will be added to a flash session
    and the `city` will be added to a cookie. Also, we'll set the cookie to expire
    after 30 minutes. Once they're all set, we redirect to our second page, and make
    sure we pass the cookie to the return value.
  prefs: []
  type: TYPE_NORMAL
- en: Our second page simply takes the values we set and displays them to verify that
    they were set correctly. At this point, once the request is complete, our flash
    session, the name, should no longer be available.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on through to our third page, we add in some checks to make sure
    the sessions and cookies still exist, using the `has()` method on both. Our `email`
    and `city` should still display, but the `name` session should not. We then remove
    the `email` session using the `forget()` method. When we reload the page, we'll
    notice that the only thing that is still displayed is the `city` cookie.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Flash data is only available on the next request we make, and then it is removed.
    However, if we'd like to keep our flash data, we can use the `Session::reflash()`
    command and it will send the data to our next request as well. If we have multiple
    flash data, we can also choose specific sessions to keep for the next request
    using the `Session::keep(array('your-session-key', 'your-other-session'))` function.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a secure API server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll create a simple API to display some information from our
    database. To control who has access to the data, we allow users to create keys
    and use that key in their API request.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard installation of Laravel and a configured
    MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, we''ll follow these given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our database, create a table to hold the API keys as given in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the database, create a table for some example data to access as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the `models` directory, create a file named as `Api.php`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the `models` directory, create a file named as `Show.php`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the `views` directory, create a file named `api-key.php`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In the `routes.php` file, create the routes to allow for the `api-key` registration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php`, create the routes for accessing the `api` by the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: To test it out, in the browser, go to `http://{your-server}/api-key` (where
    `{your-server}` is the name of the development server) and fill in the form. On
    the next page, copy the key that was generated. Then, go to `http://{your-server}/api/{your-copied-key}/shows`
    and a list of shows should appear in the `json` format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by setting up our tables and models. Our API table will be used to
    check for the key and the `show` table will be the test data we will use the key
    to access.
  prefs: []
  type: TYPE_NORMAL
- en: Our next task is to create a way to generate keys for our application. In this
    example, we'll only take a name value. After submitting, we create a random, 16-character
    string that will be the user's key. We then save the information to the table
    and display the key to the user.
  prefs: []
  type: TYPE_NORMAL
- en: To use this key, we create two routes to display the information. The first
    route uses the `{api_key}` wildcard in the URL, and passes that value to our function.
    We then query the database for that key and make sure the status is still active.
    This way, if we decide to revoke a user's key, we can set the status to false
    and they won't be able to use the API. If they don't exist or the status is false,
    we respond with the HTTP code of 401, to show that they aren't authorized. Otherwise,
    we return the Eloquent object that will allow us to display the records in the
    `json` format.
  prefs: []
  type: TYPE_NORMAL
- en: Our second route will display the records of a single show. For that URL, we
    use the `{api_key}`wildcard for the key and the `{show_id}` wildcard for the ID
    of the show. We pass those to the functions, and then check the key as before.
    If the key is valid, we make sure a show with that ID exists, and use the Eloquent
    object again to display only the show with the given ID in the `json` format.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also have the option of using a Laravel filter, if we'd rather have the api
    keys posted instead. To do that, we'd create a new filter in the `filters.php`
    file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, for our `shows` routes, we respond to a post request and add the
    `before` filter as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
