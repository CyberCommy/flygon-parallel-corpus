- en: JavaScript, Ruler of the Frontend
  prefs: []
  type: TYPE_NORMAL
- en: If you're starting to grasp that JavaScript is integral to the way modern websites
    and web applications function, you're on the right path. Without JavaScript, most
    of the user interfaces we take for granted on the web wouldn't exist. Let's take
    a closer look at how JavaScript brings the frontend together. We'll be working
    with a couple of React applications, as well as comparing and contrasting a Python
    application in order to further our understanding of the whys and hows of JavaScript's
    importance on the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Building interactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using dynamic data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding modern applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be prepared to work with the code provided in the `Chapter-10` directory of
    the repository at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-10](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-10).
    As we'll be working with command-line tools, also have your Terminal or command-line
    shell available. We'll need a modern browser and a local code editor.
  prefs: []
  type: TYPE_NORMAL
- en: Building interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at a simple **Single-Page Application** (**SPA**):'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `simple-reactjs-app` directory in `chapter-10` (`cd simple-reactjs-app`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the dependencies with `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app with `npm start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access the app at `http://localhost:3000`. Here''s what you''ll see:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2ab2abff-d8e7-4629-b096-18ce5772a770.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Simple React app
  prefs: []
  type: TYPE_NORMAL
- en: 'As you click through the detail buttons and inspect your network tab, you will
    see that the page does not reload and it only loads the JSON data from the server.
    This is a very basic example of how an SPA functions: with minimal server usage,
    the user experience''s interactions are streamlined, contributing to an efficient,
    low-overhead workflow. You''re probably familiar with other SPAs, such as Gmail,
    Google Maps, and Facebook, though the underlying technologies vary.'
  prefs: []
  type: TYPE_NORMAL
- en: It may be taken for granted in this day and age of internet technology, but
    JavaScript is the foundation of how these apps work. Without JavaScript, we'd
    have a lot of page reloading and high wait-times, even with Ajax.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can work with dynamic data by comparing and contrasting a basic
    Python example with a modern React application.
  prefs: []
  type: TYPE_NORMAL
- en: Using dynamic data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s first take a look at a Python Flask example:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `flask` directory in `chapter-10` (`cd flask`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll need to install a few pieces for our setup. These instructions are
    for Python:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a virtual environment with `python3 -m venv env`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate it using `. env/bin/activate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the requirements: `pip3 install -r requirements.txt`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you can start the application: `python3 app.py`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access the page at `http://localhost:5000`. You''ll see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2ca6bb7c-1df9-4cba-8575-cfb6ee5ad305.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Basic Flask application
  prefs: []
  type: TYPE_NORMAL
- en: 'Play around with entering and not entering your name and take a look at the
    fact that the page reloads when you do so (I''ve added a timestamp to make it
    easier to see as the page reload can happen too quickly to see). This is a very
    basic Flask application, and there are more efficient ways to do validation work
    with a combination of Python and JavaScript, but at a base level, even with some
    Flask-based form validation tools, the validation and interaction we''re seeing
    happens on the backend. The server is hit every time we hit Submit. The following
    screenshot shows server-side validation if you don''t enter a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8928d486-d5e2-499b-81e1-a0f56af3f9c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 - Basic Flask validation
  prefs: []
  type: TYPE_NORMAL
- en: Note that the timestamp changes, indicating a re-render from the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make this a bit better for our form validation interaction by revising
    our simple React application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `reactjs-app-form` directory: `cd reactjs-app-form`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the dependencies: `npm install`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the server: `npm start`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access the page at `http://localhost:5000`. Here''s an updated version of our
    simple app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9536ba0a-56b9-4802-bca2-47e41675bbc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Simple app with dynamic data
  prefs: []
  type: TYPE_NORMAL
- en: 'Now try working with it and notice how if you change one of the primary fields,
    the fields on the left will change too. Additionally, it''s saving the JSON *as
    you edit* so that if you refresh the page, your changes persist. This is thanks
    to the power of JavaScript: the React frontend is handing all the changes you''re
    making throughout parts of the application and then an Express backend is serving
    and saving JSON files. In this case, the updates to the markup on the page are
    happening in real time. Granted, we''re hitting the server with a save and read
    operation each time we edit, but that''s because of the way the application is
    designed. To persist changes, it would be trivial to create a Save button instead
    of the saving happening on the change of a field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''d like to work with this example, there are a few things you''ll need
    to do:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, navigate to the directory in a new shell window (leave the previous
    instance running): `cd client`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Begin the program: `npm start`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Express server will then gather the built files created by React's running
    process versus in the pre-built files that are already in the directory.
  prefs: []
  type: TYPE_NORMAL
- en: Input validation and error handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One part about dynamic data that we can see that might be important for an
    application such as this is *input validation* and *error handling*. Notice how
    in our application, if the email field is blank or we haven''t entered a valid
    email, it will have a red outline. Otherwise, it will have a green outline. As
    you type a valid email address and select the next field, you can see that the
    red outline will change to green without hitting the server (except to save the
    data, as we discussed before). This is client-side validation, and it''s extremely
    powerful when creating a streamlined user experience: the user does not have to
    hit save and wait for a server response in order to see whether they''ve entered
    incorrect data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might have noticed one detail when working with the Phone field: it''s
    restricted to numbers. If you look at `client/src/CustomerDetails.js`, we''ve
    restricted the type to numbers here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a couple of other React pieces in here also. Let''s take a look at
    the `handleChange` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Axios is a library that simplifies Ajax calls, and I used it here instead of
    `fetch` just as a demonstration. You will probably see Axios being used in React
    work, although you can always choose to use raw `fetch`. However, let's focus
    on the `this.validate(event.target)` line.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the content of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`validateEmail()` is a magic function! You can find it in `client/src/validation.js`
    and it uses a *regular expression* to pattern-match the input string to see whether
    it looks like a correctly formatted email address. Then, depending on whether
    the function returns `true` or `false`, we set a validation state that React will
    then use to set the color of the email field''s border.'
  prefs: []
  type: TYPE_NORMAL
- en: Frontend validation and error handling are incredibly important for a smooth
    user experience, but it's only part of the story. The other part is security.
  prefs: []
  type: TYPE_NORMAL
- en: Security and data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you know from working with the developer tools in the browser, it's possible
    to circumvent pretty much any frontend restrictions if you try hard enough. For
    example, with our Phone field, though we've restricted it on the frontend, we
    can always inspect the HTML and enter in any value that we want. As a quick note,
    it's important to also validate your data on the backend to be sure it's properly
    formatted.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that corporate data breaches and hacks always have in common is that
    the attacker is taking advantage of a weakness in the system being used. Very
    rarely is it actually a case of a leaked password; more often, it's weak cryptography
    or even a frontend problem. We'll discuss security further in [Chapter 17](655b37ac-84df-4d2b-abda-b9c88fe9f6f2.xhtml),
    *Security and Keys*. You can learn more at [OWASP.org](https://OWASP.org).
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue and review what we've learned.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding modern applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, it should come as no surprise that all modern web applications
    are inextricably tied to using JavaScript. There's no modern web without it, as
    interactions simply cannot happen in real time without it. The server side has
    its place and importance, but the crux of what the user sees and interacts with
    is controlled by JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Just like CSS is a complement to HTML, JavaScript is the third friend in the
    group, creating meaningful experiences out of a collection of markup and styling.
    As the muscles of a web app, it provides us with rich interactions and logic,
    and is the foundation of all SPAs. It truly is a tool of wonder and beauty.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With JavaScript, we can go beyond the "web page" and create fully fledged web
    applications. From email systems to banks to spreadsheets to nearly anything you
    use a computer for, JavaScript is there to help you.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will venture into using JavaScript on the server side
    with Node.js. We won't completely leave the frontend behind, but rather, we'll
    see how they tie together.
  prefs: []
  type: TYPE_NORMAL
