- en: Chapter 9.  Building a Frontend Process with Node.js and NPM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned before in previous chapters, we can use the facilities from
    Node Package Manager (NPM) to replace Gulp and the **Grunt** task manager, which
    are the most popular tools for dealing with frontend dependencies. We can combine
    both tools, but in this chapter we will explore only NPM and some commands that
    will help us create our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: We will create building tasks to lint, concatenate, and minify Javascript files,
    optimize images, compile SASS stylesheets, and deploy the application to a server
    in the cloud, by just using the command line. Furthermore, for this example we
    will use the Loopback.io framework to create the application example with MongoDB
    as the database.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: How to create an application using only the Loopback.io CLI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install eslint, imagemin, and browserify
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create tasks to lint errors, concatenate JS files, and optimize images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deal with SASS import and compile
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deploy an application to Heroku using the Heroku toolbelt
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, we will build a simple gallery application, very similar
    to [chapter 04](ch04.html "Chapter 4. Dont Take a Photograph, Make It – An App
    for Photographers"), *Don''t Take a Photograph, Make It – An App for Photographers,*
    but this time we will using a Restful API with the Loopback.io framework. We''ll
    see how to create building tasks using the NPM command line, and the final result
    will be very similar to the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are building](img/image_09_001.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: Home screen
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Creating the baseline application
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although we already used the Loopback framework, we strongly recommend that
    you install it again, to ensure that you will have the most up-to-date version
    on your machine:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example, we will not make many changes to the generated code, since
    our focus is to create building tasks, but we will use some interesting features
    of the Loopback framework using the command line:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell, and type the following command:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Name the application chapter-09.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose empty-server (an empty LoopBack API, without any configured models or
    data source's) and press Enter.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have created the application scaffold. Don't worry about the next commands
    suggested by the terminal output, as we will discuss these commands later in the
    book.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about **Loopback CLI** at this link: [https://docs.strongloop.com/display/public/LB/Command-line+reference](https://docs.strongloop.com/display/public/LB/Command-line+reference).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Datasource to the project
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we create our models as we did in [Chapter 06](ch06.html "Chapter 6. 
    Building a Customer Feedback App with a Restful API and Loopback.io"), *Building
    a Customer Feedback App with Restful API and Loopback.io,* this time, we will
    add the datasource first. This is because we are using the command line to create
    the entire project. This means that we don't edit any files manually.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'A good practice, when we use the command line, is to create the datasource
    first instead of the application models. This procedure prevents the need to manually
    edit the files to connect models with the datasource application:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'In  terminal/shell, go to the chapter-09 folder and type the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Fill in the following questions as shown in the following screenshot:![Adding
    a Datasource to the project](img/image_09_002.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Datasource setup
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: By default, we don't need to set up a user and password if we are working with
    MongoDB on localhost. Don't worry about this now, but later we will see how to
    change this configuration to deploy the application. If you want, you can add
    a user and password in your local environment too.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Creating application models
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s create the application models; for this example, we are using two
    models:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell inside the chapter-09 folder, and type the following
    command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Use the model name gallery.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the questions as shown in the following screenshot:![Creating application
    models](img/image_09_003.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gallery model setup
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: After the second property, **press **Enter**** to finish model creation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell inside the chapter-09 folder, and type the following
    command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Use the model name bike.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the questions as shown in the following screenshot:![Creating application
    models](img/image_09_004.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bike model setup
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: After the third property, **press **Enter**** to finish model creation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about model creation at this link: [https://docs.strongloop.com/display/public/LB/Model+generator](https://docs.strongloop.com/display/public/LB/Model+generator).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry about the relationships between the models at this time, we will
    see this in the next step, using only the command line.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Adding relationships between application models
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s define the relationship between our models; we will use two types of
    relationship, which are:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '**hasmany**: A gallery can have many bikes'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**belongsTo**: A bike can have one gallery'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remember, we are just trying to make something useful, but not complex, to
    illustrate the building process with NPM, follow these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell inside the chapter-09 folder and type the following
    command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Choose the bike model and fill in the questions as shown:![Adding relationships
    between application models](img/image_09_005.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bike model relationship
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Choose the gallery model and fill in the questions with the following information:![Adding
    relationships between application models](img/image_09_006.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gallery model relationship
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: So let's check whether everything has been written properly.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the common/models/gallery.json file and you will see the following highlighted
    code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open the common/models/bike.json file and you will see the following highlighted
    code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about **Relation generator** at this link: [https://docs.strongloop.com/display/public/LB/Relation+generator](https://docs.strongloop.com/display/public/LB/Relation+generator).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Using only three commands, we managed to create the basis for our sample application.
    The next step is to create a static website in the client's folder.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a static site
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we did in [chapter 06](ch06.html "Chapter 6.  Building a Customer Feedback
    App with a Restful API and Loopback.io"), *Building a Customer Feedback App with
    Restful API and Loopback.io* let''s set up the client folder as a static site:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Rename the server/boot/root.js file to server/boot/_root.js.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following highlighted lines to server/middleware.json:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inside the ./client folder, create a new file called index.html and add the
    following content:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now it is time to check the previous changes and see the final result in your
    browser.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Open your favorite browser and go to http://localhost:3000/.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the **Hello Node 6 Blueprints!** message.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: We also have the Restful API at http://localhost:3000/api/bikes and http://localhost:3000/api/galleries.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Now we will see how to restructure some of the directories to prepare the application
    for deployment in the cloud using the NPM building tasks.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the application folder
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our refactoring process includes two steps.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: First, let's create a directory for the application source files, such as JavaScript,
    SCSS, and images files.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: In the second step, we will create some directories within the client folder
    to receive our scripts.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Let's create the source folder for images, libs, scripts, and scss files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Creating the images folder
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this folder, we will store the images before processing an optimization technique
    using imagemin-cli.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Inside the root project, create a folder called src.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the src folder, create a folder called images.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the images folder, create a folder called gallery.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the sample images file for [chapter 09](ch09.html "Chapter 9.  Building
    a Frontend Process with Node.js and NPM"), *Building a Frontend Process with Node.js
    and NPM* from the Packt website ([www.packtpub.com](http://www.packtpub.com))
    or from the official book repository on GitHub, and paste the images into the
    gallery folder.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about imagemin cli at this link: [https://github.com/imagemin/imagemin-cli](https://github.com/imagemin/imagemin-cli).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Creating the libraries folder
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The libraries folder will store some jQuery plugins. Inside the src folder,
    create a folder called libs.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Creating the scripts folder
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we are using jQuery and some plugins, we will need to write some code to
    use the jQuery libs; we will do that using this folder:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Inside the src folder, create a folder called scripts.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside src/scripts folder, create a file called gallery.js and add the following
    code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, we are using only a single plugin, but in large applications,
    it is very common to use several plugins; in this case, we would have a file for
    each feature.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Then, targeting a performance improvement in our application, we recommend concatenating
    all the scripts into a single file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Creating the SASS folder
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The SASS folder will store the scss files. We are using the Bootstrap framework,
    and for this example we will set up the Bootstrap framework using the SASS separated
    version; don''t worry about this now, as later in the chapter we will see how
    to get these files:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Inside the src folder, create a folder called scss.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the scss folder, create a folder called vendor.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Bower
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we have seen in previous chapters, we will use Bower to manage frontend
    dependencies:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Create a file called .bowerrc and save it in the root folder.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content to the .bowerrc file:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open terminal/shell and type the following command:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Fill in the questions as shown in the following screenshot:![Installing Bower](img/image_09_007.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bower.json setup
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Installing application dependencies
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we are using just one jQuery plugin plus the Bootstrap framework,
    so let''s first install Bootstrap using the Bower CLI:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Just open the src/components folder to check the Bootstrap and jQuery folders.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will install the jQuery fancybox plugin in the images gallery. Open
    the terminal/shell and type the following command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So the src folder will have the following structure at this point:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: components/
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bootstrap/
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fancybox/
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jquery/
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the scss folder structure
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s set up the scss folder to compile the bootstrap.scss files:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Open src/components/bootstrap folder and copy all the contents from SCSS folder.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the content inside the src/scss/vendor folder.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called main.scss inside the src/ folder and add the following
    content:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Many developers do not use the Bootstrap framework this way, some just use the
    bootstrap.css or bootstrap.min.css files in their projects. This is ok, but when
    we use the framework the way shown here, we can use all the framework's resources
    in our own stylesheet, so we can use all mixins and variables within our stylesheet.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the highlighted code came from Bootstrap mixins and we can apply
    it to our own stylesheet:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about SASS at this link: [http://sass-lang.com/](http://sass-lang.com/).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the client folder
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The client folder will have a pretty basic structure for any web application
    with folders to store CSS, JavaScript, and images files.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we will use the latest stable version of AngularJS to create
    the pages of our application:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the client folder, create the following folders:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: css/
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: images/gallery/
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: js/
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: js/libs/
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: js/scripts/
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: views/
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After creating all these folders, the client directory will look like the following
    screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![Refactoring the client folder](img/image_09_008.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: Client folder structure
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Adding the application views
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now is time to create the application views folder to store all the application
    templates:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the client/src folder, create a new file called home.html and add the
    following code:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Inside the client/src folder, create a new file called galleries.html and add
    the following code:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the client/index.html file and replace the code with the following content:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Installing AngularJS files
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it is time to install the AngularJS files and create the application. In
    this example, we will explore the AngularJS SDK from the Loopback framework later
    in this section; for this we choose to use AngularJS to build our frontend application:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about AngularJS at this link: [https://docs.angularjs.org/api](https://docs.angularjs.org/api).'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Creating the AngularJS application
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally we will create the AngularJS application, so follow the next steps:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the client/js folder, create a new file called app.js and add the following
    code:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Don't worry about the lbServices dependency at this point; later in this chapter
    we will see how to create this file using the AngularJS SDK tool built with the
    Loopback framework.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the client/js folder, create a new file called app.config.js and add
    the following code:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Inside the client/js folder, create a new file called app.routes.js and add
    the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Inside the client/js folder, create a new file called controllers.js and add
    the following code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using Loopback's AngularJS SDK
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the built-in AngularJS SDK from the Loopback framework to automatically
    generate all application services:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The previous command will create a file called services.js inside the client/js
    folder with all the methods (Create, Read, Update, and Delete) and many more available
    in the Restful API created by the Loopback framework.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can check your local API by running the npm start command in your terminal/shell
    at the root project folder. The API will be available at http://0.0.0.0:3000/explorer.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'The lbServices section has the following CRUD methods and many others:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To use one of these methods, we just need to inject the factory into the Angular
    controller as the following highlighted code:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then we can use the methods inside the controllers, as in the following example:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is a simple and very useful service to deal with all endpoints created
    in our application for all the models that we have.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the application is already almost complete, but we still need
    to add some content to make it more pleasant.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Let's create some content. As already mentioned earlier, you can download the
    entire sample code for the book from the Packt website ([www.packtpub.com](http://www.packtpub.com)),
    or directly from the book's GitHub repository.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Adding content to the application
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can add content in two ways, the first is using the endpoints created by
    the application and the second is by using the migration file.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following lines, we will show how to use the second option; it may be
    a brief and interesting procedure for creating a migration file:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the server/boot/ folder, create a file called create-sample-models.js
    and add the following content to create a migration file for **Gallery Model**:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Inside the server/boot/ folder, add the following content to create a migration
    file for **Bike Model**:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget to delete this file after the first deployment to **Heroku**.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Building tasks
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now is the time to create our task using only NPM.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin, it is important to keep in mind that NPM has two special commands
    that are invoked directly, start and test. So we will use the run command to run
    all the other tasks we create.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'Our goals in this section are to:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Copy some files from the source directory to the client directory
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify errors in JavaScript files
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile SASS files from src/scss and save them in the client/css folder
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize images from src/images/gallery to client/images/gallery
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concatenate JavaScript files from src/scripts to client/js/scripts
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the dependencies
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To accomplish these tasks, we need to install some Command Line Interface (CLI)
    tools:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following commands:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Our purpose in this example is to show how to use the building tools, so we
    will not go too deep into each of them.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: But before we go any further, let's set up the JavaScript validator eslint.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about eslint at this link: [http://eslint.org/](http://eslint.org/).'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the root project, create a file called .eslintrc.json and add the following
    code:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Tip
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about Eslint rules at : [http://eslint.org/docs/rules/](http://eslint.org/docs/rules/).'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Creating the copy task
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create each task before inserting it into our package.json file; this
    way it is easier to understand the procedure of each.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'The copy tasks will be the following:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Copy the jQuery file
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the AngularJS main library
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the AngularJS resources library
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the AngularJS ui-router library
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So we need to copy these files (jQuery and AngularJS) from the source folder
    to the client folder:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The last copy task will execute all the other copy tasks:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Don't worry about running the copy tasks at the moment; later in the chapter
    we will execute them one by one before deployment.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Creating the SASS task
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The SASS task will be very simple, we will just compile the scss files and
    insert them into the client/css folder:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Creating the linting task
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the .eslintrc.json configuration to apply to all JavaScript files
    in the client/js folder:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Creating the image optimization task
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another important task in any web application is to optimize all the image
    files, for performance reasons:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Creating the concatenate task
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The concat task will concatenate all scripts files from libs and scripts:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The last concat task executes all the other concat tasks:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Creating the build task
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The build task is just the execution of each of the previous steps in a single
    task:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now let''s add all the tasks to the package.json file. Open the package.json
    file and add the following highlighted code:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Using tasks with individual commands
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned before, we can perform each of the tasks that we have created
    individually.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to optimize the image files, we can run the imagemin task only.
    Just open the terminal/shell and type the following command:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The output on the terminal will be the following:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We can do the same for each task.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Heroku Cloud
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step to deploy our application is to create a free account on **Heroku
    Cloud Service**:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://signup.heroku.com/](https://signup.heroku.com/) and create a
    free account.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the **Heroku toolbelt** for your platform at [https://toolbelt.heroku.com/](https://toolbelt.heroku.com/).
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the installation process for your platform.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you must have the Heroku toolbelt on your machine, to test it.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The terminal output lists all the possible things to do with **Heroku CLI**.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The book assumes that you already have git source control installed on your
    machine; if you don''t it have yet, check out this page: [https://git-scm.com/downloads](https://git-scm.com/downloads).'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Heroku application
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will create an application and send it to your newly created Heroku
    account:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called .Procfile and save it at the root project folder.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Paste the following code into the .Procfile file:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The previous command initializes a git repository.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'The git add command adds all files to version tracking:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The git commit command send all files to version control on your local machine.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now it is time to log in to your Heroku account and send all the project files
    to Heroku git source control.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候登录您的Heroku帐户并将所有项目文件发送到Heroku git源代码控制。
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/ shell并输入以下命令：
- en: '[PRE53]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Enter your username and password.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的用户名和密码。
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/ shell并输入以下命令：
- en: '[PRE54]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The previous command will use strongloop-buildpacks to configure and deploy
    a Loopback application.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将使用strongloop-buildpacks来配置和部署Loopback应用程序。
- en: Creating a deploy.sh file
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个deploy.sh文件
- en: 'Finally, we will create our deploy task using a .sh file:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用.sh文件创建我们的部署任务：
- en: Create a folder called bin in the root folder.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根文件夹中创建一个名为bin的文件夹。
- en: Inside the bin folder, create a file called deploy.sh.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在bin文件夹内，创建一个名为deploy.sh的文件。
- en: 'Add the following code to the bin/deploy.sh file:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到bin/deploy.sh文件的末尾：
- en: '[PRE55]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add the following lines of code at the end of all tasks in the package.json
    file:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在package.json文件的所有任务的末尾添加以下代码行：
- en: '[PRE56]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now, every time you make a commit with some changes and type the npm run deploy
    command, the engine will start the deploy.sh file and upload all the committed
    changes to Heroku Cloud Service.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当您进行一次提交并输入npm run deploy命令进行一次更改时，引擎将启动deploy.sh文件并将所有已提交的更改上传到Heroku云服务。
- en: 'Open the terminal/shell and type the following command:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/ shell并输入以下命令：
- en: '[PRE57]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'If you are facing errors with permissions, do the following. Open the terminal/shell
    inside the bin folder and type the following command:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您遇到权限错误，请执行以下操作。在bin文件夹内打开终端/ shell，并输入以下命令：
- en: '[PRE58]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'By default, Heroku Cloud Service will create a URL for your application, like
    this:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Heroku云服务将为您的应用程序创建一个URL，就像这样：
- en: https://some-name-1234.herokuapp.com/.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: https://some-name-1234.herokuapp.com/。
- en: 'At the end of the output on the terminal, you will see some very similar to
    the following lines:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端输出的末尾，您将看到类似以下行的内容：
- en: '[PRE59]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The final result will be our sample application deployed to Heroku Cloud Service.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果将是我们的示例应用程序部署到Heroku云服务。
- en: 'Just got to https://yourURL-some-23873.herokuapp.com/ and you will see the
    following result:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 只需转到https://yourURL-some-23873.herokuapp.com/，您将看到以下结果：
- en: '![Creating a deploy.sh file](img/image_09_009.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个deploy.sh文件](img/image_09_009.jpg)'
- en: Application on Heroku Cloud Service
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku云服务上的应用程序
- en: 'When you click on the Bikes View Gallery button, you will see the bike gallery,
    as shown here:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 当您单击“自行车查看画廊”按钮时，您将看到自行车画廊，如下所示：
- en: '![Creating a deploy.sh file](img/image_09_010.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个deploy.sh文件](img/image_09_010.jpg)'
- en: Bikes gallery
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 自行车画廊
- en: Also, when you click on each bike, you will see the fancybox plugin in action.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当您单击每辆自行车时，您将看到fancybox插件在起作用。
- en: Summary
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explore a little more of the Loopback framework and its
    command line interface.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入地探索Loopback框架及其命令行界面。
- en: Also, we have seen how to configure an AngularJS application using the Loopback
    AngularJS SDK, creating all services for each endpoint of the application.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了如何使用Loopback AngularJS SDK配置AngularJS应用程序，为应用程序的每个端点创建所有服务。
- en: We then explored the facilities using NPM as a single build tool.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用NPM作为单一的构建工具来探索这些设施。
- en: We also addressed how to create and set up an account on Heroku, and how to
    automate the deployment of our application by integrating three different tools,
    Loopback, Git, and the Heroku toolbelt.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了如何在Heroku上创建和设置帐户，以及如何通过集成Loopback、Git和Heroku工具包来自动部署我们的应用程序。
- en: In the next chapter, we will see how to use the concept of containers to run
    a Node.js application.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用容器的概念来运行Node.js应用程序。
