- en: Chapter 9.  Building a Frontend Process with Node.js and NPM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned before in previous chapters, we can use the facilities from
    Node Package Manager (NPM) to replace Gulp and the **Grunt** task manager, which
    are the most popular tools for dealing with frontend dependencies. We can combine
    both tools, but in this chapter we will explore only NPM and some commands that
    will help us create our application.
  prefs: []
  type: TYPE_NORMAL
- en: We will create building tasks to lint, concatenate, and minify Javascript files,
    optimize images, compile SASS stylesheets, and deploy the application to a server
    in the cloud, by just using the command line. Furthermore, for this example we
    will use the Loopback.io framework to create the application example with MongoDB
    as the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create an application using only the Loopback.io CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install eslint, imagemin, and browserify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create tasks to lint errors, concatenate JS files, and optimize images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deal with SASS import and compile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deploy an application to Heroku using the Heroku toolbelt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, we will build a simple gallery application, very similar
    to [chapter 04](ch04.html "Chapter 4. Dont Take a Photograph, Make It – An App
    for Photographers"), *Don''t Take a Photograph, Make It – An App for Photographers,*
    but this time we will using a Restful API with the Loopback.io framework. We''ll
    see how to create building tasks using the NPM command line, and the final result
    will be very similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are building](img/image_09_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Home screen
  prefs: []
  type: TYPE_NORMAL
- en: Creating the baseline application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although we already used the Loopback framework, we strongly recommend that
    you install it again, to ensure that you will have the most up-to-date version
    on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we will not make many changes to the generated code, since
    our focus is to create building tasks, but we will use some interesting features
    of the Loopback framework using the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell, and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Name the application chapter-09.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose empty-server (an empty LoopBack API, without any configured models or
    data source's) and press Enter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have created the application scaffold. Don't worry about the next commands
    suggested by the terminal output, as we will discuss these commands later in the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about **Loopback CLI** at this link: [https://docs.strongloop.com/display/public/LB/Command-line+reference](https://docs.strongloop.com/display/public/LB/Command-line+reference).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Datasource to the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we create our models as we did in [Chapter 06](ch06.html "Chapter 6. 
    Building a Customer Feedback App with a Restful API and Loopback.io"), *Building
    a Customer Feedback App with Restful API and Loopback.io,* this time, we will
    add the datasource first. This is because we are using the command line to create
    the entire project. This means that we don't edit any files manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good practice, when we use the command line, is to create the datasource
    first instead of the application models. This procedure prevents the need to manually
    edit the files to connect models with the datasource application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In  terminal/shell, go to the chapter-09 folder and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Fill in the following questions as shown in the following screenshot:![Adding
    a Datasource to the project](img/image_09_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Datasource setup
  prefs: []
  type: TYPE_NORMAL
- en: By default, we don't need to set up a user and password if we are working with
    MongoDB on localhost. Don't worry about this now, but later we will see how to
    change this configuration to deploy the application. If you want, you can add
    a user and password in your local environment too.
  prefs: []
  type: TYPE_NORMAL
- en: Creating application models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s create the application models; for this example, we are using two
    models:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell inside the chapter-09 folder, and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Use the model name gallery.
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the questions as shown in the following screenshot:![Creating application
    models](img/image_09_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gallery model setup
  prefs: []
  type: TYPE_NORMAL
- en: After the second property, **press **Enter**** to finish model creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell inside the chapter-09 folder, and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Use the model name bike.
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the questions as shown in the following screenshot:![Creating application
    models](img/image_09_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bike model setup
  prefs: []
  type: TYPE_NORMAL
- en: After the third property, **press **Enter**** to finish model creation.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about model creation at this link: [https://docs.strongloop.com/display/public/LB/Model+generator](https://docs.strongloop.com/display/public/LB/Model+generator).'
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry about the relationships between the models at this time, we will
    see this in the next step, using only the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Adding relationships between application models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s define the relationship between our models; we will use two types of
    relationship, which are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**hasmany**: A gallery can have many bikes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**belongsTo**: A bike can have one gallery'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remember, we are just trying to make something useful, but not complex, to
    illustrate the building process with NPM, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell inside the chapter-09 folder and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Choose the bike model and fill in the questions as shown:![Adding relationships
    between application models](img/image_09_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bike model relationship
  prefs: []
  type: TYPE_NORMAL
- en: Choose the gallery model and fill in the questions with the following information:![Adding
    relationships between application models](img/image_09_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gallery model relationship
  prefs: []
  type: TYPE_NORMAL
- en: So let's check whether everything has been written properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the common/models/gallery.json file and you will see the following highlighted
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the common/models/bike.json file and you will see the following highlighted
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about **Relation generator** at this link: [https://docs.strongloop.com/display/public/LB/Relation+generator](https://docs.strongloop.com/display/public/LB/Relation+generator).'
  prefs: []
  type: TYPE_NORMAL
- en: Using only three commands, we managed to create the basis for our sample application.
    The next step is to create a static website in the client's folder.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a static site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we did in [chapter 06](ch06.html "Chapter 6.  Building a Customer Feedback
    App with a Restful API and Loopback.io"), *Building a Customer Feedback App with
    Restful API and Loopback.io* let''s set up the client folder as a static site:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename the server/boot/root.js file to server/boot/_root.js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following highlighted lines to server/middleware.json:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the ./client folder, create a new file called index.html and add the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now it is time to check the previous changes and see the final result in your
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Open your favorite browser and go to http://localhost:3000/.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the **Hello Node 6 Blueprints!** message.
  prefs: []
  type: TYPE_NORMAL
- en: We also have the Restful API at http://localhost:3000/api/bikes and http://localhost:3000/api/galleries.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will see how to restructure some of the directories to prepare the application
    for deployment in the cloud using the NPM building tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the application folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our refactoring process includes two steps.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's create a directory for the application source files, such as JavaScript,
    SCSS, and images files.
  prefs: []
  type: TYPE_NORMAL
- en: In the second step, we will create some directories within the client folder
    to receive our scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create the source folder for images, libs, scripts, and scss files.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the images folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this folder, we will store the images before processing an optimization technique
    using imagemin-cli.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the root project, create a folder called src.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the src folder, create a folder called images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the images folder, create a folder called gallery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the sample images file for [chapter 09](ch09.html "Chapter 9.  Building
    a Frontend Process with Node.js and NPM"), *Building a Frontend Process with Node.js
    and NPM* from the Packt website ([www.packtpub.com](http://www.packtpub.com))
    or from the official book repository on GitHub, and paste the images into the
    gallery folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about imagemin cli at this link: [https://github.com/imagemin/imagemin-cli](https://github.com/imagemin/imagemin-cli).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the libraries folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The libraries folder will store some jQuery plugins. Inside the src folder,
    create a folder called libs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the scripts folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we are using jQuery and some plugins, we will need to write some code to
    use the jQuery libs; we will do that using this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the src folder, create a folder called scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside src/scripts folder, create a file called gallery.js and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are using only a single plugin, but in large applications,
    it is very common to use several plugins; in this case, we would have a file for
    each feature.
  prefs: []
  type: TYPE_NORMAL
- en: Then, targeting a performance improvement in our application, we recommend concatenating
    all the scripts into a single file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the SASS folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The SASS folder will store the scss files. We are using the Bootstrap framework,
    and for this example we will set up the Bootstrap framework using the SASS separated
    version; don''t worry about this now, as later in the chapter we will see how
    to get these files:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the src folder, create a folder called scss.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the scss folder, create a folder called vendor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Bower
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we have seen in previous chapters, we will use Bower to manage frontend
    dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Create a file called .bowerrc and save it in the root folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content to the .bowerrc file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Open terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Fill in the questions as shown in the following screenshot:![Installing Bower](img/image_09_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bower.json setup
  prefs: []
  type: TYPE_NORMAL
- en: Installing application dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we are using just one jQuery plugin plus the Bootstrap framework,
    so let''s first install Bootstrap using the Bower CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Just open the src/components folder to check the Bootstrap and jQuery folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will install the jQuery fancybox plugin in the images gallery. Open
    the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'So the src folder will have the following structure at this point:'
  prefs: []
  type: TYPE_NORMAL
- en: components/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bootstrap/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fancybox/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jquery/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the scss folder structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s set up the scss folder to compile the bootstrap.scss files:'
  prefs: []
  type: TYPE_NORMAL
- en: Open src/components/bootstrap folder and copy all the contents from SCSS folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the content inside the src/scss/vendor folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called main.scss inside the src/ folder and add the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Many developers do not use the Bootstrap framework this way, some just use the
    bootstrap.css or bootstrap.min.css files in their projects. This is ok, but when
    we use the framework the way shown here, we can use all the framework's resources
    in our own stylesheet, so we can use all mixins and variables within our stylesheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the highlighted code came from Bootstrap mixins and we can apply
    it to our own stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about SASS at this link: [http://sass-lang.com/](http://sass-lang.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the client folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The client folder will have a pretty basic structure for any web application
    with folders to store CSS, JavaScript, and images files.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we will use the latest stable version of AngularJS to create
    the pages of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the client folder, create the following folders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: css/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: images/gallery/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: js/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: js/libs/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: js/scripts/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: views/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After creating all these folders, the client directory will look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Refactoring the client folder](img/image_09_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Client folder structure
  prefs: []
  type: TYPE_NORMAL
- en: Adding the application views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now is time to create the application views folder to store all the application
    templates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the client/src folder, create a new file called home.html and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the client/src folder, create a new file called galleries.html and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the client/index.html file and replace the code with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Installing AngularJS files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it is time to install the AngularJS files and create the application. In
    this example, we will explore the AngularJS SDK from the Loopback framework later
    in this section; for this we choose to use AngularJS to build our frontend application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about AngularJS at this link: [https://docs.angularjs.org/api](https://docs.angularjs.org/api).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the AngularJS application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally we will create the AngularJS application, so follow the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the client/js folder, create a new file called app.js and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry about the lbServices dependency at this point; later in this chapter
    we will see how to create this file using the AngularJS SDK tool built with the
    Loopback framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the client/js folder, create a new file called app.config.js and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the client/js folder, create a new file called app.routes.js and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the client/js folder, create a new file called controllers.js and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Using Loopback's AngularJS SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the built-in AngularJS SDK from the Loopback framework to automatically
    generate all application services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will create a file called services.js inside the client/js
    folder with all the methods (Create, Read, Update, and Delete) and many more available
    in the Restful API created by the Loopback framework.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can check your local API by running the npm start command in your terminal/shell
    at the root project folder. The API will be available at http://0.0.0.0:3000/explorer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The lbServices section has the following CRUD methods and many others:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To use one of these methods, we just need to inject the factory into the Angular
    controller as the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can use the methods inside the controllers, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple and very useful service to deal with all endpoints created
    in our application for all the models that we have.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the application is already almost complete, but we still need
    to add some content to make it more pleasant.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create some content. As already mentioned earlier, you can download the
    entire sample code for the book from the Packt website ([www.packtpub.com](http://www.packtpub.com)),
    or directly from the book's GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Adding content to the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can add content in two ways, the first is using the endpoints created by
    the application and the second is by using the migration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following lines, we will show how to use the second option; it may be
    a brief and interesting procedure for creating a migration file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the server/boot/ folder, create a file called create-sample-models.js
    and add the following content to create a migration file for **Gallery Model**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the server/boot/ folder, add the following content to create a migration
    file for **Bike Model**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget to delete this file after the first deployment to **Heroku**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Building tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now is the time to create our task using only NPM.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin, it is important to keep in mind that NPM has two special commands
    that are invoked directly, start and test. So we will use the run command to run
    all the other tasks we create.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our goals in this section are to:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy some files from the source directory to the client directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify errors in JavaScript files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile SASS files from src/scss and save them in the client/css folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize images from src/images/gallery to client/images/gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concatenate JavaScript files from src/scripts to client/js/scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To accomplish these tasks, we need to install some Command Line Interface (CLI)
    tools:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Our purpose in this example is to show how to use the building tools, so we
    will not go too deep into each of them.
  prefs: []
  type: TYPE_NORMAL
- en: But before we go any further, let's set up the JavaScript validator eslint.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about eslint at this link: [http://eslint.org/](http://eslint.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the root project, create a file called .eslintrc.json and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about Eslint rules at : [http://eslint.org/docs/rules/](http://eslint.org/docs/rules/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the copy task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create each task before inserting it into our package.json file; this
    way it is easier to understand the procedure of each.
  prefs: []
  type: TYPE_NORMAL
- en: 'The copy tasks will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the jQuery file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the AngularJS main library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the AngularJS resources library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the AngularJS ui-router library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So we need to copy these files (jQuery and AngularJS) from the source folder
    to the client folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The last copy task will execute all the other copy tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry about running the copy tasks at the moment; later in the chapter
    we will execute them one by one before deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the SASS task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The SASS task will be very simple, we will just compile the scss files and
    insert them into the client/css folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Creating the linting task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the .eslintrc.json configuration to apply to all JavaScript files
    in the client/js folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Creating the image optimization task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another important task in any web application is to optimize all the image
    files, for performance reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Creating the concatenate task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The concat task will concatenate all scripts files from libs and scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The last concat task executes all the other concat tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Creating the build task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The build task is just the execution of each of the previous steps in a single
    task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add all the tasks to the package.json file. Open the package.json
    file and add the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Using tasks with individual commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned before, we can perform each of the tasks that we have created
    individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to optimize the image files, we can run the imagemin task only.
    Just open the terminal/shell and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The output on the terminal will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We can do the same for each task.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Heroku Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step to deploy our application is to create a free account on **Heroku
    Cloud Service**:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://signup.heroku.com/](https://signup.heroku.com/) and create a
    free account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the **Heroku toolbelt** for your platform at [https://toolbelt.heroku.com/](https://toolbelt.heroku.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the installation process for your platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you must have the Heroku toolbelt on your machine, to test it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The terminal output lists all the possible things to do with **Heroku CLI**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The book assumes that you already have git source control installed on your
    machine; if you don''t it have yet, check out this page: [https://git-scm.com/downloads](https://git-scm.com/downloads).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Heroku application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will create an application and send it to your newly created Heroku
    account:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called .Procfile and save it at the root project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Paste the following code into the .Procfile file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The previous command initializes a git repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'The git add command adds all files to version tracking:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The git commit command send all files to version control on your local machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Now it is time to log in to your Heroku account and send all the project files
    to Heroku git source control.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Enter your username and password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will use strongloop-buildpacks to configure and deploy
    a Loopback application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a deploy.sh file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we will create our deploy task using a .sh file:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called bin in the root folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the bin folder, create a file called deploy.sh.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the bin/deploy.sh file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines of code at the end of all tasks in the package.json
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Now, every time you make a commit with some changes and type the npm run deploy
    command, the engine will start the deploy.sh file and upload all the committed
    changes to Heroku Cloud Service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are facing errors with permissions, do the following. Open the terminal/shell
    inside the bin folder and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Heroku Cloud Service will create a URL for your application, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: https://some-name-1234.herokuapp.com/.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the output on the terminal, you will see some very similar to
    the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The final result will be our sample application deployed to Heroku Cloud Service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just got to https://yourURL-some-23873.herokuapp.com/ and you will see the
    following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a deploy.sh file](img/image_09_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Application on Heroku Cloud Service
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on the Bikes View Gallery button, you will see the bike gallery,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a deploy.sh file](img/image_09_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bikes gallery
  prefs: []
  type: TYPE_NORMAL
- en: Also, when you click on each bike, you will see the fancybox plugin in action.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explore a little more of the Loopback framework and its
    command line interface.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we have seen how to configure an AngularJS application using the Loopback
    AngularJS SDK, creating all services for each endpoint of the application.
  prefs: []
  type: TYPE_NORMAL
- en: We then explored the facilities using NPM as a single build tool.
  prefs: []
  type: TYPE_NORMAL
- en: We also addressed how to create and set up an account on Heroku, and how to
    automate the deployment of our application by integrating three different tools,
    Loopback, Git, and the Heroku toolbelt.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to use the concept of containers to run
    a Node.js application.
  prefs: []
  type: TYPE_NORMAL
