- en: Chapter 1. Make a Remote Desktop Connection to Your Pi from Anywhere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, we will make a gentle introduction to both Pi and Android
    platforms to warm us up. Many users of the Pi face similar problems when they
    wish to administer it. You have to be near your Pi and connect a screen and a
    keyboard to it. We will solve this everyday problem by remotely connecting to
    our Pi desktop interface. The chapter covers following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Linux in your Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making necessary changes in settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing necessary components in the Pi and Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting the Pi and Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following items are used throughout this chapter and will be needed to
    complete the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Raspberry Pi 2 Model B**: This is the latest addition to the Raspberry Pi
    family. It has replaced the previous Pi 1 Model B+. The previous model should
    work fine for the purpose of the projects covered in this book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MicroSD card**: The Raspberry Pi Foundation recommends using an 8 GB class
    6 microSD card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android device**: The device should have at least a 1.5 or higher Android
    version, which is required by the app used in this chapter. In some of the exciting
    projects that follow, we will need Android 4.3 or later versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HDMI cable**: This will be used to connect the Pi to a screen for initial
    set up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ethernet cable**: This will be used for network connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Computer**: This will be used to copy the Raspbian OS on to the microSD card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**USB mouse**: This will be used during initial setup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image shows the Raspberry Pi 2 Model B:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites](img/image00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Raspberry Pi 2 Model B
  prefs: []
  type: TYPE_NORMAL
- en: Installing Linux on your Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use **Raspbian** as the operating system on our Pi. My choice is solely
    based on the fact that it is recommended by the Raspberry Pi Foundation. It is
    based on the Debian version of Linux and optimized for Raspberry Pi hardware.
    Apart from being the most used operating system for Raspberry Pi, it contains
    almost 35,000 packages, such as games, mail servers, office suite, internet browsers
    and so on. At the time of writing this book, the latest release was dated May
    5, 2015.
  prefs: []
  type: TYPE_NORMAL
- en: There are two main ways of installing Raspbian. You can either use the OS image
    as a whole or you can begin with an easy-to-use tool-operating system bundle called
    **NOOBS**. We will cover both cases here.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are SD cards for sale with NOOBS or Raspbian already installed. It might
    be a good idea to get one of these and skip the OS installation part of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, before we begin, we might need to format our SD card as previous OS
    installations may corrupt the card. You''ll notice this if only a fraction of
    free space on the card is shown to be available even though you have formatted
    the card using the formatting utility provided by your computer''s OS. The tool
    we will use is called the **SD Formatter** and is available for Mac and Windows
    from **SD Association** at [https://www.sdcard.org/downloads/formatter_4/index.html](https://www.sdcard.org/downloads/formatter_4/index.html).
    Install and start it. You will see the following interface asking you to select
    the SD card location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Linux on your Pi](img/image00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The SD Formatter interface
  prefs: []
  type: TYPE_NORMAL
- en: Installing using NOOBS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The latest version of NOOBS can be found at [http://downloads.raspberrypi.org/NOOBS_latest](http://downloads.raspberrypi.org/NOOBS_latest).
    Download and extract the contents on to the SD card. Attach the card to your Pi
    and connect it to a screen using an HDMI cable. Do not forget to connect the USB
    mouse. When the Pi is attached to a power source, you will be presented with a
    list of choices you can make. Check the **Raspbian** installation option on the
    list, and then click on **Install**. This will install Raspbian on your SD card
    and restart the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Installing using a Raspbian image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The latest version of the Raspbian OS can be found at [http://downloads.raspberrypi.org/raspbian_latest](http://downloads.raspberrypi.org/raspbian_latest).
    The ZIP file is almost 1 GB in size and contains a single file with an `.img`
    extension, which is 3.2 GB in size. Unzip the contents and follow the steps in
    the next section to extract it to a suitable microSD card.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting the OS image to an SD card
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To extract an image file, we need a disk imaging utility and we will use a freely
    available one called **Win32 Disk Imager** on Windows. It can be downloaded at
    [http://sourceforge.net/projects/win32diskimager/](http://sourceforge.net/projects/win32diskimager/).
    On Mac OS, there is a similar tool called **ApplePi Baker** available at [http://www.tweaking4all.com/hardware/raspberry-pi/macosx-apple-pi-baker/](http://www.tweaking4all.com/hardware/raspberry-pi/macosx-apple-pi-baker/).
    Download and install it on to your computer. The installation will contain an
    executable file, `Win32DiskImager`, which you should start in the administrator
    mode by right clicking on it and selecting **Run as administrator**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Win32 Disk Imager** window, you should choose the image file you''ve
    extracted and the drive for SD card similar to what is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extracting the OS image to an SD card](img/image00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Win32 Disk Imager window
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the **Write** button will start the process and your SD card will
    be ready to be inserted into the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Making necessary changes in settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the Pi is still plugged into a screen with HDMI, connect it to a network
    using Ethernet. The first time the Pi starts, you will be presented with a settings
    utility as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making necessary changes in settings](img/image00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Raspberry Pi Software Configuration Tool
  prefs: []
  type: TYPE_NORMAL
- en: You can optionally select the first option in the list to **Expand Filesystem**.
    Select the third option as well to **Enable Boot to Desktop**.
  prefs: []
  type: TYPE_NORMAL
- en: In the following menu, select the second item in the list which is **Desktop
    Log in as user 'pi' at the graphical desktop**. Then, choose **<Finish>** and
    select **Yes** to reboot the device.
  prefs: []
  type: TYPE_NORMAL
- en: '![Making necessary changes in settings](img/image00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Choose desktop startup in the configuration tool
  prefs: []
  type: TYPE_NORMAL
- en: After reboot, you will be presented with the Raspbian's default desktop manager
    environment called **LXDE**.
  prefs: []
  type: TYPE_NORMAL
- en: Installing necessary components in the Pi and Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the following screenshot shows the LXDE desktop manager comes with an initial
    setup and a few preinstalled programs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing necessary components in the Pi and Android](img/image00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The LXDE desktop management environment
  prefs: []
  type: TYPE_NORMAL
- en: By clicking on the screen image on the tab bar located at the top, you will
    be able to open a terminal screen that we will use to send commands to the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to install a component called `x11vnc`. This is a VNC server
    for X, the window management component of Linux. Issue the following command on
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will download and install `x11vnc` to the Pi. We can even set a password
    to be used by VNC clients that will remote desktop to this Pi using the following
    command and provide a password to be used later on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can get the `x11vnc` server running whenever the Pi is rebooted and
    the LXDE desktop manager starts. This can be done through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go into the `.config` directory on the Pi user''s `home` directory located
    at `/home/pi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a subdirectory here named `autostart`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Go into the `autostart` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Start editing a file named `x11vnc.desktop`. As a terminal editor, I am using
    `nano`, which is the easiest one to use on the Pi for novice users, but there
    are more exciting alternatives, such as **vi**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following content into this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Save and exit using (*Ctrl*+*X*, *Y*, *Enter*) in order if you are using **nano**
    as the editor of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you should reboot the Pi to get the server running using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After rebooting using the `sudo reboot` command, we can now find out what IP
    address our Pi has been given in the terminal window by issuing the `ifconfig`
    command. The IP address assigned to your Pi is to be found under the `eth0` entry
    and is given after the `inet addr` keyword. Write this address down:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing necessary components in the Pi and Android](img/image00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Example output from the ifconfig command
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to download a VNC client to your Android device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this project, we will use a freely available client for Android, namely **androidVNC**
    or as it is named in the Play Store—**VNC Viewer for Android** by **androidVNC
    team + antlersoft**. The latest version in use at the writing of this book was
    0.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in order to be able to connect your Android VNC client to the Pi,
    both the Pi and the Android device should be connected to the same network—Android
    through Wi-Fi, and Pi through its Ethernet port.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the Pi and Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Install and open androidVNC on your device. You will be presented with a first
    activity user interface asking for the details of the connection. Here, you should
    provide **Nickname** for the connection, **Password** you enter when you run the
    `x11vnc` `–storepasswd` command, and the IP **Address** of the Pi that you found
    out using the `ifconfig` command. Initiate the connection by pressing the **Connect**
    button, and you should now be able to see the Pi desktop on your Android device.
  prefs: []
  type: TYPE_NORMAL
- en: In androidVNC, you should be able to move the mouse pointer by clicking on the
    screen and under the options menu in the androidVNC app, you will find out how
    to send text and keys to the Pi with the help of *Enter* and *Backspace*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may even find it convenient to connect to the Pi from another computer.
    I recommend using RealVNC for this purpose, which is available on Windows, Linux,
    and Mac OS.
  prefs: []
  type: TYPE_NORMAL
- en: What if I want to use Wi-Fi on the Pi?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use a Wi-Fi dongle on the Pi, first of all, open the `wpa_supplicant`
    configuration file using the `nano` editor with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following to the end of this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I assume that you have set up your wireless home network to use WPA-PSK as the
    authentication mechanism. If you have another mechanism, you should refer to the
    `wpa_supplicant` documentation. LXDE provides even better ways to connect to Wi-Fi
    networks through a GUI. It can be found on the upper-right corner of the desktop
    environment on the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting from anywhere
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we have connected to the Pi from our device, which we need to connect to
    the same network as the Pi. However, most of us would like to connect to the Pi
    from around the world as well. To do this, first of all, we need to now the IP
    address of the home network assigned to us by our network provider. By going to
    [http://whatismyipaddress.com](http://whatismyipaddress.com) URL, we can figure
    out what our home network's IP address is. The next step is to log in to our router
    and open up requests to the Pi from around the world. For this purpose, we will
    use a functionality found on most modern routers called **port forwarding**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be aware of the risks contained in port forwarding. You are opening up access
    to your Pi from all around the world, even to malicious users. I strongly recommend
    that you change the default password of the user `pi` before performing this step.
    You can change passwords using the `passwd` command.
  prefs: []
  type: TYPE_NORMAL
- en: By logging onto the router's management portal and navigating to the **Port
    Forwarding** tab, we can open up requests to the Pi's internal network IP address,
    which we have figured out previously, and the default port of the VNC server,
    which is `5900`. Now, we can provide our external IP address to androidVNC from
    anywhere around the world instead of an internal IP address that works only if
    we are on the same network as the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting from anywhere](img/image00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Port Forwarding settings on Netgear router administration page
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to your router's user manual to see how to change the **Port Forwarding**
    settings. Most routers require you to connect through the Ethernet port in order
    to access the management portal instead of Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: Problems with dynamic LAN IP addresses and external IP addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is one minor problem with this setup. The Pi might get a new LAN IP address
    each time you restart it, making the **Port Forwarding** setting useless. To avoid
    this, most routers provide the **Address Reservation** setting. You can tell most
    routers that each time a device with a unique MAC address is connected, it should
    get the same IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Another problem is that your **Internet Service Provider** (**ISP**) might assign
    new IP addresses to you each time you restart your router or for any other reason.
    You can use a dynamic DNS service, such as DynDNS, to avoid such problems. Most
    routers are capable of using dynamic DNS services. Alternatively, you can get
    a static IP address by contacting your ISP.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we installed Raspbian, warmed up with the Pi, enabled the desktop
    environment on it, and connected to the Pi using an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will access the console of the Pi directly and even
    transfer files to and from it using FTP from our Android devices.
  prefs: []
  type: TYPE_NORMAL
