- en: Reconnaissance - Identifying Vulnerable S3 Buckets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Simple Storage Service** (**S3**) buckets are one of the most popular attack
    surfaces for AWS infrastructures, and they''re the most prone to hacking attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explains the concept of AWS S3 buckets, what they're used for,
    and how to set them up and access them. However, the main focus for this chapter
    is on the various S3 bucket permissions, the different ways of identifying poorly
    configured or permissive buckets, as well as connecting to these buckets. Finally,
    we will focus on automated approaches to identifying vulnerable S3 buckets in
    multiple regions based on domain and subdomain names, and probing their permissions
    to find potentially vulnerable buckets.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our first S3 bucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring AWS S3 permissions and the access API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading and writing from a vulnerable S3 bucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up your first S3 bucket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by heading over to the S3 home page at [https://s3.console.aws.amazon.com/s3/](https://s3.console.aws.amazon.com/s3/):'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the S3 home page, click on Create bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1dc4faa2-77a1-43cb-9e8f-b428492b0973.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next page, assign your bucket a name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4cf3f66c-8970-47c8-8d2d-4fd9647845c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When assigning the name of the bucket, you must follow these guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a unique and **Domain Name System** (DNS)-compliant bucket name for your
    S3 bucket.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Bucket names must be a minimum of 3 characters and a maximum of 63 characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uppercase characters or underscores are not allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bucket names can either start with a lowercase letter or a number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bucket names can contain lowercase letters, numbers, and hyphens. The bucket
    name can also be separated based on labels using the (.) character.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not format bucket names in the form of an IP address (for example, `172.16.1.3`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can choose the geographic region if you wish to; we are naming our bucket `kirit-bucket`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Create bucket and your bucket will be created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9efae629-3897-48ba-b40f-19298bf21256.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the bucket is up and running, you should be able to upload objects to the
    bucket. In case you are wondering what an object is, it can be any file, such
    as image files, music files, video files, or documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'To upload an object, click on the bucket and select Upload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/51ea0628-a832-4384-ad3d-b2d883feee82.png)'
  prefs: []
  type: TYPE_IMG
- en: A file browser will open and you can upload any file that you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'To download an object, simply tick the checkbox of the object, and then choose
    Download:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d561c3c4-0852-4687-bc83-cd978f8742fe.png)'
  prefs: []
  type: TYPE_IMG
- en: S3 permissions and the access API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: S3 buckets have two permission systems. The first is **access control policies**
    (**ACPs**), which are primarily used by the web UI. This is a simplified permission
    system that provides a layer of abstraction for the other permission system. Alternatively,
    we have **IAM access policies**, which are JSON objects that give you a granular
    view of permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Permissions apply either to a bucket or an object. Bucket permissions are like
    the master key; in order to provide someone access to an object, you need to provide
    them access to a bucket first, and then the individual objects themselves.
  prefs: []
  type: TYPE_NORMAL
- en: S3 bucket objects can be accessed from the WebGUI, as we saw earlier. Otherwise,
    they can be accessed from the AWS command-line interface (**CLI**) using the `aws
    s3` cmdlet. You can use it to upload, download, or delete bucket objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to upload and download objects using the AWS CLI, we can take the
    following approach:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by installing `awscli`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure `awscli` with the new user credential. For this, we will need the
    access key ID and the secret access key. To get these, follow this procedure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to your AWS Management Console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on your username at the top-right of the page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Security Credentials link from the drop-down menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the Access Credentials section, and copy the latest access key ID
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Show link in the same row, and copy the secret access key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have acquired these, issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Enter your access key ID and secret access key. Remember to not make this public
    to ensure your accounts are safe. You may leave your default region and output
    format set to none.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your account has been set up, it is very easy to access the contents of
    the S3 bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`kirit-bucket` in the preceding code will be replaced by your bucket name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to traverse directories inside a bucket, simply put `/` followed
    by the directory named listed from the preceding output, for example, if we have
    a folder named `new`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To upload a file to the S3 bucket, issue the `cp` cmdlet, followed by the filename
    and the destination bucket with full file path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete a file on the S3 bucket, issue the `rm` cmdlet followed by the full
    file path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: ACPs/ACLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea of **access control lists** (**ACLs**) is very similar to the firewall
    rules that can be used to allow access to an S3 bucket. Each S3 bucket has an
    ACL attached to it. These ACLs can be configured to provide an AWS account or
    group access to an S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four main types of ACLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**read**: An authenticated user with read permissions will be able to view
    filenames, size, and the last modified information of an object within a bucket.
    They may also download any object that they have access to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**write**: An authenticated user has the permission to read as well as delete
    objects. A user may also be able to delete objects they don''t have permissions
    to; additionally, they can upload new objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**read-acp**: An authenticated user can view the ACLs of any bucket or object
    they have access to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**write-acp**: An authenticated user can modify the ACL of any bucket or object
    they have access to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An object can only have a maximum of 20 policies in a combination of the preceding
    four types for a specific grantee. A grantee is referred to any individual AWS
    account (that is, email address) or a predefined group. IAM accounts cannot be
    considered as a grantee.
  prefs: []
  type: TYPE_NORMAL
- en: Bucket policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each S3 bucket has bucket policies attached to it that can be applied to both
    the bucket and the objects inside it. In case of multiple buckets, the policies
    can be easily replicated. Policies can be applied to individual folders by specifying
    a resource such as `"data/*"`. This will apply the policy to each object in a
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add a policy to your S3 bucket using the web UI. The action is under
    the Permissions tab of the bucket Properties page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/927e293d-ef4a-4b0d-b214-b2dcf6080278.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will see how bucket access can be configured for IAM users.
  prefs: []
  type: TYPE_NORMAL
- en: IAM user policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to provide S3 access to individual IAM accounts, we can use IAM user
    policies. They are a very easy way to provide restricted access to any IAM account.
  prefs: []
  type: TYPE_NORMAL
- en: IAM user policies come in handy when an ACL permission must be applied to one
    specific IAM account. If you are wondering whether to use IAM or a bucket policy,
    a simple rule of thumb is to determine whether the permissions are for specific
    users across a number of buckets, or if you have multiple users, each needing
    their own set of permissions. In such a scenario, IAM policies are much better
    suited than bucket policies, as bucket policies are limited to only 20 KB.
  prefs: []
  type: TYPE_NORMAL
- en: Access policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Access policies are fine-grained permissions that describe permissions granted
    to any user on an object or bucket. They are described in JSON format and can
    be divided into three main sections: `"Statement"`, `"Action"`, and `"Resource"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a bucket policy in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The JSON object has three main parts. First, within the `"Statement"` section,
    we can see there are two points to note – `"Effect":"Allow"`, and the `"Principal"`
    section containing `"AWS":"arn:aws:iam::Account-ID:user/kirit"`. This essentially
    means that the `"kirit"` user account is being granted permissions to an object.
  prefs: []
  type: TYPE_NORMAL
- en: Second, is the `"Action"` section, which describes what permissions are being
    allowed to the user. We can see the user is allowed to list objects inside the
    `"s3:ListBucket"` bucket, and download objects from the `"s3:GetObject"` bucket.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `Resource` part describes on which resource the permissions are
    being granted. To put it all together, the policy summarizes to allow the `kirit`
    user account to `GetBucketLocation`, `ListBucket`, and `GetObject` under the bucket
    named `kirit-bucket`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a vulnerable S3 bucket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our next exercise, we will try to read and write from a vulnerable S3 bucket
    that has been made public to the entire world. In order to do this, we will set
    up an S3 bucket and intentionally make it vulnerable my making it publicly readable
    and writeable.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by heading over to the S3 home page ([https://s3.console.aws.amazon.com/s3/](https://s3.console.aws.amazon.com/s3/))
    and creating a vulnerable bucket that is publicly accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new S3 bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the bucket has been created, select the bucket and click on Edit public
    access settings for selected buckets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23277051-ffc6-4fce-bbce-81b192ca9937.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Unselect all the checkboxes and click on Save. This is done in order to remove
    any access restrictions that have been enforced on a bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f0ce3d4e-6436-45c3-b4e8-d25a1a4b6f91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'AWS will ask you to confirm the changes; type `confirm` into the field and
    click on Confirm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f86b4ed-4524-497b-ae0e-90b12e309d0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the bucket, and then on the side panel, click on the Permissions tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e717c5b-5a5c-47c9-a864-c37649115a33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to Access Control List, and under Public Access, click on Everyone. A side
    panel will open; enable all the checkboxes. This tells AWS to allow public access
    to the bucket; this is what makes the bucket vulnerable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b7cd2860-4115-46e8-9db1-2896bce2b972.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save and the bucket will be made public.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have our vulnerable bucket, we can upload some objects to it and
    make them public; for example, we upload a small text file to the bucket as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a small text document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter your bucket and click on Upload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be799896-8559-499b-8db0-ad538f1f03a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the file and upload it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file has been uploaded, click on the object, and you will receive an
    S3 URL to access the object from the outside. You can simply point your browser
    to the URL in order to access the bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9e96639-a59e-4eb3-9ff3-03eef463745d.png)'
  prefs: []
  type: TYPE_IMG
- en: The Object URL link is located at the bottom of the page, as demonstrated in
    the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Our vulnerable S3 bucket has now been set up and made accessible to the public;
    anyone can read or write to this bucket.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to identify such vulnerable buckets and
    exfiltrate data using AWSBucketDump.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about what S3 buckets are, how to set up S3
    buckets, and how access rights are granted on an S3 bucket. We learned about S3
    permissions in detail, as well as how and where each kind of permission is applicable.
    We walked through how to set up the AWS CLI and access the S3 bucket via the CLI.
    We also learned about the kind of settings that can make an S3 bucket vulnerable.
    And finally, we set up our own vulnerable S3 bucket, which we will be using in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to exploit S3 buckets. We will look into
    the tools that are used to exploit a vulnerable S3 bucket. And, we will learn
    various post-exploitation techniques that we can apply after exploiting a vulnerable
    S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon S3 REST API Introduction**: [https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html](https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon S3 Examples**: [https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-examples.html](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specifying Permissions in a Policy**: [https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
