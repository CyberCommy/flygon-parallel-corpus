- en: Staying Up to Date with Angular Updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Delivering a secure, fast, and consistent experience on the web across dozens
    of combinations of different browsers in differing versions is not an easy feat.
    Angular exists to make this possible; however, the internet is a constantly evolving
    landscape of competing technologies and vendors. The Angular team has committed
    to updating the platform on a regular basis, but it's up to you to keep up to
    date with patch, minor and major releases of Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Angular is a platform that aims to minimize the effort of upgrading from version
    to version, providing helpful tools and guides, most importantly in a deterministic
    release cadence and ample communication regarding deprecated features that allows
    for proper planning to remain up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must plan to keep up to date with Angular in a thoughtful and planned manner.
    Such a strategy will result in maximizing the benefit you gain by using a platform
    like Angular, keeping bugs and divergent experiences across browsers to a minimum.
    At its most extreme, you have a choice: either retain hundreds of testers to test
    your web applications across all major browsers and their recent versions and
    dozens of developers to maintain compatibility issues or keep your version of
    Angular (or your choice of framework) up to date. Keep in mind that ultimately,
    it''s up to you to ensure the quality of the product you deliver.'
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to skip this chapter now and get back to it when a minor or major
    version of Angular is released or keep on reading to see what a potential upgrade
    process may look like.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the chapter, we will go over the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Updating Node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating `npm` and Global Packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addressing security vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating your web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A brief history of web frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is it important to consider why we use frameworks such as Angular or React in
    the first place? Before Angular, there was AngularJS and Backbone, both of which
    heavily relied on the framework that came before the ubiquitous jQuery. In the
    early days of the existence of jQuery, back in 2006, its purpose was quite obvious
    for web developers—to create a consistent API surface to enable DOM manipulation.
    Browser vendors are supposed to implement various web technologies like HTML,
    JavaScript/EcmaScript and CSS, as standardized by The World Wide Web Consortium
    (W3C). Internet Explorer, the only browser vast majority of internet users relied
    on at the time, acted as a vehicle to push proprietary technologies and APIs to
    retain its edge as the go-to browser. First, Mozilla's Firefox and then Google's
    Chrome browsers successfully gained significant market. However, the breakneck
    speed at which new browser versions started being released, competing interests
    and differing qualities, versions and names of implementations of draft and ratified
    standards created untenable conditions for developers to deliver consistent experiences
    on the web. So instead of repeatedly writing code to check browser versions, you
    could just use jQuery and you were good to go, which hid away all the complexities
    of vendor-specific implementations, missing features by gracefully filling in
    the gaps.
  prefs: []
  type: TYPE_NORMAL
- en: It was still cumbersome to create rich user experiences in jQuery, and frameworks
    like Backbone and AngularJS made it more cost effective to build web applications
    that had a native feel and speed to them. However, browsers kept changing, so
    did jQuery and unforeseen effects of early design decisions, as with evolving
    standards, resulted in two new and different approaches to building web application
    in Angular and React. The transition from AngularJS to Angular has been jarring
    experience for the entire community, including the Angular development team, but
    it had to be a big-bang release to create a platform that could evolve. Now, the
    new Angular platform is committed to stay up to date with incremental releases
    delivered on a regular basis to avoid the mistakes of the past.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if you are not using Node.js as a web server, you're already using it to
    install your dependencies through npm and execute your build and testing tasks
    through Node.js-based packages such as WebPack, Gulp, or Grunt. Node.js is lightweight
    cross-platform execution environment that makes most modern development tooling
    work seamlessly. Due to its nature, Node sits at the very bottom of your tech
    stack outside of your host operating system. It is important to keep your version
    of Node up-to-date to get benefits of security, speed, and feature updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js is maintained in two branches: **Long Term Support** (**LTS**) version
    and Current. Odd numbered releases are one off, risky releases, that are not planned
    for an LTS phases. Even numbered releases are first released as Current, then
    phases in to LTS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For maximum stability and to avoid unforeseen issues, I highly recommend sticking
    to the LTS version of Node:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check your current version by running this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can view further information on the latest release at [https://nodejs.org](https://nodejs.org).
    Apart from planned releases, this website will often contain information about
    out-of-band critical security patches for various Node.js releases.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re on an odd-numbered or non-LTS release channel remove your existing
    installation of Node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Windows, ensure that you''re running PowerShell with Administrative privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS, if your environment is set up correctly, you shouldn''t need to add
    `sudo` to your command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, to upgrade to the latest LTS version, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS, if you don''t already have Node 8 installed, you''ll first have to
    execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re already on version 8, then execute this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that version 10 is planned to be the next LTS release in October 2018,
    so you'll need to keep this in mind before running the brew install command.
  prefs: []
  type: TYPE_NORMAL
- en: If you're on macOS, refer to the next section for an easier way to manage your
    version of Node with the `n` tool. Otherwise, skip to the section on *Updating
    Npm*.
  prefs: []
  type: TYPE_NORMAL
- en: n - Node version manager for macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On macOS, HomeBrew doesn''t have an LTS-specific channel for Node, and if the
    latest version is an odd-numbered version, you''ll find yourself in an undesirable
    position. If you execute `brew upgrade node` by mistake and upgrade to an odd
    version, recovering from this mistake is annoying at best. The process includes
    potentially breaking other CLI tools by running a command like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After your initial Node install through brew, I highly recommend leveraging
    the feature rich, and interactive Node version manager tool, `n`, created by ex-Node
    maintainer TJ Holowaychuk:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `n`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute `n`, which will display a list of all versions of Node previously downloaded
    to your computer with the current version marked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute `n lts` to install the latest LTS build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With `n`, you can quickly switch between Node versions.
  prefs: []
  type: TYPE_NORMAL
- en: In the section, we will go over how you can keep npm up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Updating npm and Global npm packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If Node is the lowest-level tool in your tech stack, npm and global npm packages
    would be considered the next layer sitting in between Angular and Node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every time you update your version of Node, you also get a new version of npm,
    which ships bundled with Node. However, npm''s release schedule doesn''t coincide
    with Node''s. At times, there will be significant performance and feature gains
    to warrant a specific upgrade to your version of npm, such as the order of magnitude
    speed improvements introduced with npm v5.0.0 or the npx tool, which reduces the
    need for global packages, introduced with npm v5.2.0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, you need the `npm-windows-upgrade` tool to upgrade your version
    of npm:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install `npm-windows-upgrade`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you run into errors during installation of the tool, refer to the *Npm fails
    to install a global tool on Windows* section to resolve any issues with your system
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute `npm-windows-upgrade` in an elevated shell, and you will get a list
    of options, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Select a stable release, in this case, `6.0.0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify your installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS, it is straightforward to upgrade your version of npm:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execute `npm install -g npm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that installing global packages, as shown earlier, should not require the
    use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `sudo` is required, execute this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the owner and the permissions of this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you see can see, the correct configuration looks like your own user, shown
    in bold as `youruser`, has read/write/execute rights on the folder, also shown
    in bold as `rwx`, in which `npm` resides. If this is not the case, use `sudo chown
    -R $USER /usr/local/bin/npm` to own the folder, followed by `chmod -R o+rwx  /usr/local/bin/npm`
    to ensure that your user has full rights.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify your installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: It is important to keep any globally installed package up to date as well; refer
    to the next section on how to keep your global installs to a minimum and troubleshoot
    installation issues on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Global Npm packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier in this section and in [Chapter 2](312e0dbe-54ac-45c6-97c7-f41c98723919.xhtml),
    *Create a Local Weather Web Application*, when setting up your Angular project,
    you should refrain from installing any project specific tool as a global package.
    This includes tools like `typescript`, `webpack`, `gulp`, or `grunt` to name a
    few examples. The `npx` tool enables the conveniences of running CLI commands
    such as `tsc` using the specific version your project depends on with only a minimal
    hit to performance. As discussed in [Chapter 2](312e0dbe-54ac-45c6-97c7-f41c98723919.xhtml),
    *Create a Local Weather Web Application*, installing project-specific tools globally
    has adverse affects on your development environment.
  prefs: []
  type: TYPE_NORMAL
- en: I do mention a list of tools that I still continue to install globally, such
    as the `n` tool from the *Upgrading Node* section or `rimraf`, which is a cross-platform
    recursive deletion tool that comes in very handy when Windows 10 doesn't cooperate
    with deleting your `node_modules` folder. These tools are non-project specific
    and largely stable, that don't need frequent updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reality is that unless the tool reminds you to upgrade itself, you most
    likely will never proactively do so. The now CLI tool we used in [Chapter 3](4e68114e-68b7-4fe6-a853-81347e981667.xhtml),
    *Prepare Angular App for Production Release*, to publish our Docker container
    in the cloud is a great example of a tool that remains vigilant about keeping
    itself up to date with a message as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can upgrade global tools by executing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Beware that the `@latest` request will upgrade to the next major version, if
    available, without much fanfare. While major release contain exciting and useful
    new features, they also risk breaking old functionality that you may be depending
    on.
  prefs: []
  type: TYPE_NORMAL
- en: That should complete your upgrade. However, especially on Windows, it is easy
    to put your Node and npm installation in a broken state. The following section
    covers common troubleshooting steps and actions you can take to restore your Windows
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: Npm fails to install a global tool on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Npm may fail to install global tools; consider the symptom, cause, and solutions
    discussed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Symptom**: When you attempt to install a global tool, you may get an error
    message containing the Refusing to delete message similar to the one shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Cause**: On Windows, if you ever executed `npm install -g npm` or upgraded
    your version of Node using choco, your npm installation has likely been corrupted.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution 1**: Recover your environment with the `npm-windows-upgrade` tool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the npm upgrade routine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the offending file and directory with `rimraf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Try installing again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If this doesn't resolve your issue, then attempt Solution 2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution 2**: If you have installed non-LTS nodejs or have not configured
    npm correctly, try the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Uninstall non-LTS nodejs and reinstall it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Install `npm-windows-upgrade` following the guide at [https://github.com/npm/npm/wiki/Troubleshooting#upgrading-on-windows](https://github.com/npm/npm/wiki/Troubleshooting#upgrading-on-windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Powershell, with Administrator privileges, execute this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute `npm-windows-upgrade`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note the According to npm folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this folder and ensure that `npm` or `npm.cmd` doesn't exist in
    this folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it does, remove.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that this folder is in `PATH`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Start and search for `Environment Variables`. Click on Edit the system
    environment variables. In the System Properties window, click on Environment Variables.
    Select the line with Path. Click on Edit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/649fc16c-7b98-4fae-9171-a066cd8db525.png)Edit environment variable
    dialogue'
  prefs: []
  type: TYPE_NORMAL
- en: Try installing your global tool again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the issue persists, you may need to delete your global `npm` folder with
    PowerShell command, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Redo the `npm-windows-upgrade` routine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Reinstall the tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Don't run `npm i -g npm` in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Node and npm up-to-date, you are now ready to upgrade your version of Angular.
    The Angular ecosystem has been engineered to make frequent updates of your version
    as painless as possible. Minor version updates should be straightforward and quick
    and starting with version `6.0.0`; major version upgrades should be easier with
    the new `ng update` command that ships with Angular CLI. Paired with the update
    guide published on [update.angular.io](https://update.angular.io) and various
    helper tools specific to your upgrade path, updating Angular is straightforward.
    In this section, we will go over how you can update your Angular app presuming
    a scenario of upgrading from version 5.2 to 6.0\. The instructions should largely
    remain the same, with any variance or future changes documented in [https://update.angular.io/](https://update.angular.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that Angular doesn't recommend skipping major version numbers when
    upgrading, so if you are on version 4, you're first expected to upgrade to 5 and
    then to 6\. Do not delay updating your framework version, thinking you can gain
    some efficiency by leap frogging to the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: Angular update guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Follow this step-by-step guide to prepare, execute, and test your Angular version
    upgrade process.
  prefs: []
  type: TYPE_NORMAL
- en: Take stock of your current version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s first begin by inspecting `package.json` so that you are aware of the
    versions of various dependencies that you are using. All `@angular` packages should
    be on the same minor version, such as `5.2`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Using Angular Update Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you are aware of your current versions, you are ready to use the Update
    Guide:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [update.angular.io](https://update.angular.io/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the complexity of your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Basic: No animations, no HTTP calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Medium: If you''re using Angular Material or making HTTP calls or using RxJS,
    largely working as 1-2 person developer team and delivering small apps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Advanced: Multi-person teams, delivering medium-to-large size apps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most apps will fall in the Medium complexity; I highly recommend selecting this
    option. If you have implemented Angular functionality beyond the surface level
    APIs, by leveraging functionality mentioned deep in the documentation, implement
    any custom behavior in the HTTP, rendering, routing—definitely scroll through
    the Advanced list first to ensure that you're not using a deprecated function.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the update guide, select from and to versions. In this case, 5.2 to 6.0,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9561a4ef-1e63-4b22-84d1-df6ee3e7ff8a.png)Angular Update Guide'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Show me how to update!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observe the instructions shown on screen as three distinct sections, before
    updating, during, and after the update
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now for the hard part, we need to follow the instructions and apply them.
  prefs: []
  type: TYPE_NORMAL
- en: Updating your Angular app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Updating software is risky. There are several strategies to reduce your risk
    in updating your app. This is the primary reason you have built a barrage of automated
    tests in your application; however, over time, your implementation, including
    your CI & CD systems, can deteriorate. Version updates are a great time to reevaluate
    the robustness of your automated systems and make the necessary investments to
    shore them up. Consider the following pre-upgrade checklist before you start your
    update process.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-upgrade checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s a handy checklist of items to run through before starting your upgrade:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that `@angular` versions all match down to the last patch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure your CI & CD pipeline is up and running with no failing or disabled tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Smoke test your app before upgrading. Ensure that all major functionality works
    and there are no console errors or warning present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address any quality issue discovered before upgrading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the update guide sequentially and methodically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be prepared to roll back the update.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's start the update process with before updating activities.
  prefs: []
  type: TYPE_NORMAL
- en: Before updating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular Update Guide recommends specific steps to follow under the Before Updating section,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c227ddff-eb76-499b-8760-25fd55409643.png)Angular Update Guide -
    Before updating'
  prefs: []
  type: TYPE_NORMAL
- en: There can be several kinds of updates you may need to make to your code before
    attempting an update.
  prefs: []
  type: TYPE_NORMAL
- en: '**Namespace Changes**: The first item on the preceding list is notifying us
    that the namespaces of certain animation services and tools may have changes.
    Such changes should be low risk and accomplished quickly with the use of the Global
    search tool in VS Code. Let''s see how you can quickly observe all usages of `''@angular/core''` in
    your app. Look at the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2a9f3550-dd3b-45f4-bbfe-816035588bd1.png)Search Results for ''@angular/core'''
  prefs: []
  type: TYPE_NORMAL
- en: In this case, there is no usage that is related to animations, so we can move
    on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Rename and Replace Updates**: In version 4, there was a requirement to replace
    the `OpaqueTokens` type with `InjectionTokens`. For these types of changes, once
    again, use the Global Search tool to find and replace the necessary codes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the Global Search tool find and replace code, ensure that you enable
    Match Case, signified by Aa and Match Whole Word, signified by Ab|, to prevent
    unintended replacements. Take a look at the following screenshot for a look at
    the two options in their enabled state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/df0f981e-2df2-445d-bc8d-f83e477deb8b.png)Match Case and Match Whole
    Word Enabled'
  prefs: []
  type: TYPE_NORMAL
- en: '**Functional Changes**: Deprecated features, signaled one major version ahead
    of time, require rewrites of the affected portions of your application code. If
    you have been heavily using `HttpModule` and `Http`, your code will require a
    serious overhaul:'
  prefs: []
  type: TYPE_NORMAL
- en: First, discover the instances of actual usage with Global search.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On [angular.io](https://angular.io), search for the newly introduced service,
    in this case, HttpClient or HttpClientModule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/4d712046-bafb-4a2c-a43d-41c085705f58.png)Angular.io Documentation
    Page'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the relevant link under the Guide heading, which contain rich and contextual
    information about the new service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new service usually comes along with new benefits, such as an improved coding
    experience, better testability, or performance.
  prefs: []
  type: TYPE_NORMAL
- en: Reimplement the necessary code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the Post Update Checklist mentioned in the next section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Such functional changes can simultaneously be great productivity boosters but
    also greatly increase the friction of a timely upgrade to a new version of Angular.
    You can, however, lower the cost of change and reap maximum benefits of these
    changes by preparing ahead of time.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the LocalCast Weather app doesn't use the deprecated modules,
    because by chance the development of the app began right after the release of
    the `HttpClient` service. However, I wouldn't have known about the change if I
    wasn't keeping tabs on the Angular community. I highly recommend following [https://blog.angular.io](https://blog.angular.io) for
    this reason.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you can check the Angular Update tool regularly. The tool likely
    won't be updated quickly; however, it is a good summary resource of all upcoming
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Update tool, if you select a future version of Angular, you will get
    a warning message:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Warning**: Plans for releases after the current major release are not finalized
    and may change. These recommendations are based on scheduled deprecations.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a great way to stay ahead of the game and plan your resources around
    Angular updates ahead of time.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're done with the Before Updating phase, consider going through the
    Post Update Checklist before moving on to the next phase.
  prefs: []
  type: TYPE_NORMAL
- en: During the Update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s the During the Update section from the guide, which is centered around
    the `ng update` tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/024c4569-8053-44f2-b095-deb8d3eae5ba.jpg)Angular Update Guide -
    During the update'
  prefs: []
  type: TYPE_NORMAL
- en: 'In comparison, pre-Angular 6 upgrades look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/058c1b0c-c834-4d6c-a00d-9b1047f4786d.jpg)Angular Update Guide -
    Pre-Angular 6'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in learning more about manual updates, refer to the Manual
    Update section. In this section, I have detailed the steps that you should execute
    for an automated upgrade in a more comprehensive manner than the guide. In [Chapter
    2](312e0dbe-54ac-45c6-97c7-f41c98723919.xhtml), *Create a Local Weather Web Application*,
    we avoided installing Angular CLI, and this is where this strategy pays off. You
    can continue working on the existing Angular 4 or Angular 5 projects without having
    to worry about CLI backward-compatibility issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you have updated to the latest LTS version of Node, as shown earlier
    in the chapter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you are on the latest version of npm, as shown earlier in the chapter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your terminal, `cd` in to the project folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clean your `node_modules` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: It is important to note that version changes in Node or npm can impact how your `node_modules` dependencies
    are installed or stored on your computer. After an upgrade to lower-level tools,
    such as Node or npm, it is prudent to wipe away `node_modules` and reinstall your
    packages in your project. In your Continuous Integration (CI) server, this means
    invalidating the existing cache of packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reinstall dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Uninstall globally installed versions of `@angular/cli`, `webpack`, `jasmine`,
    or `typescript`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Update to the latest CLI version in your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Update project configuration, as suggested by the preceding message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Try executing `ng update`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Try executing `ng update --all`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You may get an error message that says Incompatible peer dependencies found.
    with one or more specific issues listed. You will not be able to use `ng update`
    until all issues are resolved.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, I will go over strategies in resolving peer dependency
    errors. If you don't have these kinds of errors, feel free to skip the section.
  prefs: []
  type: TYPE_NORMAL
- en: Incompatible peer dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I will go through some of incompatible peer dependency errors that I received
    during my upgrade process and the different strategies to resolve these errors.
    Note that I will start with simple cases and demonstrate the amount of research
    that may be required as the dependency you need may not be simply the latest released
    version of your package.
  prefs: []
  type: TYPE_NORMAL
- en: Package `karma-jasmine-html-reporter` has a missing peer dependency of `"jasmine"
    @ "^3.0.0"`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is a simple error that is resolved by simply updating to the latest version
    of `jasmine`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Package `@angular/flex-layout` has an incompatible peer dependency to `"rxjs"`
    (requires `"^5.5.0"`, would install `"6.1.0"`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This error requires a bit of research and understanding of the ecosystem. As
    of Angular 6, we know that all libraries are version synced, so we need a 6.x
    version of this library. Let''s discover the currently available versions with
    `npm info`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'As of publishing, this library is still in beta and the latest version is at
    5.0.0, so simply updating to the latest release of `@angular/flex-layout` won''t
    work out. In this case, we need to install the `@next` version of the package,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: You will receive a bunch of dependency warnings showing that Angular 6 packages
    are needed. These errors will go away once we're done with our update.
  prefs: []
  type: TYPE_NORMAL
- en: Package "@angular/compiler-cli" has an incompatible peer dependency to "typescript"
    (requires ">=2.7.2 <2.8", would install "2.8.3").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular CLI depends on a specific version of Typescript. If you execute `npm
    info typescript`, the latest version of Typescript may be newer than what is required.
    In this case, it is `2.8.3`, as reported in the preceding error message. The error
    message does signal to us what version is specifically required, if you look at
    the requires statement. The lower bound, `2.7.2`, seems to be the correct version
    to install, so let''s install that, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: In theory, all of our actions should have resolved all peer dependency issues.
    In reality, I have noted that these errors sometimes persist, when `npx ng update
    --all` is used, so we will continue the update by running individual update commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'On non-macOS operating systems, you may persistently encounter an fsevents-related
    warning, such as npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3.
    This is an optional package that is only leveraged on macOS. An easy way to avoid
    seeing this error is to run `npm install --no-optional command`.'
  prefs: []
  type: TYPE_NORMAL
- en: Continuing the update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will update Angular piece by piece:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start the update with Angular Core:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Note that this command also updates `rxjs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update Angular Material:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that you check out the Material Update Tool and strategies to manually
    update Angular Material in [Chapter 5](5e0df0e8-57a6-47dc-86c8-d56f6e35021e.xhtml),* Enhance
    Angular App with Angular Material*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update other dependencies, including typings with `npm update`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note that `typescript` was updated to its latest version, `2.8.3`, which is
    not acceptable for Angular 6, as covered in the preceding section. Rollback to
    version `2.7.2` by executing `npm install -D typescript@2.7.2`.
  prefs: []
  type: TYPE_NORMAL
- en: Resolve any npm errors and warnings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're done updating your major Angular dependencies. Consider executing the
    Post Update Checklist before moving on to *After the update* section.
  prefs: []
  type: TYPE_NORMAL
- en: After the update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The After the update phase informs changes that need to be after the updates
    to major Angular dependencies and sometimes inform us of the further benefits
    that can be gained after having upgraded our version of Angular. Observe the next
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ef42ec2d-eb0b-48d9-a0a0-c07311f76961.jpg)Angular Update Guide -
    After the update'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we must address deprecations related to our upgrade to RxJS.
    Luckily, the Angular team that knows this can be a painful process, so they''re
    suggesting an automated tool that can give us a head start:'
  prefs: []
  type: TYPE_NORMAL
- en: Refrain from installing the tool globally
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the migration tool, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Resolve any warnings manually; consider this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we only need to import from `'rxjs'` and `'rxjs/operators'` per
    RxJS 6 documentation, so remove the two other imports. In addition, the `ErrorObservable`
    and `IfObservable` imports are referenced by any line of code, so they're easy
    to identify for removal.
  prefs: []
  type: TYPE_NORMAL
- en: Some warnings may be masking errors or incompatibilities with new RxJS functions,
    so it is important go through them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove `rxjs-compat`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Build and test your code to ensure that it builds by executing `npm run predocker:build`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`predocker:build` builds your Angular app in production mode and runs your
    unit and e2e tests by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Resolve any errors. If you are getting mysterious errors that are not related
    to your code, try to remove `node_modules` and reinstall packages.
  prefs: []
  type: TYPE_NORMAL
- en: If everything is working correctly, congratulations, you're done with your upgrade!
    Before you pop the bottle of sparkling wine, execute the Post Update Checklist.
  prefs: []
  type: TYPE_NORMAL
- en: Post Update Checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Post Update Checklist is useful in ensuring that you haven''t introduced any
    regressions to your code base after making sweeping code changes. You are asked
    to consider executing this checklist after every phase of the update process. It
    may not always be possible or feasible to execute the entire list, but after making
    significant changes to your code base, if necessary, update your unit tests, and
    execute the following checklist incrementally:'
  prefs: []
  type: TYPE_NORMAL
- en: Build and smoke test your angular app
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit your changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With each commit, ensure that CI pipeline remains green
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If making functional changes, it may be required to follow release-cycle procedures
    of your organization, which may include manual testing by a QA team
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is advisable to implement and deploy such changes one by one and deploy them
    to the production environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Collect Performance data, as outlined in the following section
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Committing your code after a category of changes will enable you to revert or
    cherry-pick further upgrade commits, if something goes wrong down the line.
  prefs: []
  type: TYPE_NORMAL
- en: For a variety of reasons, you may need to manually upgrade Angular, which is
    covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Manual update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is good to have a general understanding of how a manual upgrade works, because
    you may not be able to use the version of Angular CLI that has automatic update;
    you may eject Angular CLI altogether from your project or the tool may contain
    a bug. The version numbers discussed here are examples copied from the update
    guide.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the sake of this example, I will be demonstrating a potential upgrade from
    Angular 4 to Angular 5:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow Before updating instructions from the guide and this chapter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that Node and npm are up to date
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to upgrade to version `5.0.0`, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'This is to be followed by a `--save-exact` command so that TypeScript isn''t
    accidentally upgraded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that your `package.json` file has been updated to the correct versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Note that the caret and tilde has been removed from the TypeScript version,
    preventing any accidental upgrades, as the Angular tools are quite sensitive to
    the specific features of any given TypeScript release.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `@angular/cli` and `@angular/compiler-cli` have been updated to their
    latest versions; however, the tool didn't update `@angular/language-service`.
    This highlights the importance of manual checks, since every tool in your tool
    chain is susceptible to minor bugs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `@angular/language-service` by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify `package.json` has the correct version of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You're done updating your packages.
  prefs: []
  type: TYPE_NORMAL
- en: Follow after the update instructions from the guide and this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After upgrading your Angular application, it is a good idea to test the impact
    of your changes on performance.
  prefs: []
  type: TYPE_NORMAL
- en: Testing performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Test the performance of your Angular app before and after updates to ensure
    that your performance numbers remain as expected. In the following case, we automatically
    gain performance benefits due to platform-level improvements. First, let''s compare
    Angular v4 to v5:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Categories** | **   Angular 4** | **   Angular 5** | **        % Diff**
    |'
  prefs: []
  type: TYPE_TB
- en: '| JavaScript Assets Delivered (gzipped) |             83.6 KB |             72.6
    KB |            13% smaller |'
  prefs: []
  type: TYPE_TB
- en: '| Time to first page render (Fiber) |                 0.57 s |                 0.54
    s |                 5% faster |'
  prefs: []
  type: TYPE_TB
- en: '| Time to first page render (Fast 3G) |                 1.27 s |                 1.18
    s |                 7% faster |'
  prefs: []
  type: TYPE_TB
- en: Angular 4.4.3 vs 5.0.0
  prefs: []
  type: TYPE_NORMAL
- en: 'The trend of improvement continues with Angular 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Categories** | **   Angular 5** | **   Angular 6** | **      % Diff** |'
  prefs: []
  type: TYPE_TB
- en: '| JavaScript Assets Delivered (gzipped) |             72.6 KB |             64.1
    KB |        12% smaller |'
  prefs: []
  type: TYPE_TB
- en: '| Time to first page render (Fiber) |                 0.54 s |                 0.32
    s |           40% faster |'
  prefs: []
  type: TYPE_TB
- en: '| Time to first page render (Fast 3G) |                 1.18 s |                 0.93
    s |           21% faster |'
  prefs: []
  type: TYPE_TB
- en: Angular 5.0.0 vs 6.0.0
  prefs: []
  type: TYPE_NORMAL
- en: This trend should continue in future updates, with a target 3 KB size using
    the Ivy rendering engine. We will cover the importance of these performance numbers
    in [Chapter 5](5e0df0e8-57a6-47dc-86c8-d56f6e35021e.xhtml),* Enhance Angular App
    with Angular Material*.
  prefs: []
  type: TYPE_NORMAL
- en: Addressing security vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes you will be notified about security vulnerabilities in certain packages,
    through blogs or if you''re using GitHub, you may notice warning like this on
    your repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d4b0300f-e7fe-4956-9ce7-7a6febaef2b0.png)GitHub.com Vulnerability
    Scan'
  prefs: []
  type: TYPE_NORMAL
- en: This is a specific issue that arose when my Angular application was on version
    5.0.0 and my CLI version was on 1.5.0\. If you review this dependency, you can
    see the dependent packages and get more detail on the issue.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/483d2dc6-7e5d-4eee-8a63-5f5e0adf509d.png)GitHub.com Security Bulletin'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the vulnerable version of handlebars, 1.3.0 is being caused by
    one of Angular 5.0 packages.
  prefs: []
  type: TYPE_NORMAL
- en: Further research on Angular's GitHub issues reveals that the issue is actually
    caused by `@angular/cli version 1.5.0`. The reference is [https://github.com/angular/angular/issues/20654](https://github.com/angular/angular/issues/20654).
  prefs: []
  type: TYPE_NORMAL
- en: 'This was to try an update to the latest minor version update of Angular, Material
    or CLI, which in this case is version 5.1.0 and 1.6.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This update resolved the security warning displayed by GitHub. If you are not
    able to resolve your issue by upgrading, create a new issue on GitHub and keep
    tabs on upcoming patch or minor releases of Angular until the issue is resolved.
  prefs: []
  type: TYPE_NORMAL
- en: Updating your web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the top of your stack is the web server in which you host your web application
    in. This is a live, production system that is likely exposed to the internet,
    thus one that is at most risk. It should be judiciously kept up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, your release pipeline resembles the one described in [Chapter 3](4e68114e-68b7-4fe6-a853-81347e981667.xhtml)*,
    Prepare Angular App for Production Release*, where your frontend application is
    served by a containerized low-profile instance. This can be the `minimal-node-web-server`
    that I publish and maintain or an Nginx-based instance. In either case, an upgrade
    is simple by changing version number listed next to your base image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: It is always a good idea to specify the version number of the base Docker image
    you're using. Otherwise, it will default to a latest behavior, which in this case
    may mean an odd-numbered release that is not suitable for production. That said,
    `minimal-node-web-server` follows layers upon layers of the best security practices
    that reduces the attack surface and makes it incredibly difficult to mount a successful
    attack to compromise your web app. In line with this theme of security best practices,
    `minimal-node-web-server` would never push an odd numbered node version as the
    default behavior.
  prefs: []
  type: TYPE_NORMAL
- en: If your content is served through an installation of a web server like IIS,
    Apache, or Tomcat, you must follow and track security bulletins for these technologies.
    However, most likely another person or department altogether will be in charge
    upgrading this server, which may result in delays resulting from days to months,
    which is forever in internet time.
  prefs: []
  type: TYPE_NORMAL
- en: You're at the highest risk, if you're serving your static web content, like
    your SPA, through the same application server that also implements your backend
    APIs. Even though your architecture may be decoupled, if upgrading any tool or
    application in your dependency trees has side effects on any other part of your
    application, it means there's significant friction in your ability to secure or
    improve the performance of your frontend application.
  prefs: []
  type: TYPE_NORMAL
- en: A truly decoupled architecture will also allow the frontend to scale at different
    rate than your backend infrastructure and this can have great cost benefits. For
    example, suppose that your frontend serves lots of static information and rarely
    needs to poll the backend. At times of high load, you may need three instances
    of your frontend server to serve all the requests but only a single instance of
    the backend server since the calls are few and far in between.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Docker image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After having upgrade your app and its dependencies or simply adding new features,
    you will need to update and publish your new Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: In `package.json`, update the version property to `1.1.0` or match your version
    to your current Angular version
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `npm run docker:debug` to build and verify that your updates work correctly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, execute `npm run docker:publish` to push your new image to a repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After your image is published, take the necessary steps to deploy the image
    on a server or a cloud provider, as covered in [Chapter 3](4e68114e-68b7-4fe6-a853-81347e981667.xhtml),* Prepare
    Angular App for Production Release*, and [Chapter 11](ba073d6f-c0a0-4681-aea6-aeedac3cbc69.xhtml),* Highly-Available
    Cloud Infrastructure on AWS*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the importance of staying up to date across your
    entire stack of dependencies from development tools such as Node and npm, to Angular.
    We looked at how you can use ng update and Angular Update Guide to make Angular
    updates as painless as possible. We also covered manual updates, performance testing,
    dealing with out-of-band security vulnerabilities and patches, including the necessity
    to keep your web server up to date. Maintaining a relatively up-to-date system
    has direct cost benefits. The smaller the delta, the less the effort to upkeep.
    However, as time goes on, the cost of upgrading a system raises exponentially.
    As non-direct benefits, we can list customer satisfaction generated from better
    performance, a metric that impacts companies like Amazon at the tune of millions
    of dollars per every 100 ms of latency. New features in tools also have a profound
    impact on developer productivity and happiness, which helps retention and reduces
    cost of newly developed features, which in return may lead to increased customer
    satisfaction. Saying up to date is certainly a positive feedback loop.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go over how you can add Angular Material to your
    project by making your Local Weather App look great. In the process, you will
    learn about the negative performance impact that user control or UI component
    libraries can have on your application, including basic Material components, Angular
    Flex layout, accessibility, typography, theming, and how to update Angular Material.
  prefs: []
  type: TYPE_NORMAL
