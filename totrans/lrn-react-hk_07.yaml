- en: Implementing React Context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned about the most fundamental Hooks, such
    as the State Hook, the Reducer Hook, and the Effect Hook. We developed a small
    blog application using these Hooks. We have noticed during the development of
    our blog app, that we have to pass down the `user` state from the `App` component
    to the `UserBar` component, and from the `UserBar` component to the `Login`, `Register`,
    and `Logout` components. To avoid having to pass down the state like this, we
    are now going to learn about React context and Context Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to begin by learning what React context is, and what providers
    and consumers are. Then, we are going to use Context Hooks as a context consumer,
    and discuss when context should be used. Finally, we are going to implement themes
    and global state via contexts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing React context as an alternative to passing down props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing themes via context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using context for global state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found on the GitHub repository: [hhttps://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter05](https://github.com/PacktPublishing/Hands-On-Web-Development-with-Hooks/tree/master/Chapter05)
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important that
    you write the code yourself in order for you to be able to learn and understand
    properly. However, if you run into any issues, you can always refer to the code
    example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing React context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we passed down the `user` state and `dispatch` function
    from the `App` component, to the `UserBar` component; and then from the `UserBar`
    component to the `Logout`, `Login`, and `Register` components. React context provides
    a solution to this cumbersome way of passing down props over multiple levels of
    components, by allowing us to share values between components, without having
    to explicitly pass them down via props. As we are going to see, React context
    is perfect for sharing values across the whole application.
  prefs: []
  type: TYPE_NORMAL
- en: First, we are going to have a closer look at the problem of passing down props.
    Then, we are going to introduce React context as a solution to the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Passing down props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before learning about React context in depth, let''s recap what we implemented
    in the earlier chapters, in order to get a feeling for the problem that contexts
    solve:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/App.js`, we defined the `user` state and the `dispatch` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we passed the `user` state and the `dispatch` function to the `UserBar`
    component (and the `CreatePost` component):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `src/user/UserBar.js` component, we took the `user` state as a prop,
    and then passed it down to the `Logout` component. We also took the `dispatch`
    function as a prop, and passed it to the `Logout`, `Login`, and `Register` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we used the `dispatch` and `user` props in the `Logout`, `Login`, and
    `Register` components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: React context allows us to skip steps 2 and 3, and jump straight from step 1
    to step 4\. As you can imagine, with larger apps, context becomes even more useful,
    because we might have to pass down props over many levels.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing React context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React context is used to share values across a tree of React components. Usually,
    we want to share global values, such as the `user` state and the `dispatch` function,
    the theme of our app, or the chosen language.
  prefs: []
  type: TYPE_NORMAL
- en: 'React context consists of two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The **provider**, which provides (sets) the value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **consumer**, which consumes (uses) the value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are first going to look at how contexts work, using a simple example, and,
    in the next section, we are going to implement them in our blog app. We create
    a new project with the `create-react-app` tool. In our simple example, we are
    going to define a theme context, containing the primary color of an app.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we have to define the context. The way this works has not changed since
    Hooks were introduced.
  prefs: []
  type: TYPE_NORMAL
- en: 'We simply use the `React.createContext(defaultValue)` function to create a
    new context object. We set the default value to `{ primaryColor: ''deepskyblue''
    }`, so our default primary color, when no provider is defined, will be `''deepskyblue''`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/App.js`, add the following definition before the `App` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note how we are exporting `ThemeContext` here, because we are going to need
    to import it for the consumer.
  prefs: []
  type: TYPE_NORMAL
- en: That is all we need to do to define a context with React. Now we just need to
    define the consumer.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the consumer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we have to define the consumer in our `Header` component. We are going
    to do this in the traditional way for now, and in the next steps use Hooks to
    define the consumer:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/Header.js` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we have to import `ThemeContext` from the `App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can define our component, where we use the `ThemeContext.Consumer`
    component and a `render` function as `children` prop, in order to make use of
    the context value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `render` function, we can now make use of the context value to set
    the `color` style of our `Header` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we still need to import the `Header` component in `src/App.js`, by adding
    the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we replace the current `App` function with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using contexts like this works, but, as we have learned in the first chapter,
    using components with `render` function props in this way clutters our UI tree,
    and makes our app harder to debug and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A better way to use contexts is with the `useContext` Hook! That way, we can
    use context values like any other value, in a similar way to the `useState` Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/Header.js`. First, we import the `useContext` Hook from React, and
    the `ThemeContext` object from `src/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create our `Header` component, where we now define the `useContext` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The rest of our component will be the same as before, except that, now, we
    can simply return our `Header` component, without using an additional component
    for the consumer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using Hooks makes our context consumer code much more concise.
    Furthermore, it will be easier to read, maintain, and debug.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the header now has the color `deepskyblue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f75e52bf-5b27-4664-87f2-e2c67672250d.png)'
  prefs: []
  type: TYPE_IMG
- en: A simple app with a Context Hook!
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, our theme context successfully provides the theme for the header.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Contexts use the default value that is passed to `React.createContext`, when
    there is no provider defined. This is useful for debugging the components when
    they are not embedded in the app. For example, we could debug a single component
    as a standalone component. In an app, we usually want to use a provider to provide
    the value for the context, which we are going to define now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js`, and in our `App` function, we simply wrap the `Header` component
    with a `<ThemeContext.Provider>` component, where we pass `coral` as `primaryColor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now see that our header color changed from `deepskyblue` to `coral`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/63746442-6a7f-4f42-a9a6-834f8c09f619.png)'
  prefs: []
  type: TYPE_IMG
- en: Our provider changed the color of the header
  prefs: []
  type: TYPE_NORMAL
- en: If we want to change the value of our context, we can simply adjust the `value` prop
    that is passed to the `Provider` component.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the default value of a context is not used when we define a
    provider without passing the `value` prop to it! If we define a provider without
    a `value` prop, then the value of the context will be `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have defined a single provider for our context, let's move on to
    defining multiple, nested providers.
  prefs: []
  type: TYPE_NORMAL
- en: Nested providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With React context, it is also possible to define multiple providers for the
    same context. Using this technique, we can override the context value in certain
    parts of our app. Let''s consider the earlier example, and add a second header
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js`, and add a second `Header` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, define a second `Provider` component with a different `primaryColor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If we open the app in our browser, the second header now has a different color
    from the first one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/02a3debe-ceb4-486c-8073-c72a50c12595.png)'
  prefs: []
  type: TYPE_IMG
- en: Overriding context values with nested providers
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, we can override React context values by defining providers. Providers
    can also be nested, therefore overriding the values of other providers that are
    higher up in the component tree.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code for the small theme context example can be found in the `Chapter05/chapter5_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application; then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Alternative to contexts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: However, we should be careful, and not use React context too often, because
    it makes reusing components more difficult. We should only use contexts when we
    need to access data in many components, which are at different nesting levels.
    Furthermore, we need to make sure that we only use contexts for non-frequently
    changing data. Frequently changing values of contexts can cause our whole component
    tree to re-render, resulting in performance problems. That is why, for frequently
    changing values, we should use a state management solution such as Redux or MobX,
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we only want to avoid having to pass down props, we can pass down the rendered
    component instead of the data. For example, let''s say we have a `Page` component,
    which renders a `Header` component, which renders a `Profile` component, which
    then renders an `Avatar` component. We get a `headerSize` prop passed to the `Page`
    component, which we need in the `Header` component, but also in the `Avatar` component.
    Instead of passing down props through multiple levels, we could do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, only the `Page` component needs to know about the `headerSize` prop, and
    there is no need to pass it down further in the tree. In this case, contexts are
    not necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Such a pattern is called **inversion of control**, and it can make your code
    much cleaner than passing down props or using a context. However, we should not
    always use this pattern either, because it makes the higher-level component more
    complicated.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning how to implement themes in a small example, we are now going
    to implement themes in our blog app, using React context and Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we have to define the context. Instead of defining it in the `src/App.js`
    file, in our blog app, we are going to create a separate file for the context.
    Having a separate file for contexts makes it easier to maintain them later on.
    Furthermore, we always know where to import the contexts from, because it is clear
    from the filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start defining a theme context:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/contexts.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we import `React`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the `ThemeContext`. As before in our small example, we set
    the default `primaryColor` to `deepskyblue`. Additionally, we set the `secondaryColor`
    to `coral`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have defined our context, we can move on to defining the Context
    Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the Context Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After defining the context, we are going to define our consumers, using Context
    Hooks. We start by creating a new component for the header, then define a Context
    Hook for our existing `Post` component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Header component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we create a new `Header` component, which is going to display `React
    Hooks Blog` in the `primaryColor` of our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `Header` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/Header.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we import `React`, and the `useContext` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we import the `ThemeContext` from the previously created `src/contexts.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define our `Header` component, and the Context Hook. Instead of storing
    the context value in a `theme` variable, we use destructuring to directly extract
    the `primaryColor` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return the `h1` element, as we did before in our small example,
    and `export` the `Header` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now our `Header` component is defined, and we can use it.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Header component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After creating the `Header` component, we are going to use it in the `App`
    component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js`, and import the `Header` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, render the `Header` component before the `UserBar` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You might want to refactor the `React Hooks Blog` value into a prop that is
    passed to the `App` component (app config), because we are already using it three
    times in this component.
  prefs: []
  type: TYPE_NORMAL
- en: Now, our `Header` component will be rendered in the app and we can move on to
    implementing the Context Hook in the Post component.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Context Hook for the Post component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we want to display the `Post` headers in the secondary color. To do this,
    we need to define a Context Hook for the `Post` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/Post.js`, and adjust the `import` statement to import the `useContext` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we import the `ThemeContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define a Context Hook in the `Post` component, and get the `secondaryColor` value
    from the theme, via destructuring:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we use the `secondaryColor` value to style our `h3` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look at our app now, we can see that both colors are used properly from
    the `ThemeContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/95ba1a24-ae40-4a7f-b635-768d53db8fd0.png)'
  prefs: []
  type: TYPE_IMG
- en: Our ThemeContext in action
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, our app now uses the primary color for the main header, and the
    secondary color for the post titles.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right now, our Context Hooks use the default value that is specified by the
    context, when no provider is defined. To be able to change the value, we need
    to define a provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start defining the provider:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js`, and import the `ThemeContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Wrap the whole app with the `ThemeContext.Provider` component, providing the
    same theme that we set as the default value earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Our app should look exactly the same way as before, but now we are using the
    value from the provider!
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically changing the theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have defined a provider, we can use it to dynamically change the
    theme. Instead of passing a static value to the provider, we are going to use
    a State Hook that defines the current theme. Then, we are going to implement a
    component that changes the theme.
  prefs: []
  type: TYPE_NORMAL
- en: Using a State Hook with the context provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we are going to define a new State Hook, which we are going to use to
    set the value for the context provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define a State Hook, and use it in the context provider:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js`, and import the `useState` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a new State Hook at the beginning of the `App` component; here we set
    the default value to our default theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we pass the `theme` value to the `ThemeContext.Provider` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Our app is still going to look the same way as before, but we are now ready
    to dynamically change our theme!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the ChangeTheme component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final part of our theme feature is a component that can be used to change
    the theme dynamically, by making use of the State Hook that we defined earlier.
    The State Hook is going to re-render the `App` component, which will change the
    value that is passed to the `ThemeContext.Provider`, which, in turn, is going
    to re-render all the components that make use of the `ThemeContext` Context Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start implementing the `ChangeTheme` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/ChangeTheme.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As always, we have to import `React` first, before we can define a component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to be able to easily add new themes later on, we are going to create
    a constant `THEMES` array, instead of manually copying and pasting the code for
    the different themes. This is going to make our code much more concise, and easier
    to read:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: It is a good idea to give constant values that are hardcoded a special name,
    such as writing the whole variable name in caps. Later on, it might make sense
    to put all these configurable hardcoded values in a separate `src/config.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define a component to render a single `theme`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we render a link, and display a small preview of the theme, by showing
    the Primary and Secondary colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Here, we set the cursor to `pointer`, in order to make the element appear clickable.
    We could also use an `<a>` element; however, this is not recommended if we do
    not have a valid link target, such as a separate page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we define the `ChangeTheme` component, which accepts the `theme` and
    `setTheme` props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a function to check if a theme object is the currently active
    theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we use the `.map` function to render all of the available themes, and
    call the `setTheme` function when clicking on them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can import and render the `ChangeTheme` component, after the `Header`
    component in `src/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, we now have a way to change the theme in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fc47c205-d957-4bc8-a052-0e4e8808abf4.png)'
  prefs: []
  type: TYPE_IMG
- en: Our app after changing the theme, using Context Hooks in combination with a
    State Hook
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have a context that is consumed via Hooks, which can also be changed
    via Hooks!
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code for the theme feature in our blog app can be found in the `Chapter05/chapter5_2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application; then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Using context for global state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning how to use React context to implement themes in our blog app,
    we are now going to use a context to avoid having to manually pass down the `state`
    and `dispatch` props for our global app state.
  prefs: []
  type: TYPE_NORMAL
- en: Defining StateContext
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start by defining the context in our `src/contexts.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/contexts.js`, we define the `StateContext`, which is going to store
    the `state` value and the `dispatch` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We initialized the `state` value as an empty object, and the `dispatch` function
    as an empty function, which will be used when no provider is defined.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the context provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are going to define the context provider in our `src/App.js` file, which
    is going to get the values from the existing Reducer Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the context provider for global state now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/App.js`, import the `StateContext` by adjusting the existing `import`
    statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define a new context provider, by returning it from our `App` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now, our context provider provides the `state` object and the `dispatch` function
    to the rest of our app, and we can move on to consuming the context value.
  prefs: []
  type: TYPE_NORMAL
- en: Using StateContext
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have defined our context and provider, we can use the `state` object
    and the `dispatch` function in various components.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by removing the props that we manually passed to our components in
    `src/App.js`. Delete the following code segments marked in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: As we are using contexts, there is no need to pass down props manually anymore.
    We can now move on to refactoring the components.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring user components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we refactor the user components, and then we move on to the post components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s refactor the user-related components now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/UserBar.js`, and also remove the props there (code marked in
    bold should be removed), since we do not need to manually pass them down anymore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we import the `useContext` Hook and the `StateContext` in `src/user/UserBar.js`,
    in order to be able to tell whether the user is logged in or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can use the Context Hook to get the `user` state from our `state` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we import `useContext` and `StateContext` in `src/user/Login.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we remove the `dispatch` prop, and use the Context Hook instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We repeat the same process in the `src/user/Register.js` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `src/user/Logout.js` component, we do the same, but also get the `user`
    state from the `state` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Our user-related components now use a context instead of props. Let's move on
    to refactoring the post-related components.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring post components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, all that is left to do is refactoring the post components; then our whole
    app will be using React context for global state:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start with the `src/post/PostList.js` component, where we import `useContext`
    and `StateContext`, remove the props, and use the Context Hook instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We do the same for the `CreatePost` component, which is the last component
    that we need to refactor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Our app works in the same way as before, but now we use a context for global
    state, which makes our code much cleaner, and avoids having to pass down props!
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code for the global state context in our blog app can be found in
    the `Chapter05/chapter5_3` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application; then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned about React context as an alternative to passing
    down props over multiple levels of React components. We then learned about context
    providers and consumers, and the new way to define consumers, via Hooks. Next,
    we learned when it does not make sense to use contexts, and when we should use
    inversion of control instead. Then, we used what we learned in practice, by implementing
    themes in our blog app. Finally, we used React context for the global state in
    our blog app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to request data from a server,
    using React and Hooks. Then, we are going to learn about `React.memo` to prevent
    unnecessary re-rendering of components, and React Suspense to lazily load components
    when they are needed.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which problem do contexts avoid?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two parts that contexts consist of?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are both parts required to be defined in order to use contexts?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the advantage of using Hooks, instead of traditional context consumers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an alternative to contexts, and when should we use it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we implement dynamically changing contexts?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When does it make sense to use contexts for state?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have explored
    in this chapter, take a look at the following reading material:'
  prefs: []
  type: TYPE_NORMAL
- en: Official docs on React context: [https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information on composition versus inheritance: [https://reactjs.org/docs/composition-vs-inheritance.html](https://reactjs.org/docs/composition-vs-inheritance.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of HTML color codes (if you want to define new themes): [https://www.rapidtables.com/web/color/html-color-codes.html.](https://www.rapidtables.com/web/color/html-color-codes.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
