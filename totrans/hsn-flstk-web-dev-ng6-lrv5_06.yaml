- en: Creating a RESTful API Using Laravel - Part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue to build our API. We still have a long way
    to go in Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to use some features that are very common in every web application,
    such as authentication and the customization of API errors.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, we are creating a RESTful API and, unlike traditional applications
    such as MVC, our error model is extremely varied and always returned when we used
    the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to build a solid RESTful API by doing the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with request validation and error messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using token-based authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with Laravel resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with request validation and error messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Laravel framework offers us many ways to show error messages, and, by default,
    Laravel's **base controller class** uses a `ValidatesRequests` trait that provides
    methods to validate the incoming HTTP request, including many default rules such
    as required, email format, date format, string, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the possible validation rules at [https://laravel.com/docs/5.6/validation#available-validation-rules](https://laravel.com/docs/5.6/validation#available-validation-rules).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is pretty simple to use request validation, as we can see in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For example, let's see how we can validate the incoming request to the `bikes`
    endpoint using the HTTP `POST` method to `localhost:8081/api/bikes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The validation code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous operation failed because we purposely didn''t send a required
    file in our imaginary request. However, the return message has some interesting
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP status code: `422`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following JSON response error message:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Pretty simple, right? Laravel performs all the validations behind the scenes
    and gives us an elaborate error message.
  prefs: []
  type: TYPE_NORMAL
- en: But what if we want to take control over all the message fields? The answer
    is that we can do this using manual validation with a validator instance using
    the validator facade. This is what we'll be looking at in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP status code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go further in implementing the validator, let's take a break and review
    some HTTP status code. As we saw previously, we have a 422 HTTP status code named **Unprocessable
    entity**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the most common and useful error codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 200 | OK | Everything''s all right! |'
  prefs: []
  type: TYPE_TB
- en: '| 201 | Created | Resource was created successfully. |'
  prefs: []
  type: TYPE_TB
- en: '| 202 | Accepted | The request has been accepted for further processing, which
    will be completed later. |'
  prefs: []
  type: TYPE_TB
- en: '| 204 | OK | Resource was deleted successfully. |'
  prefs: []
  type: TYPE_TB
- en: '| 302 | Redirect | A common redirect response; you can GET the representation
    at the URI in the location response header. |'
  prefs: []
  type: TYPE_TB
- en: '| 304 | Not Modified | There is no new data to return. |'
  prefs: []
  type: TYPE_TB
- en: '| 400 | Bad Request | Client error. |'
  prefs: []
  type: TYPE_TB
- en: '| 401 | Unauthorized | You are not logged in, for example, you''re not using
    a valid access token. |'
  prefs: []
  type: TYPE_TB
- en: '| 403 | Forbidden | You are authenticated but do not have access to what you
    are trying to do. |'
  prefs: []
  type: TYPE_TB
- en: '| 404 | Not found | The resource you are requesting does not exist. |'
  prefs: []
  type: TYPE_TB
- en: '| 405 | Method not allowed | The request type is not allowed, for example,
    /bikes is a resource and POST /bikes is a valid action, but PUT /bikes is not.
    |'
  prefs: []
  type: TYPE_TB
- en: '| 409 | Conflict | Resource already exists. |'
  prefs: []
  type: TYPE_TB
- en: '| 422 | Unprocessable entity | Validation failed. The request and the format
    is valid, however, the request was unable to process. For instance, this occurs
    when sent data does not pass validation tests. |'
  prefs: []
  type: TYPE_TB
- en: '| 500 | Server error | An error occured on the server and it was not the consumer''s
    fault. |'
  prefs: []
  type: TYPE_TB
- en: You can read more about status codes at [http://www.restapitutorial.com/httpstatuscodes.html](http://www.restapitutorial.com/httpstatuscodes.html).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Controllers validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Well, we have gone through a lot of theory, so now it is time to write some
    code. Let''s implement the `Validator` on API controllers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/app/Http/Controllers/API/BikeController.php` and add the following
    code right after the use App\Bike statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following code inside the `store(Request $request)` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in the previous code, we are using the response JSON format and set
    the errors and status code as parameters of the `json()` method.
  prefs: []
  type: TYPE_NORMAL
- en: We will do the same for the `update(Request request,request,id)` method using
    the same code block from *step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `project/app/Http/Controllers/API/BuilderController.php` and add the following
    code right after the use App\Builder statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following code inside the  `store(Request $request)` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We will do the same for the `update(Request request,request,id)` method using
    the same code block from *step 5.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `project/app/Http/Controllers/API/ItemController.php` and add the following
    code right after the  use App\Item statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following code inside the `store(Request $request)` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We will do the same for the `update(Request request,request,id)` method using
    the same code block from *step 7.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the validation boilerplate code was placed in the `store()` and `update()` methods,
    so it is time to write some error handlers.
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom error handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, Laravel has a very powerful error handling engine, but it is totally
    dedicated to the MVC development pattern, as we mentioned previously. In the next
    few lines, we''ll see how we can change this default behavior and add some specific
    error handling to our API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/app/Exceptions/Handler.php` and add the following code inside the `render($request,
    Exception, $exception)` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, besides mapping the main errors of our API, we still need
    to add some custom errors for operations involving authentication with JWT. Don't
    worry; in the next section, we will see how to use JWT to protect some routes
    for our API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the following code to the top of the file, after the `ExceptionHandler` import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will be able to see the proper message instead of the default error
    page from Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we keep the default Laravel error page and just add custom handling.
    It is very important that we send the `header: accept: application / json`. In
    this way, Laravel can identify that it should send the response in JSON format
    instead of sending the standard error page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a brief test and check what happens when we try to access a protected
    URL. Open a Terminal window and type the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be a JSON with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s try another error and see what happens when we try to send a POST
    method.  Type the following code in Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be a JSON with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Checking API URLs with the Swagger UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After all of this boilerplate code, it is time to test the API and see all
    the work we have done in this chapter come to life:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to go into the `php-fpm` containers bash with the following command:
    `docker-compose exec php-fpm bash`.'
  prefs: []
  type: TYPE_NORMAL
- en: Open your default browser and go to `http://localhost:8081/api/documentation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will see the following result with all the APIs documented properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7df5634d-5005-4518-9754-bb97a17237a0.png)Swagger UI'
  prefs: []
  type: TYPE_NORMAL
- en: Let's check some operations.
  prefs: []
  type: TYPE_NORMAL
- en: Get all records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how we can retrieve a list of bikes from our API using the `GET`
    method on the Swagger UI:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **GET /api/bikes** to open the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the try it out button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bcb715fa-74f3-4f43-b281-f0b3c3966cc2.png)GET request'
  prefs: []
  type: TYPE_NORMAL
- en: Get record by ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how we can get a list of bikes from our API:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **GET /api/bikes/{id}** to open the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **try it out** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `3` inside the ID input box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Will see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bce94ec5-ce96-40c1-b928-4a5bbad8415c.png)GET by ID request'
  prefs: []
  type: TYPE_NORMAL
- en: Checking API response errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it is time to check some error messages:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **PUT /api/bikes/{id}** to open the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **try it out** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `1` inside the ID input box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `Example Value` placeholder with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Click on the execute button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c7248c7c-5d4c-4ae5-9c88-a4f589167a28.png)Update failed with error
    message'
  prefs: []
  type: TYPE_NORMAL
- en: As we can observe, everything happened as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Token-based authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's understand a bit more about API authentication with Laravel. Even though
    Laravel is an MVC framework, we can use the token-based authentication feature.
    Even Laravel itself has a library called Passport.
  prefs: []
  type: TYPE_NORMAL
- en: Laravel Passport is a library that works with the OAuth2 standard. This pattern
    determines a way to perform application authentication for a web application (API)
    through tokens, while JWT focuses on authenticating users through tokens.
  prefs: []
  type: TYPE_NORMAL
- en: Laravel Passport is a much bigger layer of abstraction than simple JWT, and
    it is primarily designed to be fully fledged and easy to set up and use as an
    OAuth2 server.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative to this is the use of libraries such as `tymon/jwt-auth`.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, Laravel Passport uses JWT for authentication, but that's just an implementation
    detail. `tymon/jwt-auth` is closer to a simple token-based authentication, though
    it is still pretty powerful and useful.
  prefs: []
  type: TYPE_NORMAL
- en: For the type of API we are building, JWT is the ideal method for our implementation.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about `jwt-auth` at [https://github.com/tymondesigns/jwt-auth](https://github.com/tymondesigns/jwt-auth).
  prefs: []
  type: TYPE_NORMAL
- en: Installing tymon-jwt-auth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's learn how to install and configure `tymon/jwt-auth`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation process is pretty simple, but, as the `tymon/jwt-auth` library
    is in constant development, we should take some care related what the version
    we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `project/composer.json` file and add the following line of code, right
    after Laravel/Tinker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it is time to publish the vendor package. Still in your Terminal window
    and inside the Tinker console, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using Laravel 5.6 and `jwt-auth` 1.0, so we don't need to perform
    any additional actions to load JWT providers. The `jwt-auth` documents sometimes
    look like a mess and are very confusing, but don't worry, just follow our steps
    and you will be safe from mismatching documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s generate the secret. Still in the Terminal window, type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will generate a secret key on your `.env` file, and will
    look something like the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have successfully installed `jwt-auth`, but we need to take
    some more steps to make our API secure.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the User model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we need to update the `User` model so that we can start to protect the
    API endpoints with user authentication.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to implement the `Tymon\JWTAuth\Contracts\JWTSubject` contract
    on our `User` model, which requires two methods: `getJWTIdentifier()` and `getJWTCustomClaims()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open ` project/User.php` and replace its content with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the auth guard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s make some adjustments to the `config.auth.php` file in order to
    protect some routes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/config/auth.php` and replace the API driver with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note that we replaced the default Laravel authentication drivers with `api` and `jwt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the authController
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our application, we will use only one controller to contain all our operations
    of registration and login, which are register, login, and logout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Later in this book, you will understand why we are using all operations within
    a single controller instead of creating a controller for each action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `project/app/Http/Controllers/API/AuthController.php` and replace its
    content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: There's almost nothing new in the previous code—we just returned a JSON response
    in the `register`, `login`, and `logout` functions, as we can see in the previous
    lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `register()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: After we created a `user`, we returned a HTTP status code of `201` with an `access_token`
    and an expiry date.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `login()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here, in the `login()` function, we returned the current user based on the user's
    email  address, an `access_token`, and the expiry date.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `logout()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `true` parameter inside the `logout()` function tells `jwt-auth`
    to invalidate the token forever.
  prefs: []
  type: TYPE_NORMAL
- en: Creating user routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to create the new routes for the registration, login, and logout operations
    and also protect some routes in our API, as discussed at the beginning of this
    chapter. Our users can interact with partial content of the application, but,
    to have access to all of its content, it is necessary to create a user and log
    in to the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/routes/api.php` and replace its content with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The last step is to protect the endpoint; we do this in the `project/routes/api.php` file
    or directly inside the controllers function. We will do this in the controllers
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting API routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is extremely simple to protect our routes using the application controllers.
    All we have to do is edit the `Controller` files and add the following code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/Http/Controllers/API/BikeController.php` and add the following
    code right before the `GET` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The previous code means that we are using the `auth:api` middleware to protect
    all bikers routes except for the `index()` method. So, our users can see the bike
    list, but, to see the bike's details and post a bike, they must be logged in.
    Later, in the [Chapter09](6122a03e-eecf-442d-b5ca-1f175c7fcf6a.xhtml) , *Creating
    Services and User Authentication*, on Angular, we will look at token-based authentication
    in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and logging in a User
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to check the user routes. As we don't have a user interface,
    we will be using a Chrome extension called Restlet Client. It is free and very
    powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about it and download it at [https://restlet.com/modules/client](https://restlet.com/modules/client):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Restlet extension and fill in the following fields, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2c9378c5-52fe-42bf-9e63-d338101a0a6f.png)Register endpoint'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will be the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7d85d160-15b0-40f9-817b-7c43a8915bf1.png)Created response'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s log in with the newly created user. Fill in fields as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b97bf3e7-5638-4c1d-8d4a-2010e66eaff7.png)User login'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will be the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/76e3eb37-f075-418a-89ae-a0147651c981.png)User logged response'
  prefs: []
  type: TYPE_NORMAL
- en: Well, our API authentication is ready and good to go. Later, in the [chapter
    09](6122a03e-eecf-442d-b5ca-1f175c7fcf6a.xhtml), *Creating Services and User Authentication*,
    on Angular, we will look at the authentication process in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with Laravel resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some previous versions of Laravel, it was possible to use a feature called
    Fractal, to dealing with JSON web API, but with this new version of Laravel we
    have the **Resources** feature, a very powerful tool to dealing with JSON web
    API.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll see how we can use the Resources feature, so that we
    can get the most out of our API. A Resource class is a way to transform data from
    one format to another.
  prefs: []
  type: TYPE_NORMAL
- en: 'When dealing with resources and transforming them into responses for the client,
    we basically have two types: an item and a collection. An item resource, as you
    might have guessed, is basically a one-to-one representation of our model, whereas
    a collection is the representation of many items. Collections may also have metadata
    and other navigation information, as we will see later in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating BikesResource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, let''s create our first resource:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will generate the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`App\Http\Resource\BikesResource.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App\Http\Resource\BikesResource.php` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are including all relationships in the `bike` model in our Array
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Creating BuildersResource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create `BuildersResource` using the `make` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will generate the following file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`App\Http\Resource\BuildersResource.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App\Http\Resource\BuildersResource.php` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Creating ItemsResource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create `ItemsResource` using the `make` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will generate the following file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`App\Http\Resource\ItemsResource.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App\Http\Resource\ItemsResource.php` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Creating ratingResource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create a new `Resource`, this time for ratings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will generate the following file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`App\Http\Resource\RatingResource.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App\Http\Resource\RatingResource.php` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Adding resources to controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to make some minor changes to our controllers in order to use
    the resource we just created. To avoid any mistakes, we will look at the code
    for all of our controllers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `Bike` controller by replacing the content in `App/Http/Controllers/API/BikeController.php` with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the code for the `store`/`create` method. Add the following
    code right after the `index()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code for the `Get` by `id` method. Add the following code
    right after the `store()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the code for the `update` method. Add the following code right
    after the `show()`function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The last method is to delete all records. Add the following code right after
    the `update()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: And we will do the same for the `Builders` controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `Builder` controller by replacing the content in `App/Http/Controllers/API/BuilderController.php` with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the code for the `store`/`create` method. Add the following
    code right after the `index()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the code for the `Get` by `id` method. Add the following code right
    after the `store()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the code for the `update` method. Add the following code right
    after the `show()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The last method is used to delete all records. Add the following code right
    after the `update()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to edit the `Rating` controller, replace the content in `App/Http/Controllers/API/RatingController.php` with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Well done! Now, we have the necessary code to go ahead with our API JSON. In
    the next few chapters, you will understand in greater detail what we have accomplished
    so far. We already have our API ready.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have come to the end of one more chapter. We saw how to build token-based
    authentication, how to protect endpoints only for logged-in users, and how to
    deal with custom error messages.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to use Laravel resources to return a JSON API format.
  prefs: []
  type: TYPE_NORMAL
- en: We are in the middle of our journey, yet we need to build all of the interface
    and implement the Angular frontend application so that we can have a pleasant
    visual result for our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to integrate Angular as well as some more
    tools into our application.
  prefs: []
  type: TYPE_NORMAL
