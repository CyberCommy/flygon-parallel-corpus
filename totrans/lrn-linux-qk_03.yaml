- en: Meet the Editors
  prefs: []
  type: TYPE_NORMAL
- en: First of all, let me tell you something that may surprise you. Linux implements
    what is called "Everything is a file" philosophy. This means that on your Linux
    system, everything is represented by a file. For example, your hard disk is represented
    by a file. A running program (process) is represented by a file. Even your peripheral
    devices, such as your keyboard, mouse, and printer, are all represented by files.
  prefs: []
  type: TYPE_NORMAL
- en: With that being said, an immediate consequence of "Everything is a file" philosophy
    is that Linux administrators spend a substantial amount of their time editing
    and viewing files. And so you will often see Linux administrators very proficient
    at using text editors. And this chapter is dedicated to just that. I want you
    to be very comfortable using various text editors in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot, and I mean a whole lot, of text editors out there that you
    can use. However, in this chapter, I will cover the most popular Linux editors
    that will get the job done.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical editors – gedit and kate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start with the most basic and simple editors out there. These are the graphical
    editors! If you are using a **GNOME** version of any Linux distribution, then
    you will have the text editor `gedit` installed by default. On the other hand,
    if you are using a **KDE** version of Linux, then you will have the text editor
    `kate` installed by default.
  prefs: []
  type: TYPE_NORMAL
- en: '**DESKTOP ENVIRONMENT**'
  prefs: []
  type: TYPE_NORMAL
- en: GNOME and KDE are two examples of desktop environments. Each desktop environment
    implements a different graphical user interface, which is a very fancy way of
    saying that your desktop will look different!
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyways, there is really not a lot to discuss on graphical editors. They are
    pretty intuitive and easy to use. For example, if you want to view a text file
    with `gedit`, then you run the `gedit` command followed by any filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will open the `gedit` graphical editor, and it displays your CPU information.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d37da084-50a9-4032-b1e9-a886707e6a80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Opening /proc/cpuinfo with gedit'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have `gedit` and have `kate` instead, then you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/cc6c07d1-6c84-44da-b26f-986f3b6839c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Opening /proc/cpuinfo with kate'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the graphical editors to create new files on your system.
    For example, if you want to create a file named `cats.txt` in `/home/elliot`,
    then you can run the `gedit /home/elliot/cats.txt` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/40a3c327-7211-46ab-b713-7cfcf87bc12b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Creating cats.txt with gedit'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now insert the line "I love cats!" then save and close the file. The file `cats.txt`
    now exists in my home directory, and I can view it with the `cat` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, you can use any other graphical text editor to create files on your
    system.
  prefs: []
  type: TYPE_NORMAL
- en: OK! That's enough talk about graphical text editors. Let's move on to explore
    the serious world of non-graphical text editors.
  prefs: []
  type: TYPE_NORMAL
- en: The nano editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `nano` editor is a very popular and easy-to-use command-line editor. You
    can open the `nano` editor by running the `nano` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open up your `nano` editor, and you should see a screen like that
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9b1e0e2-b634-4d2d-8d74-a6df75c96d78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Inside nano'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the six lines that are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6167db42-a28c-44c4-afcf-6c032c0e9694.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Add these six lines'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the bottom of the `nano` editor screen; you will see a lot of shortcuts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0345a1b9-485d-4917-a0a7-64666bf49078.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: nano shortcuts'
  prefs: []
  type: TYPE_NORMAL
- en: 'I have included all the useful nano shortcuts in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **nano shortcut** | **What it does** |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*O* | Saves the current file (write out). |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*K* | Cuts the current line and stores it in the buffer. |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*U* | Pastes the line stored in the buffer. |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*W* | Searches for a string (word) in the file. |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*\* | Replaces a string (word) in the file with another string. |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*R* | Reads another file. |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*G* | Views help information on how to use nano. |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*V* | Moves to the next page. |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*Y* | Moves to the previous page. |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*X* | Exits the nano editor. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 5: nano shortcuts'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the *Ctrl*+*O* shortcut is triggered by pressing *Ctrl* and then
    the letter *O*. You don't have to press the *+* key or the upper case letter *O*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s use the shortcut *Ctrl*+*O* to save the file; it will ask you for
    a filename, you can insert `facts.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48bb5470-d558-429b-b1ef-8514afb5ac00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Saving the file'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then press *Enter* to confirm. Now let''s exit the `nano` editor (use the *Ctrl*+*X *shortcut)
    to verify that the file `facts.txt` is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s open `facts.txt` again to fix the false facts we have added there!
    To open the file `facts.txt` with the `nano` editor, you can run the `nano facts.txt`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first line in the file `facts.txt` states that "Apples are blue." We certainly
    need to correct this false fact, so let's use the shortcut *Ctrl*+*\* to replace
    the word `blue` with `red`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you press *Ctrl*+*\*, it will ask you to enter the word that you want
    to replace; you can enter `blue`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1f7099a-5a54-4f3a-aef0-2ca1e043e558.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: The word to replace'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit *Enter*, and then it will ask you to enter the substitute word. You can
    enter `red`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a1da2ab-e958-469b-ab96-965e7cc4d551.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: The substitute word'
  prefs: []
  type: TYPE_NORMAL
- en: You can then hit *Enter*, and it will go through each instance of the word `blue`
    and ask you if you want to replace it. Luckily, we only have one occurrence of
    `blue`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebbefa8c-324b-45d1-af78-539a5a0aab9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Replacing blue with red'
  prefs: []
  type: TYPE_NORMAL
- en: Press *Y* and BOOM! The word `red` replaced `blue`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ee45d73-7f0e-4c74-9238-21cf16f8f38a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: red replaced blue'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one more word we need to change here. We can all agree that the Earth
    is not flat, right? I hope we all do! Now let''s replace the word `flat` with
    `round` precisely as we did before, and the result should be like the one shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a4e95ea-5677-4bce-8374-b43102783ab5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: flat replaced with round'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's save and exit the file. So we use the *Ctrl*+*O* shortcut to save
    and then *Ctrl*+*X* to exit.
  prefs: []
  type: TYPE_NORMAL
- en: The `nano` editor is pretty simple to use. And practice makes perfect, so the
    more you use it, the easier it will become for you. You can practice all the shortcuts
    in `Table 5` as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: The vi editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `nano` editor is usually the editor of choice for beginners. It is a great
    editor, but let's just say that it's not the most efficient editor out there.
    The `vi` editor is a more advanced Linux editor with tons of features and is by
    far the most popular editor among advanced Linux users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open the `facts.txt` file with the `vi` editor; to do that, you run
    the `vi facts.txt` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open the `vi` editor, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7294c42b-a5b4-4086-bed9-adbf69da2e48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: The facts.txt file opened in vi'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike the `nano` editor, the `vi` editor works in two different modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`insert` mode'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`command` mode'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `insert` mode enables you to insert text into a file. On the other hand,
    the `command` mode allows you to do things like copying, pasting, and deleting
    text. The `command` mode also allows you to search and replace text along with
    many other things.
  prefs: []
  type: TYPE_NORMAL
- en: Insert mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, you enter `command` mode when you first open the `vi` editor, and
    you can't insert text while you are in `command` mode. To insert text, you need
    to switch to `insert` mode. There are several ways you can use to change to `insert`
    mode; `Table 6` lists all of them.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Key** | **What it does** |'
  prefs: []
  type: TYPE_TB
- en: '| `i` | Inserts text before the current cursor position. |'
  prefs: []
  type: TYPE_TB
- en: '| `I` | Inserts text at the beginning of the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| `a` | Appends text after the current cursor position. |'
  prefs: []
  type: TYPE_TB
- en: '| `A` | Appends text after the end of the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| `o` | Creates a new line below the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| `O` | Creates a new line above the current line. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 6: vi insert mode'
  prefs: []
  type: TYPE_NORMAL
- en: You can navigate in the `vi` editor with your arrow keys, just like you would
    do in the `nano` editor. Now navigate to the last line in the file `facts.txt`
    and then press the letter `o` to switch into `insert` mode. You can now add the
    line "Linux is cool!"
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4afe6d76-edfc-4fc1-9231-a4834c36d9ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Adding a line in vi'
  prefs: []
  type: TYPE_NORMAL
- en: With `insert` mode, you can add as much text as you want. To switch back to
    `command` mode, you need to press the *Esc* key.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0542f500-99c6-4570-b5a1-e191424aa661.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15: Switching between Insert Mode and Command Mode'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot illustrates how to switch back and forth between `command`
    mode and `insert` mode.
  prefs: []
  type: TYPE_NORMAL
- en: Command mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anything you want to do aside from adding text can be achieved from `command` mode.
    There are a whole lot of commands you can use with the `vi` editor. You may think
    I am joking, but there are books and courses out there that only discuss the `vi`
    editor. However, Table 7 will get you up and running with the `vi` editor as it
    lists the most popular commands you can use with `vi`.
  prefs: []
  type: TYPE_NORMAL
- en: '| **vi command** | **What it does** |'
  prefs: []
  type: TYPE_TB
- en: '| `yy` | Copy (yank) the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| `3yy` | Copy (yank) three lines (starting with the current line). |'
  prefs: []
  type: TYPE_TB
- en: '| `yw` | Copy (yank) one word starting at the cursor position. |'
  prefs: []
  type: TYPE_TB
- en: '| `2yw` | Copy (yank) two words starting at the cursor position. |'
  prefs: []
  type: TYPE_TB
- en: '| `p` | Paste after the current cursor position. |'
  prefs: []
  type: TYPE_TB
- en: '| `P` | Paste before the current cursor position. |'
  prefs: []
  type: TYPE_TB
- en: '| `dd` | Cut (delete) the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| `4dd` | Cut (delete) four lines (starting with the current line). |'
  prefs: []
  type: TYPE_TB
- en: '| `dw` | Cut (delete) one word starting at the cursor position. |'
  prefs: []
  type: TYPE_TB
- en: '| `x` | Delete the character at the cursor position. |'
  prefs: []
  type: TYPE_TB
- en: '| `u` | Undo the last change. |'
  prefs: []
  type: TYPE_TB
- en: '| `U` | Undo all changes to the line. |'
  prefs: []
  type: TYPE_TB
- en: '| `/red` | Search for the word `red` in the file. |'
  prefs: []
  type: TYPE_TB
- en: '| `:%s/bad/good` | Replace the word `bad` with `good`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:set number` | Show line numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| `:set nonumber` | Hide line numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| `:7` | Go to line number 7. |'
  prefs: []
  type: TYPE_TB
- en: '| `G` | Jump to the end of the file. |'
  prefs: []
  type: TYPE_TB
- en: '| `gg` | Jump to the beginning of the file. |'
  prefs: []
  type: TYPE_TB
- en: Table 7: vi commands
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, `Table 7` has a lot of commands, so I will not go through all
    of them; that's left for you as an exercise. However, I will discuss some of the
    commands to help you get going with the `vi` editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by showing line numbers as it will make our life much easier!
    To do that, you run the `:set` number command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69d9a7ee-ea10-4a4c-b8e1-3b06d013cc33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16: Show line numbers'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s copy line `4`. You want to make sure the cursor is on line `4`;
    you can do that by running the `:4` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aacc68b4-97a6-4ff0-b832-abfa34dfb557.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17: Go to the 4th line'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now press the sequence `yy`, and it will copy the entire line. Let''s paste
    it three times at the end of the file. So navigate to the last line and then press
    *p* three times, it will paste the copied line three times, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/407eff49-cf61-4f82-a73f-ccc8df800a97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18: Copying and pasting in vi'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alright! Let''s replace the word `cool` with `awesome` because we all know
    Linux is not just cool; it''s awesome! To do that, you run the `:%s/cool/awesome`
    command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bd62bc6-483e-495b-99ec-7693d3c6c39d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19: Replace cool with awesome'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also replace the word `Roses` with `Cherries` because we all know that
    not all roses are red. To do that, run the `:%s/Roses/Cherries` command, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b92a6c73-a27c-4037-8d8b-caeeeca9ae83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20: Replace Roses with Cherries'
  prefs: []
  type: TYPE_NORMAL
- en: It will even tell you how many substitutions took place.
  prefs: []
  type: TYPE_NORMAL
- en: '**COOL TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: You should know that `:%s/old/new` will only replace the first occurrence of
    the word `old` with `new` on all the lines. To replace all the occurrences of
    the word `old` with `new` on all the lines, you should use the global option `:%s/old/new/g`
  prefs: []
  type: TYPE_NORMAL
- en: To understand and make sense of the tip above, add the line "blue blue blue
    blue" to your `facts.txt` file and try to use the `:%s/blue/purple` command to
    replace the word `blue` with `purple`. You will see that it will only replace
    the first occurrence of `blue`. To make it replace all occurrences of `blue`,
    you have to use the global option
  prefs: []
  type: TYPE_NORMAL
- en: '`:%s/blue/purple/g`.'
  prefs: []
  type: TYPE_NORMAL
- en: Saving and exiting vi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eventually, when you are done viewing or editing a file in `vi`, you would want
    to exit the `vi` editor. There are multiple ways you can use to exit the `vi`
    editor, `Table 8` lists all of them.
  prefs: []
  type: TYPE_NORMAL
- en: '| **vi command** | **What it does** |'
  prefs: []
  type: TYPE_TB
- en: '| `:w` | Save the file but do not quit `vi`. |'
  prefs: []
  type: TYPE_TB
- en: '| `:wq` | Save the file and quit `vi`. |'
  prefs: []
  type: TYPE_TB
- en: '| `ZZ` | Save the file and quit `vi` (same as `:wq`, just faster!). |'
  prefs: []
  type: TYPE_TB
- en: '| `:x` | Save the file and quit `vi` (same as `:wq` or `ZZ`). |'
  prefs: []
  type: TYPE_TB
- en: '| `:q` | Quit `vi` without saving. |'
  prefs: []
  type: TYPE_TB
- en: '| `:q!` | Forcefully quit `vi` without saving. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 8: Saving and Exiting vi'
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s save our file and quit the `vi` editor. Of course, you can use any
    of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`:wq`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`:x`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ZZ`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They all achieve the same result, that is, saving and exiting `vi`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e4023a5-29b5-4fb4-b352-7265fabbd287.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21: Save and exit vi'
  prefs: []
  type: TYPE_NORMAL
- en: If you have successfully exited the `vi` editor, I want to congratulate you
    because you are one of the elite. There are hundreds of memes and comics on the
    internet about how some people opened the `vi` editor, and were never able to
    exit!
  prefs: []
  type: TYPE_NORMAL
- en: File viewing commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, you may just want to view a file without editing it. While you
    can still use text editors like `nano` or `vi` to view files, there are much faster
    ways to view a file in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: The cat command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `cat` command is one of the most popular and frequently used commands in
    Linux. The `cat` (short for **concatenate**) command concatenates and prints files
    to the standard output (terminal).
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the `facts.txt` file that we created, you can run the `cat facts.txt`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can now view the contents of the file `facts.txt` from the comfort of your
    terminal without having to open any text editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `cat` command can do more than just viewing a file. It can also concatenate
    (put together) files. To demonstrate, create the following three files with your
    favorite text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file1.txt` (Insert the line "First File")'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`file2.txt` (Insert the line "Second File")'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`file3.txt` (Insert the line "Third File")'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s view each of the three files using the `cat` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s concatenate both `file1.txt` and `file2.txt` together by running
    the `cat file1.txt file2.txt` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also concatenate all three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep in mind that order matters; for example, running the `cat file2.txt file1.txt`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will output the text in `file2.txt` first before `file1.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: The tac command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `tac` command is the twin brother of the `cat` command. It is basically
    `cat` written in reverse, and it does the same thing as the `cat` command but
    in a reversed fashion!
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to view the `facts.txt` file in reverse order, you
    can run the `tac facts.txt` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `tac` command also concatenates files, just like the `cat` command.
  prefs: []
  type: TYPE_NORMAL
- en: The more command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Viewing files with the `cat` command is a good choice when the file is small,
    and there aren't many lines of text to display. If you want to view a big file,
    it's better to use the `more` command. The `more` command displays the content
    of a file one page at a time; it is basically a paging program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s view the contents of the file `/etc/services` with the `more` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It will show you the first page of the `/etc/services` files, and there is
    a percentage value at the bottom line that shows how far you have progressed through
    the file. You can use the following keys to navigate in `more`:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Enter* > to scroll down one line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Space Bar > to go to the next page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*b* > to go back one page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*q* > to quit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/etc/services` file stores information on numerous services (applications)
    that can run on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: The less command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `less` command is an improved version of the `more` command. Yes, you read
    this correctly; less is better than more! In fact, the famous idiom *less is more*
    originated from the idea that `less` offers more than `more`.
  prefs: []
  type: TYPE_NORMAL
- en: The `less` command is another pager program, just like `more`; it allows you
    to view text files one page at a time. The advantage of `less` is that you can
    use the UP/DOWN arrow keys to navigate through the file. Also, `less` is faster
    than `more`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the `/etc/services` file with `less` by running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can also use `more` navigation keys with less.
  prefs: []
  type: TYPE_NORMAL
- en: Heads or tails?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As its name suggests, the `head` command displays the first few lines of a
    file. By default, it shows the first ten lines of a file. For example, we know
    that `facts.txt` has ten lines in it, and so running the `head facts.txt` command
    will display all the file contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also pass the `-n` option to specify the number of lines you wish to
    view. For example, to display the first three lines of `facts.txt`, you can run
    the `head -n 3 facts.txt` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, the `tail` command displays the last few lines of a file.
    By default, it shows the last ten lines. You can also use the `-n` option to specify
    the number of lines you wish to view. For example, to display the last two lines
    in `facts.txt`, you can run the `tail -n 2 facts.txt` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Do you know what time it is? It's time for some knowledge check questions.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the following exercises, open up your Terminal and try to solve the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Only view the first two lines of the file `facts.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only view the last line of the file `facts.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display the contents of the file `facts.txt` in a reversed order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file `facts.txt` using the `vi` editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exit the `vi` editor and consider yourself one of the elites.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
