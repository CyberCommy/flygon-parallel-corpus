- en: Extending Metasploit and Exploit Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding chapter, you learned how to effectively use Armitage for easily
    performing some of the complex penetration testing tasks. In this chapter, we''ll
    have a high-level overview of exploit development. Exploit development can be
    quite complex and tedious and is such a vast topic that an entire book can be
    written on this. However, in this chapter, we''ll try to get a gist of what exploit
    development is, why it is required, and how the Metasploit Framework helps us
    develop exploit. The topics to be covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploit development concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding external exploits to Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Metasploit exploit templates and mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit development concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exploits can be of many different types. They can be classified based on various
    parameters such as platforms, architecture, and purpose served. Whenever any given
    vulnerability is discovered, there are either of three following possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: An exploit code already exists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Partial exploit code exists that needs some modification to execute malicious
    payload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No exploit code exists, and there's a need to develop new exploit code from
    scratch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first two cases look quite easy as the exploit code exists and may need
    some minor tweaks to get it executed. However, the third case, wherein a vulnerability
    has just been discovered and no exploit code exists, is the real challenge. In
    such a case, you might need to perform some of the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Gather basic information, such as the platform and architecture the vulnerability
    is supported on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get all possible details about how the vulnerability can be exploited and what
    the possible attack vectors are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use techniques such as fuzzing to specifically pinpoint the vulnerable code
    and parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a pseudo code or prototype to test whether the exploit is working for
    real
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write the complete code with all required parameters and values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish the code for the community and convert it into a Metasploit module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these activities are quite intense and require a lot of research and patience.
    The exploit code is parameter sensitive; for example, in the case of a buffer
    overflow exploit, the return address is the key to run the exploit successfully.
    Even if one of the bits in the return address is mentioned incorrectly, the entire
    exploit would fail.
  prefs: []
  type: TYPE_NORMAL
- en: What is a buffer overflow?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Buffer overflow is one of the most commonly found vulnerabilities in various
    applications and system components. A successful buffer overflow exploit may allow
    remote arbitrary code execution leading, to elevated privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'A buffer overflow condition occurs when a program tries to insert more data
    in a buffer than it can accommodate, or when a program attempts to insert data
    into a memory area past a buffer. In this case, a buffer is nothing but a sequential
    section of memory allocated to hold anything from a character string to an array
    of integers. Attempting to write outside the bounds of a block of the allocated
    memory can cause data corruption, crash the program, or even lead to the execution
    of malicious code. Let''s consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is vulnerable to buffer overflow. If you carefully notice,
    the buffer size has been set to 25 characters. However, what if the user enters
    data more than 25 characters? The buffer will simply overflow and the program
    execution will end abruptly.
  prefs: []
  type: TYPE_NORMAL
- en: What are fuzzers?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding example, we had access to the source code, and we knew that
    the variable buffer can hold a maximum of 25 characters. So, in order to cause
    a buffer overflow, we can send 30, 40, or 50 characters as input. However, it's
    not always possible to have access to the source code of any given application.
    So, for an application whose source code isn't available, how would you determine
    what length of input should be sent to a particular parameter so that the buffer
    gets overflowed? This is where fuzzers come to the rescue. Fuzzers are small programs
    that send random inputs of various lengths to specified parameters within the
    target application and inform us the exact length of the input that caused the
    overflow and crash of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Did you know? Metasploit has fuzzers for fuzzing various protocols. These fuzzers
    are a part of auxiliary modules within the Metasploit Framework and can be found
    in the `auxiliary/fuzzers/`.
  prefs: []
  type: TYPE_NORMAL
- en: Exploit templates and mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s consider that you have written an exploit code for a new zero-day vulnerability.
    Now, to include the exploit code officially into the Metasploit Framework, it
    has to be in a particular format. Fortunately, you just need to concentrate on
    the actual exploit code, and then simply use a template (provided by the Metasploit
    Framework) to insert it in the required format. The Metasploit Framework offers
    an exploit module skeleton, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s try to understand the various fields in the preceding exploit skeleton:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Name** field: This begins with the name of the vendor, followed by the
    software. The **Root Cause** field points to the component or function in which
    the bug is found and finally, the type of vulnerability the module is exploiting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Description** field: This field elaborates what the module does, things
    to watch out for, and any specific requirements. The aim is to let the user get
    a clear understanding of what he''s using without the need to actually go through
    the module''s source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Author** field: This is where you insert your name. The format should
    be Name. In case you want to insert your Twitter handle as well, simply leave
    it as a comment, for example, `Name #Twitterhandle`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **References** field: This is an array of references related to the vulnerability
    or the exploit, for example, an advisory, a blog post, and much more. For more
    details on reference identifiers, visit [https://github.com/rapid7/metasploit-framework/wiki/Metasploit-module-reference-identifiers](https://github.com/rapid7/metasploit-framework/wiki/Metasploit-module-reference-identifiers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Platform** field: This field indicates all platforms the exploit code
    will be supported on, for example, Windows, Linux, BSD, and Unix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Targets** field: This is an array of systems, applications, setups, or
    specific versions your exploit is targeting. The second element or each target
    array is where you store specific metadata of the target, for example, a specific
    offset, a gadget, a `ret` address, and much more. When a target is selected by
    the user, the metadata is loaded and tracked by a `target index`, and can be retrieved
    using the target method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Payloads** field: This field specifies how the payload should be encoded
    and generated. You can specify Space, SaveRegisters, Prepend, PrependEncoder,
    BadChars, Append, AppendEncoder, MaxNops, MinNops, Encoder, Nop, EncoderType,
    EncoderOptions, ExtendedOptions, and EncoderDontFallThrough.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **DisclosureDate** field: This field specifies when the vulnerability was
    disclosed in public, in the format of M D Y, for example, "Jun 29, 2017."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your exploit code should also include a `check` method to support the `check`
    command, but this is optional in case it's not possible. The `check` command will
    probe the target for the feasibility of the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, the exploit method is like your main method. Start writing your
    code there.
  prefs: []
  type: TYPE_NORMAL
- en: What are Metasploit mixins?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are familiar with programming languages such as C and Java, you must
    have come across terms such as functions and classes. Functions in C and classes
    in Java basically allow code reuse. This makes the program more efficient. The
    Metasploit Framework is written in the Ruby language. So, from the perspective
    of the Ruby language, a mixin is nothing but a simple module that is included
    in a class. This will enable the class to have access to all methods of this module.
  prefs: []
  type: TYPE_NORMAL
- en: So, without going into much details about programming, you can simply remember
    that mixins help in modular programming; for instance, you may want to perform
    some TCP operations, such as connecting to a remote port and fetching some data.
    Now, to perform this task, you might have to write quite a lot of code altogether.
    However, if you make use of the already available TCP mixin, you will end up saving
    the efforts of writing the entire code from scratch! You will simply include the
    TCP mixin and call the appropriate functions as required. So, you need not reinvent
    the wheel and can save a lot of time and effort using the mixin.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the various mixins available in the Metasploit Framework by browsing
    the `/lib/msf/core/exploit` directory, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8e73b36-7848-4376-ad43-1a2db9858a2e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of the most commonly used mixins in the Metasploit Framework are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Exploit::Remote::Tcp`: The code of this mixin is located at `lib/msf/core/exploit/tcp.rb` and
    provides the following methods and options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP options and methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines RHOST, RPORT, and ConnectTimeout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connect()` and `disconnect()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates self.sock as the global socket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offers SSL, Proxies, CPORT, and CHOST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evasion via small segment sends
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposes user options as methods such as `rhost()` `rport()` `ssl()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exploit::Remote::SMB`: The code of this mixin is inherited from the TCP mixin,
    is located at `lib/msf/core/exploit/smb.rb`, and provides the following methods
    and options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`smb_login()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`smb_create()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`smb_peer_os()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides the options of SMBUser, SMBPass, and SMBDomain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposes IPS evasion methods such as `SMB::pipe_evasion`, `SMB::pad_data_level`,
    and `SMB::file_data_level`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding external exploits to Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New vulnerabilities across various applications and products are found on a
    daily basis. For most newly found vulnerabilities, an exploit code is also made
    public. Now, the exploit code is quite often in a raw format (just like a shellcode)
    and not readily usable. Also, it might take some time before the exploit is officially
    made available as a module within the Metasploit Framework. However, we can manually
    add an external exploit module in the Metasploit Framework and use it like any
    other existing exploit module. Let's take an example of the MS17-010 vulnerability
    that was recently used by the Wannacry ransomware. By default, the exploit code
    for MS17-010 isn't available within the Metasploit Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by downloading the MS17-010 module from the exploit database.
  prefs: []
  type: TYPE_NORMAL
- en: Did you know? Exploit-DB located at [https://www.exploit-db.com](https://www.exploit-db.com)
    is one of the most trusted and updated sources for getting new exploits for a
    variety of platforms, products, and applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply open [https://www.exploit-db.com/exploits/41891/](https://www.exploit-db.com/exploits/41891/)
    in any browser, and download the exploit code, which is in the `ruby (.rb)` format,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b635786a-01f4-4360-9a42-c66456aac7df.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the Ruby file for the exploit has been downloaded, we need to copy it
    to the Metasploit Framework directory at path shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eee3e35b-c16b-426e-945e-1ba276c3dc3f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The path shown in the screenshot is the default path of the Metasploit Framework
    that comes preinstalled on Kali Linux. You need to change the path in case you
    have a custom installation of the Metasploit Framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'After copying the newly downloaded exploit code to the Metasploit directory,
    we will start `msfconsole` and issue a `reload_all` command, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e198ef75-1145-45c2-b8d9-199b7bc0e746.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `reload_all` command will refresh the Metasploit''s internal database to
    include the newly copied external exploit code. Now, we can use the `use exploit` command,
    as usual, to set up and initiate a new exploit, as shown in the following screenshot.
    We can simply set the value of the variable `RHOSTS` and launch the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/259ccf64-59e6-4924-89a8-70e32d898198.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this concluding chapter, you learned the various exploit development concepts,
    various ways of extending the Metasploit Framework by adding external exploits,
    and got an introduction to the Metasploit exploit templates and mixins.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can try the following exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to explore the mixin codes and corresponding functionalities for the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: capture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lorcon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MSSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KernelMode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FTPServer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EggHunter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find any exploit on [https://www.exploit-db.com](https://www.exploit-db.com)
    that is currently not a part of the Metasploit Framework. Try to download and
    import it in the Metasploit Framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
