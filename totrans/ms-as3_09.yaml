- en: Packaging and Distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compiling and building APKs is something we do many times during the course
    of an application's development, and other than including various dependencies,
    we have taken our build automation system, Gradle, pretty much for granted. Despite
    this, it will not have escaped the reader's attention that what Gradle actually
    does is really quite sophisticated and complex.
  prefs: []
  type: TYPE_NORMAL
- en: One of the reasons that we can take Gradle for granted is the way that it configures
    each build using a process known as **convention over configuration**. This ensures
    that, in nearly all cases, Gradle selects the most sensible configuration options
    for each project. It is when we override these settings that Gradle becomes interesting
    and useful. For example, we can use it to build mobile and tablet versions of
    an app from the same Studio project.
  prefs: []
  type: TYPE_NORMAL
- en: Producing a compiled APK file is by no means the final step in our journey,
    as there is still plenty of testing and analysis that we can do. These processes
    are assisted greatly by the presence of Android Studio's APK Analyzer.
  prefs: []
  type: TYPE_NORMAL
- en: Once our testing is complete and we are satisfied with our product, we will
    enter the final stage of the journey by generating signed APK files, ready for
    release. This step is not an involved process and Android Studio helps the developer
    every step of the way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the build process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating product flavors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing Gradle builds from Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing APK files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a signed APK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enrolling for Google Play app signing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring automatic signing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradle build configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the reader will have seen, Gradle scripts generally have a single project
    (or root) file and one or more module level files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad24eb58-9eea-491f-b91c-c805c56bdaa7.png)'
  prefs: []
  type: TYPE_IMG
- en: Gradle scripts
  prefs: []
  type: TYPE_NORMAL
- en: We are told not to edit this file in comments in the root script; unless we
    have configuration options common to all modules, this is best left as-is.
  prefs: []
  type: TYPE_NORMAL
- en: Module-level scripts are of far more interest to us and the following is a breakdown
    of a typical one.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first line simply declares the use of the Gradle plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, Android-targeted API level and build tools versions are declared:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The default configuration settings define elements of the Android manifest
    file, and editing them here will be automatically reflected in the manifest after
    the next build or sync, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The build types section configures **ProGuard**, which is a tool used to minimize
    and obfuscate our code.
  prefs: []
  type: TYPE_NORMAL
- en: The difference Proguard makes to the size of your APK can often be minimal,
    but the effects of obfuscation cannot be underestimated and ProGuard can make
    it as good as impossible for our APKs to be reverse-engineered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `buildTypes` section contains instructions on whether and how to run ProGuard
    on the APK file when a release version of the application is built:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: ProGuard rules can be edited from the `proguard.rules.pro` file, which overrides
    the default rules and can be found in `sdk\tools\proguard`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `minifyEnabled` is set by default to `false`. This is an extremely
    useful set of functions that strips our code of redundancies, often resulting
    in far smaller APK files, and should generally be set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: It is also a good idea to add shrinkResources `true`, which performs a similar
    action on our resource files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will focus on the dependencies section, with which we are already
    quite familiar. Here, any `.jar` files in the module''s `lib` directory are included:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Command-line options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many readers who have migrated from other IDEs may well have run Gradle scripts
    from the command line, and this, of course, is possible with Android Studio, although
    Studio incorporates this nicely within the workspace so that it is not necessary
    to exit the IDE to execute commands this way.
  prefs: []
  type: TYPE_NORMAL
- en: There are two handy tool windows to assist us in this task, the Gradle tool
    window and the Gradle console,and both are available from the View | Tool Windows
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5177500-9e53-4d8c-9dad-cec003e87ea2.png)'
  prefs: []
  type: TYPE_IMG
- en: The Gradle tool window
  prefs: []
  type: TYPE_NORMAL
- en: The breakdown in the preceding screenshot provides a nice overview of the role
    Gradle plays, but to really get to grips with it we will need to work through
    a simple example, and the following section demonstrates how to configure Gradle
    to produce different product flavors from a single project.
  prefs: []
  type: TYPE_NORMAL
- en: Product flavors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally speaking, there are two reasons for wanting to create customized
    versions, or flavors, of our applications:'
  prefs: []
  type: TYPE_NORMAL
- en: When we are creating versions for different form factors, such as a mobile phone
    and a tablet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we want two different versions of our app to be available in the Play store,
    such as paid and free versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both of these situations can be catered for by configuring our build files,
    and this can be done for both `debug` and `release` APKs. New flavors and build
    types can both be configured using their respective dialogs, which can be found
    under the Build menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a41167aa-8237-4da8-8838-8a7968ea8d07.png)'
  prefs: []
  type: TYPE_IMG
- en: Build options
  prefs: []
  type: TYPE_NORMAL
- en: 'As always, it is best to see how these processes operate at first hand. In
    the following example, we will create two product flavors to represent a free
    and a paid version of an app. The steps to be followed are:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new project in Android Studio with just a single module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create two New | Directories in your `values` folder, called `paid` and `free`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These will not be visible in the Explorer under the Android label, but can be
    found by switching to the Project view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A shortcut to this can be achieved by selecting `values` in the navigation toolbar
    and selecting `paid` or `free` from the drop-down. This will automatically open
    the project view and expand it to display our new folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create two appropriate `strings.xml` files along these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `build.gradle` file, and complete it like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now use the Build Variants tool window to select which of the two flavors is
    subsequently built.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many reader will have migrated from the Eclipse IDE to Android Studio. Importing
    the Eclipse project is relatively straightforward, but importing Gradle build
    files is less so. This can be achieved with the following `build.gradle` root
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Being able to create distinct versions of an APK without having to create separate
    projects is a great time-saver, and Gradle makes this remarkably simple. Nevertheless,
    for most of the time, we can just let Gradle get on with its work.
  prefs: []
  type: TYPE_NORMAL
- en: It would be tempting to think that the testing process will be complete with
    the production of an APK. However, Android Studio provides a marvelous tool that
    allows us to analyze completed APKs.
  prefs: []
  type: TYPE_NORMAL
- en: An APK analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: APK Analyzer is one of the handiest features of Android Studio; as its name
    suggests, it allows us to analyze APK files themselves, even performing a certain
    amount of reverse engineering by extracting resources and XML and allowing us
    to compare different versions.
  prefs: []
  type: TYPE_NORMAL
- en: The APK Analyzer can also be found in the Build menu, under Analyze APK....
    Every time we run a project on a device or emulator, a debug APK is generated.
    This can be found in your project directories under; `\SomeProject\App\build\outputs\apk\debug`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Analyzer displays its output, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebd85fd2-29a0-43b2-bbd8-54962bea71ea.png)'
  prefs: []
  type: TYPE_IMG
- en: APK analysis
  prefs: []
  type: TYPE_NORMAL
- en: The Analyzer's output contains a wealth of information, beginning with its size
    and its compressed Play store size. It is possible to see at a glance which resources
    take up the most room and rectify this where possible, for example by using vectors
    instead of bitmaps.
  prefs: []
  type: TYPE_NORMAL
- en: The `classes.dex` file allows us to explore the memory consumed by our classes
    and imported libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a049f36-fdaf-4a1a-af39-148408a5eca1.png)'
  prefs: []
  type: TYPE_IMG
- en: APK class analysis.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most useful features of the Analyzer is the ability to compare two
    APKs side by side, which can be achieved using the button in the top-right corner
    of the window.
  prefs: []
  type: TYPE_NORMAL
- en: If the APK Analyzer is not enough, then there is the Profile or Debug APK...
    entry in the main File menu. This opens up a new project and disassembles the
    APK so that it can be fully explored and even debugged.
  prefs: []
  type: TYPE_NORMAL
- en: Besides MakeBuild and Analyze, the Build menu has other useful entries, for
    example, the Clean Project item removes build artifacts from the build directory
    if we want to share them with colleagues and collaborators across the internet.
    For a deeper clean, open the command prompt in your project folder using your
    native file explorer or select Terminal from the File | Tools Window menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d4b4bf5-230e-4394-89d6-8db4bebe41c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following command will clean your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The amount of space this operation can save is often very impressive. Of course,
    the next time you build the project, it will take as long as it did the first
    time.
  prefs: []
  type: TYPE_NORMAL
- en: For the vast majority of the development cycle, we are only concerned with debug
    versions of our APKs, but sooner or later we will need to produce an APK fit for
    release.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing a mobile application, even a relatively simple one, is a lengthy
    process, and once we have tested all our code, ironed out any bumps, and polished
    our UI, we want to be able to get our product on the shelf as quickly and simply
    as possible. Android Studio has all these processes incorporated into the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: As the reader will know, the first step toward publication is generating a signed
    APK.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a signed APK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All Android applications require a digital certificate before they can be installed
    on a user's device. These certificates follow the usual pattern of including a
    public key with every download that corresponds with our own private key. This
    process guarantees authenticity for the user and prevents anyone else producing
    updates of other developers' work.
  prefs: []
  type: TYPE_NORMAL
- en: During development, the IDE automatically generates a debug certificate for
    us, for use only during development. These certificates can be found in: `\SomeApp\build\outputs\apk\debug`
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to create these identity certificates: we can manage our
    own keystore, or we can use Google Play App Signing. We will take a look at both
    of these techniques now, beginning with self-management.'
  prefs: []
  type: TYPE_NORMAL
- en: Managing keystores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whether we are managing our own keystore or Google does it for us, the process
    begins in the same way, as the following steps demonstrate:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Generate Signed APK... entry in the Build menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the following dialog, using very strong passwords.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/48d19670-92ad-4dc8-93ff-2bc41ac1add9.png)'
  prefs: []
  type: TYPE_IMG
- en: The Generate Signed APK dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are creating a new keystore, you will be presented with the New Key
    Store dialog, which must be completed along these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cfc6f841-3586-4a48-9908-582af45e26d4.png)'
  prefs: []
  type: TYPE_IMG
- en: The New Key Store dialog
  prefs: []
  type: TYPE_NORMAL
- en: The final dialog allows you to select Build Type and APK Destination Folder,
    as well as any flavors you may have created. Ensure that you select the V2 (Full
    APK Signature) box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a32fca8c-4899-4a10-91c8-93d8da0c3be3.png)'
  prefs: []
  type: TYPE_IMG
- en: Final APK configurations
  prefs: []
  type: TYPE_NORMAL
- en: The final APK(s) will be stored in, `...\app\release\app-release.apk`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The selection of the V2 signature version is an important inclusion. Introduced
    in API level 24 (Android 7.0), the Signature Theme v2 provides faster installation
    and protects against hackers reverse-engineering our APKs. Unfortunately, it doesn't
    work for all builds but is well worth applying when it does.
  prefs: []
  type: TYPE_NORMAL
- en: Managing our own key stores is how it has generally always been done, and provided
    we keep our keys secure, it is a perfectly acceptable way to manage our certificates.
    Nevertheless, App signing using Google Play offers some distinct advantages and
    is well worth considering.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play app signing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main advantage of using Google Play to sign our apps is that Google maintain
    key information and if, by some misfortune, we lose ours, this can be retrieved.
    One very important thing to note about this system is that, once adopted, there
    is **no opt-out option**. This is because this would itself represent a possible
    security breach.
  prefs: []
  type: TYPE_NORMAL
- en: To enable Google Play app signing, prepare your signed APK as described in the
    preceding steps, and then open the Google developer console. Google Play app signing
    is available from the Release management menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b02ce0eb-3fc3-441f-9693-c1677224d947.png)'
  prefs: []
  type: TYPE_IMG
- en: Google Play App Signing
  prefs: []
  type: TYPE_NORMAL
- en: This will then open the Terms of Service dialog.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b567758-f2e9-4433-abc8-2c4d3244b5b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Google Play App Signing Terms of Service
  prefs: []
  type: TYPE_NORMAL
- en: 'To enroll with Google Play App Signing Terms of Service, you will need to follow
    the steps outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: First, encrypt your signing key, using the **Play Encrypt Private Key** (PEPK)
    tool, which can be downloaded from the console in the left-hand navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a second upload key and register it with Google.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use this key to sign your app for publication and upload it to Google Play.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Google then uses this to authenticate you and then sign the app with the encrypted
    key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More information on the process can be found by clicking on LEARN MORE on the
    Terms of Service dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Providing that we are happy to commit ourselves, enrolling with the app signing
    service provides a more secure system than the traditional approach. However,
    when we decide to sign our apps, it is always good to have more control over the
    process, for example by configuring Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic signing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Signing configurations are created automatically for us each time we sign an
    app or flavor. Fortunately, these configurations can be custom built to suit our
    specific purposes. For example, one might want to automatically sign an app on
    each build. Android Studio makes this possible through Project Structure..., which
    can be found in the main File menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following exercise demonstrates how to automatically sign a release version
    of an application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Project Structure dialog, as explained previously or by selecting Open
    Module Settings from your module's drop-down menu in the Project Explorer, or
    by selecting the module and pressing *F4*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Signing tab, click on the + icon, and fill in the appropriate fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ec8ec989-9da2-4158-a044-bdd17be9fe52.png)'
  prefs: []
  type: TYPE_IMG
- en: A signing configuration
  prefs: []
  type: TYPE_NORMAL
- en: Next, open the Build Types tab and select the debug or release type, enter the
    Signing Config field, as shown in the following screenshot, and any other settings,
    such as enabling Minify.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8686cf0b-0bf0-4982-aea9-6c4565c58794.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting Build Type and Signing Config
  prefs: []
  type: TYPE_NORMAL
- en: There are a few other preparations to make before publication. A few more tests
    must be performed on the release APK, and various promotional resources and materials
    need to be gathered, but from an Android Studio point of view, the signed, released
    APK is pretty much the finished product.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The production of a signed APK is the final step in what will have been a long
    journey. Beginning with nothing more than an idea, each application will have
    grown through countless cycles of design, development, and testing before finally
    being placed on a shelf in a store such as Android Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio has been designed to assist developers on every step of this
    journey, and one of the reasons that Google has put so much into the product;
    is because, by investing in the developers of the future and making it easier
    for them to put ideas into practice, the Android platform can only become better.
  prefs: []
  type: TYPE_NORMAL
- en: In this book we have explored the only IDE created specifically for Android
    development, and we have seen how this specialized approach provides many benefits
    to the developer. The visual and intuitive nature of the Layout Editor and the
    way that Constraint Layouts can be designed with little more than a click or two
    of the mouse, will leave most of us feeling quite sorry for those developers still
    using other IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: Coding too becomes far less of a chore with Android Studio's simple code completion
    and refactoring features. Add this to the incorporation of Kotlin as an official
    development language, and choosing Android Studio will seem to many mobile developers
    to be the only choice. Even compiling and testing apps can be quicker and easier
    with Android Studio and of course developing for new and exciting form factors,
    such as wearables and IoT, is made easier with the tools provided by the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book we have explored the advantages of choosing Android Studio
    3\. The IDE is of course a work in progress and no doubt, as a project that Google
    appears to be seriously invested in, it will continue to grow and improve for
    many years to come. In many ways Android Studio 3 is only the beginning and it
    is hoped that this book will help the reader master one small step of that journey.
  prefs: []
  type: TYPE_NORMAL
