- en: Controlling a Robot Using a Laptop
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controlling a robot with a computer is a fascinating thing. The computer becomes
    a remote controller, and the robot moves according to the commands provided by
    the keyboard. In this chapter, we will look at two techniques for controlling
    a robot wirelessly using your laptop.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Installing the `ncurses` library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling LEDs and a buzzer using `ncurses`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling a rover (RPi robot) using a laptop keyboard
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and setting up QT5
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling LEDs with GUI buttons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling a rover using a laptop with QT5
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main hardware components that you need for this project are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Two LEDs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One buzzer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A RPi robot
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code files for this chapter can be downloaded from [https://github.com/PacktPublishing/Hands-On-Robotics-Programming-with-Cpp/tree/master/Chapter05](https://github.com/PacktPublishing/Hands-On-Robotics-Programming-with-Cpp/tree/master/Chapter05)[.](https://github.com/PacktPublishing/Hands-On-Robotics-Programming-with-Cpp/tree/master/Chapter05)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Installing the ncurses library
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**New curses** (**ncurses**) is a programming library that allows developers
    to create text-based user interfaces. It is generally used for creating GUI-based
    applications or software. One of the key features of the `ncurses` library is
    that we can use it for taking inputs from keyboard keys, and controlling hardware
    devices on the output side. We will use the `ncurses` library to write programs
    to detect keys to control our robot accordingly. For example, if we press the
    up arrow, we want our robot to move forward. If we press the left arrow, we want
    our robot to take a left turn.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the `ncurses` library, we first have to open the command window.
    To install `ncurses`, type in the following command and press *Enter*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, you will be asked whether you want to install the library. Type *Y* (for
    yes) and press *Enter*. It will take around three to five minutes for the `ncurses`
    library to download and install inside your RPi.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that your RPi is near the Wi-Fi router, so that the library files
    can download quickly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: ncurses functions
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After installing the `ncurses` library, let''s explore some of the important
    functions that are a part of this library:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '`initscr()`: The `initscr()` function initializes the screen. It sets up the
    memory, and clears the command window screen.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refresh()`: The refresh function refreshes the screen.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getch()`: This function will detect the user''s touch, and will return the
    ASCII number for that particular key. The ASCII number is then stored in an integer
    variable, which is later used for comparison purposes.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`printw()`: This function is used to print string values inside the command
    window.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keypad()`: If the keypad function is set to true, we can also take the user''s
    input from the function keys, as well as the arrow keys.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`break`: This function is used to exit the program if the program is running
    in a loop.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`endwin()`: The `endwin()` function frees the memory, and ends `ncurses`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The entire `ncurses` program must be written between the `initscr()` and `endwin()`
    functions:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Writing a HelloWorld program with ncurses
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now write a simple `ncurses` program for printing `Hello World`. I have
    named this program `HelloWorld.cpp`. The `HelloWorld.cpp` program can be downloaded
    from the `Chapter05` folder of the GitHub repository:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The program for compiling and running a C++ program using the `ncurses` library
    is different from other programs. First, we need to understand the program. After
    that, we will learn how to compile and run it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code snippet, we first declare the `ncurses` library and the
    `wiringPi` library. Next, we carry out the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `main` function, we declare the `initscr()` function to initialize
    and clear the screen.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, when the user presses a key, the `getch` function will be called, and
    the ASCII number of that key will be stored in the `keypressed` variable, which
    is of the `int` type.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, using the `for` loop, we check whether the key that is pressed is
    `'h'` or (`||`) `'H'`. Make sure that you put the letter H in single quotes. When
    we put the letters in single quotes, we get the ASCII number of that character. `'h'`,
    for example, returns the ASCII number **104**, while `'H'` returns the ASCII number
    **72**. Instead of `'h'` or `'H'`, you can also write the ASCII numbers of the
    *h* and *H* key presses, which are 104 and 72 respectively. This would look as
    follows: `if(keypressed == 72 || keypressed == 104)`. The numbers should not be
    inside quotes.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, if you press the `''h''` or `''H''` key, `Hello World` will be printed
    inside the command window:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a4913f2b-b2a2-4fcf-ab0c-8701cebc49c6.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: If you want `Hello World` to be printed on the next line, you can simply put
    `\n` before the `Hello World` text. This would look as follows: `printw("\nHello
    World")`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, when you press a key, the `getch()` function below the `if` condition
    will be called, and the program will terminate.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compiling and running the program
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For compiling and running the `HelloWorld.cpp` program, open the Terminal window.
    Inside the Terminal window, type `ls` and press *Enter.* You will now see a list
    of all the folder names present inside your RPi:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40287ace-cd8f-4e7c-9cfa-89865bee5562.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: The `HelloWorld.cpp` is stored inside the `Cprograms` folder. To open the `Cprograms`
    folders, type `cd` (change directory) followed by the folder name, and press *Enter:*
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the previous command can be seen as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f826375f-c450-4ede-ac0b-fe923c2b7265.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: 'Next, to view the content of the `Cprograms` folder, we will type `ls`again:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4482051d-cae1-4d55-8890-f2aefb226734.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: Inside the `Cprograms` folder, there is a `Data` folder and a couple of `.cpp`
    programs. The program in which we're interested is the `HelloWorld.cpp` program,
    as we want to compile and build this program. To do this, type the following command
    and press *Enter:*
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows that the compilation was done successfully:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44a8ec5e-8b76-4f6a-bc71-b412c52c47c7.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 'For compiling any code that uses the `ncurses` library, the code is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After this, type `./HelloWorld` and press *Enter* to run the code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9daaa933-e6d0-428d-be62-e2ad58585fec.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'After you press *Enter,* the entire Terminal window will be cleared:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26346c31-ea94-4601-ae18-efe993190bf3.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'Next, press the *h* or *H* key, and the `Hello World` text will be printed
    in the Terminal window. To exit the Terminal window, press any key:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28a3046e-ebec-463d-bbb9-1ec982952e54.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: Now that we've created a simple `HelloWorld` program, and tested that the `ncurses`
    libraries work inside the Terminal window, let's write a program to control the
    LEDs and the buzzer.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Controlling LEDs and a buzzer using ncurses
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After compiling and testing your first `ncurses` program, let's write a program
    to control hardware such as LEDs and a buzzer by providing input from the keyboard.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Wiring connections
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this particular example, we will need two LEDs and one buzzer. The wiring
    connections of the LEDs and the buzzer to the RPi are as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2718087d-e112-481b-8b8f-daff5a4c96ea.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: 'We can see the following from the connection diagram:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: The positive (anode) pin of the first LED is connected to the wiringPi pin number
    15, while the negative (cathode) pin is connected to the physical pin number 6
    (the ground pin).
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The positive pin of the second LED is connected to the wiringPi pin number 4,
    while the negative pin is connected to the physical pin number 14 (the ground
    pin).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One pin of the buzzer is connected to the wiringPi pin number 27 and the other
    pin is connected to the physical pin number 34 (the ground pin).
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing the LEDBuzzer.cpp program
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The name of our program is `LEDBuzzer.cpp`. The `LEDBuzzer.cpp` program can
    be downloaded from the `Chapter05` folder of the GitHub repository. The `LEDBuzzer`
    program is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After writing the program, let''s look at how it works:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding program, we start by declaring the `ncurses` and `wiringPi`
    libraries, along with the `stdio` C library
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, pin numbers `15`, `4`, and `7` are declared as output pins
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when the *L* or *l* keys are pressed, LED 1 will turn `HIGH` and `LOW`
    for one second each
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, when the *E* or *e* keys are pressed, LED 2 will turn `HIGH` and
    `LOW` for one second each
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If *D* or *d* keys are pressed, LED 1 will turn `HIGH` and `LOW` for one second
    each, and then LED 2 will turn `HIGH` and `LOW` for one second each
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the *b* or *B* keys are pressed, the buzzer will beep two times
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, if you press the *x* or *X* key, the C++ program will be terminated
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While compiling the code, you must also include the name of the `wiringPi`
    library, which is `lwiringPi`. The final compilation command looks as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/9f9c0804-0e67-4088-a696-2c9deff72ec4.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: 'After compiling the code, type `./LEDBuzzer`to run it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94b1a78f-987e-495a-a513-ec44922a540a.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: Next, press the *L*, *E*, *D*, and *B* keys, and the LEDs and the buzzer will
    turn on and off accordingly.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Controlling a rover using a laptop keyboard
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After controlling the LEDs and the buzzer, let''s write a program for controlling
    our rover (the robot) from our laptop:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/840ae9c4-c3ec-4a37-82b9-34c8a7b78ec7.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: 'I have kept the wiring connections the same as they were in [Chapter 3](085b19da-5821-4c63-9a7a-3e63829059f5.xhtml),
    *Programming the Robot*:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: The wiringPi pin numbers 0 and 2 are connected to the **IN1** and **IN2** pins
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The wiringPi pin numbers 3 and 4 are connected to the **IN3** and **IN4** pins
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The left motor pins are connected to the **OUT1** and **OUT2** pins of the motor
    driver
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The right motor pins are connected to the **OUT3** and **OUT4** pins of the
    motor driver
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pin 6 of the Raspberry Pi is connected to the ground socket of the motor driver
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a laptop-controlled rover program
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have understood the previous two programs, by now, you might have figured
    out the code for our laptop-controlled rover. In this program, we will move the
    robot in forward, backward, left, and right directions using the up, down, left,
    and right arrow keys, as well as the *A*, *S*, *X*, *W*, and *D* keys. In order
    to recognize the inputs from the arrow keys, we will need to include the `keypad()`
    function inside our program. The `Laptop_Controlled_Rover.cpp` program can be
    download from the `Chapter05` folder of the `GitHub` repository:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding program can be explained as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding program, if you press the up arrow key, this will be recognized
    by the `KEY_UP` code inside the first `if` condition. If the condition is `TRUE`,
    the robot will move forward, and the word `FORWARD` will be printed in the Terminal.
    Similarly, the robot will also move forward if you press the *W* or *w* keys.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you press the down arrow key (`KEY_DOWN`) or the *X* or *x* keys, the robot
    will move backward, and the word `BACKWARD` will be printed in the Terminal.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you press the left arrow key (`KEY_LEFT`) or the *A* or *a* keys, the robot
    will turn left, and the words `LEFT TURN` will be printed in the Terminal.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you press the right arrow key (`KEY_RIGHT`) or the *D* or *d* keys, the robot
    will turn right, and the words `RIGHT TURN` will be printed in the Terminal.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, if you press the *S* or *s* keys, the robot will stop, and the word
    `STOP` will be printed in the Terminal.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To terminate the code, we can press the *E* or *e* keys. Since we haven't provided
    any time delays, the robot will keep moving indefinitely, unless you stop the
    robot using the *S* or *s* keys.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When testing the code, connect the Raspberry Pi to a power bank so that your
    robot is completely wireless, and it can move freely.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Tracing a square path
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After moving the robot in different directions, let''s make the rover trace
    a square path. To do this, our robot will move as follows: forward -> right turn
    -> forward -> right turn -> forward -> right turn -> forward -> stop:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/957bbde9-fd66-4935-945e-48cfa850d3a7.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `LaptopControlRover` program, we will create another `if` condition.
    Inside this `if` condition, we will write a program to make the robot trace a
    square path. The `if` condition will look as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To trace the square path, the robot will move forward four times. It will take
    right turns three times, and, finally, it will stop. Outside the `main` function,
    we will need to create `forward()`, `rightturn()`, and `stop()` functions so that,
    instead of writing `digitalWrite` code multiple times inside the main function,
    we can simply call the necessary function.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '| **Forward condition** | **Right turn** | **Stop** |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: This is how we can control the robot using a laptop, with the help of the keyboard
    keys. Next, let's take a look at the second technique, in which we will create
    GUI buttons using QT5\. When these buttons are pressed, the robot will move in
    different directions.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Installing and setting up QT5
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'QT is a cross-platform application framework generally used for embedded graphical
    user interfaces. The latest version of QT is 5, so it is also referred to as QT5\.
    To install the QT5 software inside our RPi, open the Terminal window and type
    in the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae4420cd-ba5f-4ff8-bf3e-641efe8b43e6.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: 'This command will download the necessary `qt5` files that run in the backend.
    Next, for downloading and installing the QT5 IDE, type in the following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/b0bb610a-68fa-40d3-b57f-c34c0a757f8e.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: 'The installation of QT5 IDE will take around 10 to 15 minutes depending on
    your internet speed. If you face any problems while installing QT5, try updating
    and upgrading your RPi. To do this, type the following commands in your Terminal
    window:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Setting up QT5
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we write any programs inside QT5, we first need to set it up so that
    it can run C++ programs. To open QT5, click on the raspberry icon, go to Programming, then
    select the Qt Creator:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65b660f8-1756-4f5d-8626-ce083d488dbb.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: 'QT5 runs a bit slower in RPi, so it will take some time for the IDE to open.
    Click on Tools and then select Options...:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65e1375e-cead-40ae-83de-b2450a4ad34f.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
- en: 'Inside Options..., click on Devices and make sure the Type is set to Desktop.
    The name should be `Local PC`, which refers to the RPi:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fef1ed68-6b3a-486e-a335-2d9516ff0eb0.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: 'After that, click on the Build & Run option. Next, select the Kits tab and
    click on the Desktop (default) option:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02292176-eb69-4d2e-ab2b-9d2d2198a22d.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the Build & Run option, there are a couple of modifications
    that we have to make:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13a94678-1c8e-46f0-807c-96777225ad11.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see the modifications step by step:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Keep the Name as `Desktop`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the name of the filesystem to `RPi`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Device type, select the Desktop option.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Sysroot (system root) will be set to `/home/pi` by default, which means
    that, when we create a new QT5 application, it will be created inside the `pi`
    folder. Now, instead of creating our QT projects in the `pi` folder, we will create
    a new folder inside the `pi` folder called `QTPrograms`. To change the folder
    directory, click on the Browse button. After that, click on the folder option.
    Call this folder `QTPrograms`, or any other name that you want. Select the `QTPrograms`
    folder and select the Choose button:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/51cac37f-956e-4767-a91a-43c4b4af7c14.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: 'Next, we have to set the Compilers to GCC. To do this, click on the Compilers tab.
    Inside this, click on the Add drop-down button. Go to GCC and select the C++option:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd8bb18d-6801-416c-83b9-8403c1d48d81.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
- en: 'You will now see the GCC compilation option below the C++ option:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8f1d059-82f7-4c5e-b53a-ea0bb10c1fad.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: 'After this, click on the Apply button to apply the changes and then click on
    the OK button. Next, click on Tools again and open Options. Inside the Build and
    run option, select the Kits tab and, again, select the Desktop option. This time,
    next to the C++ option, you will see a drop-down option. Click on this, and select
    the GCC compiler:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18bf2737-2fa8-42f4-a46f-604d5c0249fc.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: Next, check the Debugger option. It should be set to System GDB at /usr/bin/gdb.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, check the QT5 version. Currently, I'm using the latest version of QT,
    which is 5.7.1\. By the time you come across this chapter, the latest version
    is likely to have been updated.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After making these changes, press Apply and then OK. After setting up the QT5,
    let's write our first program to turn an LED on and off using the GUI buttons.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Controlling LEDs with GUI buttons
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create a simple QT5 program in which we will turn
    the LEDs on and off using the GUI buttons. For this project, you will need two
    LEDs:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25312b51-bdbe-4aa9-a586-5708f9bfdb24.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: 'The wiring connections of the LEDs is exactly the same as that in the `LEDBuzzer` project:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: The anode (positive) pin of the first LED is connected to the wiringPi pin number
    0 and the cathode (negative) pin is connected the physical pin number 9 (the ground
    pin)
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The anode pin of the second LED is connected to the wiringPi pin number 2 and
    the cathode pin is connected to the physical pin number 14 (the ground pin)
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a QT project
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The QT5 project for turning the LEDs on and off is called `LedOnOff`. You can
    download this project from the `Chapter05` folder of the GitHub repository. After
    downloading the `LedOnOff` project folder, open the `LedOnOff.pro` file to view
    the project inside the QT5 IDE.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create a project in the QT5 IDE:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'click on the File option and then click on New File or Project...:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d51333f1-b159-4e77-b70a-4f3d9d17a3d8.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: 'Next, select the QT Widgets Application option and click the Choose button:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64f1c143-97e0-4298-aab6-79708a8d26df.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: 'After that, give your project a name. I have named my project `LEDOnOff`. After
    this, change the directory to `QTPrograms` so that the project is created in this
    folder, then click Next:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8bd25d15-d135-466f-a2b2-327c457c4c28.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: 'Keep the Desktop option checked and then click Next:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cbbd4970-98a3-4ab3-9349-f3426ff913d2.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: 'You should now see certain filenames, which are a part of this project. Keep
    the names as they are and click Next:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d820970-15e4-48b1-893c-e14035aa8a87.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you will see a Summary window, which will show you a summary of all
    the files that will be created. We don''t have to make any changes in this window,
    so click on Finish to create the project:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af895aa2-69a6-4b85-8a0d-bdccc5ea4bc3.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
- en: 'On the left side of the IDE, you will see the design, C++, and header files.
    First, we will open the `LEDOnOff.pro` file and add the path of the `wiringPi`
    library. At the bottom of this file, add the following code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/d38aaebe-77ab-4dfd-a396-5587c5f7d909.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: 'Next, open the `mainwindow.ui` file, which is inside the `Forms` folder. The
    `mainwindow.ui` file is the designer file inside of which we will design our GUI
    buttons:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b17f97c-6da1-408f-aee6-dfdbf4aeebcb.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
- en: 'The `mainwindow.ui` file will open in the Design tab. On the left side of the
    Design tab is the widget box, which contains widgets such as buttons, a list view,
    and layouts. In the middle is the design area, where we will drag the UI components.
    In the bottom-right, the properties of the selected UI components are displayed:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/054b1c4c-0498-4d73-8a89-73e00683ab2b.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: 'Next, to create the GUI button, drag the Push Button widget inside the design
    area. Double-click on the button, and change the text to `ON`. After that, with
    the Push Button selected, change the objectName (inside the properties window)
    to `on`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7cf40ee-026a-48fb-8763-eaaeaa566e95.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
- en: 'After this, add two more buttons. Set the name of one button to `OFF` and the
    **objectName** to `off`. Set the name of another button to `ON / OFF` and the
    **objectName** to `onoff`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1127285-7189-4250-908a-20d153280eb3.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: 'There are two different types of button function that we can use for turning
    the LED on and off:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '`clicked()`: The `clicked` button function will execute as soon as the button
    is clicked.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pressed()` and `released()`: The `pressed` button function keeps executing
    as long as you hold or keep the button pressed. When we use the `pressed` function,
    we also have to use the `released()` function. The released function contains
    the code that indicates what should happen when the button is released.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will link the `clicked()` function to the **ON** and **OFF** buttons and
    link the `pressed()` and `released()` functions to the **ON/OFF** button. Next,
    to link the `clicked()` function to the **ON** button, right-click on the **ON**
    button, select the Go to slot... option, and then select the `clicked()` function.
    After that, press OK:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/162e949c-7d25-455a-818b-4bc20b19d29d.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
- en: 'Now, as soon as you select the `clicked()` function, a clicked function called
    `on_on_clicked()` (`on_buttonsobjectname_clicked`) will be created inside the
    `mainwindow.cpp` file (this file is inside the `Sources` folder). Inside this
    function, we will write the program to turn the LED on. Before that, however,
    we need to declare the `wiringPi` library and pins inside the `mainwindow.h` file.
    This file is inside the `Headers` folder:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60c03849-01f6-41e7-b983-65f4226b9434.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: 'We also need to declare the `QMainWindow` library, which will create a window
    that contains our buttons. Next, I have set the `led1` pin to pin `0` and the
    `led2` pin to pin `2`. After that, open the `mainwindow.cpp` file again. We will
    then do the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: First, we will declare the `wiringPiSetup();` function
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will set `led1` and `led2` as the `OUTPUT` pins
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, inside the `on_on_clicked()` function, set the `led1` and `led2` pins
    to `HIGH`:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53314662-d1ee-438e-ab16-19d75179a05c.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: Next, to turn the LEDs off, open the `mainwindow.ui` file again, right-click
    on the off button, select Go to slot..., and select the `clicked()` function again.
    Inside the `mainwindow.cpp` file, a new function called `on_off_clicked` will
    be created. Inside this function, we will write the program to turn off the LEDs.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: To program the ON/OFF button, right-click on it, select Go to slot..., and,
    this time, select the `pressed()` function. A new function name of `on_onoff_pressed()`
    will be created inside the `mainwindow.ui` file. Next, right-click on the **ON/OFF**
    button, select Go to slot..., and select the `released()` function. A new function
    called `on _onoff_released()` will now be created.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `on_onoff_pressed()` function, we will write a program to turn the
    LEDs on. Inside the `on_onoff_released()` function, we will write the program
    to turn the LEDs off:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1bc3b0ab-dfbc-4c41-a198-81693f52be8f.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: 'Before running the code, click on File and then click Save All. Next, to build
    and run the code, click on Build and then click on the Run option. It will take
    around 30 to 40 seconds for the MainWindow to appear, and, in the main window,
    you will see the GUI buttons as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bdea7634-eed9-4dc7-b75c-232e8333e4df.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
- en: Now, when you click the ON button, the LEDs will turn on. When you click the
    OFF button, the LEDs will turn off. Finally, when you hold the **ON / OFF** button,
    the LEDs will turn on until you let go, when they will turn off.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with errors
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the console, you may see some minor errors. If the main window is open,
    you can ignore these errors:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22178e23-8e5a-4181-b245-d89de8d0aeaf.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
- en: 'The GCC compiler might keep resetting when you open the Qt Creator IDE. Because
    of this, after running the project, you will get the following error:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/2fb0fe4e-152a-48a5-9b8b-65b14442f370.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
- en: If you get this error, go to Tools, then Options, and set the C++ compiler to
    GCC, as indicated in *step 5* of the *Setting up QT5* section.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Controlling a rover using a laptop with QT5
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we can control the LEDs, let''s look at how to control the rover using
    QT5\. Inside the Qt Creator IDE, create a new project and name it `QTRover`. You
    can download the `QTRover` project folder from the GitHub repository of this chapter.
    We can now create this `QTRover` project using the `clicked()` function and the
    `pressed()` and `released()` functions. To do so, we have the following options:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'If we create this project using only the `clicked()` function, we would need
    to create five buttons: forward, backward, left, right, and stop. We would need
    to press the stop button each time to stop the robot.'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we create this project using only the `pressed()` and `released()` functions,
    we would only need to create four buttons: forward, backward, left, and right.
    We wouldn''t need a stop button in this case, as the rover would stop when the
    buttons are released.'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, we can also use a combination of the `clicked()`, `pressed()`,
    and `released()` functions in which the forward, backward, and stop buttons would
    be linked to the `clicked()` function, and the left and right buttons would be
    linked to the `pressed()` and `released()` functions.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this project, we'll opt for the third option, the combination of the `clicked()`,
    `pressed()`, and `released()` functions. Before creating this project, we will
    close the `LEDOnOff` project, because if both the `LEDOnOff` and `QTRover` projects
    are kept open, there is a chance that, if you make UI changes in one project,
    the code might change in the other, thus affecting both of your project files.
    To close the `LEDOnOff` project, right-click on it and then select the Close Project
    "LEDOnOff" option.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the `wiringPi` library path inside the `QTRover.pro` file:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After that, open the `mainwindow.ui` file and create five push buttons. Label
    them `FORWARD`, `BACKWARD`, `LEFT`, `RIGHT`, and `STOP`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcbea460-fcd5-467d-afdf-543c8e5ee98e.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
- en: 'Set the name of the button objects as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Set the `FORWARD` button object name to forward
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the `BACKWARD` button object name to backward
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the `LEFT` button object name to left
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the `RIGHT` button object name to right
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the `STOP` button object name to stop
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After this, right-click on the forward, backward, and stop buttons, and add
    the `clicked()` functions to those three buttons. Similarly, right-click on the
    left and right buttons, and add the `pressed()` and `released()` functions to
    these buttons.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the `mainwindow.h` file and declare the `wiringPi` and `QMainWindow`
    libraries. Also, declare the four `wiringPi` pin numbers. In my case, I''m using
    the pin numbers `0`, `2`, `3`, and `4`:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d9b41e5-a899-4f20-8e6d-9fc90ed55599.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
- en: Inside the `mainwindow.cpp` file, we will have three `on_click` functions to
    move forward (`on_forward_clicked`), backward (`on_backward_clicked`), and to
    stop (`on_stop_clicked`).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: We also have two `on_pressed` and `on_released` functions for the left (`on_left_pressed` and
    `on_left_released`) and right (`on_right_pressed` and `on_right_released`) buttons.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps describe the steps required to move the robot in different
    directions:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `on_forward_clicked()` function, we will write the program to move
    the robot forward:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, inside the `on_backward_clicked()` function, we will write the program
    to move the robot backward:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After that, inside the `on_left_pressed()` function, we will write the program
    to make an axial left turn or radial left turn:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, inside the `on_right_pressed()` function, we will write the program to
    make an axial right turn, or a radial right turn:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Inside the `on_stop_clicked()` functions, we will write the program to stop
    the robot:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: After completing the code, save all the files. After that, run the program and
    test the final output. After running the code, you will see the main window with
    the forward, backward, left, right, and stop buttons. Press each GUI button to
    move the robot in the desired direction.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 完成代码后，保存所有文件。之后，运行程序并测试最终输出。运行代码后，您将看到带有向前、向后、向左、向右和停止按钮的主窗口。按下每个GUI按钮以使机器人朝所需方向移动。
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at two different techniques for controlling the robot
    using a laptop. In the first technique, we used the `ncurses` library to take
    input from the keyboard to move the robot accordingly. In the second technique,
    we used the QT Creator IDE to create GUI buttons, and then used these to move
    the robot in different directions.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了两种不同的技术来使用笔记本电脑控制机器人。在第一种技术中，我们使用`ncurses`库从键盘接收输入，以相应地移动机器人。在第二种技术中，我们使用QT
    Creator IDE创建GUI按钮，然后使用这些按钮来使机器人朝不同方向移动。
- en: In the next chapter, we will install OpenCV software on our Raspberry Pi. After
    that, we will use the Raspberry Pi camera to record pictures and videos.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在树莓派上安装OpenCV软件。之后，我们将使用树莓派摄像头记录图片和视频。
- en: Questions
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: The `ncurses` program should be written between which two functions?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ncurses`程序应该在哪两个函数之间编写？'
- en: What is the purpose of the `initscr()` function?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`initscr()`函数的目的是什么？'
- en: How do you compile a `ncurses` code inside the Terminal window?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在终端窗口中编译`ncurses`代码？
- en: Which C++ compiler did we use in the QT Creator?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在QT Creator中使用了哪个C++编译器？
- en: Which push-button function, or functions, will you use to move the robot forward
    as long as the button is pressed?
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用哪个按钮功能或功能来在按下按钮时使机器人向前移动？
