- en: Chapter 7. Following and Commenting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main idea behind our application is to provide a platform for users to share
    their thoughts via tweets. Just letting the user create a new tweet is only one
    part of it, and the application is said to be incomplete if users are not able
    to interact with the existing tweet. In this chapter, we will do the other part,
    which is enabling users to follow a particular user and comment on an existing
    tweet. You will also learn several new Django features while working through it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Letting users follow another user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the most followed user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting users follow another user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, our users are able to discover new tweets by browsing hashtags and user
    pages. Let's provide a method for users to follow another user so that they can
    see, on their individual homepages, the aggregated tweets from all users they
    are following. Let's also enable users to comment on a new tweet.
  prefs: []
  type: TYPE_NORMAL
- en: We will also create a page where users can list popular users by the number
    of followers. This feature is important for our application because it will change
    the main page from a basic welcome page to a frequently updated list of users,
    where users will be able to find trending users and their interesting tweets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our strategy for implementing this feature consists of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data model to store a user and their followers. This model will keep
    track of various pieces of information related to the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving each user a follow button next to their title. We will also create a
    view that shows counts, such as the number of tweets a user has made and their
    follower count. This involves a considerable amount of work, but the results will
    be worth it and we will learn a lot of useful information during the process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: At first, what we are going to add is a retweet count to every tweet and to
    keep track of all the tweets voted up by the user. To implement this, we need
    to create a new `UserFollowers` data model.
  prefs: []
  type: TYPE_NORMAL
- en: The UserFollowers data model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a user is followed by another user, we need to store the following information
    in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: The date on which the user was followed. We need this in order to display the
    user who has the highest number of followers over a certain period of time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of followers a user has.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of users who are following our user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is needed to prevent users from following the same user twice.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this purpose, we will create a new data model called `UserFollowers`. Open
    `user_profile/model.py` and add the following class to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This data model utilizes some important features, so we will go through its
    fields one by one. The user field is a foreign key that refers back to the user
    that is being followed. We want it to be unique so that the same user cannot be
    followed more than once.
  prefs: []
  type: TYPE_NORMAL
- en: The date field is of the type `models.DateTimeField`. As its name suggests,
    you can use this field to store a date/time value. The argument `auto_now_add`
    tells Django to automatically set this field to the current date/time when an
    object of this data model is first created.
  prefs: []
  type: TYPE_NORMAL
- en: The count field is of the type `models.IntegerField`. This field holds an integer
    value. By using the `default=1` parameter with this field, we tell Django to set
    the field's value to 1 when an object of this data model is first created.
  prefs: []
  type: TYPE_NORMAL
- en: The following `ManyToManyField` parameter contains the list of users who followed
    this user.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, the `related_name='followers'` parameter must be given as the second parameter.
    Both user and follower point to the same class `user`, which if distinguished
    by related name, can give an error such as this, Accessor for field `user` clashes
    with related m2m field `User.userfollowers_set`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After entering the data model code into `user_profile/models.py` file, run
    the following command to create its corresponding tables in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With this, we can store all the information that we need to maintain followers.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to to create a view in which users can follow other users
    by clicking on the follow button next to their profile name.
  prefs: []
  type: TYPE_NORMAL
- en: Modify the user profile page accordingly if the visited user is not the same
    who has already followed you, then there should be a button to follow the user.
    If the user is already being followed, the same button should allow unfollowing.
  prefs: []
  type: TYPE_NORMAL
- en: Let us edit the existing user profile, `profile.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a user icon against the username, we can use the following Bootstrap
    glyphicons. This is the set of icons that is shipped with the default Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also design a new tweet post textbox on the profile page. The updated
    `user_profile.html` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `forms.py` file to render a new form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The updated UI for the form will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The UserFollowers data model](img/image00305.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To add the functionality to follow a user, we need to first create another user.
    We will follow the same method we used before, that is, via Django Administrator.
  prefs: []
  type: TYPE_NORMAL
- en: One very important thing we have been postponing is user login and registration.
    The follow functionality can't be used without it. We will implement Django login
    first, and then we will move to the follow functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The user login model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To implement user login, we need to add default URLs for login and registration.
    We will add the following URL patterns in the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, our `urls.py` file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Both the login and logout views have default template names, `registration/login.html`
    and `registration/logged_out.html` respectively. Because these views are specific
    to the user and not our reusable application, we''ll create a new template/registration
    directory inside the `mytweets` project using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a simple login and logout page. Use the following code snippet
    in the `login.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following code snippet in the `logout.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We have just enabled Django's default authentication system. As this does basic
    authorization, it has its predefined URLs for certain redirections. For example,
    we already know that `/login` will take a user to the `/registration/login.html`
    page. Similarly, once the user is authenticated, they are redirected to the URL
    `accounts/profile`. In our project, we have a custom URL for each user. We will
    update these entries in the `settings.py` file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To keep things simple, we will just create a view, which will take an authenticated
    user to the profile, which will then redirect the user to their profile page.
    Basically, we will construct the parameter of the username after valid authentication;
    in other words, `/profile` | `/profile/<username>` will be generated in a separate
    class view. For this, we also need to create a URL entry as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And `Profile` redirect class with a `get()` method as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This is it. Now every logged-in user will be redirected to his profile page.
  prefs: []
  type: TYPE_NORMAL
- en: Now, coming back to the original problem, when a user visits another user's
    profile, they will have the option to follow this user's profile; this means the
    follower will get updates about all the posted tweets on their home page.
  prefs: []
  type: TYPE_NORMAL
- en: Once following a user, the follower will have the option to unfollow the user,
    and if the user visits their own profile, they should see nothing at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated code for the user profile is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The following code checks whether the user is viewing their own profile; if
    so, they will not be shown the follow button. It also checks whether the user
    logged in is following the profile they've visited; if so, the unfollow button
    will be shown, and if not, the follow button will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To render the updated view, `class Profile()` has also been updated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code checks whether the logged-in user is a follower of the user
    whose profile they are visiting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Adding or removing the follower
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a `post()` method for the profile to add or remove followers
    based on parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple function that checks the parameters to add or remove users
    to or from the followers list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The follow button part of the `profile.html` file should be updated with the
    class names so that we can trigger the JavaScript event functionalism, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let us create the `profile.js` file which has the `post()` method
    whenever the follow/unfollow button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a JavaScript file named as `profile.js` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to add this JavaScript file in the `profile.html` file at the
    bottom of the page, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Displaying the most followed user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we have implemented the feature for following users, we can move ahead
    with a new page design where we will list the most followed user. The logic of
    this page can be reused to design the page that has the highest number of comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic components for this page design are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**View**: The `users.html` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: The most followed user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following content in the `view.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following class in the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This following line orders the followers in the order of who has the most followers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to update the URL mapping as well, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s all! We are done with a page where all the users are listed by follower
    count. If the count gets too high, you can also limit it using this basic Python
    list syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This will list only the top 10 users.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned to create login, logout, and registration page
    templates. We also learned how to allow the following of another user and displaying
    the most followed users.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter switches to new topics. Sooner or later, you will need an administration
    interface for your application to manage your data models. Fortunately, Django
    comes with a full-fledged administration interface ready to be used. We will learn
    how to enable and customize this interface in the next chapter, so keep reading!
  prefs: []
  type: TYPE_NORMAL
