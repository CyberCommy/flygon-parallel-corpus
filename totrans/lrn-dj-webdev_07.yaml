- en: Chapter 7. Following and Commenting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main idea behind our application is to provide a platform for users to share
    their thoughts via tweets. Just letting the user create a new tweet is only one
    part of it, and the application is said to be incomplete if users are not able
    to interact with the existing tweet. In this chapter, we will do the other part,
    which is enabling users to follow a particular user and comment on an existing
    tweet. You will also learn several new Django features while working through it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Letting users follow another user
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the most followed user
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting users follow another user
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, our users are able to discover new tweets by browsing hashtags and user
    pages. Let's provide a method for users to follow another user so that they can
    see, on their individual homepages, the aggregated tweets from all users they
    are following. Let's also enable users to comment on a new tweet.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: We will also create a page where users can list popular users by the number
    of followers. This feature is important for our application because it will change
    the main page from a basic welcome page to a frequently updated list of users,
    where users will be able to find trending users and their interesting tweets.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Our strategy for implementing this feature consists of the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data model to store a user and their followers. This model will keep
    track of various pieces of information related to the user.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving each user a follow button next to their title. We will also create a
    view that shows counts, such as the number of tweets a user has made and their
    follower count. This involves a considerable amount of work, but the results will
    be worth it and we will learn a lot of useful information during the process.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: At first, what we are going to add is a retweet count to every tweet and to
    keep track of all the tweets voted up by the user. To implement this, we need
    to create a new `UserFollowers` data model.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: The UserFollowers data model
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a user is followed by another user, we need to store the following information
    in the database:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: The date on which the user was followed. We need this in order to display the
    user who has the highest number of followers over a certain period of time.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of followers a user has.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of users who are following our user.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is needed to prevent users from following the same user twice.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'For this purpose, we will create a new data model called `UserFollowers`. Open
    `user_profile/model.py` and add the following class to it:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This data model utilizes some important features, so we will go through its
    fields one by one. The user field is a foreign key that refers back to the user
    that is being followed. We want it to be unique so that the same user cannot be
    followed more than once.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The date field is of the type `models.DateTimeField`. As its name suggests,
    you can use this field to store a date/time value. The argument `auto_now_add`
    tells Django to automatically set this field to the current date/time when an
    object of this data model is first created.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The count field is of the type `models.IntegerField`. This field holds an integer
    value. By using the `default=1` parameter with this field, we tell Django to set
    the field's value to 1 when an object of this data model is first created.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The following `ManyToManyField` parameter contains the list of users who followed
    this user.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, the `related_name='followers'` parameter must be given as the second parameter.
    Both user and follower point to the same class `user`, which if distinguished
    by related name, can give an error such as this, Accessor for field `user` clashes
    with related m2m field `User.userfollowers_set`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'After entering the data model code into `user_profile/models.py` file, run
    the following command to create its corresponding tables in the database:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With this, we can store all the information that we need to maintain followers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to to create a view in which users can follow other users
    by clicking on the follow button next to their profile name.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Modify the user profile page accordingly if the visited user is not the same
    who has already followed you, then there should be a button to follow the user.
    If the user is already being followed, the same button should allow unfollowing.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Let us edit the existing user profile, `profile.html`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Adding a user icon against the username, we can use the following Bootstrap
    glyphicons. This is the set of icons that is shipped with the default Bootstrap.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will also design a new tweet post textbox on the profile page. The updated
    `user_profile.html` file is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Update the `forms.py` file to render a new form:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The updated UI for the form will look like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![The UserFollowers data model](img/image00305.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: To add the functionality to follow a user, we need to first create another user.
    We will follow the same method we used before, that is, via Django Administrator.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: One very important thing we have been postponing is user login and registration.
    The follow functionality can't be used without it. We will implement Django login
    first, and then we will move to the follow functionality.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The user login model
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To implement user login, we need to add default URLs for login and registration.
    We will add the following URL patterns in the `urls.py` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, our `urls.py` file will look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Both the login and logout views have default template names, `registration/login.html`
    and `registration/logged_out.html` respectively. Because these views are specific
    to the user and not our reusable application, we''ll create a new template/registration
    directory inside the `mytweets` project using the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, create a simple login and logout page. Use the following code snippet
    in the `login.html` file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the following code snippet in the `logout.html` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We have just enabled Django's default authentication system. As this does basic
    authorization, it has its predefined URLs for certain redirections. For example,
    we already know that `/login` will take a user to the `/registration/login.html`
    page. Similarly, once the user is authenticated, they are redirected to the URL
    `accounts/profile`. In our project, we have a custom URL for each user. We will
    update these entries in the `settings.py` file
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To keep things simple, we will just create a view, which will take an authenticated
    user to the profile, which will then redirect the user to their profile page.
    Basically, we will construct the parameter of the username after valid authentication;
    in other words, `/profile` | `/profile/<username>` will be generated in a separate
    class view. For this, we also need to create a URL entry as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And `Profile` redirect class with a `get()` method as:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is it. Now every logged-in user will be redirected to his profile page.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Now, coming back to the original problem, when a user visits another user's
    profile, they will have the option to follow this user's profile; this means the
    follower will get updates about all the posted tweets on their home page.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Once following a user, the follower will have the option to unfollow the user,
    and if the user visits their own profile, they should see nothing at all.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated code for the user profile is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The following code checks whether the user is viewing their own profile; if
    so, they will not be shown the follow button. It also checks whether the user
    logged in is following the profile they've visited; if so, the unfollow button
    will be shown, and if not, the follow button will be shown.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To render the updated view, `class Profile()` has also been updated as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following code checks whether the logged-in user is a follower of the user
    whose profile they are visiting:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding or removing the follower
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a `post()` method for the profile to add or remove followers
    based on parameters:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is a simple function that checks the parameters to add or remove users
    to or from the followers list.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的函数，用于检查参数以将用户添加到或从关注者列表中删除。
- en: 'The follow button part of the `profile.html` file should be updated with the
    class names so that we can trigger the JavaScript event functionalism, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`profile.html`文件中的关注按钮部分应更新为类名，以便我们可以触发JavaScript事件功能，如下所示：'
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, let us create the `profile.js` file which has the `post()` method
    whenever the follow/unfollow button is clicked:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建`profile.js`文件，其中包含`post()`方法，每当单击关注/取消关注按钮时都会调用该方法：
- en: 'Create a JavaScript file named as `profile.js` and add the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`profile.js`的JavaScript文件，并添加以下代码：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Don''t forget to add this JavaScript file in the `profile.html` file at the
    bottom of the page, as shown in the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在页面底部的`profile.html`文件中添加此JavaScript文件，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Displaying the most followed user
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示最受关注的用户
- en: After we have implemented the feature for following users, we can move ahead
    with a new page design where we will list the most followed user. The logic of
    this page can be reused to design the page that has the highest number of comments.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实现了关注用户的功能之后，我们可以继续进行新页面设计，我们将在其中列出最受关注的用户。这个页面的逻辑可以被重用来设计具有最多评论数量的页面。
- en: 'The basic components for this page design are:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面设计的基本组件包括：
- en: '**View**: The `users.html` file'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：`users.html`文件'
- en: '**Controller**: The most followed user'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：最受关注的用户'
- en: URL mapping
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL映射
- en: 'Add the following content in the `view.html` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在`view.html`文件中添加以下内容：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following class in the controller:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中添加以下类：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This following line orders the followers in the order of who has the most followers:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一行按照拥有最多关注者的顺序对关注者进行排序：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We need to update the URL mapping as well, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更新URL映射，如下所示：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'That''s all! We are done with a page where all the users are listed by follower
    count. If the count gets too high, you can also limit it using this basic Python
    list syntax:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了！我们已经完成了一个页面，其中所有用户都按关注者数量列出。如果数量太高，您还可以使用这种基本的Python列表语法进行限制：
- en: '[PRE25]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will list only the top 10 users.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这将只列出前10名用户。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned to create login, logout, and registration page
    templates. We also learned how to allow the following of another user and displaying
    the most followed users.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建登录、注销和注册页面模板。我们还学会了如何允许关注另一个用户并显示最受关注的用户。
- en: The next chapter switches to new topics. Sooner or later, you will need an administration
    interface for your application to manage your data models. Fortunately, Django
    comes with a full-fledged administration interface ready to be used. We will learn
    how to enable and customize this interface in the next chapter, so keep reading!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将转到新的主题。迟早，您将需要一个管理界面来管理应用程序的数据模型。幸运的是，Django带有一个成熟的管理界面，可以立即使用。我们将在下一章中学习如何启用和自定义此界面，所以请继续阅读！
