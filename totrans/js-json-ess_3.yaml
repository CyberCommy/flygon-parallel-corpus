- en: Chapter 3. Working with Real-time JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, I introduced you to basic JSON, how JSON objects can
    be embedded into an HTML file, and how basic operations such as accessing keys
    can be performed on simple JSON objects. Now let us take a step forward and work
    with JSON objects that are bigger, more complex, and closer to the JSON that we
    would work with in real-time situations. In real-world applications, JSON can
    be retrieved either as a response from an asynchronous request or from a JSON
    feed. A website uses HTML, CSS, and JavaScript to provide a visually beautiful
    user interface. But there are cases where data vendors are only focused on getting
    the data. A **data feed** serves their purpose; a feed is a crude way of supplying
    data so that others can reuse it to display the data on their websites or to ingest
    the data and run their algorithms on it. Such data feeds are big in size and cannot
    directly be embedded into the `script` tag. Let us look at how external JavaScript
    files can be included in an HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the code for the `external-js.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Real-time JSON](img/6034OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we include `example.js`, which is an external JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Real-time JSON](img/6034OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To access the variable `x` that is in the `example.js` file from the `external-js.html`
    file, we write our programs within our `script` tags in the HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This file has to be created in the same folder as `external-js.html`. Follow
    the given folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Real-time JSON](img/6034OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Accessing objects in JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand how to make a script call to fetch an external JavaScript
    file, let us use the same technique to import a JSON feed. I have generated a
    test `employee` JSON data feed with 100 records. To traverse through any JSON
    feed, it is important to make a note of how the data is arranged. The keys in
    this data feed are basic employee information such as employee number, date of
    birth, first name, last name, gender, hire date, titles that they have held, and
    the dates during which they have held those titles. A few employees have held
    the same title throughout their tenure, while there are some employees who have
    held more than one title.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This JSON file will be part of the code files for exercises.
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing objects in JSON](img/6034OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we are dealing with a complex JSON data feed, let us save the data feed
    to a file. In the `data_json_feed.html` file, we have imported the `data.json`
    file, which is in the same folder as the HTML file. It is noteworthy that the
    JSON feed has been assigned to a variable called `data_json`, and to access the
    JSON feed, we will have to use this variable in the `data_json_feed.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing objects in JSON](img/6034OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another thing to note is the use of a new method called `console.log`. Browsers
    such as Mozilla Firefox, Google Chrome, and Apple Safari profile a console panel
    for run-time JavaScript development and debugging. The use of the JavaScript function
    `alert` is discouraged due to its obtrusive behavior. `console.log`, on the other
    hand, is unobtrusive and logs its messages to the console. From here on, we will
    refrain from using the `alert` method and will use `console.log` to print data
    into the console window. Google Chrome and Apple Safari come with developer tools
    already installed; to view the console, right-click on the page and click on **Inspect
    Element**. Both of them come with a **Console** tab that allows us to work with
    our logging. Firefox is dependent on Firebug; in [Chapter 8](ch08.xhtml "Chapter 8. Debugging
    JSON"), *Debugging JSON*, I will walk you through the installation steps of Firebug.
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing objects in JSON](img/6034OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we load the `data_json_feed.html` file into the Firefox browser, open up
    our console window, and click on the **DOM** tab, we are going to see a list of
    100 `employee` objects. If our object is small and has one or two child objects,
    we would prefer using their numeric indexes to access them; in this case, as we
    have a huge number of child objects, it is not realistic to target objects based
    on static indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing objects in JSON](img/6034OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Performing complex operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To tackle an array of objects, we have to handle them in an iterative method.
    We will have to come up with an iterative solution in which we target one object
    at a time; once the object is accessed, we would not target that object another
    time. This allows us to maintain data integrity as we can avoid accessing the
    same object multiple times, thereby avoiding any redundancies. The looping statements
    in JavaScript are the `while` loop and the `for` loop. Let us take a quick look
    at how we can use these looping techniques to traverse through our employees'
    array.
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing complex operations](img/6034OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `while_employees_traversal.html` file, we are importing the `data.js`
    file, which we had examined in the previous section. The `data_json` variable
    inside the `data.js` file consists of an array of objects that are imported into
    this HTML page. In the `script` tags, we are setting up two variables: the `i`
    variable to hold a starting counter and the `employeeCount` variable to hold the
    counter of the total number of objects in `data_json`. To retrieve the number
    of items that exists in an array, we can use the `.length` property that is provided
    by JavaScript. There are three important supporting blocks for a `while` loop:
    the condition, statements in the `while` loop, and either the increment or decrement
    operation based on the condition. Let us take a quick look at these three separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing complex operations](img/6034OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are initializing the variable `i` to zero and the condition that we are looking
    for is if zero is less than the number of items in the variable `data_json`, then
    proceed into the loop.
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing complex operations](img/6034OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the condition is true, the statements inside the loop are executed, until
    they hit the incrementing condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing complex operations](img/6034OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the incrementing operator approaches, the value of the `i` variable is
    incremented by 1, and it will go back to the initial step of the `while` loop.
    At the initial step, the condition is again verified to check if `i` is still
    less than the number of items in `data_json`. If that were true, it would again
    enter the loop and execute the statements. This process continues to repeat itself
    until the value of variable `i` is equal to that of `employeeCount`. At that point,
    the `while` loop''s execution is complete, and the statements inside the `while`
    loop are maintained as logs in the console window of the browser. Before running
    the HTML file, `while_employees_traversal.html`, verify that the `data.json` file
    is in the same directory as the HTML file. Load this HTML file into a browser
    of your choice (Chrome, Firefox, or Safari are recommended), open up the console
    window by right-clicking on the web page and clicking on **Inspect Element** if
    you are on Chrome or Safari. The employee numbers should be displayed on the console
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing complex operations](img/6034OS_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve the employee''s first name and last name, we will concatenate the
    `first_name` and `last_name` keys in the `employee` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing complex operations](img/6034OS_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can use the same technique to retrieve the rest of the keys such as `birth_date`,
    `gender`, and `hire_date`, except for `titles`. A quick glance at the JSON feed
    explains that unlike the rest of the keys, `titles` is an object or an array of
    objects. The `titles` object contains all the titles that the employee has held
    since joining the company. Some employees have one title, while others have more
    than one; so the former would be an object by itself, while the latter would be
    an array of objects, each containing a `title` object. To handle this case, we
    would have to check if the employee has one title or more than one title. If the
    person has one title, we should print the data, and if the person has more than
    one title, we would have to iterate them through the array of `title` objects
    to print all the titles that the employee has.
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing complex operations](img/6034OS_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The existent code in the `script` tags has to be replaced with the previous
    code, provided to retrieve the titles of the employee. In this script, we are
    using the variables `i` and `employeeCount` from our earlier script. We have introduced
    a new condition to check if the `titles` key for a particular employee is an `Array`
    object. This condition gets the type of the value that the loop is passing in
    and verifies if it is an instance of an `Array` object. Let us identify this condition
    that is checking the instance type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing complex operations](img/6034OS_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this condition is satisfied, the statements inside the condition are executed.
    Inside the success condition we declare three variables. The first variable, `j`,
    would hold the counter for the second `while` loop that would iterate through
    `titles`. The second variable is `titleCount`; it would store the number of items
    that are available in the `titles` array. The last variable is `titles`, which
    is initialized to an empty string. This variable would hold all the titles held
    by the employee. It stores the list of titles as a list separated by `&`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing complex operations](img/6034OS_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this `while` loop, the titles of the employee are being built; one title
    at a time is being added to the `titles` variable. Once the title has been added
    to the `titles` variable, the value of `j` is incremented and the loop continues
    until all the `title` objects are iterated. If the `titles` key is not an array,
    the execution would go into the `else` block and the statements in the `else`
    block are executed. As there is only one title for that employee, the data would
    be directly printed onto the console. Now let us look at the same example and
    use the `for` loop. Similar to the `while` loop, the `for` loop also traverses
    through the array of employees from the `data_json` variable. The business logic
    remains the same irrespective of what looping technique is used. Let us re-create
    the same example using the `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing complex operations](img/6034OS_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Unlike the `while` loop, we would not need extra counter variables to hold the
    current index and the length of the array, the `for` loop takes care of those
    counters. Other than the foundational changes with the syntax, the business logic
    remains the same, as I had pointed out earlier. Now that we are familiar with
    how we can access objects and perform complex operations to extract data, in the
    next section, let us take a look at how JSON data can be modified.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JSON retrieved from a JSON feed is always going to be read-only; as such data
    feeds do not provide functionality to modify their data from unverified sources.
    There are many cases where we would want to ingest the data from an external data
    feed, and then modify that content as per our requirements. An example is a company
    that is using a data feed that is being supplied by a data vendor, but the data
    that is being provided is a lot more than the company requires. In such cases,
    rather than using the whole feed, the company would only extract a part of it,
    perform certain operations to modify it as per their requirements, and reuse the
    new JSON object. Let us take our `employee` JSON feed. Assume that the name of
    the company was different during different periods. We want to group the employees
    by company name, which is based on when they joined. Employees who joined the
    company before 1987 belong to Company 1 and those who joined the company in 1987
    or after belong to Company 2\. To represent this change, we add the `company`
    key to our JSON feed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying JSON](img/6034OS_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `for_employee_company.html` file, we are traversing through the array
    of `employee` objects and we are extracting the year in which the employee joined.
    We are converting this from a string to an integer, so we can use the year value
    for comparison purposes. We assign the parsed year to the `join_year` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying JSON](img/6034OS_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we are checking to see if the employee joined
    the company before 1987; if they have joined before 1987, we add the `company`
    property to the `employee` object and assign the value of `Company1`. If they
    have joined in 1987 or after 1987, we assign the value of `Company2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying JSON](img/6034OS_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After a value is assigned to the newly added property company, we build a generic
    message that would apply for all the employees, irrespective of which company
    they belong to. We extract the employee number, the year in which the employee
    joined, and the name of the company to generate that message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying JSON](img/6034OS_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When `for_employee_company.html` is run from the web browser, the script to
    perform the modifications is run and the output is logged to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying JSON](img/6034OS_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter addresses the core concepts of how to handle static JSON feeds.
    We began by importing an external JSON object into our HTML file, looped through
    the complex array of objects to parse and extract required data. We used the `while`
    and `for` loops to loop through the array and used conditions to target our search.
    We completed this chapter by locally modifying the existing JSON feed and adding
    a new property, the `employee` object. Now that we have mastered accessing JSON
    from a static file, it is time for us to make some asynchronous calls to fetch
    some active JSON over HTTP.
  prefs: []
  type: TYPE_NORMAL
