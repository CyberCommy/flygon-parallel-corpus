- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs: []
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities in
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: It includes detailed steps that are to be performed by the students to achieve
    the objectives of the activities.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introduction to Serverless
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 1: Twitter Bot Backend for Bike Points in London'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `main.go` file for registering function handlers, as in *Exercise 1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This code is the entry point of the application where functions are registered,
    and the main application is started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `function.go` file for the `FindBikes` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The files required for the activity can be found on the link: [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson01/Activity1](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson01/Activity1).'
  prefs: []
  type: TYPE_NORMAL
- en: In this file, the actual function and its helpers should be implemented. `FindBikes`
    is responsible for getting data from the **TFL Unified API** for the bike point
    locations and then the number of available bikes. According to the collected information,
    this function returns complete sentences to be used as Twitter responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Dockerfile` for building and packaging the function, as in *Exercise
    2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this `Dockerfile`, the application is built in the first container and packaged
    in the second container for delivery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the container image with Docker commands: `docker build . -t find-bikes`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.27: Building the Docker image'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_01_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.27: Building the Docker image'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Run the container image as a Docker container and make the ports available
    on the host system: `docker run -it --rm -p 8080:8080 find-bikes`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Things should look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.28: Running the Docker container'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_01_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.28: Running the Docker container'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Test the function's HTTP endpoint with different queries, such as **Oxford**,
    **Abbey**, or **Diagon Alley**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We expect to get real responses for London streets and failure responses for
    imaginary streets from literature:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.29: Function responses for different streets'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_01_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.29: Function responses for different streets'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Press *Ctrl + C* to exit the container:![Figure 1.30: Exiting the container'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_01_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.30: Exiting the container'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 2\. Introduction to Serverless in the Cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 2: Daily Stand-Up Meeting Reminder Function for Slack'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution** â€“ **Slack Setup:**'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Slack** workspace, click on your username and select **Customize Slack**,
    as shown in the following screenshot:![](image/C12607_02_49.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 2.49: Slack menu'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Click on **Configure apps** in the open window, as shown in the following screenshot:![](image/C12607_02_50.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fig 2.50: Slack configuration menu'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click on **Browse the App Directory** to add a new application from the directory,
    as shown in the following screenshot:![Figure 2.51: Slack management'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_02_51.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.51: Slack management'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Find **Incoming WebHooks** from the search box in **App Directory**, as shown
    in the following screenshot:![Figure 2.52: App Directory'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_02_52.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.52: App Directory'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click on **Add Configuration** for the **Incoming WebHooks** application, as
    shown in the following screenshot:![Figure 2.53: Incoming Webhooks page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_02_53.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.53: Incoming Webhooks page'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Fill in the configuration for the incoming webhook by specifying your specific
    channel name and icon, as shown in the following screenshot:![Figure 2.54: Incoming
    webhook configuration'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_02_54.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.54: Incoming webhook configuration'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Copy the **Webhook URL** and click **Save Settings**, as shown in the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Slack workspace and channel we mentioned in step 6\. You will see
    an integration message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.55: Integration message in Slack'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_02_55.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.55: Integration message in Slack'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Activity Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new function to call the Slack webhook when the function is invoked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In GCF, it can be defined with the name `StandupReminder`, 128 MB memory, and
    an HTTP trigger.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function can be implemented in any supported language, such as **Go 1.11**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.56: Cloud function in Google Cloud Platform'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_02_56.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.56: Cloud function in Google Cloud Platform'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The code to be added is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Do not forget to change the `url` value with the Slack URL for the incoming
    webhook configuration from step 6.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the complete `function.go` file in the activity solutions of this
    book''s GitHub repository: [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson02/Activity2/function.go](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson02/Activity2/function.go).'
  prefs: []
  type: TYPE_NORMAL
- en: Create a scheduler job with the trigger URL of the function and specify the
    schedule based on your stand-up meeting times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The scheduler can be defined in Google Cloud Scheduler with the name `StartupReminder`
    and the URL of the function, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.57: Cloud scheduler in Google Cloud Platform'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_02_57.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.57: Cloud scheduler in Google Cloud Platform'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: With the schedule of `0 9 * * 1-5`, the reminder will invoke the function at
    09:00 on every day of the week from Monday through Friday.
  prefs: []
  type: TYPE_NORMAL
- en: Check the Slack channel when the time that was defined with the schedule has
    arrived for the reminder message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the schedule of `0 9 * * 1-5`, you will see a message on your selected
    Slack channel at 09:00 on workdays, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.58: Slack reminder message'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_02_58.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.58: Slack reminder message'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Delete the schedule job and function from the cloud provider, as shown in the
    following screenshot:![Figure 2.59: Deletion of the scheduler'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_02_59.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.59: Deletion of the scheduler'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The function can be deleted like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.60: Deletion of the function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_02_60.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.60: Deletion of the function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this activity, we've built the backend of a Slack application using functions.
    We started by configuring Slack for incoming webhooks and then created a function
    to send data to the webhook. Since our function should be invoked at predefined
    times, we used the cloud scheduler services to invoke the function. With a successful
    reminder message in Slack, the integration of functions to other cloud services
    and external services was illustrated.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Introduction to Serverless Frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 3: Daily Weather Status Function for Slack'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution - Slack Setup**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to configure Slack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your Slack workspace, click on your username and select Customize Slack:![Figure
    3.44: Slack menu'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.44: Slack menu'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click on Configure apps in the opened window:![Figure 3.45: Slack configuration
    menu'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_45.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.45: Slack configuration menu'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click on Browse the App Directory to add a new application from the directory:![Figure
    3.46: Slack management'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.46: Slack management'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Find Incoming WebHooks from the search box in App Directory:![Figure 3.47:
    App Directory'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_47.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.47: App Directory'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click on Set Up for the Incoming WebHooks application:![Figure 3.48: Incoming
    WebHooks page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_48.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.48: Incoming WebHooks page'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Choose a channel for posting joke messages and click on the Add Incoming WebHooks
    integration:![Figure 3.49: Channel selection'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_49.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.49: Channel selection'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Fill in the configuration for the incoming webhook with your specific channel
    name and icon:![Figure 3.50: Incoming WebHook configuration'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_50.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.50: Incoming WebHook configuration'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Copy the Webhook URL and click Save Settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Slack workspace and the channel you configured in Step 6 to check
    the integration message:![Figure 3.51: Integration message in Slack'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_51.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.51: Integration message in Slack'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Activity Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to complete this activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your Terminal, start the Serverless Framework development environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will start a Docker container in interactive mode. In the upcoming
    steps, actions will be taken inside this Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.52: Starting a Docker container for serverless'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_03_52.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.52: Starting a Docker container for serverless'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In your Terminal, create a Serverless Framework application structure in a folder
    called daily-weather.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a folder called daily-joker and change it into the following directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: nano and vim are installed as text editors in the Serverless Framework development
    environment Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a serverless.yaml file with the following content and replace the value
    of SLACK_WEBHOOK_URL with the URL you copied from Step 6 of the Slack Setup. Furthermore,
    update the CITY environment variable with the current office location to get the
    correct weather information. In addition, you can change the schedule section,
    which is currently triggering the function every workday at 08:00:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: serverless.yaml is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/serverless.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/serverless.yaml).
  prefs: []
  type: TYPE_NORMAL
- en: Create a package.json file to define the Node.js environment in the daily-weather
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'package.json defines the function and its dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: package.json is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/package.json](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/package.json).
  prefs: []
  type: TYPE_NORMAL
- en: Create a handler.js file to implement the actual functionality in the daily-weather
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'handler.js consists of the actual Node.js function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: handler.js is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/handler.js](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/handler.js).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the file''s creation, you will see the following file structure,
    with three files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.53: Folder structure'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_03_53.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.53: Folder structure'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Install the required Node.js dependencies for the serverless application. Run
    the following command to install the dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.54: Dependency installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_03_54.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.54: Dependency installation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Export the AWS credentials as environment variables. Export the following environment
    variables and AWS credentials from Exercise xx:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.55: AWS Credentials'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_03_55.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.55: AWS Credentials'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Deploy the serverless application to AWS using the Serverless Framework. Run
    the following commands to deploy the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands will make the Serverless Framework deploy the function into
    AWS. The output logs start by packaging the service and creating AWS resources
    for source code, artifacts, and functions. After all the resources have been created,
    the Service Information section provides a summary of the complete stack as you
    can see in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.56: Serverless Framework deployment output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_03_56.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.56: Serverless Framework deployment output'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check AWS Lambda for the deployed functions in the AWS Console as shown in
    the following figure:![Figure 3.57: AWS Lambda in the AWS Console'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_57.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.57: AWS Lambda in the AWS Console'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Invoke the function with the Serverless Framework''s client tools. Run the
    following command in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This command invokes the deployed function and prints out the response as you
    can see in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.58: Function output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_03_58.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.58: Function output'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As we can see, statusCode is 200, and the body of the response also indicates
    that the function has responded successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the Slack channel for the posted weather status:![FFigure 3.59: Slack
    message with weather status'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_59.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.59: Slack message with weather status'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Return to your Terminal and delete the function with the Serverless Framework.
    Run the following command in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will remove the deployed function, along with all its dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.60: Removing the function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_03_60.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.60: Removing the function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Exit the Serverless Framework development environment container. Run exit in
    your Terminal:![Figure 3.61: Exiting the container'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_03_61.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.61: Exiting the container'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this activity, we have built the backend of a Slack application using a serverless
    framework. We started by configuring Slack for incoming webhooks and then created
    a serverless application to send data to the webhook. In order to invoke the function
    at predefined times, the configuration of the serverless framework was utilized
    instead of cloud-specific schedulers. Since serverless frameworks create an abstraction
    for the cloud providers, the serverless application that we developed in this
    activity is suitable for multi-cloud deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Kubernetes Deep Dive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 4: Collect Gold Prices in a MySQL Database in Kubernetes'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an application to retrieve the gold price from `CurrencyLayer` and insert
    it into the MySQL database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is possible to implement this function in Go with the following main.go
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The main function starts with database connection, followed by price retrieval
    from `CurrencyLayer`. Then it continues with creating a SQL statement and executing
    on the database connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: main.go is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/main.go](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/main.go).
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the application as a Docker container. It is possible to build the application
    from Step 1 with the following Dockerfile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Dockerfile is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/Dockerfile](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/Dockerfile).
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This command builds the application as a Docker container, as shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.26: Docker build'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_04_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.26: Docker build'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Do not forget to change `<USERNAME>` to your Docker Hub username.
  prefs: []
  type: TYPE_NORMAL
- en: 'Push the Docker container to the Docker registry. Run the following command
    in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This command uploads the container image to the Docker Hub, as shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.27: Docker push'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_04_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.27: Docker push'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Do not forget to change `<USERNAME>` to your Docker Hub username.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy the MySQL database into the Kubernetes cluster. Create a mysql.yaml
    file with the MySQL StatefulSet definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: mysql.yaml is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/mysql.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/mysql.yaml).
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy the StatefulSet with the following command in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This command submits the file to Kubernetes and creates the mysql StatefulSet,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.28: StatefulSet creation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_04_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.28: StatefulSet creation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Deploy a Kubernetes service to expose MySQL database. Create a service.yaml
    file with the following Kubernetes Service definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: service.yaml is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/service.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/service.yaml).
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy the service with the following command in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This command submits the file to Kubernetes and creates the gold-price-db service,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.29: Service creation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_04_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.29: Service creation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Deploy a CronJob to run every minute. Create an insert-gold-price.yaml file
    with the following Kubernetes CronJob definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: insert-gold-price.yaml is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/insert-gold-price.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/insert-gold-price.yaml).
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to change `<USERNAME>` to your Docker Hub username and `<API-KEY>`
    to your CurrencyLayer API key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy the CronJob with the following command in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This command submits the file to Kubernetes and creates the gold-price-to-mysql
    CronJob, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.30: CronJob creation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_04_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.30: CronJob creation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Wait for a couple of minutes and check the instances of CronJob. Check the
    running pods with the following command in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This command lists the pods, and you should see a couple of instances whose
    names start with gold-price-to-mysql and with a STATUS of Completed, as shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.31: Pod listing'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_04_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.31: Pod listing'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Connect to the database and check for the entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This command runs a temporary instance of the mysql:5.7 image and runs the
    SELECT * FROM GoldPrices command, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.32: Table listing'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_04_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.32: Table listing'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the GoldPrices MySQL table, there is price data collected every minute. It
    shows that MySQL StatefulSet is up and running the database successfully. In addition,
    the CronJob has been creating the pods every minute and is running successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clean the database and automated tasks from Kubernetes. Clean the resources
    with the following command in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the output shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.33: Resource deletion'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_04_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.33: Resource deletion'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this activity, we have created a MySQL database as a StatefulSet in Kubernetes.
    Kubernetes has created the required volume resource and attached to the MySQL
    containers. Following that, we have created and packaged our serverless function.
    The function is deployed to the Kubernetes cluster as a CronJob. Kubernetes ensures
    that the function is scheduled and running every minute. Running functions in
    Kubernetes provides two essential advantages. The first one is the reuse of Kubernetes
    clusters and resources. In other words, we are not using any extra cloud resources
    to run our serverless workloads. The second advantage is the proximity to the
    data. Since our microservices are already running on Kubernetes, it is recommended
    to have our databases in Kubernetes. When the serverless applications are also
    running in the same cluster, it is easier to operate, manage, and troubleshoot
    the applications.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Production-Ready Kubernetes Clusters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 5: Minimizing the Costs of Serverless Functions in a GKE Cluster'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new node pool with preemptible servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following and upcoming functions in your GCP cloud shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the `zone` parameter if your cluster is running in another zone.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function creates a new node pool named `preemptible` with an automatically
    scaled minimum of 1 node and a maximum of 10 nodes, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.29: Node pool creation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_05_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.29: Node pool creation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Taint the preemptible servers to run only serverless functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will apply taints to all nodes with the label `cloud.google.com/node-pool
    = preemptible`. The taint key will be `preemptible`, and the value is `true`.
    The action of this limit is `NoSchedule`, which means only the pods with the matching
    toleration will be scheduled to these nodes, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.30: Tainting the nodes'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_05_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.30: Tainting the nodes'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a Kubernetes service to reach backend pods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This command creates a service for the deployment backend on port `80`, as
    shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.31: Exposing the deployment'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_05_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.31: Exposing the deployment'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Create a `CronJob` to connect to the backend service every minute. The CronJob
    definition should have tolerations to run on preemptible servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `CronJob` definition with the following content inside a file named
    `cronjob.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The file has a `CronJob` definition for running the `curl -I backend` function
    every minute. `nodeSelector` indicates that the scheduler will choose to run on
    the nodes with the label key `cloud.google.com/gke-nodepool` and a value of `preemptible`.
    However, since there are taints on the preemptible nodes, tolerations are also
    added.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`cronjob.yaml` is available on GitHub: [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson05/Activity5/cronjob.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson05/Activity5/cronjob.yaml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy the CronJob with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.32: CronJob creation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_05_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.32: CronJob creation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check the node assignments of the `CronJob` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This command lists the pod with their corresponding nodes. As expected, there
    are exactly 10 instances of backend running on `high-memory` nodes. In addition,
    there are 3 instances of the CronJob function running on `preemptible` nodes,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.33: Pod listing'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_05_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.33: Pod listing'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check the logs of `CronJob` function instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Replace `<ID>` with a pod name from *Step 5*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the function shows the trail of `curl` connecting to the `nginx`
    instance, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.34: curl output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_05_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.34: curl output'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Clean the backend deployment and serverless functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This command deletes the `backend` deployment and `backend-checker` CronJob,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.35: Cleanup'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_05_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.35: Cleanup'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Remove the Kubernetes cluster if you do not need it anymore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Change the `zone` parameter in the command if your cluster is running in another
    zone.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command deletes the cluster from GKE, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.36: Cluster removal'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_05_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.36: Cluster removal'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this activity, we have undertaken administrative tasks on a live production
    cluster. Creating different types of nodes and running a heterogeneous set of
    nodes in a Kubernetes cluster helps to decrease the cost of the complete cluster.
    Besides, autoscaling is enabled to meet user demand automatically without human
    interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Autoscaling and migration of applications are the most common operational tasks
    on production clusters. These tasks enable better performance with minimal downtime
    and costs. However, the selected Kubernetes platform for your production environment
    should also meet such requirements of your daily operations. The capabilities
    of Kubernetes and cloud providers are essential to install, monitor, and operate
    applications running in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Upcoming Serverless Features in Kubernetes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 6: Deploy a Containerized Application in a Serverless Environment'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new directory to store the files for this activity and change
    directory to the newly created directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Create an application that can return the current date and time for the given
    timezone. We will be using PHP to write this function, but you can choose any
    language that you're comfortable with. Create an index.php file with the content
    given in step 1\.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to create the Docker image according to the container runtime contract
    ([https://cloud.google.com/run/docs/reference/container-contract](https://cloud.google.com/run/docs/reference/container-contract))
    for Google Cloud Run. Create a new file named Dockerfile with the content in step
    2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Dockerfile is ready, we can build the Docker image. Replace `<your-gcp-project-name>`
    with the ID of your GCP project. Next, use the docker build command to build the
    Docker image. The `--tag` flag is used to tag the Docker image as per the `[HOSTNAME]/[GCP-PROJECT-ID]/[IMAGE-NAME]:[TAG]`
    format, as we will be pushing this to **Google Container Registry (GCR)** in the
    next step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.57: Building the Docker image'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_06_57.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.57: Building the Docker image'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Next, we can push the docker image to GCR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.58: Pushing the Docker image'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_06_58.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.58: Pushing the Docker image'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we have a Docker image created and pushed to the registry. Now navigate
    to the GCP console and open the Cloud Run page. Click on the **CREATE SERVICE**
    button to create a new service with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Container Image URL: `gcr.io/<your-gcp-project-id>/clock:v1.0`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deployment platform: Cloud Run (fully managed)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Location: Select any region you prefer from the available options'
  prefs: []
  type: TYPE_NORMAL
- en: 'Service name: clock'
  prefs: []
  type: TYPE_NORMAL
- en: 'Authentication: **Allow unauthenticated invocations**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The page would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.59: Creating a service'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_06_59.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.59: Creating a service'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click on the **CREATE** button and you will be navigated to the Service details
    page:![Figure 6.60: Service details'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_06_60.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.60: Service details'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Open the provided URL from the Service details page. For me, this URL is `https://clock-awsve2jaoa-uc.a.run.app/`,
    but your URL will be different:![Figure 6.61: Timezone error'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_06_61.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.61: Timezone error'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We are receiving this error as we have not provided the timezone parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s invoke the URL again with the timezone parameter, `https://clock-awsve2jaoa-uc.a.run.app/?timezone=Europe/London`![Figure
    6.62: Output with timezone'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_06_62.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.62: Output with timezone'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this activity, we have successfully deployed a containerized application
    on Google Cloud Run that can output the current date and time based on a provided
    `timezone` value.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Kubernetes Serverless with Kubeless
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 7: Publishing Messages to Slack with Kubeless'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution - Slack Setup**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit https://slack.com/create to create a workspace. Enter your email address
    and click on Create:![Figure 7.77: Creating a new workspace'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_07_77.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.77: Creating a new workspace'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, you will receive a six-digit confirmation code to the email that you entered
    on the previous page. Enter the received code on the following page:![Figure 7.78:
    Checking your email'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_07_78.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.78: Checking your email'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Add a suitable name here. This will be your workspace name:![Figure 7.79: Adding
    a workspace name'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_07_79.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.79: Adding a workspace name'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Add a suitable name here. This will be your Slack channel name:![Figure 7.80:
    Adding a Slack channel name'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_07_80.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.80: Adding a Slack channel name'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can skip the following section if you wish to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.81: Filling in further details or choosing to skip'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_07_81.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.81: Filling in further details or choosing to skip'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now your Slack channel is ready. Click on **See Your Channel in Slack**, as
    shown in the following screenshot:![Figure 7.82: Seeing the new Slack channel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_07_82.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.82: Seeing the new Slack channel'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once clicked, we should see our channel as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.83: Your new Slack channel'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_07_83.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.83: Your new Slack channel'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we are going to add an Incoming Webhook app to our slack. From the left
    menu, select Add apps under the Apps section:![Figure 7.84: Adding apps under
    the Apps section'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_07_84.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.84: Adding apps under the Apps section'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Enter `Incoming Webhooks` in the search field and click on **Install** for
    the Incoming Webhook app:![Figure 7.85: Browsing apps'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_07_85.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.85: Browsing apps'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click on **Add Configuration**:![Figure 7.86: Adding configuration'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_07_86.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.86: Adding configuration'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click on **Add Incoming WebHooks Integration**:![Figure 7.87: Adding incoming
    webhooks'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_07_87.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.87: Adding incoming webhooks'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Save the webhook URL. We will need this when we are writing the Kubeless function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s create the function and deploy it. First, we need to create the
    requirements.txt file, which specifies the dependencies we need to install for
    the function''s runtime. These are the additional modules we need in order to
    run our function successfully. We will be using the requests package to send the
    HTTP POST request to the Slack webhook endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '**Activity Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Create the function as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploying the function will yield the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.88: Deploying the function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_07_88.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.88: Deploying the function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We are passing the requirements.txt file that we created in the previous step
    as a dependency while deploying the slack function. This will ensure that the
    Kubeless runtime contains the required Python packages for function execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Invoke the kubeless function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This yields the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.89: Invoking the function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_07_89.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.89: Invoking the function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Go to your Slack workspace and verify that the message was successfully posted
    to the Slack channel:![Figure 7.90: Verifying whether the message was successfully
    posted'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_07_90.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.90: Verifying whether the message was successfully posted'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this activity, we created a Slack space and created an incoming webhook.
    Next, we created and deployed a Kubeless function that can post messages to the
    Slack channel.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Introduction to Apache OpenWhisk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 8: Receive Daily Weather Updates via Email'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Steps to create an OpenWeather and SendGrid account:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an **OpenWeather** account at [https://home.openweathermap.org/users/sign_up](https://home.openweathermap.org/users/sign_up):![Figure
    8.72: Creating an OpenWeather account'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_08_72.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.72: Creating an OpenWeather account'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once you have signed up to **OpenWeather**, an API key will be generated automatically
    for you. Go to the **API keys** tab ([https://home.openweathermap.org/api_keys](https://home.openweathermap.org/api_keys))
    and save the API key because this key is required to fetch the data from OpenWeather
    API:![Figure 8.73: OpenWeather API key'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_08_73.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.73: OpenWeather API key'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Test the **OpenWeather** API using `https://api.openweathermap.org/data/2.5/weather?q=London&appid=<YOUR-API-KEY>`
    in a web browser. Please note that you need to replace `<YOUR-API-KEY>` with your
    API Key from step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It may take a few minutes to get your API key activated. Wait for a few minutes
    and retry if you receive **Invalid API key**. Please see [http://openweathermap.org/faq#error401](http://openweathermap.org/faq#error401)
    for more info. error while invoking the URL.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.74: Invoking OpenWeather API'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_74.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.74: Invoking OpenWeather API'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Create a **SendGrid** account at [https://signup.sendgrid.com/](https://signup.sendgrid.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.75: Creating a SendGrid account'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_75.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.75: Creating a SendGrid account'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Go to **Settings** > **API Keys** and click on the **Create API Key** button:![Figure
    8.76: API key page in SendGrid'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_08_76.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.76: API key page in SendGrid'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Provide a name in the **API Key Name** field, select the **Full Access** radio
    button, and click on the **Create & View** button to create an API key with full
    access:![Figure 8.77: Generating an API key in SendGrid'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_08_77.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.77: Generating an API key in SendGrid'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once the key is generated, copy the API key and save it somewhere safe because
    you will see this key only once:![Figure 8.78: Generated API key in SendGrid'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_08_78.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.78: Generated API key in SendGrid'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Activity Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `get-weather.js` function with the function code provided in *step
    3*. Replace `<OPEN_WEATHER_API_KEY>` with the API key saved in *step 1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the action named `getWeather` with the `get-weather.js` function created
    in the preceding step and provide the default value of the `cityName` parameter
    as `London`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.79: Creating the getWeather action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_79.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.79: Creating the getWeather action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Verify that the action is working as expected by invoking the action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.80: Invoking the getWeather action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_80.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.80: Invoking the getWeather action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we can create the action to send emails (we will be using the API key generated
    with SendGrid). We will be using the `sendgrid` module for this function. First,
    we need to create a directory to store the function code and the dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.81: Creating the send-mail directory'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_81.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.81: Creating the send-mail directory'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Run the `npm init` command by accepting the default parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.82: npm init'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_82.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.82: npm init'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Install the `sendgrid` `npm` package, which is required for the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.83: Adding the sendgrid dependency package'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_83.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.83: Adding the sendgrid dependency package'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Create the `index.js` file with the function code provided in *step 4*. Replace
    `<SEND_GRID_API_KEY>` with the key, which was saved when creating the SendGrid
    account. Similarly, replace `<TO_EMAIL>` to receive weather data and `<FROM_EMAIL>`
    to send weather data with your email address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Compress the code with all the dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can create an action named `sendEmail` using `send-email.zip`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.84: Creating the sendEmail action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_84.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.84: Creating the sendEmail action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Verify that the `sendEmail` action is working as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make sure to check your spam folder because the email client might have categorized
    this as a spam email.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.85: Invoking the sendEmail action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_85.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.85: Invoking the sendEmail action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Create the `format-weather-data.js` function with the function code provided
    in *step 5*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the action named `formatWeatherData` with the `format-weather-data.js`
    function created in the preceding step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.86: Creating the formatWeatherData action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_86.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.86: Creating the formatWeatherData action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a sequence named `weatherMailSender` by combining the `getWeather`,
    `formatWeatherData`, and `sendEmail` actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.87: Creating the weatherMailSender action sequence'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_87.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.87: Creating the weatherMailSender action sequence'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Invoke the `weatherMailSender` sequence:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.88: Invoking the weatherMailSender action sequence'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_88.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.88: Invoking the weatherMailSender action sequence'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Check the mail account that you added as `<TO_EMAIL>` (check the spam folder).
    Check the status of email delivery at [https://app.sendgrid.com/email_activity](https://app.sendgrid.com/email_activity).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.89: Received email from the weatherMailSender action sequence'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_89.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.89: Received email from the weatherMailSender action sequence'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Finally, we need to create the trigger and rule to invoke the sequence every
    day at 8 AM. First, we will create `weatherMailSenderCronTrigger`, which will
    be triggered daily at 8.00 AM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will create a rule named `weatherMailSenderCronRule` to connect the
    trigger (`weatherMailSenderCronTrigger`) and action (`weatherMailSender`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.90: Creating weatherMailSenderCronRule'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_90.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.90: Creating weatherMailSenderCronRule'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Once the preceding steps are completed, you should receive an email daily at
    8.00 AM to the specified email address with the weather data for the requested
    city.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Going Serverless with OpenFaaS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 9: OpenFaaS Form Processor'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to create a SendGrid account and generate an API key. You can
    use the same API key created in the activity from *Chapter 08, Introduction to
    Apache OpenWhisk*. Refer to steps 4-7 in the activity of *Chapter 08, Introduction
    to Apache OpenWhisk* on how to create a SendGrid account and generate an API key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an OpenFaaS function named contact-form using the python3 template.
    This will be the frontend of the contact form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.59: Creating the contact-form function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_591.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.59: Creating the contact-form function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a new directory named html inside the contact-form directory to store
    the HTML files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.60: Creating the HTML folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_601.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.60: Creating the HTML folder'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Create the contact-us.html file inside the contact-form/html folder with the
    code provided in step 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `handler.py` Python file inside the contact-form folder. This Python
    function will read the content of the `contact-us.html` file and return it as
    the function response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the function definition (`contact-form.yml`) file to specify content_type
    as `text/html`, as explained in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Build, push, and deploy the contact-form function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the second OpenFaaS function named form-processor using the python3
    template. This will be the backend of the contact form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.61: Creating the form-processor function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_61.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.61: Creating the form-processor function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Update the `handler.py` Python file inside the form-processor folder. This Python
    function performs receives the email, name, and message parameters entered into
    the Contact Us form, formats the email body to be sent, sends the email using
    SendGrid, and returns the email sending status as the function response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace <SEND_GRID_API_KEY> with the SendGrid API key saved in step 1, and
    <TO_EMAIL> with the email address to receive the Contact Us form data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the sendgrid module as a dependency in form-processor/requirements.txt
    of the form-processor function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Increase the timeout (read_timeout, write_timeout, and exec_timeout) values
    in form-processor.yml, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Build, deploy, and push the form-processor function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the **Contact Us** form by opening the URL in a web browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://192.168.99.100:31112/function/contact-form`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The contact form should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.62: Invoking the Contact Us form'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_62.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.62: Invoking the Contact Us form'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Fill in the form and then submit the form, as shown in the following figure:![Figure
    9.63: Submitting the contact us form'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_09_63.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.63: Submitting the contact us form'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check the email account you provided as `<TO_EMAIL>` in step 9 to verify the
    email delivery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.64: Verifying email delivery ](image/C12607_09_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.64: Verifying email delivery'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
