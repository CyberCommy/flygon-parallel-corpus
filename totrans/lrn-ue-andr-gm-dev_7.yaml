- en: Chapter 7. Finishing, Packaging, and Publishing the Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last few chapters, we have been building a game bit by bit. We started
    by building the world using BSP brushes, adding lights and static meshes, creating
    materials, and applying them to the meshes. We then added the various classes
    and volumes that were required in order to develop the game and to enhance gameplay.
    After adding all of the actors, we went on to script our game using Blueprints,
    Level Blueprints, and Blueprint Classes. Finally, we made use of Matinee to create
    cut-scenes and animations.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a functioning game. The next step is finalizing the game, packaging
    it into an `.apk` file, and publishing it to the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the main menu using Unreal Motion Graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have played any sort of game, you will find that all of them have a main
    menu. Let's add one to our game as well. Our main menu will be fairly simple.
    We will have the name of the game in the center. The game will load when the player
    taps below the name. The game's menus, UI, **heads-up display** (**HUD**), and
    so on—along with their functionalities—can be easily created using **Unreal Motion
    Graphics** (**UMG**). UMG is an easy-to-use tool with a simple and intuitive editor,
    which you can quickly learn to make your game's menus and such.
  prefs: []
  type: TYPE_NORMAL
- en: UMG Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To access the UMG Editor and make your user interface, you first need to create
    a `Widget Blueprint` class. Right-click in the **Content Browser**, and under
    **User Interface**, select **Widget Blueprint**. Name it `Main_Menu`, and double-click
    on it to open the **UMG Editor**.
  prefs: []
  type: TYPE_NORMAL
- en: '![UMG Editor](img/image00394.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The tab and menu bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tab bar shows the currently open tabs. You can switch, close, rearrange,
    and move any tab from here.
  prefs: []
  type: TYPE_NORMAL
- en: '![The tab and menu bar](img/image00395.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The menu bar is where you can find the actions you would use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File**: From here, you can save your widget blueprint, compile the blueprint
    you created, open a selected asset, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit**: Here, you can undo or redo the last action and open the **Editor**
    and **Project Preferences**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Asset**: From here, you can find any asset you have selected in the **Content
    Browser** as well as find said asset''s references in the widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: Here, you can choose to hide/unhide any unused pins that are present
    in the blueprint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debug**: If you have created breakpoints in your blueprint (to debug errors),
    then you can enable/disable them and remove all of them from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Window**: From here, you can choose which panel or window you wish to see
    and which you do not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Help**: Finally, should you need any tutorials or documentation regarding
    widgets, you can access them from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The toolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below the menu bar is the toolbar. Here, all of the most commonly used actions
    are listed.
  prefs: []
  type: TYPE_NORMAL
- en: '![The toolbar](img/image00396.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Compile**: Clicking on this option compiles the class and notifies the user
    of any errors and/or warnings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save**: This saves all of the modifications you have made to the widget class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find in CB**: This option locates the selected object in the Content Browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Play**: This plays the game in the Editor Viewport'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debug Filter**: All of the variables and/or nodes you have set to debug are
    listed here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two windows in the UMG Editor: **Designer** and **Graph**. The **Designer**
    window is the window you see when you open the widget class. This is where you
    design your user interface. This includes adding the UI elements, arranging them
    in the Graph Editor, setting their properties, and so on. The other window is
    the **Graph** Window, which looks like the **Level Blueprint** window. This is
    where you do all of the visual scripting for the user interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The toolbar](img/image00397.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: All of the menus have the same actions that you would find in any other Blueprint
    window.
  prefs: []
  type: TYPE_NORMAL
- en: The Graph Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the middle of the screen is the Graph Editor. Here, you make and design your
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Graph Editor](img/image00398.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At the center, you can see a dotted rectangle. This is called the canvas and
    it represents the game screen. All of the UI elements you want in your widget
    go in here. This shows where the elements will be, how they will look on the screen,
    and where they will be arranged on the game screen.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom-left corner of the Graph Editor, you can see the resolution of
    the screen. At the bottom-right corner of the screen is where the **Dots per inch**
    (**DPI**) scale is displayed. You can change this by clicking the gear icon next
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top-left corner, you can see the zoom scale. Finally, at the top-right
    corner are a few buttons. From left to right, they have been enlisted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Widget Layout Transformation**: This is used to transform and set the layout
    of the widgets you created for your UI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Widget Render Transformation**: This is to transform the entire UI itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grid Snapping**: This toggles the grid snapping on/off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grid Snap Value**: If enabled, you can set the snap value from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zoom to Fit**: This pans and adjusts the Graph Editor to fit the entire canvas
    within the Graph Editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Preview Size**: Here, you can set and see how the UI would look on different
    devices, each with a different screen size, DPI, and screen resolution. It is
    really handy when you are developing games for different devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Details panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Details** panel is where you can set the properties of the selected component.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Details panel](img/image00399.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can set properties such as transformation and the pivot of the widget,
    add events when the widget is pressed or hovered over, set the visibility, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: The Palette panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are various widget elements that go into making a UI. You can find all
    of them in the **Palette** panel. Just drag and drop what you need from the panel
    to the Graph Editor in order to add that element.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Palette panel](img/image00400.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The widget components are categorized into four groups, namely **Common**,
    **Input**, **Panel**, and **Primitive**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Common**: This group contains the most frequently used widgets, such as buttons,
    image box, sliders, progress bar, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input**: This group contains elements that can take in input from the player,
    for instance, a text box, spin box, and combo box'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Panel**: This group contains elements useful for laying out widgets and for
    controlling when placing widgets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Primitive**: This group contains things such as Trobbers, Editable Texts,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Created**: This section contains any Widget Blueprint that you have
    created or have in your Project file. You can add them from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Hierarchy panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Hierarchy** panel shows the hierarchy of all of the components of the
    widgets.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Hierarchy panel](img/image00401.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At the top is the **CanvasPanel** which acts as the foundation of the UI. Whenever
    you add a component, it is added to the hierarchy as well. If you drag and drop
    a component on a Widget Component in the **Hierarchy** panel, it is added to it
    with the component upon which you dropped the widget component acting as the parent
    and the component you added acting as the child. They also get attached together
    in the Graph Editor.
  prefs: []
  type: TYPE_NORMAL
- en: The Animations panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final component in the UMG's user interface is the **Animations** panel,
    located at the bottom of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Animations panel](img/image00402.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: UMG allows the user to create animations. You can animate the Widget components
    to suit your preference. The **Animation** panel works almost the same way as
    Unreal Matinee. On the left is the **Tracks** panel. This is where you can add,
    remove, or move animation tracks. To add an animation track, click on the **+
    New** button.
  prefs: []
  type: TYPE_NORMAL
- en: On the right is the animation timeline. This is where you create your animation
    using key frames. At the top-left corner are some settings, such as enabling/disabling
    grid snapping, the grid snap value, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the main menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step to creating our main menu is to create a new level. In the Editor,
    click on **File** and select **New Level**. When the Level Type window opens,
    select **Empty Level**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00403.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Name this level as **Main_Menu**. Once created, open the **Main_Menu** widget
    class in the **Content Browser**. In the UMG Editor, add a **Text** widget to
    the canvas. Make the text big. First, increase the size of the text slot panel
    to 1300 x 200\. There are two ways of doing this: the first way is to click on
    the edge and drag it to increase the size. The second way is in the **Details**
    panel, where you can set **Size X** to `1000` and **Size Y** to `250`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00404.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The text slot is now set. However, the actual size of the text itself is quite
    small. The next thing we need to do is to increase the size of the text. Again
    in the **Details** panel, under the **Appearance** section, you will find the
    **Font** option. At the far right, you can set the value of the font size. By
    default, this value is set as `24`. Increase this to `150`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00405.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is where we will display the name of the game. In the **Content** section,
    you can set what text you want printed on the screen. Whatever you write is displayed
    in the Graph Editor. Remove **Text Block**, and write the name of the game: `Bloques`.
    Finally, adjust the position of the **Text** panel so that the name appears in
    the center of the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00406.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we are going to add is a button which, when the player clicks,
    starts the game. To do this, add a **Button** widget from the **Common** section
    in the **Palette** panel. Place it below the name of the game in the center. Set
    its dimensions as `256 x 64`. We will also need some text to go on the button,
    so drag a **Text** component from the **Palette** panel and drop it over the button.
    The text will get attached to the **Button** widget. You can see in the **Hierarchy**
    panel that the **Text** widget is under the Button widget as a component. Whenever
    you move the Button widget, the Text widget moves along with it. Change the color
    of the font from white to blue so that it is clearly visible.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00407.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have our button in place but it does not do anything. We need to script its
    functionality in. With the button selected, go to the **Details** panel and under
    the **Events** section, click on the button next to **OnClicked**. The window
    will switch to the **Graph** window with the **OnClicked** button event node already
    set up.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00408.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To this node, we will attach an **OpenLevel** node. Right-click and search for
    it by typing it in the search bar and attach it to the **OnClicked** node. In
    the **Level Name** input, write in the name of the level you want to open which
    in our case is **Bloques_Game**. Make sure you copy the name of the level properly;
    otherwise, it will not open.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00409.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we also need to remove the widget; otherwise, it will still be there
    when the level loads. Right-click and select the **Remove from Parent** node and
    connect it to the output pin of the **Open Level** node.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00410.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That is it. It really is that simple to load levels via Blueprints.
  prefs: []
  type: TYPE_NORMAL
- en: We have our Main Menu set up. We have to implement it into our scene. For this,
    open **Level Blueprint**. Before we can display the widget, we first need to create
    it. In the **Event Begin Play** section, right-click and type `create widget`
    to find the Create Widget node and connect them. Next, in the **Class** input,
    click on the dropdown menu and select **Main_Menu.**
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00411.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When the level begins, the **Main_Menu** widget will be created. Once created,
    we need to add it to the Viewport so that the player can see it. For this, we
    need an **Add to Viewport** node. Drag the **Return Value** out and release it
    anywhere in the Graph Editor. When the menu opens, type in `Add to Viewport`,
    find it, and add it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00412.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You were to test out the game, you would see that as soon as you run the game,
    the name of the game and the button appear on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00413.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: However, there are still a few things we can improve. For starters, we can hide
    the virtual joysticks, since they are not required.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click anywhere in the Graph Editor; turn off **Context Sensitive**; find
    the **Set Virtual Joystick Visibility** node; add it to the Graph Editor; and
    connect it to the **Add to Viewport** node. For the **Target** input, you need
    to create a **Get Player Controller** and attach it to the **Target** input pin.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00414.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now run the game. The virtual joysticks will not be visible during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the main menu](img/image00415.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you press on the button, it will load and take you to the game, and as soon
    as the level loads the UI will disappear. This is how you add a main menu to your
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Android SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can cook and package our game, we first need to install the Android
    SDK. Luckily, you do not need to find it on the Internet and download it; its
    installation file is available with UE4\. You can find it in **<Location>\ Unreal
    Engine\ 4.7\ Engine\ Extras \ Android**. The file we need is `tadp-2.0r8-windows`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Android SDK](img/image00416.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you find it, double-click on it to run the installation. Once the setup
    opens, all you need to do is to follow the onscreen instructions and let it install.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing to note is that the setup needs an Internet connection since it downloads
    the build tools; so make sure that you are connected to the Internet when installing
    the SDK tools.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have successfully installed the Android SDK files, the next thing you
    need to do is to tell the engine where all the files are (especially if you have
    installed the SDK files in some other location than the default location). To
    do this, you first need to open **Project Settings** (which can be found in the
    Viewport Menu Bar under **Edit**). In the **Project Settings** window under the
    **Platforms** section, select **Android SDK**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Android SDK](img/image00417.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can tell the engine where all of the folders are located. On the left
    is a list of all the files required to build for Android. On the right, in the
    panel, is where the directory for the corresponding files is set. There are two
    ways to change this. You can either manually type in the location of the folder
    in the panel, or click on the **…** next to the panel. When you click on it, the
    **Browse For Folder** window opens up where you can specify the folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Android SDK](img/image00418.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The first option is for the Android SDK folder. Find the `android-sdk-windows`
    folder and set it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second option is for the android NDK files. Find the `android-ndk-r9c` folder
    and set it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third option is for the ANT files. Find the `apache-ant-1.8.2` folder and
    set it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fourth option is for the Java files. Find the `jdk1.6.0_45` folder and set
    it. For developers who already have the Java SDK installed, you need to check
    the system environment variables and that the paths are correct.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can have different folder names; you just need to make sure that the appropriate
    folder is currently assigned.
  prefs: []
  type: TYPE_NORMAL
- en: The next two options are to specify which version of the SDK and NDK tools to
    use. The Android SDK files have now been installed and set up. The next thing
    to do is set up your Android device for testing.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Android device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing games, it is natural that you would want to test your game from
    time to time to see whether it is working smoothly and properly on the device.
    Instead of having to first package your game, put it on your device, and then
    test it, you have the option to directly build and run the game on Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, the first thing is to enable the Developer mode on your device.
    This can usually be found in **Settings** | **About phone**. Here, you need to
    find **Build number** and tap on it several times. If done correctly, you will
    get a prompt saying **You are now a developer** (in some devices or versions of
    Android, the **Build number** option is located within **More**). Once that is
    done, a new section called **Developer Options** will be available to you; open
    that and enable **USB debugging**.![Setting up the Android device](img/image00419.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, connect your device to the system and let it install the drivers.
    Your device is now ready for testing. To check whether it has been properly set
    up, in the **Editor Viewport Toolbar** click on the little arrow next to **Launch**
    and see whether your Android device is listed under **Devices**. If it is, that
    means that it has been properly set up. Some devices do not automatically install
    the driver. In such cases, it is advised that you download the respective driver
    from the company's website.![Setting up the Android device](img/image00420.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once set up, we can now test our game on our Android device. To do so, click
    on the Android device listed under **Devices**. Once clicked, UE4 will start packaging
    the game and deploying it for the device. You can see a pop-up at the bottom-right
    corner of the screen.![Setting up the Android device](img/image00421.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To stop the build process, click on the **Cancel** button. To see the output
    log of the building process, click on **Show Output Log** which opens the log
    window, where you can see what is being executed. You can also see where the error
    has happened if one occurs. Once the build process is over, it will automatically
    start on your device. The `.apk` file will also be installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Packaging the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way of packaging the game and testing it on your device is to first
    package the game, import it to the device, install it, and then play it. But first,
    we should discuss some settings regarding packaging, and packaging for Android.
  prefs: []
  type: TYPE_NORMAL
- en: The Maps & Modes settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These settings deal with the maps (scenes) and the game mode of the final game.
    In the Editor, click on **Edit** and select **Project** settings. In the **Project**
    settings, **Project** category, select **Maps & Modes**.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Maps & Modes settings](img/image00422.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go over the various sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Maps**: Here, you can set which map the Editor should open when you
    open the Project. You can also set which map the game should open when it is run.
    The first thing you need to change is the main menu map we had created. To do
    this, click on the downward arrow next to **Game Default Map** and select **Main_Menu**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local Multiplayer**: If your game has local multiplayer, you can alter a
    few settings regarding whether the game should have a split screen. If so, you
    can set what the layout should be for two and three players.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default Modes**: In this section, you can set the default game mode the game
    should run with. The game mode includes things such as the **Default Pawn** class,
    **HUD** class, **Controller** class, and the **Game State Class**. For our game,
    we will stick to **MyGame**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game Instance**: Here, you can set the default **Game Instance Class**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Packaging settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are settings you can tweak when packaging your game. To access those settings,
    first go to **Edit** and open the **Project** settings window. Once opened, under
    the **Project** section click on **Packaging**.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Packaging settings](img/image00423.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you can view and tweak the general settings related to packaging the
    project file. There are two sections: **Project** and **Packaging**. Under the
    **Project** section, you can set options such as the directory of the packaged
    project, the build configuration to either debug, development, or shipping, whether
    you want UE4 to build the whole project from scratch every time you build, or
    only build the modified files and assets, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Under the **Packaging** settings, you can set things such as whether you want
    all files to be under one `.pak` file instead of many individual files, whether
    you want those `.pak` files in chunks, and so on. Clicking on the downward arrow
    will open the advanced settings.
  prefs: []
  type: TYPE_NORMAL
- en: Here, since we are packaging our game for distribution check the **For Distribution**
    checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: The Android app settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding section, we talked about the general packaging settings. We
    will now talk about settings specific to Android apps. This can be found in Project
    Settings, under the **Platforms** section. In this section, click on **Android**
    to open the Android app settings.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android app settings](img/image00424.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here you will find all the settings and properties you need to package your
    game. At the top the first thing you should do is configure your project for Android.
    If your project is not configured, it will prompt you to do so (since version
    4.7, UE4 automatically creates the `androidmanifest.xml` file for you). Do this
    before you do anything else. Here you have various sections. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**APKPackaging**: In this section, you can find options such as opening the
    folder where all of the build files are located, setting the package''s name,
    setting the version number, what the default orientation of the game should be,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced APKPackaging**: This section contains more advanced packaging options,
    such as one to add extra settings to the `.apk` files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build**: To tweak settings in the **Build** section, you first need the source
    code which is available from GitHub. Here, you can set things like whether you
    want the build to support x86, OpenGL ES2, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distribution Signing**: This section deals with signing your app. It is a
    requirement on Android that all apps have a digital signature. This is so that
    Android can identify the developers of the app. You can learn more about digital
    signatures by clicking on the hyperlink at the top of the section. When you generate
    the key for your app, be sure to keep it in a safe and secure place since if you
    lose it you will not be able to modify or update your app on Google Play.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Play Service**: Android apps are downloaded via the Google Play store.
    This section deals with things such as enabling/disabling Google Play support,
    setting your app''s ID, the Google Play license key, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Icons**: In this section, you can set your game''s icons. You can set various
    sizes of icons depending upon the screen density of the device you are aiming
    to develop on. You can get more information about icons by click on the hyperlink
    at the top of the section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Cooker**: Finally, in this section, you can set how you want the audio
    in the game to be encoded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our game, the first thing you need to set is the **Android Package Name**
    which is found in the **APKPackaging** section. The format of the naming is `com.YourCompany.[PROJECT]`.
    Here, replace `YourCompany` with the name of the company and `[PROJECT]` with
    the name of your project.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android app settings](img/image00425.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Building a package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To package your project, in the Editor go to **File** | **Package Project**
    | **Android**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a package](img/image00426.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see different types of formats to package the project in. These are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ATC**: Use this format if you have a device that has a Qualcomm Snapdragon
    processor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DXT**: Use this format if your device has a Tegra graphical processing unit
    (GPU).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ETC1**: You can use this for any device. However, this format does not accept
    textures with alpha channels. Those textures will be uncompressed, making your
    game requiring more space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ETC2**: Use this format is you have a MALI-based device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PVRTC**: Use this format if you have a device with a PowerVR GPU.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have decided upon which format to use, click on it to begin the packaging
    process. A window will open up asking you to specify which folder you want the
    package to be stored in.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a package](img/image00427.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have decided where to store the package file, click **OK** and the
    build process will commence. When started, just like with launching the project,
    a small window will pop up at the bottom-right corner of the screen notifying
    the user that the build process has begun. You can open the output log and cancel
    the build process.
  prefs: []
  type: TYPE_NORMAL
- en: Once the build process is complete, go the folder you set.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a package](img/image00428.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will find a `.bat` file of the game. Providing you have checked the packaged
    game data inside `.apk?` option (which is located in the Project settings in the
    Android category under the **APKPackaging** section), you will also find an `.apk`
    file of the game.
  prefs: []
  type: TYPE_NORMAL
- en: The `.bat` file directly installs the game from the system onto your device.
    To do so, first connect your device to the system. Then double-click on the `.bat`
    file. This will open a command prompt window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a package](img/image00429.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once it has opened, you do not need to do anything. Just wait until the installation
    process finishes. Once the installation is done, the game will be on your device
    ready to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `.apk` file, you will have to do things a bit differently. An `.apk`
    file installs the game when it is on the device. For that, you need to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a copy of the `.apk` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste it in the device's storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the `.apk` file from the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The installation process will begin. Once completed, you can play the game.
  prefs: []
  type: TYPE_NORMAL
- en: Developer Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we talk about how to publish the game on the Google Play Store, we first
    need to talk about the **Developer Console** from where you manage your app. This
    includes uploading and removing the app to and from the Play Store, filling in
    the app's description, setting the price of the app, and so on. However, before
    you can access the **Developer Console**, you first need to register. The cost
    to register is $25\. The link to the signup page is [https://play.google.com/apps/publish/signup/](https://play.google.com/apps/publish/signup/).
  prefs: []
  type: TYPE_NORMAL
- en: '![Developer Console](img/image00430.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once registered, go to the **Developer Console** page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Developer Console](img/image00431.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, click on the **Add new application button** located at the top-right corner.
    When clicked, a window will open where you can set the language and set the name
    of the game as `Bloques`. Once set, click on **Upload APK**. Once clicked, you
    will see several options regarding the app.
  prefs: []
  type: TYPE_NORMAL
- en: At the top, you can see the name of the app, Bloques. Below it on the left-hand
    side are several panels. At the center are the available settings or options in
    the corresponding panel.
  prefs: []
  type: TYPE_NORMAL
- en: ALL APPLICATIONS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is where all the apps and/or games you have published, or are in the process
    of publishing, are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![ALL APPLICATIONS](img/image00432.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The applications that are not published yet and or in the process of being uploaded
    to the Play Store are saved as Drafts. You can also check things such as how many
    download/installs your app has had, the price, when the app was last updated,
    and so on. Clicking on any of the apps listed will open the app page, wherein
    you can set various properties and options for it.
  prefs: []
  type: TYPE_NORMAL
- en: APK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **APK** panel is opened by default. Here you can choose whether you want
    to publish the game on the Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: '![APK](img/image00433.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you are in the process of developing your app or game and want to test your
    product in the market, as well as get some feedback before you publish the final
    product, you can set up a beta test by uploading your app from the **BETA TESTING**
    tab. If you wish to have more controlled testing of your app, for instance only
    being able to download if you have an invite or a key code, then you can set up
    an alpha test by uploading your product from the **ALPHA TESTING** tab.
  prefs: []
  type: TYPE_NORMAL
- en: Store Listing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step panel is the **Store Listing** panel. This panel contains all
    of the options related to how the app is going to be displayed in the Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: '![Store Listing](img/image00434.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here you need to fill out the details regarding your app. These details will
    be displayed in the Play Store when the user clicks on it. There are five sections
    in this panel.
  prefs: []
  type: TYPE_NORMAL
- en: The first section is **PRODUCT DETAILS**. Here you can set the name of the app,
    a short description about your app (which should be short and interesting enough
    to get the users' attention), and a full description about your app (which contains
    a full description of what the app is, its feature set, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: The next section is **Graphic Assets**. Here you need to post screenshots of
    your game. Since there are various Android devices, each with different screen
    sizes and screen resolutions, you need to add several screenshots of various resolutions
    so that the screenshots are not stretched or compressed on any device. You need
    to add a minimum of two screenshots; the maximum number of screenshots you can
    add is eight. The required sizes for various devices is given, so you can check
    and set them up accordingly. Apart from adding screenshots, you can also add a
    video which could be a trailer or a gameplay video of your app.
  prefs: []
  type: TYPE_NORMAL
- en: Following **Graphic Assets** is the **Categorization** panel. This deals with
    how your app will be categorized in the Play Store. Here you need to specify whether
    your product is an app or a game. After setting that, you will need to specify
    in what category your product lies; if you have picked **Applications**, the options
    you get under category would be **Books and References**, **Education**, **Business**,
    **Finance**, **Lifestyle**, and so on. If you have picked Games, you will have
    to set its genre under Board Game, Puzzle Game, Casual Game, and so on. Finally,
    you also need to set the **Content Rating** for your app.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have the **Contact Details** wherein you can post your website or your
    company's website, contact email address, and phone number.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the **Privacy Policy** section you provide a privacy policy for
    your app.
  prefs: []
  type: TYPE_NORMAL
- en: Content Rating
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Content rating is an important aspect of any game or app. Google Play also offers
    its own content rating.
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Rating](img/image00435.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Even though there is a **Content Rating** section in **Store Listing**, this
    is a much more comprehensive and extensive rating system. With the help of a questionnaire
    with various questions regarding the app/game and its content, Google will rate
    your product. But to get the questionnaire you will first have to upload your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Pricing & Distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section contains everything related to the cost of your app and where your
    app will be available for download.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pricing & Distribution](img/image00436.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At the top, you can set whether your app is **Free** or **Paid**. If you want
    your app to be paid, you will first have to set up a merchant account.
  prefs: []
  type: TYPE_NORMAL
- en: Below that is a list of countries. You can choose in which country you want
    your app to be available by clicking on the checkbox. If you want your app to
    be available worldwide, check **SELECT ALL COUNTRIES** and all of the tick boxes
    will be checked.
  prefs: []
  type: TYPE_NORMAL
- en: In-app Products
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section contains settings regarding in-app products.
  prefs: []
  type: TYPE_NORMAL
- en: '![In-app Products](img/image00437.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A popular monetization method used by developers is in-app purchases. These
    are virtual goods that can be bought using real currency. Here, you can manage
    your in-app products and set items such as price, what is available to purchase,
    and so on. However, if you want to have in-app purchases in your game or app,
    you will first have to set up a merchant account.
  prefs: []
  type: TYPE_NORMAL
- en: Services & APIs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is where you can see what services offered by Google are currently active
    in your app/game.
  prefs: []
  type: TYPE_NORMAL
- en: '![Services & APIs](img/image00438.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: These services include Google Cloud Messaging, which you can use to send information
    and data from the servers to your app or game; licensing, which prevents piracy
    and unauthorized distribution of your product and is used to verify in-app purchases;
    and Google Play services, which includes leaderboards, achievements, push notifications,
    and many more.
  prefs: []
  type: TYPE_NORMAL
- en: GAME SERVICES
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously discussed, Google offers various services for app developers.
    This is where you can set what services you want on your app/game.
  prefs: []
  type: TYPE_NORMAL
- en: '![GAME SERVICES](img/image00439.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When you go to this panel, you will see a list of apps that you have produced,
    similar to that in the **All Applications** panel. Here, you can view what platforms
    your app or game is on, what achievements you have in your game, your leaderboards,
    and how many unique players have signed in to your game using their Google account.
    As with **All Applications**, clicking on the name of the app will open a page
    wherein you have several options regarding these services.
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss these sections individually.
  prefs: []
  type: TYPE_NORMAL
- en: Game details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here you can set the general details regarding your app/game.
  prefs: []
  type: TYPE_NORMAL
- en: '![Game details](img/image00440.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: These general details include your app's display name, its description, category,
    graphic assets, and so on. You can change the settings for these here as well.
  prefs: []
  type: TYPE_NORMAL
- en: Linked apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To be able to use Google Services, you will first have to link your app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Linked apps](img/image00441.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Linking your app will generate an OAuth2 key, which you will need to include
    in your app's binary before you can make use of these services. Here you can choose
    different platforms for your app, namely Android, iOS, Web, and others. Clicking
    on any one of them will open a page wherein you have to fill in certain details
    before you can link your app. We will come back to this in the later sections.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Getting users to download your app is one thing. To ensure that the users who
    have downloaded your app or game keep using them, in other words user retention,
    is a whole different area of expertise and equally important, if not more. The
    next three panels are for just that. The first is the **Events** panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Events](img/image00442.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have a sizable number of users, you can start having periodic events
    and rewards for users who participate in or win this event. Events can include
    weekly contests, discounts on in-game products, and so on. This is a great way
    to keep the users engaged in your game. To add an event, click on **Add Event**
    which will take you to the **Event** page wherein you can fill in the details
    regarding the event.
  prefs: []
  type: TYPE_NORMAL
- en: Achievements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another way of retaining users is creating achievements. Achievements are goals
    or tasks that the player has to perform in the game in order to unlock the respective
    achievement. This could include things like playing the game *X* number of times,
    killing *Y* number of enemies, and so on. Usually, when the player unlocks an
    achievement, they are rewarded with some in-game currency or something similar.
    Achievements are ideal for retaining perfectionist players who play to finish
    the game completely. This means finishing the game (providing it has an ending),
    unlocking anything and everything that is unlockable, and unlocking every achievement
    in the game. It is also a necessary component of your game since you need at least
    five achievements before you can publish your game.
  prefs: []
  type: TYPE_NORMAL
- en: '![Achievements](img/image00443.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To add an achievement, click on the **Add achievement** button which will take
    you to the **achievement details** page. Here, you can set all of your achievement
    details, such as the name of the achievement, a description about how it can be
    unlocked, an icon, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Leaderboards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Last, but not least, we have **Leaderboards**. Leaderboards are yet another
    way of retaining players, especially competitive players who play to get the highest
    score. A leaderboard is sort of a list where the names of players who have scored
    the highest points in your game are displayed in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: '![Leaderboards](img/image00444.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To add a leaderboard, click on the **Add leaderboard** button, which will take
    you to the **leaderboard details** page. On this page, you can set various options,
    such as the name, the format, the upper and lower limit of the leaderboard, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section contains various options regarding testing the Google Play services
    on your app/game. Before you publish your game, it is advisable that you first
    test your app to ensure that everything is working properly and if a problem does
    arise, fix it before releasing.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing](img/image00445.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can see whether the services are ready to test or not. If not, you
    will be told what is required before the testing can begin. You can also invite
    other people to test your app/game by clicking on the **Add testers** button and
    entering in their respective Google account details.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, there is the **Publishing** section. Once you have filled out all of
    the details, added screenshots, set up the Google Play services, tested them and
    are confident that your product is ready to be published, you can publish it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing](img/image00446.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can see whether your app/game is ready to be published or not. If
    it is not ready, you can see what is missing and what you need to do before you
    publish. If your game is already published and you want to remove it from the
    Play Store, you can do so by clicking on the **Delete your game** button.
  prefs: []
  type: TYPE_NORMAL
- en: REPORTS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the **REPORTS** panel, you can view things such as reviews, **Crashes & ANRs**,
    **Statistics**, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![REPORTS](img/image00447.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here too are various sections, all containing different reports:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Crashes & ANRs**: In this section, you can view reports related to game crashes
    and ANRs. Game crashes are a frequent occurrence. Even if your game is properly
    optimized, there are still some unforeseen issues that might occur—some minor
    and some major. To retain your users, you will have to fix these crashes; otherwise,
    they will get frustrated and delete your game. Here you can view crash reports
    for all of the games and apps you have published and accordingly work to debug
    them. ANRs appear when your app stops responding on a device similar to the **Not
    Responding** prompt you get in Windows and Mac. This is different from crashes
    since when a game crashes the application stops. When an ANR occurs, the application
    still runs on the device, but does not respond. This is equally important to resolve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reviews**: A good way to see how well your game or app is doing in the market
    is by reading its reviews. It is also a great way of learning the shortcomings
    of your game or app. You can use this information when creating a sequel or planning
    to develop an update. You can also get information about any bugs that are present
    in the game and use that knowledge to resolve them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Statistics**: This section shows you how many people are playing the game,
    how many downloads your game has gotten, where your game is most popular (location),
    how many active users your game has, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Financial reports**: Finally, there is the **Financial Reports** section
    wherein you can keep track of the revenue your product is generating and use it
    to update your game or app accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SETTINGS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, you have various options regarding things such as account details, rights
    regarding who can access the developer console, and so on, which you can view
    and set.
  prefs: []
  type: TYPE_NORMAL
- en: '![SETTINGS](img/image00448.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here too are various sections, each categorized based on the type of options
    that are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Account Details**: This section contains all the general options regarding
    your developer console account, such as the name of the developer, your address,
    your email ID, website URL, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User accounts & rights**: From here, you can set who can access your developer
    console. When working in a team, it is understandable that you would want all
    of them to have access. You can set that in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activity log**: Here you can see all of the changes you have made to your
    app in the developer console, along with a time-stamp as to when the particular
    change was made. This is a great way to keep track of any changes made to the
    app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email preferences**: If you want or do not want to receive alerts about your
    apps via email, you can set it here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API Access**: API is an important aspect of apps. It allows you to manage
    things like in-app purchases, authenticating transactions, and so on. However,
    before you can use them, you will have to link your app first. You can link your
    app here, in the **API Access** section'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AdWords accounts**: Here you can link your account to an **AdWords account**.
    AdWords is a service offered by Google which allows you to promote your app by
    using advanced targeting techniques to make sure that the right people get to
    see your advertisement or promotion for your app or game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ALERTS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Settings section, we discussed how you can turn on/off email alerts.
    If you have turned on email alerts, you will receive all alerts regarding your
    app via email. If you have turned it off, you can view these alerts here in the
    **ALERTS** panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![ALERTS](img/image00449.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Publishing your game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have discussed the Developer Console, we can go ahead and publish
    our game to the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Activating Google services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, since the app is more than 50 MB, you will have to make use of the Google
    Play service, namely the APK expansion files. Go to the **Game services** panel,
    and then the **Game details** section. Here, fill out all the fields since all
    of them are the basic requirements that the app should have before you can publish
    your services. This includes setting the **Display name**, which you can set as
    `Bloques`. In the **Description** section just write what the game is, what the
    objective of the game is, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![Activating Google services](img/image00450.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since this is a puzzle game, in the **Category** field, choose **Puzzle**.
    Further, since we do not require saved games, you can set it to **Off**. For the
    **Graphic Assets**, you will need a minimum of two: one for the icon and one feature
    graphic. The resolution required for the screenshot is `512 x 512` and the resolution
    required for the feature graphic is `1024 x 500`. You can take high-resolution
    screenshots of your scene and edit them in Photoshop to create your image.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Activating Google services](img/image00451.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have everything set up, click on **Save** at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have filled in the details go to **Linked apps**, fill in the required
    fields and click on **Continue** at the top. Once clicked, you will have to authorize
    your app. Click on **Authorize your app now** button. This will open a menu where
    you will be asked to fill in the name of the product, logo, and so on. However,
    since we already filled in those details earlier, we can leave it as it is (unless
    you want to make any changes). Click on **Continue**. Before we can move any further,
    we will first have to create a Client ID. To find out what the Client ID for your
    app is, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Command Prompt. Make sure you run as administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When it asks for a password, enter the default password: `android`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the SHA1 signature and paste it in the Signing certificate fingerprint
    (SHA1): field.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Create ID** which will create a client ID for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, Google will create a unique client ID for your game as well as an
    Application ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing we need is **ACHIEVEMENTS**. In order to publish our game, we
    need a minimum of five achievements. You need a name for the achievement, a description,
    and an icon to go along with it. You can create your own achievements but for
    now there are five achievements as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**First Time**: This is when the player plays the game for the first time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Getting the Hang of it**: This is when the player clears the second room'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Puppet Master**: This is when the player clears the third room'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Puzzle Master**: This is when the player clears the fourth room'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Addicted**: This is when the player plays the game five times'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Activating Google services](img/image00452.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can assign any number of points you see fit. We do not require leaderboards,
    since our game does not have points or scores.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the project for shipping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we need to go back to the **Engine** and define a few settings in the Project.
    First, we need to set what type of build we are going to make. To do this, go
    to **Project Settings** and under **Project**, in the **Packaging** section, check
    the **For Distribution** box. You will notice that the **Build Configuration**
    option will be set to `Shipping` and the option will be locked.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the project for shipping](img/image00453.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The next thing we are going to do is copy some of the values from the developer
    console to our project. Go to **Project Settings** | **Platforms** | **Android**.
    First, in the **APKPackaging** section, uncheck **Package game data inside .apk?**.
    Since our game is more than 50 MB, we cannot upload the .apk file directly. What
    we need is a `.obb` file, an extension file, which we will be uploading in addition
    to the `.apk` file. With this option unchecked, UE4 will automatically create
    both a `.apk` file (which will be smaller than 50 MB) along with an `.obb` file
    (the extension file).
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the project for shipping](img/image00454.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, go to **Distribution Signing**. This section is necessary if we are to
    package our game for shipping. The first thing we need is to create a `keystore`
    file. A keystore file is a binary file that has a set of keys. You can think of
    it as a digital signature which is used to identify and authenticate your app
    on the app store. There are various ways to create a keystore: one of them is
    with the help of Command Prompt. So, run Command Prompt as administrator and enter
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Replace `*name of your project*` with Bloques (or whatever you see fit) and
    `*alias_name*` with Game (or whatever you see fit).
  prefs: []
  type: TYPE_NORMAL
- en: After you have entered the command, you will be asked to fill in some other
    information, such as the password for your keystore, your name, your company's
    information, and so on. Once you fill those in, the keystore will be created.
    Locate it and place it in `*Project Directory*/Build/Android`.
  prefs: []
  type: TYPE_NORMAL
- en: Once done, go back to **Project Preference**, and under **Distribution Signing**,
    in **Key Store**, enter the name of the `keystore` file you created, along with
    the extension (for example, if the name of the keystore is Bloques, then enter
    Bloques.keystore). Then, in **Key Alias**, enter the alias name (Game). Finally,
    in the **Key Store Password** and **Key Password** fields, enter in the password
    you had defined when you were making the `keystore` file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the project for shipping](img/image00455.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, go to **Google Play Services**. Here the first thing to do is to check
    **Enable Google Play Support**. This will enable Google Play services in the game.
    In the **Game App ID** field, fill in the Application ID you got when you linked
    your app in the Developer Console. You can find this ID in the Developer Console
    under the **Authorization** section of **Linked apps** in the **Game services**
    panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the project for shipping](img/image00456.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we are going to need the Google Play License Key. This can be found in
    the **Developer Console**, under the **LICENSING & IN-APP BILLING** section of
    **Services and APIs** in the **All applications** panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the project for shipping](img/image00457.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This extremely long string of seemingly random characters is our License Key.
    Copy the entire thing and paste it in the **Google Play License Key** section.
    Next, in the Achievement Map, fill in the name and the ID of the achievements
    you created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the project for shipping](img/image00458.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Just copy and paste the name along with the ID here. If you have icons that
    you would like to add you can do so here as well, in the **Icons** section. We
    are now ready to package our game for distribution. So, in the Editor, go to **File**
    | **Package Project** | **Android** and choose any format and package the game.
  prefs: []
  type: TYPE_NORMAL
- en: Once the build is complete, go to the folder you set to store the package. You
    will see a `.apk` file, a `.bat` file, and a `.obb` file of the project. We will
    only require the `.apk` and `.obb` file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the project for shipping](img/image00459.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Uploading the game on the Play Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last step is to upload the package onto the Play Store and fill out a few
    more details. Go back to the **Developer Console** and go to **All Applications**.
    Within that, go to **APK**. Here is where we upload our `.apk` and `.obb` files.
    Go to the **Production** tab and click on **Upload APK**; then select the `.apk`
    file. Once the upload has finished, we will need to upload the extension or the
    `.obb` file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Uploading the game on the Play Store](img/image00460.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To upload the `.obb` file, click on **No expansion** file to open a dropdown
    menu and select **Upload a new file**. From there, select the `.obb` file. After
    the upload is complete, click on **Save Draft**.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing to do is fill the sections in the **Store Listing** section.
    This is similar to what we filled in in the **Game Details** sections in the **Game
    Services** panel. You can copy-paste the fields. You also require a minimum of
    two screenshots here.
  prefs: []
  type: TYPE_NORMAL
- en: Next, go to **Content Rating**. Here, once you have uploaded the APK you will
    be asked to fill in a questionnaire which will properly rate your app. These questions
    mostly relate to the content of your game. Fill them out and save the questionnaire.
    The **Save** button is located at the bottom. Next, click on **Calculate Rating**
    and it will generate an appropriate rating for your game. Once you have seen your
    rating, click on **Apply Rating** located at the bottom of the page.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing we need to fill out is the **Pricing and Distribution** form.
    Here, you will need to specify in which countries you want the game to be available,
    as well as tick read and agree to guidelines regarding export laws, and such.
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to publish your app. To do so, click on **Publish App** located
    at the top-right corner of the **Developer Console** and your app will be added
    to the Google Play Store for the world to download, play, and enjoy.
  prefs: []
  type: TYPE_NORMAL
- en: Monetization methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is one thing to make a good game. However, the most important thing is for
    your game to generate revenue because, after all, we all have bills to pay. Ever
    since mobile games came into the scene, several monetization models have emerged.
    Here are the four most popular and widely used monetization models that developers
    use to generate revenue:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Freemium model**: This is a widely used business model made popular by games
    such as Angry Birds, Cut the Rope, and so on. Here, you make certain features
    of the game free while other features are locked—which cost money to unlock. The
    main goal of this model is to attract as many people as possible and give them
    a preview of the app and its features without giving away too much, so that the
    users become interested enough in purchasing the whole app. This is similar to
    the Demo version of games for the PC and Consoles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantages of using this model are that users get to try the product before
    they purchase it, making them more likely to purchase the app later on. It is
    also an easy way to build a large user base, since the app has no upfront charge
    and people love free things.
  prefs: []
  type: TYPE_NORMAL
- en: On the flipside, some of the disadvantages of using this model are that if you
    offer too few features, the users will not be engaged enough to purchase the whole
    product. On the other hand, if you offer too many features, the users will not
    have a good enough reason to purchase the whole product.
  prefs: []
  type: TYPE_NORMAL
- en: '**In-app advertisement**: Another popular business model is making the product
    completely free for users. The way developers earn revenue is through in-app advertisements.
    You may have seen such apps. The game or app is free to download and you have
    ad banners at the top or bottom of the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantages of using this model are that you completely remove any paywall
    or barriers between the user and the features offered by the app, making it more
    desirable. You can also gather data based on their behavior and use this for target
    advertising.
  prefs: []
  type: TYPE_NORMAL
- en: However, using this model means sacrificing the already limited screen space
    for ads, which means sacrificing the user experience. Another thing to keep in
    mind is that people can and will get annoyed with the ads and this can cause them
    to stop using or uninstall the app. So be careful how and when you use them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Paid apps**: As the name suggests, in this model, the app is not free; users
    will have to purchase the app in order to use it. The advantages of using this
    model are that you get upfront revenue from every download along with better user
    retention (since they paid to download the app, they are more likely to use it
    frequently). However, with that said, unless you have a good reputation in the
    app market, it is hard to convince users to pay upfront for your product. It also
    means that users would have high expectations of your product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**In-App purchases**: This model, made popular by games such as Candy Crush
    Saga, Clash of Clans, and so on is similar to the Freemium model in that the product
    is made available free. However, in this case, no features are blocked for the
    users until they make a purchase. Instead, they get all of the features right
    from the start. The way that the developers earn revenue is by in-app purchases.
    These are virtual goods, such as lives, power-ups, virtual currency, and so on.
    The advantages of using this model are that it increases user engagement and therefore,
    user retention. Another thing is that it has a low level of risk, since it does
    not require a lot of investment. However, keep in mind not to get carried away
    with this. One fatal mistake developers make is building a game which is virtually
    unplayable unless the users pay.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile performance and optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is every developer's desire to make their game nice and beautiful with various
    types of post-processes, complex shaders, lighting, and so on. While this is perfectly
    fine when making games on PC/Consoles, you have to keep in mind that mobile platforms
    have certain technological limitations which can cause your game to perform poorly,
    thus resulting in poor sales. Here are a few tips and tricks on how you can optimize
    your game to achieve the best performance.
  prefs: []
  type: TYPE_NORMAL
- en: The draw calls for your entire scene should be less than 700 to achieve the
    best performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although dynamic lights make the game look good, it is also heavy on the technical
    side. Thus, unless you absolutely require them avoid using dynamic lights. Also,
    it is recommended that you build the lighting before you port the game on your
    device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The triangle count for your entire scene should ideally be 500,000 or less.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unless you absolutely need to, you should turn off Mobile **High Definition
    Rendering** (**HDR**). This turns off lighting features and greatly improves the
    performance on mobile.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again, unless required, you should turn off post-process features for better
    performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When it comes to textures, to prevent memory wastage, their resolution should
    be of powers of 2 (256 x 256, 512 x 512, 1024 x 1024, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set some of the **Rendering** options in the **Project Settings** in
    the **Engine** category, under the **Rendering** section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mobile performance and optimization](img/image00461.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can turn on/off different features such as lighting, post-process, textures,
    and so on from here, including the last two points mentioned above.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to performance, you should first be aware of some performance
    tiers. They all have to do with the lighting features in the game. When developing
    games for mobile, depending upon your requirements and your target platform, you
    should keep these in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Low Dynamic Range** (**LDR**): This mode has the highest performance and
    least load on the memory and processor. This mode is recommended for games that
    do not need lighting features and/or post-processing in their game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basic Lighting**: This is the next best mode in terms of performance. In
    this mode, you have access to the basic lighting features offered by UE4, such
    as global illumination, material shading, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full HDR Lighting**: This mode is on the other end of the spectrum. It has
    the lowest performance and the highest load on the memory and processor. In this
    mode, you make use of most of the lighting and post-processing features offered
    by UE4\. It is not recommended for use in mobile games.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended that you visit [https://wiki.unrealengine.com/Android_Device_Compatibility](https://wiki.unrealengine.com/Android_Device_Compatibility).
    This is a community driven page, wherein various community members have tested
    UE4 on various Android-based devices using different lighting modes. It is really
    helpful when developing games for Android. If you have tested UE4 on a device
    that has not been listed, you can post it yourself for the benefit of other community
    members.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed UMG and its user interface. Using it, we created
    a main menu for our game (which contains the name of the game and a button that
    starts the game when the player touches it). Having done that, we were then ready
    to package our game for Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: The first step in doing that was installing the Android SDK which contains all
    of the build files required to package our game into a `.apk` file. Once installed,
    the next step was to specify to the engine where all of the files are located.
    Then, we discussed how to set up the Android device to test the game directly
    without having to package the game every time. Finally, we discussed how to package
    the final product and upload the game onto the Google Play Store for people to
    download.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter ended with details on the few monetization models that are widely
    used by mobile game developers to earn revenue, and a few tips on how to properly
    optimize your game for mobile devices..
  prefs: []
  type: TYPE_NORMAL
- en: You are now equipped with all that you need to know to get started on making
    that game you always dreamed of. From here, the only thing you can do to get better
    at UE4 is practice.
  prefs: []
  type: TYPE_NORMAL
