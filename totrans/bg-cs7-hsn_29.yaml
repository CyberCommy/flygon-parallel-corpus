- en: Querying XML Documents with LINQ
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to combine LINQ and XML to make something
    more practical.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a text box and a button to HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Crank up a project, and inside <html>, the first thing that you need to do
    is adding a `TextBox` control. To do this, go to View | Toolbox, type `tex` in
    the search field, and drag and drop the `TextBox` below the line that begins with
    `<form id=...`. Type `Enter Value:` at the beginning of the line, so that it looks
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: So, you'll have a box; enter a value into the box, and then you'll get a result.
    You'll scan an XML document to select items that are above a certain value, $50
    or $60, for example. This is our objective; in other words, to make a searchable
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you''ll insert a button into <html>. So again, go to Toolbox, type `but`
    in the search field, and drag and drop the `Button` control beneath the preceding
    line. Change the text on the `Button` control to say something easy such as `Search`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, go to the Design view. It looks like the screenshot shown in *Figure
    29.3.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a1d6202-62a3-4089-8c30-dbc79ad766f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29.3.1: The interface of this project in Design view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on the Search button. This brings up the `Default.aspx.cs` file.
    Delete the `Page_Load` stub. Collapse all of the comments above and below `using
    System;`—you don''t need them. The relevant portion of the starting code for this
    project should look like *Figure 29.3.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a78690ee-4e08-4ad0-97d8-03c3fbf1b024.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29.3.2: The starting code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: There's a bit of interesting code in this one—very practical. Do keep in mind
    that whenever you learn a programming language, the simple truth is that what
    you do in real life is far more challenging than anything that you will see in
    a book like this.
  prefs: []
  type: TYPE_NORMAL
- en: Adding namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s add some namespaces. Enter the following under `using System` near
    the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So, we have a bridge between XML and LINQ—that's our objective here.
  prefs: []
  type: TYPE_NORMAL
- en: Clearing the output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you need to clear label every time so that the output does not accumulate
    on the label. So, enter the following between a set of curly braces under the
    line that begins with `protected void Button1_Click...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Building an element tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will make an element tree using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this line, `store` is the name of the tree. Basically, it holds information
    about products. Remember, if you want to know where something comes from, just
    hover your mouse over it. Thus, if you hover your mouse over `XElement` at the
    beginning of this line, the tooltip shows that it does not come from the XML namespace.
    Rather, it comes from the Xml.Linq namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you'll put other elements inside `store`. So, insert several blank lines
    right before the closing parentheses with the semicolon, and now you'll stack
    things inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to put the comma in after `store` in the preceding line. When you type
    the comma, take a look at the tooltip. Do you see where it says params object[]
    content? This means that there are a variable number of arguments there which
    you can specify to build up the tree. Remember, params means that you can specify
    a variable number of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll have a new element inside the store called `shoes`. So, indent
    the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, indent the following lines further in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, you say `new XAttribute`, just to show you that it's possible. The attribute
    will be the `price`, and the value will be, for example, `$65`. You close that
    attribute and close the element with a comma.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now since you will repeat this, copy this line and paste it below, changing
    the brand name to `Stacy Adams` and the price to `$120`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s repeat this one more time. So once again, copy this line and paste it
    underneath, changing the brand name to `Florsheim` and the price to `$90`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that at the end of the last line here, you close with four parentheses
    and a semicolon. You must be extremely careful about this. You must make sure
    that everything is matching. So, you have a Store, and then you have a Shoes department,
    and within the Shoes department you carry different Brands: Nike, Stacy Adams,
    and Florsheim.'
  prefs: []
  type: TYPE_NORMAL
- en: Saving the store XML file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it''s good to be able to write this out to a file to confirm that the
    structure is interpreted in that it appears the way it''s supposed to look. So
    enter the following next, aligning the indent with the preceding `XElement store...`
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `store.Save()` is a nice function that you can call directly. You save
    this to a file, in this case:`(@"c:\data \storefile.xml");`.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before doing anything else, let''s confirm that this will work as expected
    and that it generates a good-looking XML file. So, open it up in your browser
    and click on the Search button, as shown in *Figure 29.3.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c94572b2-1a34-4dee-bad8-2eb2d8a96003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29.3.3: The interface displayed when testing the program at present'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, nothing shows right now, because you haven't coded that part yet.
    However, if you do a directory listing of `c:\data`, there is the saved file,
    `storefile.xml`, as shown in *Figure 29.3.4:*
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b983eeca-858f-4782-8a39-57a67a8b28c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29.3.4: The file storefile.xml is saved in the c:\data directory'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open this file in Notepad by typing `notepad.exe` `storefile.xml` at
    the `c:\data>` prompt, you will see the result shown in *Figure 29.3.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86092640-cef3-4352-8a68-08262058ca10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29.3.5: The file storefile.xml opened in Notepad'
  prefs: []
  type: TYPE_NORMAL
- en: 'This looks very good. You have a `store` element, and then within the `store`
    element you have `shoes`, and within `shoes` you have brands `Nike`, `Stacy Adams`,
    and `Florsheim`, and each shoe carries a price: $65, $120, and $90, respectively.
    So, it looks like a good file, and it is sufficient for our purposes. (In real
    life, believe me that these things are a lot more complicated.)'
  prefs: []
  type: TYPE_NORMAL
- en: Searching for items that meet a specific criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, enter the following beneath the line that began with `store.Save...`,
    to search for shoes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, `var shoeSearch` is a combination of LINQ and XML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, type `where (decimal)`, which is used to convert to a decimal value,
    and that the price is greater than a value entered by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Selecting among the items that meet the search criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once those shoes are found, you can select among them, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you hover your mouse over the first use of `Descendants` in the preceding
    line, it tells you that it returns IEnumerable. The tooltip says that it Returns
    a filtered collection of the descendant elements for this document or element,
    in document order.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you hover your mouse over the second use of `Descendants`, you'll see
    that it goes by the brand. Once you're there at that level, then you can, for
    example, hover your mouse over the `price` attribute in the preceding line that
    begins with `where...`, and then compare this attribute against the value specified
    by the user. So, it's as if you're traversing it from the outside to the inside
    until you get to the price attribute and then, at that stage, you make the comparison
    of that value to the one entered by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Enter the following line next to display all of the shoe brands and prices
    that were selected by the search:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, enter the following between a set of curly braces beneath the preceding
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this line, there could be multiple values, so you append. Note that we place
    the `<br>` tags to push each result down to the next line. To display the price,
    you say `(decimal)` to convert to a decimal value, and then after `shoeBrand.Attribute("price")`,
    you convert that to a currency format with `:C`. So that's all of the code. It's
    very important to type all of this in. The best way to learn is by doing, not
    simply by opening a previously prepared file and running it.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now open your browser one last time, input a value of, say, `45`, and click
    on the Search button. It should return all of the shoes, right, because the prices
    are all higher than that, as shown in *Figure 29.3.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc50b72e-0d4a-4b7d-b400-9eac7a436285.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29.3.6: All of the shoes and prices are displayed, as the value entered
    is less than the price of any of the shoes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now enter `100` as the value, and click on the Search button again. In this
    case, it only returns the Stacy Adams shoe, which is priced at $120, as shown
    in *Figure 29.3.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3af00975-0326-44b6-8d75-fde770b5b20e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29.3.7: Only the Stacy Adams shoe is returned, as it is priced above
    $100'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do one more. Enter `85`, and click on the Search button once again.
    As shown in *Figure 29.3.8*, it returns the Stacy Adams and Florsheim shoes, as
    both of these are priced at $85 or above:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40abe797-ce80-4c97-98e0-c2596cf071e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 29.3.8: the Stacy Adams and Florsheim shoes are returned, as both are
    priced at $85 or more'
  prefs: []
  type: TYPE_NORMAL
- en: There you go. So that's working as expected. We also generated a beautiful-looking
    XML file using the entire `XElement` construction that you wrote in order for
    this program to work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to combine LINQ and XML to make something more
    practical. You built an element tree and wrote the code to save the store XML
    file, to search for items that met a specific criterion, and to select among the
    items found those that met the search criteria.
  prefs: []
  type: TYPE_NORMAL
