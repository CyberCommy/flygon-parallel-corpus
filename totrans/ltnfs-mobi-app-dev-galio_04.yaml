- en: '*Chapter 4*: Your First Cross-Platform App'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started by learning how to set up a React Native development environment.
    After that, we went ahead and started learning about JSX, components, and props.
    We've already learned so much that we should be quite confident going forward.
    But if you still feel like something is missing, then you're right. We haven't
    styled anything, and we still haven't constructed a real screen.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will revolve around an app idea I had some time ago that constantly
    tracks your gaming history. We're not going to start discussing servers and databases
    as they are out of our learning scope, especially because we have bigger, more
    essential things to learn about. We'll start by detailing all the information
    about our app while using everything we've learned in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we'll take start creating the static version of our app so that
    you can understand how your brain needs to think before creating an app. Having
    learned all the principles in the previous chapters will help us understand our
    first real assignment more easily, so if there's anything you still aren't sure
    about, go back to the previous chapters and see where exactly you feel like things
    could be improved.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to learn about styling. We'll go in-depth regarding styling
    and how that works with React Native. We'll understand what flex is and how to
    use it inside our app while also figuring out tricks we can use to make our development
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: After styling the app, we'll refactor our code while keeping everything we've
    built so far intact. This is where Galio will come in and help us realize how
    useful it is to have already-built components at our disposal. We'll learn how
    to use one of the most important components to build the layout without worrying
    about creating different styles for our containers.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we will install the app on our phones. This is a single-screen app,
    so we'll be using our phones for testing purposes only. We'll also learn some
    basics techniques that we can use to make sure our app runs smoothly on all screen
    sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything seems straightforward and pretty easy, right? Let''s head right
    in and start building our app. The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Building our first app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's style it!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The superhero, Galio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's install it on our phone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can check out this chapter's code by going to GitHub at [https://github.com/PacktPublishing/Lightning-Fast-Mobile-App-Development-with-Galio](https://github.com/PacktPublishing/Lightning-Fast-Mobile-App-Development-with-Galio).
    You'll find a folder called `Chapter 04` that contains all the code we've written
    inside this chapter. To use that project, please follow the instructions in the
    `README.md` file.
  prefs: []
  type: TYPE_NORMAL
- en: Building our first app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start discussing the main idea of our app and how we're going to start
    building it. We'll call this app **MGA**, which is short for **My Gaming History**.
    Pretty clever, right? It will only have one screen, and it will act as the welcoming
    screen once the user is logged in. We'll pretend that the user has already logged
    into our app, so we'll only code that main screen without looking at authorization,
    which is a more advanced concept.
  prefs: []
  type: TYPE_NORMAL
- en: By having a clear understanding of what our screen needs to look like and describing
    our component's purpose, we're building a clear path to our development. In the
    end, if we weren't doing all this preparation, we'd get stuck during our programming,
    and we don't want that.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should start by looking at our design, identifying the main purpose of it,
    and how to start sectioning our screen into components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – My Gaming History''s main screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.1_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – My Gaming History's main screen
  prefs: []
  type: TYPE_NORMAL
- en: It looks great, right? Well, it should because this time, we're going to fully
    implement everything in this screen, even the colors and element positioning.
    After all, this is our first fully created screen.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to think about how we could separate everything into smaller sections,
    which is one of the most important steps in UI creation. Remember that this is
    mandatory because if we were to just code everything without even trying to have
    some sort of strategy in mind, we would run into some issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to use squares to easily identify each element on our screen,
    so let''s take a look at that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Component division'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.2_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Component division
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve sectioned the entire screen here, color-coded so that you can see them
    better:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Home** (*red*): Our container component, also known as our screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WelcomeHeader** (*blue*): This will contain all the basic information regarding
    the user, such as their name, level, and profile picture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MostPlayedGame** (*blue*): This will be a container that will receive information
    regarding the most played game but also a picture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LastPlayedGameList** (*blue*): This contains a list of items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PlayedGameItem** (*green*): This is a single item displaying the most played
    games and the times spent on each one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, we're using the same color for three different components. Why
    is that? Because those three components are equally important in our main bigger
    component called `Home`. They're all sitting at the same level in our component
    tree. Even though the `Home` component is a screen, it is defined the same way
    as a component, and you'll see what I mean by that when we start coding.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have divided our components, we're ready to move on and start coding
    our app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the development plan has been completed and we know where each component
    needs to go and what our application is going to look like, we're ready to create
    a new project. This project will set the first stones for this creative path that
    we've taken toward being a React-Native developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by creating a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to your Terminal in your preferred directory and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Choose the blank template for *Managed Workflow* and open the project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we mentioned previously, we'll have five different components, one of which
    will be the screen itself. So, let's create two different directories called `screens`
    and `components`. This will make it easier to organize when we have several different
    screens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a good rule of thumb to always have a basic structure in your head when
    you start coding because you never know when you might want to add more and more
    to your app.
  prefs: []
  type: TYPE_NORMAL
- en: Inside our `screens` folder, let's create a file named `Home.js`. This will
    be our main screen, so we will begin by writing the most essential code for a
    component. This is just the boilerplate for a functional component. Remember how
    those were created? We did this in [*Chapter 2*](B17074_02_epub_Final_SB.xhtml#_idTextAnchor045),
    *Basics of React Native*. Now, try to do it by yourself and come back here once
    you've managed to do it:![Figure 4.3 – Basic Home screen with nothing to render
    but a View component
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/Figure_4.3_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Basic Home screen with nothing to render but a View component
  prefs: []
  type: TYPE_NORMAL
- en: Once you've done that, we must go to our main file, `App.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, we'll start by removing everything that's not necessary for our main file.
    We won't need all the styling, the `StatusBar` import, or even any components
    that have been imported from React Native.
  prefs: []
  type: TYPE_NORMAL
- en: After deleting everything, we can import our component right after the `React`
    import and place it inside our main `App` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, our new component should now look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – The App.js file after removing all the unnecessary code'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.4_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – The App.js file after removing all the unnecessary code
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering, "Well, what's with that weird `<>` syntax?". That's
    the short syntax for a **Fragment**, which is a React feature. This is used so
    you don't add more unnecessary nodes to your component tree. We could have used
    a `<View />` component instead, as we saw in our earlier examples, but by using
    a **Fragment**, we're creating a wrapper for our components without an unnecessary
    wrap component as we won't be styling anything in our main file.
  prefs: []
  type: TYPE_NORMAL
- en: If this still creates some problems, you can easily wrap your `<Home />` component
    into a `<View />` component.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we're here, let's look at our `components` folder and create all the
    necessary files we'll be working with.
  prefs: []
  type: TYPE_NORMAL
- en: Create four new files called `WelcomeHeader.js`, `MostPlayedGame.js`, `LastPlayedGameList.js`,
    and `PlayedGameItem.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's do the same thing we did with `Home.js` for each of our newly created
    files. You could even copy the code from the `Home.js` file and then paste it
    into each file; just don't forget to change the names from **Home** to whatever
    your component is called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have initialized all our files, we're ready to start moving on with
    our code. We should see some sort of similarities between these components and
    the previous chapter's components. It's almost the same thing, so you should have
    an idea about how we could move forward.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with `WelcomeHeader.js` and then look at each of our files. If you
    were to start up your app right now, you'd see a blank white screen. We'll ignore
    that for now and just sketch our app with some basic static code so that we have
    some sort of a basis for when we begin styling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your file so that we can start adding some new elements. What can we observe
    from the design that we might need inside our component? Well, first of all, there''s
    a lot of **text**, but we also need a **profile picture** (that circle on the
    right-hand side of the component). Knowing this, we can now start importing the
    components needed for this, so go ahead and edit the second line where we''re
    importing the `View` component so that it looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Remember when we said we should group components if they're on the same line?
    This will make things easier when we begin styling as those components are on
    the same horizontal line.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, I''ve started by adding another `View` inside our main `View` component.
    After that, I''ll add the components that are sitting on the same line: our welcome
    *message* and our *profile picture*. Beneath this `View` component, we''ll add
    another `Text` component that will render our `Level`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Our static version of WelcomeHeader'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.5_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Our static version of WelcomeHeader
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B17074_02_epub_Final_SB.xhtml#_idTextAnchor045), *Basics of
    React Native*, we discussed how an `Image` needs a source to work. That's why
    we've used the `source` prop and passed a placeholder image link. It's easier
    to use placeholders as we don't need to waste time searching for images when our
    main purpose is to just code a static version for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move on and start coding our next component: `MostPlayedGame`. As we
    can see, here, we need the same things as we did in our previous component. So,
    let''s import everything and use it inside our component. Once you''ve done that,
    we will use our components to display all the information. Now, your code should
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Our static version of MostPlayedGame'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.6_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Our static version of MostPlayedGame
  prefs: []
  type: TYPE_NORMAL
- en: I've written `300` instead of `75` in our placeholder link because that changes
    the width of the image. But beside that, this was pretty easy to understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we''ll notice something really interesting. We have a list that
    follows the same pattern we''re used to. It''s a list of items, and each of those
    items renders a game we''ve played and how much we''ve been playing it. We could
    copy the same pattern we''ve used previously and it would work exceptionally well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – The PlayedGameItem component'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.7_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – The PlayedGameItem component
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m sure you remember how easy it was to pass `props` from a parent component
    to a child one. We shouldn''t be wasting any time if we already know how certain
    components should be coded. Now, it''s time to create the list, just like we did
    the last time, but now, we have another element inside of it, a `Text` component
    acting as a header for our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Our finished LastPlayedGameList component'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.8_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Our finished LastPlayedGameList component
  prefs: []
  type: TYPE_NORMAL
- en: We've moved pretty fast but that's because we've already been through this,
    so you should understand what's happening here. The problem with our code right
    now is that we're not sending any information to our items. We don't have that
    array that our `map` function needs to run. As you can see, the array comes from
    `props`, so our `LastPlayedGameList` component is expecting a **prop** called
    `games` with an array so that it can start rendering our list of games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move inside our **Home** screen component and set everything up. First,
    we''ll begin by importing all the components needed for our screen. We only need
    three out of these four components because one of them is `PlayedGameItem`, which
    is already being used and rendered by our `LastPlayedGameList` component. Importing
    them is easy, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After importing everything we need, it''s time to place the components in the
    order they''ll appear on the screen, inside our main `View` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Our Home component with the rest of the components inside it'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.9_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Our Home component with the rest of the components inside it
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, I've already passed the `games` array we need for our list,
    above our component. Let's create an array so that we have something to pass over
    to our `LastPlayedGameList`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, try it out for yourself – remember that we need an **array of objects**
    with the `game` and `time` keys. Once you''ve tried this for yourself, come back
    here and take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – The games object ready to be sent over to our list component'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.10_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – The games object ready to be sent over to our list component
  prefs: []
  type: TYPE_NORMAL
- en: That wasn't that hard, right? Here, we've coded our entire static screen. I'm
    pretty sure you should be able to see something popping up on the screen if you
    were to go back to your simulator. If there aren't any errors, then we should
    be able to move on. If you did encounter any errors on the screen or you still
    can't see anything, try to reread everything and make sure you haven't missed
    a word. I'd say 70% of errors are thrown out in the development stage because
    we're usually missing some characters in our variables (don't quote me on that,
    it's just personal experience). JavaScript, being a **loosely typed language**,
    means you don't have to specify what type of information will be stored in a variable,
    so we don't have to worry about defining variables incorrectly as much as a **Java**
    or **C#** developer has to but at the same time, a variable needs to have the
    same name wherever it's used.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's start making it pretty.
  prefs: []
  type: TYPE_NORMAL
- en: Let's style it!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start styling our app, we should understand how styling works in React
    Native. If you do have any prior experience with React, you'd know that styling
    is done via CSS. However, in React Native, we can't use CSS, so everything is
    done through the StyleSheet.
  prefs: []
  type: TYPE_NORMAL
- en: A StyleSheet was created by the React Native team. Here, you have similar rules
    to CSS but everything is done through JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: When passing these styling objects over to our components, we do so via a prop
    called `style`. Let's start by directly creating some styles for our **Home**
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways we can pass these objects over to our components – we could
    write them directly in our component or pass them via a new instance of the StyleSheet.
    Let''s write it in-line and change our background color for the screen. By going
    over to our `Home.js` file, we can add the `style` prop to the `our <View />`
    component, which wraps the rest of our components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Adding in-line styling to our component'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.11_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.11 – Adding in-line styling to our component
  prefs: []
  type: TYPE_NORMAL
- en: After adding this and saving the file, you should be able to see how the whole
    background color changes to that hex color. Now, our background color is the same
    as the design image's. This is pretty cool, right? It's also easy to read as this
    is essentially CSS but written a bit differently.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to write CSS, we''d be saying, for example, `background-color: ''red''`,
    but because everything is JavaScript in React Native, we can''t write variables
    or object keys with the dash between characters, so we''re using camel case.'
  prefs: []
  type: TYPE_NORMAL
- en: But there's an issue regarding the in-line styling; we could easily have thousands
    of styles and in that case, we're going to forget where some things are or how
    to change certain things in our app. That's why we should try and use a cleaner
    way of writing styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s delete our in-line styling and start by changing the import by adding
    `StyleSheet` next to `View`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have imported `StyleSheet`, we''re ready to create some styles.
    To do that, we will use the `.create()` method. This method will return an object
    with all the necessary styling information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – The styles object'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.12_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – The styles object
  prefs: []
  type: TYPE_NORMAL
- en: Right now, we can go back to our `<View />` component and inject the styling
    into our style prop by using `style={styles.container}`. Now, everything should
    look identical to how it looked when we had our inline styling. I'd recommend
    using the `.create()` method to add styles as it's much cleaner and easier to
    read.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you might have some questions regarding `flex`. I mean, you've seen it
    there, but you haven't realized what that property is doing yet. Those questions
    should extend to "Can I use all CSS rules inside React Native just by writing
    them in camel case?"
  prefs: []
  type: TYPE_NORMAL
- en: 'The thing is that CSS has two options for the layout: **Grid** and **flexbox**.
    You won''t be able to use Grid inside React Native, though. The whole layout is
    based on flexbox, so you''re able to use all the rules for flexbox.'
  prefs: []
  type: TYPE_NORMAL
- en: You can easily use almost all the rules from CSS in one form or another. If
    there's something that you feel doesn't work if you're writing it in camel case,
    then go ahead and Google up that rule. You'll easily find out how to use almost
    every rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `flex: 1` rule means "*let the* `<View />` *component take up as much space
    as it can*," so our **Home** screen is now the full width and height of our screen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add some new rules to our container object:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `paddingHorizontal: 32` and `paddingVertical: 64`. This will create some
    beautiful breathing space for us to continue styling our components.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's start with our `WelcomeHeader` component.
  prefs: []
  type: TYPE_NORMAL
- en: We'll begin by adding `StyleSheet` to our list of imports and then create the
    `styles` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we'll create the `upperSide`, `profilePicture`, `welcomeText`, and
    `levelText` styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We still can't see our picture, so let's give it a `width` and `height` of `55`.
    To make it round, we'll give it a `borderRadius` of `55/2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we'll add the `profilePicture` styles to our picture via the `style` prop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For our `welcomeText` and `levelText`, we'll need to specify a `fontSize` and
    a color, so let's go ahead and do that too. I'll use `38` for `welcomeText` and
    `18` for `levelText`. The color of our text is going to be set to `'#707070'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll continue adding rules until our `WelcomeHeader` component looks like
    it does in our design case. Do this on your own initially. Once you''ve done that,
    check out the following code and see if you got something close to what I have
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Our fully styled WelcomeHeader component'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.13_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – Our fully styled WelcomeHeader component
  prefs: []
  type: TYPE_NORMAL
- en: With that, we've managed to style our `WelcomeHeader` component. I used `justifyContent`
    to push the image and text in opposite directions and I also specified the `flexDirection`
    because, by default, all the components are rendered in a column fashion. However,
    we needed a row for this particular example.
  prefs: []
  type: TYPE_NORMAL
- en: We won't look at styling rules any further here as you might need to discover
    them by yourself through practice. So, my best advice right now would be to just
    go ahead and get creative. Get inspiration from the apps you're using daily and
    create some components that look similar to whatever you picked. Try to recreate
    as many components as you can and see which are visually appealing to you. After
    a while, this will become second nature.
  prefs: []
  type: TYPE_NORMAL
- en: Don't be upset if you can't remember a certain rule or you can't think of a
    way to style something in a certain way. The truth is, most programmers do forget
    and most of them look up really basic things on Google. The most important thing
    for you right now is not to get upset if something doesn't work but to see that
    as a challenge – a challenge that will 100% improve you as a developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll stop with the styling part because we''ve already done it for one component,
    and I feel like I could show you something that might change the way you view
    styling. This is something that we''ll start using from now on whenever we start
    creating apps: Galio.'
  prefs: []
  type: TYPE_NORMAL
- en: The superhero, Galio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We talked about Galio at the beginning of this book. We discussed why you'd
    want to use it and how exactly it brings value to your app. Now, it's time to
    use it and see what this UI library is all about.
  prefs: []
  type: TYPE_NORMAL
- en: Right now, we need to write a different styles object for each element we're
    using. Galio can help solve that problem by using `props`, which will help you
    style your code as you develop the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by installing Galio to our application. For that, we need to go
    to our Terminal and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will install the latest available version of Galio into our project. Now
    that we've installed Galio, let's import some components from it into our `WelcomeHeader`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to our `import` section and write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you've written this down and saved your file, then an error will appear.
    That's because we're importing `Text` from both `react-native` and `galio-framework`.
    Delete it from `react-native` and everything should work nicely again.
  prefs: []
  type: TYPE_NORMAL
- en: Oh well, nothing has changed. This is because the `Text` component from Galio
    is just extending your usual `Text` component. However, it comes packed with new
    props that will allow us to remove certain styles.
  prefs: []
  type: TYPE_NORMAL
- en: Let's delete the `style` prop on both of our `Text` elements and add `color="#707070"`
    instead. Now, our texts are small but they are the same color, which is cool.
    This means our props are working correctly. If we want to change the font size,
    we just have to add a prop. For our first `Text` element, we'll add `h3`, which
    stands for *Heading 3*, while for our second `Text` element, we'll add `p`, which
    stands for *paragraph*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we hit save, we'll see how our **Text** elements suddenly have different
    sizes and everything looks good. We can now remove the unused style objects; that
    is, `welcomeText` and `levelText`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on and see if we can remove even more. We should replace the `<View
    />` component that wraps our `Text` and `Image` elements with a `Block` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the following props to our newly implemented `Block` element:
    `row` and `space="between"`. Because of this, we can delete the `upperSide` object
    from our `styles` object. Now, everything looks the same but with much less code
    and is easier to notice.'
  prefs: []
  type: TYPE_NORMAL
- en: A `Block` component is the same as a `View` component but it is packed with
    a lot of props that can make our development process easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''ve replaced it, let''s replace the other `View` element as well. We
    will also remove it from the imports because we don''t need it anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Our WelcomeHeader component with newly implemented elements
    from Galio'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.14_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.14 – Our WelcomeHeader component with newly implemented elements from
    Galio
  prefs: []
  type: TYPE_NORMAL
- en: We now understand how Galio works and we'll how much it will help us moving
    forward with this app. So, let's go ahead and start modifying the rest of the
    components.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go into our `MostPlayedGame` component and start importing whatever we
    need from Galio. Again, we need to use `Block` and `Text`. After importing these
    two components, we can remove the `View` and `Text` imports from `react-native`
    as we don't need them anymore. Don't hit save yet as we need to replace the `View`
    element from inside our function with the `Block` element, as we did previously.
    Now, you can go ahead and save your file and you'll see no changes. That's perfect
    – we can now start styling this component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and add the following props to our `Text` component: `size={15}`
    and `color="#707070"`. This will change the font size of our text and also its
    color.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to import `StyleSheet` from `react-native` and use it to style
    `Image` so that it can be rendered on our screen. We'll create a new `styles`
    object from our `StyleSheet.create` method and we'll have the `image` object inside
    it.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we'll add a `container` object as well so that we can create some
    space between our components. This will be used in our `Block` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our new `styles` object should look something like this and have the following
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.15 – styles being used for our MostPlayedGame component'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.15_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.15 – styles being used for our MostPlayedGame component
  prefs: []
  type: TYPE_NORMAL
- en: After writing all this and linking our `styles.container` and `styles.image`
    objects to the proper elements (the `Block` element and the `Image` element),
    we can see that our screen is starting to look more and more like the design we
    saw at the beginning of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, I've added 4px of `paddingBottom` to our container style just because
    I felt like our `Text` element could have some breathing space. We could've also
    created a new style for `Text` and created some padding around it. There is no
    *right way* of writing styles, so long as its purpose, which is to display what
    you want to have displayed, is respected, so have fun and experiment as much as
    you like.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget that we're linking our styles to each element via the `style` prop.
  prefs: []
  type: TYPE_NORMAL
- en: Oh well – I guess things are getting easier with Galio and styling as we've
    already been through this much, so I'll take a break and let you style the rest
    of the components. Once you've done that, come back to this book and see if we've
    taken the same path by comparing your results with mine. Maybe yours will look
    even better than mine while also having cleaner code and if that's the case, you
    should treat yourself tonight.
  prefs: []
  type: TYPE_NORMAL
- en: Have you finished? Cool – let's move on! Let's jump to our `LastPlayedGameList`
    component. This should be straightforward, so let's import our `Block` and `Text`
    components from `galio-framework` while also completely removing our imports from
    `react-native`. That's right – we don't need those anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll then change the `View` element into a `Block` element. While we''re
    here, let''s add some in-line styling as well; that is, `style={{ marginTop: 32
    }}`. We''ve added that to create more space between our components.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go to our `Text` component and add the `color="#707070"` and `size={18}`
    props. And with that, we're done. We've created this component pretty quickly,
    right? Well, styling isn't that hard, especially when Galio is involved.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to our last component, `PlayedGameItem`. This one will be the
    same thing as the previous one. We'll remove the imports from `react-native` while
    adding the `Block` and `Text` imports from `galio-framework`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s replace the `View` element with our new `Block` element and add
    the `row`, `space="between"`, and `style={{ marginTop: 16}}` props to it. After
    that, we''ll add our `color="#707070"` and `size={14}` props to both our `Text`
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.16 – Our fresh new component after adding Galio and styles'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.16_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.16 – Our fresh new component after adding Galio and styles
  prefs: []
  type: TYPE_NORMAL
- en: And with that, we've finished. Save your file and take a look at your simulator.
    It looks just like what we wanted. Take a moment to add more character to the
    screen before moving on. Change the pictures to whatever images you'd like to
    see there – maybe add a profile picture and an image of your favorite game.
  prefs: []
  type: TYPE_NORMAL
- en: Remember how we used props to pass down information from a **parent component**
    to a **child component**? You can do the same thing and change the name in our
    `WelcomeHeader` or even make it more modular and send all the information from
    the **Home** screen to your components.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've finished styling our app, let's see how we can use it on our
    phones.
  prefs: []
  type: TYPE_NORMAL
- en: Let's install it on our phone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed why Expo is great in [*Chapter 1*](B17074_01_epub_Final_SB.xhtml#_idTextAnchor015),
    *Introduction to React Native and Galio*, and I think that the people from Expo
    did a great job at creating that framework. The thing with smartphones is that
    you can't install the app very easily on your phone.
  prefs: []
  type: TYPE_NORMAL
- en: Android is a lot more open compared to iOS and you'd probably be able to export
    an `.apk` file into your phone just to have it there. However, iOS doesn't let
    you do that.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, we could use **TestFlight**, which is an Apple service that allows
    you to test and share your app with other testers. But that doesn't help us because
    who would install TestFlight on their phone just to see your one-screen app, especially
    when you need an Apple Developer account?
  prefs: []
  type: TYPE_NORMAL
- en: Expo offers us a great little app called **Expo Go**. You can find it on both
    **App Store** and **Google Play Store**. Download it and log in or create a new
    account if you don't already have one. Here, you can create a build for your projects
    that can be tested at a later date. By doing this, we can show our friends our
    app without worrying too much about the other obstacles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Publishing a project on Expo is easy; we just have to follow some steps. Let''s
    close our development server by going into our Terminal and pressing *Ctrl* +
    *C*; then, type `expo signin` and press *Enter*. A message should appear, asking
    you for your username and password. If you still don''t have an account, jump
    over to Expo''s website and create one. After writing down your username and password,
    you should get the following response: **Success. You are now logged in as YOUR-USERNAME**.'
  prefs: []
  type: TYPE_NORMAL
- en: Right now, there are two options available for us to use if we want to publish
    our app with Expo. We'll talk about both of them in the following sections as
    errors might happen anytime. If you encounter an error, it's best to just try
    an alternative method.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing via Expo Developer Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you've logged in, let's open our server again by typing `expo start`
    into our Terminal and hitting *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The development server has started and a new tab containing Expo Developer
    Tools should have loaded in your browser. Remember that in [*Chapter 1*](B17074_01_epub_Final_SB.xhtml#_idTextAnchor015),
    *Introducing React Native and Galio*, we showed all the available options; let''s
    click on **Publish or republish project to the internet**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.17 – All the information is displayed when we click the Publish
    button'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_4.17_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.17 – All the information is displayed when we click the Publish button
  prefs: []
  type: TYPE_NORMAL
- en: Now, your app should be published, which means you can go inside your Expo Go
    app on your phone and open your app. See? Easy! Go ahead and show it off to your
    friends!
  prefs: []
  type: TYPE_NORMAL
- en: Publishing via the Expo CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, there may be a possibility that the first option doesn't work for you or
    you encountered an error. Sometimes, errors just happen and it might not even
    be your fault. In that case, stop our development server and write the `expo publish`
    command in the Terminal. A big message will appear, stating that it's going to
    start bundling your app and prepare it for publishing. After a while, you'll see
    that it has been successfully published to Expo.
  prefs: []
  type: TYPE_NORMAL
- en: Now, your app is ready to be seen by the world. Well, kind of. You could log
    into your Expo Go app and see your apps under the published projects category
    on your profile tab. The thing is... other people from the internet might see
    it on the Expo website and download it on their computer, but your friends won't
    be able to download the app on their mobile phones. That's because we haven't
    published the app on the official stores. It's not even on a store – it's saved
    in the cloud for other Expo users to see and, of course, for you to have access
    to it any time you want.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! We've finally created our first complete screen. I hope you're
    feeling good because there's more knowledge to come that will make development
    even easier and a lot more fun!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've experienced the process of creating a screen for our
    app. We took a design file, looked at it, and recreated the design with no functionality.
    This is a great step in anyone's career as this is your first time finishing an
    app idea. I think you should pat yourself on the back and realize that what you're
    doing here is not that easy. A lot of people would not even try to start learning
    about this, but you've done it. On top of that, you've even created a fully styled
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Once we'd learned about styling, Galio came in. We learned how building a layout
    with Galio makes it a lot easier for us. We're still not escaping the styling
    part entirely but we would never be able to not style something. After all, styling
    is fun. By using Galio, we've seen how easy it is to arrange elements and create
    fast prototypes.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, we looked at two different ways of publishing our
    app idea to Expo Go, a mobile app that helps us play with our project without
    actually pushing it to the store. That's cool and I bet your friends and family
    will be overjoyed with seeing how much progress you're making.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time for us to move on to the next chapter where we will discuss the
    benefits of using Galio.
  prefs: []
  type: TYPE_NORMAL
