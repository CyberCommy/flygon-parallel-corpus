- en: Responsive Versus Adaptive Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before jumping into designing our website, let's understand the difference between
    Responsive and Adaptive design and why it's necessary to understand it. The differences
    between Responsive and Adaptive design approaches are very important to know for
    web and app designers. Knowing these differences will empower you in planning
    and executing your designs with better vision and results.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the number of devices we have nowadays, it''s important to understand
    the needs and behavior of each device to really understand how to design it. Content
    is key, and it needs to flow between each device. See it as water cooling on each
    device, as Josh Clark says:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Content is like water. Content''s going to take many forms, flow into many
    different containers, many of which we haven''t even imagined yet."'
  prefs: []
  type: TYPE_NORMAL
- en: - (also inspired by Bruce Lee's famous quote)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45441c26-b926-4812-9ce0-5e4aabd2ce24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Author/Copyright holder: Stéphanie Walter'
  prefs: []
  type: TYPE_NORMAL
- en: Designers still get these mixed up and don't really see the boundaries between
    the two, especially young designers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Responsive design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adaptive design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which one is the best?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And take away from it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Responsive design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We talked about Responsive design very briefly in [Chapter 1](ee4e2df5-cf88-4fef-a6ff-0223349a4875.xhtml), *Evolution
    of Web Design;* if you remember, it describes a new way of designing for the desktop,
    and also for the mobile interface. It is basically proposing to use the same content,
    but a different layout for the design on each screen.
  prefs: []
  type: TYPE_NORMAL
- en: To be more precise, a Responsive website shows content based on the browser
    space. If you open a Responsive website on a desktop and change the size of the
    browser window, it will dynamically fit the window size and arrange itself.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of Responsive design was first coined by Ethan Marcotte when he
    wrote an introductory article about the notion of Responsive architectural design,
    whereby a room/space automatically adjusts to the number of people within it.
  prefs: []
  type: TYPE_NORMAL
- en: “Recently, an emergent discipline called “Responsive architecture” has begun
    asking how physical spaces can respond to the presence of people passing through
    them. Through a combination of embedded robotics and tensile materials, architects
    are experimenting with art installations and wall structures that bend, flex,
    and expand as crowds approach them. Motion sensors can be paired with climate
    control systems to adjust a room's temperature and ambient lighting as it fills
    with people. Companies have already produced “smart-glass technology” that can
    automatically become opaque when a room's occupants reach a certain density threshold,
    giving them an additional layer of privacy.”
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to have similar behavior in web design. As with Responsive architecture,
    web design should automatically adjust for users. The ultimate endpoint is to
    have a seamless experience through every device, and mainly on the client side
    with CSS (media queries).
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this easier to understand, look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8c73692-dc72-4636-b5f8-ed4f12add187.png)'
  prefs: []
  type: TYPE_IMG
- en: In this figure, you can see the behavior on each device. The desktop view has
    three columns of 33.3% of the total width. As we go down, we increase this value
    to 50% and an end to 100% on mobile view. The result, as we can see, is to have
    content that stretches to fit on every window size, so the content will still
    be readable on whatever device the user is using.
  prefs: []
  type: TYPE_NORMAL
- en: All the rules are made in the CSS file, so the HTML is not modified whatsoever.
    This is why CSS media queries are very powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of good Responsive design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f462fa09-6ac1-41c5-a543-ea2c96e17058.png)'
  prefs: []
  type: TYPE_IMG
- en: Responsive Layout on Stripe.com
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot from the *Stripe* website shows that the layout is
    completely fluid and is able to stretch and adapt to various screen resolutions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6e5521a-acec-4e48-bb9d-9b5a19cb97f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Designmodo.com
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot from the *Designmodo* website shows the very clean
    and clear design that is totally Responsive. You can see that the right sidebar
    disappeared on both tablet and mobile view.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d86082b-27e1-4ab2-bce8-14589cd36372.png)'
  prefs: []
  type: TYPE_IMG
- en: The *Bloomberg* website
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the *Bloomberg* website. The website is famous
    for its grid that responds well and lets the users focus on the content.
  prefs: []
  type: TYPE_NORMAL
- en: Adaptive design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Responsive design works to create a universal look and feel with one design
    that varies from device to device, an Adaptive design has a different approach.
    Adaptive design is designed to detect the user device and to redirect the user
    to a website designed especially for this resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'First introduced by Aaron Gustafson in 2011 in his book *Adaptive Web Design:
    Crafting Rich Experience with Progressive Enhancement*, an Adaptive design has
    the main difference of having a totally different website on specific resolutions.
    Resizing the browser has no impact on the design.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The best example of Adaptive design is [Amazon.com](http://Amazon.com), which
    displays an entirely new layout of the website on tablet and mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4027ec6-af1d-471b-b07d-2ac778769929.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Amazon Website in desktop, tablet and mobile.
  prefs: []
  type: TYPE_NORMAL
- en: If you try to resize your browser, you can see that the design doesn't change
    any lower than 999 px.
  prefs: []
  type: TYPE_NORMAL
- en: A tool that you can use to test the Responsiveness or Adaptiveness of a website
    is the inspect tool of Google Chrome. You can just right-click and inspect any
    element to open the Developer Console and click the little icon, as shown in the
    following screenshot. You can then select any devices from the drop-down on the
    left.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1bb4ffce-b9f1-4dda-aabd-2633b244e70e.png)'
  prefs: []
  type: TYPE_IMG
- en: Chrome Inspector with the Device toolbar
  prefs: []
  type: TYPE_NORMAL
- en: So remember that an Adaptive website will not be visible on the desktop, even
    if you resize it, but only on the device in question.
  prefs: []
  type: TYPE_NORMAL
- en: While Responsive design works on the client-side with CSS, an Adaptive design,
    on the other hand, works on the server-side. This is really the main difference
    between the two concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are a few other examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf3f2f5f-8631-4b64-8b80-ed2af8704392.png)'
  prefs: []
  type: TYPE_IMG
- en: Opentable.com
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot shows the *OpenTable* website, which has an Adaptive
    website for iPad view and iPhone view. It''s interesting to see how they completely
    change the layout on mobile view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9a45b3d-568c-4979-a996-2cf22ea42666.png)'
  prefs: []
  type: TYPE_IMG
- en: Adidas.com
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot from the *Adidas* website shows that *Adidas* has
    a completely different website on mobile view ([m.adidas.com](http://m.adidas.com)),
    with a more dynamic and user-friendly look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96434aca-1147-4ffc-a075-3f119b297a01.png)'
  prefs: []
  type: TYPE_IMG
- en: The last example will be Google.com
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the *Google* website. If you haven't noticed,
    [Google.com](http://Google.com) is an Adaptive website when it comes to iPad and
    iPhone, surprising, no?
  prefs: []
  type: TYPE_NORMAL
- en: So which one is the best?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Responsive design is definitely easier to design and is easier to implement.
    This is why it's by far the preferred method for creating and designing a website.
  prefs: []
  type: TYPE_NORMAL
- en: However, it will allow less control over the design of each screen. On simple
    websites, it looks pretty straightforward, but on heavy and complex websites,
    it tends to be a real headache—components that don't work on mobile (advertisements)
    or visual hierarchy can become non-user-friendly. Sometimes Responsive websites
    have an *unfinished* feel, and elements seem to be arranged in a way that just
    seems to fit the screen, but is not designed for the best user experience. However,
    there is another approach, which is **mobile first**. This basically starts your
    design on a mobile and builds up to the desktop. But it still doesn't resolve
    the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another advantage of mobile first is speed. Research shows that companies with
    an Adaptive website will often perform better on loading-speed tests than a Responsive
    website. This is because Responsive websites usually use the same elements/assets
    from desktop to mobile, instead of having a specific format and size for mobile
    websites. However, nowadays, this issue can easily be overcome using media queries,
    if the Responsive website is properly implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Metric (defaults)** | **Adaptive** | **Responsive** |'
  prefs: []
  type: TYPE_TB
- en: '| Response | 568 ms | 1,202 ms |'
  prefs: []
  type: TYPE_TB
- en: '| Document Complete | 1,536 ms | 4,086 ms |'
  prefs: []
  type: TYPE_TB
- en: '| Webpage Response | 2,889 ms | 4,860 ms |'
  prefs: []
  type: TYPE_TB
- en: '| Bytes Downloaded | 2,474,326 kB | 4,229,362 kB |'
  prefs: []
  type: TYPE_TB
- en: '| Objects Downloaded | 20 | 61 |'
  prefs: []
  type: TYPE_TB
- en: Test carried out by Catchpoint. UXPin ([https://www.uxpin.com/studio/blog/Responsive-vs-Adaptive-design-whats-best-choice-designers/](https://www.uxpin.com/studio/blog/responsive-vs-adaptive-design-whats-best-choice-designers/)).
  prefs: []
  type: TYPE_NORMAL
- en: There are also drawbacks to Adaptive design. Firstly, designing and implementing
    an Adaptive design is usually a lot more work than designing and implementing
    a Responsive design. Managing and maintaining two or more different websites requires
    more infrastructure and budget.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, while search engines are getting better at recognizing between `.com`
    and `m.com` sites, it's still wise to know that most search engines still don't
    rank identical content over multiple URLs equally.
  prefs: []
  type: TYPE_NORMAL
- en: The takeaway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Responsive design is the most popular way to design a website cross-devices.
    It is easier and simpler, but, it can be restrictive in terms of design.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Pros** | **Cons** |'
  prefs: []
  type: TYPE_TB
- en: '| Seamless and uniform | Less design control |'
  prefs: []
  type: TYPE_TB
- en: '| SEO friendly | Advertisements don''t work properly |'
  prefs: []
  type: TYPE_TB
- en: '| Easier to implement | Loading takes a bit longer |'
  prefs: []
  type: TYPE_TB
- en: Adaptive design will be chosen for big infrastructure or complex websites for
    better control over the design and a better user experience across devices.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Pros** | **Cons** |'
  prefs: []
  type: TYPE_TB
- en: '| Allows designers to build a better design and user experience | More work
    in terms of designing and implementing websites |'
  prefs: []
  type: TYPE_TB
- en: '| Designers can optimize advertisements on the device | Challenging for SEO
    purposes |'
  prefs: []
  type: TYPE_TB
- en: '| Loading speed is faster |  |'
  prefs: []
  type: TYPE_TB
- en: 'There is no good way or bad way to do things. Responsive and Adaptive design
    are just concepts that are good to understand. You can even use both of them in
    a single website, using Responsive design for PCs, laptops and tablets, and Adaptive
    design for mobiles. Just remember this: when it comes to designing websites, the
    user''s needs must always be considered.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw the difference between Responsive and Adaptive design.
    Knowing the differences will help you when implementing your website.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned the fundamentals of web design, it's time to go on
    the other side and build your own website. In the next chapter, we're going to
    learn the basics of HTML and how to build an HTML page from scratch. So, let's
    dive into coding our first website!
  prefs: []
  type: TYPE_NORMAL
