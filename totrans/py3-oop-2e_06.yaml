- en: Chapter 6. Python Data Structures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。Python数据结构
- en: 'In our examples so far, we''ve already seen many of the built-in Python data
    structures in action. You''ve probably also covered many of them in introductory
    books or tutorials. In this chapter, we''ll be discussing the object-oriented
    features of these data structures, when they should be used instead of a regular
    class, and when they should not be used. In particular, we''ll be covering:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在示例中看到了许多内置的Python数据结构。你可能也在入门书籍或教程中涵盖了许多这些内容。在本章中，我们将讨论这些数据结构的面向对象特性，以及它们应该在何时使用而不是使用常规类，以及何时不应该使用。特别是，我们将讨论：
- en: Tuples and named tuples
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组和命名元组
- en: Dictionaries
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典
- en: Lists and sets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表和集合
- en: How and why to extend built-in objects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何以及为什么扩展内置对象
- en: Three types of queues
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三种类型的队列
- en: Empty objects
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空对象
- en: 'Let''s start with the most basic Python built-in, one that we''ve seen many
    times already, the one that we''ve extended in every class we have created: the
    `object`. Technically, we can instantiate an `object` without writing a subclass:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最基本的Python内置对象开始，这是我们已经看到很多次的对象，我们在创建的每个类中都扩展了它：`object`。从技术上讲，我们可以实例化一个`object`而不编写子类。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Unfortunately, as you can see, it's not possible to set any attributes on an
    `object` that was instantiated directly. This isn't because the Python developers
    wanted to force us to write our own classes, or anything so sinister. They did
    this to save memory; a lot of memory. When Python allows an object to have arbitrary
    attributes, it takes a certain amount of system memory to keep track of what attributes
    each object has, for storing both the attribute name and its value. Even if no
    attributes are stored, memory is allocated for *potential* new attributes. Given
    the dozens, hundreds, or thousands of objects (every class extends object) in
    a typical Python program; this small amount of memory would quickly become a large
    amount of memory. So, Python disables arbitrary properties on `object`, and several
    other built-ins, by default.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，正如你所看到的，不可能在直接实例化的`object`上设置任何属性。这不是因为Python开发人员想要强迫我们编写自己的类，或者有什么邪恶的目的。他们这样做是为了节省内存；大量的内存。当Python允许对象具有任意属性时，它需要一定量的系统内存来跟踪每个对象具有的属性，用于存储属性名称和其值。即使没有存储属性，也会为*潜在*的新属性分配内存。在典型的Python程序中有数十、数百或数千个对象（每个类都扩展了object）；这小量的内存很快就会变成大量的内存。因此，Python默认禁用`object`和其他几个内置对象上的任意属性。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to restrict arbitrary properties on our own classes using **slots**.
    Slots are beyond the scope of this book, but you now have a search term if you
    are looking for more information. In normal use, there isn't much benefit to using
    slots, but if you're writing an object that will be duplicated thousands of times
    throughout the system, they can help save memory, just as they do for `object`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**slots**在我们自己的类上限制任意属性。Slots超出了本书的范围，但现在你有了一个搜索词，如果你想要更多信息。在正常使用中，使用slots并没有太多好处，但如果你正在编写一个将在整个系统中复制成千上万次的对象，它们可以帮助节省内存，就像对`object`一样。
- en: 'It is, however, trivial to create an empty object class of our own; we saw
    it in our earliest example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，创建一个空对象类非常简单；我们在最早的示例中看到了它：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And, as we''ve already seen, it''s possible to set attributes on such classes:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，正如我们已经看到的，可以在这样的类上设置属性：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we wanted to group properties together, we could store them in an empty object
    like this. But we are usually better off using other built-ins designed for storing
    data. It has been stressed throughout this book that classes and objects should
    only be used when you want to specify *both* data and behaviors. The main reason
    to write an empty class is to quickly block something out, knowing we'll come
    back later to add behavior. It is much easier to adapt behaviors to a class than
    it is to replace a data structure with an object and change all references to
    it. Therefore, it is important to decide from the outset if the data is just data,
    or if it is an object in disguise. Once that design decision is made, the rest
    of the design naturally falls into place.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要将属性分组在一起，我们可以将它们存储在一个空对象中。但是，通常最好使用其他专门用于存储数据的内置对象。本书始终强调，只有在想要指定*数据和行为*时才应该使用类和对象。创建一个空类的主要原因是为了快速地阻止某些东西，知道我们稍后会回来添加行为。将行为适应类要容易得多，而将数据结构替换为对象并更改所有引用则要困难得多。因此，重要的是从一开始就决定数据只是数据，还是伪装成对象。一旦做出了这个设计决定，其余的设计自然而然地就会落实。
- en: Tuples and named tuples
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组和命名元组
- en: Tuples are objects that can store a specific number of other objects in order.
    They are immutable, so we can't add, remove, or replace objects on the fly. This
    may seem like a massive restriction, but the truth is, if you need to modify a
    tuple, you're using the wrong data type (usually a list would be more suitable).
    The primary benefit of tuples' immutability is that we can use them as keys in
    dictionaries, and in other locations where an object requires a hash value.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是可以按顺序存储特定数量的其他对象的对象。它们是不可变的，因此我们无法在运行时添加、删除或替换对象。这可能看起来像是一个巨大的限制，但事实是，如果你需要修改一个元组，你正在使用错误的数据类型（通常列表更合适）。元组不可变的主要好处是我们可以将它们用作字典中的键，以及其他需要哈希值的对象的位置。
- en: Tuples are used to store data; behavior cannot be stored in a tuple. If we require
    behavior to manipulate a tuple, we have to pass the tuple into a function (or
    method on another object) that performs the action.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 元组用于存储数据；无法在元组中存储行为。如果我们需要行为来操作元组，我们必须将元组传递给执行该操作的函数（或另一个对象的方法）。
- en: Tuples should generally store values that are somehow different from each other.
    For example, we would not put three stock symbols in a tuple, but we might create
    a tuple of stock symbol, current price, high, and low for the day. The primary
    purpose of a tuple is to aggregate different pieces of data together into one
    container. Thus, a tuple can be the easiest tool to replace the "object with no
    data" idiom.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 元组通常应该存储一些在某种程度上不同的值。例如，我们不会在一个元组中放入三个股票符号，但我们可能会创建一个包含股票符号、当前价格、最高价和最低价的元组。元组的主要目的是将不同的数据片段聚合到一个容器中。因此，元组可能是最简单的工具，用来替换“没有数据的对象”习语。
- en: 'We can create a tuple by separating the values with a comma. Usually, tuples
    are wrapped in parentheses to make them easy to read and to separate them from
    other parts of an expression, but this is not always mandatory. The following
    two assignments are identical (they record a stock, the current price, the high,
    and the low for a rather profitable company):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过用逗号分隔值来创建一个元组。通常，元组用括号括起来，以使它们易于阅读并与表达式的其他部分分开，但这并不总是强制性的。以下两个赋值是相同的（它们记录了一家相当有利可图的公司的股票、当前价格、最高价和最低价）：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we''re grouping a tuple inside of some other object, such as a function
    call, list comprehension, or generator, the parentheses are required. Otherwise,
    it would be impossible for the interpreter to know whether it is a tuple or the
    next function parameter. For example, the following function accepts a tuple and
    a date, and returns a tuple of the date and the middle value between the stock''s
    high and low value:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将元组分组到其他对象中，比如函数调用、列表推导或生成器中，括号是必需的。否则，解释器将无法知道它是一个元组还是下一个函数参数。例如，以下函数接受一个元组和一个日期，并返回一个包含日期和股票最高价和最低价之间的中间值的元组：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The tuple is created directly inside the function call by separating the values
    with commas and enclosing the entire tuple in parenthesis. This tuple is then
    followed by a comma to separate it from the second argument.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是直接在函数调用中通过用逗号分隔值并将整个元组括在括号中创建的。然后，这个元组后面跟着一个逗号，以将它与第二个参数分开。
- en: This example also illustrates tuple unpacking. The first line inside the function
    unpacks the `stock` parameter into four different variables. The tuple has to
    be exactly the same length as the number of variables, or it will raise an exception.
    We can also see an example of tuple unpacking on the last line, where the tuple
    returned inside the function is unpacked into two values, `mid_value` and `date`.
    Granted, this is a strange thing to do, since we supplied the date to the function
    in the first place, but it gave us a chance to see unpacking at work.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子也说明了元组的解包。函数内的第一行将`stock`参数解包成四个不同的变量。元组的长度必须与变量的数量完全相同，否则会引发异常。我们还可以在最后一行看到元组解包的例子，其中函数内返回的元组被解包成两个值，`mid_value`和`date`。当然，这是一个奇怪的做法，因为我们首先向函数提供了日期，但这让我们有机会看到解包的工作原理。
- en: 'Unpacking is a very useful feature in Python. We can group variables together
    to make storing and passing them around simpler, but the moment we need to access
    all of them, we can unpack them into separate variables. Of course, sometimes
    we only need access to one of the variables in the tuple. We can use the same
    syntax that we use for other sequence types (lists and strings, for example) to
    access an individual value:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，解包是一个非常有用的功能。我们可以将变量组合在一起，使得存储和传递它们变得更简单，但是当我们需要访问它们所有时，我们可以将它们解包成单独的变量。当然，有时我们只需要访问元组中的一个变量。我们可以使用与其他序列类型（例如列表和字符串）相同的语法来访问单个值：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can even use slice notation to extract larger pieces of tuples:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用切片表示法来提取元组的较大部分：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These examples, while illustrating how flexible tuples can be, also demonstrate
    one of their major disadvantages: readability. How does someone reading this code
    know what is in the second position of a specific tuple? They can guess, from
    the name of the variable we assigned it to, that it is `high` of some sort, but
    if we had just accessed the tuple value in a calculation without assigning it,
    there would be no such indication. They would have to paw through the code to
    find where the tuple was declared before they could discover what it does.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些例子展示了元组的灵活性，但也展示了它们的一个主要缺点：可读性。阅读这段代码的人怎么知道特定元组的第二个位置是什么？他们可以猜测，从我们分配给它的变量名，它是某种“高”，但如果我们在计算中只是访问了元组的值而没有分配它，就没有这样的指示。他们必须在代码中搜索元组声明的位置，然后才能发现它的作用。
- en: Accessing tuple members directly is fine in some circumstances, but don't make
    a habit of it. Such so-called "magic numbers" (numbers that seem to come out of
    thin air with no apparent meaning within the code) are the source of many coding
    errors and lead to hours of frustrated debugging. Try to use tuples only when
    you know that all the values are going to be useful at once and it's normally
    going to be unpacked when it is accessed. If you have to access a member directly
    or using a slice and the purpose of that value is not immediately obvious, at
    least include a comment explaining where it came from.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 直接访问元组成员在某些情况下是可以的，但不要养成这样的习惯。这种所谓的“魔术数字”（似乎毫无意义地出现在代码中的数字）是许多编码错误的根源，并导致了数小时的沮丧调试。尽量只在你知道所有的值一次性都会有用，并且在访问时通常会被解包时使用元组。如果必须直接访问成员或使用切片，并且该值的目的不是立即明显的，至少要包含一个解释它来自哪里的注释。
- en: Named tuples
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名元组
- en: So, what do we do when we want to group values together, but know we're frequently
    going to need to access them individually? Well, we could use an empty object,
    as discussed in the previous section (but that is rarely useful unless we anticipate
    adding behavior later), or we could use a dictionary (most useful if we don't
    know exactly how many or which specific data will be stored), as we'll cover in
    the next section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当我们想要将值组合在一起，但知道我们经常需要单独访问它们时，我们该怎么办？嗯，我们可以使用空对象，如前一节中讨论的（但除非我们预期稍后添加行为，否则很少有用），或者我们可以使用字典（如果我们不知道将存储多少个或哪些特定数据，这是最有用的），我们将在下一节中介绍。
- en: If, however, we do not need to add behavior to the object, and we know in advance
    what attributes we need to store, we can use a named tuple. Named tuples are tuples
    with attitude. They are a great way to group read-only data together.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们不需要向对象添加行为，并且事先知道需要存储哪些属性，我们可以使用命名元组。命名元组是带有态度的元组。它们是将只读数据组合在一起的绝佳方式。
- en: 'Constructing a named tuple takes a bit more work than a normal tuple. First,
    we have to import `namedtuple`, as it is not in the namespace by default. Then,
    we describe the named tuple by giving it a name and outlining its attributes.
    This returns a class-like object that we can instantiate with the required values
    as many times as we want:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 构造命名元组比普通元组需要更多的工作。首先，我们必须导入`namedtuple`，因为它不是默认的命名空间中。然后，我们通过给它一个名称并概述其属性来描述命名元组。这将返回一个类似的对象，我们可以根据需要实例化多次：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `namedtuple` constructor accepts two arguments. The first is an identifier
    for the named tuple. The second is a string of space-separated attributes that
    the named tuple can have. The first attribute should be listed, followed by a
    space (or comma if you prefer), then the second attribute, then another space,
    and so on. The result is an object that can be called just like a normal class
    to instantiate other objects. The constructor must have exactly the right number
    of arguments that can be passed in as arguments or keyword arguments. As with
    normal objects, we can create as many instances of this "class" as we like, with
    different values for each.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`namedtuple`构造函数接受两个参数。第一个是命名元组的标识符。第二个是命名元组可以具有的以空格分隔的属性字符串。应该列出第一个属性，然后是一个空格（或者如果你喜欢，逗号），然后是第二个属性，然后是另一个空格，依此类推。结果是一个可以像普通类一样调用的对象，以实例化其他对象。构造函数必须具有可以作为参数或关键字参数传递的恰好正确数量的参数。与普通对象一样，我们可以创建任意数量的此“类”的实例，并为每个实例提供不同的值。'
- en: 'The resulting `namedtuple` can then be packed, unpacked, and otherwise treated
    like a normal tuple, but we can also access individual attributes on it as if
    it were an object:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，生成的`namedtuple`可以像普通元组一样打包、解包和以其他方式处理，但我们也可以像访问对象一样访问它的单个属性：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that creating named tuples is a two-step process. First, use `collections.namedtuple`
    to create a class, and then construct instances of that class.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，创建命名元组是一个两步过程。首先，使用`collections.namedtuple`创建一个类，然后构造该类的实例。
- en: 'Named tuples are perfect for many "data only" representations, but they are
    not ideal for all situations. Like tuples and strings, named tuples are immutable,
    so we cannot modify an attribute once it has been set. For example, the current
    value of my company''s stock has gone down since we started this discussion, but
    we can''t set the new value:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 命名元组非常适合许多“仅数据”表示，但并非适用于所有情况。与元组和字符串一样，命名元组是不可变的，因此一旦设置了属性，就无法修改属性。例如，自从我们开始讨论以来，我的公司股票的当前价值已经下跌，但我们无法设置新值：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If we need to be able to change stored data, a dictionary may be what we need
    instead.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要能够更改存储的数据，可能需要使用字典。
- en: Dictionaries
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: Dictionaries are incredibly useful containers that allow us to map objects directly
    to other objects. An empty object with attributes to it is a sort of dictionary;
    the names of the properties map to the property values. This is actually closer
    to the truth than it sounds; internally, objects normally represent attributes
    as a dictionary, where the values are properties or methods on the objects (see
    the `__dict__` attribute if you don't believe me). Even the attributes on a module
    are stored, internally, in a dictionary.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 字典是非常有用的容器，允许我们直接将对象映射到其他对象。具有属性的空对象是一种字典；属性的名称映射到属性值。这实际上比听起来更接近事实；在内部，对象通常将属性表示为字典，其中值是对象上的属性或方法（如果你不相信我，请查看`__dict__`属性）。甚至模块上的属性也是在字典中存储的。
- en: Dictionaries are extremely efficient at looking up a value, given a specific
    key object that maps to that value. They should always be used when you want to
    find one object based on some other object. The object that is being stored is
    called the **value**; the object that is being used as an index is called the
    **key**. We've already seen dictionary syntax in some of our previous examples.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在查找特定键对象映射到该值时非常高效。当您想要根据其他对象找到一个对象时，应该始终使用它们。被存储的对象称为**值**；用作索引的对象称为**键**。我们已经在一些先前的示例中看到了字典语法。
- en: Dictionaries can be created either using the `dict()` constructor or using the
    `{}` syntax shortcut. In practice, the latter format is almost always used. We
    can prepopulate a dictionary by separating the keys from the values using a colon,
    and separating the key value pairs using a comma.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 字典可以使用`dict()`构造函数或使用`{}`语法快捷方式创建。实际上，几乎总是使用后一种格式。我们可以通过使用冒号分隔键和值，并使用逗号分隔键值对来预填充字典。
- en: 'For example, in a stock application, we would most often want to look up prices
    by the stock symbol. We can create a dictionary that uses stock symbols as keys,
    and tuples of current, high, and low as values like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在股票应用程序中，我们最常常希望按股票符号查找价格。我们可以创建一个使用股票符号作为键，当前价格、最高价格和最低价格的元组作为值的字典，如下所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we''ve seen in previous examples, we can then look up values in the dictionary
    by requesting a key inside square brackets. If the key is not in the dictionary,
    it will raise an exception:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的例子中看到的，我们可以通过在方括号内请求一个键来查找字典中的值。如果键不在字典中，它会引发一个异常：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can, of course, catch the `KeyError` and handle it. But we have other options.
    Remember, dictionaries are objects, even if their primary purpose is to hold other
    objects. As such, they have several behaviors associated with them. One of the
    most useful of these methods is the `get` method; it accepts a key as the first
    parameter and an optional default value if the key doesn''t exist:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以捕获`KeyError`并处理它。但我们还有其他选择。记住，字典是对象，即使它们的主要目的是保存其他对象。因此，它们有几种与之相关的行为。其中最有用的方法之一是`get`方法；它接受一个键作为第一个参数，以及一个可选的默认值（如果键不存在）：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For even more control, we can use the `setdefault` method. If the key is in
    the dictionary, this method behaves just like `get`; it returns the value for
    that key. Otherwise, if the key is not in the dictionary, it will not only return
    the default value we supply in the method call (just like `get` does), it will
    also set the key to that same value. Another way to think of it is that `setdefault`
    sets a value in the dictionary only if that value has not previously been set.
    Then it returns the value in the dictionary, either the one that was already there,
    or the newly provided default value.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更多的控制，我们可以使用`setdefault`方法。如果键在字典中，这个方法的行为就像`get`一样；它返回该键的值。否则，如果键不在字典中，它不仅会返回我们在方法调用中提供的默认值（就像`get`一样），它还会将键设置为相同的值。另一种思考方式是，`setdefault`只有在该值以前没有被设置时才在字典中设置一个值。然后它返回字典中的值，无论是已经存在的值，还是新提供的默认值。
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `GOOG` stock was already in the dictionary, so when we tried to `setdefault`
    it to an invalid value, it just returned the value already in the dictionary.
    `BBRY` was not in the dictionary, so `setdefault` returned the default value and
    set the new value in the dictionary for us. We then check that the new stock is,
    indeed, in the dictionary.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`GOOG`股票已经在字典中，所以当我们尝试将其`setdefault`为一个无效值时，它只是返回了已经在字典中的值。`BBRY`不在字典中，所以`setdefault`返回了默认值，并为我们在字典中设置了新值。然后我们检查新的股票是否确实在字典中。'
- en: 'Three other very useful dictionary methods are `keys()`, `values()`, and `items()`.
    The first two return an iterator over all the keys and all the values in the dictionary.
    We can use these like lists or in `for` loops if we want to process all the keys
    or values. The `items()` method is probably the most useful; it returns an iterator
    over tuples of `(key, value)` pairs for every item in the dictionary. This works
    great with tuple unpacking in a `for` loop to loop over associated keys and values.
    This example does just that to print each stock in the dictionary with its current
    value:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另外三个非常有用的字典方法是`keys()`，`values()`和`items()`。前两个返回字典中所有键和所有值的迭代器。如果我们想要处理所有键或值，我们可以像列表一样使用它们，或者在`for`循环中使用它们。`items()`方法可能是最有用的；它返回一个元组的迭代器，其中包含字典中每个项目的`(key,
    value)`对。这与在`for`循环中使用元组解包很好地配合，以循环遍历相关的键和值。这个例子就是这样做的，以打印出字典中每个股票及其当前值：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Each key/value tuple is unpacked into two variables named `stock` and `values`
    (we could use any variable names we wanted, but these both seem appropriate) and
    then printed in a formatted string.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每个键/值元组都被解包成两个名为`stock`和`values`的变量（我们可以使用任何我们想要的变量名，但这两个似乎都合适），然后以格式化的字符串打印出来。
- en: Notice that the stocks do not show up in the same order in which they were inserted.
    Dictionaries, due to the efficient algorithm (known as hashing) that is used to
    make key lookup so fast, are inherently unsorted.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，股票并没有按照插入的顺序显示出来。由于用于使键查找如此快速的高效算法（称为哈希），字典本身是无序的。
- en: So, there are numerous ways to retrieve data from a dictionary once it has been
    instantiated; we can use square brackets as index syntax, the `get` method, the
    `setdefault` method, or iterate over the `items` method, among others.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一旦字典被实例化，就有许多种方法可以从中检索数据；我们可以使用方括号作为索引语法，`get`方法，`setdefault`方法，或者遍历`items`方法，等等。
- en: 'Finally, as you likely already know, we can set a value in a dictionary using
    the same indexing syntax we use to retrieve a value:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可能已经知道，我们可以使用与检索值相同的索引语法来在字典中设置一个值：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Google's price is lower today, so I've updated the tuple value in the dictionary.
    We can use this index syntax to set a value for any key, regardless of whether
    the key is in the dictionary. If it is in the dictionary, the old value will be
    replaced with the new one; otherwise, a new key/value pair will be created.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌的价格今天较低，所以我更新了字典中元组的值。我们可以使用这种索引语法为任何键设置一个值，而不管该键是否在字典中。如果它在字典中，旧值将被新值替换；否则，将创建一个新的键/值对。
- en: 'We''ve been using strings as dictionary keys, so far, but we aren''t limited
    to string keys. It is common to use strings as keys, especially when we''re storing
    data in a dictionary to gather it together (instead of using an object with named
    properties). But we can also use tuples, numbers, or even objects we''ve defined
    ourselves as dictionary keys. We can even use different types of keys in a single
    dictionary:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用字符串作为字典的键，但我们并不局限于字符串键。通常在存储数据以便将其聚集在一起时，使用字符串作为键是很常见的（而不是使用具有命名属性的对象）。但我们也可以使用元组、数字，甚至是我们自己定义的对象作为字典的键。我们甚至可以在单个字典中使用不同类型的键：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This code shows several different types of keys we can supply to a dictionary.
    It also shows one type of object that cannot be used. We've already used lists
    extensively, and we'll be seeing many more details of them in the next section.
    Because lists can change at any time (by adding or removing items, for example),
    they cannot hash to a specific value.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码展示了我们可以提供给字典的几种不同类型的键。它还展示了一种不能使用的对象类型。我们已经广泛使用了列表，并且在下一节中将看到更多关于它们的细节。因为列表可以随时更改（例如通过添加或删除项目），它们无法哈希到一个特定的值。
- en: Objects that are **hashable** basically have a defined algorithm that converts
    the object into a unique integer value for rapid lookup. This hash is what is
    actually used to look up values in a dictionary. For example, strings map to integers
    based on the characters in the string, while tuples combine hashes of the items
    inside the tuple. Any two objects that are somehow considered equal (like strings
    with the same characters or tuples with the same values) should have the same
    hash value, and the hash value for an object should never ever change. Lists,
    however, can have their contents changed, which would change their hash value
    (two lists should only be equal if their contents are the same). Because of this,
    they can't be used as dictionary keys. For the same reason, dictionaries cannot
    be used as keys into other dictionaries.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 具有**可哈希性**的对象基本上具有一个定义好的算法，将对象转换为唯一的整数值，以便快速查找。这个哈希值实际上是用来在字典中查找值的。例如，字符串根据字符串中的字符映射到整数，而元组则组合了元组内部项目的哈希值。任何两个被视为相等的对象（比如具有相同字符的字符串或具有相同值的元组）应该具有相同的哈希值，并且对象的哈希值永远不应该改变。然而，列表的内容可以改变，这会改变它们的哈希值（只有当列表的内容相同时，两个列表才应该相等）。因此，它们不能用作字典的键。出于同样的原因，字典也不能用作其他字典的键。
- en: In contrast, there are no limits on the types of objects that can be used as
    dictionary values. We can use a string key that maps to a list value, for example,
    or we can have a nested dictionary as a value in another dictionary.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，对于可以用作字典值的对象类型没有限制。例如，我们可以使用字符串键映射到列表值，或者我们可以在另一个字典中将嵌套字典作为值。
- en: Dictionary use cases
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典的用例
- en: Dictionaries are extremely versatile and have numerous uses. There are two major
    ways that dictionaries can be used. The first is dictionaries where all the keys
    represent different instances of similar objects; for example, our stock dictionary.
    This is an indexing system. We use the stock symbol as an index to the values.
    The values could even have been complicated self-defined objects that made buy
    and sell decisions or set a stop-loss, rather than our simple tuples.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 字典非常灵活，有很多用途。字典可以有两种主要用法。第一种是所有键表示类似对象的不同实例的字典；例如，我们的股票字典。这是一个索引系统。我们使用股票符号作为值的索引。这些值甚至可以是复杂的自定义对象，而不是我们简单的元组。
- en: The second design is dictionaries where each key represents some aspect of a
    single structure; in this case, we'd probably use a separate dictionary for each
    object, and they'd all have similar (though often not identical) sets of keys.
    This latter situation can often also be solved with named tuples. These should
    typically be used when we know exactly what attributes the data must store, and
    we know that all pieces of the data must be supplied at once (when the item is
    constructed). But if we need to create or change dictionary keys over time or
    we don't know exactly what the keys might be, a dictionary is more suitable.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种设计是每个键表示单个结构的某个方面的字典；在这种情况下，我们可能会为每个对象使用一个单独的字典，并且它们都具有相似（尽管通常不完全相同）的键集。这种情况通常也可以用命名元组解决。当我们确切地知道数据必须存储的属性，并且知道所有数据必须一次性提供（在构造项目时）时，应该使用这些。但是，如果我们需要随时间创建或更改字典键，或者我们不知道键可能是什么，那么字典更合适。
- en: Using defaultdict
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用defaultdict
- en: 'We''ve seen how to use `setdefault` to set a default value if a key doesn''t
    exist, but this can get a bit monotonous if we need to set a default value every
    time we look up a value. For example, if we''re writing code that counts the number
    of times a letter occurs in a given sentence, we could do this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何使用`setdefault`来设置默认值，如果键不存在，但是如果我们需要每次查找值时都设置默认值，这可能会有点单调。例如，如果我们正在编写代码来计算给定句子中字母出现的次数，我们可以这样做：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Every time we access the dictionary, we need to check that it has a value already,
    and if not, set it to zero. When something like this needs to be done every time
    an empty key is requested, we can use a different version of the dictionary, called
    `defaultdict`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每次访问字典时，我们需要检查它是否已经有一个值，如果没有，将其设置为零。当每次请求一个空键时需要做这样的事情时，我们可以使用字典的另一个版本，称为`defaultdict`：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This code looks like it couldn't possibly work. The `defaultdict` accepts a
    function in its constructor. Whenever a key is accessed that is not already in
    the dictionary, it calls that function, with no parameters, to create a default
    value.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码看起来似乎不可能工作。`defaultdict`在其构造函数中接受一个函数。每当访问一个不在字典中的键时，它调用该函数，不带任何参数，以创建一个默认值。
- en: In this case, the function it calls is `int`, which is the constructor for an
    integer object. Normally, integers are created simply by typing an integer number
    into our code, and if we do create one using the `int` constructor, we pass it
    the item we want to create (for example, to convert a string of digits into an
    integer). But if we call `int` without any arguments, it returns, conveniently,
    the number zero. In this code, if the letter doesn't exist in the `defaultdict`,
    the number zero is returned when we access it. Then we add one to this number
    to indicate we've found an instance of that letter, and the next time we find
    one, that number will be returned and we can increment the value again.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它调用的函数是`int`，这是整数对象的构造函数。通常，整数是通过在代码中键入整数来创建的，如果我们使用`int`构造函数创建一个整数，我们将传递要创建的项目（例如，将数字字符串转换为整数）。但是，如果我们在没有任何参数的情况下调用`int`，它会方便地返回数字零。在这段代码中，如果字母不存在于`defaultdict`中，当我们访问它时将返回数字零。然后我们将这个数字加一，以表示我们找到了该字母的一个实例，下次再找到一个实例时，将返回该数字，然后我们可以再次递增该值。
- en: The `defaultdict` is useful for creating dictionaries of containers. If we want
    to create a dictionary of stock prices for the past 30 days, we could use a stock
    symbol as the key and store the prices in `list`; the first time we access the
    stock price, we would want it to create an empty list. Simply pass `list` into
    the `defaultdict`, and it will be called every time an empty key is accessed.
    We can do similar things with sets or even empty dictionaries if we want to associate
    one with a key.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`defaultdict`对于创建容器字典非常有用。如果我们想要创建一个过去30天股票价格的字典，我们可以使用股票符号作为键，并将价格存储在`list`中；第一次访问股票价格时，我们希望它创建一个空列表。只需将`list`传递给`defaultdict`，它将在每次访问空键时被调用。如果我们想要将一个集合或者一个空字典与一个键关联起来，我们也可以做类似的事情。'
- en: 'Of course, we can also write our own functions and pass them into the `defaultdict`.
    Suppose we want to create a `defaultdict` where each new element contains a tuple
    of the number of items inserted into the dictionary at that time and an empty
    list to hold other things. Nobody knows why we would want to create such an object,
    but let''s have a look:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们也可以编写自己的函数并将它们传递给`defaultdict`。假设我们想创建一个`defaultdict`，其中每个新元素都包含一个元组，该元组包含了在该时间插入字典中的项目数和一个空列表来保存其他东西。没有人知道为什么我们要创建这样一个对象，但让我们来看一下：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When we run this code, we can access empty keys and insert into the list all
    in one statement:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这段代码时，我们可以在一个语句中访问空键并插入列表：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When we print `dict` at the end, we see that the counter really was working.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在最后打印`dict`时，我们看到计数器确实在工作。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example, while succinctly demonstrating how to create our own function
    for `defaultdict`, is not actually very good code; using a global variable means
    that if we created four different `defaultdict` segments that each used `tuple_counter`,
    it would count the number of entries in all dictionaries, rather than having a
    different count for each one. It would be better to create a class and pass a
    method on that class to `defaultdict`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子虽然简洁地演示了如何为`defaultdict`创建自己的函数，但实际上并不是很好的代码；使用全局变量意味着如果我们创建了四个不同的`defaultdict`段，每个段都使用了`tuple_counter`，它将计算所有字典中的条目数，而不是为每个字典单独计数。最好创建一个类，并将该类的方法传递给`defaultdict`。
- en: Counter
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计数器
- en: 'You''d think that you couldn''t get much simpler than `defaultdict(int)`, but
    the "I want to count specific instances in an iterable" use case is common enough
    that the Python developers created a specific class for it. The previous code
    that counts characters in a string can easily be calculated in a single line:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会认为`defaultdict(int)`比这更简单，但“我想要计算可迭代对象中特定实例的数量”这种用例是足够常见，以至于Python开发人员为此创建了一个特定的类。在一个单行中很容易计算以前的代码中字符串中的字符数量：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `Counter` object behaves like a beefed up dictionary where the keys are
    the items being counted and the values are the number of such items. One of the
    most useful functions is the `most_common()` method. It returns a list of (key,
    count) tuples ordered by the count. You can optionally pass an integer argument
    into `most_common()` to request only the top most common elements. For example,
    you could write a simple polling application as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`Counter`对象的行为类似于一个强化的字典，其中键是被计数的项目，值是这些项目的数量。其中最有用的函数之一是`most_common()`方法。它返回一个按计数排序的（键，计数）元组列表。您还可以选择将整数参数传递给`most_common()`，以请求仅返回最常见的元素。例如，您可以编写一个简单的投票应用程序如下：'
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Presumably, you'd get the responses from a database or by using a complicated
    vision algorithm to count the kids who raised their hands. Here, we hardcode it
    so that we can test the `most_common` method. It returns a list that has only
    one element (because we requested one element in the parameter). This element
    stores the name of the top choice at position zero, hence the double `[0][0]`
    at the end of the call. I think they look like a surprised face, don't you? Your
    computer is probably amazed it can count data so easily. It's ancestor, Hollerith's
    Tabulating Machine for the 1890 US census, must be so jealous!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 据推测，您可以从数据库中获取响应，或者使用复杂的视觉算法来计算举手的孩子。在这里，我们将其硬编码，以便我们可以测试`most_common`方法。它返回一个只有一个元素的列表（因为我们在参数中请求了一个元素）。这个元素在位置零存储了最受欢迎的选择的名称，因此在调用结束时有两个`[0][0]`。我觉得它们看起来像是一个惊讶的脸，你觉得呢？你的计算机可能对它能够如此轻松地计数数据感到惊讶。它的祖先，霍勒里斯的1890年美国人口普查用的整理机，一定会非常嫉妒！
- en: Lists
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: Lists are the least object-oriented of Python's data structures. While lists
    are, themselves, objects, there is a lot of syntax in Python to make using them
    as painless as possible. Unlike many other object-oriented languages, lists in
    Python are simply available. We don't need to import them and rarely need to call
    methods on them. We can loop over a list without explicitly requesting an iterator
    object, and we can construct a list (as with a dictionary) with custom syntax.
    Further, list comprehensions and generator expressions turn them into a veritable
    Swiss-army knife of computing functionality.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是Python数据结构中最不面向对象的。虽然列表本身是对象，但在Python中有很多语法可以尽可能地减少它们的使用痛苦。与许多其他面向对象的语言不同，Python中的列表是直接可用的。我们不需要导入它们，也很少需要调用它们的方法。我们可以在不明确请求迭代器对象的情况下循环遍历列表，并且可以使用自定义语法构造列表（与字典一样）。此外，列表推导和生成器表达式将它们转变为计算功能的多功能工具。
- en: We won't go into too much detail of the syntax; you've seen it in introductory
    tutorials across the Web and in previous examples in this book. You can't code
    Python very long without learning how to use lists! Instead, we'll be covering
    when lists should be used, and their nature as objects. If you don't know how
    to create or append to a list, how to retrieve items from a list, or what "slice
    notation" is, I direct you to the official Python tutorial, post-haste. It can
    be found online at [http://docs.python.org/3/tutorial/](http://docs.python.org/3/tutorial/).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会过多介绍语法；你在网络上的入门教程和本书中的先前示例中已经见过它。你不能长时间编写Python代码而不学会如何使用列表！相反，我们将介绍何时应该使用列表以及它们作为对象的性质。如果你不知道如何创建或附加到列表，如何从列表中检索项目，或者什么是“切片表示法”，我建议你立即查看官方Python教程。它可以在[http://docs.python.org/3/tutorial/](http://docs.python.org/3/tutorial/)上找到。
- en: In Python, lists should normally be used when we want to store several instances
    of the "same" type of object; lists of strings or lists of numbers; most often,
    lists of objects we've defined ourselves. Lists should always be used when we
    want to store items in some kind of order. Often, this is the order in which they
    were inserted, but they can also be sorted by some criteria.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，当我们想要存储“相同”类型的对象的多个实例时，通常应该使用列表；字符串列表或数字列表；最常见的是我们自己定义的对象列表。当我们想要按某种顺序存储项目时，应该始终使用列表。通常，这是它们被插入的顺序，但它们也可以按某些标准排序。
- en: 'As we saw in the case study from the previous chapter, lists are also very
    useful when we need to modify the contents: insert to or delete from an arbitrary
    location of the list, or update a value within the list.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章的案例研究中看到的，当我们需要修改内容时，列表也非常有用：在列表的任意位置插入或删除，或者更新列表中的值。
- en: Like dictionaries, Python lists use an extremely efficient and well-tuned internal
    data structure so we can worry about what we're storing, rather than how we're
    storing it. Many object-oriented languages provide different data structures for
    queues, stacks, linked lists, and array-based lists. Python does provide special
    instances of some of these classes, if optimizing access to huge sets of data
    is required. Normally, however, the list data structure can serve all these purposes
    at once, and the coder has complete control over how they access it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与字典一样，Python列表使用非常高效和良好调整的内部数据结构，因此我们可以关注我们存储的内容，而不是我们如何存储它。许多面向对象的语言为队列、栈、链表和基于数组的列表提供了不同的数据结构。如果需要优化对大量数据的访问，Python确实提供了这些类的特殊实例。然而，通常情况下，列表数据结构可以同时满足所有这些目的，并且编码人员可以完全控制他们如何访问它。
- en: Don't use lists for collecting different attributes of individual items. We
    do not want, for example, a list of the properties a particular shape has. Tuples,
    named tuples, dictionaries, and objects would all be more suitable for this purpose.
    In some languages, they might create a list in which each alternate item is a
    different type; for example, they might write `['a', 1, 'b', 3]` for our letter
    frequency list. They'd have to use a strange loop that accesses two elements in
    the list at once or a modulus operator to determine which position was being accessed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用列表来收集单个项目的不同属性。例如，我们不希望一个特定形状的属性列表。元组、命名元组、字典和对象都更适合这个目的。在某些语言中，它们可能创建一个列表，其中每个交替项是不同的类型；例如，他们可能为我们的字母频率列表写`['a',
    1, 'b', 3]`。他们必须使用一个奇怪的循环，一次访问两个元素，或者使用模运算符来确定正在访问的位置。
- en: 'Don''t do this in Python. We can group related items together using a dictionary,
    as we did in the previous section (if sort order doesn''t matter), or using a
    list of tuples. Here''s a rather convoluted example that demonstrates how we could
    do the frequency example using a list. It is much more complicated than the dictionary
    examples, and illustrates the effect choosing the right (or wrong) data structure
    can have on the readability of our code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中不要这样做。我们可以使用字典将相关项目分组在一起，就像我们在上一节中所做的那样（如果排序顺序不重要），或者使用元组列表。下面是一个相当复杂的示例，演示了我们如何使用列表来进行频率示例。它比字典示例复杂得多，并且说明了选择正确（或错误）的数据结构对我们代码的可读性产生的影响。
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This code starts with a list of possible characters. The `string.ascii_letters`
    attribute provides a string of all the letters, lowercase and uppercase, in order.
    We convert this to a list, and then use list concatenation (the plus operator
    causes two lists to be merged into one) to add one more character, the space.
    These are the available characters in our frequency list (the code would break
    if we tried to add a letter that wasn't in the list, but an exception handler
    could solve this).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码以可能的字符列表开始。`string.ascii_letters`属性提供了一个按顺序排列的所有字母（大写和小写）的字符串。我们将其转换为列表，然后使用列表连接（加号运算符将两个列表合并为一个）添加一个额外的字符，即空格。这些是我们频率列表中可用的字符（如果我们尝试添加不在列表中的字母，代码将会出错，但可以使用异常处理程序来解决这个问题）。
- en: The first line inside the function uses a list comprehension to turn the `CHARACTERS`
    list into a list of tuples. List comprehensions are an important, non-object-oriented
    tool in Python; we'll be covering them in detail in the next chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 函数内的第一行使用列表推导将`CHARACTERS`列表转换为元组列表。列表推导是Python中一个重要的非面向对象的工具；我们将在下一章详细介绍它们。
- en: Then we loop over each of the characters in the sentence. We first look up the
    index of the character in the `CHARACTERS` list, which we know has the same index
    in our frequencies list, since we just created the second list from the first.
    We then update that index in the frequencies list by creating a new tuple, discarding
    the original one. Aside from the garbage collection and memory waste concerns,
    this is rather difficult to read!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们循环遍历句子中的每个字符。我们首先查找`CHARACTERS`列表中字符的索引，我们知道它在我们的频率列表中具有相同的索引，因为我们刚刚从第一个列表创建了第二个列表。然后我们通过创建一个新元组来更新频率列表中的索引，丢弃原始元组。除了垃圾收集和内存浪费的担忧外，这是相当难以阅读的！
- en: 'Like dictionaries, lists are objects too, and they have several methods that
    can be invoked upon them. Here are some common ones:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 像字典一样，列表也是对象，并且有几种可以在它们上调用的方法。以下是一些常见的方法：
- en: The `append(element)` method adds an element to the end of the list
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append(element)`方法将一个元素添加到列表的末尾'
- en: The `insert(index, element)` method inserts an item at a specific position
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert(index, element)`方法在特定位置插入一个项目'
- en: The `count(element)` method tells us how many times an element appears in the
    list
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count(element)`方法告诉我们一个元素在列表中出现了多少次'
- en: The `index()`method tells us the index of an item in the list, raising an exception
    if it can't find it
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index()`方法告诉我们列表中项目的索引，如果找不到它会引发异常'
- en: The `find()`method does the same thing, but returns `-1` instead of raising
    an exception for missing items
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find()`方法也是做同样的事情，但是找不到项目时返回`-1`而不是引发异常'
- en: The `reverse()` method does exactly what it says—turns the list around
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reverse()`方法确实做了它所说的事情——将列表倒转过来'
- en: The `sort()` method has some rather intricate object-oriented behaviors, which
    we'll cover now
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort()`方法具有一些相当复杂的面向对象的行为，我们现在来介绍一下'
- en: Sorting lists
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序列表
- en: Without any parameters, `sort` will generally do the expected thing. If it's
    a list of strings, it will place them in alphabetical order. This operation is
    case sensitive, so all capital letters will be sorted before lowercase letters,
    that is `Z` comes before `a`. If it is a list of numbers, they will be sorted
    in numerical order. If a list of tuples is provided, the list is sorted by the
    first element in each tuple. If a mixture containing unsortable items is supplied,
    the sort will raise a `TypeError` exception.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何参数时，`sort`通常会做预期的事情。如果是字符串列表，它会按字母顺序排列。这个操作是区分大小写的，所以所有大写字母会排在小写字母之前，即`Z`排在`a`之前。如果是数字列表，它们将按数字顺序排序。如果提供了一个包含不可排序项目的混合列表，排序将引发`TypeError`异常。
- en: 'If we want to place objects we define ourselves into a list and make those
    objects sortable, we have to do a bit more work. The special method `__lt__`,
    which stands for "less than", should be defined on the class to make instances
    of that class comparable. The `sort` method on list will access this method on
    each object to determine where it goes in the list. This method should return
    `True` if our class is somehow less than the passed parameter, and `False` otherwise.
    Here''s a rather silly class that can be sorted based on either a string or a
    number:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想把自己定义的对象放入列表并使这些对象可排序，我们需要做更多的工作。类上应该定义特殊方法`__lt__`，它代表“小于”，以使该类的实例可比较。列表上的`sort`方法将访问每个对象上的这个方法来确定它在列表中的位置。如果我们的类在某种程度上小于传递的参数，则该方法应返回`True`，否则返回`False`。下面是一个相当愚蠢的类，它可以根据字符串或数字进行排序：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `__repr__` method makes it easy to see the two values when we print a list.
    The `__lt__` method''s implementation compares the object to another instance
    of the same class (or any duck typed object that has `string`, `number`, and `sort_num`
    attributes; it will fail if those attributes are missing). The following output
    illustrates this class in action, when it comes to sorting:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`__repr__`方法使我们在打印列表时很容易看到这两个值。`__lt__`方法的实现将对象与相同类的另一个实例（或具有`string`、`number`和`sort_num`属性的任何鸭子类型对象；如果这些属性缺失，它将失败）进行比较。以下输出展示了这个类在排序时的工作原理：'
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The first time we call `sort`, it sorts by numbers because `sort_num` is `True`
    on all the objects being compared. The second time, it sorts by letters. The `__lt__`
    method is the only one we need to implement to enable sorting. Technically, however,
    if it is implemented, the class should normally also implement the similar `__gt__`,
    `__eq__`, `__ne__`, `__ge__`, and `__le__` methods so that all of the `<`, `>`,
    `==`, `!=`, `>=`, and `<=` operators also work properly. You can get this for
    free by implementing `__lt__` and `__eq__`, and then applying the `@total_ordering`
    class decorator to supply the rest:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用`sort`时，它按数字排序，因为所有被比较的对象上的`sort_num`都是`True`。第二次，它按字母排序。我们只需要实现`__lt__`方法来启用排序。然而，从技术上讲，如果实现了它，类通常还应该实现类似的`__gt__`、`__eq__`、`__ne__`、`__ge__`和`__le__`方法，以便所有的`<`、`>`、`==`、`!=`、`>=`和`<=`操作符也能正常工作。通过实现`__lt__`和`__eq__`，然后应用`@total_ordering`类装饰器来提供其余的方法，你可以免费获得这些方法：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This is useful if we want to be able to use operators on our objects. However,
    if all we want to do is customize our sort orders, even this is overkill. For
    such a use case, the `sort` method can take an optional `key` argument. This argument
    is a function that can translate each object in a list into an object that can
    somehow be compared. For example, we can use `str.lower` as the key argument to
    perform a case-insensitive sort on a list of strings:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要能够在我们的对象上使用运算符，这是很有用的。然而，如果我们只想自定义我们的排序顺序，即使这样也是过度的。对于这样的用例，`sort`方法可以接受一个可选的`key`参数。这个参数是一个函数，可以将列表中的每个对象转换为某种可比较的对象。例如，我们可以使用`str.lower`作为键参数，在字符串列表上执行不区分大小写的排序：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Remember, even though `lower` is a method on string objects, it is also a function
    that can accept a single argument, `self`. In other words, `str.lower(item)` is
    equivalent to `item.lower()`. When we pass this function as a key, it performs
    the comparison on lowercase values instead of doing the default case-sensitive
    comparison.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，即使`lower`是字符串对象上的一个方法，它也是一个可以接受单个参数`self`的函数。换句话说，`str.lower(item)`等同于`item.lower()`。当我们将这个函数作为键传递时，它会对小写值进行比较，而不是进行默认的区分大小写比较。
- en: 'There are a few sort key operations that are so common that the Python team
    has supplied them so you don''t have to write them yourself. For example, it is
    often common to sort a list of tuples by something other than the first item in
    the list. The `operator.itemgetter` method can be used as a key to do this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些排序键操作是如此常见，以至于Python团队已经提供了它们，这样你就不必自己编写了。例如，通常常见的是按列表中的第一个项目之外的其他内容对元组列表进行排序。`operator.itemgetter`方法可以用作键来实现这一点：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `itemgetter` function is the most commonly used one (it works if the objects
    are dictionaries, too), but you will sometimes find use for `attrgetter` and `methodcaller`,
    which return attributes on an object and the results of method calls on objects
    for the same purpose. See the `operator` module documentation for more information.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Sets
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lists are extremely versatile tools that suit most container object applications.
    But they are not useful when we want to ensure objects in the list are unique.
    For example, a song library may contain many songs by the same artist. If we want
    to sort through the library and create a list of all the artists, we would have
    to check the list to see if we've added the artist already, before we add them
    again.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: This is where sets come in. Sets come from mathematics, where they represent
    an unordered group of (usually) unique numbers. We can add a number to a set five
    times, but it will show up in the set only once.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, sets can hold any hashable object, not just numbers. Hashable objects
    are the same objects that can be used as keys in dictionaries; so again, lists
    and dictionaries are out. Like mathematical sets, they can store only one copy
    of each object. So if we''re trying to create a list of song artists, we can create
    a set of string names and simply add them to the set. This example starts with
    a list of (song, artist) tuples and creates a set of the artists:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'There is no built-in syntax for an empty set as there is for lists and dictionaries;
    we create a set using the `set()` constructor. However, we can use the curly braces
    (borrowed from dictionary syntax) to create a set, so long as the set contains
    values. If we use colons to separate pairs of values, it''s a dictionary, as in
    `{''key'': ''value'', ''key2'': ''value2''}`. If we just separate values with
    commas, it''s a set, as in `{''value'', ''value2''}`. Items can be added individually
    to the set using its `add` method. If we run this script, we see that the set
    works as advertised:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If you''re paying attention to the output, you''ll notice that the items are
    not printed in the order they were added to the sets. Sets, like dictionaries,
    are unordered. They both use an underlying hash-based data structure for efficiency.
    Because they are unordered, sets cannot have items looked up by index. The primary
    purpose of a set is to divide the world into two groups: "things that are in the
    set", and, "things that are not in the set". It is easy to check whether an item
    is in the set or to loop over the items in a set, but if we want to sort or order
    them, we''ll have to convert the set to a list. This output shows all three of
    these activities:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: While the primary *feature* of a set is uniqueness, that is not its primary
    *purpose*. Sets are most useful when two or more of them are used in combination.
    Most of the methods on the set type operate on other sets, allowing us to efficiently
    combine or compare the items in two or more sets. These methods have strange names,
    since they use the same terminology used in mathematics. We'll start with three
    methods that return the same result, regardless of which is the calling set and
    which is the called set.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: The `union` method is the most common and easiest to understand. It takes a
    second set as a parameter and returns a new set that contains all elements that
    are in *either* of the two sets; if an element is in both original sets, it will,
    of course, only show up once in the new set. Union is like a logical `or` operation,
    indeed, the `|` operator can be used on two sets to perform the union operation,
    if you don't like calling methods.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, the intersection method accepts a second set and returns a new set
    that contains only those elements that are in *both* sets. It is like a logical
    `and` operation, and can also be referenced using the `&` operator.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the `symmetric_difference` method tells us what''s left; it is the
    set of objects that are in one set or the other, but not both. The following example
    illustrates these methods by comparing some artists from my song library to those
    in my sister''s:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If we run this code, we see that these three methods do what the print statements
    suggest they will do:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: These methods all return the same result, regardless of which set calls the
    other. We can say `my_artists.union(auburns_artists)` or `auburns_artists.union(my_artists)`
    and get the same result. There are also methods that return different results
    depending on who is the caller and who is the argument.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: These methods include `issubset` and `issuperset`, which are the inverse of
    each other. Both return a `bool`. The `issubset` method returns `True`, if all
    of the items in the calling set are also in the set passed as an argument. The
    `issuperset` method returns `True` if all of the items in the argument are also
    in the calling set. Thus `s.issubset(t)` and `t.issuperset(s)` are identical.
    They will both return `True` if `t` contains all the elements in `s`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the `difference` method returns all the elements that are in the calling
    set, but not in the set passed as an argument; this is like half a `symmetric_difference`.
    The `difference` method can also be represented by the `-` operator. The following
    code illustrates these methods in action:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This code simply prints out the response of each method when called from one
    set on the other. Running it gives us the following output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `difference` method, in the second case, returns an empty set, since there
    are no items in `bands` that are not in `my_artists`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: The `union`, `intersection`, and `difference` methods can all take multiple
    sets as arguments; they will return, as we might expect, the set that is created
    when the operation is called on all the parameters.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: So the methods on sets clearly suggest that sets are meant to operate on other
    sets, and that they are not just containers. If we have data coming in from two
    different sources and need to quickly combine them in some way, to determine where
    the data overlaps or is different, we can use set operations to efficiently compare
    them. Or if we have data incoming that may contain duplicates of data that has
    already been processed, we can use sets to compare the two and process only the
    new data.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it is valuable to know that sets are much more efficient than lists
    when checking for membership using the `in` keyword. If you use the syntax `value
    in container` on a set or a list, it will return `True` if one of the elements
    in `container` is equal to `value` and `False` otherwise. However, in a list,
    it will look at every object in the container until it finds the value, whereas
    in a set, it simply hashes the value and checks for membership. This means that
    a set will find the value in the same amount of time no matter how big the container
    is, but a list will take longer and longer to search for a value as the list contains
    more and more values.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Extending built-ins
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed briefly in [Chapter 3](ch03.html "Chapter 3. When Objects Are Alike"),
    *When Objects Are Alike*, how built-in data types can be extended using inheritance.
    Now, we'll go into more detail as to when we would want to do that.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: When we have a built-in container object that we want to add functionality to,
    we have two options. We can either create a new object, which holds that container
    as an attribute (composition), or we can subclass the built-in object and add
    or adapt methods on it to do what we want (inheritance).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Composition is usually the best alternative if all we want to do is use the
    container to store some objects using that container's features. That way, it's
    easy to pass that data structure into other methods and they will know how to
    interact with it. But we need to use inheritance if we want to change the way
    the container actually works. For example, if we want to ensure every item in
    a `list` is a string with exactly five characters, we need to extend `list` and
    override the `append()` method to raise an exception for invalid input. We'd also
    minimally have to override `__setitem__(self, index, value)`, a special method
    on lists that is called whenever we use the `x[index] = "value"` syntax, and the
    `extend()` method.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Yes, lists are objects. All that special non-object-oriented looking syntax
    we've been looking at for accessing lists or dictionary keys, looping over containers,
    and similar tasks is actually "syntactic sugar" that maps to an object-oriented
    paradigm underneath. We might ask the Python designers why they did this. Isn't
    object-oriented programming *always* better? That question is easy to answer.
    In the following hypothetical examples, which is easier to read, as a programmer?
    Which requires less typing?
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The highlighted sections show what object-oriented code might look like (in
    practice, these methods actually exist as special double-underscore methods on
    associated objects). Python programmers agree that the non-object-oriented syntax
    is easier both to read and to write. Yet all of the preceding Python syntaxes
    map to object-oriented methods underneath the hood. These methods have special
    names (with double-underscores before and after) to remind us that there is a
    better syntax out there. However, it gives us the means to override these behaviors.
    For example, we can make a special integer that always returns `0` when we add
    two of them together:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This is an extremely bizarre thing to do, granted, but it perfectly illustrates
    these object-oriented principles in action:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The awesome thing about the `__add__` method is that we can add it to any class
    we write, and if we use the `+` operator on instances of that class, it will be
    called. This is how string, tuple, and list concatenation works, for example.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: This is true of all the special methods. If we want to use `x in myobj` syntax
    for a custom-defined object, we can implement `__contains__`. If we want to use
    `myobj[i] = value` syntax, we supply a `__setitem__` method and if we want to
    use `something = myobj[i]`, we implement `__getitem__`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'There are 33 of these special methods on the `list` class. We can use the `dir`
    function to see all of them:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Further, if we desire additional information on how any of these methods works,
    we can use the `help` function:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The plus operator on lists concatenates two lists. We don't have room to discuss
    all of the available special functions in this book, but you are now able to explore
    all this functionality with `dir` and `help`. The official online Python reference
    ([https://docs.python.org/3/](https://docs.python.org/3/)) has plenty of useful
    information as well. Focus, especially, on the abstract base classes discussed
    in the `collections` module.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to get back to the earlier point about when we would want to use composition
    versus inheritance: if we need to somehow change any of the methods on the class—including
    the special methods—we definitely need to use inheritance. If we used composition,
    we could write methods that do the validation or alterations and ask the caller
    to use those methods, but there is nothing stopping them from accessing the property
    directly. They could insert an item into our list that does not have five characters,
    and that might confuse other methods in the list.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Often, the need to extend a built-in data type is an indication that we're using
    the wrong sort of data type. It is not always the case, but if we are looking
    to extend a built-in, we should carefully consider whether or not a different
    data structure would be more suitable.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: For example, consider what it takes to create a dictionary that remembers the
    order in which keys were inserted. One way to do this is to keep an ordered list
    of keys that is stored in a specially derived subclass of `dict`. Then we can
    override the methods `keys`, `values`, `__iter__`, and `items` to return everything
    in order. Of course, we'll also have to override `__setitem__` and `setdefault`
    to keep our list up to date. There are likely to be a few other methods in the
    output of `dir(dict)` that need overriding to keep the list and dictionary consistent
    (`clear` and `__delitem__` come to mind, to track when items are removed), but
    we won't worry about them for this example.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'So we''ll be extending `dict` and adding a list of ordered keys. Trivial enough,
    but where do we create the actual list? We could include it in the `__init__`
    method, which would work just fine, but we have no guarantees that any subclass
    will call that initializer. Remember the `__new__` method we discussed in [Chapter
    2](ch02.html "Chapter 2. Objects in Python"), *Objects in Python*? I said it was
    generally only useful in very special cases. This is one of those special cases.
    We know `__new__` will be called exactly once, and we can create a list on the
    new instance that will always be available to our class. With that in mind, here
    is our entire sorted dictionary:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `__new__` method creates a new dictionary and then puts an empty list on
    that object. We don't override `__init__`, as the default implementation works
    (actually, this is only true if we initialize an empty `DictSorted` object, which
    is standard behavior. If we want to support other variations of the `dict` constructor,
    which accept dictionaries or lists of tuples, we'd need to fix `__init__` to also
    update our `ordered_keys` list). The two methods for setting items are very similar;
    they both update the list of keys, but only if the item hasn't been added before.
    We don't want duplicates in the list, but we can't use a set here; it's unordered!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: The `keys`, `items`, and `values` methods all return views onto the dictionary.
    The collections library provides three read-only `View` objects onto the dictionary;
    they use the `__iter__` method to loop over the keys, and then use `__getitem__`
    (which we didn't need to override) to retrieve the values. So, we only need to
    define our custom `__iter__` method to make these three views work. You would
    think the superclass would create these views properly using polymorphism, but
    if we don't override these three methods, they don't return properly ordered views.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `__iter__` method is the really special one; it ensures that if
    we loop over the dictionary's keys (using `for`...`in` syntax), it will return
    the values in the correct order. It does this by returning the `__iter__` of the
    `ordered_keys` list, which returns the same iterator object that would be used
    if we used `for`...`in` on the list instead. Since `ordered_keys` is a list of
    all available keys (due to the way we overrode other methods), this is the correct
    iterator object for the dictionary as well.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a few of these methods in action, compared to a normal dictionary:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Ah, our dictionary is sorted and the normal dictionary is not. Hurray!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you wanted to use this class in production, you'd have to override several
    other special methods to ensure the keys are up to date in all cases. However,
    you don't need to do this; the functionality this class provides is already available
    in Python, using the `OrderedDict` object in the `collections` module. Try importing
    the class from `collections`, and use `help(OrderedDict)` to find out more about
    it.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Queues
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Queues are peculiar data structures because, like sets, their functionality
    can be handled entirely using lists. However, while lists are extremely versatile
    general-purpose tools, they are occasionally not the most efficient data structure
    for container operations. If your program is using a small dataset (up to hundreds
    or even thousands of elements on today's processors), then lists will probably
    cover all your use cases. However, if you need to scale your data into the millions,
    you may need a more efficient container for your particular use case. Python therefore
    provides three types of queue data structures, depending on what kind of access
    you are looking for. All three utilize the same API, but differ in both behavior
    and data structure.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start our queues, however, consider the trusty list data structure.
    Python lists are the most advantageous data structure for many use cases:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: They support efficient random access to any element in the list
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They have strict ordering of elements
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They support the append operation efficiently
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They tend to be slow, however, if you are inserting elements anywhere but the
    end of the list (especially so if it's the beginning of the list). As we discussed
    in the section on sets, they are also slow for checking if an element exists in
    the list, and by extension, searching. Storing data in a sorted order or reordering
    the data can also be inefficient.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the three types of containers provided by the Python `queue` module.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: FIFO queues
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FIFO stands for **First In First Out** and represents the most commonly understood
    definition of the word "queue". Imagine a line of people standing in line at a
    bank or cash register. The first person to enter the line gets served first, the
    second person in line gets served second, and if a new person desires service,
    they join the end of the line and wait their turn.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: The Python `Queue` class is just like that. It is typically used as a sort of
    communication medium when one or more objects is producing data and one or more
    other objects is consuming the data in some way, probably at a different rate.
    Think of a messaging application that is receiving messages from the network,
    but can only display one message at a time to the user. The other messages can
    be buffered in a queue in the order they are received. FIFO queues are utilized
    a lot in such concurrent applications. (We'll talk more about concurrency in [Chapter
    12](ch12.html "Chapter 12. Testing Object-oriented Programs"), *Testing Object-oriented
    Programs*.)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: The `Queue` class is a good choice when you don't need to access any data inside
    the data structure except the next object to be consumed. Using a list for this
    would be less efficient because under the hood, inserting data at (or removing
    from) the beginning of a list can require shifting every other element in the
    list.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Queues have a very simple API. A `Queue` can have "infinite" (until the computer
    runs out of memory) capacity, but it is more commonly bounded to some maximum
    size. The primary methods are `put()` and `get()`, which add an element to the
    back of the line, as it were, and retrieve them from the front, in order. Both
    of these methods accept optional arguments to govern what happens if the operation
    cannot successfully complete because the queue is either empty (can't get) or
    full (can't put). The default behavior is to block or idly wait until the `Queue`
    object has data or room available to complete the operation. You can have it raise
    exceptions instead by passing the `block=False` parameter. Or you can have it
    wait a defined amount of time before raising an exception by passing a `timeout`
    parameter.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'The class also has methods to check whether the `Queue` is `full()` or `empty()`
    and there are a few additional methods to deal with concurrent access that we
    won''t discuss here. Here is a interactive session demonstrating these principles:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Underneath the hood, Python implements queues on top of the `collections.deque`
    data structure. Deques are advanced data structures that permits efficient access
    to both ends of the collection. It provides a more flexible interface than is
    exposed by `Queue`. I refer you to the Python documentation if you'd like to experiment
    more with it.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: LIFO queues
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**LIFO** (**Last In First Out**) queues are more frequently called **stacks**.
    Think of a stack of papers where you can only access the top-most paper. You can
    put another paper on top of the stack, making it the new top-most paper, or you
    can take the top-most paper away to reveal the one beneath it.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditionally, the operations on stacks are named push and pop, but the Python
    `queue` module uses the exact same API as for FIFO queues: `put()` and `get()`.
    However, in a LIFO queue, these methods operate on the "top" of the stack instead
    of at the front and back of a line. This is an excellent example of polymorphism.
    If you look at the `Queue` source code in the Python standard library, you''ll
    actually see that there is a superclass with subclasses for FIFO and LIFO queues
    that implement the few operations (operating on the top of a stack instead of
    front and back of a `deque` instance) that are critically different between the
    two.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of the LIFO queue in action:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: You might wonder why you couldn't just use the `append()` and `pop()` methods
    on a standard list. Quite frankly, that's probably what I would do. I rarely have
    occasion to use the `LifoQueue` class in production code. Working with the end
    of a list is an efficient operation; so efficient, in fact, that the `LifoQueue`
    uses a standard list under the hood!
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of reasons that you might want to use `LifoQueue` instead
    of a list. The most important one is that `LifoQueue` supports clean concurrent
    access from multiple threads. If you need stack-like behavior in a concurrent
    setting, you should leave the list at home. Second, `LifoQueue` enforces the stack
    interface. You can't unwittingly insert a value to the wrong position in a `LifoQueue`,
    for example (although, as an exercise, you can work out how to do this completely
    wittingly).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Priority queues
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The priority queue enforces a very different style of ordering from the previous
    queue implementations. Once again, they follow the exact same `get()` and `put()`
    API, but instead of relying on the order that items arrive to determine when they
    should be returned, the most "important" item is returned. By convention, the
    most important, or highest priority item is the one that sorts lowest using the
    less than operator.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: A common convention is to store tuples in the priority queue, where the first
    element in the tuple is the priority for that element, and the second element
    is the data. Another common paradigm is to implement the `__lt__` method, as we
    discussed earlier in this chapter. It is perfectly acceptable to have multiple
    elements with the same priority in the queue, although there are no guarantees
    on which one will be returned first.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: A priority queue might be used, for example, by a search engine to ensure it
    refreshes the content of the most popular web pages before crawling sites that
    are less likely to be searched for. A product recommendation tool might use one
    to display information about the most highly ranked products while still loading
    data for the lower ranks.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Note that a priority queue will always return the most important element currently
    in the queue. The `get()` method will block (by default) if the queue is empty,
    but it will not block and wait for a higher priority element to be added if there
    is already something in the queue. The queue knows nothing about elements that
    have not been added yet (or even about elements that have been previously extracted),
    and only makes decisions based on the current contents of the queue.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'This interactive session shows a priority queue in action, using tuples as
    weights to determine what order items are processed in:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Priority queues are almost universally implemented using the `heap` data structure.
    Python's implementation utilizes the `heapq` module to effectively store a heap
    inside a normal list. I direct you to an algorithm and data-structure's textbook
    for more information on heaps, not to mention many other fascinating structures
    we haven't covered here. No matter what the data structure, you can use object-oriented
    principles to wrap relevant algorithms (behaviors), such as those supplied in
    the `heapq` module, around the data they are structuring in the computer's memory,
    just as the `queue` module has done on our behalf in the standard library.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Case study
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To tie everything together, we''ll be writing a simple link collector, which
    will visit a website and collect every link on every page it finds in that site.
    Before we start, though, we''ll need some test data to work with. Simply write
    some HTML files to work with that contain links to each other and to other sites
    on the Internet, something like this:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Name one of the files `index.html` so it shows up first when pages are served.
    Make sure the other files exist, and keep things complicated so there is lots
    of linking between them. The examples for this chapter include a directory called
    `case_study_serve` (one of the lamest personal websites in existence!) if you
    would rather not set them up yourself.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, start a simple web server by entering the directory containing all these
    files and run the following command:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This will start a server running on port 8000; you can see the pages you made
    by visiting `http://localhost:8000/` in your web browser.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I doubt anyone can get a website up and running with less work! Never let it
    be said, "you can't do that easily with Python."
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal will be to pass our collector the base URL for the site (in this case:
    `http://localhost:8000/`), and have it create a list containing every unique link
    on the site. We''ll need to take into account three types of URLs (links to external
    sites, which start with `http://`, absolute internal links, which start with a
    `/` character, and relative links, for everything else). We also need to be aware
    that pages may link to each other in a loop; we need to be sure we don''t process
    the same page multiple times, or it may never end. With all this uniqueness going
    on, it sounds like we''re going to need some sets.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Before we get into that, let's start with the basics. What code do we need to
    connect to a page and parse all the links from that page?
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This is a short piece of code, considering what it's doing. It connects to the
    server in the argument passed on the command line, downloads the page, and extracts
    all the links on that page. The `__init__` method uses the `urlparse` function
    to extract just the hostname from the URL; so even if we pass in `http://localhost:8000/some/page.html`,
    it will still operate on the top level of the host `http://localhost:8000/`. This
    makes sense, because we want to collect all the links on the site, although it
    assumes every page is connected to the index by some sequence of links.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: The `collect_links` method connects to and downloads the specified page from
    the server, and uses a regular expression to find all the links in the page. Regular
    expressions are an extremely powerful string processing tool. Unfortunately, they
    have a steep learning curve; if you haven't used them before, I strongly recommend
    studying any of the entire books or websites on the topic. If you don't think
    they're worth knowing, try writing the preceding code without them and you'll
    change your mind.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'The example also stops in the middle of the `collect_links` method to print
    the value of links. This is a common way to test a program as we''re writing it:
    stop and output the value to ensure it is the value we expect. Here''s what it
    outputs for our example:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'So now we have a collection of all the links in the first page. What can we
    do with it? We can''t just pop the links into a set to remove duplicates because
    links may be relative or absolute. For example, `contact.html` and `/contact.html`
    point to the same page. So the first thing we should do is normalize all the links
    to their full URL, including hostname and relative path. We can do this by adding
    a `normalize_url` method to our object:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This method converts each URL to a complete address that includes protocol and
    hostname. Now the two contact pages have the same value and we can store them
    in a set. We'll have to modify `__init__` to create the set, and `collect_links`
    to put all the links into it.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we''ll have to visit all the non-external links and collect them too.
    But wait a minute; if we do this, how do we keep from revisiting a link when we
    encounter the same page twice? It looks like we''re actually going to need two
    sets: a set of collected links, and a set of visited links. This suggests that
    we were wise to choose a set to represent our data; we know that sets are most
    useful when we''re manipulating more than one of them. Let''s set these up:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The line that creates the normalized list of links uses a `set` comprehension,
    no different from a list comprehension, except that the result is a set of values.
    We''ll be covering these in detail in the next chapter. Once again, the method
    stops to print out the current values, so we can verify that we don''t have our
    sets confused, and that `difference` really was the method we wanted to call to
    collect `unvisited_links`. We can then add a few lines of code that loop over
    all the unvisited links and add them to the collection as well:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `if` statement ensures that we are only collecting links from the one website;
    we don''t want to go off and collect all the links from all the pages on the Internet
    (unless we''re Google or the Internet Archive!). If we modify the main code at
    the bottom of the program to output the collected links, we can see it seems to
    have collected them all:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'It displays all the links we''ve collected, and only once, even though many
    of the pages in my example linked to each other multiple times:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Even though it collected links *to* external pages, it didn't go off collecting
    links *from* any of the external pages we linked to. This is a great little program
    if we want to collect all the links in a site. But it doesn't give me all the
    information I might need to build a site map; it tells me which pages I have,
    but it doesn't tell me which pages link to other pages. If we want to do that
    instead, we're going to have to make some modifications.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we should do is look at our data structures. The set of collected
    links doesn''t work anymore; we want to know which links were linked to from which
    pages. The first thing we could do, then, is turn that set into a dictionary of
    sets for each page we visit. The dictionary keys will represent the exact same
    data that is currently in the set. The values will be sets of all the links on
    that page. Here are the changes:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: It is a surprisingly small change; the line that originally created a union
    of two sets has been replaced with three lines that update the dictionary. The
    first of these simply tells the dictionary what the collected links for that page
    are. The second creates an empty set for any items in the dictionary that have
    not already been added to the dictionary, using `setdefault`. The result is a
    dictionary that contains all the links as its keys, mapped to sets of links for
    all the internal links, and empty sets for the external links.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Finally, instead of recursively calling `collect_links`, we can use a queue
    to store the links that haven't been processed yet. This implementation won't
    support it, but this would be a good first step to creating a multithreaded version
    that makes multiple requests in parallel to save time.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: I had to manually strip any trailing forward slashes in the `normalize_url`
    method to remove duplicates in this version of the code.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Because the end result is an unsorted dictionary, there is no restriction on
    what order the links should be processed in. Therefore, we could just as easily
    have used a `LifoQueue` instead of a `Queue` here. A priority queue probably wouldn't
    make a lot of sense since there is no obvious priority to attach to a link in
    this case.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to learn how to choose the correct data structure is to do it wrong
    a few times. Take some code you've recently written, or write some new code that
    uses a list. Try rewriting it using some different data structures. Which ones
    make more sense? Which ones don't? Which have the most elegant code?
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Try this with a few different pairs of data structures. You can look at examples
    you've done for previous chapter exercises. Are there objects with methods where
    you could have used `namedtuple` or `dict` instead? Attempt both and see. Are
    there dictionaries that could have been sets because you don't really access the
    values? Do you have lists that check for duplicates? Would a set suffice? Or maybe
    several sets? Would one of the queue implementations be more efficient? Is it
    useful to restrict the API to the top of a stack rather than allowing random access
    to the list?
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: If you want some specific examples to work with, try adapting the link collector
    to also save the title used for each link. Perhaps you can generate a site map
    in HTML that lists all the pages on the site, and contains a list of links to
    other pages, named with the same link titles.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Have you written any container objects recently that you could improve by inheriting
    a built-in and overriding some of the "special" double-underscore methods? You
    may have to do some research (using `dir` and `help`, or the Python library reference)
    to find out which methods need overriding. Are you sure inheritance is the correct
    tool to apply; could a composition-based solution be more effective? Try both
    (if it's possible) before you decide. Try to find different situations where each
    method is better than the other.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: If you were familiar with the various Python data structures and their uses
    before you started this chapter, you may have been bored. But if that is the case,
    there's a good chance you use data structures too much! Look at some of your old
    code and rewrite it to use more self-made objects. Carefully consider the alternatives
    and try them all out; which one makes for the most readable and maintainable system?
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Always critically evaluate your code and design decisions. Make a habit of reviewing
    old code and take note if your understanding of "good design" has changed since
    you've written it. Software design has a large aesthetic component, and like artists
    with oil on canvas, we all have to find the style that suits us best.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered several built-in data structures and attempted to understand how
    to choose one for specific applications. Sometimes, the best thing we can do is
    create a new class of objects, but often, one of the built-ins provides exactly
    what we need. When it doesn't, we can always use inheritance or composition to
    adapt them to our use cases. We can even override special methods to completely
    change the behavior of built-in syntaxes.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll discuss how to integrate the object-oriented and
    not-so-object-oriented aspects of Python. Along the way, we'll discover that it's
    more object-oriented than it looks at first sight!
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
