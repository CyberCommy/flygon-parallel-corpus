- en: Chapter 1. Getting Started with Jasmine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is an exciting time to be a JavaScript developer; technologies have matured,
    web browsers are more standardized, and there are new things to play with every
    day. JavaScript has become an established language, and the Web is the true open
    platform of today. We've seen the rise of single-page web applications, the proliferation
    of **Model View Controller** (**MVC**) frameworks, such as Backbone.js and AngularJS,
    the use of JavaScript on the server with Node.js, and even mobile applications
    created entirely with HTML, JavaScript, and CSS using technologies such as PhoneGap.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: From its humble beginnings with handling HTML forms, to the massive applications
    of today, the JavaScript language has come very far, and with it, a number of
    tools have matured to ensure that you can have the same level of quality with
    it that you have with any other language.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: This book is about the tools that keep you in control of your JavaScript development.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript – the bad parts
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many complications when dealing with client JavaScript code; the obvious
    one, is that you cannot control the client's runtime. While on the server, you
    can run a specific version of your Node.js server, you can't oblige your clients
    to run the latest version of Chrome or Firefox.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript language is defined by the ECMAScript specification; therefore,
    each browser can have its own implementation of a runtime, which means there could
    be small differences or bugs between them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Besides that, you have issues with the language itself. Brendan Eich developed
    JavaScript in just 10 days, under a lot of management pressure at Netscape. Although
    it got itself right in its simplicity, first-class functions, and object prototypes,
    it also introduced some problems with the attempt to make the language malleable
    and allow it to evolve.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Every JavaScript object is mutable; this means that there is nothing you can
    do to prevent a module from overwriting pieces of other modules. The following
    code illustrates how simple it is to overwrite the global `console.log` function:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This was a conscious decision on the language design; it allows developers to
    tinker and add missing functionality to the language. But given such power, it
    is relatively easy to make a mistake.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Version 5 of the ECMA specification introduced the `Object.seal` function, which
    prevents further changes on any object once called. But its current support is
    not widespread; Internet Explorer, for example, only implemented it on its version
    9.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Another problem, is with how JavaScript deals with type. In other languages,
    an expression like `'1' + 1` would probably raise an error; in JavaScript, due
    to some non-intuitive type coercion rules, the aforementioned code results in
    `'11'`. But the main problem is in its inconsistency; on multiplication, a string
    is converted into a number, so `'3' * 4`, is actually `12`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'This can lead to some hard-to-find problems on big expressions. Suppose you
    have some data coming from a server, and although you are expecting numbers, one
    value came as a string:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The resulting value of the preceding example is `'1212'`, a string.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: These are just two common problems faced by developers. Throughout the book,
    you are going to apply best practices and write tests to guarantee that you don't
    fall into these, and other, pitfalls.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Jasmine and behavior-driven development
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jasmine is a little **behavior-driven development** (BDD) test framework created
    by the developers at Pivotal Labs, to allow you to write automated JavaScript
    unit tests.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: But before we can go any further, first we need to get some fundamentals right,
    starting with what a test unit is.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: A test unit is a piece of code that tests a functionality unit of the application
    code. But sometimes, it can be tricky to understand what a functionality unit
    can be, so for that reason, Dan North came up with a solution in the form of BDD,
    which is a rethink of **test-driven development** (**TDD**).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: In traditional unit testing practice, the developer is left with loose guidelines
    on how to start the process of testing, what to test, how big a test should be,
    or even how to call a test.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: To fix these problems, Dan took the concept of **user stories** from the standard
    agile construct, as a model on how to write tests.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a music player application could have an acceptance criterion
    such as:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '**Given** a player, **when** the song has been paused, **then** it should indicate
    that the song is currently paused.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following list, this acceptance criterion is written following
    an underlying pattern:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '**Given**: This provides an initial context'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When**: This defines the event that occurs'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Then**: This ensures an outcome'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Jasmine, this translates into a very expressive language that allows tests
    to be written in a way that reflects actual business values. The preceding acceptance
    criterion written as a Jasmine test unit would be as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can see how the criterion translates well into the Jasmine syntax. In the
    next chapter, we will get into the details of how these functions work.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: With Jasmine, as with other BDD frameworks, each acceptance criterion directly
    translates to a test unit. For that reason, each test unit is usually called a
    **spec**, short for specification. During the course of this book, we will be
    using this terminology.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Jasmine
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting started with Jasmine is actually pretty simple.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Open the Jasmine website at [http://jasmine.github.io/2.1/introduction.html#section-Downloads](http://jasmine.github.io/2.1/introduction.html#section-Downloads)
    and download the **Standalone Release** (version 2.1.3 is going to be used in
    the book).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: While at the Jasmine website, you might notice that it is actually a live page
    executing the specs contained in it. This is made possible by the simplicity of
    the Jasmine framework, allowing it to be executed in the most diverse environments.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'After you''ve downloaded the distribution and uncompressed it, you can open
    the `SpecRunner.html` file on your browser. It will show the results of a sample
    test suite (including the acceptance criterion we showed you earlier):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading Jasmine](graphics/B04138_01_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: This shows the SpecRunner.html file opened on the browser
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: This `SpecRunner.html` file is a Jasmine browser spec runner. It is a simple
    HTML file that references the Jasmine code, the source files, and the test files.
    For convention purposes, we are going to refer to this file simply as **runner**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see how simple it is by opening it on a text editor. It is a small
    HTML file that references the Jasmine source:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The runner references the source files:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The runner references a special `SpecHelper.js` file that contains code shared
    between specs:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The runner also references the spec files:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: The Jasmine framework is set up inside the `lib/jasmine-2.1.3/boot.js` file,
    and although it's an extensive file, most of its content is in documentation on
    how the setup actually happens. It is recommended that you open it in a text editor
    and study its content.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Although, for now, we are running the specs in the browser, in [Chapter 8](ch08.html
    "Chapter 8. Build Automation"), *Build Automation*, we are going to make the same
    specs and code run on a **headless browser**, such as PhantomJS, and have the
    results written on the console.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: A headless browser is a browser environment without its graphical user interface.
    It can either be an actual browser environment, such as PhantomJS, which uses
    the WebKit rendering engine, or a simulated browser environment, such as Envjs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: And although not covered in this book, Jasmine can also be used to test server-side
    JavaScript code written for environments such as Node.js.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书未涉及，但Jasmine也可以用于测试为诸如Node.js等环境编写的服务器端JavaScript代码。
- en: This Jasmine flexibility is amazing, because you can use the same tool to test
    all sorts of JavaScript code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这种Jasmine的灵活性令人惊叹，因为你可以使用同样的工具来测试各种类型的JavaScript代码。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you saw some of the motivations behind testing a JavaScript
    application. I showed you some common pitfalls of the JavaScript language and
    how BDD and Jasmine both help you to write better tests.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你看到了测试JavaScript应用程序的动机之一。我向你展示了JavaScript语言的一些常见陷阱，以及BDD和Jasmine如何帮助你编写更好的测试。
- en: You have also seen how easy it is to download and get started with Jasmine.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你也看到了使用Jasmine进行下载和入门是多么简单。
- en: In the next chapter, you are going to learn how to think in BDD and code your
    very first spec.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何以BDD的方式思考并编写你的第一个规范。
