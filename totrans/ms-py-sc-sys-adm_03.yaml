- en: Unit Testing - Introduction to the Unit Testing Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing your project is an essential part of your software development. In this
    chapter, we are going to learn about unit testing in Python. Python has the module
    called `unittest`, which is a unit testing framework. We are going to learn about
    the `unittest` is framework in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to unit testing framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating unit testing tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is unittest?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `unittest` is a unit testing framework in Python. It supports multiple tasks
    such as test fixtures, writing test cases, aggregating test cases into the test
    suites, and running tests.
  prefs: []
  type: TYPE_NORMAL
- en: '`unittest` supports four main concepts, which are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`test fixture`: This includes preparation and cleanup activities for performing
    one or more tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test case`: This includes your individual unit test. By using the `TestCase`
    base class of `unittest`, we can create new test cases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test suite`: This includes a collection of test cases, test suites, or both.
    This is for executing test cases together'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test runner`: This includes arranging the test executions and giving output
    to the users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python has a `unittest` module that we will import in our script. The `unittest`
    module has `TestCase` class for creating test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Individual test cases can be created as methods. These method names start with
    the word *test*. So, test runner will know which methods represent test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Creating unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to create unit tests. To do this, we will create
    two scripts. One will be your normal script and the other will contain the code
    for testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a script named `arithmetic.py` and write the following code in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding script, we created four functions: `add_numbers`, `sub_numbers`,
    `mul_numbers`, and `div_numbers`. Now, we are going to write test cases for these
    functions. First, we will learn how we can write test cases for the `add_numbers`
    function. Create a `test_addition.py` script and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, we have written the three test cases for the `add_numbers`
    function. The first is for testing integer numbers, the second is for testing
    float numbers, and the third is for testing strings. In strings, adding means
    concatenating two strings. Similarly, you can write the test cases for subtraction,
    multiplication, and division.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will run our `test_addition.py` test script and we will see what result
    we get after running this script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the script as follows and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we get `OK` , which means our testing was successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever you run your test script, you have three possible test results:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Result** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `OK` | Successful |'
  prefs: []
  type: TYPE_TB
- en: '| `FAIL` | Test failed– raises an `AssertionError` exception |'
  prefs: []
  type: TYPE_TB
- en: '| `ERROR` | Raises an exception other than `AssertionError` |'
  prefs: []
  type: TYPE_TB
- en: Methods used in unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever we use `unittest`, there are some methods we use in our script. These
    methods are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assertEqual()` and `assertNotEqual()`: This checks for an expected result'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertTrue()` and `assertFalse()`: This verifies a condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertRaises()`: This verifies that a specific exception gets raised'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setUp()` and `tearDown()`: This defines instructions that are executed before
    and after each test method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the `unittest` module from the command line as well. So, you can
    run the previous test script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will see another example. We will create two scripts: `if_example.py`
    and `test_if.py`. `if_example.py` will be our normal script and `test_if.py` will
    contain test case. In this test, we are checking whether the entered number is
    equal to `100` or not. If it is equal to `100` then our test will be `successful`.
    If not, it must show a `FAILED` result.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `if_example.py` script and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a `test_if.py` test script and write following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the test script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We run the script for a successful test result. Now, we will enter some value
    other than `100` and we must get a `FAILED` result. Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about the `unittest`, which is Python's unit
    testing framework. We also learned about how to create test cases and methods
    used in unit testing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to automate the regular administrative
    activities of the system administrator. You will learn about accepting inputs,
    handling passwords, executing external commands, reading config files, adding
    warning codes to scripts, setting CPU limits, web-browser launching, using the `os`
    module, and taking backups.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is unit testing, automation testing, and manual testing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the alternative modules available apart from `unittest`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the use of writing test cases?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is PEP8 standards ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing documentation: [https://docs.python.org/3/library/unittest.html ](https://docs.python.org/3/library/unittest.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PEP8 coding standards in Python: [https://www.python.org/dev/peps/pep-0008/ ](https://www.python.org/dev/peps/pep-0008/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
