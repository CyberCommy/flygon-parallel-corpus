- en: Maintaining System Time and Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we dealt with automation at the command line. We touched
    on the `at`, `atq`, and `atrm` commands. Following this, we worked with the various` cron`
    directories, and then we covered the `crontab` utility. Additionally, we covered `anacron`.
    Finally, we looked at restrictions in terms of automation.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, our focus is on maintaining the system time and performing
    logging. First, we will cover configuration of the system time, synchronizing
    time over a network. Then, our attention is on the various log files. Finally,
    we will perform remote logging between separate Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Date configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up local system logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure remote logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In most Linux environments, it''s critical to have the systems synchronized
    with the correct time. We can expose the current date using the `date` command.
    We can view the system date and time by simply running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we can see the current date. It is also possible
    to set the date and time using the `date` command. To be able to specify the date
    in string format, we pass the `-s` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we have hit a roadblock; this is because we
    need root privileges in order to change the date. Let''s try again, this time
    as root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Wow! What happened? Well, here is the deal: the system is configured to auto-sync
    its time. This can be verified by using another powerful command: the `timedatectl`
    command. We can run the `timedatectl` command to view the current sync settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Based on the preceding output, the `systemd-timesyncd.service active:
    yes` section indicates that the system is indeed currently set to synchronized.
    Also, we can pass the `status` option, and this will return similar results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! We can manually set the time, but first we will need to disable the
    auto-sync by passing the `set-ntp` option with the `timedatectl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! Based on the preceding command, we can now see the `systemd-timesyncd.service
    active: no` section was changed to `no`. We can now try to change the date once
    again using the `date` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! The command has been executed successfully and changed the current
    date. We can also use numerical values to represent the month as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we can see the date and time changed to reflect
    the new settings. In addition to this, it is possible to separate the date using
    hyphens as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! We can also set the time using regular expressions. We can use  `+%T`
    to set the time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! It is also possible to change only the hour using the `date` command;
    we pass the `+%H` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! It is also possible to change the date and time using the `timedatectl`
    command. We can change the date by passing the `set-time` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! It is also possible to set the date alone by passing the `set-time`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, the date was changed, but notice the time was
    changed too. We can fix this by combining the date and time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! We can also change the time zone using the `timedatectl` command;
    we can view the available time zones by passing the `list-timezones` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. We change the time zone by passing
    the `set-timezone` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! We''ve successfully changed the time zone. The time zone information
    is stored in the `/etc/timezone` and `/etc/localtime` files. It''s a symbolic
    link to `/usr/share/zoneinfo/<timezone>`; `<timezone>` is whatever we specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Excellent! Based on the preceding output, we can see `/etc/timezone` and `/etc/localtime` were
    updated to the specified time zone.
  prefs: []
  type: TYPE_NORMAL
- en: The tzselect command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `tzselect` command can be used to change the time zone of a system. When
    we launch the `tzselect` command, it will ask a series of questions in an interactive
    mode. This can be illustrated by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we then need to type a number that represents
    the continent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. We then have to specify the country:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we then need to confirm the information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to append the `TZ=''America/Guyana''; export TZ` line inside `.profile`
    of the current user''s home directory; the user then needs to log out and back
    in again for the changes to take effect permanently. Of course, we have already
    made our changes permanent by using the previous command: the `timedatectl` command.'
  prefs: []
  type: TYPE_NORMAL
- en: The tzconfig command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tzconfig` command is an older method for changing the time zone in a system.
    It is actually not available; instead, it points you to the `tzdata` command in
    Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be illustrated by running the `tzconfig` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding command, we need to run the `dpkg-reconfigure tzdata`
    command; this will launch an interactive dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to scroll using the keyboard; you then press *Enter* to select
    the desired continent. You will then be presented with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Based on the preceding output, you then scroll to your desired country and
    press the *Enter* key; this would then use the country''s time zone which you
    highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Another way to change the time zone is to manually remove  `/etc/localtime`
    and create a symbolic link pointing to the desired time zone inside `/usr/share/zoneinfo`.
    Here is how this looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see from the preceding output that the time zone info was updated in
    the `timedatectl` command. However, it was not updated in `/etc/timezone`. In
    order to update `/etc/timezone`, we need to run the `dpkg-reconfigure tzdata`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: The hwclock command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is another clock; namely, the clock that runs even when the system is
    powered off; this is the hardware clock. We can view the time of the hardware
    clock as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see from the preceding output that the date and time are relatively
    close. We can set the hardware clock to sync with the system time as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to configure the system time to sync with the hardware
    clock. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The hardware clock takes it settings from `/etc/adjtime` as can be seen in
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also the hardware clock; we can view the hardware clock by using the
    `hwclock` command. If we are using UTC time, we can pass the `--utc` option with
    the `hwclock` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'As the preceding command shows, the date of the hardware clock is presented
    in UTU. In addition to this, we can also use the `--show` option to display similar
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up local system logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within a Linux environment, it is critical to have logs that can be used to
    identify potential bottlenecks within the system. Fortunately, we have logging
    turned on by default. There are different types of log file available for inspection;
    primarily, the `/var/log` directory contains various log files, each geared to
    different aspects of the system. We can take a look at the `/var/log` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding output, right off the bat, there is the `/var/log/syslog`
    file. This contains pertinent information about the functioning of the system.
    We can view the `/var/log/syslog` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. We''ve used the `tail` command with
    the `-f` option; this will print out the most recent logs as they are generated
    inside the `/var/log/syslog` file. Another useful log file is `/var/log/auth.log`.
    This displays various authentication messages. We can view the `/var/log/auth.log`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! In the preceding output, we can see various logs pertaining to the
    root user. Also, if someone is trying to break into the system, those login attempts
    will be present here, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! We can see authentication messages regarding users trying to log
    in to the system. Another useful log file is `/var/log/kern.log`. This file contains
    various messages related to the kernel during boot up. We can take a look at this
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding file, we can see logs pertaining to interrupts and networking.
    Over on the Fedora 28 system, when we check the `/var/log` file, we will notice
    that there is no `/var/log/syslog` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, Fedora 28 is using `systemd`. This has replaced
    `/var/log/messages` and `/var/log/syslog` with `journal`. This in turn is implemented
    inside the `journald` daemon. We can view the logs using the `journalctl` command.
    To view all of the log files, we can simply type `journalctl` without any options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. There are a number of log messages.
    We can filter what we would like to be displayed. For instance, to view the logs
    since the most recent system boot, we can pass the `-b` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, we see quite a number of messages. We can even display
    logs with timestamps in UTC by passing the `--utc` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Based on the preceding output, the very first line, `-- Logs begin
    at Tue 2018-07-31 14:57:23 UTC, end at Fri 2018-09-07 19:52:26 UTC. --`, indicates
    the timestamps are in UTC. The `journalctl` file also stores information inside `/var/log/journal`
    as the following shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even dive deeper and see more log files under `/var/journal/30012ff3b6d648a09e33e4927d140504`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! We can expose this information using `journalctl`. For instance,
    we can view a log pertaining to previous boots; this can be viewed by passing
    the `--list-boots` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we can see seven files that contain boot information;
    we can view any of these files by passing the offset of the file. The offset of
    each file is the value in the first column. Let''s take a look at the `-6` offset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. We can look at `/etc/systemd/journald.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. Based on the preceding output, all
    of the settings are at their defaults; `#` indicates a comment. We can specify
    a date from which we would like to view the log information by passing the `--since`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Some output has been omitted for brevity. Also, we can specify the
    date in numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. However, we can see information pertaining
    to networking. Similarly, we can view authentication information inside `/var/log/audit/audit.log`.
    Here is an excerpt of this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great job! From the excerpt, we can see login attempts coming into the Fedora
    system. Also, we can leverage the `journalctl` command to display the authentication
    information. We can pass the `-u` option and specify which service we''re looking
    for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: From this, we can see the effectiveness of the `journalctl` utility.
  prefs: []
  type: TYPE_NORMAL
- en: Configure remote logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s always good to view the local system''s log files, but what about managing
    remote logs? Well, it is possible to configure a Linux system to perform remote
    logging. We have to install (if not already installed) the logging software. For
    this demonstration, we''ll use the Fedora 28 as the logging client and the Ubuntu
    18 system as the logging server. Also, we will use `rsyslog` as the logging software.
    By default, it''s already installed in the Ubuntu 18 system. However, over on
    Fedora 28, we will have to install the `rsyslog` software. First, let''s install
    the `rsyslog` software in Fedora 28\. We use the `dnf` command, illustrated as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. We''ve found the `rsyslog` package.
    Next, we will pass the `install` option in order to install the `rsyslog` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, some output has been omitted for brevity. We have successfully
    installed the `rsyslog` package. Now, we need to edit `/etc/rsyslog.conf` in a
    text editor, such as vi or nano; we need to specify the remote logging server
    IP address. Here is how we do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Execellent! Some output has been omitted for brevity. In the preceding output,
    we added the last entry `*.*     @172.16.175.132:514`. This is informing the local
    system to send all log facilities the `*.` messages with all the `.*` severity
    to the `172.16.175.132` remote system using the `UDP` protocol and the `514` port
    number. We can also be more specific; for instance, we can only send emergency
    messages from every facility by specifying the `emerg` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Every facility with emergency messages will be sent to the remote server via
    UDP. Up to this point, we''ve been using UDP to send the logs, but it is also
    possible to send the logs using TCP. In order to use TCP as transport, we need
    to add another `@` in front of the first `@`. We''re going to change the message
    type from `emerg` to `info` and use TCP as the transport protocol, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Some output has been omitted for brevity. Now, the last step is to
    restart the `rsyslog` daemon so that the new changes can take effect. We use the
    `systemctl` command, as in the following, to restart the `rsyslog` daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can see that the `rsyslog` daemon is running. Note at the bottom of
    the `systemctl` status, there are some logs about connecting to `172/16.175.132`.
    This is because we have not configured the remote server to accept the logs coming
    from the Fedora system. Now we will head over to the Ubuntu system and edit `/etc/rsyslog.conf`
    and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Some output has been omitted for brevity. We''ve taken off the comments
    in the `TCP` section. The last step is to restart the `rsyslog` daemon; this can
    be done using the `systemctl` command as the following screenshot shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the `rsyslog` daemon running without error. Now to test, we will
    check `/var/log/syslog` for logs from the Fedora logging client. We can use another
    powerful command to generate a test log: the `logger` command. The following is
    how we use the `logger` command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Fedora 28 `rsyslog` client, we issue the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Over on the Ubuntu 18 `rsyslog` server we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! We can see that the `rsyslog` client is indeed sending the logs across
    the network to the Ubuntu 18 `rsyslog` server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, the main focus was on the maintenance of the system's time
    and logging. Particularly, we looked at ways in which we can manipulate the system
    time; we worked extensively with the `date` and `timedatectl` commands. Additionally,
    we touched on regular expressions for changing the date. Furthermore, we worked
    with the hardware clock; we saw ways to sync the system clock with the hardware
    clock and vice versa. Moving on, we worked with logging; we explored the common
    log files. The `/var/log/syslog` file was explored in the Ubuntu environment,
    whereas the `journalctl` command was used extensively in Fedora 28 for viewing
    the logs. Finally, we worked with remote logging; we installed the `rsyslog` package
    in the Fedora 28 and configured it as a `rsyslog` client. We then went over to
    Ubuntu 18 and configured its `/etc/rsyslog.conf` file to accept remote logs and
    use TCP as its transport protocol. We then generated test logs over on our Fedora
    system and verified that we received the logs over on our Ubuntu `rsyslog` server.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we dive in to the world of the Internet Protocol. We will
    touch on the various IPv4 addresses and IPv6 addresses. Also, we will cover subnetting
    an IPv4 address and the ways of cutting down on the lengthy IPv6 address. Finally,
    we will look at some of the well-known protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which option is used to set the date using the `date` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-s`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-S`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-t`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-u`
  prefs: []
  type: TYPE_NORMAL
- en: Which option is used to turn off the sync in the `timedatectl` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `--set-ntp`
  prefs: []
  type: TYPE_NORMAL
- en: B. `--set-sync`
  prefs: []
  type: TYPE_NORMAL
- en: C. `set-ntp`
  prefs: []
  type: TYPE_NORMAL
- en: D. `set-sync`
  prefs: []
  type: TYPE_NORMAL
- en: Which regular expression is used to set only the time with the `date` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. -$%t
  prefs: []
  type: TYPE_NORMAL
- en: B. +$T
  prefs: []
  type: TYPE_NORMAL
- en: C. -$t
  prefs: []
  type: TYPE_NORMAL
- en: D. +%T
  prefs: []
  type: TYPE_NORMAL
- en: Which option is used to set the time using the `timedatectl` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. set-time
  prefs: []
  type: TYPE_NORMAL
- en: B. set-clock
  prefs: []
  type: TYPE_NORMAL
- en: C. set-sync
  prefs: []
  type: TYPE_NORMAL
- en: D. --set-zone
  prefs: []
  type: TYPE_NORMAL
- en: Which file is generated from  `/usr/share/zoneinfo/<zone>`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `/etc/synczone`
  prefs: []
  type: TYPE_NORMAL
- en: B. `/etc/timedate`
  prefs: []
  type: TYPE_NORMAL
- en: C. `/etc/clock`
  prefs: []
  type: TYPE_NORMAL
- en: D. `/etc/localtime`
  prefs: []
  type: TYPE_NORMAL
- en: Which command replaces the `tzconfig` command in newer Ubuntu distributions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `tztime`
  prefs: []
  type: TYPE_NORMAL
- en: B. `tzdata`
  prefs: []
  type: TYPE_NORMAL
- en: C. `tzzone`
  prefs: []
  type: TYPE_NORMAL
- en: D. `tzclock`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used for setting the time zone??
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. tzsync
  prefs: []
  type: TYPE_NORMAL
- en: B. tzselect
  prefs: []
  type: TYPE_NORMAL
- en: C. tzdate
  prefs: []
  type: TYPE_NORMAL
- en: D. tztime
  prefs: []
  type: TYPE_NORMAL
- en: Which option with the `journalctl` command lists logs for a particular daemon?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-a`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-e`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-b`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-u`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which protocol is being used when we have `*.* @@1.2.3.4` inside  `/etc/rsyslog.conf`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ICMP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: UDP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ECHO
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TCP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command can be used to send a test message as part of the verification
    that the `rsyslog` client is communicating with the `rsyslog` server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`send-message`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`nc`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`logger`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`logrotate`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This site gives useful information regarding logs: [https://www.digitalocean.com/community/tutorials/how-to-view-and-configure-linux-logs-on-ubuntu-and-centos](https://www.digitalocean.com/community/tutorials/how-to-view-and-configure-linux-logs-on-ubuntu-and-centos)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This site gives useful information about clocks: [https://www.systutorials.com/docs/linux/man/n-clock/](https://www.systutorials.com/docs/linux/man/n-clock/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This site gives useful information about logging: [http://freelinuxtutorials.com/tutorials/configure-centralized-syslog-server-in-linux-setup-syslog-clients-on-different-platforms/](http://freelinuxtutorials.com/tutorials/configure-centralized-syslog-server-in-linux-setup-syslog-clients-on-different-platforms/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
