- en: Chapter 6. Component Communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up until now, we have built a single component, but the real power of Angular
    components is building the interaction between them. in this chapter, we will
    learn how components can communicate in different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Pass data from the parent component to the child through properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define custom events on a child component for the parent to listen to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicate via local variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query child components using the parent component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data via properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The parent component can pass data to the child component through properties.
    There are two ways that define input properties for a component:'
  prefs: []
  type: TYPE_NORMAL
- en: By creating an input array on the component decorator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using the `@Input` decorator for decorating a class property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the component input array is simple and straightforward. Just declare
    an input array and populate it with strings that represent the name of the property
    you are expecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we created a child component, which defined an input array
    with a single string named `title` that represents a property that the parent
    component can bind to and pass data through.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t forget to add the `ChildComponent` class to the declarations attribute
    of the `AppModule`. Otherwise, this component can''t be used within the template
    of the `AppComponent`. This configuration is required each time you need to use
    a component or a directive in another one and within the same module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The approach of the input array is suitable when we don't need to access the
    input in the `Component` class, and we don't care about the type of the input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can bind an input to a class property using the `@Input()`
    decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Binding to a class property (the second example) is considered to be a best
    practice when dealing with inputs.
  prefs: []
  type: TYPE_NORMAL
- en: An input can be a primitive or an object.
  prefs: []
  type: TYPE_NORMAL
- en: Emitting custom events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the child component needs to communicate with its parent component, it
    can emit an event. This technique keeps the child component de-coupled from its
    parent (de-coupled: doesn''t need to know its parents).'
  prefs: []
  type: TYPE_NORMAL
- en: In Angular, we need to use a class named `EventEmitter` if we want to emit events.
  prefs: []
  type: TYPE_NORMAL
- en: You need to instantiate the `EventEmitter` class, assign it to a class property,
    and call the `emit` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the child component will emit a custom event named
    `TitleClicked` when the user clicks on the title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: First, we imported the `EventEmitter` class and the `Output` decorator from
    Angular core. Then, we created a class property named `titleClicked` and assigned
    it to a fresh instance of the `EventEmitter` class.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we bound the native click event of the `<h2>` element and called the `emit()`
    method of the `titleClicked` object.
  prefs: []
  type: TYPE_NORMAL
- en: The parent component can now bind to this event.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing with a local variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One component can access another component''s properties and methods using
    local variables. In the following example, we create a local variable for the
    child component that becomes accessible within the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We create a local variable using the `#` symbol.
  prefs: []
  type: TYPE_NORMAL
- en: The method in the child component must be public, otherwise Angular will throw
    an exception.
  prefs: []
  type: TYPE_NORMAL
- en: This technique is very useful in some cases because it doesn't require any code
    inside the component class. On the other hand, the reference context is just inside
    the template.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to access the child component inside the parent component, you need
    to inject a reference to the child component using the `@ViewChild` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The parent component is using the `@ViewChild` decorator (imported from angular
    core) passing the name of the component, and assigning it to a local class member
    named `childComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: If we have more than one instance of the child component, we can use the `@ViewChildren`
    decorator instead.
  prefs: []
  type: TYPE_NORMAL
- en: Querying child components with the parent component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `@ViewChildren` component will provide a reference to all of the children
    components of a given type as a `QueryList`, which contains an array of child
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Both `ViewChildren` and the `QueryList` are imported from Angular core.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Components can interact and communicate in many ways. Each technique is suitable
    for a certain situation. The main difference is related to the scope of communication:
    template context or component class context.'
  prefs: []
  type: TYPE_NORMAL
- en: This flexibility enables us to create complex component compositions that easily
    share data and interactions, which consists of APIs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build useful components and also learn about Angular
    2 change detection and the component life cycle.
  prefs: []
  type: TYPE_NORMAL
