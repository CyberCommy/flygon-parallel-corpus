- en: Chapter 6. Spring Security with Vaadin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security with Vaadin – basic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Vaadin – Spring form-based authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Vaadin – customized JSP form-based authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Vaadin – using Vaadin form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vaadin has emerged as a popular framework in current projects. It offers RIA
    just like GWT-rich Internet applications. It doesn't have the RPC calls and those
    async service classes. It works similar to GWT widgets. Vaadin also integrates
    easily with portlets. In GWT we had to install browser compatible GWT plugin but
    in Vaadin we don't need to do that. The application developed in Vaadin is compatible
    on all modern browsers. Vaadin can be written as server side and client side applications.
    The Vaadin UI component is actually a JavaServlet component which easily runs
    on web servers such as Tomcat and also application servers like JBOSS and Glassfish.
    For the current demonstration I am using Tomcat and Eclipse Indigo.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will demonstrate Spring Security with Vaadin integration
    using various approaches. Let's first do a basic setup for this. It's all about
    downloading the plugin and creating a sample Vaadin project.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security with Vaadin – basic authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our aim is to do a simple basic authentication on the Vaadin application. I
    want a login dialog to pop up when we access the URL of the Vaadin application.
    I have created a simple product catalog application which looks very similar to
    the address book.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Set up Vaadin application on Eclipse:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download Vaadin [http://vaadin.com/eclipse](http://vaadin.com/eclipse) for Eclipse
    Indigo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this chapter we will demonstrate Spring Security integration with both the
    Vaadin versions (Vaadin 6 and Vaadin 7).
  prefs: []
  type: TYPE_NORMAL
- en: Create a Vaadin web project in Eclipse with Vaadin 7—this will generate a default
    application with a click button which we will modify.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the application on the Tomcat server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an `applicationContext.xml` file. It is mandatory to name it as `applicationContext`,
    or else we will get error messages in the console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `web.xml` file with spring listeners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add all the jars in the class-path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are for integrating Spring Security with Vaadin to demonstrate
    basic authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `web.xml` file with spring listener and spring filter, with Vaadin
    servlet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can observe that we haven''t configured `<context-param>` as we did in
    our previous applications. Spring will automatically look for the `applicationContext.xml`
    file. For setting up Vaadin we need to configure the Vaadin servlet class with
    two parameters `PropertyToString` and a UI class named `com.example.vaadin_project1`.
    Edit the `applicationContext.xml` file using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple configuration for basic authentication. With this configuration
    we expect a login dialog box before showing the Vaadin application. I have created
    a new role editor.
  prefs: []
  type: TYPE_NORMAL
- en: Here we have created a `ProductList` component to display a list of products.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example we are demonstrating a basic authentication mechanism with
    the Vaadin application. Sometimes we do not need to display a jsp page or a Vaadin
    login form for the user, in such cases we go for basic authentication in which
    a dialog box pops up requesting the user to enter their credentials. On success,
    the user is given access to the Vaadin application. Workflow of the application
    is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8086/Vaadin_Project1/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see pages as shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_06_01.jpg)![How it works...](img/7525OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Vaadin – Spring form-based authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Vaadin – customized JSP form-based authentication*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Vaadin – using Vaadin form* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Vaadin – Spring form-based authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will demonstrate form-based authentication in Vaadin. It's very similar to
    the authentication that we used in our previous recipes. We will be editing the
    `applicationContext.xml` file. We are not creating any customized login form,
    we would like to use spring internal login form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have to comment the `<http-basic/>` tag from the `application-Context.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `applicationContext.xml` file as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example spring's internal login form is invoked for authenticating the
    Vaadin application. This configuration is done in the `applicationConext.xml`
    file. The Spring framework pops up its own internal jsp file for the user. When
    the user enters the credentials and clicks on **Submit** they are redirected to
    the Vaadin application. Run the Tomcat server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8086/Vaadin_Project1/`'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a Spring provided inbuilt login form.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the login username and password and you will be taken to the Vaadin product
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly you can authenticate using the database and LDAP just by editing the
    authentication-manager configurations.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Vaadin – customized JSP form-based authentication*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Vaadin – using Vaadin form* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Vaadin – customized JSP form-based authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have demonstrated the Vaadin 7 application with the Spring Security
    API login form and login pop up dialog box. All that we did was create users in
    the application context file.
  prefs: []
  type: TYPE_NORMAL
- en: This time we will give a different name to the application context and give
    it a customized login form and use the Vaadin 6 project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a sample Vaadin 6 project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the Spring related jars in the build path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the Spring Security related jars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `vaadin-spring-security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `mybeans.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `web.xml` file as shown in the previous section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also add the Spring related jars in the `web-inf lib` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps are for implementing a form-based authentication using a
    customized JSP with the Vaadin application.
  prefs: []
  type: TYPE_NORMAL
- en: Since the entry point is `AbstractApplicationServlet` for the Vaadin 6 application,
    we will create a class that extends `AbstractApplicationServlet`. This will give
    us an option to override the methods of the class.
  prefs: []
  type: TYPE_NORMAL
- en: We will also create a class that extends the `Application` class. In this class
    we will create a window. For example, we will just add some text after login.
  prefs: []
  type: TYPE_NORMAL
- en: We will also add jsp file mapping in the `web.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: We need to map the `MyAbstractApplicationServlet` class as a Servlet in the
    file `web.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to configure the Spring context listeners and Spring filters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `web.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `vaadin-spring-security.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Subclass and override the method `AbstractApplicationServlet`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `AbstractApplicationServlet` class is an abstract class that extends `HttpServlet`
    and implements an interface called *Constants*. `The Service()` and `init()` methods
    are the servlet methods which are used by the servlet container. We have created
    an `appContext` object and have initialized it in the `init ()` method. The `getNewApplication()`
    method has been overridden to get the class that extends the application. The
    `getApplication()` method has been overridden.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7525OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The implementation is given as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MyAbstractApplicationServlet`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Subclass and override the method `ApplicationClass`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ApplicationClass` is an abstract class which implements some interfaces. We
    have overridden the `init()` method of the abstract class. You have to create
    the `HeaderHorizontalLayout` classes and add them as components to the window.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7525OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: MainApplication
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example we are using the customized jsp page to handle the access to
    the Vaadin application. The customized jsp is displayed to the user when user
    tries to access the Vaadin application. The user enters the username and password
    which is then authenticated by the Spring framework. On successful authentication
    the Vaadin page is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now access the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8086/Vaadin_Project3/`'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enter the login username and password you will be taken to the Vaadin page.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Vaadin – using Vaadin form* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Vaadin – using Vaadin form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have used the customized JSP page or the Spring-provided login pop
    up box or the jsp file. We have also demonstrated Spring Security integration
    with both Vaadin 6 and Vaadin 7\. So I was tempted to provide a complete Vaadin
    with Spring Security implementation. Let's create a Vaadin form and we will integrate
    it with Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a Vaadin 7 project in your Eclipse IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `MyLoginView` class that extends the panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `SecuredView` class that extends the panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `MyVaadinServlet` class that extends `VaadinServlet`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `VaadinRequestHolder` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `web.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `applicationContext.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement the `View` interface for the panel classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps given as follows are for creating a Vaadin login form and using it
    for authenticating the user with Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MyLoginView` for the login form will be loaded on application start up.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We have used the form layout and have added the username and password fields.
    We have added a button. On a button click we are doing authentication.
  prefs: []
  type: TYPE_NORMAL
- en: We are capturing the `VaadinRequest` object in the `requestHolder.UserNamePasswords`.
    The authentication token receives the input from the username and password fields.
    The token is then passed to the `AuthenticationManger` to authenticate the fields.
    If authentication is successful it will navigate to the secured page. It will
    also give notification to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '`Secured View` is to be used after authentication and to provide logout functionality.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The secured view has a label and a logout button. The logout button click event
    handles the `springlogout`. On logout the user is re-directed to the login page.
    The `LogoutHandler` class has a `logout ()` method that handles the authentication.
    I have used the navigator class. You can create an instance of navigator with
    UI class `getUI.Current` that gives a UI object.
  prefs: []
  type: TYPE_NORMAL
- en: This approach can be used in your panel classes. I have also passed the layout
    object to the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'A pictorial representation of the two classes is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7525OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Extend the Vaadin servlet to capture the request object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MyVaadinServlet`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The Vaadin servlet is configured in the `web.xml` file. It accepts the UI class
    as a parameter. In the previous code we have extended the Vaadin servlet and have
    overridden the `service ()` method, in which we are passing the request to the
    `VaadinRequestHolder` class. By doing this we will be passing the context object
    to `SecurityContextHolder` to start with the authentication.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7525OS_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Register the views in the UI class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Vaadin_project5UI`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this code we are registering the `LoginView` and the `SecuredView` and the
    default login view will be called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring the `web.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We have configured `MyVaadinServlet` in `web.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `application-Context.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example we have created a Vaadin login form. This is another option
    for creating a login form using the Vaadin framework classes if the developer
    doesn't want to use external jsp. This will make it a pure Vaadin application
    with a Spring Security application. The user is authenticated and authorized by
    Spring Security before showing the actual product catalog page. The Vaadin form
    submits the users' credentials to the Spring Security framework which does the
    authentication and authorization. The `MyVaadinServlet` class communicates with
    the Spring Security context to set the security context with the Vaadin application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow of Spring Security with Vaadin is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the Tomcat server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now access the URL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8086/Vaadin_Project5/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Vaadin login form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_06_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It also displays a message for bad credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_06_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After authentication you will be navigated to the secured page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_06_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on **Logout** you will be taken back to login view. The following
    screenshot displays the information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_06_013.jpg)'
  prefs: []
  type: TYPE_IMG
