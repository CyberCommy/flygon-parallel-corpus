- en: Creating a Page Layout with Floats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create a multicolumn layout supported in all browsers, we are going
    to use floats. Floats are very simple at first glance but have a few unintuitive
    quirks to them that can cause some frustration when not completely understood.
    This may be because the true origination of floats wasn't for layout, it was to
    achieve the common magazine technique where text flows easily around an image.
    So in this chapter, we're going to delve into floats. We'll go over the basic
    usage of floats and follow that up by creating a layout with floats (and curing
    the headaches caused by floats in later sections)
  prefs: []
  type: TYPE_NORMAL
- en: Float introductionâ€“flowing text around images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start this chapter with an introduction to floats. We'll talk about the
    original purpose of floats, followed by the basic problem that they cause and
    how to clear elements that come after floats. In this section, we'll also start
    work on a new HTML page about shark movies that you can find in the book download
    package.
  prefs: []
  type: TYPE_NORMAL
- en: The Shark movies page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we have a new HTML page about shark movies. If you look at this page,
    you''ll see an image on top of a title, on top of some text, and on top of a link;
    as you scroll down, you''ll see that there are three sections like that for each
    of the three movies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The HTML is fairly straightforward. There are three sections, each with a `div`
    tag with a class of `wrapper`, which is centering the content. Inside the `wrapper`
    class, there''s an anchor tag with an image inside it. Underneath the anchor tag
    is an `h1` tag containing the title and some paragraph text. This is followed
    by an anchor tag, which is a link to learn more. Here''s a screenshot of the first
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The original purpose of floats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at the final project, shown in the following figure. We want to
    float the image to the left and have the headline and text flow around it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s target that image in CSS. Instead of targeting the image in our selector,
    let''s actually target the image''s container, which is this anchor tag with a
    class of `figure`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'I don''t want to just target the `.figure` class as my selector because I may
    use this class on other image containers and may not want them all to be floated.
    So, let''s use a descendant selector based on its parent. Its parent is up at
    the top of the section, the `section` tag, which has multiple classes: `content-block`,
    `style-1`, and `wave-border`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a modular approach that we''ll get into more in the next section. The
    main class we''re looking for is `content-block`. The `style-1` and `style-2`
    classes are only controlling the two different color schemes and `wave-border`
    adds the repeating background image of the wave to the top of the first section.
    Finally, in our CSS, our selector is going to be `.content-block .figure`, so
    we are targeting any element that has a class of `figure` inside an element with
    a class of `content-block`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'So what we''ll type in this rule set, under the `margin` property, is `float:
    left`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When we refresh the page, we see that everything has gone to plan. This was
    almost too simple. We achieved almost exactly what we set out to do in all three
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add a background color to `h1` and `p` in our CSS, just to see what''s
    going on here. We''ll just give `h1` a background color of `deeppink` and a background
    color of `green` via `content-block`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice how the backgrounds go behind the image. The text is flowing to the
    right, but the elements themselves are no longer seeing the floated element, the
    image, as part of the normal flow. Floated elements themselves change when their
    display properties are affected. For instance, the anchor tag that was floated,
    or really the anchor with a class of `figure`, starts acting like a block-level
    element. It will now respond to width and margin top and bottom; as we''ve seen,
    it already responded to the margin bottom. However, it won''t necessarily force
    a new line. Let''s float it to the right, and it should have a very similar effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using the clear property to solve basic problems with floats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use the `clear` property to stop elements underneath the floated element
    from misbehaving. For instance, let''s add the `clear` property to the paragraph.
    We''ll add `clear: both`, which clears both left and right floated elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you refresh, you will see the paragraph text seated below the floated
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can do the same thing for `h1` and that will sit below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also just say `clear: right` because the float in the rule set above
    it is floated to the right.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After saving the CSS and viewing the site, and you will see it works. The `h1`
    tag also sits below `.figure`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, if you type in `clear: left` to your `h1` rule set, it won''t necessarily
    work because there are no left floated elements here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, `None` is the default value of both `float` and `clear`. So, we can say
    `clear: none` on both of these, and it will go back to how it was before we added
    the `clear` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, since `clear: none` is the default value, you can just take that whole
    property away from both of those selectors; this will have the same effect on
    the site. I hardly ever use clear left and clear right; the `both` value seems
    to be more than adequate most of the time.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we've seen the traditional use of floating elements and how
    elements underneath the float flow around the floated element. This can be stopped
    using the `clear` property. This technique is useful, but honestly, floats are
    even more useful for building multicolumn layouts. Let's take a look at that now.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a multicolumn layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Floats were designed to flow text around an image. However, floats are also
    the most common way of building a multicolumn layout. In this section, we'll look
    at how to float elements next to each other in order to create a page layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what we currently have in the HTML in the secondary section are three `div`
    tags with a class of `column`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot illustrates the final site. This is what we''re aiming
    for. We want three equal columns with a small gutter or margin in between:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In our current site, columns are stacked on top of one another. Right now,
    we have simple rows, so we want to fix that using floats. In our final site, we
    want to have everything centered in the middle of the page, but right now, all
    of our content goes from one edge of the browser window to pretty much the opposite
    edge of the browser window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's fix this by centering our `div` tags.
  prefs: []
  type: TYPE_NORMAL
- en: Centering an element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What we really need to do is to wrap the entire content in a `div` tag; so
    let''s do that. Go into the HTML file. In the line beneath the opening `section`
    tag, add `<div class="wrapper">` . And right before the closing `section` tag,
    close it with `</div>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, switch over to the CSS file. The `.wrapper` tag is going to be a more
    reusable class. To center any element, we''ll give it a margin, and we''ll use
    the two-value syntax: top and bottom are going to be zero, and left and right
    are going to be auto. We also have to give it a width of `960px`. Without a width,
    you really can''t center it using this margin technique:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'There, we have it; all of the content should now be centered inside this wrapper:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `wrapper` class, like I said, is nice and reusable. I will use the `wrapper`
    class anywhere on the site where I want to center a collection of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Floating columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, back to the order of our business here: floating the three columns on our
    home page. To do this, I want to give each `div` tag a class of `column` that
    we can style. So, in the HTML, let''s go to each `div` tag in the secondary section
    and use the nice multiple cursor feature of Sublime Text to add `class="column"`
    to all three of them at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In my CSS I have made a big comment denoting this section of my CSS for these
    three columns, I encourage you to as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under this comment, we''ll target `.column` and apply `float: left`. The width
    will be `320px`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Ideally, whenever you float elements, try to add a width. If all three columns
    are `320px` , that''s going to add up to exactly 960 pixels and fit the width
    of that wrapper perfectly. If we were to use a number that added up to more than
    960 pixels, then not all of the three `div` tags would fit in that space. One
    would wrap to the bottom so they wouldn''t have all the three `div` tags on one
    row. It''s important that the width of all the floated `div` tags is never more
    than the parent `div` tag. So save this and refresh the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It looks like all the three columns are floated next to each other. That worked
    out pretty well, except we don''t have any margin between columns. So let''s go
    back to our code and let''s give it a `margin-left` property of `30px`. Save this
    and refresh the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We get a margin of `30px`, but we also get our third column drifted down to
    the bottom because it can't fit in the width allowed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s fix this by reducing the width of the columns to `300px` each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you look at the browser, you will also see that we don''t need a `margin-left`
    on the first column. We don''t need a left margin next to empty space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's get rid of this margin left on the first column. We can do this by targeting
    that individual `.column` property using a pseudo class called `first child`.
  prefs: []
  type: TYPE_NORMAL
- en: Targeting .column using a pseudo class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding the `.column:first-child` selector will target the first appearance
    of the column element. We''ll add `margin-left` as zero. When we save this, we
    get three equal columns with a `margin-left` for each of them, except the first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This technique would work just as well with two columns, four columns, or any
    number of columns.
  prefs: []
  type: TYPE_NORMAL
- en: Collapsed containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, everything is great with the columns, except that if you try and scroll
    the page down, you will see that we are really tight to the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see what happens when we add a `margin-bottom` property to the container
    that wraps around everything: `secondary-section`. Let''s say `margin-bottom:
    40px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If we save this, it really does nothing in the browser. The content is still
    sitting right at the bottom. Let me further illustrate this problem. If I had
    a background color of green, then you''d expect the entire background to be green:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if we add the preceding code and save it, the background doesn''t
    become green. So, let''s actually inspect this element. Let''s inspect secondary-section
    in the browser using Chrome''s DevTools. We will see both margin-bottom and background-color
    are in the process of getting applied. But we don''t see anything in green on
    the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you put your mouse over the `secondary-section` element, you will see
    it highlights the space that it occupies in that peachy color on the screen (you''ll
    see it as a different shade of gray in the following screenshot if you''re looking
    at a printed copy):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The container has actually collapsed. This is what happens when all the elements
    inside a parent element are floated: the container collapses, floats are taken
    outside the normal flow, and the container has no height because of this.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look and see what we can do to fix this.
  prefs: []
  type: TYPE_NORMAL
- en: Solving the problems of floats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Okay, so let''s look at our problem. You''ve learned how to change stacked
    rows into horizontal columns in order to achieve a multicolumn layout, but our
    containing element around our floated elements has totally collapsed and lost
    its height because all the elements inside it are floated. As a collapsed element,
    it doesn''t look like it''s responding to the `margin-bottom` property or the
    `background-color` we''ve assigned to it. So, in this section, we''ll look at
    four separate methods to fix this collapse, and we''ll try to understand the best
    way to deal with it. First, we''ll use the `clear` method, followed by the `overflow:
    hidden` method, followed by the `float` method, and then finally the most preferred
    method: the `clearfix` hack.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the clear method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s solve this using the `clear` property. What we''ll do at the end of
    `secondary-section` is add a class of `clear` to a new `div`, using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll go into our CSS, and in the area reserved for global styles, underneath
    the ruleset targeting the `wrapper` class; this is where we''ll create the `clear`
    selector and add `clear: both`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if we save this and return to the browser, our background color will be
    green with a bottom margin of `50px`. Everything is working very well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, we''ve added extra non-semantic markup to our page. We *may* even
    get an SEO deduction for this. Let''s explore other ways to do this without adding
    the extra markup. Get rid of that extra markup we just added to our HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Our collapse will return. Now we won''t be able to see the green background
    anymore; that''s how we know the collapse is there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using overflow property with hidden value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next method we''ll look at is `overflow: hidden`. Go to your CSS and find
    the `.secondary-section` class. What we can do is add the `overflow` property
    with the value of `hidden`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`overflow: hidden` is a true hack. It was never meant for remedying collapsed
    containers; it was meant for hiding any content image or text that overflowed
    its container. However, magically, `overflow: hidden` also clears the collapse.
    If we save our CSS and go to our site, we will see this is evident by the background,
    which is now green in color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A small problem with `overflow: hidden` is that you may want the content to
    overflow the container, for instance, a drop-down menu or tooltip. The `overflow:
    hidden` hack will hide that overflowâ€”no surprises there! It''s a solution, but
    it may not always be ideal. For instance, in our exact scenario, we may want this
    octopus to kind of creep out of its container. Let''s go into Chrome DevTools
    and give it `margin-top: -50px`. As you can see, now the top of the image is no
    longer showing and the overflow is hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So that''s not a good fix for us. Let''s delete that `overflow: hidden` declaration
    from our CSS file and look at the next method: the `float` method.'
  prefs: []
  type: TYPE_NORMAL
- en: The float method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can prevent elements from collapsing by floating the container to the left
    or to the right. Let''s do this; let''s add `float: left` or `float: right` to
    our `secondary-section`. Either will work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we save this, we will see that we have the green background, so the collapse
    is no longer taking place, but the obvious problem is we''ve floated to the left.
    We wanted this div to be centered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This method has an obvious drawback. There are some circumstances and some
    situations where it would be a perfect solution, but in this one, there''s an
    obvious problem: we are no longer centered. Remove `float: left` from your CSS
    and explore my favorite, and I think the best, solution: the **clearfix hack**.'
  prefs: []
  type: TYPE_NORMAL
- en: Clearfix hack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we look at the following CSS, right below our reset, these rulesets make
    up our **clearfix**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This code was actually part of our base layer of CSS. Basically, what this does
    is create a pseudo element before and after any element with a class of `grouping`.
    This pseudo element has a blank space for content and the display is set to table.
    Then we have the `after` pseudo element beneath that chunk of code, which has
    the `clear` property set on it and clears any floats before it.
  prefs: []
  type: TYPE_NORMAL
- en: You might sometimes see `clearfix` as the class name instead of `grouping`.
    I tend to use `grouping` because I think it makes more sense; you're kind of grouping
    elements, and that's a little bit more semantic. It doesn't really matter though;
    `clearfix` and `grouping` both do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'All right, that''s already in the CSS, so there''s nothing more we need to
    do except go to `secondary-section` in the HTML and just add this `grouping` class
    to it. So we''re adding a second class to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'When we save and refresh, we have our container; the collapse is fixed. In
    the next screenshot, we see the background color and the bottom margin. We''re
    in pretty good shape here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The clearfix will work in IE8 but not IE7 unless you add an IE-specific style
    sheet. This actually goes in the index. So up in the head of `index.html`, I have
    this style sheet, shown in the next screenshot, specifically for IE7\. What it
    does is give grouping a zoom of `1`. This triggers something called `hasLayout`
    in older versions of IE, which clears the collapse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Don't worry if that doesn't make too much sense to you; it doesn't necessarily
    have to. However, just know that this allows the clearfix hack to work in older
    versions of IE. So, all in all, this is very deep browser support, and it's so
    very easy to use that it's many frontend developers' preferred way of clearing
    collapsed floats. It's certainly my favorite way of going about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you learned about fixing the collapse of parent elements caused
    by floats using:'
  prefs: []
  type: TYPE_NORMAL
- en: An empty clear div.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `overflow: hidden`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By floating the parent element. All three of these worked but had minor to major
    flaws.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The clearfix hack with very deep support, ease of use, and semantic style tends
    to win as the best method. I use it on every project. It can easily solve one
    of the biggest problems with floats: collapse. Another thing I like about the
    clearfix hack is that it is a very modular approach to CSS. Just add the `clearfix`
    class anywhere to your markup and you''ve gotten rid of collapsed containers.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we went over the traditional use of floating elements: flowing
    text around images. We then looked at using floats to build a multi-column layout.
    Finally, we learned how to tackle the problems that come with using floats. We
    found that the clearfix hack is the best method for fixing collapsed floats. In
    the next chapter, we''re going to expand on modular CSS as we create modern buttons
    using a modular approach.'
  prefs: []
  type: TYPE_NORMAL
