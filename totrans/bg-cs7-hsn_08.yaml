- en: Anonymous Methods and Objects That Run Their Own Delegates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will talk about anonymous functions.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Show Results button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open up a project and, inside the <html>, put in a single button that says `Show
    Results`. For this, go to the Toolbox and grab a `Button` control. Drag and drop
    it below the line beginning with `<form id=...`. You can delete the `<div>` lines,
    as you don't need them. Be sure to insert a `<br>` tag at the end of the Button
    line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will display some results to the user. To do this, go to the Design
    view, and double-click on the Show Results button. This takes us into `Default.aspx.cs`.
    Delete the `Page_Load` block. The relevant portion of the starting code for this
    project should look like *Figure 8.3.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c3e6ab4-f981-44b0-a56b-8fa6525375d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3.1: The starting code section for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Streamlining writing functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within the body, but above the line beginning with `protected void Button1_Click...`,
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Remember, `=>` is an *expression member*. It's a function. In other words, it
    takes the form of a Lambda. At the end of the line, we return `x * x`. As you
    can see, this is a very streamlined way of writing functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add namespaces. So, after `using System`, enter the following
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, within the event for the button, we will place the following code list;
    so, enter this line between a set of curly braces underneath the line beginning
    with `protected void Button1_Click...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this line, you are making a new list of `double` data type and then you will
    initialize it. You can do this a couple of ways, but you can just write an array
    and then enter some values. It doesn't really matter what they are. This will
    make a list of `double` data types.
  prefs: []
  type: TYPE_NORMAL
- en: Performing an action on all of the values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, one thing that you can do is to perform an action on all the values. So,
    the way to do that is to enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is how you can call `ShowSquare` on each value. Notice that, in this case,
    `ShowSquare` is named. `ShowSquare` represents this expression, `sampLabel.Text
    += "<br>" + (x * x)`; so it's a *named quantity*.
  prefs: []
  type: TYPE_NORMAL
- en: Making an anonymous function or method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, if you want, you can also do stuff that does not involve names. For example,
    you can enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll define the body, or the logic, between a set of curly braces.
    This is a nameless or *anonymous* one. For example, you can enter the following
    below this line (notice that you close with a parenthesis and semicolon after
    the closed curly brace):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This one does something similar to the previous line. The only difference is
    that we are not calling anything named; we are just defining an *anonymous function*,
    a nameless function using a `delegate` keyword. This does accept one value, of
    course, the `x` value. Then you cube the `x` value; `Math.Pow(x, 3)` means, cube
    it and then display it on the label using `+=` to append and `<br>` to push down
    a line, as usual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the next stage, you can also do stuff such as the following, which
    is quite interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Believe it or not, though it isn't recommended, after `new Thread` you can even
    can type `dele` instead of `delegate`, in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when you make an object of this type, you can also create a delegate.
    So, when you make this `Thread` object, you''re also making an anonymous function.
    In other words, you''re sending a piece of processing so that it runs on its own
    thread, and then you can stick in stuff such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note again that here you close with a parenthesis and semicolon after the closing
    curly brace.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a thread
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, with threads like this, you get a thread started on the next line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will start the thread in its own little separate piece of processing, separate
    from the main program so to speak.
  prefs: []
  type: TYPE_NORMAL
- en: So, the big idea here is that this anonymous stuff is quite powerful. For example,
    you can build an anonymous function or method such as the preceding one we created.
    It runs, but it's not named, and basically, even when you make a new `Thread`
    object, you can make a delegate. In other words, it can do a bit of processing
    of its own and you don't have to put this off into other functions or anything
    like that.
  prefs: []
  type: TYPE_NORMAL
- en: Running and modifying the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s run the program. For this, crank it up in your browser and click
    on the Show Results button. Take a look at the results, as shown in *Figure 8.3.2*.
    There''s one slight issue with the program as it''s written. We will learn the
    reason for this problem momentarily and then fix it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29bb8c4b-27c0-43d0-840b-428fae631693.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3.2: The initial run of our program'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, there''s one more function I want to tell you about, `Join`. Enter the
    following as the next line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you hover your mouse over `Join`, the pop-up tip says Blocks the calling
    thread until the thread terminates, while continuing to perform standard COM and
    Send, Message Pumping. If you hover your mouse over `Start`, the pop-up tip says
    Causes the operating system to change the state of the current instance to ThreadState.Running.
    In other words, in the `Thread td = new Thread(delegate ()` block, `Thread` is
    an object. In this case, you're making a new thread that has a delegate, so it
    runs off in its own thread of processing, away from the main program. So, it's
    kind of interesting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, notice that, when we printed that stuff, there were only really two main
    lists, with the second one essentially appended to the first. So, let''s do it
    this way; otherwise, we will not be able to see the effect clearly. Under the
    preceding `vals.ForEach(ShowSquare)` line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note that I separated this with a long-dashed line in quotes.
  prefs: []
  type: TYPE_NORMAL
- en: Next, after this one, let's do one more beneath the closing curly brace, parenthesis,
    and semicolon after the `sampLabel.Text += "<br>" + Math.Pow(x, 3)` line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we remove `td.Join()` and run the program, there are only two lists,
    as shown in *Figure 8.3.3*. There should be three of them, however:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17558de6-54b0-4090-920b-9d6680e25bc4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3.3: The modified run shows only two lists'
  prefs: []
  type: TYPE_NORMAL
- en: 'So re-insert `td.Join();` and take a look at it again in your browser. Now,
    as you can see in *Figure 8.3.4*, there are three lists, as there should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edad6c9e-7354-4175-b7c8-4022410045a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3.4: The final program run shows three separate lists'
  prefs: []
  type: TYPE_NORMAL
- en: 'Again to review, we did the following in this program:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we called the `vals.ForEach(ShowSquare)` bit, which generates a list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we called the block beginning with `vals.ForEach(delegate (double x)`,
    as an anonymous function or method that generates a list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, with the block beginning with `Thread td = new Thread(delegate ()`, we
    created this anonymous object called `td`, which is a `Thread` class that has
    its own anonymous method inside, which runs in its own separate thread.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we started it, and the `Join` function blocks the current thread, waiting
    for the `Thread td = new Thread(delegate ()` block to execute, and then it resumed,
    so that everything was displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are the fundamentals of anonymous constructs of this kind.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about anonymous functions. You streamlined writing
    functions, performed an action on all of the values, made an anonymous function
    or method, and started a thread.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will take a look at the basics of languages: Language
    Integrated Query. It''s a powerful way of manipulating data directly within your
    C# code.'
  prefs: []
  type: TYPE_NORMAL
