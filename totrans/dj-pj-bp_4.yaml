- en: Chapter 4. A Car Rental App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, our hypothetical client is a car rental firm. They want us
    to create a website that their customers can visit, look at the available inventory
    of cars, and finally book one of those cars. The client also wants an admin panel
    where they can manage the inventory and booking requests.
  prefs: []
  type: TYPE_NORMAL
- en: We will be creating this web app in (drum rolls) Django! You should be confident
    enough in Django by now that the frontend of the web app will not be a challenge
    for us. The focus of this chapter will be on customizing the Django built-in **admin**
    app to fit the requirements of our client. Most of the time when you need an administration
    panel for the web apps you create, you can do pretty much everything you need
    just by customizing the Django admin. Sometimes the requirements are complex enough
    that you need to create a custom administration panel, but that is seldom the
    case. So the knowledge we gain here will prove extremely useful to you in your
    web development career.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main takeaways from this chapter will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Django admin model forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom filters to the admin objects list page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding and customizing Django admin templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code pack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I have mentioned, by now you should have a firm grasp of creating the components
    for a basic web app, including the views, templates, models, and URL configurations,
    so we will not be discussing these parts of the web app in this chapter. The code
    pack for this chapter is thus much bigger that the previous ones. I have created
    all the models and some of the views, templates, and URLs. We will mostly be focusing
    on how to tame the Django admin app to suit our needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'I could not think of a fancy name for this project, so I just called the project
    *carrental*. As always, create a new virtual environment, install Django in this
    environment, and run the migrate command to initialize the database. For this
    project, we need to install one more Python package, Pillow, which is an image
    manipulation library for Python. To install it, run the following command with
    the virtual environment activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This might take a minute or so as some compilation may be required. Installing
    Pillow is a bit more complicated because it relies on third-party libraries. If
    the install command fails for you, take a look at the documentation on installing
    Pillow at [https://pillow.readthedocs.org/en/3.0.x/installation.html](https://pillow.readthedocs.org/en/3.0.x/installation.html).
    This page has step-by-step guides for each operating system, and following the
    guide there, you should be able to install Pillow easily. Just remember that you
    need the library to run and work on the car rental application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Pillow has been installed, run the development server using the `runserver`
    command and open up the web app at `http://127.0.0.1:8000`. You should see the
    following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code pack](img/00698_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fixtures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our database is empty, but right now we don't have any views to add objects
    to our database. We could do what we did in the last chapter and create a management
    command, but there's an easier way. I have added three `Car` objects to the database
    and then created a dump of this data that you can load. A data dump like this
    is called a fixture. We'll discuss fixtures in a bit; for now, let's see how to
    use them to load data in our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your command line, run this command in the project root with the virtual
    environment activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Refresh the web page and now you should see a web page similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fixtures](img/00698_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have three cars in our database. You should play around the app for a
    while. It has a details page for each car and allows you to submit a booking request
    from the details page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you try to use the booking form, note that the start and end dates need to
    be in the YYYY-MM-DD format. For example, 2016-12-22 is a valid date format accepted
    by the form.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about fixtures, take a look at the Django documentation at [https://docs.djangoproject.com/en/stable/howto/initial-data/](https://docs.djangoproject.com/en/stable/howto/initial-data/).
    Fixtures are a feature of Django that let you dump the data in your database in
    simple text files using a number of formats. The most commonly used format is
    JSON. Once you have a fixture file, you can then use it to populate your database
    with data, as we did here, using the `loaddata` command.
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on to admin customization, I want to talk about a couple of new
    things that I have used in the models for this app. You should take a look at
    `frontend/models.py` to see how our models are configured, and then read the following
    information, which explains the new concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Image and File fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''d like to take a minute to introduce the `ImageField` model field. This
    is the first time we are seeing it, and using it is a bit different than other
    model fields. Here is our `Car` model that uses this field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of the information in this section about `ImageField` also relates to `FileField`.
  prefs: []
  type: TYPE_NORMAL
- en: '`ImageField` is special and different from all the other database model fields
    that we have looked at for a few reasons. Firstly, it needs the Pillow image manipulation
    library to work, which is why we had to install it at the start of the chapter.
    If we had tried to run our application without Pillow installed, Django would
    have complained and never started the development server.'
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, `ImageField` is one of the few Django database model fields that relies
    on having a few settings configured before it can be used. If you look at the
    `carrental/settings.py` file near the end, you should see that I have set the
    `MEDIA_ROOT` and `MEDIA_URL` variables.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, you can see that we passed a `upload_do` parameter to `ImageField` and
    set it to `car_images`. Both `FileField` and `ImageField` database model fields
    require this parameter. This parameter is the name of the folder, relative to
    the configured `MEDIA_ROOT`, where any files being uploaded to your application
    through the Image/File fields will be saved. This is a concept that took me some
    time to figure out, so I'll explain it a bit further.
  prefs: []
  type: TYPE_NORMAL
- en: You should see that I have `MEDIA_ROOT` set to the `media` folder in the project
    root. If you take a look in the `media` folder, you should see another folder
    called `car_images`. This is the same name that we passed in the `upload_to` parameter.
    This is what I meant when I said that the `upload_to` parameter is a folder name
    *relative* to the configured media root.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing I had trouble understanding when I started using Django was the difference
    between `MEDIA_ROOT` and `STATIC_ROOT`. To put it simply, `MEDIA_ROOT` is where
    all the files uploaded by the site users live. These files are uploaded using
    the Image/File fields with forms.
  prefs: []
  type: TYPE_NORMAL
- en: '`STATIC_ROOT` is where you put the static files associated with your web applications.
    These include CSS files, JavaScript files, and any other static files that are
    served as is. These have nothing to do with the Django part of your web application;
    these are delivered to the user as is, usually via a web server such as nginx.'
  prefs: []
  type: TYPE_NORMAL
- en: So now that you have everything configured, how do you upload files using `ImageField`?
    Well, Django supports a couple of different ways to do this. In our code, we will
    use `ModelForm`, which handles all the details for us. There are other ways as
    well. If you want further details, you should look at the Django documentation
    dealing with file uploads. It's quite comprehensive and lists all the different
    ways you can handle file uploads. You can refer to it at [https://docs.djangoproject.com/en/stable/topics/http/file-uploads/](https://docs.djangoproject.com/en/stable/topics/http/file-uploads/).
  prefs: []
  type: TYPE_NORMAL
- en: get_absolute_url
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One more thing that we are seeing for the first time in the `Car` model is `get_absolute_url`.
    There is nothing special about the implementation. It's just a class method that
    returns a URL, which it builds using the `reverse` function and the primary key
    of the object. This isn't anything new. We have been creating URLs like this for
    detail pages since the first chapter. What's interesting to note here is that
    Django assigns special meaning to the `get_absolute_url` method on a model class.
    There are a number of places where Django will automatically use the return value
    of the `get_absolute_url` method if the method exists on a model object. For instance,
    the `CreateView` generic method uses it. If you do not provide a `success_url`
    attribute and a custom `get_success_url` method on the view class, Django will
    try to get the URL to redirect from the `get_absolute_url` method on the newly
    created object if the method is defined in the model class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django also uses this method in the admin app, as we''ll see later on. If you
    are interested, you can take a look at the documentation for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.djangoproject.com/en/stable/ref/models/instances/#get-absolute-url/](https://docs.djangoproject.com/en/stable/ref/models/instances/#get-absolute-url/).'
  prefs: []
  type: TYPE_NORMAL
- en: The Django admin app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have looked at what new features were used in the code pack, let's
    move on to the main topic for this chapter—the Django **admin** app. The admin
    app is quite possibly one of the main reasons for the popularity of Django over
    other similar web frameworks. It is the embodiment of the *batteries included*
    nature of Django. With minimal configuration, the admin app provides a fully featured
    and extremely tailored CMS, enough to rival big names such as WordPress and Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how easy it is to configure and customize the
    admin to get most of the functionality that you will want in the admin panels
    of your web apps. Let's start by fixing the most immediate problem for our fictional
    client, a car rental business owner, which is the ability to add and edit car
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you start a new application, Django by default creates an `admin.py` file
    in the application folder. Change the `frontend/admin.py` file in our project
    to match this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it. Really! Three lines in total and you get the ability to edit and
    add `Car` objects to your database. That''s the power of Django, right there in
    those three lines. Let''s test it out. In your browser, visit `http://127.0.0.1:8000/admin`
    and you should see a page similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Django admin app](img/00698_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't worry if your admin looks slightly different. Django updates the theme
    for the admin every once in a while and, depending on which version of Django
    you are using, your admin may look slightly different. However, all the functionality
    will be there and will almost always have the same interface layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Oops, there is one thing that we left out. We didn''t create a user to log
    in with. This is easily fixable. In the command line, run this command with the
    virtual environment activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Just follow along with the prompts to create a new user. Once you have created
    the user, use it to log in to the admin. After logging in, you should see something
    similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Django admin app](img/00698_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A few things to note in this screen. First, Django will by default add links
    to manage **Groups** and **Users**. Secondly, any models that we configure to
    show up in the admin are grouped by their application name. Thus, the link to
    manage **Cars** shows up under the label for the app that defines the model, **Frontend**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you pay close attention, you might note that the admin lists the plural name
    of our `Car` model. How does it know the plural name? Well, it simply adds an
    's' in front of our model name. In a lot of cases, this doesn't work, for instance,
    if we had a model called `Bus`. For cases like this, Django allows us to configure
    the plural name for a model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try editing one of the car objects that we have in our database. Click
    on the **Cars** link and you should see a screen similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Django admin app](img/00698_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The list doesn''t look very useful. We have no idea which car object is which.
    We''ll fix this in a bit. For now, just click on the top car object in the list,
    and you should see a page where you can edit the details for that object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Django admin app](img/00698_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Django admin docs refer to this list as changelist. I will just call it
    the list view in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change the name of the car. I changed **Dodge Charger** to **My New Car
    Name**. Scroll to the bottom of the page after changing the name and click on
    save. To make sure that our changes were actually saved, open the home page for
    our app at `http://127.0.0.1:8000/` and you'll see that the car you edited will
    have the new name displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try something more complicated—adding a new car! Click on the **ADD
    CAR** button on the right-hand side of the screen and fill in the details however
    you want. Just be sure to select the `is_available` checkbox; otherwise, the new
    car won''t show up on the home page. I filled up the form as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Django admin app](img/00698_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'I also downloaded an image for the car from Google Images and selected it for
    the **Image** field. Click on the save button and visit the home page again. The
    new car you added should show up at the end of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Django admin app](img/00698_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As I mentioned at the start of this section, the power of the Django admin is
    one of the main reasons for Django's popularity. By now you should see why. In
    three lines, we have a complete and working, albeit not very pretty, content management
    system that the client can use to edit and add cars to their site.
  prefs: []
  type: TYPE_NORMAL
- en: However, in its current form, the admin looks like a quick hack job. The client
    will probably not be very happy with this. They can't even see which car they
    are about to edit before the edit page opens up. Let's fix this first. We will
    come back to the code we just wrote for the admin in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the car names
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you remember in the previous chapter, we looked at the `__str__` method
    on a model class. I also said that Django uses this method wherever it needs to
    display a string representation of the model. Well, that''s exactly what the Django
    admin does in the list view for the `Car` model: it displays the string representation
    for it. Let''s make the list more user friendly by changing the string representation
    to something that the user can understand. In the `frontend/models.py` file, add
    this `__str__` method to the `Car` model class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see what the list of `Car` objects looks now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing the car names](img/00698_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's a much better user experience as the user can now see which car they
    are about to edit.
  prefs: []
  type: TYPE_NORMAL
- en: Booking management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s leave the car admin section as it is for now and move on to the admin
    for `Booking` model. Every time a visitor to the site submits the **Book Now**
    form accessible from the car details page, we create a new `Booking` model record.
    We need a way to allow the client to look at these booking enquiries, filter them
    based on some criteria, and accept or reject them. Let''s look at how to do this.
    For a start, let''s make sure that our The `Booking` model shows up as an item
    in our admin panel. To do so, add these two lines to your `frontend/admin.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you take a look at the admin panel now at the URL `http://127.0.0.1:8000/admin/`,
    you should see that the `Booking` model has been added as a link. Open up the
    link and you should see a list page similar to the one for the `Car` model that
    we saw before. If you had submitted any booking requests, they should show up
    in the list. It's not pretty, but at least it works. Let's make it better. For
    one, we need to give the administrators more information about each booking enquiry.
    It will be good if we can show the customer's name, booking start and end dates,
    and whether the booking has already been approved.
  prefs: []
  type: TYPE_NORMAL
- en: While we could use the `__str__` method again to create a string with all this
    information, so much information in one column isn't a pretty sight. Additionally,
    we would be missing out on the sorting capabilities that the Django admin provides
    us with for each model list page.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at how we can display multiple fields from our model in the list
    view. Along the way, you will also learn a bit more about how the admin works
    internally.
  prefs: []
  type: TYPE_NORMAL
- en: A peek behind the curtain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you take a minute to think about what we have been able to achieve with just
    a couple of lines of code, you would probably be amazed at the power of the Django
    admin. How is this power achieved? Well, the answer to that is very complicated.
    Even I don't yet understand fully how the admin app works. It is a very complex
    piece of programming.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even though the admin app is quite complex, it is still Python code. If you're
    feeling adventurous or just generally bored one day, try to look at the source
    code for the admin app. It's in the `VIRTUAL_ENV/lib/python3.5/site-packages/django/contrib/admin`
    folder. Replace `VIRTUAL_ENV` with the folder that holds the virtual environments
    you create for your projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the main components of the admin system is the `ModelAdmin` class. Just
    as the `models.Model` class allows us to define complicated database models using
    a very simple class definition, the `ModelAdmin` class allows us to customize
    the admin interface for a model in great detail. Let''s see how we can use it
    to add extra fields to our list of booking enquiries. Change the `frontend/admin.py`
    file to match the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you open up the admin list page for the `Booking` model, you should
    see something similar to this with all the important fields displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A peek behind the curtain](img/00698_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This presents the user with a very nice tabular view. The client now sees all
    of the relevant details and has the ability to sort the table according to their
    needs. Django is also helpful enough to show the date values in a nice format.
    Let's look at what we have done here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first created a `ModelAdmin` subclass called `BookingModelAdmin`. We then
    configured the fields that we would like to show in the list page using the `list_display`
    attribute. Finally, we need to associate our `ModelAdmin` class with the `Booking`
    model class so that the admin can customize itself according to our requirements.
    We do that using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look at how we register the `Car` model, it looks similar to the `Booking`
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: That's because it is the same thing. If you don't provide a custom `ModelAdmin`
    subclass, Django uses the default options, which is what we see with the `Car`
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the user experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While we have improved upon the base admin interface quite a bit just by showing
    the relevant fields on the list page, we can do more. Let''s look at some actions
    that an administrator might want to take for the booking enquiries that the site
    receives:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing only the booking enquiries that have been approved or the ones that
    have not yet been approved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for a booking by customer name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Approving or not approving a booking enquiry quickly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting multiple booking enquiry objects and sending e-mails to the customers
    about their approval/disapproval
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our first feature, we want to allow the user filtering on the displayed
    objects. There should be a filter on the page that allows them to see only bookings
    that have been approved or not approved. To do so, the Django admin provides you
    with a `list_filter` attribute on the `ModelAdmin` subclass. The `list_filter`
    attribute holds a list of fields that you can filter on. In our `BookingModelAdmin`
    class, add the following `list_filter` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it. Once you have added this line to `BookingModelAdmin`, open up the
    bookings list page; on the right-hand side, you should see a new sidebar where
    you can select which bookings you want to view—only those that are approved or
    those that are not approved, or both. It should look similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Filtering objects](img/00698_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Searching for objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just as the Django admin has built-in support for filters, it also provides
    an easy-to-use way to add search. We want our client to be able to search bookings
    by the customer name field. To do so, add the `search_fields` attribute to the
    `BookingModelAdmin` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: That's it. Once you have added this attribute, you should see a search box at
    the top of the booking objects list. Type in a few sample queries and see how
    it works. If you have more than one field that you want to make searchable, you
    can add that to the list of `search_fields` as well.
  prefs: []
  type: TYPE_NORMAL
- en: If you have more than one field name in the list, Django will do an OR search.
    This simply means that for a given search, ALL records that have at least ONE
    matching field value will show.
  prefs: []
  type: TYPE_NORMAL
- en: Quick edit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The third feature on our list is to allow admins to quickly mark a booking
    as approved/not approved. The Django admin provides another built-in feature that
    we can configure to get what we need. In your `BookingModelAdmin` class, add the
    `list_editable` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you open the booking list page now, you will notice that instead of the icon
    that was shown in the `is_approved` column before, you now have a checkbox and
    a **Save** button added at the end of the list. You can select the checkboxes
    for bookings you want to approve and deselect it for the ones you want to disapprove,
    and click on **Save**. Django will then save your changes to multiple objects
    in one go.
  prefs: []
  type: TYPE_NORMAL
- en: 'By now, our Booking list page looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quick edit](img/00698_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Admin actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last thing on our list of features is the ability for the user to select
    multiple booking enquiry objects and send out an e-mail to `customer_email` for
    each `Booking` object containing the approval status of the booking. For now,
    we will just print out the e-mail on the console to test this feature out. We
    will look at sending e-mails from Django in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, most of the editing that we did with the Django admin was on a per
    object basis. You select an object, edit it, then save it, and start over. Except
    for the last feature (quick edit), we have been editing objects one at a time.
    However, sometimes you want the ability to perform a common action on multiple
    objects, like we need with our e-mail feature. To implement features like these,
    the Django admin provides **Admin Actions**.
  prefs: []
  type: TYPE_NORMAL
- en: Admin actions are methods on the `ModelAdmin` class that are passed a list of
    objects that the user has selected. These methods can then take some action on
    each of these objects and return the user to the changelist page again.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actually, I am simplifying this a bit. Admin actions don't need to be methods
    on `ModelAdmin`. They can be standalone functions as well. However, it's usually
    a good programming practice to declare them in `ModelAdmin` that uses them, so
    that's how we will do it here. You can find more details in the documentation
    for admin actions at [https://docs.djangoproject.com/en/stable/ref/contrib/admin/actions/](https://docs.djangoproject.com/en/stable/ref/contrib/admin/actions/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Django admin by default provides one action: delete. If you open the **Action**
    drop-down at the top of the list of bookings, you should see this menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Admin actions](img/00698_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To define an admin action, you first need to create a method on the `ModelAdmin`
    class and then add the name of the method to the `actions` attribute on the class.
    The `actions` attribute is a list like all the other attributes that we have seen
    till now. Modify the `BookingModelAdmin` to match the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try it out before looking into what the code does. Refresh the `changelist`
    page for the Booking model and look at the **Action** drop-down. It should have
    a new option, **Email customers**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Admin actions](img/00698_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To test it out, select some booking objects from the list, select the **Email
    customer** action from the drop-down menu, and click on the **Go** button next
    to the drop-down. After the page loads, look at your console. You should see something
    similar to what''s shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Let's look at what we've done here. As I said before, an admin action is just
    a method on the `ModelAdmin` class that accepts a `request` object and `queryset`
    as parameters, and then performs the required operation on `queryset`. Here, we
    create an e-mail body text for each booking object and print it to the console.
  prefs: []
  type: TYPE_NORMAL
- en: UX improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While the system is now good enough for our client to use, there is definitely
    room for improvement. For a start, the user isn''t given any feedback whether
    the **Email customers** action was performed. Let''s fix this first. Add this
    line to the end of the `email_customers` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Try using the e-mail action again. Now when the page reloads, you see a nice
    success message that assures the user that the action they wanted was completed.
    Small improvements in UX go a long way in helping the user navigate and successfully
    use your product.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, let's look at naming the action. For this action, Django comes up
    with a pretty good name—**Email customers**. It's simple and to the point. However,
    it's not as clear as it should be. It doesn't convey to the user what e-mail is
    being sent. In a larger system, the client could potentially send many types of
    e-mails, and our action name should be clear about which e-mail we are talking
    about.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to change the name of the admin action, we need to give the method
    an attribute called `short_description`. As methods are also objects in Python,
    this is pretty easy. Change the `BookingModelAdmin` class to match the following
    code. The new line to add is highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the new line (the last one) is not part of the function body. It''s
    indented at the same level as the function definition and is actually part of
    the class rather than the function. Refresh the list page and take a look at the
    action drop-down again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![UX improvements](img/00698_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter probably had the least amount of code written for any chapter in
    this book. However, the functionality that we built here is probably more complicated
    than what we built in most chapters. I said at the start of the chapter that one
    of the reasons for the popularity of the Django framework is the admin app. I
    hope that by now you agree with me.
  prefs: []
  type: TYPE_NORMAL
- en: With less than 20 lines of code, we were able to create a system that rivals
    most CMS systems out there and is still more tailored to our client's needs. Unlike
    most CMS systems, we don't treat `Car` and `Booking` objects as pages or nodes.
    In our system, they are first-class objects, each with its own fields and individual
    functionality. However, as far as the client is concerned, the admin works like
    it would for any CMS, probably easier, because there are no extra fields like
    there are in most CMS solutions.
  prefs: []
  type: TYPE_NORMAL
- en: We have barely begun to scratch the surface of customizing the admin. There
    are a lot of features provided by the admin, catering to most scenarios required
    by an administration panel. All of this power is easily available to use by changing
    a few settings on `ModelAdmin`. In all the Django applications that I have developed,
    I have needed to create a custom administration panel only once. The Django admin
    is so customizable that you just configure it to match what you need.
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend that you look at the documentation of the Django admin at
    [https://docs.djangoproject.com/en/stable/ref/contrib/admin/](https://docs.djangoproject.com/en/stable/ref/contrib/admin/).
    If you ever need to create an administration project for your web application,
    do check whether the admin provides the functionality that you want. More often
    than not, it does and saves you a ton of effort.
  prefs: []
  type: TYPE_NORMAL
