- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Doctrine 2 has become the most popular modern persistence system for PHP. It
    is distributed with the standard edition of the Symfony2 framework, can be used
    standalone in any PHP project and integrates very well with Zend Framework 2,
    CodeIgniter, or Laravel. It is efficient, automatically abstracts popular database
    managing systems, supports PHP 5.3 features (including namespaces), is installable
    through Composer, and has an extensively tested quality code base.
  prefs: []
  type: TYPE_NORMAL
- en: Doctrine's ORM library allows easy persisting and retrieving of PHP object graph,
    without writing any SQL query by hand. It also provides a powerful object-oriented
    SQL-like query language called DQL, a database schema generator tool, an event
    system, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: To discover this must-have library, we will together build a typical small,
    blog engine.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Getting Started with Doctrine 2"), *Getting
    Started with Doctrine 2*, explains how to install Common, DBAL, and ORM libraries
    through Composer, get our first entity manager, and configure command-line tools
    after presenting the project we built throughout the book (the architecture of
    Doctrine and the configuration of the development environment).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Entities and Mapping Information"), *Entities
    and Mapping Information*, introduces the concept of Doctrine entities. We will
    create a first entity, map it to the database with annotations, generate the database
    schema, create data fixtures, and, finally, lay the foundation of the user interface
    of the blog.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Associations"), *Associations*, explains
    how to handle associations between the PHP objects and the ORM. We will create
    new entities, detail one-to-one, one-to-many, and many-to-many associations, generate
    the underlying database schema, create data fixtures and use associations in the
    user interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Building Queries"), *Building Queries*, creates
    entity repositories and helps understand how to use the query builder for generating
    DQL queries and retrieving entities. We will also take a look at aggregate functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Going Further"), *Going Further*, will take
    a look at the advanced features of Doctrine. We will see different ways in which
    Doctrine can manage object inheritance, play with entity lifecycle events, and
    create native SQL queries.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To execute examples of this book, you just need PHP 5.4+ a text editor, or a
    PHP IDE, and your favorite browser.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers should have a good knowledge of object-oriented programming, PHP (including
    features introduced in PHP 5.3 and 5.4), and general database concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, and user input are shown as follows: "The `NativeQuery`
    class allows you to execute native SQL queries and to get their results as Doctrine
    entities."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "The following text must be printed in the terminal: **ATTENTION: This operation
    should not be executed in a production environment**."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
