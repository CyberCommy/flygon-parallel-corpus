- en: Maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and restoring MySQL database backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and restoring PostgreSQL database backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up cron jobs for regular tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging events for further introspection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting detailed error reporting via email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you should have one or more Django projects developed and published.
    For the final steps of the development cycle, we will take a look at how to maintain
    your projects and monitor them for optimization. Stay tuned for the final bits
    and pieces!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with the code of this chapter, you will need the latest stable version
    of Python, MySQL, or PostgreSQL database and a Django project with a virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all of the code for this chapter in the `ch13` directory of the
    GitHub repository: [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and restoring MySQL database backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For website stability, it is very important to be able to recover from hardware
    failures and hacker attacks. Therefore, you should always make backups and make
    sure that they work. Your code and static files will usually reside in version
    control from which it can be recovered, but database and media files should be
    backed up regularly.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to create backups for MySQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have a working Django project running with a MySQL database. Deploy
    that project to a remote production (or staging) server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To back up and restore your MySQL database, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the `commands` directory in your project''s home directory, create a
    bash script: `backup_mysql_db.sh`. Start the script with variable and function
    definitions, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add commands to create a dump of the database structure and data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add commands to compress the database dump and to create a symbolic link, `latest.sql.gz`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finalize the script by logging the time taken to execute the previous commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same directory, create a bash script, `restore_mysql_db.sh`, with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Make both scripts executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the database backup script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the database restoration script (with caution if in production):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The backup script will create backup files under `/home/myproject/db_backups/` and
    will save the log at `/home/myproject/logs/backup_mysql_db.log`, similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If the operation is successful, the script will return exit code `0`; otherwise,
    the exit code will be the number of errors while executing the script. And the
    log file will show the error messages.
  prefs: []
  type: TYPE_NORMAL
- en: In the `db_backups` directory, there will be one compressed SQL backup with
    the day of the week, such as `0-Sunday.sql.gz`, `1-Monday.sql.gz`, and so on, and
    another file, a symbolic link actually, called `latest.sql.gz`. The weekday-based
    backup allows you to have recent backups of the last 7 days when set properly
    under cron jobs, and the symbolic link allows you to quickly or automatically
    transfer the latest backup to another computer via SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we take the database credentials from the Django settings and then
    use them in the bash script.
  prefs: []
  type: TYPE_NORMAL
- en: We are dumping all data except the sessions table because the sessions are temporary
    anyway and very memory-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the `restore_mysql_db.sh` script, we get output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)**, Deployment**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and restoring PostgreSQL database backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up cron jobs for regular tasks* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and restoring PostgreSQL database backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to back up PostgreSQL databases and recover
    them in the event of hardware failure or hacker attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure to have a working Django project running with a PostgreSQL database.
    Deploy that project to a remote staging or production server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To back up and restore your MySQL database, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the `commands` directory in your project''s home directory, create a
    bash script, `backup_postgresql_db.sh`. Start the script with variable and function
    definitions, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add a command to create a database dump:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add commands to compress the database dump and create a symbolic link, `latest.backup.gz`,
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finalize the script by logging the time taken to execute the previous commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same directory, create a bash script, `restore_postgresql_db.sh`, with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Make both scripts executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the database backup script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the database restoration script (with caution if in production):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The backup script will create backup files under `/home/myproject/db_backups/` and
    will save the log at `/home/myproject/logs/backup_postgresql_db.log`, similar
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If the operation is successful, the script will return exit code `0`; otherwise,
    the exit code will be the number of errors while executing the script. And the
    log file will show the error messages.
  prefs: []
  type: TYPE_NORMAL
- en: In the `db_backups` directory, there will be one compressed SQL backup file
    with the day of the week, such as `0-Sunday.backup.gz`, `1-Monday.backup.gz`,
    and so on, and another file, a symbolic link actually, called `latest.backup.gz`.
    The weekday-based backup allows you to have recent backups of the last 7 days
    when set properly under cron jobs, and the symbolic link allows you to quickly
    or automatically transfer the latest backup to another computer via SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we take the database credentials from the Django settings and then
    use them in the bash script.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the `restore_postgresql_db.sh` script, we get output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and restoring PostgreSQL database backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up cron jobs for regular tasks* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up cron jobs for regular tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Usually, websites have some management tasks to perform in the background on
    a regular interval, such as once a week, once a day, or every hour. This can be
    achieved by using scheduled tasks, commonly known as cron jobs. These are scripts
    that run on the server after the specified period of time. In this recipe, we
    will create two cron jobs: one to clear sessions from the database and another
    to back up the database data. Both will be run every night.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start, deploy your Django project to a remote server. Then, connect to the
    server by SSH. These steps are written with the assumption that you are using
    a virtual environment, but a similar cron job can be created for a Docker project,
    and it can even run directly within the app container. Code files are provided
    with the alternate syntax, and the steps are otherwise largely the same.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create the two scripts and make them run regularly, via the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On the production or staging server, navigate to the project user's home directory
    where your `env` and `src` directories are located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If these don''t exist yet, create the `commands`, `db_backups`, and `logs` folders
    alongside the `env` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `commands` directory, create a `clear_sessions.sh` file. You can edit
    it with a terminal editor, such as vim or nano, adding the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the `clear_sessions.sh` file executable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Let's assume that you are using PostgreSQL as the database for your project.
    Then, in the same directory, create a backup script following the instructions
    from the previous recipe, *Creating and restoring PostgreSQL database backups*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test the scripts to see whether they are executed correctly, by running them
    and then checking the `*.log` files in the logs directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In your project''s home directory on the remote server, create a `crontab.txt` file,
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the `crontab` tasks as the `myproject` user, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the current setup, every night, `clear_sessions.sh` will be executed at
    1:00 A.M., and `backup_postgresql_db.sh` will be executed at 2:00 A.M. The execution
    logs will be saved in `~/logs/clear_sessions.sh` and `~/logs/backup_postgresql_db.log`.
    If you get any errors, you should check these files for the traceback.
  prefs: []
  type: TYPE_NORMAL
- en: Every day, `clear_sessions.sh` will execute the `clearsessions` management command,
    which, as its name alludes to, clears expired sessions from the database, using
    the default database settings.
  prefs: []
  type: TYPE_NORMAL
- en: The database backup script is a little more complex. Every day of the week,
    it creates a backup file for that day, using a naming scheme of `0-Sunday.backup.gz`, `1-Monday.backup.gz`,
    and so on. Therefore, you will be able to restore data that was backed up 7 days
    ago or later.
  prefs: []
  type: TYPE_NORMAL
- en: 'The crontab file follows a specific syntax. Each line contains a specific time
    of day, indicated by a series of numbers, and then a task to run at that given
    moment. The time is defined in five parts, separated by spaces, as shown in the
    following list:'
  prefs: []
  type: TYPE_NORMAL
- en: Minutes, from 0 to 59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hours, from 0 to 23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Days of the month, from 1 to 31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Months, from 1 to 12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Days of the week, from 0 to 7, where 0 is Sunday, 1 is Monday, and so on—7 is
    Sunday again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An asterisk (`*`) means that every time frame will be used. Therefore, the
    following task defines that `clear_sessions.sh` is to be executed at 1:00 A.M.
    every day of each month, every month, and every day of the week:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You can learn more about the specifics of the crontab at [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We defined commands that will be executed at regular intervals, and the logging
    of results is also activated, but we can't yet tell whether a cron job was executed
    successfully or whether it failed unless we log into the server and check the
    logs every day manually. To solve the problem of monotonic manual labor, you can
    monitor the cron jobs automatically using the **Healthchecks** service ([https://healthchecks.io/](https://healthchecks.io/)).
  prefs: []
  type: TYPE_NORMAL
- en: With Healthchecks, you would modify the crontab so that it pings a specific
    URL after each successful job is executed. If the script fails and exits with
    a non-zero code, Healthchecks will know that it was not executed successfully.
    Every day, you will get an overview of cron jobs and their execution statuses
    by email.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and restoring MySQL database backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and restoring PostgreSQL database backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging events for further introspection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipes, you could see how logging works for bash scripts. But
    you can also log events happening on your Django website, such as user registration,
    adding a product to a cart, buying tickets, bank transactions, sending SMS messages,
    server errors, and similar.
  prefs: []
  type: TYPE_NORMAL
- en: You should never log sensitive information such as user passwords or credit
    card details.
  prefs: []
  type: TYPE_NORMAL
- en: Also, use an analytics tool instead of Python logging for tracking overall website
    usage.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will guide you through how to log structured information
    about your website into log files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the `likes` apps from the *Implementing the Like widget* recipe
    in [Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*, Templates and JavaScript*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the virtual environment of a Django project, install `django-structlog`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up structured logging in your Django website, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `RequestMiddleware` in your project''s settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Also in the same file, add Django logging configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, set `structlog` configuration there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In `views.py` of the `likes` app, let''s log the object that will be liked
    or unliked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When visitors browse your website, the specific events will be logged in the `tmp/json.log` and `tmp/flat_line.log` files.
    `django_structlog.middlewares.RequestMiddleware` logs the start and end of the
    HTTP request processing. In addition, we are logging when a `Like` instance is
    created or deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `json.log` file contains logs in JSON format. That means that you can programmatically
    parse, inspect, and analyze them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `flat_line.log` file contains the logs in a shorter format, which might
    be easier to read manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating and restoring MySQL database backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and restoring PostgreSQL database backups* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up cron jobs for regular tasks* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting detailed error reporting via email
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To perform system logging, Django uses Python's built-in logging module or the
    `structlog` module mentioned in the previous recipe. The default Django configuration
    seems to be quite complex. In this recipe, you will learn how to tweak it to send
    error emails with complete HTML, similar to what is provided by Django in the
    DEBUG mode when an error happens.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Locate the Django project in your virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following procedure will send detailed emails about errors to you:'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not already have `LOGGING` settings set up for your project, set those
    up first. Find the Django logging utilities file, available at `env/lib/python3.7/site-packages/django/utils/log.py`.
    Copy the `DEFAULT_LOGGING` dictionary to your project's settings as the `LOGGING` dictionary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `include_html` setting to the `mail_admins` handler. The result of
    the first two steps should be something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The logging configuration consists of four parts: loggers, handlers, filters,
    and formatters. The following list describes them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Loggers** are entry points into the logging system. Each logger can have
    a log level: `DEBUG`, `INFO`, `WARNING`, `ERROR`, or `CRITICAL`. When a message
    is written to the logger, the log level of the message is compared with the logger''s
    level. If it meets or exceeds the log level of the logger, it will be further
    processed by a handler. Otherwise, the message will be ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Handlers** are engines that define what happens to each message in the logger.
    They can be written to a console, sent by email to the administrator, saved to
    a log file, sent to the Sentry error-logging service, and so on. In our case,
    we set the `include_html` parameter for the `mail_admins` handler, as we want
    the full HTML with traceback and local variables for the error messages that happen
    in our Django project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filters** provide additional control over the messages that are passed from
    the loggers to handlers. For example, in our case, the emails will only be sent
    when the DEBUG mode is set to false.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Formatters** are used to define how to render a log message as a string.
    They are not used in this example; however, for more information about logging,
    you can refer to the official documentation at [https://docs.djangoproject.com/en/3.0/topics/logging/](https://docs.djangoproject.com/en/3.0/topics/logging/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The configuration we have just defined will send emails about each server error
    that happens on your website. If you have high traffic and, let's say, the database
    crashes, you will get tons of emails that will flood your inbox or even hang your
    email server.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid such problems, you can use Sentry ([https://sentry.io/for/python/](https://sentry.io/for/python/)).
    It tracks all server errors at their server and sends only one notification email
    to you for each error type.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Logging events for further introspection* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
