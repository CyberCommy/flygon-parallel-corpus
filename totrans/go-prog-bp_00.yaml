- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I decided to write *Go Programming Blueprints* because I wanted to expel the
    myth that Go, being a relatively young language and community, is a bad choice
    for writing and iterating on software quickly. I have a friend who knocks out
    complete Ruby on Rails apps in a weekend by mashing up pre-existing gems and libraries;
    Rails as a platform has become known for enabling rapid development. Since I do
    the same with Go and the ever-growing buffet of open source packages, I wanted
    to share some real-world examples of how we can quickly build and release software
    that performs great from day one and is ready to scale when our projects take
    off in a way that Rails cannot compete with. Of course, most scalability happens
    outside the language, but features like Go's built-in concurrency mean you can
    get some very impressive results from even the most basic hardware, giving you
    a head start when things start to get real.
  prefs: []
  type: TYPE_NORMAL
- en: This book explores five very different projects, any of which could form the
    basis of a genuine start-up. Whether it's a low-latency chat application, a domain
    name suggestion tool, a social polling and election service built on Twitter,
    or a random night out generator powered by Google Places, each chapter touches
    upon a variety of problems that most products or services written in Go will need
    to address. The solutions I present in the book are just one of many ways to tackle
    each project, and I would encourage you to make up your own mind about how I approached
    them. The concepts are more important than the code itself, but you'll hopefully
    pick up a few tips and tricks here and there that can go into your Go toolbelt.
  prefs: []
  type: TYPE_NORMAL
- en: The process by which I wrote this book might be interesting because it represents
    something about the philosophies adopted by many agile developers. I started by
    giving myself the challenge of building a real deployable product (albeit a simple
    one; minimum viable product if you will) before getting stuck into it and writing
    a version 1\. Once I got it working, I would rewrite it from scratch. It has been
    said many times by novelists and journalists that the art of writing is rewriting;
    I have found this to be true for software as well. The first time we write a piece
    of code, all we are really doing is learning about the problem and how it might
    be tackled as well as getting some of our thinking out of our heads and onto paper
    (or into a text editor). The second time we write it, we are applying our new
    knowledge to actually solve the problem. If you've never tried this, give it a
    shot—you might find that the quality of your code shoots up quite dramatically
    as I did. It doesn't mean the second time will be the last time—software evolves
    and we should try to keep it as cheap and disposable as possible, so we don't
    mind throwing pieces away if they go stale or start to get in the way.
  prefs: []
  type: TYPE_NORMAL
- en: I write all of my code following Test-driven Development (TDD) practices, some
    of which we will do together throughout the chapters and some you'll just see
    the result of in the final code. All of the test code can be found in the GitHub
    repositories for this book even if it's not included in print.
  prefs: []
  type: TYPE_NORMAL
- en: Once I had my test-driven second versions completed, I would start writing the
    chapter describing how and why I did what I did. In most cases, the iterative
    approach I took is left out of the book because it would just add pages of tweaks
    and edits, which would likely just become frustrating for the reader. However,
    on a couple of occasions, we will iterate together to get a feel of how a process
    of gradual improvements and small iterations (starting and keeping it simple and
    introducing complexity only when absolutely necessary) can be applied when writing
    Go packages and programs.
  prefs: []
  type: TYPE_NORMAL
- en: I moved to the United States from England in 2012, but that is not why the chapters
    are authored in American English; it was a requirement from the publisher. I suppose
    this book is aimed at an American audience, or perhaps it's because American English
    is the standard language of computing (in British code, properties that deal with
    color are spelled without the U). Either way, I apologize in advance for any trans-Atlantic
    slips; I know how pedantic programmers can be.
  prefs: []
  type: TYPE_NORMAL
- en: Any questions, improvements, suggestions, or debates (I love how opinionated
    the Go community—as well as the core team and the language itself—is) are more
    than welcome. These should probably take place in the GitHub issues for the book
    set up specifically at [https://github.com/matryer/goblueprints](https://github.com/matryer/goblueprints)
    so that everybody can take part.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I would be thrilled if somebody forms a start-up based on any of these
    projects, or makes use of them in other places. I would love to hear about it;
    you can tweet me at `@matryer` and let me know either way.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](text00015.html#ch01 "Chapter 1. Chat Application with Web Sockets")
    , *Chat Application with Web Sockets* , shows how to build a complete web application
    that allows multiple people to have a real-time conversation right in their web
    browser. We see how the net/http package lets us serve HTML pages as well as connect
    to the client''s browser with web sockets.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](text00020.html#page "Chapter 2. Adding Authentication") , *Adding
    Authentication* , shows how to add OAuth to our chat application so that we can
    keep track of who is saying what, but let them log in using Google, Facebook,
    or GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](text00027.html#ch03 "Chapter 3. Three Ways to Implement Profile
    Pictures") , *Three Ways to Implement Profile Pictures* , explains how to add
    profile pictures to the chat application taken from either the authentication
    service, the [Gravitar.com](http://Gravitar.com) web service, or by allowing users
    to upload their own picture from their hard drive.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](text00032.html#page "Chapter 4. Command-line Tools to Find Domain
    Names") , *Command-line Tools to Find Domain Names* , explores how easy building
    command-line tools is in Go and puts those skills to use to tackle the problem
    of finding the perfect domain name for our chat application. It also explores
    how easy Go makes it to utilize the standard in and standard out pipes to produce
    some pretty powerful composable tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](text00036.html#page "Chapter 5. Building Distributed Systems and
    Working with Flexible Data") , *Building Distributed Systems and Working with
    Flexible Data* , explains how to prepare for the future of democracy by building
    a highly scalable Twitter polling and vote counting engine powered by NSQ and
    MongoDB.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](text00042.html#page "Chapter 6. Exposing Data and Functionality
    through a RESTful Data Web Service API") , *Exposing Data and Functionality through
    a RESTful Data Web Service API* , looks at how to expose the capabilities we built
    in [Chapter 5](text00036.html#page "Chapter 5. Building Distributed Systems and
    Working with Flexible Data") , *Building Distributed Systems and Working with
    Flexible Data* , through a JSON web service, specifically how wrapping http.HandlerFunc
    functions gives us a powerful pipeline pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](text00052.html#page "Chapter 7. Random Recommendations Web Service")
    , *Random Recommendations Web Service* , shows how to consume the Google Places
    API to generate a location-based random recommendations API that represents a
    fun way to explore any area. It also explores why it''s important to keep internal
    data structures private, controlling the public view into the same data, as well
    as how to implement enumerators in Go.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](text00056.html#page "Chapter 8. Filesystem Backup") , *Filesystem
    Backup* , helps to build a simple but powerful filesystem backup tool for our
    code projects and explore interacting with the filesystem using the os package
    from the Go standard library. It also looks at how Go''s interfaces allow simple
    abstractions to yield powerful results.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix](text00062.html#page "Appendix A. Good Practices for a Stable Go
    Environment") , *Good Practices for a Stable Go Environment* , teaches us how
    to install Go from scratch on a new machine and discusses some of the environmental
    options we have and the impact they might have in the future. We will also consider
    how collaboration might influence some of our decisions as well as the impact
    open sourcing our packages might have.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To compile and run the code from this book, you will need a computer capable
    of running an operating system that supports the Go toolset, a list of which can
    be found at [https://golang.org/doc/install#requirements](https://golang.org/doc/install#requirements)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix](text00062.html#page "Appendix A. Good Practices for a Stable Go
    Environment") , *Good Practices for a Stable Go Environment* , has some useful
    tips to install Go and set up your development environment including how to work
    with the GOPATH environment variable.'
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for all Go programmers—from beginners looking to explore the language
    by building real projects to expert gophers with an interest in how the language
    can be applied in interesting ways.
  prefs: []
  type: TYPE_NORMAL
- en: 读累了记得休息一会哦~
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**公众号：古德猫宁李**'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书单分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书友学习交流
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 电子书打包资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 学习资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can use functionality from other packages using the `import` keyword, after we
    have used `go get` to download them."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "Once you install Xcode, you open **Preferences** and navigate to the **Downloads**
    section.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
