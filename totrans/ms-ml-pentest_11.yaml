- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1 – Introduction to Machine Learning in Pentesting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although machine learning is an interesting concept, there are limited business
    applications in which it is useful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning applications are too complex to run in the cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs: []
  type: TYPE_NORMAL
- en: For two runs of k-means clustering, is it expected to get the same clustering
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: results?
  prefs: []
  type: TYPE_NORMAL
- en: 'No'
  prefs: []
  type: TYPE_NORMAL
- en: 'Predictive models having target attributes with discrete values can be termed
    as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Classification models
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following techniques perform operations similar to dropouts in
    a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: neural network?
  prefs: []
  type: TYPE_NORMAL
- en: Bagging
  prefs: []
  type: TYPE_NORMAL
- en: Which architecture of a neural network would be best suited for solving an image
    recognition problem?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A convolutional neural network
  prefs: []
  type: TYPE_NORMAL
- en: How does deep learning differ from conventional machine learning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deep learning algorithms can handle more data and run with less supervision
    from data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following is a technique frequently used in machine learning projects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 – Phishing Domain Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some text-cleaning tasks to perform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clean your texts of stopwords, digits, and punctuation marks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform lemmatization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a word dictionary, including their frequencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the non-words from the dictionary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the features from the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check `Chapter2-Practice` folder for the answers: [https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter%202/Chaptre2-Practice](https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter%202/Chaptre2-Practice).
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the feature vectors and their labels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Train the model with a linear support vector machine classifier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Print out the confusion matrix of your model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 3 – Malware Detection with API Calls and PE Headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Load the dataset using the pandas python library, and this time, add
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the low_memory=False parameter. Search for what that parameter does.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Prepare the data that will be used for training.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Split the data with the `test_size=0.33` parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a set of classifiers that contains `DecisionTreeClassifier()`, `RandomForestClassifier(n_estimators=100)`,
    and `AdaBoostClassifier()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: What is an `AdaBoostClassifier()`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An AdaBoost classifier is a meta-estimator that begins by fitting a classifier
    on the original dataset and then fits additional copies of the classifier on the
    same dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Train the model using the three classifiers and print out the metrics of every
    classifier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the `Chapter3-Practice` folder for the solution: [https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter%203/Chapter3-Practice.](https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter%203/Chapter3-Practice)
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4 – Malware Detection with Deep Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between MLP networks and deep learning networks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deep networks are already multi-layer perceptron networks but with at least
    three hidden layers.
  prefs: []
  type: TYPE_NORMAL
- en: Why DL recently is taking off?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because we  have access to a lot more computational power and data.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need to iterate multiple times through different models?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because nobody can always find the best model or hyperparameter without iterations.
  prefs: []
  type: TYPE_NORMAL
- en: What type of DL needed to translate English to French language?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Recurrent Neural Network (RNN)
  prefs: []
  type: TYPE_NORMAL
- en: Why malware visualization is a good method to classify malware?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because we can use state-of-the-art image recognition to build malware classifiers.
  prefs: []
  type: TYPE_NORMAL
- en: What is the role of an activation function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It defines the output of a given node. In other words, it converts an input
    signal of a node in an A-NN to an output signal.
  prefs: []
  type: TYPE_NORMAL
- en: Can you mention three DL architectures?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Convolutional Neural Networks** (**CNNs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recurrent Neural Networks** (**RNNs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Long/Short Term Memory Networks** (**LSTMs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 5 – Botnet Detection with Machine Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we did after every chapter, we are going to give you the opportunity to
    practice what you have learned and evaluate your skills. This chapter''s GitHub
    repository contains a link to botnet traffic dataset in the practice folder at [https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter5](https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter5):'
  prefs: []
  type: TYPE_NORMAL
- en: Download the dataset and load it with the pandas library
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the suitable  features
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the training and testing sets, then export them into a `.pickle` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the `.pickle` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the same code blocks of [Chapter 5](part0097.html#2SG6I0-49a67f1d6e7843d3b2296f38e3fe05f5), *Botnet
    Detection with Machine Learning.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import a support vector machine classifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Train the SVM model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Print out the accuracy of the built model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 6 – Machine Learning in Anomaly Detection Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is an anomaly?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An anomaly is something that deviates from what is standard, normal, or expected.
  prefs: []
  type: TYPE_NORMAL
- en: What is a Markov chain?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Markov chain, or what we call a Markov process, is a stochastic model used
    for any random system that change its states according to fixed probabilities.
  prefs: []
  type: TYPE_NORMAL
- en: What are Hidden Markov models?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Hidden Markov Model is a Markov process where we are unable to directly
    observe the state of the system. Each state has a fixed probability of **emitting**.
    The main goal of an HMM model or classifier is assigning a label to a family of
    sequences, which means linking a sequence of observations to a sequence of labels.
  prefs: []
  type: TYPE_NORMAL
- en: How can we detect anomalies with Hidden Markov models?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: According to the Hidden Markov Model definition, we can use it to discriminate
    between normal and abnormal behavior of network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: What's the difference between time series anomaly detection and other types
    of anomaly detection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Time series are values obtained at successive times, often with equal intervals
    between them. In time series anomaly detection, we are detecting anomalies in
    sequences of data points being recorded at specific times. In most other detection
    methods, we are using techniques such as the graph-based technique.
  prefs: []
  type: TYPE_NORMAL
- en: What's the difference between supervised and unsupervised machine learning anomaly
    detection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The difference between the two models is based on the machine learning algorithms
    used. For example, in supervised machine learning anomaly detection, we can use
    classification; while in unsupervised machine learning anomaly detection, we can
    use clustering.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 – Detecting Advanced Persistent Threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following is not a step in the cyber kill chain?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Scanning
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following options is not a node of the diamond model of intrusion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: analysis?
  prefs: []
  type: TYPE_NORMAL
- en: (c) Procedures
  prefs: []
  type: TYPE_NORMAL
- en: How many parts are needed in a Logstash configuration file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (b) 3
  prefs: []
  type: TYPE_NORMAL
- en: In ElasticSearch, what is indexing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) The process of storing data in an index
  prefs: []
  type: TYPE_NORMAL
- en: In Elasticsearch, what is a node?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) An instance of Elasticsearch
  prefs: []
  type: TYPE_NORMAL
- en: In Elasticsearch, what is a shard?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (c) Shared resources (RAM, vCPU)
  prefs: []
  type: TYPE_NORMAL
- en: Does Elasticsearch have a schema?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Yes
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8 – Evading Intrusion Detection Systems with Adversarial Machine Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Can you briefly explain why overtraining a machine learning model is not a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: good idea?
  prefs: []
  type: TYPE_NORMAL
- en: By overtraining a machine learning model by training data too well, we train
    the model in a way that negatively impacts the performance of the model on new
    data. It is also referred to as *overfitting*.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between overfitting and underfitting?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Overfitting refers to overtraining the model, while underfitting refers to a
    model that can neither model the training data nor generalize to new data.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between an evasion and poisoning attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In an evasion adversarial attack, the attacker try many different samples to
    identify a learning pattern to bypass it; while in poisoning attacks, the attacker
    poisons the model in the training phase.
  prefs: []
  type: TYPE_NORMAL
- en: How does adversarial clustering work?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adversarial clustering occurs when the attackers manipulates the input data
    (adding small percentage of attack samples) so the newly added sample can hide
    within the existing clusters.
  prefs: []
  type: TYPE_NORMAL
- en: What type of adversarial attack is used to avoid the intrusion detection system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attack used in the demonstration is called the **Jacobian-based Saliency
    Map** attack.
  prefs: []
  type: TYPE_NORMAL
- en: Is the preceding attack an evasion or poisoning attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is a poisoning adversarial attack.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 – Bypass Machine Learning Malware Detectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the components of generative adversarial networks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The two main components of a generative adversarial network are the generator
    and the discriminator.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between a generator and a discriminator?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The generator takes latent samples as input. They are randomly generated numbers
    and they are trained to generate images, while the discriminator is simply a classifier
    trained with supervised learning techniques to check whether the image is real
    (1) or fake (0).
  prefs: []
  type: TYPE_NORMAL
- en: How can we make sure that the malware adversarial samples are still valid when
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: we are generating them?
  prefs: []
  type: TYPE_NORMAL
- en: To avoid invalid samples, we can use a Sandbox/Oracle.
  prefs: []
  type: TYPE_NORMAL
- en: Do a bit of research, then briefly explain how to detect adversarial samples
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To detect adversarial samples, we can remove the noise by using binary thresholding.
  prefs: []
  type: TYPE_NORMAL
- en: What distinguishes reinforcement learning from deep learning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reinforcement learning learns how to maximize a reward function by exploring
    the actions available from certain states, while deep learning learns from examples
    it has been shown.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between supervised and reinforcement learning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In supervised learning, given input data *X* and labels *Y* we are learning
    a function *f: X → Y* that maps *X* to *Y*. In reinforcement learning, the agents
    are getting smarter after number of experiences.'
  prefs: []
  type: TYPE_NORMAL
- en: How does an agent learn in reinforcement learning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In reinforcement learning, the agent learns by interacting with an environment
    based on a reward function to optimize its performance.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10 – Best Practices for Machine Learning and Feature Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between feature engineering and feature selection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feature selection is a part of feature engineering.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between **principal component analysis** (**PCA**) and
    feature selection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feature selection takes the dataset and gives us the best set of features, while
    PCA is a dimensionality reduction method.
  prefs: []
  type: TYPE_NORMAL
- en: How can we encode features like dates and hours?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the techniques is adding the (sine, cosine) transformation of the time
    of day variable.
  prefs: []
  type: TYPE_NORMAL
- en: Why it is useful to print out training and testing accuracy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is useful to detect overfitting by comparing the two metrics.
  prefs: []
  type: TYPE_NORMAL
- en: How can we deploy a machine learning model and use it in a product?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are many ways to take a machine learning model to production, such as
    web services and containerization depending on your model (Online, offline? Deep
    learning, SVM, Naive Bayes?).
  prefs: []
  type: TYPE_NORMAL
- en: Why does feature engineering take much more time than other steps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because analyzing, cleaning, and processing features takes more time than building
    the model.
  prefs: []
  type: TYPE_NORMAL
- en: What is the role of a dummy variable?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A dummy variable is a numerical variable used in regression analysis to represent
    subgroups of the sample in your study. In research design, a dummy variable is
    often used to distinguish between different treatment groups.
  prefs: []
  type: TYPE_NORMAL
