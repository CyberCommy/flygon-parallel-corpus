- en: Chapter 2. Primitive Data Types, Arrays, Loops, and Conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before diving into the object-oriented features of JavaScript, let''s first
    take a look at some of the basics. This chapter walks you through the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The primitive data types in JavaScript, such as strings and numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common operators, such as `+`, `-`, `delete`, and `typeof`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flow control statements, such as loops and `if...else` conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables are used to store data; they are placeholders for concrete values.
    When writing programs, it's convenient to use variables instead of the actual
    data as it's much easier to write `pi` instead of `3.141592653589793`; especially
    when it happens several times inside your program. The data stored in a variable
    can be changed after it initially assigned, hence the name **variable**. You can
    also use variables to store data that is unknown to you while you write the code,
    such as the result of a later operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using a variable requires the following two steps. You will need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare the variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initialize it, that is, give it a value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To declare a variable, you will use the `var` statement like the following
    piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For the names of the variables, you can use any combination of letters, numbers,
    the underscore character, and the dollar sign. However, you can''t start with
    a number, which means that the following declaration of code is invalid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To initialize a variable means to give it a value for the first (initial) time.
    The following are the two ways to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare the variable first, then initialize it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declare and initialize it with a single statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of the latter is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now the variable named `a` contains the value `1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can declare, and optionally initialize, several variables with a single
    `var` statement; just separate the declarations with a comma, as shown in the
    following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For readability, this is often written using one variable per line, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**The $ character in variable names**'
  prefs: []
  type: TYPE_NORMAL
- en: You may see the dollar sign character (`$`) used in variable names, as in `$myvar`
    or less commonly `my$var`. This character is allowed to appear anywhere in a variable
    name, although previous versions of the ECMA standard discouraged its use in handwritten
    programs and suggested it should only be used in generated code (programs written
    by other programs). This suggestion is not well respected by the JavaScript community,
    and `$` is in fact commonly used in practice as a function name.
  prefs: []
  type: TYPE_NORMAL
- en: Variables are case sensitive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Variable names are case sensitive. You can easily verify this statement using
    your JavaScript console. Try typing the following code by pressing *Enter* after
    each line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To save keystrokes when you enter the third line, you can type `case` and press
    the *Tab* or right arrow key. **Console** autocompletes the variable name to `case_matters`.
    Similarly, for the last line, type `CASE` and press the *Tab* key. The end result
    is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables are case sensitive](graphics/image_02_001-e1482738938732.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Throughout the rest of this book, only the code for the examples is given instead
    of a screenshot, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The greater-than signs (`>`) show the code that you type; the rest is the result
    as printed in **Console**. Again, remember that when you see such code examples,
    you're strongly encouraged to type in the code yourself. Then, you can experiment
    by tweaking it a little here and there to get a better feeling of how exactly
    it works.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see in the preceding screenshot that sometimes what you type in **Console**
    results in the word **undefined**. You can simply ignore this, but if you're curious,
    here's what happens when evaluating (executing) what you type-the **Console**
    prints the returned value. Some expressions, such as `var a = 1;`, don't return
    anything explicitly, in which case, they implicitly return the special value **undefined**
    (more on in a bit). When an expression returns some value (for example, `case_matters`
    in the previous example or something such as `1 + 1`), the resulting value is
    printed out. Not all consoles print the **undefined** value; for example, the
    Firebug console.
  prefs: []
  type: TYPE_NORMAL
- en: Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Operators take one or two values (or variables), perform an operation, and
    return a value. Let''s check out a simple example of using an operator, just to
    clarify the terminology:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: The `+` symbol is the operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The operation is addition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The input values are `1` and `2` (they are also called operands)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result value is `3`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The whole thing is called an expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instead of using the values `1` and `2` directly in the expression, you can
    use variables. You can also use a variable to store the result of the operation
    as the following example demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table lists the basic arithmetic operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator symbol** | **Operation** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | Addition |'
  prefs: []
  type: TYPE_TB
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `-` | Subtraction |'
  prefs: []
  type: TYPE_TB
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `*` | Multiplication |'
  prefs: []
  type: TYPE_TB
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/` | Division |'
  prefs: []
  type: TYPE_TB
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `%` | Modulo, the remainder of a division |'
  prefs: []
  type: TYPE_TB
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s sometimes useful to test if a number is even or odd. Using the modulo
    operator, it''s easy to do just that. All odd numbers return `1` when divided
    by `2`, while all even numbers return `0`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `++` | Increment a value by `1` | Post increment is when the input value
    is incremented after it''s returned, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The opposite is pre-increment. The input value is incremented by `1` first
    and then returned, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `--` | Decrement a value by 1 | Post-decrement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Pre-decrement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: The `var a = 1;` is also an operation; it's the simple assignment operation,
    and `=` is the **simple ** **assignment ** **operator**.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a family of operators that are a combination of an assignment
    and an arithmetic operator. These are called **compound operators**. They can
    make your code more compact. Let''s see some of them with the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, `a += 3;` is just a shorter way of doing `a = a + 3;`. For
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `a -= 3;` is the same as `a = a - 3;`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In addition to the arithmetic and assignment operators discussed previously,
    there are other types of operators, as you'll see later in this, and the following
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Best practice**'
  prefs: []
  type: TYPE_NORMAL
- en: Always end your expressions with a semicolon. JavaScript has a semicolon insertion
    mechanism, where it can add the semicolon if you forget it at the end of a line.
    However, this can also be a source of errors, so it's best to make sure you always
    explicitly state where you want to terminate your expressions. In other words,
    both expressions `> 1 + 1` and `> 1 + 1;` will work; but throughout the book,
    you'll always see the second type, terminated with a semicolon, just to emphasize
    this habit.
  prefs: []
  type: TYPE_NORMAL
- en: Primitive data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any value that you use is of a certain type. In JavaScript, the following are
    just a few primitive data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Number**: This includes floating point numbers as well as integers. For example,
    these values are all numbers-`1`, `100`, `3`.`14`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**String**: These consist of any number of characters, for example, `a`, `one`,
    and `one 2 three`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Boolean**: This can be either `true` or `false`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Undefined**: When you try to access a variable that doesn''t exist, you get
    the special value undefined. The same happens when you declare a variable without
    assigning a value to it yet. JavaScript initializes the variable behind the scenes
    with the value `undefined`. The undefined data type can only have one value-the
    special value `undefined`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Null**: This is another special data type that can have only one value-the
    `null` value. It means no value, an empty value, or nothing. The difference with
    undefined is that if a variable has a null value, it''s still defined; it just
    so happens that its value is nothing. You''ll see some examples shortly.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Any value that doesn''t belong to one of the five primitive types listed here
    is an object. Even null is considered an object, which is a little awkward having
    an object (something) that is actually nothing. We''ll learn more about objects
    in [Chapter 4](ch04.html "Chapter 4. Objects"), *Objects*, but for the time being,
    just remember that in JavaScript, the data types are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Primitive (the five types listed previously)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-primitive (objects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding out the value type - the typeof operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to know the type of a variable or a value, you can use the special
    `typeof` operator. This operator returns a string that represents the data type.
    The return values of using `typeof` are one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: undefined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next few sections, you'll see `typeof` in action using examples of each
    of the five primitive data types.
  prefs: []
  type: TYPE_NORMAL
- en: Numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The simplest number is an integer. If you assign `1` to a variable, and then
    use the `typeof` operator, it returns the string `number`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, you can see that the second time you set a variable's
    value, you don't need the `var` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Numbers can also be floating point (decimals), for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can call `typeof` directly on the value without assigning it to a variable
    first, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Octal and hexadecimal numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a number starts with a `0`, it''s considered an octal number. For example,
    the octal `0377` is the decimal `255`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The last line in the preceding example prints the decimal representation of
    the octal value.
  prefs: []
  type: TYPE_NORMAL
- en: 'ES6 provides a prefix `0o` (or `0O`, but this looks very confusing in most
    monospace fonts) to represent octals. Consider the following line of code for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: While you may not be intimately familiar with octal numbers, you've probably
    used hexadecimal values to define colors in CSS stylesheets.
  prefs: []
  type: TYPE_NORMAL
- en: 'In CSS, you have several options to define a color, two of them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using decimal values to specify the amount of R (red), G (green), and B (blue),
    ranging from `0` to `255`. For example, *rgb(0, 0, 0)* is black and *rgb(255,
    0, 0)* is red (maximum amount of red and no green or blue).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using hexadecimals and specifying two characters for each R, G, and B value.
    For example, *#000000* is black and *#ff0000* is red. This is because *ff* is
    the hexadecimal value for `255`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In JavaScript, you can put `0x` before a hexadecimal value, also called hex
    for short, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Binary Literals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Untill ES6, if you needed binary representation of an integer, you had to pass
    them to the `parseInt()` function as a string with a radix of `2`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In ES6 you can use `0b` (or `0B`) prefix to represent binary integers. For
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Exponent literals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`1e1` (also written as `1e+1` or `1E1` or `1E+1`) represents the number 1 with
    a 0 after it, or in other words, `10`. Similarly, `2e+3` represents the number
    2 with three 0s after it, or `2000`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`2e+3` means moving the decimal point three digits to the right of the number
    **2**. There''s also `2e-3`, meaning you move the decimal point three digits to
    the left of the number **2**. Look at the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exponent literals](graphics/image_02_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Infinity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is a special value in JavaScript called Infinity. It represents a number
    too big for JavaScript to handle. Infinity is indeed a number, as typing `typeof
    Infinity` in the console will confirm. You can also quickly check that a number
    with `308` zeros is ok, but `309` zeros is too much. To be precise, the biggest
    number JavaScript can handle is `1.7976931348623157e+308`, while the smallest
    is `5e-324`, Look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Dividing by zero gives you infinity, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`Infinity` is the biggest number (or rather a little bigger than the biggest),
    but how about the smallest? It''s infinity with a minus sign in front of it; `-Infinity`,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Does this mean you can have something that''s exactly twice as big as Infinity,
    from 0 up to infinity and then from 0 down to minus infinity? Well, not really.
    When you sum `Infinity` and `-Infinity`, you don''t get `0`, but something that
    is called **Not a Number** (**NaN**), For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Any other arithmetic operation with `Infinity` as one of the operands gives
    you `Infinity`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: There is a lesser known global method, `isFinite()`, that tells you if the value
    is infinity or not. ES6 adds a `Number.isFinite()`method to do just that. Why
    another method, you may ask. The global variant of `isFinite()` tries to cast
    the value through Number(value), while `Number.isFinite()` doesn't, hence it's
    more accurate.
  prefs: []
  type: TYPE_NORMAL
- en: NaN
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What was this `NaN` in the previous example? It turns out that despite its
    name, Not a Number, `NaN` is a special value that is also a number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'You get `NaN` when you try to perform an operation that assumes numbers, but
    the operation fails. For example, if you try to multiply `10` by the character
    `"f"`, the result is `NaN`, because `"f"` is obviously not a valid operand for
    a multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '`NaN` is contagious, so if you have even one `NaN` in your arithmetic operation,
    the whole result goes down the drain, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Number.isNaN
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: ES5 has a global method-`isNaN()`. It determines if a value is `NaN` or not.
    ES6 provides a very similar method-`Number.isNaN()` (Notice that this method is
    not global).
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference between the global `isNaN()` and `Number.isNaN()` is that global
    `isNaN()` casts non-numeric values before evaluating them to be `NaN`. Let''s
    look at the following example. We are using the ES6 `Number.isNaN()` method to
    test if something is a `NaN` or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We saw that ES5''s global `isNaN()` method first casts non-numeric values and
    then does the comparison; the following result will be different from its ES6
    counterpart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In general, compared to its global variant, `Number.isNaN()` is more correct.
    However, neither of them can be used to figure out if something is not a number-they
    just answer if the value is a `NaN` or not. Practically, you are interested in
    knowing if a value identifies as a number or not. Mozilla suggests the following
    polyfill method to do just that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Number.isInteger
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is a new method in ES6\. It returns `true` if the number is finite and
    does not contain any decimal points (is an integer):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A string is a sequence of characters used to represent text. In JavaScript,
    any value placed between single or double quotes is considered a string. This
    means that `1` is a number, but `"1"` is a string. When used with strings, `typeof`
    returns the string `"string"`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example of a number used in the string context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'If you put nothing in quotes, it''s still a string (an empty string), for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'As you already know, when you use the plus sign with two numbers, this is the
    arithmetic addition operation. However, if you use the plus sign with strings,
    this is a string concatenation operation, and it returns the two strings glued
    together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The dual purpose of the `+` operator is a source of errors. Therefore, if you
    intend to concatenate strings, it's always best to make sure that all of the operands
    are strings. The same applies for addition; if you intend to add numbers then
    make sure the operands are numbers. You'll learn various ways to do so further
    in the chapter and the book.
  prefs: []
  type: TYPE_NORMAL
- en: String conversions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you use a number-like string, for example, `"1"`, as an operand in an
    arithmetic operation, the string is converted to a number behind the scenes. This
    works for all arithmetic operations except addition, because of its ambiguity.
    Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'A lazy way to convert any number-like string to a number is to multiply it
    by `1` (another way is to use a function called `parseInt()`, as you''ll see in
    the next chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If the conversion fails, you''ll get `NaN`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You can convert a string to a number by multiplying it by `1`. The opposite-converting
    anything to a string-can be done by concatenating it with an empty string, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Special strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are also strings with special meanings, as listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **String** | **Meaning** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| `\\``''``"` | The `\` is the escape character. When you want to have quotes
    inside your string, you can escape them so that JavaScript doesn''t think they
    mean the end of the string.If you want to have an actual backslash in the string,
    escape it with another backslash. | `> var s = ''I don''t know'';`: This is an
    error because JavaScript thinks the string is `I don` and the rest is invalid
    code. The following codes are valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\n` | End of line. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\r` | Carriage return. | Consider the following statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of all of these is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\t` | Tab. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\u` | The `\u` followed by a character code allows you to use Unicode. |
    Here''s my name in Bulgarian written with Cyrillic characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also additional characters that are rarely used: `\b` (backspace),
    `\v` (vertical tab), and `\f` (form feed).'
  prefs: []
  type: TYPE_NORMAL
- en: String template literals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ES6 introduced template literals. If you are familiar with other programming
    languages, Perl and Python have supported template literals for a while now. Template
    literals allow expressions to be embedded within regular strings. ES6 has two
    kinds of literals: template literals and tagged literals.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Template literals are single or multiple line strings with embedded expressions.
    For example, you must have done something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You can accomplish the same using template literals, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Template literals are enclosed by the back-tick ([PRE60]
  prefs: []
  type: TYPE_NORMAL
- en: var a = 10;
  prefs: []
  type: TYPE_NORMAL
- en: var b = 10;
  prefs: []
  type: TYPE_NORMAL
- en: console.log(`Sum is ${a + b} and Multiplication would be ${a * b}.`);
  prefs: []
  type: TYPE_NORMAL
- en: //Sum is 20 and Multiplication would be 100\.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: var a = 10;
  prefs: []
  type: TYPE_NORMAL
- en: var b = 10;
  prefs: []
  type: TYPE_NORMAL
- en: function sum(x,y){
  prefs: []
  type: TYPE_NORMAL
- en: return x+y
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: function multi(x,y){
  prefs: []
  type: TYPE_NORMAL
- en: return x*y
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(`Sum is ${sum(a,b)} and Multiplication
  prefs: []
  type: TYPE_NORMAL
- en: would be ${multi(a,b)}.`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: console.log("This is line one \n" + "and this is line two");
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: console.log(`This is line one and this is line two`);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: transform`Name is ${lastname}, ${firstname} ${lastname}`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: transform([["Name is ", ", ", " "],firstname, lastname)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: function transform(strings, ...substitutes){
  prefs: []
  type: TYPE_NORMAL
- en: console.log(strings[0]); //"Name is"
  prefs: []
  type: TYPE_NORMAL
- en: console.log(substitutes[0]); //Bond
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: var firstname = "James";
  prefs: []
  type: TYPE_NORMAL
- en: var lastname = "Bond"
  prefs: []
  type: TYPE_NORMAL
- en: transform`Name is ${lastname}, ${firstname} ${lastname}`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: function rawTag(strings,...substitutes){
  prefs: []
  type: TYPE_NORMAL
- en: console.log(strings.raw[0])
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: rawTag`This is a raw text and \n are not treated differently`
  prefs: []
  type: TYPE_NORMAL
- en: //This is a raw text and \n are not treated differently
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: var b = true;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: typeof b;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"boolean"'
  prefs: []
  type: TYPE_NORMAL
- en: var b = false;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: typeof b;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"boolean"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: var b = "true";
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: typeof b;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"string"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '! - logical NOT (negation)'
  prefs: []
  type: TYPE_NORMAL
- en: '&& - logical AND'
  prefs: []
  type: TYPE_NORMAL
- en: '|| - logical OR'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: var b = !true;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: b;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: var b = !!true;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: b;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: var b = "one";
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '!b;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: var b = "one";
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '!!b;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: var b1 = true, b2 = false;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: b1 || b2;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: b1 && b2;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: true && true && false && true;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: false || true || false;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: false && false || true && true;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: false && (false || true) && true;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 1 + 2 * 3;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '7'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 1 + (2 * 3);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '7'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: false && false || true && true;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: (false && false) || (true && true);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: true || false || true || false || true;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: var b = 5;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: true || (b = 6);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: b;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '5'
  prefs: []
  type: TYPE_NORMAL
- en: true && (b = 6);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '6'
  prefs: []
  type: TYPE_NORMAL
- en: b;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '6'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: true || "something";
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: true && "something";
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"something"'
  prefs: []
  type: TYPE_NORMAL
- en: true && "something" && true;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: var mynumber = mynumber || 10;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: mynumber;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '10'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: var mynumber = 0;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: var mynumber = mynumber || 10;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: mynumber;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '10'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 1 == 1;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: 1 == 2;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: 1 =='1';
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 1 === '1';
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: 1 === 1;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 1 != 1;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: 1 != '1';
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: 1 != '2';
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 1 !== 1;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: 1 !== '1';
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 1 > 1;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: 33 > 22;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 1 >= 1;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 1 < 1;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: 1 < 2;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 1 <= 1;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: 1 <= 2;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: NaN == NaN;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: foo;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'ReferenceError: foo is not defined'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: typeof foo;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"undefined"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: var somevar;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: somevar;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: typeof somevar;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"undefined"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: var somevar;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: somevar === undefined;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: var somevar = null;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: somevar;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: typeof somevar;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"object"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: var i = 1 + undefined;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: NaN
  prefs: []
  type: TYPE_NORMAL
- en: var i = 1 + null;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '1'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 1 * undefined;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 1 * null;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '!!undefined;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: '!!null;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'false'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '"value: " + null;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"value: null"'
  prefs: []
  type: TYPE_NORMAL
- en: '"value: " + undefined;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"value: undefined"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: var atom = Symbol()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: var atom = new Symbol() //Symbol is not a constructor
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: var atom = Symbol('atomic symbol')
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: console.log(Symbol() === Symbol()) //false
  prefs: []
  type: TYPE_NORMAL
- en: console.log(Symbol('atom') === Symbol('atom')) // false
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: var a = [];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: var a = [1, 2, 3];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[1, 2, 3]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: a[0];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '1'
  prefs: []
  type: TYPE_NORMAL
- en: a[1];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '2'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: a[2] = 'three';
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"three"'
  prefs: []
  type: TYPE_NORMAL
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[1, 2, "three"]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: a[3] = 'four';
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"four"'
  prefs: []
  type: TYPE_NORMAL
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[1, 2, "three", "four"]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: var a = [1, 2, 3];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[6] = 'n`xew';
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"new"'
  prefs: []
  type: TYPE_NORMAL
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[1, 2, 3, undefined x 3, "new"]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: var a = [1, 2, 3];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: delete a[1];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[1, undefined, 3]'
  prefs: []
  type: TYPE_NORMAL
- en: typeof a[1];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"undefined"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: var a = [1, "two", false, null, undefined];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[1, "two", false, null, undefined]'
  prefs: []
  type: TYPE_NORMAL
- en: a[5] = [1, 2, 3];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[1, 2, 3]'
  prefs: []
  type: TYPE_NORMAL
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[1, "two", false, null, undefined, Array[3]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: var a = [[1, 2, 3], [4, 5, 6]];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Array[3], Array[3]]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: a[0];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[1, 2, 3]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: a[0][0];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '1'
  prefs: []
  type: TYPE_NORMAL
- en: a[1][2];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '6'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: var s = 'one';
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: s[0];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"o"'
  prefs: []
  type: TYPE_NORMAL
- en: s[1];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"n"'
  prefs: []
  type: TYPE_NORMAL
- en: s[2];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"e"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: var a = 1;
  prefs: []
  type: TYPE_NORMAL
- en: var b = 3;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: var a = 1;
  prefs: []
  type: TYPE_NORMAL
- en: var b = 3;
  prefs: []
  type: TYPE_NORMAL
- en: var c, d;
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: c = a + b;
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: d = a - b;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: var result = '', a = 3;
  prefs: []
  type: TYPE_NORMAL
- en: if (a > 2) {
  prefs: []
  type: TYPE_NORMAL
- en: result = 'a is greater than 2';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: if (a > 2) {
  prefs: []
  type: TYPE_NORMAL
- en: result = 'a is greater than 2';
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: result = 'a is NOT greater than 2';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: if (a > 2 || a < -2) {
  prefs: []
  type: TYPE_NORMAL
- en: result = 'a is not between -2 and 2';
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (a === 0 && b === 0) {'
  prefs: []
  type: TYPE_NORMAL
- en: result = 'both a and b are zeros';
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (a === b) {'
  prefs: []
  type: TYPE_NORMAL
- en: result = 'a and b are equal';
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: result = 'I give up';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: if (a === 1) {
  prefs: []
  type: TYPE_NORMAL
- en: if (b === 2) {
  prefs: []
  type: TYPE_NORMAL
- en: result = 'a is 1 and b is 2';
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: result = 'a is 1 but b is definitely not 2';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: result = 'a is not 1, no idea about b';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: var result = '';
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (somevar) {
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: result = 'yes';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'ReferenceError: somevar is not defined'
  prefs: []
  type: TYPE_NORMAL
- en: result;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '""'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: var result = "";
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (typeof somevar !== "undefined") {
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: result = "yes";
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: result;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '""'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: var somevar;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (typeof somevar !== "undefined") {
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: result = "yes";
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: result;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '""'
  prefs: []
  type: TYPE_NORMAL
- en: somevar = undefined;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (typeof somevar !== "undefined") {
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: result = "yes";
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: result;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '""'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: somevar = 123;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (typeof somevar !== "undefined") {
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: result = 'yes';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: result;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"yes"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: var a = 1;
  prefs: []
  type: TYPE_NORMAL
- en: var result = '';
  prefs: []
  type: TYPE_NORMAL
- en: if (a === 1) {
  prefs: []
  type: TYPE_NORMAL
- en: result = "a is one";
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: result = "a is not one";
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: var a = 1;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'var result = (a === 1) ? "a is one" : "a is not one";'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: var a = 123;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'a = a > 100 ? 100 : a < 50 ? 50: a;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '100'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: var a = 123;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'a = (a > 100 ? 100 : a < 50) ? 50 : a;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '50'
  prefs: []
  type: TYPE_NORMAL
- en: var a = 123;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'a = a > 100 ? 100 : (a < 50 ? 50 : a);'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '100'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: var a = '1',
  prefs: []
  type: TYPE_NORMAL
- en: result = '';
  prefs: []
  type: TYPE_NORMAL
- en: switch (a) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case 1:'
  prefs: []
  type: TYPE_NORMAL
- en: result = 'Number 1';
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: 'case ''1'':'
  prefs: []
  type: TYPE_NORMAL
- en: result = 'String 1';
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: 'default:'
  prefs: []
  type: TYPE_NORMAL
- en: result = 'I don't know';
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: var i = 0;
  prefs: []
  type: TYPE_NORMAL
- en: while (i < 10) {
  prefs: []
  type: TYPE_NORMAL
- en: i++;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: var i = 0;
  prefs: []
  type: TYPE_NORMAL
- en: do {
  prefs: []
  type: TYPE_NORMAL
- en: i++;
  prefs: []
  type: TYPE_NORMAL
- en: '} while (i < 10);'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: var punishment = '';
  prefs: []
  type: TYPE_NORMAL
- en: for (var i = 0; i < 100; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: punishment += 'I will never do this again, ';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: for (var i = 0, punishment = ''; i < 100; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: punishment += 'I will never do this again, ';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: for (
  prefs: []
  type: TYPE_NORMAL
- en: var i = 0, punishment = '';
  prefs: []
  type: TYPE_NORMAL
- en: i < 100;
  prefs: []
  type: TYPE_NORMAL
- en: i++, punishment += 'I will never do this again, ') {
  prefs: []
  type: TYPE_NORMAL
- en: // nothing here
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: var i = 0, punishment = '';
  prefs: []
  type: TYPE_NORMAL
- en: for (;;) {
  prefs: []
  type: TYPE_NORMAL
- en: punishment += 'I will never do this again, ';
  prefs: []
  type: TYPE_NORMAL
- en: if (++i == 100) {
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: var res = '\n';
  prefs: []
  type: TYPE_NORMAL
- en: for (var i = 0; i < 10; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: for (var j = 0; j < 10; j++) {
  prefs: []
  type: TYPE_NORMAL
- en: res += '* ';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: res += '\n';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: var res = '\n', i, j;
  prefs: []
  type: TYPE_NORMAL
- en: for (i = 1; i <= 7; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: for (j = 1; j <= 15; j++) {
  prefs: []
  type: TYPE_NORMAL
- en: 'res += (i * j) % 8 ? '' '' : ''*'';'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: res += '\n';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* * * * * * *'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: // example for information only
  prefs: []
  type: TYPE_NORMAL
- en: // for-in loops are used for objects
  prefs: []
  type: TYPE_NORMAL
- en: // regular for is better suited for arrays
  prefs: []
  type: TYPE_NORMAL
- en: var a = ['a', 'b', 'c', 'x', 'y', 'z'];
  prefs: []
  type: TYPE_NORMAL
- en: var result = '\n';
  prefs: []
  type: TYPE_NORMAL
- en: for (var i in a) {
  prefs: []
  type: TYPE_NORMAL
- en: 'result += ''index: '' + i + '', value: '' + a[i] + ''\n'';'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: 'index: 0, value: a'
  prefs: []
  type: TYPE_NORMAL
- en: 'index: 1, value: b'
  prefs: []
  type: TYPE_NORMAL
- en: 'index: 2, value: c'
  prefs: []
  type: TYPE_NORMAL
- en: 'index: 3, value: x'
  prefs: []
  type: TYPE_NORMAL
- en: 'index: 4, value: y'
  prefs: []
  type: TYPE_NORMAL
- en: 'index: 5, value: z'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: // beginning of line
  prefs: []
  type: TYPE_NORMAL
- en: var a = 1; // anywhere on the line
  prefs: []
  type: TYPE_NORMAL
- en: /* multi-line comment on a single line */
  prefs: []
  type: TYPE_NORMAL
- en: /*
  prefs: []
  type: TYPE_NORMAL
- en: comment that spans several lines
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: var a; typeof a;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: var s = '1s'; s++;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '!!"false";'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '!!undefined;'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: typeof -Infinity;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 10 % "0";
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: undefined == null;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: false === "";
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: typeof "2E+2";
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a = 3e+3; a++;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: var v = v || 10;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Experiment by first setting `v` to `100`, `0`, or `null`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a small program that prints out the multiplication table. Hint: use a
    loop nested inside another loop.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned a lot about the basic building blocks of a JavaScript
    program. Now you know the following primitive data types:'
  prefs: []
  type: TYPE_NORMAL
- en: Number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Undefined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Null'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You also know quite a few operators, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arithmetic operators**: `+`, `-`, `*`, `/`, and `%`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increment operators**: `++` and `-`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assignment operators**: `=`, `+=`, `-=`, `*=`, `/=`, and `%=`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Special operators**: `typeof` and `delete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logical operators**: `&&`, `||`, and `!`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comparison operators**: `==`, `===`, `!=`, `!==`, `<`, `>`, `>=`, and `<=`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The ternary operator**: `?`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then you learned how to use arrays to store and access data, and finally you
    saw different ways to control the flow of your program using conditions (`if...else`
    or `switch`) and loops (`while`, `do...while`, `for`, and `for...in`).
  prefs: []
  type: TYPE_NORMAL
- en: This is quite a bit of information; give yourself a well-deserved pat on the
    back before diving into the next chapter. More fun is coming up!
  prefs: []
  type: TYPE_NORMAL
