- en: Chapter 1. Saying Hello!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s follow several steps to establish a development environment for the
    simplest application possible, to show you how easy it is to get a web application
    up and running with Angular 2 and Bootstrap 4\. At the end of the chapter, you
    will have a solid understanding of:'
  prefs: []
  type: TYPE_NORMAL
- en: How to set up your development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How TypeScript can change your development life
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core concepts of Angular and Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a simple Angular component with Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to display some data through it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's set up your development environment. This process is one of the most overlooked
    and often frustrating parts of learning to program because developers don't want
    to think about it. Developers must know the nuances of how to install and configure
    many different programs before they start real development. Everyone's computers
    are different; as a result, the same setup may not work on your computer. We will
    expose and eliminate all of these problems by defining the various pieces of environment
    you need to set up.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a shell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **shell** is a required part of your software development environment. We
    will use the shell to install software and run commands to build and start the
    web server to bring life to your web project. If your computer has the Linux operating
    system installed then you will use a shell called **Terminal** . There are many
    Linux-based distributions out there that use diverse desktop environments, but
    most of them use the equivalent keyboard shortcut to open Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use keyboard shortcut *Ctrl* + *Alt* + *T* to open Terminal in Ubuntu, Kali,
    and Linux Mint. If it doesn't work for you, please check the documentation for
    your version of Linux.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a Mac computer with OS X installed, then you will use the Terminal
    shell as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use keyboard shortcut *command* + *space* to open the **Spotlight** , type Terminal
    to search and run.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a computer with a Windows operating system installed, you can use
    the standard **Command Prompt** , but we can do better. In a minute I will show
    you how can you install Git on your computer, and you will have Git Bash free.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can open a Terminal with the `Git Bash` shell program on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: I will use the Bash shell for all exercises in this book whenever I need to
    work in Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Node.js** is technology we will use as a cross-platform runtime environment
    to run server-side web applications. It is a combination of a native, platform-independent
    runtime based on Google''s V8 JavaScript engine and a huge number of modules written
    in JavaScript. Node.js ships with different connectors and libraries help you
    use HTTP, TLS, compression, file system access, raw TCP and UDP, and more. You
    as a developer can write your own modules on JavaScript and run them inside the
    Node.js engine. The Node.js runtime makes it easy to build a network event-driven
    application servers.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The terms *package* and *library* are synonymous in JavaScript so we will use
    them interchangeably.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is utilizing the **JavaScript Object Notation** ( **JSON** ) format
    widely in data exchanges between the server and client sides because it is readily
    expressed in several parse diagrams, notably without the complexities of XML,
    SOAP, and other data exchange formats.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Node.js for the development of service-oriented applications, doing
    something different than web servers. One of the most popular service-oriented
    applications is **node package manager** ( **npm** ), which we will use to manage
    library dependencies, deployment systems, and which underlies the many **platform-as-a-service**
    ( **PaaS** ) providers for Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have Node.js installed on your computer, you should download
    the pre-build installer from [https://nodejs.org/en/download](https://nodejs.org/en/download)
    , or you can use the unofficial package managers from [https://nodejs.org/en/download/package-manager](https://nodejs.org/en/download/package-manager)
    . You can start to use Node.js immediately after installation. Open Terminal and
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Node.js will respond with the version number of the installed runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Bear in mind that the version of Node.js installed on my computer could be different
    from yours. If these commands give you a version number, you are ready to go with
    Node.js development.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up npm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The npm is a package manager for JavaScript. You can use it to find, share,
    and reuse packages of code from many developers across the world. The number of
    packages dramatically grows every day and now is more than 250K. The npm is a
    Node.js package manager and utilizes it to run itself. The npm is included in
    the setup bundle of Node.js and available just after installation. Open Terminal
    and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The npm must respond on your command with a version number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'My Node.js comes with that particular version of npm. The npm gets updated
    quite frequently, so you''ll want to move to the latest version with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You may experience permission problems to search or install packages with npm.
    If that is the case, I recommend following the instructions from [https://docs.npmjs.com/getting-started/fixing-npm-permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions)
    and don't use superuser privileges to fix them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command gives us information about Node.js and the npm install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two ways to install npm packages: locally or globally. In cases when
    you would like to use the package as a tool, it''s better install it globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to find the folder with globally installed packages you can use
    the next command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Installation global packages are important, but best to avoid if not needed.
    Mostly you will install packages locally.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You may find locally installed packages in the `node_modules` folder of your
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're not familiar with Git then you're really missing out! Git is a distributed
    version control system and each Git working directory is a full-fledged repository.
    It keeps a complete history of changes and has full version tracking capabilities.
    Each repository is entirely independent of network access or a central server.
    You can keep Git repositories on your computer and share it with your mates, or
    you can take advantage of the many online VCS providers. The big guys you should
    look at closely are GitHub, Bitbucket, and Gitlab.com. Each has its own benefits,
    depending on your needs and project type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mac computers comes with Git already installed into the operating system but
    usually the version of Git is not the same as the latest one. You can update or
    install Git on your computer via a set of pre-build installers available on the
    official website [https://git-scm.com/downloads](https://git-scm.com/downloads)
    . After installation, you can open Terminal and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Git must respond with a version number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As I said, for developers who use computers with an installed Windows operation
    system, you now have Git Bash free on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Code editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can imagine how many programs for code editing exist, but we will talk today
    only about the free, open source, runs everywhere Visual Studio Code from Microsoft.
    You can use any program you prefer for development, but I will be using only Visual
    Studio code in our future exercises, so please install it from [http://code.visualstudio.com/Download](http://code.visualstudio.com/Download)
    .
  prefs: []
  type: TYPE_NORMAL
- en: A TypeScript crash course
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript is an open source programming language developed and maintained by
    Microsoft. Its initial public release was in October 2012 and was presented by
    Anders Hejlsberg, the lead architect of C# and creator of Delphi and Turbo Pascal.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.
    Any existing JavaScript is also valid TypeScript. It gives you type checking,
    explicit interfaces, and easier module exports. For now, it includes **ES5** ,
    **ES2015** , **ES2016** , and, in fact, it's a little like getting some of tomorrow's
    ECMAScripts early so that we can play with some of those features today.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the relationship between ECMAScripts and TypeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A TypeScript crash course](Image00001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Writing code using TypeScript is relatively straightforward if you already have
    a background in the JavaScript language. Try the TypeScript playground [http://www.typescriptlang.org/play](http://www.typescriptlang.org/play)
    to play with IntelliSense, find references, and so on, directly from your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TypeScript provides a static type checking operation that allows many bugs
    in the development cycle to be caught early. TypeScript enables type checking
    at compile time via type annotations. Types in TypeScript are always optional,
    so you can ignore them if you prefer the regular dynamic typing of JavaScript.
    It supports `number` , `boolean` , and `string` type annotations for primitive
    types and `any` for dynamically-typed structures. In the following example, I
    added type annotations to `return` and parameters for `function` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In one moment of compilation, a TypeScript compiler can generate a declaration
    file which contains only signatures of the exported types. The resulting declaration
    file with the extension `.d.ts` along with a JavaScript library or module can
    be consumed later by a third-party developer. You can find a vast collection of
    declaration files for many popular JavaScript libraries at:'
  prefs: []
  type: TYPE_NORMAL
- en: The **DefinitelyTyped** ([https://github.com/DefinitelyTyped/DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)
    )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Typings** registry ([https://github.com/typings/registry](https://github.com/typings/registry)
    )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrow function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Functions in JavaScript are first class citizens, which means they can be passed
    around like any other values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The first parameter in `reduce` is an anonymous function. Anonymous functions
    are very useful in many scenarios but too verbose. TypeScript introduced new,
    less verbose syntax to define anonymous functions called **arrow function** syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or event less:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'When defining parameters, you can even omit parentheses if the parameters are
    just a single identifier. So the regular `map` method of array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Could be much more concise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Both syntaxes `(x) => x * x` and `x => x * x` are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important feature of arrow function is that it doesn''t shadow `this`
    and pick it up from the lexical scope. Let''s assume we have a constructor function
    `Counter` which increments the value of an internal variable `age` in timeout
    and prints it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As result of using the arrow function, the `age` from the scope of `Counter`
    is available inside the callback function of `setTimeout` . Here is the converted
    to JavaScript ECMAScript 5 code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following variables are all lexical inside arrow functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`arguments`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`super`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`this`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new.target`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block scope variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All variables in ES5 declared with a `var` statement are function-scoped, and
    their scope belongs to enclosing functions. The result of the following code can
    be confusing because it returns `undefined` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `x` is an inner variable of the `random` function and does not have any
    relation to the variable defined on the first line. The result of calling the
    `random` function at the last line returned `undefined` , because the JavaScript
    interprets the code in `random` function like that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This confusing code can be fixed in TypeScript with new block-scope variable
    declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: The `let` is a block-scope version of `var`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `const` is similar `let` but allows initialize variable only once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The TypeScript compiler throws more errors with new block-scope variable declarations
    and prevents writing complicated and damaged code. Let''s change `var` to `let`
    in the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: And now our code works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I recommend using `const` and `let` to make the code cleaner and safer.
  prefs: []
  type: TYPE_NORMAL
- en: Template literals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we need string interpolation, we usually combine the values of variables
    and string fragments such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The TypeScript supports template literals--string literals allowing embedded
    expressions. You can use the string interpolation features of the template literals
    out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need multiline string, the template literals can help again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The last line prints results as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I recommend using template literals as a safer way of string interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: The for-of loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We usually use `for` statement or `forEach` method of `Array` to iterate over
    elements in JavaScript ES5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of these methods has its benefit:'
  prefs: []
  type: TYPE_NORMAL
- en: We can interrupt the `for` statement via `break` or`continue`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `forEach` method is less verbose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The TypeScript has `for-of` loop as a combination of both of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `for-of` loop supports `break` and `continue` and can use the `index` and
    `value` of each array via new `Array` method `entries` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Default value, optional and rest parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We quite often need to check the input parameters of functions and assign default
    values to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The TypeScript has syntax to handle default values of parameters to make previous
    functions shorter and safer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A default value of a parameter is assigned only by its `undefined` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each parameter of a function in JavaScript ES5 is optional, so an omitted one
    equals `undefined` . To make it strict, TypeScript expects a question mark at
    the end of parameters we want to be optional. We can mark the last parameter of
    the `square` function as optional and call the function with one or two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any optional parameters must follow the required parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some scenarios, we need to work with multiple parameters as a group, or
    we may not know how many parameters a function takes. The JavaScript ES5 provides
    the `arguments` variable in the scope of functions to work with them. In TypeScript,
    we can use a formal variable to keep the rest of the parameters. The compiler
    builds an array of the arguments passed in with the name given after the ellipses
    so that we can use it in our function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The interface is the way of defining contracts inside and outside the code
    of your project. We use the interface in TypeScript only to describe a type and
    the shape of data to help us keep our code error-free. In comparison with many
    other languages, the TypeScript compiler doesn''t generate any code for the interface
    so that it has not runtime cost. The TypeScript defines interfaces via the interface
    keyword. Let''s define a type `Greetable` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'It has a member function called `greetings` that takes a string argument. Here
    is how we can use it as a type of parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript has a prototype-based, object-oriented programming model. We can
    instantiate objects using the object literal syntax or constructor function. Its
    prototype-based inheritance is implemented on prototype chains. If you come from
    an object-oriented approach, you may feel uncomfortable when you try to create
    classes and inheritance based on prototypes. TypeScript allows for writing code
    based on an object-oriented class-based approach. The compiler translates the
    class down to JavaScript and works across all major web browsers and platforms.
    Here is the class `Greeter` . It has a property called `greeting` , a `constructor`
    , and a method `greet` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To refer to any member of the class we prepend `this` . To create an instance
    of the class we use the `new` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We can extend an existing class to create new ones via inheritance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the class `EmailGreeter` , we demonstrate several features of inheritance
    in TypeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: We use `extends` to create a subclass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We must call `super` in the first line of the constructor to pass values into
    base class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We call the `greet` method of the base class to create a subject for `mailto`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TypeScript classes support `public` , `protected` , and `private` modifiers
    to access the members that we declared throughout our programs. Each member of
    the class is public by default. There are not a requirement to labeled all `public`
    members with that keyword but you may mark them explicitly. Use protected modifier
    if you need to restrict access to members of the class from outside, but bear
    in mind that they are still available from deriving classes. You can mark the
    constructor as protected so that we cannot instantiate the class but we can extend
    it. The `private` modifier restricts access to member only on the class level.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at constructors of `EmailGreeter` , we had to declare a private
    member `email` and a constructor parameter `emailAddr` . Instead, we can use parameter
    properties to let us create and initialize a member in one place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: You can use any modifier in parameter properties.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use parameter properties to consolidate the declaration and assignment in one
    place.
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeScript supports getters and setters to organize intercepting access to
    members of an object. We can change the original `Greeter` class with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We check the `value` parameter inside the setter of `greeting` and modify it
    if necessary to empty string before assigning it to the private member.
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeScript supports class members via the static modifier as well. Here the
    class `Types` contains only static members:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We can access those values through prepending the name of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'TypeScript gives us supreme flexibility via abstract classes. We cannot create
    instances of them, but we can use them to organize base classes from which each
    distinct class may be derived. We can convert the `greeting` class into abstract
    with just one keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The method `greet` is marked as `abstract` . It doesn't contain an implementation
    and must be implemented in derived classes.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we are writing the code, we usually divide it into functions and the blocks
    inside those functions. The size of a program can increase very quickly, and individual
    functions start to blend into the background. We can make such a program more
    readable if we split them into large units of an organization like modules. At
    the beginning of writing a program, you may not know how to structure it, and
    you can use structureless principles. When your code becomes stable you can put
    pieces of functionality into separate modules to make them easy to track, update,
    and share. We store modules of TypeScript in files, exactly one module per file
    and one file per module.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript ES5 doesn't have built-in support for modules and we used AMD
    or CommonJS syntax to work with them. TypeScript supports the concept of modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'How do the scope and module depend on each other? The global scope of JavaScript
    doesn''t have access to the scope of executing modules. It creates its own scope
    for each individual execution module, so everything declared inside the module
    is not visible from outside. We need to explicitly export them to make them visible
    and import them to consume them. The relationship between modules is defined at
    the file level regarding exports and imports. Any file defines a top-level `export`
    or `import` and is considered a module. Here is a `string-validator.ts` file which
    contains the exported declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'I have created another file `zip-validator.ts` with several members, but exported
    only one of them to hide another one from outside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You can re-export declarations if your module extends other modules. Here `validators.ts`
    contains a module, wraps other validator modules, and combines all their exports
    in one place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can import validator modules using one of the import forms. Here is
    a single export from a module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To prevent a naming conflict we can rename an imported declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can import an entire module into a single variable, and use it
    to access module exports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Generics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The authors of TypeScript put maximal effort into helping us to write reusable
    code. One of the tools that helps us to create code that can work with a variety
    of types rather than a single one is **generics** . The benefits of generics include:'
  prefs: []
  type: TYPE_NORMAL
- en: Allows you to write code/use methods which are type-safe. An `Array<string>`
    is guaranteed to be an array of strings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The compiler can perform a compile-time check on code for type safety. Any attempt
    to assign the `number` into an array of strings causes an error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster than using `any` type to avoid casting into a required reference type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows you to write code which is applicable to many types with the same underlying
    behavior.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the class I have created to show you how useful generics can be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This class keeps the single value of a particular type. To set or return it
    we can use corresponding getter and setter methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: What are promises?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A promise represents the final result of an asynchronous operation. There are
    a number of libraries that support the use of promises in TypeScript. But before
    starting to talk about this, let's talk a bit about the browser environment which
    executes your JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Event loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each browser tab has an event loop and uses different tasks to coordinate events,
    user interactions, running scripts, rendering, networking, and so on. It has one
    or more queues to keep an ordered list of tasks. Other processes run around the
    event loop and communicate with it by adding tasks to its queue such as:'
  prefs: []
  type: TYPE_NORMAL
- en: The timer waits after a given period and then adds a task to the queue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can call a `requestAnimationFrame` function to coordinate DOM updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DOM elements can call event handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The browser can request the parsing of an HTML page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript can load an external program and perform computation on it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Many of the items in the list above are JavaScript code. They are usually small
    enough, but if we run any long-running computation it could block execution of
    other tasks, and as a result it freezes the user interface. To avoid blocking
    the event loop we can:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **web worker API** to execute a long-running computation in a different
    process of the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not wait for the result of a long-running computation synchronously and allow
    the task to inform us about results via events or callbacks asynchronously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous results via events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code uses an event-driven approach to convince us and adds event
    listeners to execute small code snippets inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The method `send` in the last line of code just adds another task to the queue.
    This approach is useful if you receive results multiple times, but this code is
    quite verbose for a single result.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous results via callbacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To manage asynchronous results via callbacks, we need to pass a callback function
    as a parameter into asynchronous function calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'This approach is very easy to understand, but it has its disadvantages:'
  prefs: []
  type: TYPE_NORMAL
- en: It mixes up input and output parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is complicated to handle errors especially in the code combined many callbacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is more complicated to return result from combined asynchronous functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous results via promises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As I mentioned earlier, the promise represents the final result of an asynchronous
    operation happening in the future. Promises have the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: You write cleaner code without callback parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You do not adapt the code of the underlying architecture for delivery results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your code handles errors with ease
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A promise may be in one of the following states:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pending state** : The asynchronous operation hasn''t completed yet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resolved state** : The asynchronous operation has completed and the promise
    has a value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rejected state** : The asynchronous operation failed and the promise has
    a reason which indicates why it failed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The promise becomes immutable after resolving or rejecting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, you write the code to return the promise from functions or methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: We use the `new` keyword with a function constructor to create the promise.
    We add a factory function with two parameters into the constructor, which does
    the actual work. Both parameters are callback functions. Once the operation has
    successfully completed the factory function calls the first callback with the
    result. If the operation fails it calls the second function with the reason.
  prefs: []
  type: TYPE_NORMAL
- en: 'The returned promise has several methods such as `.then` and `.catch` to inform
    us of the result of the execution so that we can act accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We can call another operation returns promise to quickly transform the result
    of original one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Angular 2 concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Angular 2** is a development platform for building web, mobile, and desktop
    applications. It is based on web standards to make web development simpler and
    more efficient, and entirely different from the Angular JS 1.x. The architecture
    of Angular 2 builds on top of the web component standard so that we can define
    custom HTML selectors and program behavior for them. The Angular team develops
    Angular 2 to use in the ECMAScript 2015, TypeScript, and Dart languages.
  prefs: []
  type: TYPE_NORMAL
- en: Building blocks of Angular 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Any web application built on Angular 2 consist of:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML templates with Angular-specific markup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directives and components managing the HTML templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services containing application logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special `bootstrap` function which helps to load and start the Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Angular 2 application is an assembly of many modules. Angular 2 itself
    is a set of modules with names beginning with the `@angular` prefix, combined
    into libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: The `@angular/core` is the primary Angular 2 library and contains all core public
    APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@angular/common` is the library which restricts APIs to reusable components,
    directives, and form building
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@angular/router` is the library that supports navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@angular/http` is the library that helps us work asynchronously via HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metadata is information we can attach to underlying definitions via TypeScript
    decorators to tell Angular how to modify them. Decorators play a significant role
    in Angular 2.
  prefs: []
  type: TYPE_NORMAL
- en: Directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Directives are the fundamental building block of Angular 2 and allows you to
    connect behavior to an element in the DOM. There are three kinds of directive:'
  prefs: []
  type: TYPE_NORMAL
- en: Attribute directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structural directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A directive is a class with an assigned `@Directive` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: Attribute directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The attribute directive usually changes the appearance or behavior of an element.
    We can change several styles, or use it to render text bold or italic by binding
    it to a property.
  prefs: []
  type: TYPE_NORMAL
- en: Structural directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The structural directive changes the DOM layout by adding and removing other
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The component is a directive with a template. Every component is made up of
    two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The class, where we define the application logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The view, which is controlled by the component and interacts with it through
    an API of properties and methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A component is a class with the assigned `@Component` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The component uses the template to render the view. It is regular HTML with
    custom defined selectors and Angular-specific markups.
  prefs: []
  type: TYPE_NORMAL
- en: Data binding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Angular 2 supports *data binding* to update parts of the template via the
    properties or methods of a component. The *binding markup* is part of data binding;
    we use it on the template to connect both sides.
  prefs: []
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular 2 has no definition of a service. Any value, function, or feature can
    be a service, but usually it is a class created for a distinct purpose with an
    assigned `@Injectable` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dependency injection is a design pattern that helps configure objects by an
    external entity and resolve dependencies between them. All elements in the loosely
    coupled system know little or nothing about definitions of each other. We can
    replace almost any element with alternative implementation without breaking the
    whole system.
  prefs: []
  type: TYPE_NORMAL
- en: SystemJS loader and JSPM package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed TypeScript modules, so it's time to talk about tools we can
    use for loading modules in our scripts.
  prefs: []
  type: TYPE_NORMAL
- en: SystemJS Loader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SystemJS** is a universal dynamic module loader. It hosts the source code
    on GitHub at the following address [https://github.com/systemjs/systemjs](https://github.com/systemjs/systemjs)
    . It can load modules in the web browser and Node.js in the following formats:'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 2015 (ES6) or TypeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AMD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CommonJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SystemJS loads modules with an exact circle reference, binding support, and
    assets through the module naming system such as CSS, JSON, or images. Developers
    can easily extend the functionality of the loader via plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add SystemJS loader to our future project:'
  prefs: []
  type: TYPE_NORMAL
- en: Via direct link to a  **Content Delivery Network** ( **CDN** )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By installing via npm manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In both scenarios, we include a reference to the SystemJS library in our code
    and configure it via the `config` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: We will speak about installation via npm manager a bit later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: JSPM package manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The developers of the SystemJS followed the single-responsibility principle
    and implemented a loader for doing only one thing: loading the modules. To make
    modules available in your project, we need to use the package manager. We spoke
    about the npm package manager at the beginning, so now we will talk about the
    JSPM package manager sitting on top of SystemJS. It can:'
  prefs: []
  type: TYPE_NORMAL
- en: Download modules from any registry such as npm and GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile modules into simple, layered, and self-executing bundles with a single
    command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JSPM package manager looks like an npm package manager, but it puts the
    browser loader first. It helps you organize a seamless workflow for installing
    and using libraries in the browser with minimum effort.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your first application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, when we have everything in place, it''s time to create our first project,
    which is actually an npm module. Open Terminal and create the folder `hello-world`
    . I intentionally follow the npm package naming conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: The package name length should be greater than zero and cannot exceed 214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the characters in the package name must be lowercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package name can consist of/include hyphens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package name must contain any URL-safe characters (since the name ends up
    being part of a URL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package name should not start with dot or underscore letters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package name should not contain any leading or trailing spaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package name cannot be the same as a `node.js/io.js` core module or a reserved/blacklisted
    name like `http` , stream, `node_modules` , and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Move the folder in and run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'npm will ask you several questions to create a `package.json` file. This file
    keeps important information about your package in JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: Project information like name, version, author, and license
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set of packages the project depends on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set of pre-configured commands to build and test the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is how `package.js` could look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: We are ready to configure our project.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript compile configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the Visual Studio code and open the project folder. We need to create a configuration
    file which guides the TypeScript compiler on where to find the source folder and
    required libraries and how to compile the project. From the **File** menu create
    `tsconfig.json` file, and copy/paste the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look closer at the `compilerOptions` :'
  prefs: []
  type: TYPE_NORMAL
- en: The `target` option specifies the ECMAScript version such `es3` , `es5` , or
    `es6` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `module` option specifies the module code generator from one of these:
    `none` , `commojs` , `amd` , `system` , `umd` , `es6` , or `es2015` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `moduleResolution` option determines how modules get resolved. Use `node`
    for `Node.js/io.js` style resolution or `classic` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `sourceMap` flag tells the compiler to generate a corresponding `map` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `emitDecoratorMetadata` emits the design-type metadata for decorated declarations
    in source.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `experimentalDecorator` enables experimental support for ES7 decorators
    such iterators, generators and array comprehensions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `removeComments` removes all comments except copyright header comments beginning
    with `/*!` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `noImplicitAny` raises an error on expressions and declarations with an
    implied `any` type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find the full list of compiler options here: [https://www.typescriptlang.org/docs/handbook/compiler-options.html](https://www.typescriptlang.org/docs/handbook/compiler-options.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'The TypeScript compiler needs type definition files of JavaScript libraries
    from `node_modules` of our project because it doesn''t recognize them natively.
    We help it with `typings.json` file. You should create the file and copy/paste
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We should provide enough information to typings tool to get any typings file:'
  prefs: []
  type: TYPE_NORMAL
- en: The registry dt is located in the DefinitelyTyped source. This value could be
    npm, git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package name in `DefinitelyTyped` source is the `es6-shim`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are looking for the version `0.31.2` updated `2016.03.17 12:06:54`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Task automation and dependency resolution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, it''s time to add the libraries into the `package.json` file that the
    application requires. Please update it accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Our configuration includes `scripts` to handle common development tasks such:'
  prefs: []
  type: TYPE_NORMAL
- en: The `postinstall` script runs after the package is installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `start` script runs by the npm `start` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The arbitrary scripts `lite` , `tsc` , `tsc:w` , and `typings` are executed
    by the `npm run <script>` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find more documentation on the following web page: [https://docs.npmjs.com/misc/scripts](https://docs.npmjs.com/misc/scripts)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'After finishing the configuration let''s run `npm` manager to install the packages
    required. Go back to Terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'During installation, you may see warning messages in red starting with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: You should ignore them if the installation finishes successfully. After installation,
    the npm executes the `postinstall` script to run `typings` installation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and bootstrapping an Angular component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Angular 2 application must always have a top-level component, where all
    other components and logic lie. Let''s create it. Go to the Visual Studio code
    and create a sub-folder `app` of the root directory where we will keep the source
    code. Create the file `app.component.ts` under `app` folder, and copy/paste the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have added metadata via `@Component` decorator to the class
    `AppComponent` . This decorator tells Angular how to process the class via configuration
    with the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: The `selector` defines the name of an HTML tag which our component will link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We pass in any service in the `providers` property. Any service registered here
    becomes available to this component and its children
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We give away any number of style files to `styles` a particular component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `template` property will hold the template of the component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template `url` is a URL to an external file containing a template for the
    view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to `export` the class `AppComponent` to make it visible from other modules
    and Angular can instantiate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular application is a composition of multiple modules marked with `NgModule`
    decorator. Any application must have at least one root module, so let''s create
    `AppModule` in the `app.module.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The WebBrowser is a collection of modules and providers specific for web browsers
    such as document DomRootRenderer, and so on. We import WebBrowser into the application
    module to make all of those providers and modules available in our application,
    thereby reducing the amount of boilerplate code-writing required. Angular contains
    the `ServerModule` : a similar module for the server side.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to start up our application. Let''s create `main.ts` file under
    `app` folder, and copy/paste the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but not least, we rely on the `bootstrap` function to load top-level components.
    We import it from `''@angular/platform-browser-dynamic''` . Angular has a different
    kind of `bootstrap` function for:'
  prefs: []
  type: TYPE_NORMAL
- en: Web workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development on mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering the first page of an application on a server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular does several tasks after instantiation of any component:'
  prefs: []
  type: TYPE_NORMAL
- en: It creates a shadow DOM for it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It loads the selected template into the shadow DOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It creates all the injectable objects configured with `'providers'` and `'viewProviders'`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the end, Angular 2 evaluates all template expressions and statements against
    the component instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create `index.html` file in Microsoft Visual Studio code under the root
    folder with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we are referencing the `systemjs.config.js` file, let''s create it
    in the root folder with the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Compiling and running
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are ready to run our first application. Go back to Terminal and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'This script runs two parallel Node.js processes:'
  prefs: []
  type: TYPE_NORMAL
- en: The TypeScript compiler in watch mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The static `lite-server` loads `index.html` and refreshes the browser when the
    application file changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your browser you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Compiling and running](Image00002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_1/1.hello-world`  folder.
  prefs: []
  type: TYPE_NORMAL
- en: Adding user input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now need to include our text input and also, specify the model we want to
    use. When a user types in the text input, our application shows the changed value
    in the title. Also, we should import the `FormsModule` into the `AppModule` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the updated version of `app.component.ts` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ngModel` attribute declares a model binding on that element, and anything
    we type into the input box will be automatically bound to it by Angular. Obviously,
    this isn''t going to be displayed on our page by magic; we need to tell the framework
    where we want it echoed. To show our model on the page, we just need to wrap the
    name of it in double curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'I popped this in place of World in our `<h1>` tag and refreshed the page in
    my browser. If you pop your name in the input field, you''ll notice that it''s
    automatically displayed in your heading in real time. Angular does all of this
    for us, and we haven''t written a single line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding user input](Image00003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, while that''s great, it would be nice if we could have a default in place
    so it doesn''t look broken before a user has entered their name. What''s awesome
    is that everything in between those curly braces is parsed as an Angular expression,
    so we can check and see if the model has a value, and if not, it can echo `''World''`
    . Angular calls this an expression and it''s just a case of adding two pipe symbols
    as we would in TypeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: It's good to remember that this is TypeScript, and that's why we need to include
    the quotation marks here, to let it know that this is a string and not the name
    of a model. Remove them and you'll notice that Angular displays nothing again.
    That's because both the name and `World` models are undefined.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code into the `chapter_1/2.hello-input` . folder.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Bootstrap 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve created our `Hello World` application, and everything is working
    as expected, it''s time to get involved with Bootstrap and add a bit of style
    and structure to our app. At the time of writing this book Bootstrap 4 was in
    alpha version, so bear in mind that the code and markup of your application might
    be slightly different. We need to add the Bootstrap 4 style sheet into the `index.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'The application is currently misaligned to the left, and everything is looking
    cramped, so let''s sort that out first with a bit of scaffolding. Bootstrap comes
    with a great *mobile first* responsive grid system that we can utilize with the
    inclusion of a few `div` elements and classes. First, though, let''s get a container
    around our content to clean it up immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mobile first is a way of designing/developing for the smallest screens first
    and adding to the design rather than taking elements away.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'If you resize your browser window, you should start to notice some of the responsiveness
    of the framework coming through and see it collapsing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating Bootstrap 4](Image00004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, I think it''s a good idea to wrap this in what Bootstrap calls a Jumbotron
    (in previous versions of Bootstrap this was a hero unit). It''ll make our headline
    stand out a lot more. We can do this by wrapping our `H1` and `input` tags in
    a new `div` with the `jumbotron` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '![Integrating Bootstrap 4](Image00005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's starting to look a lot better, but I'm not too happy about our content
    touching the top of the browser like that. We can make it look a lot nicer with
    a page header, but that input field still looks out of place to me.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s sort out that page header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '![Integrating Bootstrap 4](Image00006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I've included the chapter number and title here. The `<small>` tag within our
    `<h2>` tag gives us a nice differentiation between the chapter number and the
    title. The page-header class itself just gives us some additional margin and padding
    as well as a subtle border along the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'The utmost thing I think we could improve upon is that input box. Bootstrap
    comes with some cool input styles so let''s include those. First, we need to add
    the class of form-control to the text input. This will set the width to 100% and
    also bring out some beautiful styling such as rounded corners and glowing when
    we focus on the element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '![Integrating Bootstrap 4](Image00007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Much better, but to me it looks a little small when you compare it with the
    heading. Bootstrap provides two additional classes we can include that will either
    make the element smaller or larger: `form-control-lg` and `form-control-sm` respectively.
    In our case, the `form-control-lg` class is the one we want, so go ahead and add
    that to the input.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '![Integrating Bootstrap 4](Image00008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_1/3.hello-bootstrap` .
  prefs: []
  type: TYPE_NORMAL
- en: 读累了记得休息一会哦~
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**公众号：古德猫宁李**'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书单分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书友学习交流
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 电子书打包资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 学习资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our app's looking great and working exactly how it should, so let's recap what
    we've learnt in the first chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, we saw just how to setup a working environment and finish the
    TypeScript crash course.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Hello World` app we''ve created, while being very basic, demonstrates
    some of Angular''s core features:'
  prefs: []
  type: TYPE_NORMAL
- en: Component directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application bootstrapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two-way data binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of this was possible without writing a single line of TypeScript, as the
    component we created was just to demonstrate two-way data binding.
  prefs: []
  type: TYPE_NORMAL
- en: With Bootstrap, we utilized a few of the many available components such as the
    Jumbotron and the page-header classes to give our application some style and substance.
    We also saw the framework's new mobile first responsive design in action without
    cluttering up our markup with unnecessary classes or elements.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](text00023.html#page "Chapter 2. Working with Bootstrap Components")
    , *Working with Bootstrap Components* , we're going to explore more Bootstrap
    fundamentals and introduce the project we're going to be building over the course
    of this book.
  prefs: []
  type: TYPE_NORMAL
