- en: Simplifying Automation with AWX and Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all the previous chapters in this book, we have been using Ansible and, more
    specifically, Ansible Engine, and we have carried out different automation tasks
    using the **command-line interface** (**CLI**) options provided by Ansible. However,
    consuming Ansible in this approach at a large scale, and in an IT enterprise across
    multiple teams, can be challenging. This is why we will introduce the **Ansible
    Web eXecutable** (**AWX**) framework. AWX is an open source project, and it is
    the upstream project from which Red Hat Ansible Tower is derived.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWX is a wrapper around Ansible Engine, and it provides extra features in order
    to simplify running Ansible at scale in an enterprise, across different teams.
    It provides multiple additional features, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A graphical user interface (GUI)-based interface**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWX provides a visual dashboard to execute Ansible playbooks and to monitor
    their status, as well as providing different statistics regarding the different
    objects within AWX.
  prefs: []
  type: TYPE_NORMAL
- en: '**Role-based access control (RBAC)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWX provides RBAC over all the objects within the AWX interface, such as Ansible
    playbooks, Ansible inventories, and machine credentials. This RBAC provides fine-grained
    control regarding who can create/edit/delete the different components within AWX.
    This provides a very powerful framework for delegating simple automation tasks
    to operations teams, and design teams can focus on developing the playbooks and
    the workflows. AWX provides the ability to define different users and assign them
    privileges according to their job role.
  prefs: []
  type: TYPE_NORMAL
- en: '**Inventory management**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWX provides a GUI to define inventories as either static or dynamic and has
    the ability to define hosts and groups, similar to the structure followed by Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: '**Credential management**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWX provides central management for credentials such as passwords and **Secure
    Shell** (**SSH**) keys used to access the different systems in an organization,
    such as servers and network devices. All the credentials, once created, are encrypted,
    and can't be retrieved in plaintext format. This provides more security control
    regarding this sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Centralized logging**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWX collects logs for all the automation tasks run on the AWX node, thus audits
    can be completed to understand who runs which playbooks on which nodes, and what
    the status of these playbooks is.
  prefs: []
  type: TYPE_NORMAL
- en: '**Representational State Transfer (RESTful) application programming interface
    (API)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWX provides a rich API, which allows us to execute automation tasks from the
    API; this simplifies integrating Ansible with other orchestration and ticketing
    systems that are already in place in a typical enterprise environment. Also, you
    can use the API to retrieve all the information accessible from the GUI, such
    as the inventory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The AWX Project is comprised of multiple open source software projects bundled
    together to provide all the features listed previously and to construct the AWX
    automation framework. The following diagram outlines the different components
    that are inside the AWX framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f163d476-8a5c-4369-b8de-6c169d3b2463.png)'
  prefs: []
  type: TYPE_IMG
- en: AWX can be deployed using different deployment tools, such as Docker Compose,
    Docker Swarm, or Kubernetes. It can be deployed as a standalone application or
    in a cluster (using Kubernetes or Docker Swarm). Using a cluster is more complex;
    however, it provides extra resiliency to the overall AWX deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the main recipes covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing users and teams on AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a network inventory on AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing network credentials on AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating projects on AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating templates on AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating workflow templates on AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running automation tasks using the AWX API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the code presented in this chapter can be found at this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch12_awx](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch12_awx)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter is based on the following software releases:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible/AWX machine running Ubuntu 16.04
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible 2.9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWX 9.0.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information regarding the AWX Project, please check the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.ansible.com/products/awx-project](https://www.ansible.com/products/awx-project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.ansible.com/products/awx-project/faq](https://www.ansible.com/products/awx-project/faq)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.redhat.com/en/resources/awx-and-ansible-tower-datasheet](https://www.redhat.com/en/resources/awx-and-ansible-tower-datasheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWX can be deployed in multiple different ways; however, the most convenient
    way is to deploy it using containers. In this recipe, we will outline how to install
    AWS using Docker containers, in order to start to interact with the AWX interface.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prepare a fresh Ubuntu 16.04 machine, on which we will deploy AWX – it must
    have internet connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ensure Python 3 is installed on the Ubuntu Linux machine and that pip is installed
    and upgraded to the latest version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Ansible on the Linux machine, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Docker on the Ubuntu Linux machine, using the following URL: [https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Docker Compose on the Ubuntu machine, using the following URL: [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the `docker` and `docker-compose` Python modules, as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Node.js 10.x and **Node Package Manager** (**npm**) 6.x on the Ubuntu
    Linux machine as per the following URL, using the **Personal Package Archive**
    (**PPA***)* method to get the exact and updated version: [https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04](https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new directory called `ch12_awx`, and clone the AWX project GitHub
    repository to a new directory called `awx_src`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Change to the installation directory and run the installation playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As outlined in the introduction, AWX consists of multiple components glued together
    in order to provide a complete framework. This means AWX can be deployed by installing
    each component and configuring them, then integrating all these distinct products
    to create the AWX framework. The other alternative is to use a container-based
    deployment, creating a container for each component, and gluing them together
    in a microservices architecture. The container-based approach is the recommended
    approach, and this is what we use to deploy AWX.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are going to use containers, we need to orchestrate between these different
    components; thus, we need a container orchestration tool. AWX supports deployment
    over Kubernetes, OpenShift, and `docker-compose`, and the simplest of these is
    `docker-compose`. For this reason, this is the method outlined in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The AWX installer requires Ansible to be present on the deployment node since
    the installer is based on Ansible playbooks. These playbooks build/download the
    containers for the different components of AWX (PostgreSQL, NGINX, and so on),
    create the `docker-compose` declaration file, and start the containers. Thus,
    our first step is to install Ansible. Then, we need to install `docker` and `docker-compose`,
    as well as other required dependencies for the installation and the correct operation
    of the AWX containers.
  prefs: []
  type: TYPE_NORMAL
- en: Once we install all these prerequisites, we are ready to install AWX. We clone
    the AWX project GitHub repo, and, in this repo, there is the `installer` directory,
    which has all the Ansible roles and playbooks to deploy the containers. The `installer`
    directory has the `inventory` file, which defines the host to which we will deploy
    the AWX framework; in this case, it is the localhost. The `inventory` file also
    lists other variables such as the admin password, as well as the passwords for
    the PostgreSQL and RabbitMQ databases. Since this is a demo deployment, we will
    not change these variables, and we will deploy using these default parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installation is complete, we can verify that all the Docker containers
    are up and running, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **CONTAINER ID STATUS** | **IMAGE PORTS** | **COMMAND** | **CREATED NAMES**
    |'
  prefs: []
  type: TYPE_TB
- en: '| `225b95337b6d` Up 2 hours | `ansible/awx_task:7.0.0` `8052/tcp` | "`/tini
    -- /bin/sh -c…`" | 30 hours ago `awx_task` |'
  prefs: []
  type: TYPE_TB
- en: '| `2ca06bd1cd87` Up 2 hours | `ansible/awx_web:7.0.0` `0.0.0.0:80->8052/tcp`
    | "`/tini -- /bin/sh -c…`" | 30 hours ago `awx_web` |'
  prefs: []
  type: TYPE_TB
- en: '| `66f560c62a9c` Up 2 hours | `memcached:alpine` `11211/tcp` | "`docker-entrypoint.s…`"
    | 30 hours ago `awx_memcached` |'
  prefs: []
  type: TYPE_TB
- en: '| `fe4ccccdb511` Up 2 hours | `postgres:10` `5432/tcp` | "`docker-entrypoint.s…`"
    | 30 hours ago `awx_postgres` |'
  prefs: []
  type: TYPE_TB
- en: '| `24c997d5991c` Up 2 hours | `ansible/awx_rabbitmq:3.7.4` `4369/tcp, 5671-5672/tcp,
    15671-15672/tcp, 25672/tcp` | "`docker-entrypoint.s…`" | 30 hours ago `awx_rabbitmq`
    |'
  prefs: []
  type: TYPE_TB
- en: 'We can log in to the AWX GUI by opening the web browser and connecting to the
    machine **internet protocol** (**IP**) address with the following credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: 'USERNAME: `admin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PASSWORD: `password`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2c21e2c1-ec7f-4fa6-8cdc-de994be62faf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we log in to AWX, we will see the main dashboard, along with all the options
    available for configuration on the left panel (Organizations, Teams, Projects,
    and so on):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a9730e4a-6dfe-4fc0-a641-1f6b71c56b8b.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to simplify the deployment of all the prerequisites for AWX, I have
    included an Ansible playbook called `deploy_awx.yml`, along with multiple roles
    that are used to orchestrate the deployment of all the AWX components. We can
    deploy the AWX components using this playbook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Ansible on the machine, as outlined in this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone the GitHub repo for this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change to the `ch12_awx` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'From inside this directory, run the playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding AWX installation, please check the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ansible/awx/blob/devel/INSTALL.md](https://github.com/ansible/awx/blob/devel/INSTALL.md)'
  prefs: []
  type: TYPE_NORMAL
- en: Managing users and teams on AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to create users and teams in AWX. This is
    the way to implement RBAC and enforce privileges for the different teams within
    the organization, in order to provide more control over the different activities
    that can be carried out on the AWX platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWX should be deployed as outlined in the previous recipe, and all the following
    tasks must be executed with the `admin` user account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new organization for all Network teams—as shown in the following screenshot—by
    selecting the organization from the left panel and pressing the SAVE button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/20f55582-03bb-45e6-82d7-1ce39e830d02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new team within the Network organization for the Design team, by selecting
    the team from the left panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/434fcf55-1a8d-4955-8702-ea070da6d810.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create another team within the Network organization for the Operation team,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c118853f-0564-488e-a50f-f18801a768e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a `core` user within the Network organization by selecting the USERS button,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1edbe04d-44ff-403c-a308-74608d7ff9d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Assign this new user to the `Network_Design` team, click the TEAMS tab from the
    left panel, and then select the `Network_Design` team. Click on USERS and then
    add the `core` user to this team, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/94a7237f-1553-4d2f-a5c0-ff2ecbc25d3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat the preceding steps to create a `noc` user, and assign them to the `Network_Operation`
    team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the `Network_Design` team, assign the Project Admin, Credential Admin,
    and Inventory Admin permissions to the organization, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/20173148-37dd-4f2b-9d16-ae0064852fd3.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main features in AWX is its RBAC, which is achieved by different
    objects within AWX. These objects are mainly the organization, users, and teams.
    Since AWX should be the automation framework at an enterprise scale, different
    teams within the organization need to co-exist in AWX. Each of these teams manages
    its own devices and maintains its own playbooks, to manage its managed infrastructure.
    In AWX, the **Organization** is our method to differentiate these different organizations
    within the enterprise. In our sample example, we have created a Network organization
    to group all the teams and users responsible for the network infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the Organization, we have different users with different roles, who
    should have different levels of access to our central automation AWX framework.
    In order to simplify assigning the correct role to each user, we use the concept
    of **Teams** in order to group users with similar privileges/roles. So, in our
    case, we created two **Teams**: the `Network_Design` and `Network_Operation` teams.
    The roles and privileges for these two teams are described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Network_Design` team is responsible for creating the playbooks and creating
    the network inventories, along with the correct credentials to access these devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Network_Operation` team has the privilege to view these inventories and
    to execute the playbook developed by the Design team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These different constructs work together to build a fine-grained RBAC for each
    user, utilizing the AWX framework.
  prefs: []
  type: TYPE_NORMAL
- en: Since we have assigned to the `Network_Design` team the Project Admin, Inventory
    Admin, and Credential Admin roles, all the users within this team are able to
    create/edit/delete and use all these objects within the Network organization only.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding RBAC and how to use users and **Teams**, please
    check the following links for Ansible Tower:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/organizations.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/organizations.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/users.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/users.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/teams.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/teams.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a network inventory on AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to create a network inventory in AWX. Inventories
    are fundamentals as they describe our network infrastructure and provide us with
    the capability to group our network devices efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWX must be installed and reachable, and the user accounts must be deployed,
    as outlined in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new inventory called `mpls_core` by navigating to the INVENTORIES tab
    on the left navigation bar, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d302e4e9-afd3-4a1b-9234-87dfca828316.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new group called `junos`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/03259983-c8aa-4a75-86d7-dfd0fac7c3bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create the `iosxr`, `pe`, and `P `groups, using a similar approach. The final
    group structure under the mpls_core inventory should be similar to the one shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dc6a55fd-4cc6-4467-a141-6f21536a4449.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create the `mxpe01` host device under the HOSTS tab, and create the `ansible_host`
    variable under the VARIABLES section, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5ba6afcd-9ac2-4d8c-ad30-17e82a00dd82.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat the same process to create the remaining hosts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the `junos` group that we have created and add the corresponding hosts,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8a86349f-4d5a-47ee-858c-3c8164f189d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat this for all the remaining groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After creating the `mpls_core` inventory, we will grant read access to the
    `Network_Operation` group for this inventory, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4208d9fb-5c73-4445-aae8-c0456ee38679.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we are building the inventory for our network. This is the
    exact step of defining an inventory file that we use with all our Ansible playbooks.
    The following code block shows the static inventory file that we normally define
    when we work with Ansible, and we outline how we can define the same exact structure
    using inventories in AWX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can define variables for our inventory on the group or host level. In our
    case, we are defining the `ansible_host` variable for each host, in order to tell
    AWX how to reach each host in our inventory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We update the permissions on our inventory so that the operations team has
    read access to it, in order to view its components. Since the design team has
    the inventory admin privilege, the design team has full administrative rights
    on all the inventories created within the network organization. The permissions
    on our inventory can be viewed as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/55580aa8-7647-4709-9438-928a18fb8586.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing network credentials on AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order for AWX to start to interact with our infrastructure and run the required
    playbook, we need to define the correct network credentials to log in to our network
    infrastructure. In this recipe, we outline how to create the required network
    credentials in order for AWX to log in to network devices and start executing
    playbooks on our managed network inventory. We will also outline how we can use
    RBAC within AWX to make it easy to share this sensitive data between different
    teams within the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWX must be installed and reachable, and the User accounts must be deployed,
    as outlined in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the CREDENTIALS tab in the left navigation bar, create the login credentials
    required to access the network devices. We will use the Machine credential type
    since we will access the devices using new connection modules such as `network_cli`,
    `NETCONF`, or `httpapi`. Specify the username and password used to log in to the
    devices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/37df1d65-58fe-4285-af23-db07ecce9236.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Update the permissions for the credentials that we have created so that the
    `Network_Design` team is the credential Administrator and the `Network_Operation`
    team has read-only access. Here is how the permissions on the credential are applied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/eff00385-dd66-4465-be79-c862c34c12f9.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we created the network credentials needed to access our network
    devices, and we specified the username and password required to log in to the
    devices on the AWX GUI interface. When we entered the password on the AWX interface,
    it was encrypted and then stored on the PostgreSQL database in an encrypted format
    that we can't view in plaintext. This provides extra security in terms of password
    handling within the AWX framework and also provides a simple procedure to share
    and utilize sensitive information within the organization, so the `Admin` or authorized
    user can create and edit the credential and can grant user permissions on those
    credentials to the required users/teams. These users only use the credentials
    but they don't have any admin rights to view or change them. This greatly simplifies
    password management when compared with using Ansible and `ansible-vault`.
  prefs: []
  type: TYPE_NORMAL
- en: AWX provides different credential types to access different resources such as
    physical infrastructure, cloud providers, and **version control systems** (**VCS**).
    In our case, we use the Machine credential type, since we are connecting to our
    network infrastructure using SSH with a username and password.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding AWX credentials, please check the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating projects on AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to create projects on AWX. A project in
    AWX is an object that represents an Ansible playbook (or playbooks), with all
    the related files and folders required for this playbook to execute.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWX must be installed and reachable, and the User accounts must be deployed,
    as outlined in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new directory, `awx_sample_project`, to hold all the files and folders
    for our AWX project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `group_vars/all.yml` playbook with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `group_vars/iosxr.yml` playbook with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `group_vars/junos.yml` playbook with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `pb_deploy_interfaces.yml` playbook with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `pb_validate_interfaces.yml` playbook with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Our new folder will have the following directory structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'On your GitHub account, create a new public repository named `awx_sample_project`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/613e55c0-8212-42e8-85f6-f1f5e8c7a1ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside our `awx_sample_repo` project folder, initialize a Git repository and
    link it to the GitHub repository that we created in the previous step, as shown
    in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'On the AWX interface, create a new project based on Git, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4bde454c-0624-40b4-bc68-60341b722383.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main goals of AWX is to simplify how to collaborate with Ansible
    playbooks, as well as to simplify how to run and execute Ansible playbooks. In
    order to achieve these goals, the best and most common approach to work with Ansible
    playbooks within AWX is using AWX projects stored and tracked in Git version control.
    This approach allows us to separate code development for our Ansible playbooks
    (which is stored and versioned using Git) and playbook execution (which will be
    handled by AWX).
  prefs: []
  type: TYPE_NORMAL
- en: We follow the same logic for developing a project with Ansible by creating a
    folder to hold all our folders and files that are part of our project. This includes
    `group_vars` and `host_vars` folders to specify our variables, and we also define
    the different playbooks needed for our project. We keep all these files and folders
    in a Git repository and host them on a Git VCS such as GitHub or GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: In order for AWX to start using the playbooks that we have developed, we create
    a new project within AWX and we choose for it to be based on Git, and we provide
    the URL for the Git repository that houses this project. We also supply any additional
    information needed, such as which branch to use; and if this is a private Git
    repository, we supply the credentials needed to access it.
  prefs: []
  type: TYPE_NORMAL
- en: Once we complete this step, the AWX interface will fetch all the content for
    this Git repository and download it to this location—by default, `/var/lib/awx/projects`.
    At this stage, we have all the content for this repository locally stored on the
    AWX node, to start running our playbooks against our network nodes.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding AWX projects, please check the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/projects.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/projects.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating templates on AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to combine inventories, credentials, and
    projects in order to create templates in AWX. Templates in AWX allow us to create
    a standard running environment for our Ansible playbooks, which can be executed
    by different users according to their roles.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AWX interface must be installed and credentials, inventories, and projects
    must be created, as outlined in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new template in AWX called `provision_interfaces`, and assign to it
    the inventory and credentials that we created. We will use the `awx_sample_project`
    directory, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/04de2911-a8a0-4736-848b-edd21c7bbae8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We update the permissions for this template so that the `Network_Design` team
    is `ADMIN` and `Network_Operation` team has the EXECUTE role, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/86656c8b-4dd9-45cf-85ea-6f99146c7ebb.png)'
  prefs: []
  type: TYPE_IMG
- en: Use the same procedures again to create a template called `interface_validation`,
    using the `pb_validate_interfaces.yml` playbook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we outlined how we combine all the different parts that we have
    previously configured in order to execute our playbooks on AWX. AWX uses templates
    in order to create this standard execution environment, which we can use in order
    to run our Ansible playbooks from AWX.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created the template with a given name, and we specified the different parameters
    in order to create this environment to execute our playbook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We provided the inventory against which we want to execute our playbooks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We provided all the required credentials that we need in order to execute our
    playbooks (this can be one or multiple credentials).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We provided the project from which we will choose the playbook to run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We selected the playbook from this project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are other optional parameters that we can specify in our templates, such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to run this playbook or use check mode when we execute this playbook.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether we want to provide a limit on our inventory in order to target a subset
    of it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any Ansible tags we want to specify.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we can tailor the permissions for this template for all the users within
    the organization, and, in our case, we provide the ADMIN role for the `Network_Design`
    team and the EXECUTE role for the `Network_Operation` team. In this case, the
    `Network_Operation` team can execute this playbook, while the `Network_Design`
    team has the ability to edit and change the different parameters for this template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we save this template, we can launch a job from it and monitor its result
    from the JOBS tab on the left side in the navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1caac378-4354-4374-a436-2d5ad9ebb140.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also see the details for this playbook run as we do normally in Ansible
    by clicking on the respective job, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6d950ec9-fb9b-4809-a71d-84b5148b66f5.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding AWX templates and the different options available
    to customize the templates, please check the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/job_templates.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/job_templates.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating workflow templates on AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to create more complex templates on AWX
    using workflow templates, in order to run multiple playbooks to achieve a common
    goal. This is an advanced feature, whereby we combine multiple templates in AWX
    to achieve the task.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWX templates are configured as outlined in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the TEMPLATES tab, create a NEW WORKFLOW JOB TEMPLATE, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4cc869f1-c341-4833-a7cb-e4136f65bbe4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the WORKFLOW VISUALIZER, create the workflow outlined in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/73816efc-48d0-48b7-acc5-4f4c93442dfa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Assign the correct permission on the workflow template, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/76052748-b254-4820-9ed4-e24cfc2ff6a2.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If our automation task requires multiple playbooks to run in order to achieve
    our target, we can use the workflow template feature in AWX to orchestrate between
    multiple templates in order to achieve this goal. The templates can be combined
    together based on different criteria regarding the success and failure of the
    tasks contained in the workflow template.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we use the workflow template in order to provision the interface
    on the IOS-XR nodes; then, we validate that all the configuration is applied correctly
    and that the current network state is as we desire. We combine the `provision_interface`
    template and the `validate_interfaces` template in order to achieve this. We start
    by provisioning the interface, and, on the success of this task, we run the validation
    playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check the status of the combined workflow in the JOBS tab, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/005e44a3-51ca-4592-8ca1-089c81f41ee0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Further, we can go into the details of this workflow by clicking on the workflow
    name in the JOBS tab and viewing the details of each task in this workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ab3b3514-27a8-43cd-9e39-1d313ab6c313.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding AWX workflow templates, please check the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running automation tasks using the AWX API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to initiate jobs on AWX, using the AWX API.
    One of the main features in AWX is that it provides a powerful API in order to
    interact with the AWX system, to query all the objects within AWX, and to execute
    automation tasks from the AWX framework, such as templates and workflow templates.
    We can also use the API to list all the users/teams, and all the different resources
    available and configured on the AWX interface.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AWX interface must be installed and reachable, and the templates and workflow
    templates must be configured as outlined in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In order to execute the command to interact with the AWX API, we will use the
    `curl` command to initiate HTTP requests to the AWX endpoint. This requires cURL
    to be installed on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by exploring the AWX API by listing all the resources available through
    this API, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Collect all the job templates configured on the AWX interface with the following
    REST API call, and get the ID for each job template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Launch a job template configured on the AWX interface with the following REST
    API call. In this example, we are launching `job_Templates` with ID = `7`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the status of the job launched from the preceding API call with the following
    call. `ID=35` is retrieved from the previous API call for launching the job template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Collect all workflow templates configured on the AWX interface with the following
    API call, and record the ID for each one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Launch the workflow job template using the ID retrieved from the previous API
    call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWX provides a simple and powerful REST API to retrieve and inspect all the
    objects and components of the AWX system. Using this API, we can interact with
    the AWX interface to launch automation tasks, as well as to retrieve the status
    of execution of these tasks. In this recipe, we outlined how we can interact with
    the AWX API using the cURL command-line tool; how we can use other tools such
    as Postman to interact with the API; and also, how we could use any programming
    language, such as Python or Go, to build more sophisticated scripts and applications,
    in order to consume the AWX API. In all our examples, we are using the `jq` Linux
    utility in order to output the JSON data returned from each API call in a nice
    format.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by exploring all the endpoints published through the AWX API by inspecting
    this `http://<AWX Node IP>/api/v2/` **Uniform Resource Identifier** (**URI**),
    which returns all the endpoints available through this API. The following is a
    snippet of this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We then list all the job templates configured on the AWX interface by hitting
    the corresponding API endpoint. This API call is using the `GET` method, and it
    must be authenticated; that is why we use the `--user` option to pass in the username
    and password for the user. The following snippet outlines some of the returned
    values from this call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This API call returns a list of all the job templates configured on the AWX
    interface; however, the most important item we care about is the `id` field for
    each job template. This is a unique primary key for each job template within the
    AWX database that identifies each job template; using this `id` field, we can
    start to interact with each job template, and in the examples outlined in this
    receipe, we launch a job template by using a `POST` request to this specific job
    template.
  prefs: []
  type: TYPE_NORMAL
- en: Once we launch the job template, this triggers a job on the AWX node, and we
    get the corresponding job ID as a result of the `POST` request that we have triggered.
    Using this job ID, we can check the status of the job that was executed by using
    a `GET` request to the Jobs API endpoints and supplying the corresponding job
    ID. We use a similar approach to launch workflow templates, only using a different
    URI endpoint for the workflows.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to list and launch a specific job template or a workflow template,
    we can use the name of the template in the API call instead of using the `id`
    field. For example, the API call to launch the `provision_interfaces` job template
    in our sample is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The same process can be followed to invoke a workflow template, using its name
    as the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding the AWX API, please check the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible-tower/latest/html/towerapi/index.html](https://docs.ansible.com/ansible-tower/latest/html/towerapi/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
