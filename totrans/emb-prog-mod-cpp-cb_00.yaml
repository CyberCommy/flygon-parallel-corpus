- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a long time, development for embedded systems required either plain C or
    assembly language. There was a host of good reasons for this. The hardware did
    not have enough resources to run applications written in higher-level programming
    languages, such as C++, Java, or Python, but more importantly, there was no real
    need to write software in these languages. Limited hardware resources put a limit
    on software complexity, the functionality of embedded applications remained relatively
    simple, and the capabilities of C were sufficient to implement it.
  prefs: []
  type: TYPE_NORMAL
- en: As a result of the progress in hardware development, more and more embedded
    systems nowadays are powered by inexpensive yet powerful System-on-Chip capable
    of running a general-purpose multitasking operating system such as Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Growing hardware capabilities demand more complex software, and more and more
    often C++ becomes the language of choice for new embedded systems. With its *you
    don't pay for what you don't use* approach it allows developers to create applications
    that use computational and memory resources, like applications written in C, but
    gives developers many more tools for dealing with complexity and safer resource
    management, such as object-oriented programming and the RAII idiom.
  prefs: []
  type: TYPE_NORMAL
- en: Seasoned embedded developers with substantial experience in C often tend to
    write code in C++ in a similar, habitual way, considering this language just as
    an object-oriented extension of C, a *C with classes*. Modern C++, however, has
    its own best practices and concepts that, properly used, help developers avoid
    common pitfalls and allow them to do a lot in a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: On the other side, developers with C++ experience entering the world of embedded
    systems should be aware of the requirements, limitations, and capabilities of
    specific hardware platforms and application domains and design their C++ code
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this book is to bridge this gap and demonstrate how features and
    best practices of modern C++ can be applied in the context of embedded systems.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for developers and electronic hardware, software, and system-on-chip
    engineers who want to build effective embedded programs in C++.
  prefs: []
  type: TYPE_NORMAL
- en: The world of embedded systems is vast. This book tries to cover one type of
    them, the SoCs running Linux OS, such as Raspberry Pi or BeagleBoard, briefly
    touching low-level microcontrollers such as Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: Familiarity with C++ is expected, but no deep knowledge of C++ or experience
    with embedded systems is required.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](eacca2ec-75e8-4184-81b2-3213c779e9e0.xhtml), *Fundamentals of Embedded
    Systems*, defines what embedded systems are, how they are different from other
    systems, why specific programming techniques are needed, and why C++ is good and
    in many cases the best choice for embedded development. It outlines the constraints
    and challenges that embedded developers encounter in their everyday work: limited
    system resources and CPU performance, dealing with hardware errors, and remote
    debugging.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](899e14bb-12be-4df1-a42b-60a316ea0af6.xhtml), *Setting Up the Environment*,
    explains the differences in a development environment for embedded systems compared
    to web or desktop application development and goes through concepts of the build
    and target system, cross-compilation and cross-toolkits, the serial console, and
    the remote shell. It provides practical steps for setting up virtualized build
    and target hosts for the most common desktop configurations running Windows, macOS,
    or Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](b89bff48-21be-4288-af10-de42f182d426.xhtml), *Working with Different
    Architectures*, explains how to take into account important differences in CPU
    architectures and memory configuration of target systems in your C++ code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](d3e4d157-4084-476e-9e1c-b3cb12d15812.xhtml), *Handling Interrupts*,
    covers the low-level concepts of interrupts and interrupt service routines. In
    modern OSes, even developers or device drivers have to use a higher-level API
    provided by the OS. That is why we explore the interrupt techniques using the
    8051 microcontroller.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](345afa8f-ca7a-48f8-a941-1f34c08e4844.xhtml), *Debugging, Logging,
    and Profiling*, covers debugging techniques specific to Linux-based embedded systems,
    such as running gdb directly on the target board, setting up gdbserver for remote
    debugging, and the importance of logging for debugging and failure root cause
    analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ce2d6580-cf8f-42ca-bd14-de8d3265d07e.xhtml), *Memory Management*,
    provides several recipes and best practices of memory allocation that will be
    helpful for developers of embedded systems. We discuss why dynamic memory allocation
    is avoided in embedded applications and what alternatives can be considered for
    fast, deterministic memory allocation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](538bf0bb-989a-4893-994c-5d419b2f521d.xhtml), *Multithreading and
    Synchronization*, explains how to use the functions and classes provided by the
    standard library of C++ to implement efficient multithreading applications that
    can utilize all the power of the modern multicore CPUs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](24063f32-0b00-46d8-a65d-12e09b599ade.xhtml), *Communication and
    Serialization*, covers the concepts, challenges, and best practices for inter-process
    and inter-system communications, such as sockets, pipes, shared memory, and memory-efficient
    serialization using the FlatBuffers library. Decoupling applications into independent
    components that talk to each other using well-defined asynchronous protocols is
    a de facto standard way of scaling a software system while keeping it fast and
    fault-tolerant.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](33d9aa5d-7aca-43d9-a29e-f6d3c3171c93.xhtml), *Peripherals*, explains
    how to work with various peripheral devices in C++ programs. Though most device
    communication APIs do not depend on a particular programming language, we will
    learn how to use the power of C++ to write wrappers that are convenient for developers
    and help prevent common resource leaking errors.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](5782e916-a6ba-4f5c-8da4-0005b3eb923a.xhtml), *Reducing Power Consumption*,
    explores the best practices for writing energy-efficient applications and utilizing
    the power management functions of the OS. It provides several practical recipes
    for Linux-based embedded systems, but the same concepts can be expanded to any
    OS and any platform.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](78be8bb8-ddec-4412-9d1e-a5ae2ffec6b7.xhtml), *Time Points and
    Intervals*, covers various topics related to time manipulations, from measuring
    intervals to adding delays. We will learn about the API provided by the standard
    C++ Chrono library and how it can be used efficiently to build portable embedded
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](aa993b96-eef5-4902-87b3-3100133c3358.xhtml), *Error Handling and
    Fault Tolerance*, explores possible implementations and best practices of error
    handling for embedded applications written in C++. It explains how to use C++
    exceptions efficiently and compares it to alternatives such as traditional error
    codes and complex return types. It touches on basic fault-tolerance mechanisms
    such as watchdog timers and heartbeats.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](a99eb40d-1adb-4b4e-b3b1-2f5032c1c2fd.xhtml), *Guidelines for Real-Time
    Systems*, covers the specifics of real-time systems. It briefly describes how
    real-time systems are defined and what kinds of real-time systems exist. It contains
    practical recipes on how to make the behavior of applications more deterministic,
    a crucial requirement for real-time systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](1326ae6c-d8c8-40fa-9ce6-5c4bc29cc1ce.xhtml), *Guidelines for Safety-Critical
    Systems*, explains what safety-critical systems are and how they are different
    from other embedded systems. It covers development methodologies and tools that
    are required when working on safety-critical systems, from following formalized
    coding guidelines such as MISRA, AUTOSAR, or JSF to using static code analysis
    or formal software validation tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](981d554b-6559-4b6d-9353-350205a22782.xhtml), *Microcontroller
    Programming*, outlines basic concepts of writing, compiling, and debugging C++
    code for microcontrollers. We will learn how to set up the development environment
    using the widely used Arduino board as an example.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Development for embedded systems implies that your applications will interact
    with some sort of specialized hardware—a specific SoC platform, a specific microcontroller,
    or a specific peripheral device. There is a huge variety of possible hardware
    configurations, along with specialized OSes or IDEs that are needed to work with
    those hardware setups.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this book is to let everyone start learning about programming for
    embedded systems without investing too much in hardware. That is why most of the
    recipes are aimed at working in a virtualized Linux environment or an emulator.
    Some of the recipes, however, may require physical hardware. These recipes were
    designed to be run on either a Raspberry Pi or an Arduino, the two most widely
    used and inexpensive platforms that can be obtained relatively easily.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/Hardware covered in the book** | **OS requirements** |'
  prefs: []
  type: TYPE_TB
- en: '| Docker ([https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop))
    |'
  prefs: []
  type: TYPE_TB
- en: Microsoft Windows 10 Professional or Enterprise 64-bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS 10.13 or newer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu Linux 16.04 or newer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debian Linux Stretch (9) or Buster (10)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fedora Linux 30 or newer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| QEMU ([https://www.qemu.org/download/](https://www.qemu.org/download/)) |'
  prefs: []
  type: TYPE_TB
- en: Windows 8 or newer (32-bit or 64-bit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS 10.7 or newer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux (various distributions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Raspberry Pi 3 Model B+ |  |'
  prefs: []
  type: TYPE_TB
- en: '| Arduino UNO R3 or ELEGOO UNO R3 |  |'
  prefs: []
  type: TYPE_TB
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com/).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](https://www.packtpub.com/support) and
    register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Support tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Embedded-Programming-with-Modern-CPP-Cookbook](https://github.com/PacktPublishing/Embedded-Programming-with-Modern-CPP-Cookbook). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781838821043_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781838821043_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles. Here
    is an example: "Run the `hello` application under `gdbserver`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "The best way to configure cross-compilation for CMake is by using
    the so-called **toolchain** files"'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find several headings that appear frequently (*Getting
    ready*, *How to do it...*, *How it works...*, *There's more...*, and *See also*).
  prefs: []
  type: TYPE_NORMAL
- en: 'To give clear instructions on how to complete a recipe, use these sections
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section tells you what to expect in the recipe and describes how to set
    up any software or any preliminary settings required for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains the steps required to follow the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section usually consists of a detailed explanation of what happened in
    the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section consists of additional information about the recipe in order to
    make you more knowledgeable about the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section provides helpful links to other useful information for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book, mention
    the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](https://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  prefs: []
  type: TYPE_NORMAL
