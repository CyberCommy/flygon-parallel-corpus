- en: Chapter 8. Busting Spam with SpamAssassin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spam, or unsolicited commercial e-mail (UCE) as it is sometimes called, is the
    scourge of the Internet. Spam has increased relentlessly over the last ten years
    and now accounts for over half of all Internet bandwidth. One in six consumers
    have acted on spam e-mails, so there is a strong business case for keeping spam
    out of your users' inboxes. There are a variety of different spam solutions, ranging
    from outsourcing your spam entirely to no action at all. However, if you have
    your own e-mail server, you can add spam filtering very easily.
  prefs: []
  type: TYPE_NORMAL
- en: SpamAssassin is a very popular open source anti-spam tool. It won a Linux New
    Media Award-2006 as the "Best Linux-based Anti-spam Solution", and is considered
    by many to be the best free, open source, anti-spam tool, and better than many
    commercial products. In fact, several commercial products and services are based
    on SpamAssassin or previous versions of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: Why spam is difficult to deal with and why spam filters requires regular updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to download, install, and configure SpamAssassin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to filter incoming e-mails with SpamAssassin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to configure SpamAssassin to work on per-user or per-server basis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to configure popular e-mail clients to recognize the tags that SpamAssassin
    places in e-mails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to customize SpamAssassin to update new rules set automatically to keep
    your system's spam detection well tuned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to integrate spam filtering with virus recognition using amavisd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why filter e-mail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't receive any spam, there may be no need to filter spam. However,
    once one spam message has been received, it is invariably followed by many more.
    Spammers can sometimes detect if a spam e-mail is viewed, using techniques such
    as Web bugs, which are tiny images in HTML e-mails that are fetched from web servers,
    and then know that an e-mail address is valid and vulnerable. If spam is filtered,
    the initial e-mail may never get seen, and consequently the spammer may not then
    target the e-mail address with further spam.
  prefs: []
  type: TYPE_NORMAL
- en: Despite legal efforts against spam, it is actually on the increase. In Europe
    and the US, the recent legislation against spam (Directive 2002/58/EC and bill
    number S.877 respectively) have had little effect and spam is still on the increase
    in both regions.
  prefs: []
  type: TYPE_NORMAL
- en: The main reason for this is that spam is a very good business model. It is very
    cheap to send spam, as little as one thousandth of a cent per e-mail, and it takes
    a very low hit rate before a profit is made. The spammer needs to turn just one
    spam in a hundred thousand or so into a sale to make a profit. As a result, there
    are many spammers and spam is used to promote a wide range of goods. Spamming
    costs are also negligible due to use of malware that uses innocent computers to
    send spam on their behalf.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, the costs of spam to the recipient are remarkably high. Estimates
    have varied, from 10 cents per spam received, through 1,000 dollars per employee
    per year, up to a total cost of 140 billion dollars globally in 2007 alone. This
    cost is mainly labor—distracting people from their work by clogging their inboxes
    and forcing them to deal with many extra e‑mails. Spam interferes with day-to-day
    work and can include material that is offensive to most people. Companies have
    a duty to protect their employees from such content. Spam filtering is a very
    cheap way of minimizing the costs and protecting the workforce.
  prefs: []
  type: TYPE_NORMAL
- en: Spam is a moving target
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spam isn't static. It changes on a day-to-day basis, as spammers add new methods
    to their arsenal and anti-spammers develop countermeasures. Due to this, the anti-spam
    tools that work best are those that are updated frequently. It's a similar predicament
    to antivirus software—virus definitions need to be updated regularly or new viruses
    won't be detected.
  prefs: []
  type: TYPE_NORMAL
- en: SpamAssassin is regularly updated. In addition to new releases of the software,
    there is a vigorous community creating, critiquing, and testing new anti-spam
    rules. These rules can be downloaded automatically for up-to-date protection against
    spam.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss some of the measures used by SpamAssassin to fight spam:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open relays:** These are e-mail servers that allow spammers to send e-mails
    even though they are not connected to the owner of the server in any way. To counter
    this, the anti-spam community has developed **blocklists**, also known as **blacklists**,
    which can be used by anti-spam software to detect spam. These were mentioned in
    Chapter 5 as a list that your e-mail server should not appear on, as it may limit
    legitimate e-mail traffic. Any e-mail that has passed through a server on a blocklist
    is treated more suspiciously than one that has not. SpamAssassin uses a number
    of blocklists to test e-mails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keyword filters:** These are useful tools against spam. Spammers tend to
    repeat the same words and phrases again and again. Rules to detect these phrases
    are used extensively by SpamAssassin. These make up the bulk of the tests, and
    the user community rules mentioned previously are normally of this form. They
    allow specific words, phrases, or sequences of letters, numbers, and punctuation
    to be detected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blacklists and whitelists:** These are used to list known senders of spam
    and sources of good e-mail respectively. E-mails from an address on a blacklist
    are probably spam and are treated accordingly, while e-mails from addresses on
    a whitelist will be less likely to be treated as spam. SpamAssassin allows the
    user to enter blacklists and whitelists manually, and also builds up an automatic
    whitelist and blacklist based on the e-mails that it processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Statistical filters:** These are automated systems that give the probability
    that an e-mail is spam. This filtration is based on what the filter has seen previously
    as both spam and non-spam. They generally work by finding words that are present
    in one type of e-mail but not the other, and using this knowledge to determine
    which type a new e-mail is. SpamAssassin has a statistical filter called the **Bayesian
    filter** that can be very effective in improving detection rates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content databases:** These are mass e-mail detection systems. A lot of e-mail
    servers receive and submit e-mails to central servers. If the same e-mail is sent
    to thousands of recipients, it is probably a spam. The content databases prevent
    confidential e-mails from being sent to the server, by using a technique called
    **hashing** that also lowers the amount of data sent to the server. SpamAssassin
    can integrate with several content databases, notably Vipul''s Razor ([http://razor.sourceforge.net/](http://razor.sourceforge.net/)),
    Pyzor ([http://sourceforge.net/apps/trac/pyzor/](http://sourceforge.net/apps/trac/pyzor/)),
    and the **Distributed Checksum Clearinghouse**, that is, **DCC** ([http://www.rhyolite.com/dcc/](http://www.rhyolite.com/dcc/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL blocklists:** These are similar to open relay blocklists, but list the
    websites used by spammers. In nearly all spams, a web address is given. A database
    of these is built so that spam e-mails can be quickly detected. This is a very
    efficient and effective tool against spam. By default, SpamAssassin uses **Spam
    URI Realtime BlockLists** (**SURBLs**), without any further configuration required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spam filtering options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spam can be filtered on the server or the client. The two approaches are explained
    next. In the first scenario, spam is filtered on the client.
  prefs: []
  type: TYPE_NORMAL
- en: '![Spam filtering options](img/8648_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mail is processed by the MTA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The e-mail is then placed in the appropriate user's inbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The e-mail client reads all new e-mail from the inbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The e-mail client then passes the e-mail to the filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the filter returns the results, the client can display the valid e-mail
    and either discard spam or file it in a separate folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this approach, the spam filtering is always done by the client and is always
    done when new e‑mail is processed. Often when the user may be present, so he or
    she may either experience a delay before e-mail is visible or there may be a period
    where spam e-mail is present in the inbox before the client software can filter
    the spam from view. The amount of spam filtering that can be performed on the
    client may be limited. In particular, the network tests such as open relay blocklists
    or SURBLs might be too time consuming or complex to perform on the user's PC.
    As spam is a moving target, updating many client PCs can become a difficult administrative
    task.
  prefs: []
  type: TYPE_NORMAL
- en: In the second scenario, the spam filtering is performed on the e-mail server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Spam filtering options](img/8648_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Incoming e-mail is received by the MTA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is then passed on to the spam filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The results are then sent back to the MTA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on the results, the MTA places the e-mail in the appropriate user's
    inbox (**4a**), or in a separate folder for spam (**4b**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The e-mail client accesses e-mails in the user's inbox and it can also access
    the spam folder if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This approach has several advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: The spam filtering is done when the e-mail is received, which may be any time
    of the day. The user is less likely to be inconvenienced by delays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server can specialize in spam filtering. It may use external services such
    as open relay blocklists, online content databases, and SURBLs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration is centralized, which will ease setup (for example, firewalls
    may need to be configured to use online spam tests) and also maintenance (updating
    of rules or software).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the other hand, the disadvantages include:'
  prefs: []
  type: TYPE_NORMAL
- en: A single point of failure now exists. However, with care, a broken spam filtering
    service can be configured around. If the service is not available, e-mail will
    still be delivered but spam will not be filtered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All spam must be processed by one service. If this service is not scalable,
    large volumes of e-mail may affect mail delivery times, resulting in poor or intermittent
    filtering, or possibly even the loss of e-mail service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to SpamAssassin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spam filtering actually involves two phases—detecting the spam and then doing
    something with it. SpamAssassin is a spam detector and it modifies the e-mail
    it processes by putting in headers to mark whether it is spam. It is up to the
    MTA or the mail delivery agent in the e-mail system to react to the headers that
    SpamAssassin creates in an e-mail, to filter it out. However, it's possible that
    another part of the e-mail system could perform this task.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to SpamAssassin](img/8648_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The previous figure gives a schematic representation of SpamAssassin. At the
    heart of SpamAssassin is its **Rules Engine** that determines which rules are
    called. Rules trigger whether the various tests are used, including the Bayesian
    Filter, the network tests, and the auto-whitelists.
  prefs: []
  type: TYPE_NORMAL
- en: SpamAssassin uses various databases to do its work, and these are shown too.
    The rules and scores are text files. Default rules and scores are included in
    the SpamAssassin distribution and, as we will see, both system administrators
    and users can add rules or change the scores of existing rules by adding them
    to files in specific locations. The Bayesian filter (which is a major part of
    SpamAssassin, and will be covered later) uses a database of statistical data based
    on previous spam and non-spam e-mails. The **Auto-Blacklist/Whitelist** also creates
    its own database.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing SpamAssassin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SpamAssassin is slightly different from most of the software that is used in
    this book. It is written in a language called **Perl**, which has its own distribution
    method called **CPAN** (**Comprehensive Perl Archive Network)**. CPAN is a large
    website of Perl software (normally, Perl modules), and the term CPAN is also the
    name of the software used to download those modules and install them. Though SpamAssassin
    is provided as a package by many Linux distributions, we strongly recommend that
    you install it from source rather than use a package. This way, you will get the
    latest version of SpamAssassin rather than the one that was current when your
    Linux distributer created its release.
  prefs: []
  type: TYPE_NORMAL
- en: Most Perl users will build Perl modules using CPAN and experience no difficulties.
    CPAN can automatically locate and install any dependencies (other components that
    are required to make the desired component work properly). From a Perl point of
    view, using CPAN to install Perl modules is like using the `rpm` or `apt-get`
    commands in Linux. The basics are very simple and, once a system is configured,
    it generally works every time.
  prefs: []
  type: TYPE_NORMAL
- en: However, learning and configuring a new way of installing software may put off
    some people. A SpamAssassin release is distributed in source form, but administrators
    of **Red Hat Package Manager** (**RPM**) based systems can easily convert the
    latest SpamAssassin release into rpm format and then the regular `rpm` command
    can be used to install the package. The Debian repository is updated fairly quickly
    when SpamAssassin is updated and the regular `apt-get` commands can be used to
    install SpamAssassin. We strongly advise you to install via `apt-get`, CPAN, or
    using the `rpmbuild` command as described next, in preference to using an RPM
    provided by a distributor.
  prefs: []
  type: TYPE_NORMAL
- en: As SpamAssassin is a Perl Module, it appears on CPAN first. In fact, it is only
    released when it arrives at CPAN. Users of CPAN can download the latest version
    of SpamAssassin literally minutes after it has been released.
  prefs: []
  type: TYPE_NORMAL
- en: Support is also easier to obtain if SpamAssassin is built from source. Some
    distributors make unusual decisions when creating their RPM of SpamAssassin or
    may modify certain default values. These make obtaining support more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: RPMs also take time to be delivered. Distributors need time to build and test
    new versions of software before they release them, and most software packages
    are not updated as quickly as SpamAssassin. So, Linux distributions may not provide
    the latest software, and what is provided can be several versions out of date.
  prefs: []
  type: TYPE_NORMAL
- en: Using CPAN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for installing SpamAssassin 3.2.5 using CPAN are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Perl version 5.6.1 or later:** Most modern Linux distributions will include
    this as a part of the base package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Several Perl modules:** The current version of SpamAssassin needs the Digest::SHA1,
    HTML::Parser, and the Net::DNS modules. CPAN will install these if you configure
    it to follow dependencies, but there are many additional Perl modules that are
    optional and should be installed to get the best spam detection. CPAN will issue
    warnings with the module names, which will enable you to identify and install
    them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C compiler:** This may not be installed by default and may have to be added
    using the `rpm` command. The compiler used will normally be called `gcc`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet connection:** CPAN will attempt to download the modules using `HTTP`
    or `FTP`, so the network should be configured to allow this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring CPAN
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you've used CPAN before, you can skip to the next section, *Installing SpamAssassin
    Using CPAN*.
  prefs: []
  type: TYPE_NORMAL
- en: If a proxy server is required for Internet traffic, CPAN (and other Perl modules
    and scripts) will use the `http_proxy` environment variable. If the proxy requires
    a username and password, these need to be specified using environment variables.
    As CPAN is normally run as `root`, these commands should be entered as `root:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, enter this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If the output is similar to the following, the CPAN module is already installed
    and configured, and you can skip to the next section, *Installing SpamAssassin
    Using CPAN*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If the output prompts for manual configuration, as shown next, the CPAN module
    is installed but not configured.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: During configuration, the CPAN Perl module prompts for answers to around 30
    questions. For most of the questions, selecting the default value is the best
    response. This initial configuration must be completed before the CPAN Perl module
    can be used. The questions are mainly about the location of various utilities,
    and the defaults can be chosen by pressing Enter. The only question for which
    we should change the default is the one about building prerequisite modules. If
    we configure CPAN to follow dependencies, it will install the required modules
    without prompting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once CPAN is configured, exit the shell by typing `exit` and pressing *Enter*.
    We are now ready to use CPAN to install SpamAssassin.
  prefs: []
  type: TYPE_NORMAL
- en: Installing SpamAssassin using CPAN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install SpamAssassin, enter the CPAN shell by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If the CPAN module is correctly configured, the following output (or something
    similar) will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, at the `cpan` prompt, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The CPAN module will query an online database to find the latest version of
    SpamAssassin and its dependencies, and then install them. Dependencies will be
    installed before SpamAssassin. The following is the sample output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: SpamAssassin may require the user to respond to a few questions. The responses
    provided might affect the module configuration or only be part of the testing
    performed before installation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'SpamAssassin, as with many Perl modules, is very flexible. It can make use
    of features if they are available, and will work even if they are not. When using
    CPAN, you may see messages such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you install the modules mentioned, SpamAssassin will make use of them and
    this will improve e-mail filtering. You can abort the installation of SpamAssassin
    and install the modules using cpan `install Module::Name` commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you let the build process complete, it will test the capabilities of the
    C compiler, configure and build the module, create documentation, and test SpamAssassin.
    At the end of the build, the output should be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This indicates that SpamAssassin has been installed correctly. If SpamAssassin
    installation was successful, you can skip to the *Testing the Installation* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the installation failed, the output may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If the output does not end with the `/usr/bin/make install -- OK` message, an
    error has occurred. Firstly, you should examine all the output for possible warnings
    and error messages, especially for prerequisite packages. If this does not assist,
    then avenues for support are described in the section *Testing the installation*.
  prefs: []
  type: TYPE_NORMAL
- en: Using the rpmbuild utility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If a version of Linux based on the Red Hat Package Manager format is used,
    SpamAssassin can be installed using the `rpmbuild` command. Download the SpamAssassin
    source from [http://www.cpan.org/modules/01modules.index.html](http://www.cpan.org/modules/01modules.index.html)
    into a working directory, then issue the following command to build SpamAssassin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It is possible that the installation will fail due to missing dependencies.
    These are Perl modules that SpamAssassin uses, and which are installed separately.
    Error messages often hint at the name of the dependency, as in the following installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the Perl modules `Digest::SHA1, HTML::Parser`, and `Net::DNS`
    are needed. The solution is to install it using CPAN. In some cases, SpamAssassin
    may require particular versions of packages, which may require the installed versions
    to be upgraded.
  prefs: []
  type: TYPE_NORMAL
- en: When installing SpamAssassin using CPAN, all the dependencies are installed
    automatically. However, while using the `rpmbuild` command, the dependencies need
    to be installed manually. Using CPAN is generally less troublesome than `rpmbuild`.
  prefs: []
  type: TYPE_NORMAL
- en: Using pre-built RPMs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SpamAssassin is packaged with many Linux distributions, and packages of new
    releases of SpamAssassin are often made available from other sources. As mentioned
    earlier, RPMs are not the recommended method of installing SpamAssassin but are
    more reliable than building from source on unusual platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install an RPM, simply download or locate it on the distribution CD, and
    install it using the `rpm` command. The following command can be used to install
    the RPM for SpamAssassin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Graphical installers can also be used to install SpamAssassin RPMs. The RPMs
    listed on the SpamAssassin website are usually the latest version of SpamAssassin
    and are complete. If these cannot be installed, the RPM provided by the Linux
    distribution should be installed instead.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is worth performing a few tests to ensure that SpamAssassin is installed
    correctly and the environment is complete. If you want to test a particular user
    account, you should log in to that account to perform the test.
  prefs: []
  type: TYPE_NORMAL
- en: SpamAssassin includes a sample spam e-mail and a sample non-spam e-mail. It
    can be tested by processing the sample e-mails. These e-mails are in the root
    of the SpamAssassin distribution directory. If you used CPAN to install SpamAssassin
    using the `root` user, then the path to this directory may be similar to `~root/.cpan/build/Mail-SpamAssassin-3.2.5/`,
    where `3.2.5` is the version of SpamAssassin installed. If the files cannot be
    located, download the SpamAssassin source from [http://www.cpan.org/modules/01modules.index.html](http://www.cpan.org/modules/01modules.index.html)
    and unpack the source into a temporary directory. The sample e-mails are in the
    root of the unpacked source.
  prefs: []
  type: TYPE_NORMAL
- en: To test SpamAssassin, change to the directory containing `sample-spam.txt` and
    use the following commands. Example results are shown after each command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from the command using `sample-nonspam.txt` should have `X-Spam-Status:
    No`, and that using `sample-spam.txt` should have `X-Spam-Flag: YES` and `X-Spam-Status:
    Yes`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'SpamAssassin can verify its configuration files with the `--lint` flag and
    report any errors. By default, a clean installation of SpamAssassin should not
    have any errors, but once a site is customized, some rules may fail. In the following
    example, a `score` entry does not match a rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If the output includes warnings, something has gone wrong. It's worth fixing
    SpamAssassin before going on and using it. The best places to visit are the SpamAssassin
    Wiki ([http://wiki.apache.org/spamassassin/](http://wiki.apache.org/spamassassin/)),
    the archives of the SpamAssassin mailing lists ([http://wiki.apache.org/spamassassin/MailingLists](http://wiki.apache.org/spamassassin/MailingLists)),
    and your favorite search engine. As with most open source projects, the developers
    are volunteers and appreciate users who search for the solution to their problem
    before posting a plea for help, as most problems have been encountered many times
    before.
  prefs: []
  type: TYPE_NORMAL
- en: Modified e-mails
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to the e-mail headers mentioned, SpamAssassin will modify an e-mail
    if it is thought to be spam. It takes the original e-mail and converts it to an
    e-mail attachment with a simple e-mail around it. SpamAssassin always wraps an
    e-mail if it detects a potential virus or other dangerous content. In its default
    configuration, it will add an envelope e-mail around the spam, but this can be
    turned off if desired. Consult the SpamAssassin documentation regarding the `report_safe`
    directive. The envelope e‑mail looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modified e-mails](img/8648_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using SpamAssassin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that SpamAssassin is installed, we need to configure the system to use it.
    SpamAssassin can be used in many ways. It can be integrated into the MTA for maximum
    performance; it can run as a daemon or a simple script to avoid complexity; it
    can use separate settings for each user or use a single set of settings for all
    users; and it can be used for all accounts or just for the chosen ones. In this
    book, we will discuss using SpamAssassin in three ways.
  prefs: []
  type: TYPE_NORMAL
- en: The first method is with Procmail. This is the simplest method to configure
    and is suitable for low-volume sites, for example, less than 10,000 e-mails a
    day.
  prefs: []
  type: TYPE_NORMAL
- en: The second method is to use SpamAssassin as a daemon. This is more efficient,
    and can still be used with Procmail, if desired.
  prefs: []
  type: TYPE_NORMAL
- en: The third method is to integrate SpamAssassin with a content filter such as
    amavisd. This offers performance advantages, but occasionally the content filter
    does not work with the latest release of SpamAssassin. Problems, if any, are usually
    resolved quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To help you get the most out of SpamAssassin, Packt Publishing has published
    *SpamAssassin: A practical guide to integration and configuration*, (ISBN 1-904811-12-4)
    by Alistair McDonald.'
  prefs: []
  type: TYPE_NORMAL
- en: Using SpamAssassin with Procmail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Procmail was covered in Chapters 6 and 7\. If you have at least a basic understanding
    of Procmail, then what follows here should be easy to understand. If you jumped
    to this chapter and you don't know about Procmail, then it would probably be worthwhile
    reading Chapter 6, which discusses the basics of Procmail before continuing here.
  prefs: []
  type: TYPE_NORMAL
- en: Before we configure the system to use SpamAssassin, let's consider what SpamAssassin
    does. SpamAssassin is *not* an e-mail filter. A filter is something that changes
    the destination of an e-mail. SpamAssassin adds e-mail headers to an e-mail message
    to indicate if it is spam or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider an e-mail with headers like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: SpamAssassin will add header lines.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: SpamAssassin doesn't change the destination of the e-mail, all it does is add
    headers that enable something else to change the destination of the e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: The best indication that an e-mail is spam is the `X-Spam-Flag`. If this is
    `YES`, SpamAssassin considers the mail to be spam and it can be filtered by Procmail.
  prefs: []
  type: TYPE_NORMAL
- en: SpamAssassin also assigns a score to each e-mail the higher the score, the more
    likely that the e-mail is spam. The threshold that determines if an e-mail is
    spam can be configured on a system-wide or per-user basis. The default of `5.0`
    is a sensible default if you are using an unmodified installation of SpamAssassin
    without any custom rulesets.
  prefs: []
  type: TYPE_NORMAL
- en: Global procmailrc file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's suppose that we want to check all incoming e-mail for spam using SpamAssassin.
    Commands in the `/etc/procmailrc` file are run for all users, so executing SpamAssassin
    here is ideal.
  prefs: []
  type: TYPE_NORMAL
- en: The following simple recipe will run SpamAssassin for all users when placed
    in `/etc/procmailrc:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To place all spam in an individual spam folder, ensure that the `global/etc/procmailrc`
    file has a line specifying a default destination. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If not, then add a line specifying `DEFAULT`. To filter spam into a folder,
    add a recipe similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This assumes that each user has a folder called `SPAM` already configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'To place all the spam in a single, central folder, use an absolute path to
    the destination in the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This will place all spam in a single folder, which can be reviewed by the system
    administrator. As regular e-mail may occasionally be wrongly detected as spam,
    the folder should not be world-readable, which leads to a more generalized statement.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SpamAssassin will be run under the system account used by Postfix. This means
    that the Bayesian database and the auto-whitelists and blacklists will be shared
    by all users. From a security point of view, it's important that the various databases
    that SpamAssassin creates are not world-writable.
  prefs: []
  type: TYPE_NORMAL
- en: 'SpamAssassin stores user-specific files in the `~/.spamassassin/` directory.
    Here is a list of files that *may* be present for a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Files | Contents |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `auto-whitelist``aauto-whitelist.db``aauto-whitelist.dir``aauto-whitelist.pag`
    | SpamAssassin creates a database of users who send ham (non-spam messages) and
    uses it to predict whether an e-mail from a particular sender is spam or ham.
    These files are used to track users. |'
  prefs: []
  type: TYPE_TB
- en: '| `bayes_journal``bayes_seen``bayes_toks` | SpamAssassin uses a statistical
    technique called Bayesian analysis. These files are used for this feature. |'
  prefs: []
  type: TYPE_TB
- en: '| `user_prefs` | This file allows global settings to be overridden for a particular
    user. This file can contain configuration settings, rules, and scores. |'
  prefs: []
  type: TYPE_TB
- en: Some of them may contain confidential data for example, regular contacts will
    appear in the auto-whitelist files. Careful use of permissions will ensure that
    the files are not readable by regular user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Using SpamAssassin on a per-user basis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Perhaps some users don't receive spam, or there may be issues with users sharing
    whitelists and Bayesian databases. SpamAssassin can be run on an individual basis
    by moving the recipes to the `~/.procmailrc` of specific users. This should increase
    the filtering performance for each user, but increases disk space usage for each
    user and requires setting up each individual user account by modifying its `~/.procmailrc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical user''s `.procmailrc` might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As suggested, e-mail may sometimes be wrongly detected as spam. It's worthwhile
    reviewing spam to ensure that legitimate e-mails have not been wrongly classified.
    If the user receives a lot of spam, then wading through it all is time consuming,
    tedious, and error prone. Procmail can filter spam by checking the spam score
    written in the e-mail headers by SpamAssassin.
  prefs: []
  type: TYPE_NORMAL
- en: The low-scoring spam (for example, scoring up to 9) can be placed in one folder
    called `Probable_Spam`, while higher scoring e-mails (which are more likely to
    be spam) can be placed a folder called `Certain_Spam`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we use the `X-Spam-Level` header, which SpamAssassin creates. This
    is simply the number of asterisks, related to the `X-Spam-Level` value. By moving
    e-mail with more than a certain number of asterisks to the `Certain_Spam` folder,
    the remaining spam is "Probable Spam". E-mail that is marked with `X-Spam-Flag:
    NO`, is obviously not spam.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `.procmailrc` file will filter high scoring spam separately from
    low scoring spam and non spam:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Using SpamAssassin as a daemon with Postfix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A daemon is a background process; one that waits for work, processes it, and
    then waits for more work. Using this approach actually improves performance (as
    long as there is sufficient memory) because responsiveness is improved—the program
    is always ready and waiting and does not have to be loaded each time spam tagging
    is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use SpamAssassin as a daemon, a user account should be added—it''s dangerous
    to run any service as `root`. As `root`, enter the following commands to make
    a user and a group called spam:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: To configure Postfix to run SpamAssassin, use SpamAssassin as a daemon. The
    Postfix `master.cf` file must be changed. Edit the file and locate the line that
    begins with`'smtp inet'`. Amend the line to add `-o content_filter=spamd` to the
    end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines to the end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: If the text is spread across several lines, any continuing line must begin with
    spaces as shown. The changes to the file define a filter called `spamd` that runs
    the `spamc` client for each message and also specifies that the filter should
    be run whenever an e-mail is received via SMTP.
  prefs: []
  type: TYPE_NORMAL
- en: On this line, `spamd` is the name of the filter and matches the name used in
    the `content_filter` line. The `user=` portion specifies the user context that
    should be used to run the command. The `argv=` portion describes the program that
    should be run. The other flags are used by Procmail and their presence is important.
  prefs: []
  type: TYPE_NORMAL
- en: Using SpamAssassin with amavisd-new
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**amavisd-new** is an interface between MTAs and content checkers. Despite
    its name, amavisd-new is a well-established open source package that is well maintained.
    Content checkers scan e-mail for viruses and/or spam. amavisd-new is slightly
    different. Just like like `spamd`, it is written in Perl and runs as a daemon,
    but instead of accessing SpamAssassin via the `spamc` or `spamassassin` clients,
    it loads SpamAssassin into memory and accesses the SpamAssassin functions directly.
    It is therefore closely coupled to SpamAssassin and may need to be upgraded at
    the same time as SpamAssassin.'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike other Perl-based applications and utilities, amavisd-new is not available
    from CPAN. However, it is available in source form and RPM form for many distributions
    of Linux, and is also available for debian-based repositories. Details of versions
    available are listed on [http://www.ijs.si/software/amavisd/#download](http://www.ijs.si/software/amavisd/#download).
    We recommend that if the version of SpamAssassin that your distributor offers
    is up-to-date, then you should use their package of both SpamAssassin and amavisd.
  prefs: []
  type: TYPE_NORMAL
- en: Installing amavisd-new from package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install amavisd-new from package, use the `rpm` command for RPM-based distributions.
    amavisd-new has many dependencies, all of which are Perl modules. Each version
    may have different dependencies, which are listed in the install file that is
    a part of the package. The Perl prerequisites for version 2.6.2 are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: To view the prerequisites for a particular version of amavisd-new, download
    the source and unpack it as shown here, and read the install file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Several of the dependencies may be installed already, as they are also used
    by SpamAssassin.
  prefs: []
  type: TYPE_NORMAL
- en: Installation prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some RPM-based Linux distributions may automatically install the prerequisites
    as dependencies. For other distributions, all the prerequisites must be downloaded
    from CPAN and installed. This is easiest to accomplish with the `cpan` command.
    An alternative method is to download the source code for each prerequisite individually
    and install it with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Installing from source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'amavisd-new has no makefile, configuration script, or installation routine.
    To install it, the sole executable script is copied to `/usr/local/bin`, and its
    attributes modified to ensure it cannot be modified by non-root users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The sample `amavisd.conf` file should be copied to `/etc` and its attributes
    should also be modified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: amavisd-new must be configured to run as a daemon, and so the sample `init`
    script should be copied to the appropriate directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `init` script should also be added to the system startup. Most Linux distributions
    use the `chkconfig` command to do this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Creating a user account for amavisd-new
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create a user account, first create a dedicated group using the `groupadd`
    command and then use the `useradd` command to add the user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Configuring amavisd-new
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Several changes need to be made to the `/etc/amavisd.conf` file. This file
    will be parsed as Perl source, and syntax is important. Each line should end in
    a semicolon, and the casing is important. The following variable declaration lines
    should be changed to contain the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that the correct domain is specified for `$mydomain`. The number `5`
    specified for `$max_servers` is the number of daemons that will be run concurrently.
    If you have a modest amount of e-mail, for example less than ten messages a second,
    the default will be sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within `/etc/amavisd.conf`, there is a section on SpamAssassin-related configuration
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: These three settings are used with the SpamAssassin score level associated with
    the e-mail being processed. The `$sa_tag_level_deflt` setting is the threshold
    at which ham is separated from spam and the `X-Spam-Status` and `X-Spam-Level`
    headers are added to an e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: E-mails that score below this threshold do not have headers added, while e-mails
    above the threshold will have headers added. The `$sa_kill_level_deflt` setting
    is the threshold at which spam e-mail is rejected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default configuration is to reject spam. To forward spam to another e-mail
    address, locate the line specifying `$final_spam_destiny` or add one if it is
    not present, and make it read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The recipient of the spam has to be defined. Locate the line that specifies
    `$spam_quarantine_to`, and alter it or add one to contain an e-mail address. The
    `$mydomain` variable, which was configured earlier in this step, can be used to
    refer to the domain—remember to prefix the `@` symbol with a backslash.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, amavisd-new should be started. Most Linux distributions use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Postfix to run amavisd-new
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Edit `/etc/postfix/master.cf` and locate this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Add these lines after it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In the `smtp-amavis` line, the number `5` specifies the number of instances
    that can be used at once. This should correspond to the `$max_servers` entry specified
    in the `amavisd.conf` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `/etc/postfix/main.cf` and add the following line near the end of the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart Postfix with the `postfix reload` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Configuring e-mail clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of placing spam in a separate folder by using Procmail, this can be
    performed by the e-mail client. Most e-mail clients allow rules or filters to
    be created. These typically come into action when new e-mail is read or a folder
    is opened.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules in an e-mail client run on the value of an e-mail header. It is best
    to use the `X‑Spam-Flag` and search for the value `YES`. The procedure to move
    tagged messages to a separate folder is outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder or mailbox for holding spam e-mail. The folder name should be
    intuitive, for example `Spam`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a rule to be run when e-mails arrive. The rule should look for the text
    `X‑Spam-Flag` in the message headers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The action on the rule should be to move the e-mail to the `Spam` folder created
    in the first step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the filter is created, send test messages, both spam and non-spam, to check
    that the filter works properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microsoft Outlook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft Outlook is popular in large organizations. It integrates well with
    IMAP servers. Follow the next steps to configure Outlook to filter spam, based
    on the `X‑Spam‑Flag` in e-mail headers:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These instructions are based on Outlook as shipped with Microsoft Office XP;
    other versions have similar configuration details.
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder to store the spam. Click on the **Inbox** in the folder list
    to select it, right-click and select **New Folder** from the menu. Choose Spam,
    or another meaningful name and then click **OK**.![Microsoft Outlook](img/8648_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Tools** menu and select **Rules and Alerts**. Click on **New
    Rule** to create a new rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Microsoft Outlook](img/8648_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Select **Check messages when they arrive** from under **Start from a blank rule**.
    Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check with specific words in the message header. This will allow Outlook to
    check the X-Spam-Flag e-mail header. Click on specific words to select the correct
    phrase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Microsoft Outlook](img/8648_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next dialog, carefully enter **X-Spam-Flag: YES** and click **Add**.
    Then press **OK**, and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Microsoft Outlook](img/8648_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next window offers a choice of actions. Choose **move it to the specified
    folder** and click on **specified**, which will display a list of folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Microsoft Outlook](img/8648_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Choose the folder created earlier and press **OK**. Click **Finish**. There
    are no exceptions, so click **Next** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Rules Wizard allows the rule to be run immediately on any existing messages
    in the Inbox. To do this, make sure that the checkbox next to **Turn on this rule
    is checked**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click **Finish** and the rule is created and run on all messages in
    the Inbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microsoft Outlook Express
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Outlook Express is shipped with most versions of Windows up to and including
    Windows XP. It provides POP3 connectivity and many features such as HTML e-mail.
    Some e-mail clients, including Outlook Express, do not allow filtering on every
    e-mail header, but only on certain specific headers such as the `From:` and `Subject:`
    headers. By default, SpamAssassin writes only additional headers, but it can be
    configured to alter the `Subject, From`, or `To` headers of an e-mail. To do this,
    the `/etc/spamassassin/local.cf` file should be altered. This change can also
    be made on a per-user basis by editing `~user/.spamassassin/user_prefs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: This will change the header of the e-mail to `*****SPAM*****`. The tag can be
    altered if desired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that SpamAssassin configuration is complete, Outlook Express can be configured
    to act on the modified message subject. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder for the Spam. To do this, select the **File** menu, click on
    **Folder**, and then on **New**. Type in **Spam**, or another descriptive name,
    as the folder name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Tools** menu, then select **Message Rules**, and then **New**.
    On the next window, ensure that the conditions include **Where the Subject line
    contains specific words**, and the actions include **Move it to the specified
    folder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Microsoft Outlook Express](img/8648_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **contains specific words**, and enter *******SPAM*******, or the alternative
    phrase chosen when configuring SpamAssassin. Click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Microsoft Outlook Express](img/8648_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **specified** in the next line of the **Rule Description**. Select
    the folder created and click **OK**.![Microsoft Outlook Express](img/8648_08_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The rule is summarized. Give it a meaningful name, such as Spam, then click
    **OK** to save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mozilla Thunderbird
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mozilla Thunderbird is a free, open source e-mail client with most of the features
    of Microsoft Outlook. It is available free at [www.mozilla.org/products/thunderbird/](http://www.mozilla.org/products/thunderbird/).
    It has full filtering capabilities. To configure it, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder to store the spam. Click on the **File** menu and select **New**
    | **Folder**. Choose a location (the inbox should be fine) and a name, such as
    **Spam**. Click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Mozilla Thunderbird](img/8648_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Tools** menu and select **Message Filters**. Click on the **New**
    button to create a new filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Mozilla Thunderbird](img/8648_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next dialog, choose a name for the filter such as **Spam**. Then select
    the **Match any of the following** button. In the left list, type **X-Spam-Status**,
    in the middle list select **is**, and in the right select **Yes**. In the box
    below, click on **Move Message to**, and select the folder created in the first
    step.![Mozilla Thunderbird](img/8648_08_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK**, and the rule summary will show the rule. Press **Run Now** to
    test the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Mozilla Thunderbird](img/8648_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Customizing SpamAssassin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SpamAssassin is very configurable. Almost every setting can be configured on
    a system-wide or user-specific basis.
  prefs: []
  type: TYPE_NORMAL
- en: Reasons to customize
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If SpamAssassin is so good, then why configure it? Well, there are several reasons
    why it's worth improving spam filtering with SpamAssassin.
  prefs: []
  type: TYPE_NORMAL
- en: SpamAssassin by default (that is, when installed but not customized) typically
    manages to detect over 80% of spam. After adding a few customizations, the detection
    rate can be greater than 95%.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everyone's spam is different and one user's spam might look like another user's
    ham. By trying to be general, SpamAssassin may fail to filter spam for every user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the features of SpamAssassin are disabled by default. By enabling them,
    the spam recognition rate is increased.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following configuration options are discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Altering the scores for rules:** This allows rules to be disabled, poor rules
    to be given less weight, and better rules to be given a higher weight.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Obtaining and using new rules:** This can improve spam detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adding e-mail addresses to white and blacklists:** This allows the e-mail
    from specified senders to always be treated as ham, no matter what the content
    is, or the opposite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enabling SpamAssassin''s Bayesian filter:** This can increase filtering accuracy
    from 80% to 95% or more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules and scores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The configuration files for standard, sitewide, and user-specific settings
    are saved in different directories as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard configuration settings are stored in `/usr/share/spamassassin`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Site-wide customizations and settings are stored in `/etc/mail/spamassassin/`.
    All files matching `*.cf` are examined by SpamAssassin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-specific settings are stored in `~/.spamassassin/local.cf`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bulk of the standard configuration files is devoted to simple rules and
    their scores.
  prefs: []
  type: TYPE_NORMAL
- en: A rule is typically a match for letters, numbers, or other printing characters.
    Rules are written using a technique called regular expressions, or regex for short.
    This is a shorthand method of specifying that certain combinations of characters
    will trigger the rule. A rule might try to detect a particular word, such as "Rolex",
    or it might look for particular words in certain orders, such as "buy Rolex online".
    The rules are stored in text files.
  prefs: []
  type: TYPE_NORMAL
- en: Default files are stored in `/usr/share/spamassassin`. These are files that
    are shipped with SpamAssassin and may change with each release. It's best not
    to modify these files or place new files in this directory, as an upgrade to SpamAssassin
    will overwrite these files. Most of the rules that SpamAssassin uses, and the
    scores applied to each rule, are defined within files in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: The defaults can be overwritten by sitewide configuration files. These are placed
    in `/etc/mail/spamassassin`. SpamAssassin will read all files matching `*.cf`
    in this directory. Settings made here can overrule those in the default files.
    They can include defining new rules and new rule scores.
  prefs: []
  type: TYPE_NORMAL
- en: User-specific customizations can be placed in the `~/.spamassassin/local.cf`
    file. Settings made here can override sitewide settings defined in `/etc/mail/spamassassin`,
    and default settings in `/usr/share/spamassassin/`. New rules may be defined here,
    and scores for existing rules can be overridden.
  prefs: []
  type: TYPE_NORMAL
- en: SpamAssassin first reads all the files in `/usr/share/spamassassin` in alphanumerical
    order; `10_misc.cf` will be read before `23_bayes.cf`. SpamAssassin then reads
    all the `.cf` files in `/etc/mail/spamassassin/`, again in alphanumeric order.
    Finally, SpamAssassin reads `~user/.spamassassin/user_prefs`. If a rule or score
    is defined in two files, the setting in the last file read is used. This allows
    the administrator to override the defaults and a user to override the sitewide
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: Each line in a rules file can be blank or contain a comment or a command. The
    hash or pound (#) symbol is used for comments. Rules generally have three parts,
    the rule definition, a textual description, and the score or series of scores.
    Convention dictates that all rule scores for rules provided by SpamAssassin should
    be located together in a separate file. That file is `/usr/share/spamassassin/50_scores.cf`.
  prefs: []
  type: TYPE_NORMAL
- en: Altering rule scores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The simplest configuration change is to change a rule score. There are two
    reasons why this might be done:'
  prefs: []
  type: TYPE_NORMAL
- en: A rule is very good at detecting spam, but the rule has a low score. E-mails
    that fire the rule are not being detected as spam.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rule is acting on non spam. As a result, e-mails that fire the rule are wrongly
    being detected as spam.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The rules that give a positive result when SpamAssassin is run are listed in
    the `X-Spam-Status:` header of the e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The rules applied to the e-mail are listed after `tests=`. If one continually
    appears in e-mail that should be marked as spam, but isn't, then the score for
    the rule should be increased. If a rule often fires in e-mail that is wrongly
    classified as spam, the score should be decreased.
  prefs: []
  type: TYPE_NORMAL
- en: To find the current score, use the `grep` utility in all the locations where
    a score can be defined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, the rule has a default score that is overridden in
    `/etc/mail/spamassassin/local_scores.cf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The original score for the rule had four values. SpamAssassin changes the scores
    it uses, depending on whether network tests (for example, those that test open
    relays) are in use and whether the Bayesian Filter is in use. Four scores are
    listed, which are used in the following circumstances:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **Bayesian filter not in use** | **Bayesian filter in use** |'
  prefs: []
  type: TYPE_TB
- en: '| **External tests not in use** | 1st score | 3rd score |'
  prefs: []
  type: TYPE_TB
- en: '| **External tests in use** | 2nd score | 4th score |'
  prefs: []
  type: TYPE_TB
- en: If only one score is given, as overridden in `/etc/mail/spamassassin/ local_scores.cf`,
    it is used in all circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example, the system administrator has overridden the default
    score in `/etc/mail/spamassassin/local_scores.cf` with a single value in `/etc/mail/spamassassin/local_scores.cf`.
    To change this value for a particular user, their `~/.spamassassin/local.cf` might
    read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This changes the score used from `4.34`, set in `/etc/mail/spamassassin/ local_scores.cf`,
    to `1.2`. To disable the rule entirely, the score can be set to zero.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Endless hours can be spent configuring rule scores. SpamAssassin includes tools
    to recalculate optimal rule scores, by examining existing e-mails, both spam and
    non spam. They are covered in detail in the book *SpamAssassin* published by Packt.
  prefs: []
  type: TYPE_NORMAL
- en: Using other rulesets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SpamAssassin has a large following, and the design of SpamAssassin has made
    it easy to add new rulesets, which are sets of rules and default scores for those
    rules. There are many different rulesets available. Most are based on a particular
    theme, for example finding the names of drugs often sold with spam or telephone
    numbers found in spam e-mails. Most custom rulesets are listed on the Custom Rulesets
    page of the SpamAssassin Wiki at [http://wiki.apache.org/spamassassin/CustomRulesets](http://wiki.apache.org/spamassassin/CustomRulesets).
  prefs: []
  type: TYPE_NORMAL
- en: As the battle against spam is so aggressive, rulesets have been developed that
    may possibly be uploaded daily. SpamAssassin provides this ability with the `sa-update`
    utility. You can choose to use `sa-update` on a regular basis, or to download
    a particular ruleset and keep it, or to manually update the rulesets that you
    choose. To obtain the best results in filtering spam, use of `sa-update` is recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to install rulesets manually, the Wiki page gives a general description
    of each ruleset and a URL to download it. Once a ruleset has been chosen, we install
    it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In a browser, follow the link on the SpamAssassin Wiki page. In most cases,
    the link will be to a file with a name matching `*.cf`, and a browser will open
    it as a text file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file using the browser (normally, the **File** menu has a **Save as**
    option).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the file to `/etc/mail/spamassassin`—the rules will be automatically run
    if the file is placed in this location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the file has scores in it, otherwise the rules will not be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitor spam performance to ensure that legitimate e-mail is not being detected
    as spam.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding rules to SpamAssassin will increase the memory used by SpamAssassin,
    and the time that it takes to process e-mails. It is best to be cautious and add
    new rulesets gradually, to ensure that the effect on the machine is understood.
  prefs: []
  type: TYPE_NORMAL
- en: You may manually monitor the ruleset and update it on your system using the
    same process.
  prefs: []
  type: TYPE_NORMAL
- en: If you choose to use `sa-update`, you should plan your use of it. sa-update
    can use several channels, which are basically sources of rulesets. By default,
    the channel updates.spamassassin.org is used; another popular channel is the OpenProtect
    channel, called [saupdates.openprotect.com](http://saupdates.openprotect.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable `sa-update`, it must be run regularly, for example via cron. Add
    a cron entry to your system calling the following commands, to update the base
    rulesets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'If you use an additional channel, the command might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To protect against DNS poisoning and impersonation, SpamAssassin allows digital
    signing of rulesets. To use a signed ruleset, use the`—gpgkey`—parameter to`sa-update`.
    The correct value to use with the`—gpgkey` parameter will be described in the
    SpamAssassin wiki page for the ruleset.
  prefs: []
  type: TYPE_NORMAL
- en: Whitelists and blacklists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SpamAssassin is very good at detecting spam, but there is always a risk of errors.
    By using a list of e-mail addresses that are known spam producers (a blacklist),
    e-mails from spammers who consistently use the same e-mail addresses or domains
    can be filtered out. With a list of e-mail addresses that are legitimate e-mail
    senders (a whitelist), e-mails from regular or important correspondents are guaranteed
    to be filtered as ham. This prevents the delay or non delivery of important e-mails
    that may otherwise be marked as spam.
  prefs: []
  type: TYPE_NORMAL
- en: Blacklists that list individual e-mail addresses have limited use spammers normally
    use different or random e-mail addresses for each spam run. However, some spammers
    use the same domain for multiple runs. As SpamAssassin allows wildcards in its
    blacklisting, entire domains can be blacklisted. This is more useful for filtering
    out spam.
  prefs: []
  type: TYPE_NORMAL
- en: Manual whitelisting and blacklisting involves adding configuration directives
    to the global configuration file `/etc/mail/spamassassin/local.cf` and/or in `~/.spamassassin/user_prefs`.
  prefs: []
  type: TYPE_NORMAL
- en: The whitelist and blacklist entries allow the `?` and `*` characters to be used
    to match a single character or many characters respectively. So, if a whitelist
    entry read `*@domain.com`, then `joe@domain.com` and `bill@domain.com` would both
    match. For an entry that read `*@yahoo?.com, joe@yahoo1.com` and `bill@yahoo2.com`
    would match, but `billy@yahoo22.com` would not match. `*@yahoo*.com` would match
    all three examples.
  prefs: []
  type: TYPE_NORMAL
- en: The whitelist and blacklists rules do not immediately cause an e-mail to be
    tagged as spam or ham, even though the scores are heavily weighted. The default
    score for the `USER_IN_WHITELIST` rule is `-100.0`. It is technically possible
    that an e-mail may match a whitelist entry and still trigger enough other tests
    to result in it being marked as spam. Although in practice, this is unlikely to
    occur, unless the scores have been changed from the defaults.
  prefs: []
  type: TYPE_NORMAL
- en: To blacklist an e-mail address or whole domain, use the `blacklist_from` directive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: To whitelist an e-mail address or domain, use the `whitelist_from` directive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: SpamAssassin has more complex rules for managing white and blacklists, as well
    as an automatic whitelist/blacklist. Both blacklists and whitelists can be specified
    as discrete items `(blacklist joe@domain.com` and `bill@another.com)` or as wildcards
    (blacklist every `joe`, and blacklist everyone from `domain.com`). The wildcards
    are particularly powerful, and care should be taken to ensure that legitimate
    e-mail is not rejected.
  prefs: []
  type: TYPE_NORMAL
- en: Bayesian filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This uses a statistical technique to determine if an e-mail is spam, based on
    previous e-mails of both types. Before it will work, it needs to be trained with
    e-mail that is known spam and also e-mail that is known non spam. It is important
    that the e-mail is correctly categorized, otherwise the effectiveness of the filter
    will be reduced. The learning process is done on the e-mail server, and the sample
    e-mails should be stored in an accessible location.
  prefs: []
  type: TYPE_NORMAL
- en: The `sa-learn` command is used to train the Bayesian filter with e-mail messages
    that are known ham or spam. The SpamAssassin installation routine will have placed
    `sa-learn` in the path, normally in `/usr/bin/sa-learn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is used on the command line and is passed a directory, file, or series of
    files. For this to work, the e-mail has to be stored on the server or exported
    from the client in a suitable format. SpamAssassin recognizes `mbox` format, and
    many e-mail clients use a compatible format. To use `sa-learn`, a directory or
    series of directories can be passed in to the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: If the `mbox` format is used, the `mbox` flag should be used so that SpamAssassin
    searches the file for more than one e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: If SpamAssassin has already learned from an e-mail, `sa-learn` detects this
    and will not process it twice. In the example above, 100 of the 175 e-mails had
    been processed already and were ignored on this run. The remaining 75 e-mails
    had not been processed before.
  prefs: []
  type: TYPE_NORMAL
- en: If `sa-learn` is passed a number of messages, there may be no feedback for some
    time. The `--showdots` flag provides feedback in the form of dots (.) whenever
    an e-mail is processed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Once SpamAssassin has learned enough e-mails, it will begin to use the Bayesian
    filter automatically. It can be kept up-to-date by using the auto-learn feature.
  prefs: []
  type: TYPE_NORMAL
- en: Auto-learning should not be used without additional user input. There are two
    reasons for doing this.
  prefs: []
  type: TYPE_NORMAL
- en: SpamAssassin occasionally gets spam detection wrong, and e-mail that is spam
    may be learned as an example of non spam. Auto-learning would confuse the Bayesian
    filter and decrease its effectiveness.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The score threshold that an e-mail is auto-learned at is higher than that for
    detection as spam. In other words, an e-mail may be detected as spam, but not
    auto-learned. In this case, the rest of SpamAssassin is doing a fairly good job
    of detecting border-line spam (those with scores close to the threshold for spam),
    but the Bayesian filter is not being taught the e-mails.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use automatic learning, set the `bayes_auto_learn` flag to `1`. This can
    be configured sitewide in the `/etc/mail/spamassassin/local.cf` file, or can be
    overridden in a user's `~/.spamassassin/user_prefs` file. Two other configuration
    flags also affect auto-learning, and are the thresholds for learning ham and spam.
    These values are in the same units as SpamAssassin's score for each e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: When auto-learning is enabled, any e-mail that is assigned a score of less than
    `bayes_auto_learn_threshold_nonspam`, is learned as ham. Any e-mail that is assigned
    a value greater than `bayes_auto_learn_threshold_spam`, is learned as spam.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that the `bayes_auto_learn_threshold_nonspam` threshold is
    kept low (close to or below zero). This will avoid the situation where a spam
    e-mail that escapes detection is used as an example to train the Bayesian filter.
    Keeping the `bayes_auto_learn_threshold_spam` threshold high is to some extent
    a matter of choice; however, it should be above the scores of any e-mails that
    have been wrongly classified as spam in the past. This may occur up to a score
    of `10` for the default spam threshold of `5`. Therefore, using an auto-learn
    threshold of less than `10` for spam may cause non spam to be accidentally learned
    as spam. If this happens, the Bayesian database will begin to lose effectiveness,
    and future Bayesian results will be compromised.
  prefs: []
  type: TYPE_NORMAL
- en: 'SpamAssassin keeps the Bayesian database in three files in the `.spamassassin`
    directory within a user''s home directory. The format used is usually Berkeley
    DB format and the files are named as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The `bayes_journal` file is used as a temporary storage area. Sometimes it is
    not present. This file is generally relatively small, with a size of around 10
    KB. The `bayes_seen` and `bayes_toks` files can each be several megabytes in size.
  prefs: []
  type: TYPE_NORMAL
- en: Other SpamAssassin features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter has only scratched the surface of SpamAssassin''s capabilities.
    If spam is a problem for an organization, SpamAssassin will reward further study.
    Some of the other features that it contains are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network tests:** SpamAssassin can integrate with Open Relay Databases. (The
    3.x distribution contains tests for over 30 databases, although not all of them
    are enabled by default.) Open Relay tests do not require a fast machine or lots
    of RAM, and so are relatively cheap tests to use. They have a fairly successful
    detection rate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External content databases:** SpamAssassin can integrate with external content
    databases. These work in a participating network. All the participants send details
    of all the e-mails they receive to central servers. If the e-mails have been sent
    many times before, the e-mail is probably a spam that has been sent to many users.
    The services are designed so that no confidential data is sent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Whitelist and blacklist:** SpamAssassin includes an automatic whitelist and
    blacklist, which work in a similar way to the manual lists described earlier.
    This is particularly effective at preventing regular correspondents from having
    their e-mail wrongly detected as spam.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creating new rules:** New rules can be written and developed. Creating rules
    is not particularly difficult, with a little imagination and a suitable source
    of spam. System Administrators can rid their users of any persistent spam that
    fails to be detected with the default SpamAssassin rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customizable headers:** The headers that SpamAssassin adds to e-mails can
    be customized, and new headers can be written. SpamAssassin will also attempt
    to detect viruses and Trojan software, and will wrap an e-mail address like that
    in a special envelope e-mail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple installations:** SpamAssassin can be installed on multiple machines,
    serving one or more e-mail servers. In very high volume e-mail systems, many spam
    servers may be run, each only processing spam. This leads to a high-throughput,
    high-availability service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customizable rule scores:** SpamAssassin includes tools to customize rule
    scores, based on samples of the spam and legitimate e-mail received at an organization.
    This helps to improve the filtering rate. With SpamAssasin 3.0, the tools were
    improved significantly, and the procedure to perform this is much less time consuming
    than it was in earlier versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have seen how SpamAssassin can be obtained and installed.
    Three different methods of using SpamAssassin were presented, with suggestions
    on which option to choose for a particular installation.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration of popular e-mail clients was also covered, namely Microsoft Outlook,
    Microsoft Outlook Express, and Mozilla Thunderbird.
  prefs: []
  type: TYPE_NORMAL
