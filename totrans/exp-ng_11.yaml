- en: Implementing Angular Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about Angular pipes. Think of Angular pipes
    as a modernized version of filters, comprising functions that help us to format
    the values within the template. Pipes in Angular are basically an extension of
    what filters were in Angular v1\. There are many useful built-in pipes we can
    use easily in our templates. You will learn about built-in pipes and we will also
    create our own custom user-defined pipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this chapter, you will learn and implement the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Angular pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining and implementing a pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the various built-in pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DatePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DecimalPipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CurrencyPipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LowerCasePipe and UpperCasePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON Pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SlicePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: async Pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn to implement custom user-defined pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameterizing the pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaining the pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about pure and impure pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular Pipes - An overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pipes allow us to format the values within the view of the templates before
    it's displayed. For example, in most modern applications, we want to display terms,
    such as today, tomorrow, and so on, and not system date formats, such as April
    13 2017 08:00\. Let's take a look at more real-world scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Do you want the hint text in the application to always be lowercase? No problem;
    define and use `LowercasePipe`. In a weather app, if you want to show the month
    name as MAR or APR instead of its full name, use `DatePipe`.
  prefs: []
  type: TYPE_NORMAL
- en: Cool, right? You get the point. Pipes help you to add your business rules, so
    you can transform the data before it's actually displayed in the templates.
  prefs: []
  type: TYPE_NORMAL
- en: A good way to relate to Angular pipes is through Angular 1.x filters, but pipes
    do a lot more than just filtering.
  prefs: []
  type: TYPE_NORMAL
- en: We have used the Angular router to define the route path, so we have all the
    functionalities of pipes in one page; you can create it in the same or different
    apps. Feel free to use your creativity.
  prefs: []
  type: TYPE_NORMAL
- en: In Angular 1.x, we had filters--pipes are a replacement of filters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to define and use an Angular pipe.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a pipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The pipe operator is defined with a pipe symbol, (`|`), followed by the name
    of the pipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of a simple `lowercase` pipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are transforming the text to lowercase using the `lowercase`
    pipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s write an example `Component` using the `lowercase` pipe example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We defined a `DemoPipeComponent` component class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We created a string variable, `authorName`, and assigned the value, `'Sridhar
    Rao'`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the template view, we displayed `authorName`; however, before we printed
    it in the UI, we transformed it using the `lowercase` pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run the preceding code, and you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0827f6c1-8664-4c85-bdb5-3571e7885975.png)'
  prefs: []
  type: TYPE_IMG
- en: Well done! In the preceding example, we have used a built-in pipe. In the subsequent
    sections, you will learn more about the built-in pipes and also create a few custom
    pipes.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the pipe operator only works in your templates and not inside controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular pipes are a modernized version of Angular 1.x filters. Angular comes
    with a lot of predefined built-in pipes. We can use them directly in our views
    and transform the data on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of all the pipes that Angular has built-in support
    for:'
  prefs: []
  type: TYPE_NORMAL
- en: DatePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DecimalPipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CurrencyPipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LowercasePipe and UppercasePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON Pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SlicePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: async Pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, let's implement and learn more about the various
    pipes and see them in action.
  prefs: []
  type: TYPE_NORMAL
- en: DatePipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DatePipe, as the name itself suggest, allows us to format or transform the values
    that are related to a date. DatePipe can also be used to transform values in different
    formats based on parameters passed at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: As explained in the preceding section, the general syntax is a variable followed
    by a (`|`) pipe operator, which is then followed by the name of the pipe operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We used DatePipe to transform the `today` variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, in the preceding example, you will note that we passed a few parameters
    to the pipe operator; we will cover passing parameters to the pipe in the following
    section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s create a complete example of the `DatePipe` component; the following
    is the code snippet for implementing the `DatePipe` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a `PipeComponent` component class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `today` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the view, we transformed the value of the variable into various expressions
    based on different parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, run the application, and we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/82ba1432-01a5-4451-8fb6-b0e633d74748.png)'
  prefs: []
  type: TYPE_IMG
- en: You learned about `DatePipe` in this section. In the following sections, you
    will continue to learn and implement other built-in pipes and also create some
    custom user-defined pipes.
  prefs: []
  type: TYPE_NORMAL
- en: DecimalPipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about yet another built-in pipe--DecimalPipe.
  prefs: []
  type: TYPE_NORMAL
- en: DecimalPipe allows us to format a number according to locale rules. DecimalPipe
    can also be used to transform a number in different formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we use the number pipe, and optionally, we can
    pass the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how to create a `DatePipe` that implements decimal points;
    the following is an example code of the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We defined a component class, that is, `PipeComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `state_tax` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then transformed `state_tax` in the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first pipe operator tells the expression to print the decimals up to five
    decimal places.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second pipe operator tells the expression to print the value up to three
    decimal places.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output of the preceding pipe component example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d6c7f634-b494-427e-aca6-4a2ca689005d.png)'
  prefs: []
  type: TYPE_IMG
- en: Undoubtedly, the number pipe is one of the most useful and commonly used pipes
    across various applications. We can transform the number values especially dealing
    with decimals and floating points.
  prefs: []
  type: TYPE_NORMAL
- en: CurrencyPipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For applications that want to cater to multinational geographies, we need to
    show country-specific codes and their respective currency values--that's where
    `CurrencyPipe` comes to our rescue.
  prefs: []
  type: TYPE_NORMAL
- en: The `CurrencyPipe` operator is used to append the `country` codes or `currency`
    symbol in front of the number values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the code snippet implementing the `CurrencyPipe` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: The first line of code shows the general syntax of writing `CurrencyPipe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second line shows the currency syntax, and we used it to transform the `expenses`
    value and append the Indian currency symbol to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So now that we know how to use a `CurrencyPipe` operator, let''s put together
    an example to display multiple `currency` and `country` formats; the following
    is the complete component class, which implements a `CurrencyPipe` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a component class, `CurrencyPipeComponent`, and declared few variables,
    namely `salary` and `expenses`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the component template, we transformed the display of the variables by adding
    the `country` and `currency` details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the first pipe operator, we used `''currency : USD''`, which will append
    the ($) dollar symbol before the variable.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the second pipe operator, we used `''currency : ''INR'':false''`, which
    will add the currency code, and `false` will tell it not to print the symbol.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, launch the app, and we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/34796edd-7a0f-4529-85c5-30bf4d0da612.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we discussed and implemented `CurrencyPipe`. In the following
    sections, we will keep exploring and learning about other Built-in pipes and much
    more.
  prefs: []
  type: TYPE_NORMAL
- en: LowerCasePipe and UpperCasePipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The LowerCasePipe and UpperCasePipe, as the names suggest, help in transforming
    the text into lowercase and uppercase, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: The first line of code transformed the value of `authorName` to lowercase using
    the `lowercase` pipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second line of code transformed the value of `authorName` to uppercase using
    the `uppercase` pipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have seen how to define lowercase and uppercase pipes, it's time
    to create a complete component example, which implements the pipes to show the
    author name in both lowercase and uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a component class, `TextCasePipeComponent`, and defined an `authorName`
    variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the component view, we used the `lowercase` and `uppercase` pipes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first pipe will transform the value of the variable to a lowercase text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second pipe will transform the value of the variable to an uppercase text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the application, and we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/926ebe20-e308-4138-b99c-ab3c6b64b444.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, you learned how to use `lowercase` and `uppercase` pipes to
    transform the values.
  prefs: []
  type: TYPE_NORMAL
- en: JSON Pipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to a JSON filter in Angular 1.x, we have the JSON pipe, which helps
    us to transform the string into a JSON format string.
  prefs: []
  type: TYPE_NORMAL
- en: In a lowercase or an uppercase pipe, we transformed the strings; using a JSON
    pipe, we can transform and display the string into a JSON format string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s use the preceding syntax and create a complete `Component` example,
    which uses the JSON Pipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a component class, `JSONPipeComponent` and `authorObj`, and assigned
    the JSON string to the variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the component template view, we transformed and displayed the JSON string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the app, and we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/31c7bcc9-8279-4539-b9c3-1c24a6ead706.png)'
  prefs: []
  type: TYPE_IMG
- en: JSON is soon becoming de facto standard of web applications to integrate between
    services and client technologies. Hence, the JSON pipe comes in handy every time
    we need to transform our values to a JSON structure in the view.
  prefs: []
  type: TYPE_NORMAL
- en: SlicePipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SlicePipe is very similar to an array slice JavaScript function. Slice pipe
    extracts the characters from a string between two specified indices and returns
    the new sub string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax to define a SlicePipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we are slicing the email address to show only
    the first four characters of the variable value, `email_id`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to use a SlicePipe, let's put it together in a component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete code snippet implementing SlicePipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a `SlicePipeComponent` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a string variable `emailAddress` and assigned it a value, `test@packtpub.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we applied SlicePipe to the `{{emailAddress | slice : 0: 4}}` variable.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We get the substring starting from the `0` position and get `4` characters from
    the variable value of `emailAddress`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the app, and we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aec0e6f4-0964-4f92-bbf7-7202cf800a94.png)'
  prefs: []
  type: TYPE_IMG
- en: SlicePipe is certainly a very helpful built-in pipe, especially dealing with
    strings or substrings.
  prefs: []
  type: TYPE_NORMAL
- en: async Pipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An async pipe allows us to directly map promises or observables into our template
    view. To understand the async Pipe better, let me throw some light on an observable
    first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observables are Angular-injectable services, which can be used to stream data
    to multiple sections in the application. In the following code snippet, we use
    an `async` pipe as a promise to resolve the list of authors being returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `async` pipe now subscribes to `Observable` (authors) and retrieves the
    last value.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at examples of how we can use the `async` pipe as both a `Promise`
    and an `Observable`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines of code in our `app.component.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a `getAuthorDetails` method and attached an observable with the same.
    The method will return the response from the `url`, which is a JSON output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `getAuthorList` method, we bound a promise, which needs to be resolved
    or rejected in the output returned by the `url` called through a `http` request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have seen how the `async` pipe works. You will find it very
    similar to dealing with services. We can either map a promise or an observable
    and map the result to the template.
  prefs: []
  type: TYPE_NORMAL
- en: Parameterizing pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A pipe can take parameters as well. We can pass parameters along with the pipe.
    A parameter is separated with a colon symbol (`:`) after the pipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s quickly build a simple example of a pipe to see it in action. Here''s
    an example of `DatePipe` with the `MM-dd-yyyy` parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'One more example of a pipe with parameters is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We passed USD as a parameter to `CurrencyPipe`, which will tell the pipe to
    display the currency code, such as *USD* for the US dollar and *EUR* for the euro.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `true` parameter stands for displaying the symbol of the currency ($). By
    default, it's set to false.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s see them in action with complete code for the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we created a `ParamPipeComponent` class and defined
    the `today` and `salary` variables.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Component` template view, we pass the `date:'MM-dd-yyyy'` parameters
    for `DatePipe` and the `currency:'USD' :true` parameters for `CurrencyPipe`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dfce4e6f-48cb-4eda-8f26-d52111ebb02d.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we passed custom parameters, such as `currency` and
    `date` formats, to the pipes and viewed the output accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: In most application use cases, we will need to pass parameters to pipes to transform
    values based on business logic. In this section, we focused on paramterizing the
    pipes by passing values.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have been using the built-in pipes and passing parameters to the
    pipes.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, you will learn about chaining pipes, creating custom
    pipes, and also passing parameters to the custom user-defined pipes.
  prefs: []
  type: TYPE_NORMAL
- en: Chaining pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can chain multiple pipes together. This particularly helps in scenarios where
    we need to associate more than one pipe that needs to be applied, and the final
    output will be transformed with all the pipes applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow or chains will be triggered and apply the pipes one after another.
    An example of the chain pipe syntax is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We applied two chain pipes in the preceding code. First, `DatePipe` is applied
    to the `today` variable, and just after that, the `uppercase` pipe is applied.
    The following is the entire code snippet for `ChainPipeComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We have used the slice to show only the first four characters of the month.
    The following screenshot shows the output of the preceding component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1f371c11-34df-4a31-a921-a8061cdc258b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of the key things to remember when applying chain pipes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The order of execution is from left to right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pipes are applied one after another
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, you learned about how to chain multiple pipes together in our
    applications. In the next section, you will learn how to create your own custom
    pipes in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, so good. Pipes have really impressed us, but wait, there's more awesome
    things we can do with pipes. Built-in pipes, as you see, are very limited and
    few. We certainly need to create our own custom pipes, which cater to our app's
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn how to create a custom pipe for our application.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will build a pipe, which will be a tax calculator. We pass
    the price of the product and use a pipe functionality to automatically calculate
    and display the sales tax. Magic, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a custom pipe, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a template to apply it to the pipe ( in our example, it's `updateTaxPipe`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a pipe file, that is, `update-tax.pipe.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Every pipe file will have to import the pipe from the Angular core.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the pipe metadata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `Component` class. It should have the `transform` function, which
    holds the business logic of what the pipe should do.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following code snippet, we are defining a custom pipe called `UpdateTaxPipe`,
    which will take a `percentage` parameter and does the sales tax calculation and
    displays it in our template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create our `update-tax.pipe.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: To tell Angular that this is a pipe, we applied the `@Pipe` decorator, which
    you import from the core Angular library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a custom pipe named `UpdateTaxPipe`, using the `name` pipe metadata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a `transform` method, which is mandatory for the pipe and defined
    our business logic and rule inside the method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We passed two parameters to the `transform` method, and it returned the updated
    value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Angular looks for and executes the `transform` method, regardless of whether
    we include the interface PipeTransform or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app, and we should see the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9d770113-f482-4303-aa39-e2f6175b42c6.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, you learned how to create a custom pipe. Creating user-defined
    pipes is very simple and easy. Custom pipes definitely help us to easily integrate
    the business logic of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Try and create custom pipes, which can fit the write once and use logic many
    times and also in many component views; for example, validating a phone number,
    address, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Pure and Impure Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pipe also accepts a metadata called Pure. Pipes are of two states:'
  prefs: []
  type: TYPE_NORMAL
- en: Pure Pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Impure Pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pure Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Pure Pipe will execute only when the value of the input parameter is changed.
    It will not remember or trace any of the previous values or states. Angular built-in
    pipes are all `pure` pipes.
  prefs: []
  type: TYPE_NORMAL
- en: All the pipes we have seen so far as examples are Pure Pipes.
  prefs: []
  type: TYPE_NORMAL
- en: Impure Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An impure pipe is called for every change detection cycle, regardless of whether
    the value or parameters change. In order to use impure pipes, we should use the
    pipe decorator `pure` as `false`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, all pipe decorators have `pure` set as `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the pipe decorator value as `pure` will check for the pipe's output
    irrespective of whether it's value changed or not and will keep updating the value
    provided by the pipe.
  prefs: []
  type: TYPE_NORMAL
- en: Defining an impure pipe is same as creating any custom user-defined pipe, the
    only difference being that in the `@Pipe` decorator we will explicitly mention
    the pipe to be impure by setting the value to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is the syntax to define a impure pipe by setting the value of pipe to
    false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this section, you learned about the different types of Angular pipes, namely
    pure and impure pipes. Pure pipes are called only when the value of the input
    component changes. Impure pipes are called on every change detection, irrespective
    of whether the values change or not.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned all about Angular pipes. Angular pipes are very
    useful in transforming the data in the view template. Angular pipes are the modernized
    version of filters available in Angular 1.x.
  prefs: []
  type: TYPE_NORMAL
- en: There are many useful built-in pipe operators we can use easily in our templates.
    You learned about built-in pipes as well as created custom user-defined pipes
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: When working with numbers, we can make use of `DatePipe`, `DecimalPipe`, and
    `CurrencyPipe`. When working with strings exclusively, we can always use SlicePipe,
    `LowercasePipe`, and `UppercasePipe`.
  prefs: []
  type: TYPE_NORMAL
- en: We can use `JSONPipe` and `asyncPipe` when we are mostly dealing with server-side
    responses or making an async call and processing the response. We also covered
    passing parameters to the pipes and customizing according to the need of our apps.
  prefs: []
  type: TYPE_NORMAL
- en: We explored how to create and implement custom user-defined pipes, which can
    also take parameters to customize them better based on our application needs.
  prefs: []
  type: TYPE_NORMAL
- en: So go ahead, and transform your views with pipes.
  prefs: []
  type: TYPE_NORMAL
- en: In next chapter you will learn about implementing Angular services. You will
    learn about service and factory, creating Angular service, accessing data from
    components using service and creating asynchronous service.
  prefs: []
  type: TYPE_NORMAL
