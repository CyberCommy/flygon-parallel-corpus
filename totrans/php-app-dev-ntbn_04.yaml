- en: Chapter 4. Debugging and Testing using NetBeans
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用NetBeans进行调试和测试
- en: If debugging is defined as the art of taking bugs out of a program, then programming
    must be putting them in.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果调试被定义为从程序中消除错误的艺术，那么编程必须是将错误放入其中。
- en: 'In this chapter, we are going to learn to debug and test PHP web applications
    using NetBeans IDE. We will deal with sample projects, to learn the process of
    bug hunting and testing. The following topics will be discussed in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习使用NetBeans IDE调试和测试PHP Web应用程序。我们将处理示例项目，以学习捕虫和测试的过程。本章将讨论以下主题：
- en: Configuring XDebug
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置XDebug
- en: Debugging the PHP source code with XDebug
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XDebug调试PHP源代码
- en: Unit testing with PHPUnit and Selenium
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHPUnit和Selenium进行单元测试
- en: Code coverage
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码覆盖率
- en: Let's go bug the hunter and do some real tricks...
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去找猎人，做一些真正的技巧...
- en: Debugging the ancient art of programming
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试古老的编程艺术
- en: After writing a program, the next step is to test the program to find whether
    it is working as desired or not. Sometimes, when we run our code for the first
    time just after it has been written, it may produce errors, such as syntax errors,
    runtime errors, and logical errors. Debugging is the step-by-step process of finding
    errors, so that the errors can be fixed to make the program work in the way it
    was intended.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编写程序后，下一步是测试程序，以查找程序是否按预期工作。有时，当我们第一次运行刚写好的代码时，可能会产生错误，如语法错误、运行时错误和逻辑错误。调试是逐步查找错误的过程，以便修复错误，使程序按预期工作。
- en: Modern editors can detect almost all syntax errors, and hence we can fix them
    while typing code. Also, there are tools that can be integrated with the IDE to
    find bugs, and they are known as debuggers. There are a number of good debuggers,
    such as XDebug and FirePHP (for FireBug fans), for PHP. Such debuggers come with
    an application profiler as well. In this chapter, we'll try XDebug for debugging
    PHP projects using NetBeans.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现代编辑器几乎可以检测到所有语法错误，因此我们可以在输入代码时修复它们。还有一些可以与IDE集成的工具来查找错误，它们被称为调试器。有许多优秀的调试器，如XDebug和FirePHP（适用于FireBug粉丝），适用于PHP。这些调试器还带有应用程序分析器。在本章中，我们将尝试使用NetBeans调试PHP项目的XDebug。
- en: Debugging PHP source code with XDebug
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XDebug调试PHP源代码
- en: '**XDebug** is highly configurable and adaptable to a variety of situations.
    You can inspect local variables, set watches, set breakpoints, and evaluate code,
    live. You can also navigate to declarations, types, and files using the **Go To**
    shortcuts and hypertext links. Use a global PHP `include` path for all projects
    or customize it per project.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**XDebug**是高度可配置的，适应各种情况。您可以检查本地变量，设置监视，设置断点，并实时评估代码。您还可以使用**转到**快捷方式和超文本链接导航到声明、类型和文件。为所有项目使用全局PHP`include`路径，或者根据项目自定义它。'
- en: The NetBeans IDE for PHP also offers command-line debugging. The PHP program
    output appears in a command-line display in the IDE itself, and you can inspect
    the generated HTML without having to switch to a browser.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: PHP的NetBeans IDE还提供了命令行调试。PHP程序的输出会显示在IDE本身的命令行显示中，您可以在不切换到浏览器的情况下检查生成的HTML。
- en: You can debug scripts and web pages either locally or remotely. The NetBeans
    PHP debugger integration allows you to map server paths to local paths, in order
    to enable remote debugging.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本地或远程调试脚本和网页。NetBeans PHP调试器集成允许您将服务器路径映射到本地路径，以启用远程调试。
- en: 'XDebug offers features such as the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: XDebug提供以下功能：
- en: Automatic stack tracing upon an error
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误发生时自动堆栈跟踪
- en: Function call logging
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数调用日志
- en: Enhancing the `var_dump()` output and code-coverage information
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强`var_dump()`输出和代码覆盖信息
- en: Stack traces show you where errors occur, allowing you to trace function calls
    and the originating line numbers. The `var_dump()` output is displayed in a more
    elaborate way with XDebug.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈跟踪显示错误发生的位置，允许您跟踪函数调用和原始行号。`var_dump()`输出以更详细的方式显示在XDebug中。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: XDebug overrides PHP's default `var_dump()` function for displaying variable
    dumps. XDebug's version comprises different colors for different variable types,
    and places limits on the amount of array elements/object properties, maximum depth,
    and string lengths.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: XDebug覆盖了PHP的默认`var_dump()`函数，用于显示变量转储。XDebug的版本包括不同颜色的不同变量类型，并对数组元素/对象属性的数量、最大深度和字符串长度进行限制。
- en: Configuring XDebug
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置XDebug
- en: Configuring XDebug is pretty much easy on each separate operating system. In
    this section, let's configure XDebug with our development environment, which is
    XAMPP, LAMP, and MAMP. All you have to do is enable some lines at `php.ini` or
    press some commands. As we have already installed the development pack, we will
    just activate XDebug on those stacks. First of all, we will get the tool working
    on our localhost system, and then add it to NetBeans.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个单独的操作系统上配置XDebug都非常容易。在本节中，让我们在我们的开发环境（XAMPP、LAMP和MAMP）中配置XDebug。您只需在`php.ini`中启用一些行或按一些命令。由于我们已经安装了开发包，我们将在这些堆栈上激活XDebug。首先，我们将使工具在我们的本地主机系统上运行，然后将其添加到NetBeans中。
- en: Time for action — installing XDebug on Windows
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-在Windows上安装XDebug
- en: The XDebug extension comes with the XAMPP bundle, by default. You just have
    to enable it from the loaded `.ini` file. Note that there could be multiple `php.ini`
    files present, and the file location can be different between different operating
    systems. So, let's try it...
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: XDebug扩展默认包含在XAMPP捆绑包中。您只需从加载的`.ini`文件中启用它。请注意，可能存在多个`php.ini`文件，并且文件位置在不同操作系统之间可能不同。所以，让我们试试看...
- en: Locate the loaded `php.ini` file from your `phpinfo()`, by pointing your browser
    to [http://localhost/xampp/phpinfo.php](http://localhost/xampp/phpinfo.php).![Time
    for action — installing XDebug on Windows](graphics/5801_04_01.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将浏览器指向[http://localhost/xampp/phpinfo.php](http://localhost/xampp/phpinfo.php)来查找加载的`php.ini`文件。![行动时间-在Windows上安装XDebug](graphics/5801_04_01.jpg)
- en: You can see the loaded `php.ini` file located at `D:\xampp\php\php.ini`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到位于`D:\xampp\php\php.ini`的加载的`php.ini`文件。
- en: 'Open the `php.ini` file located at `D:\xampp\php\php.ini`, and find the following
    line:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Find and uncomment the following lines by removing the leading semicolon:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save the `php.ini` file and restart your Apache web server from the XAMPP control
    panel, to enable the XDebug extension.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To verify whether the XDebug object is enabled or not, refresh your `phpinfo()`
    page and find XDebug enabled, as shown in the following screenshot:![Time for
    action — installing XDebug on Windows](graphics/5801_04_02.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have XDebug enabled, it will override `var_dump()` in PHP. You may dump
    a variable like `var_dump($var)` inside your code, and the browser will display
    the enhanced `var_dump` as follows (strings are printed in red):![Time for action
    — installing XDebug on Windows](graphics/5801_04_03.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bingo! You just loaded with XDebug in your development environment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just enabled XDebug for our XAMPP bundle in Windows, and also verified
    the extension loaded with configurations. Note that such general steps to enable
    XDebug can be followed to enable other built-in extensions from `php.ini`. You
    just need to uncomment the extension at `php.ini` and restart your web server
    to make the change effective. Also, enabling XDebug in the LAMP or MAMP stack
    is pretty much similar.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always check the `phpinfo()` page for the loaded path of `php.ini`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Enabling XDebug on Ubuntu
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enabling XDebug is quite easy in Ubuntu. We can install it via the **apt-get**
    package installer and update `xdebug.ini` for loaded configurations.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — installing XDebug on Ubuntu
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the console, run the following commands:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Install XDebug using the following command:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Update `xdebug.ini` using the `gedit` (in-built) editor.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Change `xdebug.ini` so that it looks as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that the first line of these configurations may be available inside `xdebug.ini`,
    and you may have to add the remaining lines.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Restart Apache.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Refresh the `phpinfo()` page, and find the latest XDebug installed with the
    version number.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just enabled XDebug for our LAMP in Ubuntu and also verified the extension
    loaded with configurations. Note that such general steps to enable XDebug can
    be followed to enable other built-in extensions from `php.ini`. You just need
    to uncomment the extension at `php.ini` and restart your web server to make the
    change effective.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Enabling XDebug on Mac OS X
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modify the appropriate version of the loaded `php.ini` file to enable XDebug
    in Mac, uncomment the following lines, and restart the Apache server from the
    MAMP control panel.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: XDebug is now running on your Mac OSX. MAMP Pro users can easily edit `php.ini`
    from the MAMP Pro control panel, by selecting **File | Edit template | PHP 5.3.2
    php.ini** from the menu.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have XDebug enabled in our local development environment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the PHP source with NetBeans
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To proceed, we would like to check the required debugging settings for NetBeans.
    Select the **Tools | Options | PHP | Debugging** tab:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging the PHP source with NetBeans](graphics/5801_04_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: In this window, uncheck the **Stop at First Line** checkbox, because we want
    to stop at our desired line and check the **Watches and Balloon Evaluation** checkbox.
    This option enables you to watch custom expressions or variables while debugging.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s have a look into a debugging session running in the NetBeans window:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging the PHP source with NetBeans](graphics/5801_04_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: In this screenshot, the debug toolbar and button are indicated by functional
    names.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Learn more about the debugging toolbar from [http://netbeans.org/kb/docs/php/debugging.html#work](http://netbeans.org/kb/docs/php/debugging.html#work).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: The debugger windows
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you start a debugging session, a set of debugger windows open below the
    main editor window. To add a new window, select **Window | Debugging**. The following
    windows are available:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '**Local Variables** shows a list of initialized variables, their types, and
    values'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Watches** shows a list of user-defined expressions with their values'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Calls Stack** shows a list of called functions in reverse order; the function
    called last is at the top of the list'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Breakpoints** shows a list of files and numbers of the lines where breakpoints
    are set'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sessions** shows a list of currently active debugging sessions'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Threads** window indicates which PHP script is currently active and whether
    it is suspended at a breakpoint or running. If the script is running, you need
    to go to the browser window and interact with the script.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Sources** window displays all the files and scripts loaded for the debugging
    session. The Sources window does not currently function for PHP projects.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic debugging workflow
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the basic debugging workflows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: The user sets a breakpoint at the line where the PHP source code execution should
    be paused.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When that line is reached, the user executes the script one line after another,
    by pressing the *F7* and *F8* buttons, and checks the values of the variables.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See *Appendix* for NetBeans IDE keyboard shortcuts for debugging and testing.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — running a debugging session
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section illustrates standard debugging sessions, and we will create a
    sample project to practice debugging on it:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Create a NetBeans PHP project. For our example, we name it `chapter4`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code in the `index.php` file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The previous code contains:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: A `$fruits` array containing fruit names.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A variable `$myfruit`, which contains a single fruit name as a string, initially
    with an empty string.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method `fruit_picker(),` which picks a fruit name from the `$fruits` array
    on a random basis and changes the value of `$myfruit`. Also, `$fruits` and `$myfruit`
    are defined as `Global` inside the function, so that the function can use and
    modify them within their global scope.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To test the debugging steps, we can set a breakpoint by pressing *Ctrl+F8* at
    the beginning of the PHP block, as shown in the following screenshot, or simply
    click on the line number of that line, to add the breakpoint:![Time for action
    — running a debugging session](graphics/5801_04_06.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To start the debugging session, press *Ctrl+F5*, or click on the **Debug Project
    (chapter4)** button from the **Debug** toolbar, or right-click on the project
    name and choose **Debug** in the projects window. The debugger will stop at the
    breakpoint. The browser opens in a page-loading mode with the project debug URL,
    which is `http://localhost/chapter4/index.php?XDEBUG_SESSION_START=netbeans-xdebug`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F7* three times to step into the third execution point from the breakpoint.
    The debugger stops at the line where the function `fruit_picker()` is called for
    the first time. The **Variables** window shows the variables `$fruits` and `$myfruit`
    with their values similar to the following screenshot:![Time for action — running
    a debugging session](graphics/5801_04_07.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At our code, you can see that the `fruit_picker()` function is going to be called
    three times consecutively.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: To step into the `fruit_picker()` function, press *F7*, and the debugger will
    start to execute the code inside `fruit_picker()`, as shown in the following screenshot:![Time
    for action — running a debugging session](graphics/5801_04_08.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F7* two times, and the `fruit_picker()` execution will end. Now, check
    the new value of `$myfruit` at the **Variables** window:![Time for action — running
    a debugging session](graphics/5801_04_09.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, press *F7* three times to step into the `fruit_picker()` function from
    the line where it has been called for the second time. As you have already verified
    that the function is working perfectly, you may want to cancel the function execution.
    To **Step Out** and return to the next line, press *Ctrl+F7*.![Time for action
    — running a debugging session](graphics/5801_04_10.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the value of `$myfruit` keeps changing, and you can hover on that
    variable to view it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: As you just checked and found that your code is working correctly, you can step
    over the current line by pressing *F8*.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you can go through the next lines by pressing *F7*, or step over by
    pressing *F8* and reach to the end. Again, press *Shift+F5* or click on the **Finish
    Debugger Session** button, if you wish to finish the session. At the end of the
    session, the browser displays the result (code output) of the session.![Time for
    action — running a debugging session](graphics/5801_04_11.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Practicing for the debugging session has been done, and hopefully we got a grip
    on debugging, using NetBeans. You can also add multiple breakpoints to follow
    up your program execution. So in this way, you can track all the variables, expressions,
    method calling sequences, program control jumping, and so on in your program.
    This is the process of finding what is going wrong inside the code. Mainly, you
    are now prepared to conquer some unwanted situations or bugs, while coding.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Adding Watches
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To observe an expression in your code execution, adding the watch expression
    can help you catch an error. Now, let's have some fun...
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding the expression to watch
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As an example, we want to test whether the same fruit name was picked again
    or not, by the `fruit_picker()` function. We may save the `$myfruit` value each
    time before a new random fruit name pick, and compare these two fruit names using
    an expression. So, let''s add the expression watcher by using the following steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `fruit_picker()` function as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We just added the line `$old_fruit = $myfruit;` to preserve the previous value
    of `$myfruit,` so that we can compare the previous pick in `$old_fruit` and the
    new pick in `$myfruit` at end of the function. We actually want to check if the
    same fruit was picked.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Select **Debug | New Watch** or press *Ctrl+Shift+F7*. The **New Watch** window
    is opened.![Time for action — adding the expression to watch](graphics/5801_04_12.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the following expression and click on **OK**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will observe this expression outcome at the closing brace (}) of the `fruit_picker()`
    function. If the expression yields (bool) 1 at the function closing brace, then
    we will know if the new picked fruit is the same as the old one, or the same fruit
    was picked again. The added watch expression can be found listed in both the **Watches**
    and **Variables** window.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Run the debugging session, as shown in the previous section. When the debugger
    stops at the closing brace of the `fruit_picker()` function, check that the expression
    value is (bool) `0` if the new pick is different from the old one, and the value
    is (bool) `1` if it's the same consecutive pick again.![Time for action — adding
    the expression to watch](graphics/5801_04_13.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this way, you can keep watching an expression to hunt for a bug.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding the watch expression to the debugging session was fun. You can add multiple
    watches to analyze some programming flaws. Simply, debugging enables you to look
    inside variables, functions, expressions, execution flows, and so on, so one can
    easily spot the bug and clean it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See *Appendix* for NetBeans IDE keyboard shortcuts for debugging and testing.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — debugging with XDebug
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of the following are XDebug features?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automatic stack trace upon error
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automatic bug fixing
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Function call logging
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enhanced `var_dump()`
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What will happen when a breakpoint occurs in NetBeans?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The IDE will jump over the breakpoint and display the result
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The IDE will stop code execution at that point, allowing you to see what is
    going on in the windows debugging
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The IDE will terminate the debugging session and reset the results of the windows
    being debugged
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of Watches?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying the time in NetBeans
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observing expressions in your code execution
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observing expression timings
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inspecting a debugging session
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查调试会话
- en: Have a go hero — exploring NetBeans debugging feature
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下——探索NetBeans调试功能
- en: In the **Debugging** window, enable the feature called **Show Requested URLs**.
    When it has been enabled, a new **Output** window will occur during debugging,
    and the currently processed URLs will be shown there. Also, enable another **Output**
    window called **PHP Debugger Console** to see the output for your debugged scripts
    in it. Remember to set `output_buffering = Off` in your `php.ini` file, to see
    it immediately.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在**调试**窗口中，启用名为**显示请求的URL**的功能。启用后，在调试期间将出现一个新的**输出**窗口，并显示当前处理的URL。还要启用另一个名为**PHP调试器控制台**的**输出**窗口，以查看其中调试脚本的输出。请记住在您的`php.ini`文件中设置`output_buffering
    = Off`，以立即看到它。
- en: Testing with PHPUnit
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHPUnit进行测试
- en: Source code testing is essential in the test-driven development approach. Testing
    depicts the way to check whether the code behaves as expected or not, with a set
    of runnable code fragments. Unit testing tests the correctness of parts (units)
    of the software, whose runnable code-fragments are called **Unit Tests**. NetBeans
    IDE supports automated unit tests using **PHPUnit** and the **Selenium** test
    framework.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码测试在测试驱动开发方法中是必不可少的。测试描述了检查代码是否按预期行为的方式，使用一组可运行的代码片段。单元测试测试软件部分（单元）的正确性，其可运行的代码片段称为单元测试。NetBeans
    IDE支持使用PHPUnit和Selenium测试框架进行自动化单元测试。
- en: Configuring PHPUnit
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置PHPUnit
- en: As we run XAMPP in the Windows box, it provides a built-in PHPUnit package.
    Note that if your project is running in PHP 5.3, then you should use PHPUnit 3.4.0
    or newer. In our case, the latest XAMPP 1.7.7 (with PHP 5.3.8) stack has PHPUnit
    2.3.6 installed inside it, which is not compatible with PHP 5.3\. You also need
    to upgrade the existing **PHP Extension and Application Repository** (**PEAR**)
    installation to install the latest PHPUnit and required PEAR packages as well.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows框中运行XAMPP时，它提供了一个内置的PHPUnit包。请注意，如果您的项目在PHP 5.3中运行，则应使用PHPUnit 3.4.0或更新版本。在我们的情况下，最新的XAMPP
    1.7.7（带有PHP 5.3.8）堆栈中安装了PHPUnit 2.3.6，这与PHP 5.3不兼容。您还需要升级现有的PHP扩展和应用程序存储库（PEAR）安装，以安装最新的PHPUnit和所需的PEAR包。
- en: 'To check the version of the installed PEAR, PHP, and Zend engine, browse to
    the PHP installation directory `D:\xampp\php` from the command prompt or Terminal,
    and enter the `pear version` command, which will give you the following output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查已安装的PEAR、PHP和Zend引擎的版本，请从命令提示符或终端中浏览PHP安装目录`D:\xampp\php`，并输入`pear version`命令，将得到以下输出：
- en: '[PRE10]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So it's time to install the latest PHPUnit. In order to do that, PEAR should
    be upgraded first.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在是安装最新的PHPUnit的时候了。为了做到这一点，首先应该升级PEAR。
- en: Time for action — installing PHPUnit via PEAR
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——通过PEAR安装PHPUnit
- en: 'In the following steps, we will upgrade PEAR and install PHPUnit via PEAR,
    for the corresponding environments:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将升级PEAR并通过PEAR在相应的环境中安装PHPUnit：
- en: 'Run the command prompt as an administrator, go to the PHP installation directory
    where the `pear.bat` file belongs (D:\xampp\php), and execute the following command:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份运行命令提示符，转到`pear.bat`文件所属的PHP安装目录（D:\xampp\php），并执行以下命令：
- en: '[PRE11]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This upgrades the existing PEAR installation. In Ubuntu or Mac OS X system,
    run the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这将升级现有的PEAR安装。在Ubuntu或Mac OS X系统中，运行以下命令：
- en: '[PRE12]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the case of MAMP, if you encounter the error sudo: pear: command not found,
    then refer to the section *Configuring MAMP* issues.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '在MAMP的情况下，如果遇到错误sudo: pear: command not found，则请参阅*配置MAMP*部分的问题。'
- en: 'To install the latest PHPUnit, type the following two commands:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装最新的PHPUnit，请输入以下两个命令：
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It discovers the download channels automatically and installs the latest PHPUnit
    along with the available packages.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 它会自动发现下载频道并安装最新的PHPUnit以及可用的包。
- en: 'To check the PHPUnit installation, run the following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查PHPUnit安装，请运行以下命令：
- en: '[PRE14]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will see a command similar to the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到类似以下的命令：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To list the remote packages for PHPUnit, run the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出PHPUnit的远程包，请运行以下命令：
- en: '[PRE16]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What just happened?
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have upgraded the PEAR installation using the `pear upgrade pear` command.
    We enabled the PEAR channel, auto discover configuration, and the latest PHPUnit
    has been installed using these automatic installation channels. Other PHP extensions
    can be installed easily from the extension repository in this way.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`pear upgrade pear`命令升级了PEAR安装。我们启用了PEAR频道、自动发现配置，并使用这些自动安装频道安装了最新的PHPUnit。其他PHP扩展可以通过这种方式轻松地从扩展存储库中安装。
- en: Again, if you have upgraded your PEAR installation and had enabled the auto
    discover feature earlier, then only the command `pear install pear.phpunit.de/PHPUnit`
    would have accomplished the PHPUnit installation.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，如果您已经升级了PEAR安装并且之前已启用了自动发现功能，那么只有`pear install pear.phpunit.de/PHPUnit`命令就可以完成PHPUnit的安装。
- en: Tip
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Run the command prompt as an administrator in Windows, to ease directory permissions.
    You may right-click on the program and select **Run as Administrator**.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中以管理员身份运行命令提示符，以便更轻松地处理目录权限。您可以右键单击程序并选择**以管理员身份运行**。
- en: Configuring MAMP issues
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置MAMP问题
- en: 'In the case of MAMP, while using PEAR commands from Terminal, if you encounter
    the error `pear: command not found`, then running `which php` will point us to
    the OS X''s default version.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '在使用MAMP时，如果在终端中使用PEAR命令时遇到错误`pear: command not found`，那么运行`which php`将指向OS
    X的默认版本。'
- en: '[PRE17]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You may then need to fix it. To rectify this, we need to add PHP's `bin` directory
    to our path. `PATH` is an environment variable that denotes which directories
    to look in for the commands. `PATH` can be modified by editing the `.profile`
    file under your `home` directory. We've used the `PHP5.3 bin` version path for
    this tutorial, but you can choose from whatever versions are available to you.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'From Terminal, run the following command to add the desired PHP''s `bin` directory,
    to use `php, pear`, and other relevant executable files from that directory:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, a line is added to the `.profile` file inside the user's `home`
    directory, which includes the `php5.3 bin` directory path to the environment variable
    `PATH`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, stop MAMP and change the files'' permissions with the following commands,
    to make those files executable:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `chmod` command changes the file mode or access control list. `774` means
    the file "owner" and "group" of the file users will be permitted to read, write,
    and execute the file. Everyone else will only be able to read it, but not write
    or execute the file.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'While writing, the latest MAMP 1.9 version comes with a corrupt `pear.conf`
    file for PHP versions. So, rename that file to prevent it from loading to the
    system, using the following command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Actually, inside the given `pear.conf` file, the PHP path strings contain `php5`
    instead of `php5.3` or `php5.2`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Now, start MAMP again and restart your Terminal session. Hence, MAMP issues
    are fixed, and you can test it by running `which php` or `which pear` commands
    from Terminal. In order to install PHPUnit using MAMP, you can now proceed with
    *step 1* of the *Time for action Installing PHPUnit via PEAR* section of this
    chapter.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Adding PHPUnit to NetBeans
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make PHPUnit the default unit tester with NetBeans IDE, select the **Tools
    | Options | PHP Tab | Unit Testing** tab, use **Search** to enter the PHPUnit
    `.bat` script path automatically in the **PHPUnit script** field, and click on
    **OK**.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding PHPUnit to NetBeans](graphics/5801_04_14.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: Again, for Mac OS X, the PHPUnit path will be similar to `/Applications/MAMP/bin/php5.3/bin/phpunit`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — PEAR
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What does PEAR stand for?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Extended Application Repository
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Extension and Application Repository
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Extension Community Library
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Extra Applicable Repository
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating and running PHPUnit tests
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn to create and run PHPUnit tests. NetBeans IDE
    can create test scripts and run PHPUnit tests on all PHP classes in a file. The
    IDE automates test script generation and the entire test process. To be sure that
    the test script generator will work, name the PHP file the same as the first class
    in the file.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — testing with PHPUnit
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this tutorial, we will create a new NetBeans project to test our PHP classes
    from the IDE using PHPUnit. In order to do this, follow the steps below:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project named `Calculator`, add a PHP class named `Calculator`
    in the project (right-click on project node and select **New | PHP Class**, then
    insert the class name), and type the following code for the `Calculator` class:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can see that the `add()` method simply performs the addition of two numbers
    and returns the sum. We will test this method unit, to see whether it is returning
    the correct sum or not.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a comment block with the `@assert` annotations and some sample input and
    output as shown in the following code. Note that one incorrect assertion is included
    in the following example:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the **Projects** window, right-click on the `Calculator.php` node and select
    **Tools | Create PHPUnit Tests**. Note that you can create tests for all the files
    in a project using the context menu in the **Source Files** node.![Time for action
    — testing with PHPUnit](graphics/5801_04_15.jpg)
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first time you create tests, a dialog box opens asking you for the directory
    in which you want to store test scripts. In this example, the **Browse** function
    (button) may be used to create a `tests` directory.![Time for action — testing
    with PHPUnit](graphics/5801_04_16.jpg)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We may keep the test files separate from the source folder. Also, if you wish
    to exclude those test scripts from future-source versioning, you may keep them
    separate.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: The IDE generates a test class in a file called `CalculatorTest.php`, which
    appears in your **Projects** window and opens in the editor.![Time for action
    — testing with PHPUnit](graphics/5801_04_17.jpg)
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that test methods have been created for each `@assert` annotation inside
    the class.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: To test the `Calculator.php` file, right-click on the file's node and select
    **Test**, or press *Ctrl+F6*. The IDE runs the tests and displays the results
    in the **Test Results** window.![Time for action — testing with PHPUnit](graphics/5801_04_18.jpg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, because of an incorrect input, one of the tests has failed.
    This is marked with a yellow exclamation sign in the **Test Results** window.
    Also, you can see the number of passed and failed tests. So, the overall passed
    tests percentage (denoted with a green bar) can be obtained.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can run the test for the whole project also. Right-click on the
    project's node and select **Test**, or press *Alt+F6*. Consider checking the **Output**
    window as well, for more verbose textual output.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP classes or projects can be tested in parts, using PHPUnit. The best part
    here is that you don't need to bother about generating test scripts and showing
    the test results in a graphical way, as IDE takes care of it. You can learn more
    about PHPUnit tests at [http://www.phpunit.de/manual/current/en/](http://www.phpunit.de/manual/current/en/).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Learn more examples of assertions at [http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions](http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with code coverage with PHPUnit
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NetBeans IDE provides a code coverage feature with the help of PHPUnit. Code
    coverage checks whether all your methods have been covered by PHPUnit tests. In
    this section, we will see how code coverage works with our existing `Calculator`
    class.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — using code coverage
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the steps below to see how the code coverage feature works in NetBeans:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Calculator.php`, add a duplicate `add` function, and name it `add2`.
    The `Calculator` class now looks similar to the following:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Right-click on the project node. From the **Context** menu, select **Code Coverage
    | Collect and Display Code Coverage**. By default, the **Show Editor Bar** is
    also selected.![Time for action — using code coverage](graphics/5801_04_19.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The editor now has a code coverage editor bar across the bottom. Since code
    coverage has not been tested, the editor bar reports `0.0%` coverage (it also
    displays such a percentage after you click on **Clear** to clear the test results).![Time
    for action — using code coverage](graphics/5801_04_20.jpg)
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Test** to test the opened file or **All Tests** to run all the tests
    for the project. The test results are displayed. In addition, the **Code Coverage**
    bar tells you what percentages of your total methods have been covered by tests.
    In the editor window, the covered code is highlighted in green, and the uncovered
    code is highlighted in red. Check out the following code coverage session:![Time
    for action — using code coverage](graphics/5801_04_21.jpg)
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Code Coverage** bar, click on **Report...**. The **Code Coverage**
    report opens, showing the results of all the tests that were run on your project.
    Buttons in the bar let you clear the results, run all the tests again, and deactivate
    code coverage (click on **Done)**.![Time for action — using code coverage](graphics/5801_04_22.jpg)
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, the `add2()` method hasn't been covered with the unit tests,
    so the report shows `50%` code coverage, otherwise it would have showed `100%`
    coverage.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have finished using the NetBeans code coverage feature with PHPUnit, so we
    can determine which units are not covered by PHPUnit tests. So, code coverage
    can be applied when you create PHPUnit tests for your code units and want to be
    assured that all units have been covered by tests. However, a maximum code coverage
    percentage is expected.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refactor test scripts when you refactor codes.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Testing using the Selenium framework
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium is a portable software-testing framework for web applications and automated
    browsers. Primarily, it is for automating web applications for testing purposes
    across many platforms. NetBeans IDE has a plugin that includes a Selenium server.
    With this plugin, you can run Selenium tests on PHP, web applications, or Maven
    projects. To run Selenium tests on PHP, you need to install the **Testing_Selenium**
    package to your PHP environment.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Installing Selenium
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we have upgraded PEAR and installed the latest PHPUnit, we should already
    have `Testing_Selenium-beta` installed along with them. To check the Selenium
    installation, run the following command from Terminal, and you will be able to
    view the installed version:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Otherwise, run the following command to have Selenium installed:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Time for action — running tests with Selenium
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s run tests with Selenium through the following steps:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: To install the plugin, open **Tools | Plugins**, and install **Selenium Module**
    for PHP.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Projects** window, right-click on the project node for your **Calculator**
    project. Select **New | Other**. The **New File** wizard is opened. Select **Selenium**
    and click on **Next**.![Time for action — running tests with Selenium](graphics/5801_04_23.jpg)
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first time you create a Selenium test, a dialog box opens, asking you to
    set a directory for the Selenium test files. This should be a separate directory
    from the PHPUnit test files; otherwise, the Selenium tests will run every time
    you run unit tests. Running functional tests, such as Selenium, usually takes
    more time than running unit tests. Therefore, you will probably not want to run
    these tests every time you run unit tests.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Accept the defaults in the **Name** and **Location** pages, and click on **Finish**.
    The new Selenium test file is opened in the editor and also appears in the **Projects**
    window.![Time for action — running tests with Selenium](graphics/5801_04_24.jpg)
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Run Selenium Tests** item is now added to the project's context menu.
    Click on this item, and the Selenium test results are displayed in the **Test
    Results** window, which is the same as the PHPUnit tests.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also modify the Selenium server's settings. The Selenium server is added
    as a new server in the **Services** tab.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just traded the testing using the Selenium testing framework for PHP applications.
    It provides testing support for developers over multiple OSes, browsers, and programming
    languages, and allows in recording, editing, and debugging tests. Simply, this
    is a complete testing solution for testers. You can evolve your test with your
    evolving code structure using Selenium. The software is based on the PHPUnit framework
    and inherits much of its functionality.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can learn more about Selenium testing from here: [http://seleniumhq.org/](http://seleniumhq.org/).'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — unit testing and code coverage
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is unit testing?
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the smallest testable parts of the code
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the individual methods of a class
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing, where you know the input, and what the output will be
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which assertion will fail the test of subtracting two numbers?
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@assert (0, 0) == 0`'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@assert (2, 3) == -1`'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@assert (4, 2) == 3`'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@assert (5, 1) == 4`'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If six tests were passed and four tests were failed while testing units in a
    class consisting of a single method, then what will be the code coverage percentage?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`60%`'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`50%`'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`100%`'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`40%`'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which is not a feature of test framework Selenium?
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automating browsers
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finding defects missed by manual testing
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observing an expression
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unlimited iterations of test case execution
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a go hero — learning test dependencies
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One unit test usually covers one function or method and can be dependent on
    other unit tests as well. Now, use the `@depends` annotation to express unit test
    dependencies and practice with the help of [http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.test-dependencies](http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.test-dependencies).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See *Appendix* for NetBeans IDE keyboard shortcuts for debugging and testing.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned to debug and test PHP applications using NetBeans.
    The IDE has been integrated in an effective way with those debugging and testing
    tools. Also, for automated tests, the generated scripts made the process hassle
    free and easy.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we have focused on:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: XDebug configuration on various OSes
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the debugging session with NetBeans and XDebug
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PHPUnit
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing using PHPUnit
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code coverage using PHPUnit and NetBeans
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Selenium test framework using NetBeans
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Life is now easier with debugging and testing tools. In the next chapter, we
    will emphasize source and API documentation to make our source code more understandable.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
