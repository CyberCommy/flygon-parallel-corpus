- en: Chapter 4. Debugging and Testing using NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If debugging is defined as the art of taking bugs out of a program, then programming
    must be putting them in.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to learn to debug and test PHP web applications
    using NetBeans IDE. We will deal with sample projects, to learn the process of
    bug hunting and testing. The following topics will be discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring XDebug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging the PHP source code with XDebug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with PHPUnit and Selenium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's go bug the hunter and do some real tricks...
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the ancient art of programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After writing a program, the next step is to test the program to find whether
    it is working as desired or not. Sometimes, when we run our code for the first
    time just after it has been written, it may produce errors, such as syntax errors,
    runtime errors, and logical errors. Debugging is the step-by-step process of finding
    errors, so that the errors can be fixed to make the program work in the way it
    was intended.
  prefs: []
  type: TYPE_NORMAL
- en: Modern editors can detect almost all syntax errors, and hence we can fix them
    while typing code. Also, there are tools that can be integrated with the IDE to
    find bugs, and they are known as debuggers. There are a number of good debuggers,
    such as XDebug and FirePHP (for FireBug fans), for PHP. Such debuggers come with
    an application profiler as well. In this chapter, we'll try XDebug for debugging
    PHP projects using NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging PHP source code with XDebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**XDebug** is highly configurable and adaptable to a variety of situations.
    You can inspect local variables, set watches, set breakpoints, and evaluate code,
    live. You can also navigate to declarations, types, and files using the **Go To**
    shortcuts and hypertext links. Use a global PHP `include` path for all projects
    or customize it per project.'
  prefs: []
  type: TYPE_NORMAL
- en: The NetBeans IDE for PHP also offers command-line debugging. The PHP program
    output appears in a command-line display in the IDE itself, and you can inspect
    the generated HTML without having to switch to a browser.
  prefs: []
  type: TYPE_NORMAL
- en: You can debug scripts and web pages either locally or remotely. The NetBeans
    PHP debugger integration allows you to map server paths to local paths, in order
    to enable remote debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'XDebug offers features such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic stack tracing upon an error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function call logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing the `var_dump()` output and code-coverage information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stack traces show you where errors occur, allowing you to trace function calls
    and the originating line numbers. The `var_dump()` output is displayed in a more
    elaborate way with XDebug.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: XDebug overrides PHP's default `var_dump()` function for displaying variable
    dumps. XDebug's version comprises different colors for different variable types,
    and places limits on the amount of array elements/object properties, maximum depth,
    and string lengths.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring XDebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring XDebug is pretty much easy on each separate operating system. In
    this section, let's configure XDebug with our development environment, which is
    XAMPP, LAMP, and MAMP. All you have to do is enable some lines at `php.ini` or
    press some commands. As we have already installed the development pack, we will
    just activate XDebug on those stacks. First of all, we will get the tool working
    on our localhost system, and then add it to NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — installing XDebug on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The XDebug extension comes with the XAMPP bundle, by default. You just have
    to enable it from the loaded `.ini` file. Note that there could be multiple `php.ini`
    files present, and the file location can be different between different operating
    systems. So, let's try it...
  prefs: []
  type: TYPE_NORMAL
- en: Locate the loaded `php.ini` file from your `phpinfo()`, by pointing your browser
    to [http://localhost/xampp/phpinfo.php](http://localhost/xampp/phpinfo.php).![Time
    for action — installing XDebug on Windows](graphics/5801_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can see the loaded `php.ini` file located at `D:\xampp\php\php.ini`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `php.ini` file located at `D:\xampp\php\php.ini`, and find the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Find and uncomment the following lines by removing the leading semicolon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save the `php.ini` file and restart your Apache web server from the XAMPP control
    panel, to enable the XDebug extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To verify whether the XDebug object is enabled or not, refresh your `phpinfo()`
    page and find XDebug enabled, as shown in the following screenshot:![Time for
    action — installing XDebug on Windows](graphics/5801_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have XDebug enabled, it will override `var_dump()` in PHP. You may dump
    a variable like `var_dump($var)` inside your code, and the browser will display
    the enhanced `var_dump` as follows (strings are printed in red):![Time for action
    — installing XDebug on Windows](graphics/5801_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bingo! You just loaded with XDebug in your development environment.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just enabled XDebug for our XAMPP bundle in Windows, and also verified
    the extension loaded with configurations. Note that such general steps to enable
    XDebug can be followed to enable other built-in extensions from `php.ini`. You
    just need to uncomment the extension at `php.ini` and restart your web server
    to make the change effective. Also, enabling XDebug in the LAMP or MAMP stack
    is pretty much similar.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always check the `phpinfo()` page for the loaded path of `php.ini`.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling XDebug on Ubuntu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enabling XDebug is quite easy in Ubuntu. We can install it via the **apt-get**
    package installer and update `xdebug.ini` for loaded configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — installing XDebug on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the console, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install XDebug using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Update `xdebug.ini` using the `gedit` (in-built) editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Change `xdebug.ini` so that it looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that the first line of these configurations may be available inside `xdebug.ini`,
    and you may have to add the remaining lines.
  prefs: []
  type: TYPE_NORMAL
- en: Restart Apache.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Refresh the `phpinfo()` page, and find the latest XDebug installed with the
    version number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just enabled XDebug for our LAMP in Ubuntu and also verified the extension
    loaded with configurations. Note that such general steps to enable XDebug can
    be followed to enable other built-in extensions from `php.ini`. You just need
    to uncomment the extension at `php.ini` and restart your web server to make the
    change effective.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling XDebug on Mac OS X
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modify the appropriate version of the loaded `php.ini` file to enable XDebug
    in Mac, uncomment the following lines, and restart the Apache server from the
    MAMP control panel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: XDebug is now running on your Mac OSX. MAMP Pro users can easily edit `php.ini`
    from the MAMP Pro control panel, by selecting **File | Edit template | PHP 5.3.2
    php.ini** from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have XDebug enabled in our local development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the PHP source with NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To proceed, we would like to check the required debugging settings for NetBeans.
    Select the **Tools | Options | PHP | Debugging** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging the PHP source with NetBeans](graphics/5801_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this window, uncheck the **Stop at First Line** checkbox, because we want
    to stop at our desired line and check the **Watches and Balloon Evaluation** checkbox.
    This option enables you to watch custom expressions or variables while debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s have a look into a debugging session running in the NetBeans window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging the PHP source with NetBeans](graphics/5801_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this screenshot, the debug toolbar and button are indicated by functional
    names.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Learn more about the debugging toolbar from [http://netbeans.org/kb/docs/php/debugging.html#work](http://netbeans.org/kb/docs/php/debugging.html#work).
  prefs: []
  type: TYPE_NORMAL
- en: The debugger windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you start a debugging session, a set of debugger windows open below the
    main editor window. To add a new window, select **Window | Debugging**. The following
    windows are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Local Variables** shows a list of initialized variables, their types, and
    values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Watches** shows a list of user-defined expressions with their values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Calls Stack** shows a list of called functions in reverse order; the function
    called last is at the top of the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Breakpoints** shows a list of files and numbers of the lines where breakpoints
    are set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sessions** shows a list of currently active debugging sessions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Threads** window indicates which PHP script is currently active and whether
    it is suspended at a breakpoint or running. If the script is running, you need
    to go to the browser window and interact with the script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Sources** window displays all the files and scripts loaded for the debugging
    session. The Sources window does not currently function for PHP projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic debugging workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the basic debugging workflows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user sets a breakpoint at the line where the PHP source code execution should
    be paused.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When that line is reached, the user executes the script one line after another,
    by pressing the *F7* and *F8* buttons, and checks the values of the variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See *Appendix* for NetBeans IDE keyboard shortcuts for debugging and testing.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — running a debugging session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section illustrates standard debugging sessions, and we will create a
    sample project to practice debugging on it:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a NetBeans PHP project. For our example, we name it `chapter4`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code in the `index.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code contains:'
  prefs: []
  type: TYPE_NORMAL
- en: A `$fruits` array containing fruit names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A variable `$myfruit`, which contains a single fruit name as a string, initially
    with an empty string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method `fruit_picker(),` which picks a fruit name from the `$fruits` array
    on a random basis and changes the value of `$myfruit`. Also, `$fruits` and `$myfruit`
    are defined as `Global` inside the function, so that the function can use and
    modify them within their global scope.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To test the debugging steps, we can set a breakpoint by pressing *Ctrl+F8* at
    the beginning of the PHP block, as shown in the following screenshot, or simply
    click on the line number of that line, to add the breakpoint:![Time for action
    — running a debugging session](graphics/5801_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To start the debugging session, press *Ctrl+F5*, or click on the **Debug Project
    (chapter4)** button from the **Debug** toolbar, or right-click on the project
    name and choose **Debug** in the projects window. The debugger will stop at the
    breakpoint. The browser opens in a page-loading mode with the project debug URL,
    which is `http://localhost/chapter4/index.php?XDEBUG_SESSION_START=netbeans-xdebug`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F7* three times to step into the third execution point from the breakpoint.
    The debugger stops at the line where the function `fruit_picker()` is called for
    the first time. The **Variables** window shows the variables `$fruits` and `$myfruit`
    with their values similar to the following screenshot:![Time for action — running
    a debugging session](graphics/5801_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At our code, you can see that the `fruit_picker()` function is going to be called
    three times consecutively.
  prefs: []
  type: TYPE_NORMAL
- en: To step into the `fruit_picker()` function, press *F7*, and the debugger will
    start to execute the code inside `fruit_picker()`, as shown in the following screenshot:![Time
    for action — running a debugging session](graphics/5801_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F7* two times, and the `fruit_picker()` execution will end. Now, check
    the new value of `$myfruit` at the **Variables** window:![Time for action — running
    a debugging session](graphics/5801_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, press *F7* three times to step into the `fruit_picker()` function from
    the line where it has been called for the second time. As you have already verified
    that the function is working perfectly, you may want to cancel the function execution.
    To **Step Out** and return to the next line, press *Ctrl+F7*.![Time for action
    — running a debugging session](graphics/5801_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the value of `$myfruit` keeps changing, and you can hover on that
    variable to view it.
  prefs: []
  type: TYPE_NORMAL
- en: As you just checked and found that your code is working correctly, you can step
    over the current line by pressing *F8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you can go through the next lines by pressing *F7*, or step over by
    pressing *F8* and reach to the end. Again, press *Shift+F5* or click on the **Finish
    Debugger Session** button, if you wish to finish the session. At the end of the
    session, the browser displays the result (code output) of the session.![Time for
    action — running a debugging session](graphics/5801_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Practicing for the debugging session has been done, and hopefully we got a grip
    on debugging, using NetBeans. You can also add multiple breakpoints to follow
    up your program execution. So in this way, you can track all the variables, expressions,
    method calling sequences, program control jumping, and so on in your program.
    This is the process of finding what is going wrong inside the code. Mainly, you
    are now prepared to conquer some unwanted situations or bugs, while coding.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Watches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To observe an expression in your code execution, adding the watch expression
    can help you catch an error. Now, let's have some fun...
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding the expression to watch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As an example, we want to test whether the same fruit name was picked again
    or not, by the `fruit_picker()` function. We may save the `$myfruit` value each
    time before a new random fruit name pick, and compare these two fruit names using
    an expression. So, let''s add the expression watcher by using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `fruit_picker()` function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We just added the line `$old_fruit = $myfruit;` to preserve the previous value
    of `$myfruit,` so that we can compare the previous pick in `$old_fruit` and the
    new pick in `$myfruit` at end of the function. We actually want to check if the
    same fruit was picked.
  prefs: []
  type: TYPE_NORMAL
- en: Select **Debug | New Watch** or press *Ctrl+Shift+F7*. The **New Watch** window
    is opened.![Time for action — adding the expression to watch](graphics/5801_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the following expression and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We will observe this expression outcome at the closing brace (}) of the `fruit_picker()`
    function. If the expression yields (bool) 1 at the function closing brace, then
    we will know if the new picked fruit is the same as the old one, or the same fruit
    was picked again. The added watch expression can be found listed in both the **Watches**
    and **Variables** window.
  prefs: []
  type: TYPE_NORMAL
- en: Run the debugging session, as shown in the previous section. When the debugger
    stops at the closing brace of the `fruit_picker()` function, check that the expression
    value is (bool) `0` if the new pick is different from the old one, and the value
    is (bool) `1` if it's the same consecutive pick again.![Time for action — adding
    the expression to watch](graphics/5801_04_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this way, you can keep watching an expression to hunt for a bug.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding the watch expression to the debugging session was fun. You can add multiple
    watches to analyze some programming flaws. Simply, debugging enables you to look
    inside variables, functions, expressions, execution flows, and so on, so one can
    easily spot the bug and clean it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See *Appendix* for NetBeans IDE keyboard shortcuts for debugging and testing.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — debugging with XDebug
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which of the following are XDebug features?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automatic stack trace upon error
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automatic bug fixing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Function call logging
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enhanced `var_dump()`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What will happen when a breakpoint occurs in NetBeans?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The IDE will jump over the breakpoint and display the result
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The IDE will stop code execution at that point, allowing you to see what is
    going on in the windows debugging
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The IDE will terminate the debugging session and reset the results of the windows
    being debugged
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of Watches?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying the time in NetBeans
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observing expressions in your code execution
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observing expression timings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inspecting a debugging session
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a go hero — exploring NetBeans debugging feature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the **Debugging** window, enable the feature called **Show Requested URLs**.
    When it has been enabled, a new **Output** window will occur during debugging,
    and the currently processed URLs will be shown there. Also, enable another **Output**
    window called **PHP Debugger Console** to see the output for your debugged scripts
    in it. Remember to set `output_buffering = Off` in your `php.ini` file, to see
    it immediately.
  prefs: []
  type: TYPE_NORMAL
- en: Testing with PHPUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Source code testing is essential in the test-driven development approach. Testing
    depicts the way to check whether the code behaves as expected or not, with a set
    of runnable code fragments. Unit testing tests the correctness of parts (units)
    of the software, whose runnable code-fragments are called **Unit Tests**. NetBeans
    IDE supports automated unit tests using **PHPUnit** and the **Selenium** test
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring PHPUnit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we run XAMPP in the Windows box, it provides a built-in PHPUnit package.
    Note that if your project is running in PHP 5.3, then you should use PHPUnit 3.4.0
    or newer. In our case, the latest XAMPP 1.7.7 (with PHP 5.3.8) stack has PHPUnit
    2.3.6 installed inside it, which is not compatible with PHP 5.3\. You also need
    to upgrade the existing **PHP Extension and Application Repository** (**PEAR**)
    installation to install the latest PHPUnit and required PEAR packages as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the version of the installed PEAR, PHP, and Zend engine, browse to
    the PHP installation directory `D:\xampp\php` from the command prompt or Terminal,
    and enter the `pear version` command, which will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: So it's time to install the latest PHPUnit. In order to do that, PEAR should
    be upgraded first.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — installing PHPUnit via PEAR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we will upgrade PEAR and install PHPUnit via PEAR,
    for the corresponding environments:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the command prompt as an administrator, go to the PHP installation directory
    where the `pear.bat` file belongs (D:\xampp\php), and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This upgrades the existing PEAR installation. In Ubuntu or Mac OS X system,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of MAMP, if you encounter the error sudo: pear: command not found,
    then refer to the section *Configuring MAMP* issues.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the latest PHPUnit, type the following two commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: It discovers the download channels automatically and installs the latest PHPUnit
    along with the available packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the PHPUnit installation, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see a command similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To list the remote packages for PHPUnit, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have upgraded the PEAR installation using the `pear upgrade pear` command.
    We enabled the PEAR channel, auto discover configuration, and the latest PHPUnit
    has been installed using these automatic installation channels. Other PHP extensions
    can be installed easily from the extension repository in this way.
  prefs: []
  type: TYPE_NORMAL
- en: Again, if you have upgraded your PEAR installation and had enabled the auto
    discover feature earlier, then only the command `pear install pear.phpunit.de/PHPUnit`
    would have accomplished the PHPUnit installation.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the command prompt as an administrator in Windows, to ease directory permissions.
    You may right-click on the program and select **Run as Administrator**.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring MAMP issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the case of MAMP, while using PEAR commands from Terminal, if you encounter
    the error `pear: command not found`, then running `which php` will point us to
    the OS X''s default version.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You may then need to fix it. To rectify this, we need to add PHP's `bin` directory
    to our path. `PATH` is an environment variable that denotes which directories
    to look in for the commands. `PATH` can be modified by editing the `.profile`
    file under your `home` directory. We've used the `PHP5.3 bin` version path for
    this tutorial, but you can choose from whatever versions are available to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'From Terminal, run the following command to add the desired PHP''s `bin` directory,
    to use `php, pear`, and other relevant executable files from that directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, a line is added to the `.profile` file inside the user's `home`
    directory, which includes the `php5.3 bin` directory path to the environment variable
    `PATH`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, stop MAMP and change the files'' permissions with the following commands,
    to make those files executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `chmod` command changes the file mode or access control list. `774` means
    the file "owner" and "group" of the file users will be permitted to read, write,
    and execute the file. Everyone else will only be able to read it, but not write
    or execute the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'While writing, the latest MAMP 1.9 version comes with a corrupt `pear.conf`
    file for PHP versions. So, rename that file to prevent it from loading to the
    system, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Actually, inside the given `pear.conf` file, the PHP path strings contain `php5`
    instead of `php5.3` or `php5.2`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, start MAMP again and restart your Terminal session. Hence, MAMP issues
    are fixed, and you can test it by running `which php` or `which pear` commands
    from Terminal. In order to install PHPUnit using MAMP, you can now proceed with
    *step 1* of the *Time for action Installing PHPUnit via PEAR* section of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding PHPUnit to NetBeans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make PHPUnit the default unit tester with NetBeans IDE, select the **Tools
    | Options | PHP Tab | Unit Testing** tab, use **Search** to enter the PHPUnit
    `.bat` script path automatically in the **PHPUnit script** field, and click on
    **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding PHPUnit to NetBeans](graphics/5801_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, for Mac OS X, the PHPUnit path will be similar to `/Applications/MAMP/bin/php5.3/bin/phpunit`.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — PEAR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What does PEAR stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Extended Application Repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Extension and Application Repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Extension Community Library
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Extra Applicable Repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating and running PHPUnit tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn to create and run PHPUnit tests. NetBeans IDE
    can create test scripts and run PHPUnit tests on all PHP classes in a file. The
    IDE automates test script generation and the entire test process. To be sure that
    the test script generator will work, name the PHP file the same as the first class
    in the file.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — testing with PHPUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this tutorial, we will create a new NetBeans project to test our PHP classes
    from the IDE using PHPUnit. In order to do this, follow the steps below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project named `Calculator`, add a PHP class named `Calculator`
    in the project (right-click on project node and select **New | PHP Class**, then
    insert the class name), and type the following code for the `Calculator` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the `add()` method simply performs the addition of two numbers
    and returns the sum. We will test this method unit, to see whether it is returning
    the correct sum or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a comment block with the `@assert` annotations and some sample input and
    output as shown in the following code. Note that one incorrect assertion is included
    in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the **Projects** window, right-click on the `Calculator.php` node and select
    **Tools | Create PHPUnit Tests**. Note that you can create tests for all the files
    in a project using the context menu in the **Source Files** node.![Time for action
    — testing with PHPUnit](graphics/5801_04_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first time you create tests, a dialog box opens asking you for the directory
    in which you want to store test scripts. In this example, the **Browse** function
    (button) may be used to create a `tests` directory.![Time for action — testing
    with PHPUnit](graphics/5801_04_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We may keep the test files separate from the source folder. Also, if you wish
    to exclude those test scripts from future-source versioning, you may keep them
    separate.
  prefs: []
  type: TYPE_NORMAL
- en: The IDE generates a test class in a file called `CalculatorTest.php`, which
    appears in your **Projects** window and opens in the editor.![Time for action
    — testing with PHPUnit](graphics/5801_04_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that test methods have been created for each `@assert` annotation inside
    the class.
  prefs: []
  type: TYPE_NORMAL
- en: To test the `Calculator.php` file, right-click on the file's node and select
    **Test**, or press *Ctrl+F6*. The IDE runs the tests and displays the results
    in the **Test Results** window.![Time for action — testing with PHPUnit](graphics/5801_04_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, because of an incorrect input, one of the tests has failed.
    This is marked with a yellow exclamation sign in the **Test Results** window.
    Also, you can see the number of passed and failed tests. So, the overall passed
    tests percentage (denoted with a green bar) can be obtained.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can run the test for the whole project also. Right-click on the
    project's node and select **Test**, or press *Alt+F6*. Consider checking the **Output**
    window as well, for more verbose textual output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP classes or projects can be tested in parts, using PHPUnit. The best part
    here is that you don't need to bother about generating test scripts and showing
    the test results in a graphical way, as IDE takes care of it. You can learn more
    about PHPUnit tests at [http://www.phpunit.de/manual/current/en/](http://www.phpunit.de/manual/current/en/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Learn more examples of assertions at [http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions](http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions).
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with code coverage with PHPUnit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NetBeans IDE provides a code coverage feature with the help of PHPUnit. Code
    coverage checks whether all your methods have been covered by PHPUnit tests. In
    this section, we will see how code coverage works with our existing `Calculator`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — using code coverage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the steps below to see how the code coverage feature works in NetBeans:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Calculator.php`, add a duplicate `add` function, and name it `add2`.
    The `Calculator` class now looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Right-click on the project node. From the **Context** menu, select **Code Coverage
    | Collect and Display Code Coverage**. By default, the **Show Editor Bar** is
    also selected.![Time for action — using code coverage](graphics/5801_04_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The editor now has a code coverage editor bar across the bottom. Since code
    coverage has not been tested, the editor bar reports `0.0%` coverage (it also
    displays such a percentage after you click on **Clear** to clear the test results).![Time
    for action — using code coverage](graphics/5801_04_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Test** to test the opened file or **All Tests** to run all the tests
    for the project. The test results are displayed. In addition, the **Code Coverage**
    bar tells you what percentages of your total methods have been covered by tests.
    In the editor window, the covered code is highlighted in green, and the uncovered
    code is highlighted in red. Check out the following code coverage session:![Time
    for action — using code coverage](graphics/5801_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Code Coverage** bar, click on **Report...**. The **Code Coverage**
    report opens, showing the results of all the tests that were run on your project.
    Buttons in the bar let you clear the results, run all the tests again, and deactivate
    code coverage (click on **Done)**.![Time for action — using code coverage](graphics/5801_04_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, the `add2()` method hasn't been covered with the unit tests,
    so the report shows `50%` code coverage, otherwise it would have showed `100%`
    coverage.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have finished using the NetBeans code coverage feature with PHPUnit, so we
    can determine which units are not covered by PHPUnit tests. So, code coverage
    can be applied when you create PHPUnit tests for your code units and want to be
    assured that all units have been covered by tests. However, a maximum code coverage
    percentage is expected.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refactor test scripts when you refactor codes.
  prefs: []
  type: TYPE_NORMAL
- en: Testing using the Selenium framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium is a portable software-testing framework for web applications and automated
    browsers. Primarily, it is for automating web applications for testing purposes
    across many platforms. NetBeans IDE has a plugin that includes a Selenium server.
    With this plugin, you can run Selenium tests on PHP, web applications, or Maven
    projects. To run Selenium tests on PHP, you need to install the **Testing_Selenium**
    package to your PHP environment.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Selenium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we have upgraded PEAR and installed the latest PHPUnit, we should already
    have `Testing_Selenium-beta` installed along with them. To check the Selenium
    installation, run the following command from Terminal, and you will be able to
    view the installed version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, run the following command to have Selenium installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Time for action — running tests with Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s run tests with Selenium through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To install the plugin, open **Tools | Plugins**, and install **Selenium Module**
    for PHP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Projects** window, right-click on the project node for your **Calculator**
    project. Select **New | Other**. The **New File** wizard is opened. Select **Selenium**
    and click on **Next**.![Time for action — running tests with Selenium](graphics/5801_04_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first time you create a Selenium test, a dialog box opens, asking you to
    set a directory for the Selenium test files. This should be a separate directory
    from the PHPUnit test files; otherwise, the Selenium tests will run every time
    you run unit tests. Running functional tests, such as Selenium, usually takes
    more time than running unit tests. Therefore, you will probably not want to run
    these tests every time you run unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Accept the defaults in the **Name** and **Location** pages, and click on **Finish**.
    The new Selenium test file is opened in the editor and also appears in the **Projects**
    window.![Time for action — running tests with Selenium](graphics/5801_04_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Run Selenium Tests** item is now added to the project's context menu.
    Click on this item, and the Selenium test results are displayed in the **Test
    Results** window, which is the same as the PHPUnit tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also modify the Selenium server's settings. The Selenium server is added
    as a new server in the **Services** tab.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just traded the testing using the Selenium testing framework for PHP applications.
    It provides testing support for developers over multiple OSes, browsers, and programming
    languages, and allows in recording, editing, and debugging tests. Simply, this
    is a complete testing solution for testers. You can evolve your test with your
    evolving code structure using Selenium. The software is based on the PHPUnit framework
    and inherits much of its functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can learn more about Selenium testing from here: [http://seleniumhq.org/](http://seleniumhq.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz — unit testing and code coverage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is unit testing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the smallest testable parts of the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the individual methods of a class
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing, where you know the input, and what the output will be
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which assertion will fail the test of subtracting two numbers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@assert (0, 0) == 0`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@assert (2, 3) == -1`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@assert (4, 2) == 3`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@assert (5, 1) == 4`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If six tests were passed and four tests were failed while testing units in a
    class consisting of a single method, then what will be the code coverage percentage?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`60%`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`50%`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`100%`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`40%`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which is not a feature of test framework Selenium?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automating browsers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finding defects missed by manual testing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observing an expression
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unlimited iterations of test case execution
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a go hero — learning test dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One unit test usually covers one function or method and can be dependent on
    other unit tests as well. Now, use the `@depends` annotation to express unit test
    dependencies and practice with the help of [http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.test-dependencies](http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.test-dependencies).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See *Appendix* for NetBeans IDE keyboard shortcuts for debugging and testing.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned to debug and test PHP applications using NetBeans.
    The IDE has been integrated in an effective way with those debugging and testing
    tools. Also, for automated tests, the generated scripts made the process hassle
    free and easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we have focused on:'
  prefs: []
  type: TYPE_NORMAL
- en: XDebug configuration on various OSes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the debugging session with NetBeans and XDebug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PHPUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing using PHPUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code coverage using PHPUnit and NetBeans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Selenium test framework using NetBeans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Life is now easier with debugging and testing tools. In the next chapter, we
    will emphasize source and API documentation to make our source code more understandable.
  prefs: []
  type: TYPE_NORMAL
