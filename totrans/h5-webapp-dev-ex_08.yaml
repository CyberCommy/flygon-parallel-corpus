- en: Chapter 8. A Change in the Weather
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Climate is what we expect, weather is what we get."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: – Mark Twain
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In this chapter, we will build a weather widget to learn about using Ajax
    to load content asynchronously and communicate with web services. We will learn
    about Ajax and how to use jQuery''s Ajax methods to load files that contain XML
    or JSON formatted data. Then we will get the weather conditions from a web service
    to display in the widget. We will also use the HTML Geolocation API to find the
    user''s location so we can show their local weather.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will learn the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to get XML and JSON data using jQuery' Ajax methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing JSON versus XML returned from services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What web services are and how to communicate with them asynchronously using
    Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The problem with cross site scripting, and the solution JSONP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use HTML5 Geolocation API to get the user's location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to connect to a web service to get the current weather report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ajax is a technology used by JavaScript to send data to, and receive data from,
    a server. Originally **Ajax** stood for **Asynchronous JavaScript and XML**, but
    now this meaning has been lost as JSON (which we learned about in [Chapter 1](ch01.html
    "Chapter 1. The Task at Hand"), *The Task at Hand*) has begun to replace XML as
    the preferred format for packaging data, and Ajax requests do not need to be asynchronous.
  prefs: []
  type: TYPE_NORMAL
- en: Using Ajax will make your applications more dynamic and responsive. Rather than
    having postbacks whenever you need to update a part of a web page, you can load
    only the necessary data and update the page dynamically. With Ajax we can retrieve
    almost anything from the server, including HTML snippets to be inserted into the
    web page and static data to be used by the application. We can also call web services
    that provide access to things such as data and services that are only available
    on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Making Ajax requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jQuery provides methods that make it easy to access web resources and call web
    services using Ajax. The `ajax()` method is the most primitive of them. If you
    want to have the most control over service calls you can use this method. Most
    of the time it is preferable to use one of the higher level methods such as `get()`
    or `post()`.
  prefs: []
  type: TYPE_NORMAL
- en: The `get()` method makes it easier to do an HTTP GET request using Ajax. At
    its simplest, you pass in the URL of the resource or service you want to get and
    it asynchronously sends the request and gets the response. When it's done it executes
    a callback function that you provide.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code snippet makes a GET request for an XML file
    on the server, and displays its contents in a dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the jQuery Ajax methods return an object that you can attach `done()`,
    `fail()`, and `always()` callback methods to. The `done()` method gets called
    after the request is successful, `fail()` gets called if there was an error, and
    `always()` gets called last whether the request succeeded or failed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The data that gets passed to the `done()` method will be either an XML root
    element, a JSON object, or a string depending on the MIME type specified in the
    response. If it's a JSON object, you can reference the data as you would any JavaScript
    object. If it's an XML element you can use jQuery to traverse the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may provide query parameters to the request by passing in an object literal
    of name/value pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will make the following request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `post()` method if you prefer to make a POST request rather than GET,
    which may be preferable if you are using a secure protocol such as HTTPS, and
    don''t want the query parameters visible on the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some browsers, including Chrome, you can't access files with Ajax requests
    using the `file://` protocol. In that case you will need to run your application
    through a web server such as IIS or Apache, or use a different browser.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a weather widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this chapter we will demonstrate how to make various Ajax calls
    by implementing a widget that shows a weather report. Let''s start by defining
    the widget''s HTML markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The widget consists of three different panels, only one of which will show at
    any given time. The `<div class="loading">` panel will be visible while the weather
    data is being retrieved from the server. It has an animated image in it to indicate
    to the user that something is loading.
  prefs: []
  type: TYPE_NORMAL
- en: The `<div class="results">` panel will show the weather data that was returned
    from the server. It contains placeholder fields for us to put the weather data
    into. Notice that we are using custom data attributes on the placeholder `<span>`
    elements. Those will be used later to extract the correct data from the XML document
    or JSON object returned by the server.
  prefs: []
  type: TYPE_NORMAL
- en: The `<div class="error">` panel will show an error message if the Ajax request
    failed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create the JavaScript code to control the widget in a new file named
    `weatherWidget.js`. We will create a `WeatherWidget` object whose constructor
    takes a reference to the widget''s root element wrapped in a jQuery object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In our object we create one public method called `update()`. This will be called
    from the page to tell the widget to update the weather report. In the `update()`
    method we first hide the results panel and show the loading panel. Then we call
    the `getWeatherReport()` method, which will make the Ajax call and update the
    widget when it is finished. We will write different versions of this method in
    the next few sections.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a weather widget that can be placed on any page in a website. It
    has a public `update()` method that is called to tell the widget to update its
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – getting XML data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First let's create an example of getting data from an XML file and updating
    the weather widget from its data. We will create a new web page called `weather.html`
    and put the markup for the weather widget into it. This page will have a **Check
    Weather** button. When clicked, it will call the weather widget's `update()` method.
    You can find the code for this example in `Chapter 8/example8.1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we need to create an XML file with some weather information in it. We
    will name the file `weather.xml` and place it in the `data` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s write the `getWeatherReport()` method in the `WeatherWidget` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this method we use the jQuery `get()` method to perform the Ajax request
    and pass it the path to our XML file. If the server call is successful we call
    the `populateWeather()` method, passing it the data returned from the request.
    This will be the root element of a DOM that represents our XML file. If the request
    fails we call the `showError()` method, passing it the error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next let''s write the `populateWeather()` method. This is where we will extract
    the data from the XML document and insert it into the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We need a way to extract data from the XML document retrieved from the server.
    Fortunately for us, jQuery can be used to select elements from any XML document,
    not just the web page's DOM. All we have to do is pass in the root element or
    our XML as the second parameter to a jQuery select. This is exactly what we do
    in the first line of the method to get the `current_observation` element and store
    it in the `$observation` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Next we use jQuery to get the text from the `icon_url` element, and set the
    image's `src` attribute to it. This is an image that represents the current weather.
    We also get the text from the `location element` and insert that into the widget's
    header.
  prefs: []
  type: TYPE_NORMAL
- en: Then we iterate over all of the `<span>` elements in the conditions section
    of the widget. For each one we get the value of its `data-field` custom data attribute.
    We use that to find the element with the same name inside the `current_observation`
    element, get its text, and put it into the `<span>` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing we do is fade out the loading panel and fade in the results
    panel, to show the current weather on the page. Here''s what it looks like with
    the data loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – getting XML data](img/5947OT_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We loaded an XML file from the server that contains weather data using jQuery's
    `get()` Ajax method. Then, we extracted the information from the XML document
    using jQuery selects and put it into the widget's placeholder elements to show
    it on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – getting JSON data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's do the same thing as we did in the previous section, except that we
    will get the data from a file containing JSON formatted data rather than XML.
    The concept is the same, except that what we get back from the Ajax call is a
    JavaScript object rather than an XML document. You can find the code for this
    example in `Chapter 8/example8.2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First let''s define our JSON file, which we will name `weather.json`, and put
    it in the `data` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This JSON defines an anonymous wrapping object with a `location` object and
    a `current_observation` object inside of it. The `current_observation` object
    contains all of the data that the `current_observation` element had in the XML
    document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s rewrite `getWeatherReport()` to get the JSON data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We still use the `get()` method, but now we are getting the JSON file. Notice
    how this time we are adding a query parameter to the URL set to the current time
    in milliseconds. This is a way to get around the browser's caching. Most browsers
    don't seem to recognize when files have changed using Ajax requests. By adding
    a parameter that changes every time we make the request, it fools the browser
    into thinking it's a new request, bypassing the cached one. The request will look
    something like `data/weather.json?t=1365127077960`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When running this application through a web server such as IIS, you may need
    to add the `.json` file type to the list of MIME types for your site (`.json`,
    `application/json`). Otherwise you will get an error that the file is not found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s rewrite the `populateWeather()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This time jQuery recognizes that we have loaded data in JSON format, and automatically
    converts it to a JavaScript object. So that's what gets passed into the method's
    `data` parameter. To get the observation data we can now simply access the `current_observation`
    field of the `data` object.
  prefs: []
  type: TYPE_NORMAL
- en: Just like before, we iterate over all of the `<span>` placeholder elements,
    but this time we use square brackets to access the data from the `observation`
    object using the `field` custom data attribute as the field name.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We rewrote the weather widget to get the weather data from a JSON formatted
    file. Since jQuery automatically converts JSON data into JavaScript objects, we
    were able to directly access the data rather than use jQuery to search through
    an XML document.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 Geolocation API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Later we will rewrite the weather widget once again to get the weather from
    a web service instead of a static file on the server. We want to show the user
    the weather for their current location, so we need some way to determine where
    the user is. HTML5 has just the thing for that: the Geolocation API.'
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation is widely supported by nearly every modern browser. The accuracy
    of the location depends on the capabilities of the user's device. Devices that
    have GPS will give you a very accurate location, while those that don't will try
    to determine the user's location as close as they can by some other means, such
    as by IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Geolocation API is accessed by using the `navigator.geolocation` object.
    To get the user''s location you call the `getCurrentPosition()` method. It takes
    two parameters- a callback function if it succeeds and a callback function if
    it fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The function that is called on success gets an object passed into it that contains
    another object named `coords`. The following is a list of some of the more useful
    fields the `coords` object contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`latitude`: This is the user''s latitude in decimal degrees (for example, 44.6770429).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`longitude`: This is the user''s longitude in decimal degrees (for example,
    -85.60261659).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accuracy`: This is the accuracy of the position in meters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speed`: This is the speed the user is moving in meters per second. This is
    available for devices with GPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`heading`: This is the heading degrees that the user is moving in. Like speed
    this is for devices with GPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if you wanted to get the user''s location you would do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The user must allow your page to use the Geolocation API. If they reject your
    request, the call to `getCurrentPosition()` will fail, and depending on the browser
    your error handler may get called or fail silently. This is what the request looks
    like in Chrome:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML5 Geolocation API](img/5947OT_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The error handler gets passed an error object that contains two fields, `code`
    and `message`. The `code` field is an integer error code and `message` is the
    error message string. There are three possible error codes: `permission denied`,
    `position unavailable`, or `timeout`.'
  prefs: []
  type: TYPE_NORMAL
- en: The Geolocation API also has a `watchPosition()` method. It works the same as
    `getCurrentPosition()`, except that your callback function gets called whenever
    the user moves. This way you can track the user and update their position in your
    application in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some browsers you must be running the web page through a web server such
    as IIS or Apache for geolocation to work.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – getting geolocation data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will add some code to our weather widget example to access
    the Geolocation API. You can find the code for this section in `chapter8/example8.3`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First let''s go into `weather.html` and add a section to show the user''s location
    next to the **Check Weather** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We add a `<div>` element with text fields to show the user's latitude and longitude
    that we got from the Geolocation API. We also add a `<div class="error">` element
    to show the error message if geolocation fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s go into `weather.js` and add some code to the `WeatherApp` object.
    We will add a `getLocation()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'First we check that the Geolocation API is available by checking that the `geolocation`
    object exists in the `navigation` object. Then we call `geolocation.getCurrentPosition()`.
    The callback function takes the `position` object and gets the latitude and longitude
    from its `coords` object. It then sets the latitude and longitude into the text
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – getting geolocation data](img/5947OT_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the geolocation request failed for some reason, we get the error message
    from the error object and show it on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – getting geolocation data](img/5947OT_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the Geolocation API to get the user's position. We extracted the latitude
    and longitude and displayed them in text fields on the page. We will pass this
    into the weather service to get the weather for their location.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a web application that tracks the user's position using the Geolocation
    API. When the user's location changes, use Ajax to call the Google Static Maps
    API to get a map of the user's current position and update an image on the page.
    Open the application in your smart phone and drive around to see if it works.
    You can find the documentation for Google's Static Maps API at [https://developers.google.com/maps/documentation/staticmaps/](https://developers.google.com/maps/documentation/staticmaps/).
  prefs: []
  type: TYPE_NORMAL
- en: Using web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web services are an integral part of creating most enterprise-level web applications
    these days. They provide access to services that can't be accessed directly on
    the client side due to security restrictions. For example, you could have a web
    service that accesses a database to retrieve or store customer information. Web
    services can also provide centralized operations that can be accessed from many
    different applications. For example, a service that supplies weather data.
  prefs: []
  type: TYPE_NORMAL
- en: Web services can be created using any server side technology that can get a
    web request and return a response. It could be as simple as PHP, or as sophisticated
    as a service-oriented architecture such as .NET's WCF API. If you are the only
    one using your web service then PHP may be sufficient; if a web services is designed
    for public consumption, then maybe not.
  prefs: []
  type: TYPE_NORMAL
- en: Most web services provide data in either XML or JSON format. In the past, XML
    was the format of choice for web services. However, in recent years JSON has become
    very popular. Not only because more and more JavaScript applications are interacting
    directly with web services, but also because it is a succinct, easy-to-read, and
    easy-to-parse format. Many service providers are now switching over to JSON.
  prefs: []
  type: TYPE_NORMAL
- en: It is not in the scope of this book to teach you how to write web services,
    but we will learn how to interact with them by using a web service that provides
    localized weather reports.
  prefs: []
  type: TYPE_NORMAL
- en: Weather Underground
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example we will get the weather from a real web service. We will use
    the service provided by Weather Underground at [http://www.wunderground.com](http://www.wunderground.com).
    To run the example code you will need a developer API key, which can be obtained
    for free at [http://www.wunderground.com/weather/api/](http://www.wunderground.com/weather/api/).
    The free developer plan allows you to call their services, but limits the number
    of service calls you can make per day.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-site scripting and JSONP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can call a web service using any of the jQuery Ajax methods discussed in
    the previous sections. There is no problem calling web services that reside in
    the same domain as your web page. However, calling web services that exist in
    another domain presents a security problem. This is known as cross-site scripting,
    or XSS. For example, the page at `http://mysite.com/myPage.html` can't access
    any content from `http://yoursite.com`.
  prefs: []
  type: TYPE_NORMAL
- en: The problem with cross-site scripting is that hackers can inject client-side
    scripts into a request that will allow them to run malicious code in the user's
    browser. So how do we get around this restriction? We can use a communication
    technique known as **JSONP**, which stands for **JSON with Padding**.
  prefs: []
  type: TYPE_NORMAL
- en: 'JSONP works due to the fact that there is a security exception for loading
    JavaScript files from other domains. So in order to get around the restriction
    of getting plain JSON formatted data, JSONP simulates a `<script>` request. The
    server returns the JSON data wrapped in a JavaScript function call. If we take
    the JSON from the previous example and put it in a JSONP response, it will look
    something like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The great thing about using jQuery to make our Ajax requests is that we don't
    even have to think about how JSONP works. All we need to know is that we need
    to use it when calling services in other domains. To tell jQuery to use JSONP
    we pass in a `dataType` parameter set to `"jsonp"` to the `ajax()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ajax()` method can take in an object of name/value pairs that contains
    all of the parameters for making a request, including the URL. We put our `dataType`
    parameter in that object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Time for action – calling the weather service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the user's location we can pass it to the Underground Weather
    service to get the user's current weather. We will use JSONP to call the service
    since the service exists in an external domain. Let's go into the `WeatherWidget`
    object and make a few changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to change the constructor to take the Weather Underground API
    key. Since we''re writing a generic widget that could go on any page on any site,
    the developer of the page will need to provide their key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we will change the `getWeatherReport()` method. It now takes the coordinates
    of the place we want to get a weather report for. In this case it''s the user''s
    position that we got from the Geolocation API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We make the call to the Weather Underground service using the `ajax()` method
    and JSONP. The base request to the service is [http://api.wunderground.com/api/](http://api.wunderground.com/api/)
    followed by the API key. To get the current weather conditions we add `/conditions/q/`
    to the URL, followed by the latitude and longitude separated by a comma. Last
    we append `".json"` to tell the service to give us data back in JSON format. The
    URL ends up looking like [http://api.wunderground.com/api/xxxxxxxx/conditions/q/44.99,-85.48.json](http://api.wunderground.com/api/xxxxxxxx/conditions/q/44.99,-85.48.json).
  prefs: []
  type: TYPE_NORMAL
- en: The `done()` and `fail()` handlers are the same as they were in the previous
    example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s change the `populateWeather()` method to extract the data returned
    from the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This version of the `populateWeather()` method is nearly identical to the one
    we used for our JSON file example. The only difference is that we add an image
    to the footer of the widget showing the Weather Underground logo, which is part
    of the terms of service for using their service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only thing left to do is go back into the web page''s main `WeatherApp`
    object, and change the call to `WeatherWidget` to provide the API key and location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we change `getCurrentWeather()`, which is called when the **Check Weather**
    button is clicked, to pass the user''s coordinates to the widget''s `update()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'After fading in the widget, we get the coordinates from the text input fields.
    Then we call the widget''s `update()` method, passing the coordinates to it. There
    you have it; the weather for the user''s location is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – calling the weather service](img/5947OT_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We changed the weather widget to use the Weather Underground service to get
    the current weather for the user's location, which we got from the Geolocation
    API. We used JSONP to call the service since it's not in the same domain as our
    web page.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What jQuery method do you use to make an Ajax request?
  prefs: []
  type: TYPE_NORMAL
- en: '`ajax()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`get()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`post()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. When do you need to use JSONP to make an Ajax request?
  prefs: []
  type: TYPE_NORMAL
- en: When calling a web service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When making a request to another domain
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When making a request to the same domain
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When doing a POST request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What information does the Geolocation API provide?
  prefs: []
  type: TYPE_NORMAL
- en: The user's latitude and longitude
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user's country
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user's address
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we created a weather widget that can be placed on any page.
    We made Ajax requests to get static XML and JSON data from the server. We learned
    how to find the user's location using the Geolocation API, and used that to call
    a web service to get localized weather data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We covered the following concepts in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to read XML and JSON files from the server using Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to extract data from XML returned from server calls using jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to get the user's current position anywhere in the world using the HTML5
    Geolocation API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to interact with web services asynchronously using Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JSONP to get around the security restrictions of cross site scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to get the weather report for a user's current location using geolocation
    and a web service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about creating multithreaded JavaScript applications
    using the Web Workers API. We will create an application that draws Mandelbrot
    fractals without locking up the browser.
  prefs: []
  type: TYPE_NORMAL
