- en: Insecure VPN Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Virtual private networks** (**VPNs**) are very useful when it comes to transferring
    data in a secure way. VPNs enable information security, but they are still exposed
    to high risks from hackers, every day. If you want to learn how to secure VPNs,
    this chapter will guide you from the required fundamentals of cryptography to
    obtaining the skills you need to secure VPNs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Cryptography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPN fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure VPN exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the art of cryptology, we have two different sciences: cryptography and
    cryptanalysis. Cryptography secures information based on mathematical algorithms,
    while cryptanalysis deals with exposing ciphertexts created by cryptography systems.
    These two sciences  coexist side by side. More simply, cryptography deals with
    hiding information, and cryptanalysis breaks cryptosystems to reveal the hidden
    information. Cryptography is not a new science, it is old. There are some classical
    cryptography techniques, such as Sumerian cuneiform, Egyptian hieroglyphics, scytale,
    Vigenère cipher, the Caesar cipher, and the ROT13 cipher.'
  prefs: []
  type: TYPE_NORMAL
- en: Cryptosystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The implementation of cryptographic techniques is called a cryptosystem; sometimes
    it''s called a cipher system. The following diagram describes a simple cryptosystem.
    The sender encrypts the plaintext with an encryption algorithm, which is a mathematical
    process using an encryption key. The output of that operation generates a ciphertext
    that will be decrypted by the receiver, using a decryption algorithm and a decryption
    key, so the ciphertext will be readable as plaintext:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00307.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Ciphers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ciphers are encrypted messages. Ciphers could be intercepted by attackers.
    We have two main types of cipher: classical and  modern. Let''s discover them
    one by one.'
  prefs: []
  type: TYPE_NORMAL
- en: Classical ciphers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type existed before the era of computers, and it has the following two
    divisions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transposition**: It uses permutation. The plaintext is rearranged to another
    format. The characters are still the same but in different positions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Substitution**: It uses character substitution, in other words, replacing
    a character with another one, such as, replacing *O* with *M*. The replacement
    algorithm should be known by the sender and the receiver. The ROT13 andCaesar
    ciphers are two examples of substitution ciphers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ROT13 is a substitution cipher where the positions of characters in the plaintext
    are shifted by 13 places. So, if the plaintext is *HELLO,*then the ciphertext
    should be *URYYB,* as shown*:*
  prefs: []
  type: TYPE_NORMAL
- en: '*![](img/00308.gif)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Caesar cipher is a substitution cipher used by Julius Caesar where each
    character of the plaintext message is shifted by a predefined number of places.
    As a demonstration, let''s suppose that the shifting number is **2**, then the
    ciphertext of *HELLO,* for example, will be*JGNNQ,* as shown here. This cipher
    can be easily broken, and you can try a maximum of 25 shifts until you find a
    readable text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00309.gif)'
  prefs: []
  type: TYPE_IMG
- en: Modern ciphers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modern ciphers are again divided into two types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Block ciphers**: These process information in blocks. Each block will be
    processed in encryption and decryption, individually. The **Data Encryption Standard**
    (**DES**) is one of the most used block ciphers, based on the Feistel cipher,
    which is developed by an IBM researcher, Horst Feistel, to try building an ideal
    block cipher structure that implements Claude Shannon''s **substitution-permutation**
    (**S-P**) networks. The following graph illustrates the Feistel Structure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00310.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Stream ciphers**: These process information bit-by-bit, or byte-by-byte in
    encryption and decryption. To encrypt a message, for example, a keystream is generated
    using a seed key with the same size as the message, and later the encryption occurs.
    The following graph illustrates the two Cipher categories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00311.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Kerckhoffs' principle for cryptosystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to check whether you have a good and secure cryptosystem, a Dutch
    cryptographer called Auguste Kerckhoffs proposed a set of laws and principles
    for the design of a secure cryptosystem. These articles were published in an 1883
    article, *Military Cryptography*. If you want to read the full text, have a look
    at Auguste Kerckhoffs, *La cryptographie militaire,* Journal des sciences militaires,
    vol. IX, pp. 5–38 II, Desiderata de la cryptographie militaire, January 1883\.
    Kerckhoffs'' six principles for cryptosystems are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00312.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the six principles translated into English :'
  prefs: []
  type: TYPE_NORMAL
- en: The cryptosystem should be unbreakable practically, if not mathematically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The falling of the cryptosystem into the hands of an intruder should not lead
    to any compromise of the system, preventing any inconvenience to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key should be easily communicable, memorable, and changeable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ciphertext should be transmissible by telegraph, an insecure channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The encryption apparatus and documents should be portable and operable by a
    single person
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, it is necessary that the system be easy to use, requiring neither mental
    strain nor the knowledge of a long series of rules to observe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptosystem types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to cryptosystems, we have two major categories based on encryption-decryption
    keys—symmetric and asymmetric cryptosystems. If the system uses the same key for
    both encryption and decryption, it would be a symmetric cryptosystem, otherwise,
    the cryptosystem is asymmetric, because the key used in encryption is not the
    same as the key used in decryption.
  prefs: []
  type: TYPE_NORMAL
- en: Symmetric cryptosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The various types of symmetric cryptosystems are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Encryption Standard (DES)**: This has been developed by IBM. It started
    as Lucifer encryption and was later published by the **National Institute of Standards
    and Technology** (**NIST**). This encryption uses a 56-bit key:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00313.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The round function is described in the following workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00314.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The key generation is done using the following workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00315.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The initial and final permutations are done by two inversed permutation boxes
    (P-boxes):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00316.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Triple-DES (3DES)**: This encryption is an enhanced version of DES. It uses
    a 168-bit key because the user generates three keys, k1, k2, and k3\. The first
    key, k1, is used to encrypt a single DES. The second key, k2, is used to decrypt
    the output of the first step. The final key, k3, is used to encrypt the previous
    step, a single DES:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00317.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Advanced Encryption Standard (AES)**: AES is a DES  replacement. It is faster
    (about six times faster) and stronger. It uses the Rijndael cipher:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00318.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Rivest Cipher 5 (RC5)**: This is an asymmetric cryptosystem developed by
    an MIT professor, Ronald Rivest. RC5 is composed of the following three major
    components:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key expansion algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Encryption algorithm:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '>![](img/00319.gif)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Decryption algorithm:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00320.gif)'
  prefs: []
  type: TYPE_IMG
- en: RC6 is derived from RC5, with a block size of 128 bits and a flexible key size.
  prefs: []
  type: TYPE_NORMAL
- en: Asymmetric cryptosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following are the algorithms of Asymmetric cryptosystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rivest-Shamir-Adleman (RSA)**: RSA is one of the most widely used cryptosystems
    on the internet. It was developed by Ron Rivest, Adi Shamir, and Leonard Adleman
    at MIT. When using RSA, a pair of keys will be generated, a private key, and a
    public key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Diffie-Hellman key exchange**: The Diffie-Hellman key exchange is a way of
    creating a key without sharing and exchanging information during this operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The basic idea works like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Select two prime numbers,*g* and *p*
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute *ga mod p* and send the output
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The other key computes *gb mod p* and sends the output **B**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute *Ba mod p*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The same on the other key computes *Ab mod p*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00321.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**El Gamal**: El Gamal is a cryptosystem based on the Diffie–Hellman key exchange'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hash functions and message integrity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hash functions are mathematical  functions that take an arbitrarily sized input
    string, and generate a fixed-size output called a hash value or a message digest.
    A good hash function
  prefs: []
  type: TYPE_NORMAL
- en: should calculate hashes easily; it will be very difficult to calculate the plaintexts
    of a given
  prefs: []
  type: TYPE_NORMAL
- en: hash, and it does not generate the same hash for two different inputs, except
    in rare cases.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00322.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are many well-known hash functions used nowadays; they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hashed message authentication code**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message Digest** (**MD2**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message Digest** (**MD4**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message Digest** (**MD5**), if you want to encrypt or decrypt a plaintext
    you can use [http://md5decrypt.net/en/](http://md5decrypt.net/en/) shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00323.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Secure Hash Algorithm** (**SHA**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Whirlpool**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HAVAL**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RIPEMD**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digital signatures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main goal of digital signatures is to verify the authenticity and integrity
    of a message or document. You can see it as an electronic fingerprint. The following
    graph shows the steps to sign a document:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00324.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Steganography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Steganography is the art of hiding messages in a human-readable medium, such
    as image files, videos, texts, and so on. The changes should be unnoticeable by
    sight, to mask the message behind the hosted file. The two types of steganography
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Text steganography:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line-shift coding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Word-shift coding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feature coding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image steganography:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Least significant bit** (**LSB**): Hiding 1 bit of data in every pixel of
    8-bit images and 3 bits of data in every pixel of 24-bit images. You can use `steglsb`
    to perform LSB steganography:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00325.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Spread spectrum image steganography (SSIS)**'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**F5 algorithm**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Key management is the process of protecting encryption keys. In order to ensure
    this protection, a life cycle must be maintained, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: Key creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key protection and custody
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key rotation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key destruction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key escrow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00326.gif)'
  prefs: []
  type: TYPE_IMG
- en: Cryptographic attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to retrieve the plaintexts of information, attackers and cryptanalysts
    are using many techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Brute force attack (BFA)**: During this attack, the attacker will try all
    the key combinations to retrieve the key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dictionary attack**: In this attack, the attacker uses prepared dictionaries
    and tries the words in them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Birthday attack**: In the birthday attack, the attacker uses hash collision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ciphertext only attack (COA)**: In this attack, the attacker possesses the
    ciphertexts, and he only needs to determine the key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Known plaintext attack (KPA)**: The attacker uses what we call linear cryptanalysis
    to retrieve the missing plaintexts from ciphers, while he knows some partially
    plaintexts of the cipher'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chosen plaintext attack (CPA)**: The attacker uses differential cryptanalysis
    to retrieve the key after choosing the ciphertext and plaintexts by themselves'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Side channel attack (SCA)**: The attacker uses hardware to attack the cryptosystem,
    using power consumption or CPU cycles to exploit the weakness in the physical
    implementation of the cryptosystem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timing attack**: The attacker analyzes the computing times of cryptographic
    algorithms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Power analysis attack**: This is the same as a timing attack, but instead
    of studying the time, the attacker analyzes the power consumption'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fault analysis attack**: The attacker studies errors in the cryptosystem
    in order to gather more information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPN fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to information technology, cryptography plays a huge role in securing
    information in its different status. Various technical applications use cryptography
    on a daily basis, such as disk encryption, email security, and communication.
    VPNs are one of them. By definition, a VPN is a logical network between two sites.
    The traffic of VPNs is encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: 'In encryption, we have the following two modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Link encryption**: In this mode, all the information is encrypted, and the
    message should be decrypted in every hop. In this case, the router should decrypt
    the message so it knows the routing information, encrypt it again, and forward
    it to the next hop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**End-to-end encryption**: In this mode, shown here, the information in the
    required headers is not encrypted so the routers, for example, don''t need to
    decrypt them, because the routing information is clear:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00327.gif)'
  prefs: []
  type: TYPE_IMG
- en: Tunneling protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two technologies that are used in VPNs—SSL and **Internet Protocol
    Security** (**IPSec**). We will discuss these two technologies in a detailed and
    comprehensive way, but now, let''s look at the different tunneling protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Point-to-Point Tunneling Protocol** (**PPTP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 2 Tunneling Protocol** (**L2TP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPSec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IPSec is a protocol suite that enables security between systems, and by security,
    I mean some of the three fundamental cornerstones of information security discussed
    in the first chapter: confidentiality and integrity, in addition to authentication
    and anti-replay protection. IPSec uses the following two protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication Header (AH) protocol**: This protocol is used to authenticate
    the traffic and not encrypt it. The authentication is performed, using hash functions
    (MD5 or SHA1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encapsulating Security Payload (ESP) protocol**: This protocol is also used
    for authentication, but it supports encryption as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IPSec operates in the following two different modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tunnel mode**: In this mode, the entire packet is encapsulated and forwarded.
    It is widely used in VPNs. A new IP header is added on top of the original IP
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transport mode**: This mode is used in end-to-end encryption between systems.
    An AH header is added to the IP header:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00328.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The following diagram illustrates the two different protocols and the different
     modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00329.gif)'
  prefs: []
  type: TYPE_IMG
- en: Secure Sockets Layer/Transport Layer Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Secure Sockets Layer** (**SSL**) is an application layer protocol. If you
    are using a modern browser in a secure mode, the connection between your browser
    and the web server is secured by SSL. The more secure version of SSL is **Transport
    Layer Security** (**TLS**). If a website is secured by an SSL certificate, then
    the HTTPS sign will appear in your URL bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00330.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The SLL/TLS operation is represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00331.gif)'
  prefs: []
  type: TYPE_IMG
- en: SSL attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will discuss the major SSL attacks that have happened over the
    years.
  prefs: []
  type: TYPE_NORMAL
- en: DROWN attack (CVE-2016-0800)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A DROWN attack is an encryption-breaking technique. When the attack was discovered,
    they found that more than 33% of HTTPS servers were vulnerable. Servers that still
    support SSLv2 are vulnerable to this attack. In a DROWN attack, the attacker sends
    probes with the same private key to decrypt the TLS communications. Thus, all
    the information will be exposed. Not only servers that support SSLv2 are vulnerable,
    but also an attacker can use a private key from another server that supports SSLv2
    to launch the attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test whether your servers are vulnerable to a DROWN attack, you can use [https://pentest-tools.com/network-vulnerability-scanning/drown-ssl-scanner](https://pentest-tools.com/network-vulnerability-scanning/drown-ssl-scanner):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00332.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To defend against a DROWN attack, it is recommended you disable SSLv2 on the
    servers; ensure that the private keys are not used by any other service that allows
    SSLv2 connections and upgrade the OpenSSL cryptographic library.
  prefs: []
  type: TYPE_NORMAL
- en: POODLE attack (CVE-2014-3566)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Padding Oracle On Downgraded Legacy Encryption** (**POODLE**) attack
    was discovered in 2014\. This attack exploits the fact that many servers  support SSLv3
    on one hand and a block padding vulnerability on the other hand. Following diagram
    demonstrates POODLE attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00333.gif)'
  prefs: []
  type: TYPE_IMG
- en: In general, as a first step, a client sends the supported TLS versions. In this
    case, the attacker intercepts the traffic performing a man-in-the-middle attack
    and mimics the server, until the connection is downgraded to SSLv3\. If the connection
    is established, the attacker exploits a cipher block chaining vulnerability, by
    manipulating the padding bytes to perform the POODLE attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to test whether your servers are vulnerable to POODLE attacks,
    you can use the `ssl-poodle` nmap script or simply test it online using the previous
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00334.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To defend against a POODLE attack, you need to disable SSLv3 on your servers
    and upgrade the clients, because upgraded clients use TLS fallback **Signaling
    Cipher Suite Value** (**SCSV**) in order to prevent protocol downgrade attacks.
  prefs: []
  type: TYPE_NORMAL
- en: BEAST attack  (CVE-2011-3389)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Browser Exploit Against SSL/TLS** (**BEAST**) attack was discovered in
    2011\. In a BEAST attack, the attacker uses CPA after exploiting a cipher block
    chaining vulnerability in TLS, by performing a man-in-the-middle attack. To defend
    against a BEAST attack, upgrade the TLS version.
  prefs: []
  type: TYPE_NORMAL
- en: CRIME attack (CVE-2012-4929)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a **Compression Ratio Info-leak Made Easy** (**CRIME**) attack, the attacker
    exploits a vulnerability in TLS compression. Following diagram demonstrates CRIME
    attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00335.gif)'
  prefs: []
  type: TYPE_IMG
- en: This compression is basically and, optionally, used to reduce the bandwidth
    using the DEFLATE algorithm, for example. To defend against this attack, make
    sure that your browser is up to date.
  prefs: []
  type: TYPE_NORMAL
- en: BREACH attack (CVE-2013-3587)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a **Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext**
    (**BREACH**) attack, the attacker exploits an HTTP compression.
  prefs: []
  type: TYPE_NORMAL
- en: Heartbleed attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a Heartbleed attack, the attackers exploit the TLS heartbeat extension in
    the  OpenSSL library. This extension is used to always ensure that the connection
    between two systems is alive. The request payload is composed of the data and
    the size of it. The attackers exploit this format to force the server to send
    the requested size from leaked data from memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00336.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to test your servers, try the usual website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00337.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Qualys SSL Labs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test your servers against SSL attacks, you can try Qualys SSL Labs. To try
    it, just visit [https://ssllabs.com/](https://ssllabs.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00338.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Test your server and put in your website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00339.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The website will scan the addresses related to the entered website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00340.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A report will be generated to give you a detailed SSL report and an overall
    rating:'
  prefs: []
  type: TYPE_NORMAL
- en: '>![](img/00341.jpeg)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to secure VPNs. Like every other chapter, we
    started from the basics and went from cryptology techniques to VPNs, because having
    a clear understanding of the aspects of a technology will give penetration testers
    a clearer vision to know how to secure that technology.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss common security vulnerabilities which may
    be present in switches and routers and offers advice on keeping network devices
    secure.
  prefs: []
  type: TYPE_NORMAL
