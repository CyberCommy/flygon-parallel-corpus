- en: Chapter 1. Look and Feel Customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using style sheets with Qt Designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic style sheet customization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a login screen using style sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using resources in style sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing properties and sub-controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling in QML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing QML object pointer to C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt allows us to easily design our program's user interface through a method
    that most people are familiar with. Qt not only provides us with a powerful user
    interface toolkit called Qt Designer, which enables us to design our user interface
    without writing a single line of code, but it also allows advanced users to customize
    their user interface components through a simple scripting language called Qt
    Style Sheets.
  prefs: []
  type: TYPE_NORMAL
- en: Use style sheets with Qt Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will learn how to change the look and feel of our program
    and make it look more professional by using style sheets and resources. Qt allows
    you to decorate your **Graphical User Interfaces** (**GUIs**) using a style sheet
    language called Qt Style Sheets, which is very similar to **Cascading Style Sheets**
    (**CSS**) used by web designers to decorate their websites.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we need to do is open up Qt Creator and create a new project.
    If this is the first time you have used Qt Creator, you can either click the big
    button that says **New Project** with a **+** sign, or simply go to **File** |
    **New File or New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select **Application** under the **Project** window and select **Qt Widgets
    Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, click the **Choose** button at the bottom. A window will then pop
    out and ask you to insert the project name and its location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're done with that, click **Next** several times and click the **Finish**
    button to create the project. We will just stick to all the default settings for
    now. Once the project has been created, the first thing you will see is the panel
    with tons of big icons on the left side of the window that is called the **Mode
    Selector** panel; we will discuss this more later in the *How it works...* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, you will also see all your source files listed on the **Side Bar** panel
    which is located right next to the **Mode Selector** panel. This is where you
    can select which file you want to edit, which, in this case, is `mainwindow.ui`
    because we are about to start designing the program's UI!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click `mainwindow.ui` and you will see an entirely different interface
    appearing out of nowhere. Qt Creator actually helped you to switch from the script
    editor to the UI editor (Qt Designer) because it detected the `.ui` extension
    on the file you're trying to open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also notice that the highlighted button on the **Mode Selector** panel
    has changed from the **Edit** button to the **Design** button. You can switch
    back to the script editor or change to any other tools by clicking one of the
    buttons located in the upper half of the **Mode Selector** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's go back to the Qt Designer and look at the `mainwindow.ui` file. This
    is basically the main window of our program (as the filename implies) and it's
    empty by default, without any widget on it. You can try to compile and run the
    program by pressing the **Run** button (green arrow button) at the bottom of the
    **Mode Selector** panel, and you will see an empty window popping up once the
    compilation is complete:![How to do it…](img/B02820_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's add a push button to our program's UI by clicking on the `Push Button`
    item in the widget box (under the **Buttons** category) and dragging it to your
    main window in the form editor. Then, keep the push button selected, and now you
    will see all the properties of this button inside the property editor on the right
    side of your window. Scroll down to somewhere around the middle and look for a
    property called **styleSheet**. This is where you apply styles to your widget,
    which may or may not inherit to its children or grandchildren recursively depending
    on how you set your style sheet. Alternatively, you can also right-click on any
    widget in your UI at the form editor and select **Change Style Sheet** from the
    pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can click on the input field of the **styleSheet** property to directly
    write the style sheet code, or click on the **…** button besides the input field
    to open up the **Edit Style Sheet** window which has a bigger space for writing
    longer style sheet code. At the top of the window you can find several buttons,
    such as **Add Resource**, **Add Gradient**, **Add Color**, and **Add Font**, that
    can help you to kick-start your coding if you can't remember the properties' names.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's try to do some simple styling with the **Edit Style Sheet** window.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Add Color** and choose color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pick a random color from the color picker window, let's say, a pure red color.
    Then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you will see a line of code has been added to the text field on the **Edit
    Style Sheet** window, which in my case is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`color: rgb(255, 0, 0);`'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **OK** button and now you will see the text on your push button has
    changed to a red color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a bit of time to get ourselves familiar with Qt Designer''s interface
    before we start learning how to design our own UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B02820_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Menu bar:** The menu bar houses application-specific menus that provide easy
    access to essential functions such as create new projects, save files, undo, redo,
    copy, paste, and so on. It also allows you to access development tools that come
    with Qt Creator, such as the compiler, debugger, profiler, and so on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Widget box:** This is where you can find all the different types of widget
    provided by Qt Designer. You can add a widget to your program''s UI by clicking
    one of the widgets from the widget box and dragging it to the form editor.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mode selector:** The mode selector is a side panel that places shortcut buttons
    for easy access to different tools. You can quickly switch between the script
    editor and form editor by clicking the **Edit** or **Design** buttons on the mode
    selector panel which is very useful for multitasking. You can also easily navigate
    to the debugger and profiler tools in the same speed and manner.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Build shortcuts:** The build shortcuts are located at the bottom of the mode
    selector panel. You can build, run, and debug your project easily by pressing
    the shortcut buttons here.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Form editor:** Form editor is where you edit your program''s UI. You can
    add different widgets to your program by selecting a widget from the widget box
    and dragging it to the form editor.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Form toolbar:** From here, you can quickly select a different form to edit,
    click the drop-down box located above the widget box and select the file you want
    to open with Qt Designer. Beside the drop-down box are buttons for switching between
    different modes for the form editor and also buttons for changing the layout of
    your UI.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Object inspector:** The object inspector lists all the widgets within your
    current `.ui` file. All the widgets are arranged according to its parent-child
    relationship in the hierarchy. You can select a widget from the object inspector
    to display its properties in the property editor.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Property editor:** Property editor will display all the properties of the
    widget you selected either from the object inspector window or the form editor
    window.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action Editor and Signals & Slots Editor:** This window contains two editors,
    **Action Editor** and the **Signals & Slots Editor**, which can be accessed from
    the tabs below the window. The action editor is where you create actions that
    can be added to a menu bar or toolbar in your program''s UI.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Output panes:** Output panes consist of several different windows that display
    information and output messages related to script compilation and debugging. You
    can switch between different output panes by pressing the buttons that carry a
    number before them, such as **1**-**Issues**, **2**-**Search Results**, **3**-**Application
    Output**, and so on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we discussed how to apply style sheets to Qt widgets
    through C++ coding. Although that method works really well, most of the time the
    person who is in charge of designing the program's UI is not the programmer, but
    a UI designer who specializes in designing user-friendly UI. In this case, it's
    better to let the UI designer design the program's layout and style sheet with
    a different tool and not mess around with the code.
  prefs: []
  type: TYPE_NORMAL
- en: Qt provides an all-in-one editor called Qt Creator. Qt Creator consists of several
    different tools, such as script editor, compiler, debugger, profiler, and UI editor.
    The UI editor, which is also called Qt Designer, is the perfect tool for designers
    to design their program's UI without writing any code. This is because Qt Designer
    adopted the What-You-See-Is-What-You-Get approach by providing accurate visual
    representation of the final result, which means whatever you design with Qt Designer
    will turn out exactly the same when the program is compiled and run.
  prefs: []
  type: TYPE_NORMAL
- en: 'The similarities between Qt Style Sheets and CSS are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**: `h1 { color: red; background-color: white;}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Qt Style Sheets**: `QLineEdit { color: red; background-color: white;}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, both of them contain a selector and a declaration block. Each
    declaration contains a property and a value, separated by a colon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Qt, a style sheet can be applied to a single widget by calling `QObject::setStyleSheet()`
    function in C++ code, for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will turn the text of a button with the variable name `myPushButton`
    to a `blue` color. You can also achieve the same result by writing the declaration
    in the style sheet property field in Qt Designer. We will discuss more about Qt
    Designer in the next section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Qt Style Sheets also supports all the different types of selectors defined
    in CSS2 standard, including Universal selector, Type selector, Class selector,
    ID selector, and so on, which allows us to apply styling to a very specific individual
    or group of widgets. For instance, if we want to change the background color of
    a specific line edit widget with the object name `usernameEdit`, we can do this
    by using an ID selector to refer to it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To learn about all the selectors available in CSS2 (which are also supported
    by Qt Style Sheets), please refer to this document: [http://www.w3.org/TR/REC-CSS2/selector.html](http://www.w3.org/TR/REC-CSS2/selector.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Basic style sheet customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous example, you learned how to apply a style sheet to a widget
    with Qt Designer. Let's go crazy and push things further by creating a few other
    types of widgets and change their style properties to something bizarre for the
    sake of learning. This time, however, we will not apply the style to every single
    widget one by one, but we will learn to apply the style sheet to the main window
    and let it inherit down the hierarchy to all the other widgets so that the style
    sheet is easier to manage and maintain in long run.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, let's remove the style sheet from the push button by selecting
    it and clicking the small arrow button besides the `styleSheet` property. This
    button will revert the property to the default value, which in this case is the
    empty style sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, add a few more widgets to the UI by dragging them one by one from the
    widget box to the form editor. I've added a line edit, combo box, horizontal slider,
    radio button, and a check box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the sake of simplicity, delete the menu bar, main toolbar, and the status
    bar from your UI by selecting them from the object inspector, right click, and
    choose **Remove**. Now your UI should look similar to this:![How to do it…](img/B02820_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the main window either from the form editor or the object inspector,
    then right click and choose **Change Stylesheet** to open up the **Edit Style
    Sheet**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now what you will see is a completely bizarre-looking UI with everything covered
    in yellow with a thick border. This is because the preceding style sheet does
    not have a selector, which means the style will apply to the children widgets
    of the main window all the way down the hierarchy. To change that, let''s try
    something different:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This time, only the push button will get the style described in the preceding
    code, and all other widgets will return to the default styling. You can try to
    add a few more push buttons to your UI and they will all look the same:![How to
    do it…](img/B02820_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This happens because we specifically tell the selector to apply the style to
    all the widgets with the class called `QPushButton`. We can also apply the style
    to just one of the push buttons by mentioning its name in the style sheet, like
    so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you understand this method, we can add the following code to the style
    sheet :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What it does is basically change the style of all the push buttons as well as
    some properties of a specific button named `pushButton_2`. We keep the style sheet
    of `pushButton_3` as it is. Now the buttons will look like this:![How to do it…](img/B02820_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first set of style sheet will change all widgets of `QPushButton` type to
    a white rectangular button with no border and red text. Then the second set of
    style sheet changes only the border of a specific `QPushButton` widget called
    `pushButton_2`. Notice that the background color and text color of `pushButton_2`
    remain white and red respectively because we didn't override them in the second
    set of style sheet, hence it will return to the style described in the first set
    of style sheet since it's applicable to all `QPushButton` widgets. Do notice that
    the text of the third button has also changed to red because we didn't describe
    the color property in the third set of style sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, create another set of style using the universal selector, like
    so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The universal selector will affect all the widgets regardless of their type.
    Therefore, the preceding style sheet will apply a nice gradient color to all the
    widgets' background as well as setting their text as white and giving them a one-pixel
    solid outline which is also in white. Instead of writing the name of the color
    (that is, white), we can also use the `rgb` function (`rgb(255, 255, 255)`) or
    hex code (`#ffffff`) to describe the color value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just as before, the preceding style sheet will not affect the push buttons because
    we have already given them their own styles which will override the general style
    described in the universal selector. Just remember that in Qt, the style that
    is more specific will ultimately be used when there is more than one style having
    influence on a widget. This is how the UI will look now:![How to do it…](img/B02820_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are ever involved in web development using HTML and CSS, Qt's style sheet
    works exactly the same way as CSS. Style sheets provide the definitions for describing
    the presentation of the widgets – what the colors are for each element in the
    widget group, how thick the border should be, and so on and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: If you specify the name of the widget to the style sheet, it will change the
    style of a particular push button widget with the name you provide. None of the
    other widgets will be affected and will remain as the default style.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of a widget, select the widget either from the form editor
    or the object inspector and change the property called `objectName` in the property
    window. If you have used the ID selector previously to change the style of the
    widget, changing its object name will break the style sheet and lose the style.
    To fix this problem, simply change the object name in the style sheet as well.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a login screen using style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will learn how to put all the knowledge we learned in the previous
    example together and create a fake graphical login screen for an imaginary operating
    system. Style sheets are not the only thing you need to master in order to design
    a good UI. You will also need to learn how to arrange the widgets neatly using
    the layout system in Qt Designer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we need to do is design the layout of the graphical login screen
    before we start doing anything. Planning is very important in order to produce
    good software. The following is a sample layout design I made to show you how
    I imagine the login screen will look. Just a simple line drawing like this is
    sufficient as long as it conveys the message clearly:![How to do it…](img/B02820_01_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we know exactly how the login screen should look, let's go back to
    Qt Designer again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be placing the widgets at the top panel first, then the logo and the
    login form below it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the main window and change its width and height from 400 and 300 to 800
    and 600 respectively because we'll need a bigger space in which to place all the
    widgets in a moment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag a label under the **Display Widgets** category from the widget
    box to the form editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `objectName` property of the label to `currentDateTime` and change
    its `Text` property to the current date and time just for display purposes, such
    as `Monday, 25-10-2015 3:14 PM`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag a push button under the **Buttons** category to the form editor.
    Repeat this process one more time because we have two buttons on the top panel.
    Rename the two buttons `restartButton` and `shutdownButton` respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the main window and click the small icon button on the form toolbar
    that says **Lay Out Vertically** when you mouse-over it. Now you will see the
    widgets are being automatically arranged on the main window, but it's not exactly
    what we want yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag a horizontal layout widget under the **Layouts** category to
    the main window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag the two push buttons and the text label into the horizontal layout.
    Now you will see the three widgets being arranged in a horizontal row, but vertically
    they are located in the middle of the screen. The horizontal arrangement is almost
    correct, but the vertical position is totally off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag a vertical spacer from the **Spacers** category and place it
    below the horizontal layout we created previously (below the red rectangular outline).
    Now you will see all the widgets are being pushed to the top by the spacer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, place a horizontal spacer between the text label and the two buttons to
    keep them apart. This will make the text label always stick to the left and the
    buttons align to the right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set both the `Horizontal Policy` and `Vertical Policy` properties of the two
    buttons to `Fixed` and set the `minimumSize` property to `55x55`. Then, set the
    `text` property of the buttons to empty as we will be using icons instead of text.
    We will learn how to place an icon in the button widgets in the following section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now your UI should look similar to this:![How to do it…](img/B02820_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will be adding the logo by using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a horizontal layout between the top panel and the vertical spacer to serve
    as a container for the logo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After adding the horizontal layout, you will find the layout is way too thin
    in height to be able to add any widgets to it. This is because the layout is empty
    and it's being pushed by the vertical spacer below it into zero height. To solve
    this problem, we can set its vertical margin (either `layoutTopMargin` or `layoutBottomMargin`)
    to be temporarily bigger until a widget is added to the layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add a label to the horizontal layout that you just created and rename
    it `logo`. We will learn more about how to insert an image into the label to use
    it as a logo in the next section. For now, just empty out the `text` property
    and set both its `Horizontal Policy` and `Vertical Policy` properties to `Fixed`.
    Then, set the `minimumSize` property to `150x150`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the vertical margin of the layout back to zero if you haven't done so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The logo now looks invisible, so we will just place a temporary style sheet
    to make it visible until we add an image to it in the next section. The style
    sheet is really simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now your UI should look similar to this:![How to do it…](img/B02820_01_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s create the login form by using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a horizontal layout between the logo's layout and the vertical spacer. Just
    as we did previously, set the `layoutTopMargin` property to a bigger number (that
    is, 100) so that you can add a widget to it more easily.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, add a vertical layout inside the horizontal layout you just created.
    This layout will be used as a container for the login form. Set its `layoutTopMargin`
    to a number lower than that of the horizontal layout (that is, 20) so that we
    can place widgets in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, right click the vertical layout you just created and choose **Morph into
    -> QWidget**. The vertical layout is now being converted into an empty widget.
    This step is essential because we will be adjusting the width and height of the
    container for the login form. A layout widget does not contain any properties
    for width and height, but only margins, due to the fact that a layout will expand
    toward the empty space surrounding it, which does make sense, considering that
    it does not have any size properties. After you have converted the layout to a
    `QWidget` object, it will automatically inherit all the properties from the widget
    class, and so we are now able to adjust its size to suit our needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `QWidget` object, which we just converted from the layout, to `loginForm`
    and change both its `Horizontal Policy` and `Vertical Policy` properties to `Fixed`.
    Then, set the `minimumSize` to `350x200`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we already placed the `loginForm` widget inside the horizontal layout,
    we can now set its `layoutTopMargin` property back to zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the same style sheet as the logo to the `loginForm` widget to make it visible
    temporarily, except this time we need to add an ID selector in front so that it
    will only apply the style to `loginForm` and not its children widgets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now your UI should look something like this:![How to do it…](img/B02820_01_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are not done with the login form yet. Now that we have created the container
    for the login form, it''s time to put more widgets into the form:'
  prefs: []
  type: TYPE_NORMAL
- en: Place two horizontal layouts into the login form container. We need two layouts
    as one for the username field and another for the password field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a label and a line edit to each of the layouts you just added. Change the
    `text` property of the upper label to `Username:` and the one below as `Password:`.
    Then, rename the two line edits as `username` and `password` respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a push button below the password layout and change its `text` property to
    `Login`. After that, rename it as `loginButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can add a vertical spacer between the password layout and the login button
    to distance them slightly. After the vertical spacer has been placed, change its
    `sizeType` property to `Fixed` and change the `Height` to `5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the `loginForm` container and set all its margins to 35\. This is
    to make the login form look better by adding some space to all its sides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also set the `Height` property of the `username`, `password`, and `loginButton`
    widgets to 25 so that they don't look so cramped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now your UI should look something like this:![How to do it…](img/B02820_01_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''re not done yet! As you can see, the login form and the logo are both sticking
    to the top of the main window due to the vertical spacer below them. The logo
    and the login form should be placed at the center of the main window instead of
    the top. To fix this problem, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add another vertical spacer between the top panel and the logo's layout. This
    way it will counter the spacer at the bottom which balances out the alignment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you think that the logo is sticking too close to the login form, you can
    also add a vertical spacer between the logo's layout and the login form's layout.
    Set its `sizeType` property to `Fixed` and the `Height` property to `10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click the top panel's layout and choose **Morph into -> QWidget**. Then,
    rename it `topPanel`. The reason why the layout has to be converted into `QWidget`
    is that, we cannot apply style sheets to a layout, as it doesn't have any properties
    other than margins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Currently you can see there is a little bit of margin around the edges of the
    main window – we don't want that. To remove the margins, select the `centralWidget`
    object from the object inspector window, which is right under the `MainWindow`
    panel, and set all the margin values to zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you can run the project by clicking the **Run** button (with
    the green arrow icon) to see what your program looks like now. If everything went
    well, you should see something like this:![How to do it…](img/B02820_01_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After we've done the layout, it's time for us to add some fanciness to the UI
    using style sheets! Since all the important widgets have been given an object
    name, it's easier for us to apply the style sheets to it from the main window,
    since we will only write the style sheets to the main window and let them inherit
    down the hierarchy tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click on **MainWindow** from the object inspector window and choose **Change
    Stylesheet**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the style sheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now you will see that the background of the main window changes its color. We
    will learn how to use an image for the background in the next section, so the
    color is just temporary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Qt, if you want to apply styles to the main window itself, you must apply
    it to its central widget instead of the main window itself because the window
    is just a container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we will add a nice gradient color to the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we will apply black color to the login form and make it look semi-transparent.
    After that, we will also make the corners of the login form container slightly
    rounded by setting the `border-radius` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After we''re done applying styles to the specific widgets, we will apply styles
    to the general types of widgets instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding style sheets will change all the labels' texts to a white color,
    which includes the text on the widgets as well because, internally, Qt uses the
    same type of label on the widgets that have text on it. Also, we made the corners
    of the line edit widgets slightly rounded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will apply style sheets to all the push buttons on our UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding style sheet changes the text of all the buttons to a white color,
    then sets its background color to blue, and makes its corners slightly rounded
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To push things even further, we will change the color of the push buttons when
    we mouse-over it, using the keyword `hover`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding style sheet will change the background color of the push buttons
    to green when we mouse-over them. We will talk more about this in the following
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can further adjust the size and margins of the widgets to make them look
    even better. Remember to remove the border line of the login form by removing
    the style sheet that we applied directly to it earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now your login screen should look something like this:![How to do it…](img/B02820_01_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example focuses more on the layout system of Qt. The Qt layout system provides
    a simple and powerful way of automatically arranging child widgets within a widget
    to ensure that they make good use of the available space.
  prefs: []
  type: TYPE_NORMAL
- en: The spacer items used in the preceding example help to push the widgets contained
    in a layout outward to create spacing along the width of the spacer item. To locate
    a widget to the middle of the layout, put two spacer items to the layout, one
    on the left side of the widget and another on the right side of the widget. The
    widget will then be pushed to the middle of the layout by the two spacers.
  prefs: []
  type: TYPE_NORMAL
- en: Using resources in style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt provides us with a platform-independent resource system which allows us to
    store any type of files in our program's executable for later use. There is no
    limit to the types of files we can store in our executable—images, audio, video
    HTML, XML, text files, binary files, and so on, are all permitted. This is useful
    if your application always needs a certain set of files (icons, translation files,
    and so on) and you don't want to run the risk of losing the files. To achieve
    this, we must tell Qt which files we want to add to its resource system in the
    `.qrc` file and Qt will handle the rest during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add a new `.qrc` file to our project, go to **File** | **New File or Project**.
    Then, select **Qt** under the **Files and Classes** category and select **Qt Resources
    File**. After that, give it a name (that is, `resources`) and click the **Next**
    button followed by the **Finish** button. The `.qrc` file will not be created
    and automatically opened by Qt Creator.
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to edit the `.qrc` file directly in the XML format as Qt Creator
    provides you the user interface to manage your resources. To add images and icons
    to your project, first you need to make sure that the images and icons are being
    placed in your project's directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the `.qrc` file is opened in Qt Creator, click the **Add** button followed
    by **Add Prefix** button. The prefix is used to categorize your resources so that
    it can be better managed when you have a ton of resources in your project:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename the prefix you just created `/icons`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, create another prefix by clicking **Add** followed by **Add Prefix**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new prefix `/images`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, select the `/icon` prefix and click **Add** followed by **Add Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A file selection window will appear; use that to select all the icon files.
    You can select multiple files at a time by holding the *Ctrl* key on your keyboard
    while clicking on the files to select them. Click **Open** once you're done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the `/images` prefix and click the **Add** button followed by the
    **Add Files** button. The file selection window will pop up again, and this time
    we will select the background image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the preceding steps, but this time we will add the logo image to the
    `/images` prefix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Don''t forget to save once you''re done by pressing *Ctrl* + *S*. Your `.qrc`
    file should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it](img/B02820_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After that, open back to our `mainwindow.ui` file; we will now make use of the
    resources we have just added to our project. First, we will select the restart
    button located on the top panel. Then, scroll down the property editor until you
    see the `icon` property. Click the little button with a drop-down arrow icon and
    click **Choose Resources** from its menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Select Resource** window will then pop up. Click on the `icons` prefix
    on the left panel and then select the restart icon on the right panel. After that,
    press **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see a tiny icon appearing on the button. The icon looks very tiny
    because the default icon size is set at `16x16`. Change the `iconSize` property
    to `50x50` and you will see the icon appear bigger now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the preceding steps for the shutdown button, except this time we will
    choose the shutdown icon instead.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're done, the two buttons should now look like this:![How to do it](img/B02820_01_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will use the image we added to the resource file as our logo. First,
    select the logo widget and remove the style sheet that we added earlier to render
    its outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down the property editor until you see the `pixmap` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the little drop-down button behind the `pixmap` property and select **Choose
    Resources** from the menu. After that, select the logo image and click **OK**.
    You will now see the logo size no longer follow the dimension you set previously
    and follow the actual dimension of the image instead. We cannot change its dimension
    because this is simply how `pixmap` works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want more control over the logo''s dimension, you can remove the image
    from the `pixmap` property and use a style sheet instead. You can use the following
    code to apply an image to the icon container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To obtain the path of the image, right click the image name on the file list
    window and choose **Copy path**. The path will be saved to your operating system
    clipboard and now you can just paste it to the preceding style sheet. Using this
    method will ensure that the image fits exactly the dimension of the widget that
    you applied the style to. Your logo should now appear like so:![How to do it](img/B02820_01_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lastly, we will apply the wallpaper image to the background using a style sheet.
    Since the background dimension will change according to the window size, we cannot
    use `pixmap` in this case. Instead, we will use the `border-image` property in
    a style sheet to achieve this. Right click the main window and select **Change
    styleSheet** to open up the **Edit Style Sheet** window. We will add a new line
    under the style sheet of the central widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It's really that simple and easy! Your login screen should now look like this:![How
    to do it](img/B02820_01_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The resource system in Qt stores binary files, such as images, translation
    files, and so on, in the executable when it gets compiled. It reads the resource
    collection files (`.qrc`) in your project to locate the files that need to be
    stored in the executable and include them into the build process. A `.qrc` file
    looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: It uses XML format to store the paths of the resource files which are relative
    to the directory containing it. Do note that the listed resource files must be
    located in the same directory as the `.qrc` file, or one of its sub-directories.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing properties and sub-controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt's style sheet system enables us to create stunning and professional-looking
    UIs with ease. In this example, we will learn how to set custom properties to
    our widgets and use them to switch between different styles.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's try out the scenario described in the preceding paragraph by creating
    a new Qt project. I have prepared the UI for this purpose. The UI contains three
    buttons on the left side and a tab widget with three pages located at the right
    side, as shown in the following screenshot:![How to do it…](img/B02820_01_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The three buttons are blue in color because I''ve added the following style
    sheet to the main window (not to the individual button):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, I will explain to you what pseudo states are in Qt by adding the following
    style sheet to the main window, which you might be familiar with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We used the preceding style sheet in the previous tutorial to make the buttons
    change color when there is a mouse-over. This is made possible by Qt Style Sheet''s
    pseudo state, which in this case is the word `hover` separated from the `QPushButton`
    class by a colon. Every widget has a set of generic pseudo states, such as `active`,
    `disabled`, `enabled`, and so on, and also a set of pseudo states which are applicable
    to their widget type. For example, states such as `open` and `flat` are available
    for `QPushButton`, but not for `QLineEdit`. Let''s add the `pressed` pseudo state
    to change the buttons'' color to yellow when the user clicks on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Pseudo states allow the users to load a different set of style sheet based on
    the condition that applies to it. Qt pushes this concept further by implementing
    dynamic properties in Qt Style Sheets. This allows us to change the style sheet
    of a widget when a custom condition has been met. We can make use of this feature
    to change the style sheet of our buttons based on a custom condition that we can
    set using custom properties in Qt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we will add this style sheet to our main window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'What it does is basically change the push button''s background color to red
    if the property called `pagematches` returns `true`. Obviously, this property
    does not exist in the `QPushButton` class. However, we can add it to our buttons
    by using `QObject::setProperty()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your `MainWindow.cpp` source code, add the following code right after `ui->setupUi(this)`;:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will add a custom property called `pagematches` to the first
    button and set its value as `true`. This will make the first button turn red by
    default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After that, right click on the tab widget and choose **Go to slot**. A window
    will then pop up; select the **currentChanged(int)** option from the list and
    click **Ok**. Qt will generate a `slot` function for you, which looks something
    like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `slot` function will be called whenever we change page of the tab widget.
    We can then decide what we want it to do by adding our code into the `slot` function.
    To do that, open up `mainwindow.cpp` and you will see the function''s declaration
    there. Let''s add some code to the function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code basically does this: when the tab widget switches its current
    page, it sets the `pagematches` properties of all three buttons to `false`. Just
    be sure to reset everything before we decide which button should change to red.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, check the `index` variable supplied by the event signal, which will tell
    you the index number of the current page. Set the `pagematches` property of one
    of the buttons to `true` based on the index number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, refresh the style of all three buttons by calling `polish()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, build and run the project. You should now see the three buttons changing
    their color to red whenever you switch the tab widget to a different page. Also,
    the buttons will change color to green when there is a mouse-over, as well as
    change their color to yellow when you click on them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B02820_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qt provides users the freedom of adding their own custom properties to any type
    of widget. Custom properties are very useful if you want to change a particular
    widget when a special condition is met, where Qt doesn't provide such a context
    by default. This allows the user to extend the usability of Qt and makes it a
    flexible tool for customized solutions.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we have a row of buttons on our main window and we need one
    of them to change its color depending on which page the tab widget is currently
    showing, then there is no way the buttons would know when they should change their
    color, because Qt itself has no built-in context for this type of situation. To
    solve this issue, Qt provides us a method to add our own properties to the widgets,
    which is using a generic function called `QObject::setProperty()`. To read the
    custom property, we can use another function called `QObject::property()`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will talk about sub-controls in Qt Style Sheets. It's actually quite
    self-explanatory by looking at the term sub-controls. Often, a widget is not just
    a single object but a combination of more than one object or control in order
    to form a more complex widget, and such objects are called sub-controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a spin box widget contains an input field, a down button, an up
    button, an up arrow, and a down arrow, which is quite complicated compared to
    some other widgets. In this case, Qt grants us more flexibility by allowing us
    to change every single sub-control using a style sheet, if we wanted to. We can
    do so by specifying the name of the sub-control behind the widget''s class name,
    separated by a double colon. For instance, if I want to change the image of the
    down button in a spin box, I can write my style sheet like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: That will only apply the image to the down button of my spin box, and not to
    any other parts of the widget.
  prefs: []
  type: TYPE_NORMAL
- en: By combining custom properties, pseudo states, and sub-controls, Qt provides
    us with a very flexible method to customize our user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Visit the following link to learn more about pseudo states and sub-controls
    in Qt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://doc.qt.io/qt-4.8/stylesheet-reference.html](http://doc.qt.io/qt-4.8/stylesheet-reference.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Styling in QML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Qt Meta Language** or **Qt Modeling Language** (**QML**) is a Javascript-inspired
    user interface mark-up language used by Qt for designing user interfaces. Qt provides
    you with Qt Quick components (widgets powered by the QML technology) to easily
    design touch-friendly UI without C++ programming. We will learn more about how
    to use QML and Qt Quick components to design our program''s UI by following the
    steps given in the following section.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project by going to **File** | **New File or Project**. Select
    **Application** under **Project** category and choose **Qt Quick Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the **Choose** button, and that will bring you to the next window. Insert
    a name for your project and click the **Next** button again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another window will now appear and ask you to choose a minimum required Qt version.
    Pick the latest version installed on your computer and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, click **Next** again followed by **Finish**. Qt Creator will now
    create a new project for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the project is being created, you will see there are some differences
    compare to a C++ Qt project. You will see two `.qml` files, namely `main.qml`
    and `MainForm.ui.qml`, inside the project resource. These two files are the UI
    description files using the QML mark-up language. If you double click `main.qml`
    file, Qt Creator will open up the script editor and you will see something like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This file basically tells Qt to create a window and insert a set of UI called
    `MainForm` which is actually from the other `.qml` file called `MainForm.ui.qml`.
    It also tells Qt that when the user clicks on the **mouseArea** widget, the entire
    program should be terminated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, try to open the `MainForm.ui.qml` file by double-clicking on it. This time,
    Qt Designer (UI editor) will be opened instead, and you will see a completely
    different UI editor compared to the C++ project we did previously. This editor
    is also called the Qt Quick Designer, specially designed for editing QML-based
    UI only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you open up the `main.cpp` file in your project, you will see this line
    of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code basically tells Qt's QML engine to load the `main.qml` file
    when the program starts. If you want to load the other `.qml` file instead of
    `main.qml`, you know where to look for the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When `main.qml` is loaded by the QML engine, it will also import `MainForm.ui.qml`
    into the UI, since `MainForm` is being called in the `main.qml` file. Qt will
    check if `MainForm` is a valid UI by searching for its `.qml` file based on the
    naming convention. Basically the concept is similar to the C++ project we did
    in the previous section, whereby the `main.qml` file acts like the `main.cpp`
    file and `MainForm.ui.qml` acts like the `MainWindow` class. You can also create
    other UI templates and use them in `main.qml`. Hopefully this comparison will
    make it easier to understand how QML works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s open up `MainForm.ui.qml`. You should see three items listed on
    the navigator window: **Rectangle**, **mouseArea**, and **Text**. When these items
    are interpreted by the QML engine, it produces the following result on the canvas:![How
    to do it…](img/B02820_01_21.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Rectangle** item is basically the base layout of the window, which cannot
    be deleted. It is similar to the `centralWidget` we used in the previous section.
    The **mouseArea** item is an invincible item that gets triggered when the mouse
    is clicking on it, or when a finger is touching it (for mobile platforms). The
    mouse area is also used in a button component, which we will be using in a while.
    The **Text** component is self-explanatory: it is a label that displays a block
    of text on the application.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Navigator** window, we can hide or show an item by clicking on the
    icon besides the item which resembles an eye. When an item is hidden, it will
    not show on the canvas nor the compiled application. Just like the widgets in
    a C++ Qt project, Qt Quick components are arranged in a hierarchy based on the
    parent-child relationship. All the children items will be placed below the parent
    item with an indented position. In our case, you can see the **mouseArea** and
    **Text** items are all positioned slightly to the right compared to the **Rectangle**
    item, because they are both the children of the **Rectangle** item. We can re-arrange
    the parent-child relationship as well as their position in the hierarchy by using
    a click-and-drag method from the navigator window. You can try clicking on the
    **Text** item and dragging it on top of **mouseArea**. You will then see the **Text**
    item changes its position and is now located below the **mouseArea** with a wider
    indentation:![How to do it…](img/B02820_01_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also re-arrange them by using the arrow buttons located on top of the
    navigator window, as shown in the preceding screenshot. Anything that happens
    to the parent item will also affect all its children, such as moving the parent
    item, hide and show the parent item, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can pan around the canvas view by holding the middle mouse button (or mouse
    scroll) while moving your mouse around. You can also zoom in and out by scrolling
    your mouse while holding the *Ctrl* key on your keyboard. By default, scrolling
    your mouse will move the canvas view up and down. However, if your mouse cursor
    is on top of the horizontal scroll bar of the canvas, scrolling the mouse will
    move the view to the left and right.
  prefs: []
  type: TYPE_NORMAL
- en: Next, delete both the **mouseArea** and **Text** items as we will be learning
    how to create a user interface from scratch using QML and Qt Quick.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you've done, let's set the **Rectangle** item's size to `800x600`, as
    we're going to need a bigger space for the widgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up `main.qml` and remove these lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This is because the **mouseArea** item no longer exists and it will cause an
    error when compiling.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, remove the following code from `MainForm.ui.qml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This is removed for the same reason as the previous code, because the **mouseArea**
    item no longer exists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, copy the images we used in the previous C++ project over to the QML project's
    folder, because we are going re-create the same login screen, with QML!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the images to the resource file so that we can use them for our UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're done with that, open up Qt Quick Designer again and switch to the
    resource window. Click and drag the background image directly to the canvas. Then,
    switch over to the **Layout** tab on the properties pane and click the fill anchor
    button marked in red circle. This will make the background image always stick
    to the window size:![How to do it…](img/B02820_01_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click and drag a **Rectangle** component from the library window to the
    canvas. We will use this as the top panel for our program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the top panel, enable top anchor, left anchor, and right anchor so that
    it sticks to the top of the window and follow its width. Make sure all the margins
    are set to zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, go to the `Color` property of the top panel and select **Gradient** mode.
    Set the first color to `#805bcce9` and the second color to `#80000000`. This will
    create a half-transparent panel with a blue gradient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, add a text widget to the canvas and make it a child of the top panel.
    Set its text property to the current date and time (for example, Monday, 26-10-2015
    3:14 PM) for display purposes. Then, set the text color to white.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch over to the **Layout** tab and enable top anchor and left anchor so that
    the text widget will always stick to the top left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add a mouse area to the screen and set its size to `50x50`. Then, make
    it a child of the top panel by dragging it on top of the top panel in the navigator
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the color of the mouse area to blue (`#27a9e3`) and set its radius to `2`
    to make its corners slightly rounded. Then, enable top anchor and right anchor
    to make it stick to the top right corner of the window. Set the top anchor's margin
    to `8` and right anchor's margin to `10` to give out some space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, open up the resources window and drag the shutdown icon to the canvas.
    Then, make it a child of the mouse area item we created a moment ago. Then, enable
    the fill anchor to make it fit the size of the mouse area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Phew, that's a lot of steps! Now your items should be arranged like this on
    the **Navigator** window:![How to do it…](img/B02820_01_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The parent-child relationship and the layout anchors are both very important
    to keep the widgets in the correct positions when the main window changes its
    size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, your top panel should look something like this:![How to do it…](img/B02820_01_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will be working on the login form. First, add a new rectangle to the
    canvas by dragging it from the **Library** window. Resize the rectangle to `360x200`
    and set its radius to `15`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, set its color to `#80000000`, which will change it to black with `50%`
    transparency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, enable the vertical center anchor and the horizontal center anchor
    to make it always align to the center of the window. Then, set the margin of the
    vertical center anchor to `100` so that it moves slightly lower to the bottom
    to give space to the logo. The following screenshot illustrates the settings of
    the anchors:![How to do it…](img/B02820_01_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the text widgets to the canvas. Make them the children of the login form
    (rectangle widget) and set their text property to `Username:` and `Password:`
    respectively. Then, change their text color to white and position them accordingly.
    We don't need to set a margin this time because they will follow the rectangle's
    position.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add two text input widgets to the canvas and place them next to the text
    widgets we created just now. Make sure the text inputs are also the children of
    the login form. Since the text inputs don't contain any background color property,
    we need to add two rectangles to the canvas to use as their background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two rectangles to the canvas and make each of them a child of one of the
    text inputs we created just now. Then, set the radius property to `5` to give
    them some rounded corners. After that, enable fill anchors on both of the rectangles
    so that they will follow the size of the text input widgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we're going to create the login button below the password field.
    First, add a mouse area to the canvas and make it a child of the login form. Then,
    resize it to your preferred dimension and move it into place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the mouse area also does not contain any background color property, we
    need to add a rectangle widget and make it a child of the mouse area. Set the
    color of the rectangle to blue (`#27a9e3`) and enable the fill anchor so that
    it fits nicely with the mouse area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add a text widget to the canvas and make it a child of the login button.
    Change its text color to white and set its text property to `Login`. Finally,
    enable the horizontal center anchor and the vertical center anchor to align it
    to the center of the button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now get a login form that looks pretty similar to the one we made in
    the C++ project:![How to do it…](img/B02820_01_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After we have done the login form, it's time to add the logo. It's actually
    very simple. First, open up the resources window and drag the logo image to the
    canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make it a child of the login form and set its size to `512x200`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position it above the login form and you're done!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is what the entire UI look like when compiled. We have successfully re-created
    the login screen from the C++ project, but this time we did it with QML and Qt
    Quick!![How to do it…](img/B02820_01_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qt Quick editor uses a very different approach for placing widgets in the application
    compared to the form editor. It's entirely up to the user which method is best
    suited for him/her.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows what the Qt Quick Designer looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B02820_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now look at the various elements of the editor''s UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigator**: The **Navigator** window displays the items in the current QML
    file as a tree structure. It''s similar to the object operator window in the other
    Qt Designer we used in previous section.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Library**: The **Library** window displays all the Qt Quick Components or
    Qt Quick Controls available in QML. You can click and drag it to the canvas window
    to add to your UI. You can also create your own custom QML components and display
    it here.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Resources**: The **Resources** window displays all the resources in a list
    which can then be used in your UI design.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Imports**: The **Imports** window allows you to import different QML modules
    into your current QML file, such as a bluetooth module, webkit module, positioning
    module, and so on, to add additional functionality to your QML project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**State pane**: Stat pane displays the different states in the QML project
    which typically describe UI configurations, such as the UI controls, their properties
    and behavior, and the available actions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Properties pane**: Similar to the property editor we used in previous section,
    this properties pane in QML Designer displays the properties of the selected item.
    You can also change the properties of the items in the code editor as well.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Canvas**: Canvas is the working area where you create QML components and
    design applications.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exposing QML object pointer to C++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes we want to modify the properties of a QML object through C++ scripting,
    such as changing the text of a label, hiding/showing the widget, changing its
    size, and so on. Qt's QML engine allows you to register your QML objects to C++
    types which automatically exposes all its properties.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want to create a label in QML and change its text occasionally. In order
    to expose the label object to C++, we can do the following steps. First, create
    a C++ class called `MyLabel` that extends from `QObject` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `mylabel.cpp` source file, define a function called `SetMyObject()`
    to save the object pointer. This function will later be called in QML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, in `main.cpp`, include `MyLabel` header and register it to QML
    engine using the function `qmlRegisterType()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Notice that there are four parameters you need to declare in `qmlRegisterType()`.
    Besides declaring your class name (`MyLabel`), you also need to declare your library
    name (`MyLabelLib`) and its version (`1.0`), which will be used for importing
    your class to QML later on.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the QML engine is fully aware of our custom label class, we can then
    map it to our label object in QML and import the class library we defined earlier
    by calling import `MyLabelLib 1.0` in our QML file. Notice that the library name
    and its version number have to match with the one you declared in `main.cpp`,
    otherwise it will throw you an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'After declaring `MyLabel` in QML and setting its ID as `mylabels`, call `mylabel.SetMyObject(myLabel)`
    to expose its pointer to C/C++ right after the label is being initialized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Please be aware that you need to wait until the label is fully initiated before
    exposing its pointer to C/C++, otherwise you may cause the program to crash. To
    make sure it's fully initiated, call `SetMyObject()` within `Component.onCompleted`
    and not any other places.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the QML label has been exposed to C/C++, we can change any of its
    properties by calling `setProperty()` function. For instance, we can set its visibility
    to `true` and change its text to `Bye bye world!`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides changing the properties, we can also call its functions by calling
    `QMetaObject::invokeMethod()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Or simply, we can call the `invokedMethod()` function with only two parameters
    if we do not expect any values to be returned from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QML is designed to be easily extensible through C++ code. The classes in the
    Qt QML module enable QML objects to be loaded and manipulated from C++, and the
    nature of the QML engine's integration with Qt's meta object system enables C++
    functionality to be invoked directly from QML. To provide some C++ data or functionality
    to QML, it must be made available from a QObject-derived class.
  prefs: []
  type: TYPE_NORMAL
- en: QML object types can be instantiated from C++ and inspected in order to access
    their properties, invoke their methods, and receive their signal notifications.
    This is possible due to the fact that all QML object types are implemented using
    QObject-derived classes, enabling the QML engine to dynamically load and introspect
    objects through the Qt meta object system.
  prefs: []
  type: TYPE_NORMAL
