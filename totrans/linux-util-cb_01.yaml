- en: Chapter 1. Using the Terminal / Command Line
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Command retrieval and line editing
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using history
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filename auto-completion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shell prompt
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other environment variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using aliases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.bashrc` file
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with blanks and special characters in filenames
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the `$?` variable
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirection and piping
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending output from one terminal to another
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Screen program
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing how to use the command line efficiently will really help you get the
    most out of your computer. There are many ways to save time and effort when typing
    commands, you just need to know what they are.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: There are many different Linux environments available. This chapter focuses
    on the popular **Bash** shell.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Command retrieval and line editing
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A standard Bash terminal is automatically set to insert mode, so you don't have
    to press the *Insert* key to insert text. Use the up and down arrow keys to recall
    a previous command, and then other cursor keys to edit that line as needed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![Command retrieval and line editing](img/3008_01_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All you need for this example is a terminal running the Bash shell. Other terminals
    may not have these capabilities.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will run a few commands as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Type in the command `route` and press the *Enter* key.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same for `uptime`, `ls`, `date`, and `sync`, pressing *Enter* after each
    command.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now press the up arrow key one time. You should see the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now press the up arrow two more times. You should see `date` and `ls`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Enter*. The `ls` command will run again. Pressing *Enter* will always
    run the command shown.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The line is stored in a buffer with full editing capabilities. This buffer is
    sent to the OS when the *Enter* key is pressed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'The summary of the keys used for retrieval and editing is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**Up arrow**: It is used to scroll up the history buffer'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Down arrow**: It is used to scroll down the history buffer'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Home**: It is used to bring the cursor to the beginning of the line'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**End**: It is used to bring the cursor to the end of the line'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete**: It is used to delete the character to the right of the cursor'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backspace**: It is used to delete the character to the left of the cursor
    and shift the line'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Left and right arrow**: These are the cursor movement keys'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using history
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard Bash shell includes a **history** function. It records each command
    in a database that can be shown by running the `history` command. In this section
    we have shown how this is done.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All you need is a Bash terminal to follow the given steps.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3008_01_02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run a few commands such as `route`, `uptime`, `date`, and `sync`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `history` command.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for a command you would like to run again, but instead of typing the command,
    type an exclamation point (`!`) and then the number next to the command as shown
    in the history listing, and press *Enter*.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That command will run again.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of the command line history as a linear database. You can scroll up and
    down until you see the command you want. This is also helpful to recall something
    you did a while back. The `HISTSIZE` environment variable controls how many commands
    will be saved in the buffer.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful with this feature. Make sure you have the correct command before
    running it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Filename auto-completion
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running a command, you do not have to type the entire filename. This saves
    a lot of time and effort, and also helps prevent typos.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'The *Tab* key is used to invoke filename auto-completion. See the following
    screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![Filename auto-completion](img/3008_01_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: You only need to type enough characters to make the filename you want unique,
    and then press *Tab*. If you didn't type enough characters, you will hear the
    console beep (in most shells). If you now press *Tab* again, all of the possibilities
    will be displayed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All you need for this example is a terminal running the Bash shell.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Change to your home directory, in my case it''s:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a directory using the following command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Change to it `Linuxbook` using the following command:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now let''s create some dummy files; run using the following command:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now type `ls -la u` and then press *Tab*. The rest of the filename **"unique1.txt"**
    will appear. Press *Enter*.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now type `ls -al file` and press *Tab*. Nothing will happen, and your console
    may beep. Press *Tab* again. Now all 4 filenames will appear.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `4`, press *Tab* again, and then *Enter*. The command `ls -la file4` will
    run.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This may look complicated or even clumsy but if you give it a chance you will
    become an expert in no time at all.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: The shell prompt
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A standard terminal usually has a rather cryptic command line prompt. This should
    be changed by modifying the **PS1** environment variable.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An example is shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008_01_04.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Refer to the line **export PS1="\u \h \w \$ "**
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: The `\u` command means to show the current user of this shell.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `\h` command shows the hostname of this machine.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `\w` command means to show the full path of the current directory. This
    change is highly recommended, as the user doesn't have to type **pwd** (**Print
    Working Directory**) all the time to know what directory is being used.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `\$` means to display a `$` or `#` depending on the effective UID.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many more options, such as showing the time and date, using colors,
    and so on. For more information, run `man bash` and search for `PS1`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Other environment variables
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `PS1` variable is only one of literally hundreds of environment variables.
    Don''t worry, you don''t have to know them all! The following are a few very useful
    ones:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '`PS1`: It shows and sets the command line prompt'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USER`: It shows the current user'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HOSTNAME`: It shows the current hostname for this machine'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HOME`: It shows the home directory of the current user'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHELL`: It shows the current shell this terminal is running in'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TERM`: It shows which terminal type is being used'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATH`: It shows and sets the directories where programs are searched for'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PWD`: It shows the current working directory'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EDITOR`: It can be set to the full path to your desired text editor for use
    with certain commands such as `crontab -e`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TZ`: It shows and sets the time zone variable'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HISTSIZE`: It shows and sets the size of the history buffer'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of these are self-explanatory; however, a few need more discussion. The
    `PATH` environment variable is where commands are searched for in the filesystem.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'The `echo` command is used to display the contents of a variable:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![Other environment variables](img/3008_01_05.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Prepending a dot to the `PATH` means the program will be looked for in the
    current directory first, before searching the rest of the path. This is very useful
    during the code development for example. Do this by running:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `EDITOR` variable can be set to your favorite text editor. Most people
    use `vi (or vim)`; however, you can point it to the one you want. If you change
    this, be sure to use the full path. To change the `EDITOR` variable do this:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'An `export` can be removed by setting it to nothing:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By convention, environment variables are usually written in uppercase. View
    the man pages and/or search Google for more information on these variables.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of these environment variables just as you would if you were using a programming
    language. In this case, the type of the variable is determined by the OS. For
    example, you could type `A=1` or `A="This is a string"`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: The OS knows the difference. Also, there is variable scope. Notice I did not
    use `export` above. That means this `A` is local to this shell. Only exporting
    a variable will make it available to other shells (after sourcing the file).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Using aliases
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wouldn't it be nice if you could easily create a simple command without having
    to make a script out of it? Well, there is a way. This is done using **aliases**.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以轻松创建一个简单的命令而无需将其制作成脚本，那不是很好吗？好吧，有办法。这是使用**别名**完成的。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps to create an alias:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建别名的步骤：
- en: Type `tput clear` and press *Enter*. Your screen should have cleared.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`tput clear`并按*Enter*。您的屏幕应该已经清空了。
- en: Now enter `alias cls="tput clear"`. Now when you run `cls` it will do the same
    thing.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入`alias cls="tput clear"`。现在当您运行`cls`时，它将执行相同的操作。
- en: Let's create some more. To show a long directory listing enter `alias la="ls
    -la"`. Enter `'la'` to run the alias.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再创建一些。要显示长目录列表，请输入`alias la="ls -la"`。输入`'la'`来运行别名。
- en: To show a long listing with the most current files last enter `'alias lt="ls
    -latr"'`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示最新文件的长列表，请输入`'alias lt="ls -latr"'`。
- en: If you create an alias and then decide you no longer want it you can remove
    it by using the `unalias` command, for example, `unalias cls`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您创建了一个别名，然后决定不再需要它，可以使用`unalias`命令将其删除，例如`unalias cls`。
- en: 'You can also use aliases to move around the filesystem efficiently. This is
    very handy and will save you an incredible amount of typing. Here are some examples:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用别名有效地在文件系统中移动。这非常方便，将为您节省大量的输入。以下是一些示例：
- en: '`mkdir /home/jklewis/linuxbook`'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mkdir /home/jklewis/linuxbook`'
- en: '`alias lbook="cd /home/jklewis/linuxbook"`'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`alias lbook="cd /home/jklewis/linuxbook"`'
- en: '`lbook`'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lbook`'
- en: 'You will now be taken to that directory. Here is something I make frequent
    use of on my systems:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将进入该目录。这是我在我的系统上经常使用的东西：
- en: '`export LBOOK="/home/jklewis/linuxbook"`'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`export LBOOK="/home/jklewis/linuxbook"`'
- en: '`alias lbook="cd $LBOOK"`'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`alias lbook="cd $LBOOK"`'
- en: '`lbook`'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lbook`'
- en: 'As you can see, running `lbook` will take you to the directory as shown above.
    However, you can also use the `LBOOK` variable to copy files to that directory:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，运行`lbook`将带您到如上所示的目录。但是，您也可以使用`LBOOK`变量将文件复制到该目录：
- en: '`cd /tmp`'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cd /tmp`'
- en: '`touch f1.txt`'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`touch f1.txt`'
- en: '`cp f1.txt $LBOOK`'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cp f1.txt $LBOOK`'
- en: The file `f1.txt` will now exist in the `/home/jklewis/linuxbook` directory.
    This becomes even more handy when extremely long filenames are used.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`f1.txt`现在将存在于`/home/jklewis/linuxbook`目录中。当使用非常长的文件名时，这将变得更加方便。
- en: Tip
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To remove the `lbook` alias run `unalias lbook`
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除`lbook`别名，请运行`unalias lbook`
- en: You can list your aliases by just running `alias` without any parameters. Any
    time you find yourself constantly typing the same commands or filenames consider
    creating an alias for it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过只运行`alias`而不使用任何参数来列出您的别名。每当您发现自己不断输入相同的命令或文件名时，请考虑为其创建别名。
- en: There's more...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Note that the above examples will only be effective in that terminal and will
    not persist across a reboot. See the next section on how to make the changes permanent.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述示例仅在该终端中有效，并且不会在重新启动后保留。请参阅下一节，了解如何使更改永久生效。
- en: Also, in some cases, what you want to do may be too complicated for an alias,
    for example, to check for the proper number of parameters. This is where you can
    create a shell script, which will be covered in [Chapter 8](ch08.html "Chapter 8. Working
    with Scripts"), *Working with Scripts*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在某些情况下，您想要做的可能对于别名来说太复杂了，例如，检查正确数量的参数。这就是您可以创建一个shell脚本的地方，这将在[第8章](ch08.html
    "第8章。使用脚本")中介绍，*使用脚本*。
- en: The .bashrc file
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .bashrc文件
- en: There are many environment variables we can look at and change. However, we
    certainly don't want to enter these every time we start a new shell. There is
    a special file, named `.bashrc`, which is used to store your settings. It is located
    in the user's home directory. For example, the `.bashrc` file for the root user
    is in the `/root` directory.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看和更改许多环境变量。但是，我们肯定不想每次启动新shell时都输入这些内容。有一个特殊的文件，名为`.bashrc`，用于存储您的设置。它位于用户的主目录中。例如，root用户的`.bashrc`文件位于`/root`目录中。
- en: 'Here is a `.bashrc` file from one of my systems:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我其中一个系统的`.bashrc`文件：
- en: '![The .bashrc file](img/3008_01_06.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![.bashrc文件](img/3008_01_06.jpg)'
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The description of the lines is as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 行的描述如下：
- en: To comment a line, precede it with a `#` symbol.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要注释一行，请在其前面加上`#`符号。
- en: To create a variable, use the `export` tag.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个变量，请使用`export`标签。
- en: To create an alias, use the `alias` tag (as shown earlier in this chapter).
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建别名，请使用`alias`标签（如本章前面所示）。
- en: Control statements are allowed; see the `if` clause in the previous screenshot.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许控制语句；请参见前面屏幕截图中的`if`子句。
- en: 'After modifying your `.bashrc` file, remember to source it using the dot operator
    as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改您的`.bashrc`文件后，请记得使用点运算符对其进行源操作，如下所示：
- en: '[PRE8]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Dealing with blanks and special characters in filenames
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理文件名中的空格和特殊字符
- en: Linux (and Unix) filesystems were not originally designed to handle blanks in
    filenames. This can cause quite a few problems, as the shell treats each item
    after a blank as another file or parameter. A solution is to use quotes, the backslash,
    or the *Tab* key.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Linux（和Unix）文件系统最初并不是为处理文件名中的空格而设计的。这可能会导致许多问题，因为shell会将空格后的每个项目视为另一个文件或参数。解决方案是使用引号、反斜杠或*Tab*键。
- en: The following sections assume the user has not modified the Bash **Internal
    Field** Separator (**IFS**) variable.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节假定用户尚未修改Bash **内部字段**分隔符（**IFS**）变量。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'See the following screenshot. I purposely created three "bad" filenames:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下屏幕截图。我故意创建了三个“坏”文件名：
- en: '![How to do it...](img/3008_01_07.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3008_01_07.jpg)'
- en: Run `ls -la file with blanks.txt` and notice the errors.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ls -la file with blanks.txt`并注意错误。
- en: 'Now run it again, but enclose the filename in quotes: `ls -la "file with blanks.txt"`;
    it will work properly now.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再次运行它，但用引号括起文件名：`ls -la "file with blanks.txt"`；现在它将正常工作。
- en: Enter `ls -la file` and press *Tab*. It will escape the blanks for you.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`ls -la file`并按*Tab*。它会为您转义空格。
- en: Run `ls -la special>.txt`. Observe the error.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ls -la special>.txt`。观察错误。
- en: 'Enclose in quotes as before using the following command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用以下命令之前加上引号：
- en: '[PRE9]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now try `ls -la -startswithdash.txt` and then try quoting it. Doesn't work,
    right?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Precede the filename with the `./` operator using the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, this can also be a problem if special characters have been used
    in the filename. Study this one a bit and it will become clear. Remember the *Tab*
    key; it works really well for just about every case. If the file starts with a
    dash, use the `./` operator. It means to refer to the file in the current directory.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The issue of blanks and special characters is even more of a problem in scripts.
    This will be covered in more detail in [Chapter 8](ch08.html "Chapter 8. Working
    with Scripts"), *Working with Scripts*.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the $? variable
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typically, when a command is run in Linux it performs a task; it either reports
    what it did or indicates an error occurred. An internal return code is also generated,
    and is displayed by running the `echo $?` command. Note that this must be the
    very next thing typed after the original command.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows `echo $?`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the $? variable](img/3008_01_08.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a quick example of **echo $?**:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It should succeed. Run the following command:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You should get a `0` for success.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run the following command:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It may take a second or two to complete.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Run `echo $?` again. It should return a non-zero value to indicate failure.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general, a return of zero means success. A non-zero return means an error
    has occurred, and in many cases the code returned indicates what the error was.
    Remember this the next time you type a command, hit *Enter*, and get the shell
    prompt back without anything appearing to happen.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `man` and `info` pages for a command typically contain an entry showing
    what the errors mean. If the `man` page is lacking, consult the web.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Redirection and piping
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you run a command, say `route`, and want to save the output in a file.
    The **redirection** (`>`) operator is used to do this instead of sending the output
    to the screen.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try some redirection:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Enter `ifconfig > file1.txt`. You won't see anything, because the output went
    into the file.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `cat file1.txt`. You should now see the output.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This works the other direction as well, to read from a file run the following
    command:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can even do both in one step:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can also send the output to another command using the pipe operator. For
    example, run `route | grep eth0`. The above command would display only the lines
    from `route` that contain the phrase `eth0`.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is something that I use all the time. Say I have written a program in
    C a long time ago, have several versions, and want to find the latest one. I could
    run `locate` to find them all:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This might return quite a few lines. How can I run `ls` on each file to find
    the latest one? By piping the output into the `xargs` command and then `ls`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will now show the time and date of each file.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: This might seem a bit complicated at first, but if you experiment a little it
    will become second nature to you.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Sending output from one terminal to another
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a really handy feature that is unique to Linux/UNIX systems. It's most
    useful in scripts but can be used on the command line as well. If you have a system
    available try the given steps.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need two open terminals.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We show how to send the output from one terminal to another in the following
    steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: In one terminal run the `tty` command. The output should be something like `/dev/pts/16`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the other terminal run the `route` command. You will see the output in that
    terminal.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run `route` again, but now using the command:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The output will go to that other terminal.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Terminals on Linux systems are devices that have their own buffer space. By
    referring to the device by name you can write to it.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This feature is even more useful in scripts, which we will see in [Chapter 8](ch08.html
    "Chapter 8. Working with Scripts"), *Working with Scripts*.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Using the Screen program
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Screen** is a full-screen window manager that shares a physical terminal
    with other processes (which are usually other terminals/shells). It is normally
    used when no other manager or desktop is available, such as on a server. It has
    a scroll-back history buffer and also allows for copy and paste of text between
    windows.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a brief list of some of the many key bindings available with
    Screen:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *?*: It displays a list of commands and their key bindings'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *C*: It brings up a new window'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *D*: It detaches a window'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *N*: It is used to go to the next window in the sequence'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *P*: It is used to go to the previous window in the sequence'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *#* (where # is a number): It is used to go directly to that
    window'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *"*: It shows the list of windows; user can select any one by
    the number'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a list of frequently used commands:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '`screen -list`: It shows all of the windows'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screen <program>`: It creates a new window and run that program in it'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An example of running the Screen utility is as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: In a terminal run the `screen -L` command.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now press *Ctrl* + *A* and then press *C*. This will create another window.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do this two more times.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try typing *Ctrl* + *A* + *0*.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try *Ctrl* + *A* + *3*.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, step 1 will create a new window, `window 0`. If you
    are running inside a window manager you may notice the title change showing which
    window it is.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 will create another window. After step 3, you will have 4 windows in
    total.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: When you perform the actions in step 4, you should be in `window 0`. Typing
    *Ctrl* + *a* + *3* will take you to `window 3`.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a helpful hint, if you are running only a command line with no desktop,
    you may want to change your `PS1` variable to something like the following in
    your `.bashrc` file:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now the prompt will always show which window you are in.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: This describes only a small part of what Screen can do. Consult the `man` page
    for more information.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
