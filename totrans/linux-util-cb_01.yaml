- en: Chapter 1. Using the Terminal / Command Line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Command retrieval and line editing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filename auto-completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shell prompt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using aliases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.bashrc` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with blanks and special characters in filenames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the `$?` variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirection and piping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending output from one terminal to another
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Screen program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing how to use the command line efficiently will really help you get the
    most out of your computer. There are many ways to save time and effort when typing
    commands, you just need to know what they are.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different Linux environments available. This chapter focuses
    on the popular **Bash** shell.
  prefs: []
  type: TYPE_NORMAL
- en: Command retrieval and line editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A standard Bash terminal is automatically set to insert mode, so you don't have
    to press the *Insert* key to insert text. Use the up and down arrow keys to recall
    a previous command, and then other cursor keys to edit that line as needed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Command retrieval and line editing](img/3008_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All you need for this example is a terminal running the Bash shell. Other terminals
    may not have these capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will run a few commands as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Type in the command `route` and press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same for `uptime`, `ls`, `date`, and `sync`, pressing *Enter* after each
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now press the up arrow key one time. You should see the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now press the up arrow two more times. You should see `date` and `ls`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Enter*. The `ls` command will run again. Pressing *Enter* will always
    run the command shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The line is stored in a buffer with full editing capabilities. This buffer is
    sent to the OS when the *Enter* key is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The summary of the keys used for retrieval and editing is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Up arrow**: It is used to scroll up the history buffer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Down arrow**: It is used to scroll down the history buffer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Home**: It is used to bring the cursor to the beginning of the line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**End**: It is used to bring the cursor to the end of the line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete**: It is used to delete the character to the right of the cursor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backspace**: It is used to delete the character to the left of the cursor
    and shift the line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Left and right arrow**: These are the cursor movement keys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard Bash shell includes a **history** function. It records each command
    in a database that can be shown by running the `history` command. In this section
    we have shown how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All you need is a Bash terminal to follow the given steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3008_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run a few commands such as `route`, `uptime`, `date`, and `sync`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `history` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for a command you would like to run again, but instead of typing the command,
    type an exclamation point (`!`) and then the number next to the command as shown
    in the history listing, and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That command will run again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of the command line history as a linear database. You can scroll up and
    down until you see the command you want. This is also helpful to recall something
    you did a while back. The `HISTSIZE` environment variable controls how many commands
    will be saved in the buffer.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful with this feature. Make sure you have the correct command before
    running it.
  prefs: []
  type: TYPE_NORMAL
- en: Filename auto-completion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running a command, you do not have to type the entire filename. This saves
    a lot of time and effort, and also helps prevent typos.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *Tab* key is used to invoke filename auto-completion. See the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Filename auto-completion](img/3008_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You only need to type enough characters to make the filename you want unique,
    and then press *Tab*. If you didn't type enough characters, you will hear the
    console beep (in most shells). If you now press *Tab* again, all of the possibilities
    will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All you need for this example is a terminal running the Bash shell.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Change to your home directory, in my case it''s:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a directory using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Change to it `Linuxbook` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create some dummy files; run using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now type `ls -la u` and then press *Tab*. The rest of the filename **"unique1.txt"**
    will appear. Press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now type `ls -al file` and press *Tab*. Nothing will happen, and your console
    may beep. Press *Tab* again. Now all 4 filenames will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `4`, press *Tab* again, and then *Enter*. The command `ls -la file4` will
    run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This may look complicated or even clumsy but if you give it a chance you will
    become an expert in no time at all.
  prefs: []
  type: TYPE_NORMAL
- en: The shell prompt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A standard terminal usually has a rather cryptic command line prompt. This should
    be changed by modifying the **PS1** environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Refer to the line **export PS1="\u \h \w \$ "**
  prefs: []
  type: TYPE_NORMAL
- en: The `\u` command means to show the current user of this shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `\h` command shows the hostname of this machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `\w` command means to show the full path of the current directory. This
    change is highly recommended, as the user doesn't have to type **pwd** (**Print
    Working Directory**) all the time to know what directory is being used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `\$` means to display a `$` or `#` depending on the effective UID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many more options, such as showing the time and date, using colors,
    and so on. For more information, run `man bash` and search for `PS1`.
  prefs: []
  type: TYPE_NORMAL
- en: Other environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `PS1` variable is only one of literally hundreds of environment variables.
    Don''t worry, you don''t have to know them all! The following are a few very useful
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PS1`: It shows and sets the command line prompt'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USER`: It shows the current user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HOSTNAME`: It shows the current hostname for this machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HOME`: It shows the home directory of the current user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHELL`: It shows the current shell this terminal is running in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TERM`: It shows which terminal type is being used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATH`: It shows and sets the directories where programs are searched for'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PWD`: It shows the current working directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EDITOR`: It can be set to the full path to your desired text editor for use
    with certain commands such as `crontab -e`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TZ`: It shows and sets the time zone variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HISTSIZE`: It shows and sets the size of the history buffer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of these are self-explanatory; however, a few need more discussion. The
    `PATH` environment variable is where commands are searched for in the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `echo` command is used to display the contents of a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Other environment variables](img/3008_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Prepending a dot to the `PATH` means the program will be looked for in the
    current directory first, before searching the rest of the path. This is very useful
    during the code development for example. Do this by running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `EDITOR` variable can be set to your favorite text editor. Most people
    use `vi (or vim)`; however, you can point it to the one you want. If you change
    this, be sure to use the full path. To change the `EDITOR` variable do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'An `export` can be removed by setting it to nothing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: By convention, environment variables are usually written in uppercase. View
    the man pages and/or search Google for more information on these variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of these environment variables just as you would if you were using a programming
    language. In this case, the type of the variable is determined by the OS. For
    example, you could type `A=1` or `A="This is a string"`.
  prefs: []
  type: TYPE_NORMAL
- en: The OS knows the difference. Also, there is variable scope. Notice I did not
    use `export` above. That means this `A` is local to this shell. Only exporting
    a variable will make it available to other shells (after sourcing the file).
  prefs: []
  type: TYPE_NORMAL
- en: Using aliases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wouldn't it be nice if you could easily create a simple command without having
    to make a script out of it? Well, there is a way. This is done using **aliases**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to create an alias:'
  prefs: []
  type: TYPE_NORMAL
- en: Type `tput clear` and press *Enter*. Your screen should have cleared.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now enter `alias cls="tput clear"`. Now when you run `cls` it will do the same
    thing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create some more. To show a long directory listing enter `alias la="ls
    -la"`. Enter `'la'` to run the alias.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To show a long listing with the most current files last enter `'alias lt="ls
    -latr"'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you create an alias and then decide you no longer want it you can remove
    it by using the `unalias` command, for example, `unalias cls`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use aliases to move around the filesystem efficiently. This is
    very handy and will save you an incredible amount of typing. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mkdir /home/jklewis/linuxbook`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`alias lbook="cd /home/jklewis/linuxbook"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lbook`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now be taken to that directory. Here is something I make frequent
    use of on my systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '`export LBOOK="/home/jklewis/linuxbook"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`alias lbook="cd $LBOOK"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lbook`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see, running `lbook` will take you to the directory as shown above.
    However, you can also use the `LBOOK` variable to copy files to that directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cd /tmp`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`touch f1.txt`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cp f1.txt $LBOOK`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The file `f1.txt` will now exist in the `/home/jklewis/linuxbook` directory.
    This becomes even more handy when extremely long filenames are used.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To remove the `lbook` alias run `unalias lbook`
  prefs: []
  type: TYPE_NORMAL
- en: You can list your aliases by just running `alias` without any parameters. Any
    time you find yourself constantly typing the same commands or filenames consider
    creating an alias for it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that the above examples will only be effective in that terminal and will
    not persist across a reboot. See the next section on how to make the changes permanent.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in some cases, what you want to do may be too complicated for an alias,
    for example, to check for the proper number of parameters. This is where you can
    create a shell script, which will be covered in [Chapter 8](ch08.html "Chapter 8. Working
    with Scripts"), *Working with Scripts*.
  prefs: []
  type: TYPE_NORMAL
- en: The .bashrc file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many environment variables we can look at and change. However, we
    certainly don't want to enter these every time we start a new shell. There is
    a special file, named `.bashrc`, which is used to store your settings. It is located
    in the user's home directory. For example, the `.bashrc` file for the root user
    is in the `/root` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a `.bashrc` file from one of my systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The .bashrc file](img/3008_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The description of the lines is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To comment a line, precede it with a `#` symbol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a variable, use the `export` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create an alias, use the `alias` tag (as shown earlier in this chapter).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Control statements are allowed; see the `if` clause in the previous screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After modifying your `.bashrc` file, remember to source it using the dot operator
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Dealing with blanks and special characters in filenames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux (and Unix) filesystems were not originally designed to handle blanks in
    filenames. This can cause quite a few problems, as the shell treats each item
    after a blank as another file or parameter. A solution is to use quotes, the backslash,
    or the *Tab* key.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections assume the user has not modified the Bash **Internal
    Field** Separator (**IFS**) variable.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'See the following screenshot. I purposely created three "bad" filenames:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Run `ls -la file with blanks.txt` and notice the errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run it again, but enclose the filename in quotes: `ls -la "file with blanks.txt"`;
    it will work properly now.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `ls -la file` and press *Tab*. It will escape the blanks for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `ls -la special>.txt`. Observe the error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enclose in quotes as before using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now try `ls -la -startswithdash.txt` and then try quoting it. Doesn't work,
    right?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Precede the filename with the `./` operator using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this can also be a problem if special characters have been used
    in the filename. Study this one a bit and it will become clear. Remember the *Tab*
    key; it works really well for just about every case. If the file starts with a
    dash, use the `./` operator. It means to refer to the file in the current directory.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The issue of blanks and special characters is even more of a problem in scripts.
    This will be covered in more detail in [Chapter 8](ch08.html "Chapter 8. Working
    with Scripts"), *Working with Scripts*.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the $? variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typically, when a command is run in Linux it performs a task; it either reports
    what it did or indicates an error occurred. An internal return code is also generated,
    and is displayed by running the `echo $?` command. Note that this must be the
    very next thing typed after the original command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows `echo $?`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the $? variable](img/3008_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a quick example of **echo $?**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'It should succeed. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You should get a `0` for success.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It may take a second or two to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Run `echo $?` again. It should return a non-zero value to indicate failure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general, a return of zero means success. A non-zero return means an error
    has occurred, and in many cases the code returned indicates what the error was.
    Remember this the next time you type a command, hit *Enter*, and get the shell
    prompt back without anything appearing to happen.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `man` and `info` pages for a command typically contain an entry showing
    what the errors mean. If the `man` page is lacking, consult the web.
  prefs: []
  type: TYPE_NORMAL
- en: Redirection and piping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you run a command, say `route`, and want to save the output in a file.
    The **redirection** (`>`) operator is used to do this instead of sending the output
    to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try some redirection:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter `ifconfig > file1.txt`. You won't see anything, because the output went
    into the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `cat file1.txt`. You should now see the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This works the other direction as well, to read from a file run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can even do both in one step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can also send the output to another command using the pipe operator. For
    example, run `route | grep eth0`. The above command would display only the lines
    from `route` that contain the phrase `eth0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is something that I use all the time. Say I have written a program in
    C a long time ago, have several versions, and want to find the latest one. I could
    run `locate` to find them all:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This might return quite a few lines. How can I run `ls` on each file to find
    the latest one? By piping the output into the `xargs` command and then `ls`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will now show the time and date of each file.
  prefs: []
  type: TYPE_NORMAL
- en: This might seem a bit complicated at first, but if you experiment a little it
    will become second nature to you.
  prefs: []
  type: TYPE_NORMAL
- en: Sending output from one terminal to another
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a really handy feature that is unique to Linux/UNIX systems. It's most
    useful in scripts but can be used on the command line as well. If you have a system
    available try the given steps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need two open terminals.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We show how to send the output from one terminal to another in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In one terminal run the `tty` command. The output should be something like `/dev/pts/16`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the other terminal run the `route` command. You will see the output in that
    terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run `route` again, but now using the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The output will go to that other terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Terminals on Linux systems are devices that have their own buffer space. By
    referring to the device by name you can write to it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This feature is even more useful in scripts, which we will see in [Chapter 8](ch08.html
    "Chapter 8. Working with Scripts"), *Working with Scripts*.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Screen program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Screen** is a full-screen window manager that shares a physical terminal
    with other processes (which are usually other terminals/shells). It is normally
    used when no other manager or desktop is available, such as on a server. It has
    a scroll-back history buffer and also allows for copy and paste of text between
    windows.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a brief list of some of the many key bindings available with
    Screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *?*: It displays a list of commands and their key bindings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *C*: It brings up a new window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *D*: It detaches a window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *N*: It is used to go to the next window in the sequence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *P*: It is used to go to the previous window in the sequence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *#* (where # is a number): It is used to go directly to that
    window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A* + *"*: It shows the list of windows; user can select any one by
    the number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a list of frequently used commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`screen -list`: It shows all of the windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screen <program>`: It creates a new window and run that program in it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An example of running the Screen utility is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In a terminal run the `screen -L` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now press *Ctrl* + *A* and then press *C*. This will create another window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do this two more times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try typing *Ctrl* + *A* + *0*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try *Ctrl* + *A* + *3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, step 1 will create a new window, `window 0`. If you
    are running inside a window manager you may notice the title change showing which
    window it is.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 will create another window. After step 3, you will have 4 windows in
    total.
  prefs: []
  type: TYPE_NORMAL
- en: When you perform the actions in step 4, you should be in `window 0`. Typing
    *Ctrl* + *a* + *3* will take you to `window 3`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a helpful hint, if you are running only a command line with no desktop,
    you may want to change your `PS1` variable to something like the following in
    your `.bashrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now the prompt will always show which window you are in.
  prefs: []
  type: TYPE_NORMAL
- en: This describes only a small part of what Screen can do. Consult the `man` page
    for more information.
  prefs: []
  type: TYPE_NORMAL
