- en: Working with WebSocket in Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first WebSocket server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first WebSocket client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging your first local WebSocket server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging your first remote WebSocket server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing your first WebSocket server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebSocket provides a bidirectional, single-socket, full-duplex connection between
    the server and the client, making real-time communication much more efficient
    than other ways such as long polling and server-sent events.
  prefs: []
  type: TYPE_NORMAL
- en: With WebSocket, the client and the server can talk independently, each able
    to send and receive information at the same time after the initial handshake,
    reusing the same connection from the client to the server and the server to the
    client, which eventually reduces the delay and server load greatly, allowing web
    applications to perform modern tasks in the most effective way. The WebSocket
    protocol is supported by most major browsers, including Google Chrome, Microsoft
    Edge, Internet Explorer, Firefox, Safari, and Opera. So there are no compatibility
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to create a WebSocket server and client,
    writing unit tests and debugging the server running either locally or remotely.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first WebSocket server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to write a WebSocket server, which is a TCP
    application listening on port `8080` that allows connected clients to send messages
    to each other.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/gorilla/websocket` package using the `go get` command,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `websocket-server.go` where we will upgrade an HTTP request to WebSocket,
    read the JSON message from the client, and broadcast it to all of the connected
    clients, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the WebSocket server will start locally listening on
    port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s understand the program we have written:'
  prefs: []
  type: TYPE_NORMAL
- en: We used `import ("log" "net/http" "github.com/gorilla/websocket")` which is
    a preprocessor command that tells the Go compiler to include all files from the `log`,
    `net/http`, and `github.com/gorilla/websocket` packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `var clients = make(map[*websocket.Conn]bool)`, we created a map that
    represents the clients connected to a WebSocket server with KeyType as a WebSocket
    connection object and ValueType as Boolean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `var broadcast = make(chan Message)`, we created a channel where all the
    received messages are written.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we defined a `HandleClients` handler, which upon receiving the `HTTP GET`
    request, upgrades it to `WebSocket`, registers the client with the socket server,
    reads the requested JSON messages, and writes it to the broadcast channel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we defined a Go function `broadcastMessagesToClients`, which grabs the
    messages written to the broadcast channel and sends it out to every client that
    is currently connected to the WebSocket server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating your first WebSocket client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a simple client to start the WebSocket handshake
    process. The client will send a pretty standard `HTTP GET` request to the WebSocket
    server and the server upgrades it through an Upgrade header in the response.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create `index.html` where we will open a connection to a non-secure WebSocket
    server on page load, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With everything in place, the directory structure should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b629829f-2f75-49d2-8adb-f5d85f9f16bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the program with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the WebSocket server will start locally listening on
    port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsing to `http://localhost:8080` will show us the WebSocket client page
    with a textbox and a Send button as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7d52e7d-4a4c-4d38-8d18-78eec80c5f2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Debugging your first local WebSocket server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging a web application is one of the most important skills for a developer
    to learn, as it helps in identifying a problem, isolating the source of the problem,
    and then either correcting the problem or determining a way to work around it.
    In this recipe, we will learn how to debug a WebSocket server running locally
    using GoLand IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you have GoLand IDE installed and configured to run the
    Go Application on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Click Open Project in the GoLand IDE to open `websocket-server.go`, which we
    wrote in our previous recipe, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e8fc02a-a5b9-4612-bd22-b277ce9efc6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the project opens, click on Edit Configurations as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/866d4acf-d5df-4ba7-885f-66fd01e84caf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Add New Configuration by clicking the + sign as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9154d8b8-a857-4792-9ff3-d93bd660994a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Go Build, rename the configuration to `WebSocket Local Debug`, change
    Run kind to Directory, and click on Apply and OK as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5e252651-72a4-4c00-b3bb-d5a40c2387f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Place a few breakpoints and click on the Debug button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/79998142-500c-478a-bcc1-3fb007247706.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we run the program, the WebSocket server will start locally in debug mode
    listening on port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsing to `http://localhost:8080` will show us the WebSocket client page
    with a textbox and a Send button as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c61dcbe-8aeb-4f39-bd23-ec1f7378dc5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter text and click on the Send button to see the program execution stopping
    at the breakpoints we placed in the GoLand IDE, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8e39ac7-c56e-4cd3-b842-6932d2cac0fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Debugging your first remote WebSocket server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learnt how to debug a WebSocket server that is running
    locally. In this recipe, we will learn how to debug it if it is running on another
    or a remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: The steps are more or less the same as we took in the previous recipe except
    for the debug configuration section where we will change the localhost to the
    remote machine IP or DNS and start the Delve server, which is a debugger for the
    Go programming language on the remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Add another configuration by clicking on Edit Configurations... as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/176fe105-a87d-4df3-96e0-a9c3ad856881.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the + sign to Add New Configuration and select Go Remote:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6af1b410-d858-4f26-969d-68705cc23442.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Rename the debug configuration to `WebSocket Remote Debug`, change the Host
    to `remote-machine-IP` or `DNS`, and click on Apply and OK as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75309b82-08d3-4bb3-afb8-5c7b07107460.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run a headless Delve server on the target or remote machine by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will start an API server listening on port `2345`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select WebSocket Remote Debug configuration and click on the Debug button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6651b141-4aa4-4637-a6b5-29486425d23c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Browse to the remotely available WebSocket client page, enter some text, and
    click on the Send button to see the program execution stopping at the breakpoints
    we placed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f98f24a1-bba5-40ed-9a83-7d4b65a51286.png)'
  prefs: []
  type: TYPE_IMG
- en: Unit testing your first WebSocket server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing or test-driven development helps the developer to design loosely-coupled
    code with the focus on code reusability. It also helps us to realize when to stop
    coding and make changes quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to write a unit test for the WebSocket server
    that we have already written in one of our previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: See the *Creating your first WebSocket server* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `github.com/gorilla/websocket` and `github.com/stretchr/testify/assert`
    packages using the `go get` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `websocket-server_test.go` where we will create a test server, connect
    to it using the Gorilla client, and eventually read and write messages to test
    the connection, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute a `go test` from the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It will give us the response `ok`, which means the test compiled and executed
    successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how it looks when a Go test fails. Change the expected output in
    the `assert` statement to something else. In the following `hello` has been changed
    to `hi`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the test again by running the `go test` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It will give us the failure response along with the error trace as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6465f59-e243-47f4-b1da-a7e5dc4233bd.png)'
  prefs: []
  type: TYPE_IMG
