- en: Chapter 12. How It All Fits Together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps was a big hit when it came out, and it remains quite important,
    but the new functionality it introduced was pretty much nothing. The contribution
    Google made with its maps site was taking things previously only available with
    a steep learning cliff and giving them its easy trademark simplicity. And that
    was quite a lot.
  prefs: []
  type: TYPE_NORMAL
- en: Similar things might be said about ReactJS. No one at Facebook invented functional
    reactive programming. No one at Facebook appears to have significantly expanded
    functional reactive programming. But ReactJS markedly lowered the bar to entry.
    Previously, with respect to functional reactive programming, there were repeated
    remarks among seasoned C++ programmers; they said, "I guess I'm just stupid, or
    at least, I don't have a PhD in computational mathematics." And it might be suggested
    that proficiency in C++ is no mean feat; getting something to work in Python is
    less of a feat than getting the same thing to work in C++, just as scaling the
    local park's winter sledding hill is less of an achievement than scaling Mount
    Everest. Also, ReactJS introduces enough of changes so that competent C++ programmers
    who do not have any kind of degree in math, computational or otherwise, stand
    a fair chance of using ReactJS and being productive in it. Perhaps they may be
    less effective than pure JavaScript programmers who are particularly interested
    in functional programming. But learning to effectively program C++ is a *real*
    achievement, and most good C++ programmers have a fair chance of usefully implementing
    functional reactive programming with ReactJS. However, the same cannot be said
    for following the computer math papers on Wikipedia and implementing something
    in the academic authors' generally preferred language of Haskell.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this conclusion, we will explore the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A retrospective of the terrain covered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Immunity to the problems that gave rise to *The Mythical Man-Month*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactJS as just a view—but what a view!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The joy of programing ReactJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Whole new vistas opening for ReactJS beyond the web. The ReactJS work introduced
    here is not the *end* of ReactJS''s possibilities: it is only the *beginning*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A review of the terrain covered
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered a lot in this book, both theoretically and practically. We covered
    the basics of functional programming, reactive programming, and functional reactive
    programming. We also covered a technology, Facebook's ReactJS. It makes some of
    the strengths of functional reactive programming available to frontend developers
    who are not necessarily steeped in computational mathematics (this is, unfortunately,
    something of a distinctive feature to this text). The text here is meant to follow
    the lead of ReactJS and is specifically intended to make sense to programmers
    without a special math background. Along the way, we met interesting technologies,
    such as Om, Brython, and Jest, and took a look at what future frontend web development
    might be like. We may be able to do web development in the language of our choice,
    rather than necessarily be limited to JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also built two systems, one smaller and one larger, and tried to demonstrate
    slight variations in how a problem is solved: with or without JSX, with controlled
    values for form elements, and by classic form Hijaxing. The point is not exactly
    that one is better than the other, as that needs will call for different solutions,
    and we want to increase the chances that at least one of the approaches covered
    here is helpful in a particular situation.'
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, there were reasons to say, as has been said about Python, "Programming
    is fun again!" Every system has its quirks, but somehow, there seem to be fewer
    speed bumps along the road when traveling with ReactJS. This title's brief treatment
    of CKeditor necessarily included a workaround for a speed bump that will frustrate
    a first-time CKeditor user. There have been precious few necessary warnings about
    workarounds for problems that persist in ReactJS code.
  prefs: []
  type: TYPE_NORMAL
- en: Could the Mythical Man-Month have been avoided?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fred Brooks'' 1975 book *The Mythical Man-Month* (40 plus years old by the
    time you read this book) is the most heavily cited work in all of software engineering
    literature. Tanenbaum''s classic textbook *Operating Systems: Design and Implementation*
    makes a (brief) mention of Brooks'' title:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"One of the designers of OS/360, Fred Brooks, wrote a witty and incisive book
    (Brooks, 1975) describing his experiences with OS/360\. While it would be impossible
    to summarize the book here, suffice it to say that the cover shows a herd of prehistoric
    beasts stuck in a tar pit..."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here, there is a direct relevance. To explain why, let's make a variant of the
    Big-Coffee notation as introduced by Steve Luscher. While perhaps no one outside
    Luscher's head knows what inspired him to make his point as he did, Luscher is
    clearly familiar with the classical big-O notation for runtime complexity, and
    presumably with the fact that it is also used to assess the complexity in other
    kinds of resource usage, such as memory. But I might suggest that a possible additional
    inspiration might be helpful as explained by Big Organization complexity. If Big-Coffee
    complexity can be nightmarish and quadratic at ![Could the Mythical Man-Month
    have been avoided?](img/B04108_12_06.jpg)—or as Luscher writes, ![Could the Mythical
    Man-Month have been avoided?](img/B04108_12_07.jpg)—something eerily familiar
    manifests in the communication complexity within a monolithic project.
  prefs: []
  type: TYPE_NORMAL
- en: If there is one programmer on a monolithic project, the complexity is zero,
    as there is no need to avoid stepping on other programmers' feet. If there are
    two programmers, the complexity in communication is exactly one connection. If
    there are three programmers, there are three connections; and if we scale up to
    10 programmers, the paperwork scales up to 45 connections. IBM's approach to the
    OS/360 project was the so-called Big Blue Solution, and it said, "Since there's
    lots and lots of work we want done, let's hire lots and lots and lots of programmers!"
    IBM had well over 10 programmers, and therefore had vastly more than 45 connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'One character that might be appropriate to indicate the complexity of organizational
    communication is the interconnected HTML dingbat, encodable as `&#9784;` or `&#x2638;`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Could the Mythical Man-Month have been avoided?](img/B04108_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we are able to retrofit a "Big Organization" complexity of how much communication
    is needed to prevent programmers from breaking others' work, perhaps no dingbat
    or emojicon is perfect. But we can speak of monolithic software projects having
    a quadratic communication complexity—of ![Could the Mythical Man-Month have been
    avoided?](img/B04108_12_03.jpg), or if you prefer, ![Could the Mythical Man-Month
    have been avoided?](img/B04108_12_04.jpg)—for developers to keep up with other
    changes and partially avoid collisions with other developers' work. On the scale
    of the OS/360 project, this resulted in developers spending over half their day
    only keeping track of memos, to keep abreast of what other programmers have done.
  prefs: []
  type: TYPE_NORMAL
- en: There is reason to believe that if the OS/360 project had been done with an
    approach like what Facebook uses for ReactJS plus Flux, there might have been
    no need to write *The Mythical Man-Month*.
  prefs: []
  type: TYPE_NORMAL
- en: The combination of ReactJS and Flux is explicitly written so that you don't
    need to put your hands in every other component's pockets. In fact, it is written
    so that if everybody is observing the approach, you can't put your hands in other
    components' pockets unless you find a way to breach the security. The communication
    complexity is not quadratic (as it was in the OS/360 project) at ![Could the Mythical
    Man-Month have been avoided?](img/B04108_12_03.jpg) or ![Could the Mythical Man-Month
    have been avoided?](img/B04108_12_04.jpg); the number of directions of communication
    if you have at most one developer per component is vastly smaller, and may possibly
    be barely above linear at ![Could the Mythical Man-Month have been avoided?](img/B04108_12_05.jpg).
    The difference is enormous in its implications.
  prefs: []
  type: TYPE_NORMAL
- en: While it is not clear that Facebook is being insistently purist enough to achieve
    the best theoretically possible results, it does seem evident that Facebook—which
    is one of the largest organizations on the Internet, and may have a frontend development
    staff comparable to (or greater than) the OS/360 project in size—has communications
    that scale much better than the monolithic OS/360 endeavor. Perhaps Facebook is
    one of the many organizations that are quicker to advertise their strengths than
    their weaknesses. But nothing that I've been able to find in any resource on the
    Web suggests that the volume of communication between Facebook developers is out
    of hand, as it was in the OS/360 project, or that the necessary volume of internal
    communications is onerous enough to be an issue that makes developers' lives genuinely
    more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: ReactJS is just a view, but what a view!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Charles Cézanne famously said, "Monet is just an eye, but what an eye!" Monet
    didn't try to show off his knowledge of structure and anatomy, but just copy what
    his eye saw. The consensus judgment of his work holds on to both "just an eye,"
    and "what an eye!" And indeed, the details may be indistinct in Monet, who rebelled
    against artistry that tried to impress with deep knowledge of anatomy and knowledge
    of structure that is far beyond what jumps out to the eye.
  prefs: []
  type: TYPE_NORMAL
- en: ReactJS is a framework rather than a library, which means that you are supposed
    to build a solution within the structure provided by ReactJS instead of plugging
    ReactJS into a solution that you structure yourself. The canonical example of
    a library is jQuery, where you build a solution your way, and call on jQuery as
    it fits into a structure that you design.
  prefs: []
  type: TYPE_NORMAL
- en: However, ReactJS is specialized as a view. It's not that this is necessarily
    good or bad, but ReactJS is not a complete web development framework, and does
    not have even the intension of being the only tool you will ever need. It focuses
    on being a view, and in Facebook's offering, this does not include any form of
    AJAX call. This is not a monumental oversight in developing ReactJS; the expectation
    is that you use ReactJS as a View to provide the user interface functionality,
    and other tools to meet other needs as appropriate. This text hasn't covered using
    ReactJS together with your favorite tools, but do combine your favorite tools
    with ReactJS if they are not going to step on each other's feet. ReactJS may or
    may not collide with other Views, but it is meant to work with non-View technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Programming is fun again!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the Web first appeared, I had my first "Programming is fun again!" experience.
    I had gotten my bearings in programming in Unix and C, and when I was informed
    that it was possible to include an image in a web page, I anticipated the amount
    of work that it would take in a C-like environment from scratch to tell how to
    display an image. I implicitly thought, "Too much work for me." But I was positively
    astonished to find that an image could be included in a web page with nothing
    more than `<IMG SRC=Portrait.GIF>`, and that an image itself didn't need to be
    embedded in a web page; it could equally gracefully be made available as `<A HREF=Portrait.GIF>Click
    here!</A>`. Thus began my first exposure to a language that was declarative rather
    than imperative. Perhaps it was not strictly programming; certainly, before JavaScript,
    it was not a Turing approximant. However, it let me easily do things with computers
    that I hadn't dreamed of.
  prefs: []
  type: TYPE_NORMAL
- en: Some years later, I had my second "Programming is fun again!" experience after
    a friend suggested that I try Python. By the time that occurred, I was a sort
    of a language collector; the only languages I wanted to know but didn't were Icon,
    C++, and some assembler. A common reality for language collectors is that their
    first project in a new language is slower, more difficult, and more frustrating
    than any further work. It gets better after that, but for the first project, "It
    always takes longer than you think, even when you take into account the fact that
    it always takes longer than you think." However, with Python, my surprise was,
    "What? *Is it working already*?" and this was just the tip of an iceberg.
  prefs: []
  type: TYPE_NORMAL
- en: My story of being a language collector, finding Python, and then stopping the
    effort to learn new languages is not an especially unusual story among Pythoneers.
    Eric Raymond certainly picked up some deeper notes in his article Why Python?
    at [http://www.linuxjournal.com/article/3882](http://www.linuxjournal.com/article/3882).
    Python is an enchanted kingdom where the streets are paved with glue, and it's
    not just masters who can benefit.
  prefs: []
  type: TYPE_NORMAL
- en: 'What was not mentioned earlier is that if you leave your mouse hovering over
    the cartoon image at [http://xkcd.com/353/](http://xkcd.com/353/), this message
    appears: **I wrote 20 short programs in Python yesterday. It was wonderful. Perl,
    I''m leaving you...** Now Perl is also a good language and, for a time, my favorite,
    but there''s still something about Python.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, my last and greatest "Programming is fun again!" moment came when I
    began appreciating ReactJS. ReactJS delivers something that XHTML and HTML5 don't,
    in terms of creating useful components that can be used like tags.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever the "X" in XHTML stands for, it does not mean, "In mainstream use,
    people will build and deploy lots of interesting new tags." HTML5 offers a number
    of new components, such as `<input type="date" />`, but they are not universally
    supported, and this is not another case of IE having to be the life of a party.
    The mainstream and current non-Microsoft browsers have very inconsistent coverage
    of features that were announced loudly and clearly when HTML5 was in the limelight.
    There are polyfills available, and integrating one of the many JavaScript date
    pickers that existed before HTML5 may make just as much sense today as it did
    when they were new. But while a site like [http://html5please.com/](http://html5please.com/)
    is praiseworthy and worth using, it is also a symptom of a major problem.
  prefs: []
  type: TYPE_NORMAL
- en: ReactJS and JSX succeed where these fail. This text has not covered how to make
    a `<DatePicker />` function, but once this has been made, you can include it in
    your JSX almost as easily as a native HTML tag. If someone nostalgic for fractals
    draws on an HTML5 canvas and makes scrollable and zoomable `<LogisticMap />`,
    `<VonKochSnowflake />`, `<MandelbrotSet />`, and `<SierpinskiGasket />`, these
    can be as easily included in JSX as the plain old simple `<img />` tags. Components
    defined in ReactJS differ in an important sense from manually configuring and
    wiring a JavaScript date picker to work with your form. They are like subroutines
    in classic structured programming, in the sense that they can be readily reused
    wherever reusing makes sense, and combined to make bigger building blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It might be suggested that there is money to be made in producing libraries
    of useful components that can be used to almost extend the basic set of useful
    tags open to other web developers.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, if I may borrow from Robin Martin's "What Killed Smalltalk Could Kill
    Ruby" and use slightly more polite language, the key metric in a code review (among
    other things) is the number of times the reviewer has to ask, "What were they
    thinking?" For the "What were they thinking?" metric, an acceptable score for
    the code being reviewed is 0\. Anything higher than this is unacceptable. Also,
    this metric is relevant well outside of code reviews.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, such moments are rare: they do exist, as a search for "Python mutable
    default argument" will show, but they are significant because they are rare. This
    is different from "What were they thinking?" arguments in JavaScript, such as
    "You can use variables without declaring them (but if you do, they''ll be global)"
    and "You can write pseudo-classical constructors (but if you forget to use the
    new keyword when calling them, they''ll clobber things in the global namespace.)"
    The environment in JavaScript is such that a key language advocate, such as Douglas
    Crockford, sharply warns people to steer clear of large chunks of the basic language,
    and appears to be getting pickier over time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ultimately, it seems that ReactJS and Python have the same heart. Both are,
    at heart, small and simple. Perhaps both have flaws, but flaws where the "What
    were they thinking?" moment is the exception and not the norm. Both have, as a
    sarcastic tweet said when ReactJS was announced, "Facebook: Rethink established
    best practices." ESR mentioned quite a hang-up about Python''s strange choice
    of significant white spaces.'
  prefs: []
  type: TYPE_NORMAL
- en: '*"And like most hackers, upon realizing this fact, I recoiled in reflexive
    disgust.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*I was barely old enough to have programmed in batch Fortran for a few months
    back in the 1970s. These days, most hackers aren''t, but somehow our culture seems
    to have retained a pretty accurate folk memory of how nasty those old-style fixed-field
    languages were. Indeed, the term "free format" used back then to describe the
    newer style of token-oriented syntax in Pascal and C has almost been forgotten.
    All languages have been designed that way for decades now, or almost all; anyway.
    On seeing this Python feature, it''s hard to blame anyone for initially reacting
    as if they had unexpectedly stepped in a steaming pile of dinosaur dung."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ReactJS also has the courage to say that those people who create CSS can create
    very simple JavaScript, instead of only working in deliberately underpowered templating
    languages. Now, JavaScript was chosen as a Domain-specific Language to deliberately
    leave as much power as is needed. However, it is not necessary for designers to
    summon the full power of JavaScript. They can create the 99 percent of the simple
    JavaScript that would have been done in an underpowered templating language, and
    JavaScript developers can create the remaining 1 percent of powerful JavaScript,
    because this would be problematic to address in an underpowered templating language.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at a slightly higher level than the nitty-gritty.
    Other chapters had detailed a couple of projects, but here we looked at some of
    the major wins that ReactJS represents, and to some of the most famous problems
    in computing.
  prefs: []
  type: TYPE_NORMAL
- en: This book is intended to cover both the theory and practice of functional reactive
    programming with Facebook's ReactJS. It is hardly the first title covering functional
    programming, reactive programming, or functional reactive programming, but it
    may be an early title among treatments of functional reactive programming that
    do not assume PhD-level mathematical prowess. Part of this was accomplished by
    making the text somewhat philosophical. In some sense, this is the price paid
    to be merely challenging for some veteran programmers to understand, but not impossible
    for most veteran programmers to understand. The best functional reactive programming
    in JavaScript and ReactJS is based on functional programming proficiency, and
    the best functional reactive programming in Haskell is also based on functional
    programming proficiency; there is no real difference there. There is, however,
    a difference in the fact that a typical veteran C++ programmer has a fighting
    chance of achieving a useful proficiency with ReactJS. And Facebook has done quite
    an impressive job of putting things in easier reach.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is a versatile language, and you can get a significant amount of
    productivity if you are approaching it while thinking in a Scheme way (of course!)
    or a Python way, or C#, Erlang, Perl, Ruby, Java, Haskell, PHP, Lisp, or Visual
    Basic. Perhaps no other programming language's way of thinking will reach the
    upper echelons of pure, functionally driven JavaScript thinking, but there's a
    lot that you can say in JavaScript, without needing to be a native speaker sporting
    a flawless JavaScript accent!
  prefs: []
  type: TYPE_NORMAL
- en: And nothing of this is lost in ReactJS. Perhaps the last ounce of power cannot
    be squeezed out of functional reactive programming unless you have a very high
    proficiency in some very specific areas of math, but ReactJS has markedly lowered
    the barrier to entry for the benefits of functional reactive programming. Functional
    reactive programming used to have an unwritten sign over its door saying, "Math
    Programming Jocks Only." Now it doesn't. It may be purely an advantage to grok
    functional reactive programming to work with ReactJS, but all the other specialties
    mentioned can get a lot out of ReactJS without needing to know much math beyond
    the significant proficiency that is normally embedded in computer science and
    information technology.
  prefs: []
  type: TYPE_NORMAL
- en: Some people have said that developers very rarely pay for *books*; they pay
    for *chapters*. This book has been intended to work as a whole, with different
    parts illustrating complementary approaches to others so that each part adds to
    the whole. But it is also seriously intended to provide chapters that work perfectly
    well as standalone assets for people who want to orient themselves to something.
  prefs: []
  type: TYPE_NORMAL
- en: The next steps from here
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are countless directions that you can explore. You can dig deeper and
    explore the core of ReactJS. You can also explore the integration of ReactJS into
    projects that use other technologies to address other concerns.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you can program ReactJS from Lisp or Python. (It's not merely true that
    you can program with ReactJS in JavaScript only if you come from a "Lispy" or
    "Pythonic" background. You can create animated web pages using ReactJS without
    leaving Lisp or Python to author a single line of JavaScript code.)
  prefs: []
  type: TYPE_NORMAL
- en: You can create a much richer set of components than any version of HTML5 can
    offer, and use them as easily as components that HTML 1.0 offered.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the most exciting possibility of all is that ReactJS is no longer only
    for HTML/Web. It now offers a killer application for "learn once, write anywhere."
    Now your stellar JavaScript skills and hard work with learning functional programming
    unlock a good deal more than the Web. It's about as easy to write for iOS, for
    instance. Now see the home page at [https://facebook.github.io/react-native/](https://facebook.github.io/react-native/).
    This book has placed you in a position to not only use ReactJS on the Web but
    also learn ReactJS Native quickly and well, and this is profoundly significant.
  prefs: []
  type: TYPE_NORMAL
- en: '*You''ve climbed to the top of the diving board. Now it''s time to jump in
    and make the biggest splash that''s available.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perhaps the best thing to be said about the best way to work with functional
    reactive programming and ReactJS is not to *work* with ReactJS at all. It is to
    *play* with ReactJS, as you play with fresh snow. What has been said of the Glasgow
    Haskell Compiler applies in entirety to ReactJS: forget that it''s something you
    use for work. Play with it as if you were given a huge Lego set as a young child.
    See what you can build, and what you can''t.'
  prefs: []
  type: TYPE_NORMAL
- en: Programming is new again; there's pixie dust. Just like programmers once gained
    the ability to use programmer-contributed subroutines on par with built-in functions,
    now frontend web developers have gained the ability to use developer-made components
    as easily and with as little fuss as including an `IMG` tag in their JSX. Gone
    are the days when we needed to go to [http://html5please.com/](http://html5please.com/)
    and learn that `<input type="date">` has an amber alert for a "Caution [even]
    with polyfill" warning label. Gone are also the days when you needed to—even worse
    manually—wire up a JavaScript date picker with your form on each page, and you
    might use 58 lines of repetitive-stress-injury-inducing code to get a date picker
    on one single page. Once someone has made a proper ReactJS `<DatePicker />` function,
    the problem is solved to the point that it is less than one line of code to include,
    and you can include it zero, one, or many times on a page. "Even. When. Deploying.
    With. A Shim. to Internet Exploder 8" was deliberate use of punctuation, as also
    used by Terry Pratchett in the speech of trolls, and is emphatic. As regarding
    the term "Internet Exploder", that title has been around for a long time and developers,
    or me at any rate, had two problems in implementing a solution that would work
    with any normal browser, and then again get things working, this time for the
    browser that was the, um, life of the party.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wikipedia aims for a neutral "POV" (point of view), and unflinchingly writes
    of an earlier version:'
  prefs: []
  type: TYPE_NORMAL
- en: This version of Internet Explorer has been widely criticized for its security
    issues and lack of support for modern web standards, making frequent appearances
    in "worst tech products of all time" lists, with PC World labeling it "the least
    secure software on the planet."[2] And this isn't even beginning to mention all
    of the pixie dust that means that you don't have to manage ![The next steps from
    here](img/B04108_12_06.jpg) transitions, because you conceptually blow everything
    up and rebuild things as they should be at a particular point in time.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a world of possibilities to explore, and there is perhaps one thing
    to be said:'
  prefs: []
  type: TYPE_NORMAL
- en: '*When this book began, the author''s home was Python. When this book ended,
    the author''s home was ReactJS.*'
  prefs: []
  type: TYPE_NORMAL
