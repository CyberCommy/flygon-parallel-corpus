- en: Securing Your Microservice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will get a brief overview of security in AWS to ensure that
    your serverless microservices are secure. Before we create our first microservice,
    we first need to understand the AWS security models. We're going to discuss different
    terms that are important and the overall AWS security model. We are then going
    to talk about IAM, which is used to access any of the AWS resources. Finally,
    we'll look at securing your serverless microservice.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the security in AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of AWS Identity and Access Management (IAM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your serverless microservice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of the security in AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to provide an overview of the security in AWS.
    We are going to take a look at why security is important, provide some examples
    of security, discuss the types of security terms that are important, and talk
    about the AWS shared-responsibility model.
  prefs: []
  type: TYPE_NORMAL
- en: Why is security important?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following points discuss the importance of security:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compliance with the law and standards**: For example, the European Union
    **General Data Protection Regulation** (**GDPR**) and **Health Insurance Portability
    and Accountability Act** (**HIPAA**) adopted by the US are responsible for regulating
    the laws for data protection and privacy for all individuals.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data integrity**: Systems that aren''t secure could have their data stripped
    or tampered with, which means that you can no longer trust the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Personally-identifiable information**: Privacy is a major concern these days.
    You should protect your user data and assets as a matter of course.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data availability**: If an auditor, for example, asks you for specific data,
    you need to be able to retrieve that data. If a natural disaster happens near
    your data center, that data needs to be available and secure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s have a look at the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecf395c1-f69c-4c11-8097-56cff9358006.png)'
  prefs: []
  type: TYPE_IMG
- en: On the left, we have various systems that are configured incorrectly, missing
    updates, or have unsecured communication means. This could actually lead to the
    middle section, where there are problems such as the systems will get hacked or
    there'll be a ransomware demand or there could be an infiltration into your systems.
    A distributed denial service attack could be made, for example, which will bring
    down your e-commerce website so it will no longer be available to customers.
  prefs: []
  type: TYPE_NORMAL
- en: On the right, you can see some of the impacts. There could be litigation costs,
    data loss or data leaks, a financial cost to your organization, as well as reputational
    costs.
  prefs: []
  type: TYPE_NORMAL
- en: Types of security terms in AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A lot of the security in AWS is actually configuration and just having the
    correct architecture in place. So, it''s important to understand some of these
    security terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security and transit**: Think of this as HTTPS SSL. If you think about a
    web browser, you would have the padlock in your browser to show that the communication
    is secure, for example, when you''re accessing any of your online banking systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security at rest**: This is the data that''s encrypted in the database or
    filesystem. Only a user with the key has access to the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication**: This refers to the process to confirm whether a user or
    system is who they are meant to be.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorization**: Once you''re authenticated, the system checks for correct
    authorization. This is to check that the permissions and access controls are in
    place for you to access the specific AWS resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of AWS Identity and Access Management (IAM)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to briefly discuss AWS IAM, specifically for
    serverless computing. IAM is a central location where you can manage users and
    security credentials—such as password, access keys, and permission policies—that
    control access to the AWS services and resources. We are going to talk about the
    most relevant IAM resources: policies, roles, groups, and users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'IAM policies are JSON documents that define the affected action''s resources
    and conditions. Here is an example of a JSON document that will grant read access
    to DynamoDB tables, called `Books` only if the request originates from a specific
    IP range:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23e9e592-4c72-469c-879d-98779efa042c.png)'
  prefs: []
  type: TYPE_IMG
- en: There is also a visual editor that allows you to create these or you can do
    so manually by editing the JSON document itself.
  prefs: []
  type: TYPE_NORMAL
- en: IAM users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An IAM user is a person or service used to interact with AWS. They access the
    Management Console via a password or multi-factor authentication (for the new
    user), or they may have an access key for programmatic access using the command-line
    interface or the SDKs. As shown in the following diagram, you can attach a policy
    to a user to grant them access to a resource to read DynamoDB within a specific
    IP range:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54324278-3dcd-46d2-be1f-1add0e3d7f4f.png)'
  prefs: []
  type: TYPE_IMG
- en: IAM groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IAM groups are used to better mimic the security terms in your organization
    groups. You could think of them as Active Directory groups. For example, in your
    organization, you would have administrators, developers, and testers.
  prefs: []
  type: TYPE_NORMAL
- en: To create a group, you can use the AWS Management Console, SDK, or CLI under
    the IAM add group and then attach a policy. Once you have created a group, you
    can attach it to a user or you can create a new one.
  prefs: []
  type: TYPE_NORMAL
- en: IAM roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IAM roles are similar to users, in that they can have a policy attached to
    them, but they can be attached by anyone who needs access in a trusted entity.
    In that way, you can delegate access to users, applications, or services without
    having to give them a new AWS key, as they could use the temporary security tokens
    through this trusted entity. For example, you could grant a third-party read access
    to an S3 bucket and nothing else within your AWS environment without actually
    having to share any keys and purely using the roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4c71608-50fa-43c7-928b-833e844facca.png)'
  prefs: []
  type: TYPE_IMG
- en: Securing your serverless microservice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to talk about the security required to build your
    first microservice. Specifically, we are going to look at the security around
    Lambda functions, API Gateway, and DynamoDB, and then we are going to discuss
    the ways you can use monitoring and alerting upon detecting suspicious events.
  prefs: []
  type: TYPE_NORMAL
- en: Lambda security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In lambda security, there are two types of IAM roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Invoking the lambda**: This means having the permissions to actually invoke
    and run a lambda function. For example, this could be from an API Gateway or another
    service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Granting lambda function read and write access to specific AWS resources**:
    For example, you would allow a Lambda function to read from a DynamoDB table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, the **Key Management Service** (**KMS**), which is an AWS-managed
    service for keys, allows you to perform encryption and decryption on data at rest
    such as in a database or a NoSQL data store, such as DynamoDB. Amazon Virtual
    Private Cloud is another option where Lambda runs, by default, within a secure
    VPC. However, you may want to run it inside your own private AWS VPC if there
    are resources you need to access, such as elastic clash clusters or RDS, that
    are within this private VPC. Here is a work flow representation of using AWS Lambda
    using AWS KMS and AWS VPC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19a2108f-ce03-45af-af20-5dc8ab3c2d18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For API Gateway security, there are three ways you can control who can call
    your API method. This is known as request authorization, shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a977e79-748b-4e80-82c5-7765b11013bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the different ways to control who can call your API:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IAM roles and policies**: This provides access to the API Gateway. API Gateway
    will use these roles and policies to verify the caller''s signature upon request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Cognito user pools**: This controls who can access the API. In this
    case, the user will have to sign in to access the API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**An API Gateway custom authorizer**: This is a request, such as a bearer token
    or lambda function, that deals with validation and checks whether the client is
    authorized to call the API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you get requests from a domain other than your API's own domain, you must
    enable cross-origin resource sharing. In addition, API Gateway supports SSL certificates
    and certificate authorities. API Gateway may need authorization via an IAM role
    to call or invoke specific resources within AWS, such as with Kinesis streams
    or to invoke a Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: DynamoDB security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can perform authentication using the IAM user or you can use a specific
    IAM role. Once they're authenticated, the authorization is controlled and the
    IAM policy is assigned to that specific user or role. What I recommend is that,
    when creating these policies for DynamoDB, you lock them down as much as possible,
    which means avoiding read and write access to all of the tables and DynamoDB. It's
    better to use a specific name for specific tables.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring and alerting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s important to monitor systems for any suspicious activity and to detect
    any performance issues. API Gateway, DynamoDB, and Lambda functions all support
    CloudTrail, CloudWatch, and X-Ray for monitoring and alerting. They are discussed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: CloudTrail allows you to monitor all APIs and access to resources by any user
    or system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudWatch allows you to collect and track metrics and monitor log files, set
    specific alarms, and automatically react to changes in your AWS resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X-Ray is a new service that traces requests and can generate service Maps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The combination of these free systems gives you very good insight, out of the
    box, into your serverless system.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading this chapter, you should have a much deeper understanding of security
    in AWS and why it's important for your organization. After all, no one wants to
    be the person responsible for a data breach. We discussed IAM and you now know
    that policies are the key documents that ensure restricted access to AWS resources.
    We also looked at some of the security concepts that secure your serverless microservices;
    specifically, we learned about lambda, API Gateway, and DynamoDB.
  prefs: []
  type: TYPE_NORMAL
