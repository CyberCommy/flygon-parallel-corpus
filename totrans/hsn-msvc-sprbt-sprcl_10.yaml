- en: Introduction to Spring Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen how we can use Spring Boot to build microservices with
    well-documented APIs, along with Spring WebFlux and SpringFox; persist data in
    MongoDB and SQL databases using Spring Data for MongoDB and JPA; build reactive
    microservices either as non-blocking APIs using Project Reactor or as event-driven
    asynchronous services using Spring Cloud Stream with RabbitMQ or Kafka, together
    with Docker; and manage and test a system landscape consisting of microservices,
    databases, and messaging systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to see how we can use **Spring Cloud** to make our services production-ready,
    scalable, robust, configurable, secure, and resilient.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will introduce you to how Spring Cloud can be used to implement
    the following design patterns from [Chapter 1](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml),
    *Introduction to Microservices*, the *Design patterns for microservices* section:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Service discovery
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edge server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centralized configuration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circuit breaker
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed tracing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter does not contain any source code, and so no tools need to be installed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of Spring Cloud
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In its initial 1.0 release in March 2015, Spring Cloud was mainly a wrapper
    around the Netflix OSS tools, which are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Netflix Eureka, a discovery server
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netflix Ribbon, a client-side load balancer
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netflix Zuul, an edge server
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netflix Hystrix, a circuit breaker
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial release of Spring Cloud also contained a configuration server and
    integration with Spring Security that provided OAuth 2.0 protected APIs. In May
    2016, the Brixton release (V1.1) of Spring Cloud was made generally available.
    With the Brixton release, Spring Cloud got support for distributed tracing based
    on Spring Cloud Sleuth and Zipkin, which originated from Twitter. These initial
    Spring Cloud components could be used to implement the preceding design patterns. For
    more details, see [https://spring.io/blog/2015/03/04/spring-cloud-1-0-0-available-now](https://spring.io/blog/2015/03/04/spring-cloud-1-0-0-available-now) and [https://spring.io/blog/2016/05/11/spring-cloud-brixton-release-is-available](https://spring.io/blog/2016/05/11/spring-cloud-brixton-release-is-available).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Since its inception, Spring Cloud has grown considerably over the years and
    has added support for the following, among others:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Service discovery and centralized configuration based on HashiCorp Consul and
    Apache Zookeeper
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event-driven microservices using Spring Cloud Stream
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud providers such as Microsoft Azure, Amazon Web Services, and Google Cloud
    Platform
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [https://spring.io/projects/spring-cloud](https://spring.io/projects/spring-cloud)
    for a complete list of tools.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the release of Spring Cloud Greenwich (V2.1) in January 2019, some of
    the Netflix tools mentioned previously have been placed in maintenance mode in
    Spring Cloud. The following replacements are recommended by the Spring Cloud project:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '| **Current component** | **Replaced by** |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| Netflix Hystrix  | Resilience4j |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| Netflix Hystrix Dashboard/Netflix Turbine | Micrometer and monitoring system
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| Netflix Ribbon | Spring Cloud load balancer |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| Netflix Zuul | Spring Cloud Gateway |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: For more details, for example on what maintenance mode means, see [https://spring.io/blog/2019/01/23/spring-cloud-greenwich-release-is-now-available](https://spring.io/blog/2019/01/23/spring-cloud-greenwich-release-is-now-available).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we will use the replacement alternatives to implement the design
    patterns mentioned previously. The following table maps each design pattern to
    the software components that will be used to implement them:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '| **Design pattern** | **Software component** |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: '| Service discovery | Netflix Eureka and Spring Cloud load balancer |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| Edge server | Spring Cloud Gateway and Spring Security OAuth |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| Centralized configuration | Spring Cloud Configuration Server |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| Circuit breaker | Resilience4j |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| Distributed tracing | Spring Cloud Sleuth and Zipkin |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 分布式跟踪 | Spring Cloud Sleuth和Zipkin |'
- en: Now, let's go through the design patterns and introduce the software components
    that will be used to implement them!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过设计模式并介绍将用于实现它们的软件组件！
- en: Using Spring Cloud Gateway as an edge server
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Cloud Gateway作为边缘服务器
- en: Another very important support function is an edge server. As we already described
    in [Chapter 1](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml), *Introduction to Microservices*,
    in the *Edge server* section, it can be used to secure a microservice landscape,
    that is, hide private services from external usage and protect public services
    when they're used by external clients.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常重要的支持功能是边缘服务器。正如我们在[第1章](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml)中已经描述的那样，在*边缘服务器*部分，它可以用于保护微服务景观，即隐藏外部使用的私有服务并在外部客户端使用时保护公共服务。
- en: Initially, Spring Cloud used Netflix Zuul v1 as its edge server. Since the Spring
    Cloud Greenwich release, it's recommended to use **Spring Cloud Gateway** instead. Spring
    Cloud Gateway comes with similar support for critical features, such as URL path-based
    routing and the protection of endpoints via the use of OAuth 2.0 and **OpenID
    Connect** (**OIDC**).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，Spring Cloud使用Netflix Zuul v1作为其边缘服务器。自Spring Cloud Greenwich发布以来，建议改用**Spring
    Cloud Gateway**。Spring Cloud Gateway具有类似的关键功能支持，例如基于URL路径的路由和通过OAuth 2.0和**OpenID
    Connect**（**OIDC**）保护端点。
- en: One important difference between Netflix Zuul v1 and Spring Cloud Gateway is
    that Spring Cloud Gateway is based on non-blocking APIs that use Spring 5, Project
    Reactor, and Spring Boot 2, while Netflix Zuul v1 is based on blocking APIs. This
    means that Spring Cloud Gateway should be able to handle larger amounts of concurrent
    requests than Netflix Zuul v1, which is important for an edge server that all
    external traffic goes through.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix Zuul v1和Spring Cloud Gateway之间的一个重要区别是，Spring Cloud Gateway基于非阻塞API，使用Spring
    5、Project Reactor和Spring Boot 2，而Netflix Zuul v1基于阻塞API。这意味着Spring Cloud Gateway应该能够处理比Netflix
    Zuul v1更多的并发请求，这对于所有外部流量经过的边缘服务器非常重要。
- en: 'The following diagram shows how all requests from external clients go through Spring
    Cloud Gateway as an edge server. Based on URL paths, it routes requests to the
    intended microservice:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了所有外部客户端的请求都通过Spring Cloud Gateway作为边缘服务器。根据URL路径，它将请求路由到预期的微服务：
- en: '![](img/1d389b62-e8c6-4111-bce0-9406d0c5f0fc.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d389b62-e8c6-4111-bce0-9406d0c5f0fc.png)'
- en: In the preceding diagram, we can see how the edge server will send external
    requests that have a URL path that starts with `/product-composite/` to the **Product
    Composite** microservice. The core services **Product**, **Recommendation**, and
    **Review** are not reachable from external clients.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，我们可以看到边缘服务器将发送URL路径以`/product-composite/`开头的外部请求到**产品组合**微服务。核心服务**产品**、**推荐**和**评论**对外部客户端不可达。
- en: In [Chapter 10](a3383211-405d-4319-b142-ddb8cf3674fd.xhtml), *Using Spring Cloud
    Gateway to Hide Microservices Behind an Edge Server*, we will look at how to set
    up Spring Cloud Gateway with our microservices.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](a3383211-405d-4319-b142-ddb8cf3674fd.xhtml)中，*使用Spring Cloud Gateway隐藏微服务在边缘服务器后面*，我们将看看如何设置Spring
    Cloud Gateway与我们的微服务。
- en: In [Chapter 11](bcb9bba0-d2fe-4ee8-954b-07a7e38e1115.xhtml), *Secure Access
    to APIs*, we will see how we can use Spring Cloud Gateway together with Spring
    Security OAuth2 to protect access to the edge server using OAuth 2.0 and OIDC.
    We will also see how Spring Cloud Gateway can propagate identity information of
    the caller down to our microservices, for example, the username or email address
    of the caller.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](bcb9bba0-d2fe-4ee8-954b-07a7e38e1115.xhtml)中，*安全访问API*，我们将看到如何使用Spring
    Cloud Gateway与Spring Security OAuth2一起使用OAuth 2.0和OIDC保护对边缘服务器的访问。我们还将看到Spring
    Cloud Gateway如何将调用者的身份信息传播到我们的微服务，例如调用者的用户名或电子邮件地址。
- en: With Spring Cloud Gateway introduced, let's introduce how to use Spring Cloud
    Config for centralized configuration.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍了Spring Cloud Gateway之后，让我们介绍如何使用Spring Cloud Config进行集中配置。
