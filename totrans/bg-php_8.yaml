- en: Chapter 8. Building a Contacts Management System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we have completed building functionality onto the framework,
    which allows for the management of users. We have performed the inclusion of Bootstrap
    to give some basic-level styling to our application. We have also implemented
    a password recovery mechanism in our application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will build a contacts CRUD (Create, Read, Update, and Delete)
    section, which will have a view page to view an individual contact. The view page
    comments can be recorded against the contact. We will also be building the comments
    system for our contact application.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement CRUD functionality in our contacts application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a comments system in our contacts application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview CMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A framework is an abstraction in software which provides multiple software
    that can be used by writing custom user code. The flow of control in a framework
    is not decided like in other libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview CMS](graphics/8_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The dashboard of the application
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the dashboard — the page users land on when logging in. From here,
    they can navigate to the section of the application where they will be able to
    manage content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview CMS](graphics/8_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The contacts index page
  prefs: []
  type: TYPE_NORMAL
- en: This is the `contacts` index, where users view all of the contacts stored in
    the contacts table.
  prefs: []
  type: TYPE_NORMAL
- en: This is the knowledge of the application built on top of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: The user can see the name of the contact as well as the email address address
    and telephone number related to each contact.
  prefs: []
  type: TYPE_NORMAL
- en: The user is unable to see the contact ID, but this ID is still generated, and
    forms part of the URL for the view, edit, and delete; so, when a functionality
    is triggered by clicking on one of these buttons, it already knows which record
    in the contacts table to draw its knowledge from.
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview CMS](graphics/8_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Viewing an individual contact
  prefs: []
  type: TYPE_NORMAL
- en: This is the contact page.
  prefs: []
  type: TYPE_NORMAL
- en: 'This page displays all of the information in a single record. The record in
    this application is the data of a unique contact, which is represented by an `ID`.
    The `ID` is unique, so only the information of one single contact will ever be
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Caution**'
  prefs: []
  type: TYPE_NORMAL
- en: The word unique here is used because it is a separate `ID`. If it is stored
    as a separate `ID`, then it is considered a unique record by the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview CMS](graphics/8_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The add contact page
  prefs: []
  type: TYPE_NORMAL
- en: This is the page where the form is displayed which allows a user to add a completely
    new contact.
  prefs: []
  type: TYPE_NORMAL
- en: This page, when loading, requires no parameters as it does not need to load
    any pre-populated data in its fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'When submitting, assuming there are no errors, a new contact will be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview CMS](graphics/8_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The edit contact page
  prefs: []
  type: TYPE_NORMAL
- en: This is the page where a form is displayed which allows a user to edit a contact.
  prefs: []
  type: TYPE_NORMAL
- en: The difference in this page is that the data stored in relation to a contact
    record is pre-populated in the form.
  prefs: []
  type: TYPE_NORMAL
- en: The reason it is possible to do this is that the edit page is loaded with the
    contact `ID` passed as a parameter. This `ID` tells the system which record it
    should be loading into this page.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD, the Contact Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, users will create the functionality to CRUD the contact application.
    Users will:'
  prefs: []
  type: TYPE_NORMAL
- en: Create new `contact` records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View all the `contact` records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View individual `contact` records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `contact` records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete the `contact` records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may find this very similar to building the user management functionality
    and would be right to do so.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD lies at the heart of all applications, and functionality is extended from
    there.
  prefs: []
  type: TYPE_NORMAL
- en: '![CRUD, the Contact Application](graphics/8_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is an example of pagination
  prefs: []
  type: TYPE_NORMAL
- en: '![CRUD, the Contact Application](graphics/8_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is an example of filtering
  prefs: []
  type: TYPE_NORMAL
- en: Inserting CRUD functionality in Our Contacts Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll try to insert CRUD functionality in our Contacts application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting CRUD functionality in Our Contacts Application](graphics/8_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The outcome of this section
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to insert CRUD functionality in our Contacts application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the database, we need a `contacts` table (remove one if you have it from
    earlier chapters):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `contacts` table stores a unique `ID` of each contact, the contact's name,
    email address, and telephone number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need a `comments` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The comments must have the `contact_id` and `user_id` fields. These are foreign
    keys to link a comment back to a contact and a user who posted the comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The comment will be added to the body field, and a `created_at` column is used
    to note when a record was created. This column is set with a timestamp with a
    default `CURRENT_TIMESTAMP`. This means the date and time will automatically be
    inserted when a new record is added:'
  prefs: []
  type: TYPE_NORMAL
- en: Since we've experimented with contacts in earlier chapters, let's start by doing
    some cleanups. Delete the `app/views/contacts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `app/views/layouts/nav.php` and add a contacts menu item that points to
    `/contacts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Open `app/Models/Contacts.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace it with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need a method to load a single contact, where the `ID` belongs to
    the contact:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need `insert`, `update`, and `delete` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The full model looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 8.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Next, open `app/Controllers/Contacts.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `Session` and URL helpers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like our `Users` controller, this will ensure you are logged in before being
    able to access the contacts, and sets up the `$contact` model, collecting the
    contacts and loading up a `contacts` view.
  prefs: []
  type: TYPE_NORMAL
- en: We also need `add`, `edit`, and `delete` methods. This is done in the same way
    the `Users` methods are set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the form has been submitted, collect the form data, perform validation,
    and providing there are no errors, insert it into the database, set a message,
    and redirect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 8.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to create the views for these methods. Create a `contacts` folder
    inside `app/views/admin` and create these views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 8.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity: Executing our Application'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have implemented the CRUD functionality into our contacts application. Let's
    try it out by executing our application.
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this activity is to verify that the CRUD functionality works properly
    with our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we can list, add, edit, and delete contacts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To show this, open your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Load up `http://localhost:8000/contacts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All contacts in the database will be listed. You can add a new one by clicking
    on `Add Contact`. After submitting the form, you will be taken back to the user
    list where you can see the new contact, and a confirmation message will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The same thing will happen for editing. Deleting will confirm the action to
    then delete the contact.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comments, Joins, and Date Formatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to build a comment system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to join data stored in two different tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to format dates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system as it is currently built can be improved. This can be done by building
    a comment feature so that a user can log activity against a contact.
  prefs: []
  type: TYPE_NORMAL
- en: They may want to note that they called the contact on Monday and was asked to
    call them again on Friday. Users may be working together to call a list of contacts,
    and it would be useful to know who made that comment and when.
  prefs: []
  type: TYPE_NORMAL
- en: Another way the system can be improved is ensuring that the dates and times
    are displayed in an easy-to-read format. The database table stores such information
    in a way that is not so human-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: When creating comments, it is essential to create `joins`. There is almost an
    unlimited amount of comments that a user can post against a contact.
  prefs: []
  type: TYPE_NORMAL
- en: It would be impossible to cater for this when building the contacts field, and
    the comments would have to be limited. There would need to be a field in the contacts
    table to cater for every possible comment, who the comment was made by, and when.
    This would be extremely difficult to manage and tedious to build for the developer.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of having a finite amount of comments, the developer should instead
    create a separate table with the purpose of storing comments.
  prefs: []
  type: TYPE_NORMAL
- en: But how will the developer link the comments to the contact?
  prefs: []
  type: TYPE_NORMAL
- en: This is where `joins` become useful. Each contact has an `ID`. Each comment
    has a comment `ID`. Each comment also has additional information, such as the
    text content of the comment, who made the comment, and the time and date the comment
    was made.
  prefs: []
  type: TYPE_NORMAL
- en: When the comment is made by the system, it needs to be able to recognize that
    it is made against a specific contact and have that contact stored in that record
    as the contact ID.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the contact David has an ID of 1 and has three comments, then
    each of those comments will be stored in the table that has a contact ID of 1\.
    They will all have unique IDs of their own, namely, 1, 2, and 3.
  prefs: []
  type: TYPE_NORMAL
- en: The same is applied to users so it is possible to know which user made the comment.
    This would be the user ID. The `join` is required because the comment only has
    limited knowledge of the user that made it and the contact it belongs to. It merely
    knows that the contact ID of the contact it is related to and the user ID of the
    user that created it.
  prefs: []
  type: TYPE_NORMAL
- en: This is fine for a computer, but a human user needs more information than this.
    They will want to see the name of that user, not just their ID on the system.
    Joining together two or three tables with all the relevant information is required
    to achieve this. This is an example of how the database feeds the system. A few
    simple PHP functions can easily reformat this data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Database that is fed to the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'PHP can reformat this to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Creating a View Page and Building the Comments System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of this section is to show the contacts of the CRUD in operation.
    The following screenshot shows you what we're planning to accomplish by the end
    of this section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a View Page and Building the Comments System](graphics/8_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The comments system
  prefs: []
  type: TYPE_NORMAL
- en: 'To make our contacts section more useful, let''s add a `view` page where we
    can see an individual contact. The `view` page is also a perfect place to build
    a comments system to add comments against the contact:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your `Contacts` controller and create a new method called `view($id)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the `$id` is numeric and then load the contact from `get_contact($id)`.
    If `$contact` is empty, redirect to a 404 page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the page title and load the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In `app/views/admin/contacts`, create `view.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the layout files, then create a table to display the content, ensuring
    the variables are wrapped inside `htmlentities()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 8.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to start working on the comments, first we need a form to enter a comment
    and submit it. After the table but before the footer layout, create a heading
    called `Comments` and create a form with a single text area. Give the text area
    a name of body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When this form is submitted, the `view` method needs to process the request.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can go any further, we need a Comment model to interact with the `comments`
    table in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app/Models`, create a new model called `Comment.php`. For now, it will
    have one method, called `insert($data)`, which will create a new record in the
    comments table when called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, go to your `Contacts` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the new `Comment` model at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the `view($id)` method, create a new instance of the Comment model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As this comment model will only be used in this method, we don't need to assign
    it to a class property. A local variable is fine, in this case, $comment.
  prefs: []
  type: TYPE_NORMAL
- en: Next, check for the form submission and collect the `$body` post data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the comment is not empty, then create a `$data` array containing the body
    but also the `contact_id`, which is the `$id`, and the `user_id`, which is the
    ID of the logged-in in user which is stored in a session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Pass the `$data` to the `insert($data)` method to create the comment, and then
    set a message and redirect back to the view page of the contact:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity: Loading the Application'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have built the page and implemented the comments system. We will now load
    the application. After loading the application, you will notice that there is
    an edit and delete button, but there is no way to see that contact. We will fix
    this.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll look at enabling visibility of contacts in our application by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load up the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Have you noticed that there is an edit and delete button for each contact but
    no way to see the contact? Let's fix that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `app/views/admin/contacts/index.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new link above the edit link. In this case, I''ve given the button a
    different class, `btn-info`, to make the button blue so it''s different to the
    edit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Save and reload the page in the browser and you will see the view button. Click
    the view button and you will see a view page showing the contact and a form to
    enter a comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a comment and press `Add Comment`. The page will reload and you will see
    a success message. The comment has been inserted into the database, but you won't
    see it yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your Comment model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new method called `get_comments($id)`. The `$id` passed will be the
    ID of the contact.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this query, we need to do a `join`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A join is where you join two or more database tables together to get information
    out of them.
  prefs: []
  type: TYPE_NORMAL
- en: We need a join to get the username of the user who added the comment. In the
    comments table, we store a `user_id`. This can be used to for getting anything
    we need from the users table.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for a `join` is to select the columns required, prefixed with the
    table name and followed by the comment.
  prefs: []
  type: TYPE_NORMAL
- en: So the user's username says go to the users table and fetch the `username` column.
  prefs: []
  type: TYPE_NORMAL
- en: In the `from` section, specify the table to load, and in the where section,
    specify the criteria.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We want to load all comments where the comments `user_id` column matches the
    user''s ID column, and where the `contact_id` matches the provided `$id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Save this model and go to the `view` method of the `Contacts` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the form has been processed, make a call to the `get_comments($id)` method
    we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This loads the comments; the next step is to add comments to the compact function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The full method looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 8.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The final step is to display the comments. Open `app/views/admin/contacts/view.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the form, add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This loops through the comments. Each loop creates a new `div` with a class
    for a bit of styling. Inside the div, it prints out the comment. On the next line,
    the username is displayed. The username is only available due to the join we set
    up in the Comment model.
  prefs: []
  type: TYPE_NORMAL
- en: When the comment was added, the `created_at` field was populated. The default
    format is YYYY-MM-DD H:M:S, which is not very readable, so we can use date() to
    specify the date format, and as a second param use `strtotime()` and pass in the
    `created_at` field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`strtotime` converts the time into seconds. The end result is a user-friendly
    date.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, go back to a contact in your browser and add a comment. You will then see
    the new comment and any previous comments displayed on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered how to build CRUD sections that interact with
    forms, pass data from page to page and format dates. We have also added a comments
    system in our contacts application which can enable the users to add comments
    and record them.
  prefs: []
  type: TYPE_NORMAL
- en: We covered all the concepts which are required for developing a good and secure
    PHP application.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the book. In this book, we've learned all the basics of PHP like
    variables, arrays, loops, and so on. We have also learnt how to develop a PHP
    framework in an OOP environment while building the contacts application. We covered
    how the structure of a framework looks and how to properly format the error reporting
    technique using Whoops. Along with the framework development, we covered the authentication
    and user management in a framework developing environment and, finally, we covered
    how to CRUD our contacts application.
  prefs: []
  type: TYPE_NORMAL
