- en: Chapter 8. Generating Scan Reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter shows you how to do some things that in many situations might be
    illegal, unethical, a violation of the terms of service, or just not a good idea.
    It is provided here to give you information that may be of use to protect yourself
    against threats and make your own system more secure. Before following these instructions,
    be sure you are on the right side of the legal and ethical line... use your powers
    for good!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Saving scan results in normal format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving scan results in an XML format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving scan results to a SQLite database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving scan results in a grepable format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a network topology graph with Zenmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating an HTML scan report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting vulnerability checks performed during a scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scan reports are useful to both penetration testers and system administrators.
    Penetration testers need to report their findings and include evidence of the
    target's weaknesses. On the other hand, system administrators keep a network inventory
    and monitor the integrity of their networks.
  prefs: []
  type: TYPE_NORMAL
- en: One common mistake made by security professionals and network administrators
    is to not use the reporting capabilities within Nmap to speed up the generation
    of these reports. Nmap can write the scan results in several formats, and it is
    up to the user whether to generate an HTML report, read it from a scripting language,
    or even import it into a third-party security tool to continue testing other aspects
    of our targets. In this chapter we will cover different tasks related to storing
    scan reports. We start by introducing the different file formats supported by
    Nmap. Additionally, we will give you tips, such as using Zenmap to generate a
    network topology graph, reporting vulnerability checks, and using PBNJ to store
    results in MySQL, SQLite, or CSV databases.
  prefs: []
  type: TYPE_NORMAL
- en: After learning the tasks covered in this chapter, you should be fully proficient
    in choosing the appropriate file format in which to store the scan results, depending
    on the operations that you plan on performing against the report.
  prefs: []
  type: TYPE_NORMAL
- en: Saving scan results in normal format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap supports different formats for saving scan results. Depending on your needs,
    you can choose between a normal, XML, and grepable output. Normal mode saves the
    output as you see it on your screen, minus the runtime debugging information.
    This mode presents the findings in a well-structured and easy-to-understand manner.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to save the Nmap scan results to a file in normal
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save the scan results to a file in the normal output format, add the option
    `-oN <filename>`. This option only affects the output and can be combined with
    any port or host scanning technique:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After the scan is complete, the output should be saved now in the file `scanme.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap supports several output formats, such as normal, XML, grepable, and even
    script kiddie (this was only added for fun). Normal mode is easy to read, and
    is recommended if you don't plan on processing or parsing the results.
  prefs: []
  type: TYPE_NORMAL
- en: The generated file will contain the same information that was printed on screen
    without the run time warnings.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The normal output option `-oN` can be combined with any of the other available
    output options. For example, we might want to generate the results in the XML
    format to import it in a third-party tool and in normal mode to share with a coworker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The verbose flag `-v` and the debug flag `-d` will also alter the amount of
    information included. You can use integers or repeat the number of the `v` or
    `d` characters to set the verbosity or debug level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Saving Nmap's output in all formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap supports the alias option `-oA <basename>`, which saves the scan results
    in all of the available formats—normal, XML, and grepable. The different files
    will be generated with the extensions `.nmap`, `.xml` and, `.grep`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the previous command is equivalent to running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Including debugging information in output logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap does not include debugging information, such as warnings and errors, when
    saving the output in normal (`-oN`) and grepable mode (`-oG`). To make Nmap include
    this information, use the directive `--log-errors`, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Including the reason for a port or host state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make Nmap include the reason why a port is marked as opened or closed and
    why the host is marked as alive, use the option `--reason`, as shown in the followng
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The option `--reason` will make Nmap include the packet type that determined
    the port and host state. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Appending Nmap output logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, Nmap overwrites logfiles when any of the output options are used
    (`-oN`, `-oX`, `-oG`, `-oS`). To tell Nmap to append the results instead of overwriting
    them, use the directive `--append-output`, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note that with XML files, Nmap will not rebuild the tree structure. If you plan
    on parsing or processing the results, I recommend that you do not use this option
    unless you are willing to fix the file manually.
  prefs: []
  type: TYPE_NORMAL
- en: OS detection in verbose mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use OS detection in verbose mode to see additional host information, such as
    the IP-ID sequence number used for idle scanning, by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Saving scan results in an XML format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results to a SQLite database* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in grepable format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Comparing scan results with Ndiff* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring servers remotely with Nmap and Ndiff* recipe in [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving scan results in an XML format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Extensible Markup Language (XML)** is a widely known, tree-structured file
    format supported by Nmap. Scan results can be exported or written into an XML
    file and used for analysis or other additional tasks. This is one of the most
    preferred file formats, because all programming languages have very solid libraries
    for parsing XML.'
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe teaches you how to save the scan results in an XML format.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save the scan results to a file in the XML format, add the option `-oX <filename>`,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After the scan is finished, the new file containing the results will be written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The XML format is widely adopted, and all the programming languages have robust
    parsing libraries. For this reason, many Nmap users prefer the XML format when
    saving scan results for postprocessing. Nmap also includes additional debugging
    information when you save the scan results in this format.
  prefs: []
  type: TYPE_NORMAL
- en: 'An XML file, when generated, will contain the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Host and port states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timestamps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executed command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap Scripting Engine output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run statistics and debugging information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you wish to print the XML results instead of writing them to a file, set
    the option `-oX` to "`-`", as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The XML files produced by Nmap refer to an XSL stylesheet. XSL is used to view
    XML files in web browsers. By default it points to your local copy of `nmap.xsl`,
    but you can set an alternative stylesheet by using the argument `--stylesheet`,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: However, modern web browsers will not let you use remote XSL stylesheets due
    to **Same Origin Policy** (**SOP**) restrictions. I recommend that you place the
    stylesheet in the same folder as the XML file that you are trying to view, to
    avoid these issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are not planning on viewing the XML file in a web browser, save some
    disk space by removing the reference to the XSL stylesheet with the option `--no-stylesheet`,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Saving Nmap's output in all formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap supports the alias option `-oA <basename>`, which saves the scan results
    in all of the available formats—normal, XML, and grepable. The different files
    will be generated with the extensions `.nmap`, `.xml`, and `.grep`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the previous command is equivalent to running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Appending Nmap output logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, Nmap overwrites logfiles when any of the output options are used
    (`-oN`, `-oX`, `-oG`, `-oS`). To tell Nmap to append the results instead of overwriting
    them, use the directive `--append-output`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note that with XML files, Nmap will not rebuild the tree structure. If you plan
    on parsing or processing the results, I recommend that you do not use this option
    unless you are willing to fix the file manually.
  prefs: []
  type: TYPE_NORMAL
- en: Structured script output for NSE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A new feature of Nmap 6 is an XML-structured output for NSE. This feature allows
    NSE scripts to return a table of values to be reflected in the XML tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When this book was being written, all of the NSE scripts had not been updated
    to support this feature yet. If you are writing your own scripts, I highly encourage
    you to return a table of name-value pairs with meaningful key names to take advantage
    of this feature.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Saving scan results in normal format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results to a SQLite database* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in grepable format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Comparing scan results with Ndiff* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring servers remotely with Nmap and Ndiff* recipe in [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving scan results to a SQLite database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developers store information in SQL databases because it is fairly straightforward
    to extract information with flexible SQL queries. However, this is a feature that
    has not been included officially with Nmap yet. PBNJ is a set of tools for network
    monitoring that uses Nmap to detect hosts, ports, and services.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe will show you how to store scan results in SQLite and MySQL
    databases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PBNJ is a set of tools designed to monitor network integrity that is written
    by Joshua D. Abraham. If you are running a Debian-based system, you can install
    it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: To learn the requirements of and how to install PBNJ on other systems that support
    Perl, go to [http://pbnj.sourceforge.net/docs.html](http://pbnj.sourceforge.net/docs.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run `scanpbnj` and enter the Nmap arguments with the option `-a`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`Scanpbnj` will store the results in the database configured in the file `config.yaml`
    or set the parameters. By default, `scanpbnj` will write the file `data.dbl` in
    the current working directory.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The suite of PBNJ tools was written to help system administrators monitor their
    network integrity. It performs Nmap scans and stores the information returned
    in the configured database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SQLite database schema used by PBNJ is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The script `scanpbnj` is in charge of scanning and storing the results in the
    database configured by the user. By default it uses SQLite, and you do not need
    to change the configuration file for it to work. The database is written in the
    file `data.dbl`, and the configuration file can be found in the file `$HOME/.pbnj-2.0/config.yaml`.
    To use a MySQL database, you only need to change the driver and database information
    in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous example, we used the argument `-a` to pass the parameters to
    Nmap. Unfortunately PBNJ does not support all the latest features of Nmap, so
    I recommend that you learn all of the execution options of `scanpbnj` by reading
    its main page. When this book was being written, OS detection was not reading
    Nmap's CPE output properly.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PBNJ also has a script called `outputpbnj` to extract and display the information
    stored in the database. To list the queries available, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to run a query to list the recorded machines, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To retrieve the services inventory, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Dumping the database in CSV format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Outputpbnj` supports a few different output format as well. To output the
    query results in the **Comma Separated Value** **(CSV)** format, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be extracted from the database and formatted in CSV format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Fixing outputpbnj
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time that this book was being written, there was a bug that did not let
    `outputpbnj` run. After some researching of the issue, it looks like a patch might
    not be coming soon, so I decided to include the relevant fix here.
  prefs: []
  type: TYPE_NORMAL
- en: 'To identify if your `outputpbnj` is broken, try displaying the version number
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have a broken version, you will see the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Before attempting to fix it, let''s create a backup copy of the script by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the script with your favorite editor and find the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be able to run `outputpbnj` now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Saving scan results in normal format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in an XML format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in grepable format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Comparing scan results with Ndiff* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring servers remotely with Nmap and Ndiff* recipe in [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving scan results in a grepable format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap supports different file formats when saving the results of a scan. Depending
    on your needs, you may choose between the normal, grepable, and XML format. The
    grepable format was included to help users extract information from logs without
    having to write a parser, as this format is meant to be read/parsed with standard
    Unix tools. Although this feature is deprecated, some people still find it useful
    for doing quick jobs.
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipe, we will show you how to output Nmap scans in grepable
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save the scan results to a file in the grepable format, add the option `-oG
    <filename>`,as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The output file should appear after the scan is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In grepable mode, each host is placed on the same line with the format `<field
    name>: <value>`,and each field is separated by tabs (`\t`). The number of fields
    depends on what Nmap options were used for the scan.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are eight possible output fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host**: This field is always included, and it consists of the IP address
    and reverse DNS name if available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: This field has three possible values—Up, Down, or Unknown'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ports**: In this field, port entries are separated by a comma and a space
    character, and each entry is divided into seven fields by forward slash characters
    (`/`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protocols**: This field is shown when an IP protocol (`-sO`) scan is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ignored**: This field shows the number of port states that were ignored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: This field is only shown if OS detection (`-O`) was used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Seq Index**: This field is only shown if OS detection (`-O`) was used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP ID Seq**: This field is only shown if OS detection (`-O`) was used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, grepable mode is deprecated. Any output from the Nmap
    Scripting Engine is not included in this format, so you should not use this mode
    if you are working with NSE. Alternatively, you could specify an additional output
    option to store this information in another file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If you wish to print the grepable results instead of writing them to a file,
    set the option `-oG` to "`-`":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Saving Nmap's output in all formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap supports the alias option `-oA <basename>`, which saves the scan results
    in all of the available formats—normal, XML, and grepable. The different files
    will be generated with the extensions `.nmap`, `.xml`, and `.grep`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the previous command is the equivalent to running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Appending Nmap output logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, Nmap overwrites its logfiles when any of the output options are
    used (`-oN`, `-oX`, `-oG`, `-oS`). To tell Nmap to append the results instead
    of overwriting them, use the directive `--append-output` as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note that with XML files, Nmap will not rebuild the tree structure. If you plan
    on parsing or processing the results, I recommend that you do not use this option
    unless you are willing to fix the file manually.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Saving scan results in normal format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in an XML format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results to a SQLite database* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Comparing scan results with Ndiff* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring servers remotely with Nmap and Ndiff* recipe in [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a network topology graph with Zenmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zenmap's topology tab allows users to obtain a graphic representation of the
    network that was scanned. Network diagrams are used for several tasks in IT, and
    we can save ourselves from having to draw the topology with third-party tools
    by exporting the topology graph from Nmap. This tab also includes several visualization
    options to tweak the view of the graph.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to generate an image of your network topology
    by using Zenmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scan the network that you wish to map in Zenmap, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the tab named **Topology**. You should see the topology graph now, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7485_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **Save Graphic** in the top-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter a filename, select a file type, and click on **Save**, as shown in the
    screenshot below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7485_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Topology** tab is an adaptation of RadialNet ([http://www.dca.ufrn.br/~joaomedeiros/radialnet/](http://www.dca.ufrn.br/~joaomedeiros/radialnet/))
    by João Paulo S. Medeiros and is my favorite feature of Zenmap. It gives users
    a graph of the network topology that can be used by IT departments for several
    purposes, from inventory to the detection of rogue access points.
  prefs: []
  type: TYPE_NORMAL
- en: In the Zenmap topology graph, hosts are represented by nodes and the edges represent
    the connections between them. Obviously, this feature works best with the directive
    `--traceroute`, as this option allows Nmap to gather information about the network
    paths. Nodes are also colored and in different sizes, representing the state of
    the host and its ports. There are also special icons that are used to represent
    different types of devices, such as routers, firewalls, or access points.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to add an additional host to your current graph, you only need to
    scan the target. Zenmap keeps a track of all the scans made, and it will automatically
    add new networks to the topology view.
  prefs: []
  type: TYPE_NORMAL
- en: The **Topology** tab of Zenmap also offers several visualization controls, which
    can be tweaked as per your needs. These controls include grouping, highlighting,
    and animation.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the visualization controls, visit the official documentation
    at [http://nmap.org/book/zenmap-topology.html](http://nmap.org/book/zenmap-topology.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Saving scan results in an XML format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in grepable format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Managing different scanning profiles with Zenmap* recipe in [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating an HTML scan report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML pages have a particular strength over other file formats; they can be viewed
    in the web browsers that are shipped with most devices. For this reason, users
    might find it useful to generate scan reports in HTML and upload them somewhere
    for easy access.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe will show you how to generate an HTML page displaying scan
    results taken from an XML results file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this task we will use a tool called "XSLT processor". There are a few options
    available for different platforms, but the most popular one for Unix systems is
    called "xsltproc"; if you are running a modern Linux, there is a good chance that
    you already have it installed. "Xsltproc" also works on Windows, but it requires
    that you add some additional libraries to it.
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking for other cross-platform XSLT (and XQuery) processor, which
    is easier to install on Windows, go to [http://saxon.sourceforge.net/](http://saxon.sourceforge.net/).
    They offer a free version of "saxon", which is based on Java.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, save the scan results in the XML format by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Run `xsltproc` to transform the XML file to HTML/CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The HTML file should be written to your working directory. Now, just open it
    with your favorite web browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/7485_08_03_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: XSL stylesheets are used to view XML files straight from web browsers. Unfortunately,
    modern web browsers include stricter, same origin policy restrictions so it is
    more convenient to generate an HTML report instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `xsltproc` utility takes the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The reference to the XSL stylesheet is included in the XML file, and the style
    is taken from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to make sure that the referenced XSL stylesheet is readable, otherwise
    `xsltproc` will fail. By default, Nmap ships `nmap.xsl` to your installation directory.
    If you don''t have it in your system, you can download it from `<url>`, place
    it in your working directory, and use the directive `--stylesheet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: At the end, we should have both `nmap.xsl` and our results file `results.xml`
    in the same folder (our working directory).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don''t have the XSL stylesheet in your system, you can use the directive
    `--webxml` to have Nmap reference the online copy using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: To customize the look of the report, you can edit the XSL stylesheet. I recommend
    that you start with the file `nmap.xsl` to learn the field names.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Saving scan results in normal format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in an XML format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in grepable format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in normal format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results to a SQLite database* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Comparing scan results with Ndiff* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monitoring servers remotely with Nmap and Ndiff* recipe in [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting vulnerability checks performed during a scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap can be turned into a vulnerability scanner by using NSE scripts. The library
    `vuln` manages and unifies the output of the vulnerability checks performed by
    the Nmap Scripting Engine.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to make Nmap report the vulnerability checks that
    are performed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Launch the NSE scripts in the `vuln` category against your target, by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are lucky, you will see a vulnerability report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The option `--script vuln` tells Nmap to launch all of the NSE scripts under
    the category `vuln`. The `vuln` library reports back several fields, such as name,
    description, CVE, OSVDB, disclosure date, risk factor, exploitation results, CVSS
    scores, reference links, and other extra information.
  prefs: []
  type: TYPE_NORMAL
- en: The library `vuln` was created by Djalal Harouni and Henri Doreau to report
    and store the vulnerabilities found with Nmap. The information returned by the
    library helps us write vulnerability reports by giving us detailed information
    about the vulnerability. Keep in mind that the library was introduced recently
    and not all of the NSE scripts use it yet.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want Nmap to report all of the security checks—even the unsuccessful
    ones—set the library argument `vulns.showall`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Each `vuln` NSE script will report its state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Saving scan results in normal format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving scan results in an XML format* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting services of a remote host* recipe in [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Matching services with known security vulnerabilities* recipe in [Chapter
    3](ch03.html "Chapter 3. Gathering Additional Host Information"), *Gathering Additional
    Host Information*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
