- en: Chapter 4. Data Operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about functions and classes. We covered
    how to define and call functions. We also covered how to define classes and use
    classes and functions together.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus on handling input from users and printing outcomes
    back to them, handling errors gracefully, and learning the basics of using the
    MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify how to accept input from the user and print it to the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement the basics of using MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inputting and Outputting Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to accept input from a user is a major requirement when moving from
    building websites with PHP to building web applications with PHP. Typically, input
    comes from HTML forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a simple contact form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding contact form, we see input for a user's name, email, and a
    message. The method that we are going to use to submit this form is called a `POST`
    request.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read the data that is being submitted, we are going to add some PHP to the
    top of the form, which will read and render data from our `POST` request:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it's easy to accept input from our application's user. In the
    preceding code example, we use a special variable, `$_POST` array, to access all
    of the data that is submitted via a `POST` request. The `$_POST` variable, an
    associative array, and the content can be accessed via the names you specify in
    the input elements.
  prefs: []
  type: TYPE_NORMAL
- en: Another request type that you can use is `GET` request. `GET` requests are used
    more often than you might think; `GET` is the request type that you use when you
    navigate to a website or perform a search on Google. The input for a `GET` request
    is done via a query string.
  prefs: []
  type: TYPE_NORMAL
- en: 'A query string is a string that is attached to the end of a URL, prepended
    with a question mark, as seen here: [https://www.example.com?name=Michael&age=12](https://www.example.com?name=Michael&age=12):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inputting and Outputting Data](graphics/4_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, you can see that we have two keys that are separated
    with an ampersand. Just like in the `POST` method, there is a special variable
    for a `GET` request, and that is the `$_GET` variable (which is an associative
    array, as well).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to get the name from the previous query string, you can use this
    line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `GET` request with the form, as well. Let''s revisit the form
    element that we saw before:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the form's method attribute, we changed it to `GET`, swapping the `$_POST`
    variable with the `$_GET` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When accepting user input, it's sometimes necessary to clean up the input before
    doing anything with it. Some input requires cleaning any whitespace from the beginning
    and end. This is where PHP's `trim` function comes in to play. The `trim` function
    will clean whitespace, and other similar characters, from both sides of the user's
    input. If you want to remove from either the left or right side, you can use the
    `ltrim` and `rtrim` functions, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Form for Our User List
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to start off by building a form for our user list. At the end
    of this section, you will have a form that will accept your `firstname`, `lastname`,
    and `email`. It will have a submit button at the end, to submit the information:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory and call it `users_list`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the new directory, create an `index.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `index.php` file in your text editor, and add the form code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our form, we want to be able to view the data submitted to
    the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to see our form in action, we will open the working directory in the Terminal
    and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With any web application, you are going to need to have a way to store data.
    The service that permits you to persist your current state in MySQL database is
    known as persistence. If variables allow you to store data temporarily, persistence
    allows you to store the data in databases long term.
  prefs: []
  type: TYPE_NORMAL
- en: The primary database type that is used in PHP is MySQL. MySQL databases are
    known as relational-based databases that are organized into tables.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover how to use a MySQL database with PHP, and how
    to perform various operations with it.
  prefs: []
  type: TYPE_NORMAL
- en: Connect to a Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step for using a database is to connect to one. In this chapter, we
    are going to focus on using the PDO, or PHP Data Object, style of usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect to a database, use the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, you can see that we have a good chunk of new code. We
    start off by defining four new variables to hold the credential values for our
    database: one for the host URL, one for the username, one for the password, and
    finally, one for the name of the database that we are connecting to. Next, we
    wrap the database connection code within a `try` block; this will `catch` any
    errors that come up when we connect to the database and run queries. Within the
    `try` block, we initiate a new instance of the PDO class by using the credential
    variables we defined earlier, assigning it to the `$conn` variable. We then set
    the error mode to ensure that it triggers our `catch` block if any errors occur.
    Lastly, in the `try` section, we `echo` out a successful connection message. In
    the `catch` section of the try/catch block, we simply echo out the error message
    that was triggered.'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Database Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now create a table using an SQL query:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To create a table, we use the `CREATE TABLE` command, followed by the name of
    the table. Then, inside a pair of parentheses, we define the fields for the table.
    The table that we created in the query will create a user's table, which will
    hold the user's ID (the primary key of this table) and will auto-increment a user's
    name of the type `varchar,` with a maximum of 60 characters. The table will also
    hold an email address of the type `varchar`, with a maximum of 30 characters.
  prefs: []
  type: TYPE_NORMAL
- en: Insert a Record into the Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now have a table in our database, and we can add data to it. We add data
    using an `insert` query. After we connect to the database and set the error mode,
    we can define our query. The `Insert` query starts with the `INSERT INTO` command,
    followed by the name of the table that we are inserting data into. In a pair of
    parentheses, we define the fields that we are going to write to. Right after the
    fields, we define the values that we want to enter into the table:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Fetch a Single Row from a Database Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to fetch a user from the database, you use a `SELECT` query. In
    this case, we want to get the new user that we inserted in the previous code block.
    We''ll use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using the `$conn` variable, we prepare a `SELECT` query, indicating that we
    want to pull information from the users table; we then use the `WHERE` clause
    to define the conditions for the desired information. To finally run the query,
    we execute the prepared statement, passing an `array` with the required email
    address. Since we want to have an associative array returned to us, we set the
    fetch model to `FETCH_ASSOC`, getting the single record by using the fetch method.
  prefs: []
  type: TYPE_NORMAL
- en: To render the user array, we use the `PRINT` command in between the open and
    close `pre tags`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`pre tags` beautifies an array that has been printed. This is typically used
    to debug what is contained within an array.'
  prefs: []
  type: TYPE_NORMAL
- en: Fetch Multiple Rows from a Database Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to fetch all of the users in a table, we do away with the prepared
    statements and run a query directly. This time around, we remove the `WHERE` clause.
    Instead of using the fetch function, we use the `fetch_all` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Update a Record in a Database Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we understand how to add and fetch data from a database table, we can
    start to edit individual records. In MySQL, we update data by using an `UPDATE`
    query. To run an `UPDATE` query, we go back to our prepared statements and start
    our query with the command `UPDATE,` followed by the name of the table (in this
    case, the users table). Next, we use the `SET` command to start the process of
    defining the fields and the values that need to be updated, and then we add a
    `WHERE` clause to isolate the specific record(s) that we want to have the new
    values. To add a bit of feedback to how the query went, echo out the count via
    the row count function.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change our user's email address to `test123@email.com:`
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Delete a Record in a Database Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our final section in MySQL will be removing data from a database. To remove
    data, we use the `DELETE` query. The `DELETE` query starts with `DELETE FROM,`
    followed by the name of the table you are looking to remove data from; finish
    the query with a `WHERE` clause, to further specify the record you wish to delete.
    We place this query in a prepared statement, then execute it by passing the value
    of the `WHERE` clause:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating an employee Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our final project will be to store the input that we get from the users within
    a database table. Before we get into writing the code to add the data to the database, we
    need to create a database, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect to MySQL using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create the `packt_database` database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Tell MySQL to use the newly created database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create the users table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can close our Terminal and get started finishing our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding Users to a Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to add users to our database using PHP. We then
    create a form where we accept the `INSERT` query from the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform this, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Reopen the `users_list` directory in your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the second `if` statement, connect to your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, go ahead and use an `INSERT` query to add the input that you receive
    from the user to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you''re ready to test out the simple app. Open the `user_list` directory
    in the Terminal and use the following command to serve your app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have reached the end of this chapter. In this chapter, we learned how to
    accept a user's input, and how to access it via PHP. Finally, we learned the basics
    of using MySQL databases, and applied all of the principles into a mini app that
    adds users to a database via a web form.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the basics of building a PHP web application
    using Object Oriented Programming principles such as namespaces, use statements,
    access modifiers, and so on. We will also cover how to structure an application
    properly using MVC design concepts.
  prefs: []
  type: TYPE_NORMAL
