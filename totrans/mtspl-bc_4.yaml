- en: Post-Exploitation with Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will feature hard-core post-exploitation. Throughout this chapter,
    we will focus on approaches to post-exploitation, and will cover basic tasks,
    such as privilege escalation, getting passwords in clear text, finding juicy information,
    and much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'During this chapter, we will cover and understand the following key aspects:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Performing necessary post-exploitation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using advanced post-exploitation modules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaining persistent access to the targets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us now jump into the next section, where we will look at the basics of the
    post-exploitation features of Metasploit.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Extended post-exploitation with Metasploit
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already covered a few of the post-exploitation modules in the previous
    chapters. However, here we will focus on the features that we did not cover. Throughout
    the last chapter, we focused on exploiting the systems, but now we will focus
    only on the systems that are already exploited. So, let us get started with the
    most basic commands used in post-exploitation in the next section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Basic post-exploitation commands
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The core meterpreter commands are those that are available on most of the exploited
    systems using a meterpreter payload, and provide the necessary core functionalities
    for post-exploitation. Let us get started with some of the most basic commands
    that will help you with post-exploitation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The help menu
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can always refer to the help menu''s list of all the various commands that
    are usable on the target by issuing `help` or `?`, as shown in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00244.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: Background command
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While carrying out post-exploitation, we may run into a situation where we
    need to perform additional tasks, such as testing for a different exploit, running
    a privilege escalation exploit, and so on. However, to achieve this, we need to
    put our current meterpreter session in the background. We can do this by issuing
    the `background` command as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00260.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: We can see from the preceding screenshot that we successfully managed to put
    our session in the background and re-interacted with the session using the `sessions
    -i` command followed by the session identifier.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Machine ID and the UUID command
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can always get the machine ID of an attached session by issuing the `machine_id`
    command as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00278.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: 'To view the UUID, we can simply issue the `uuid` command as shown in the following
    screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: Networking commands
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can access quick network information by using the `ipconfig`/`ifconfig`,
    `arp`, and `netstat` commands. We have already covered the `arp` command in the
    previous chapters. Let''s have a look at the output generated by the `ipconfig`
    command, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: The `ipconfig` command allows us to view the local IP address and any other
    associated interfaces. This command is vital because it reveals any other internal
    networks connected to the compromised hosts. I leave the `netstat` command as
    an exercise for you all to complete in your own time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: File operation commands
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can view the present working directory on the target machine by issuing
    the `pwd` command as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, we can browse the target file system using the `cd` command and
    create directories with the `mkdir` command as we normally do on a system. The
    meterpreter shell allows us to upload files onto the target system using the `upload`
    command. Let us see how it works:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: 'We can edit any file on the target by issuing the `edit` command followed by
    the filename, as shown in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00170.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: 'Let us now view the contents of the file by issuing the `cat` command as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00186.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: 'I will leave the `ls`, `rmdir`, and `rm` commands as exercises for you to complete
    in your own time. Next, we download files from the target using `download` command
    as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00226.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Desktop commands
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit features `desktop` commands, such as enumerating desktops, taking
    pictures from a web camera, recording from a mic, streaming from cameras, and
    much more. We can see the available features as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: Information associated with the target desktop can be compromised using `enumdesktops`
    and `getdesktop`. The `enumdesktop` command lists out all the available desktops
    whereas `getdesktop` lists information related to the current desktop.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Screenshots and camera enumeration
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is mandatory for the tester to get prior permissions before taking screenshots,
    webcam snaps, running a live stream, or key logging. However, we can view the
    target''s desktop by taking a snapshot using the `snapshot` command, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00269.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: 'Viewing the saved JPEG file, we have the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: 'Let us see if we can enumerate the cameras and see who is working on the system:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 'Using the `webcam_list` command, we can find out the number of cameras associated
    with the target. Let''s stream the cameras using the `webcam_stream` command,
    as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: 'Issuing the preceding command opens a web camera stream in the browser, as
    shown in the screenshot. We can also opt for a snapshot, instead of streaming,
    by issuing the `webcam_snap` command, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: 'Haahaa! Well, I would say that''s one way to hide your face from online intrusions.
    However, sometimes, if working in a law enforcement agency, you can be tasked
    with listening to the environment for surveillance purposes. To achieve that,
    we can use the `record_mic` command, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00152.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: 'We can set the duration of the capture with the `record_mic` command by passing
    seconds with the `-d` switch. Another interesting piece of information that can
    be gained from the target is their key logs. We can dump key logs by starting
    the keyboard sniffer module using the `keyscan_start` command, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: 'After a few seconds, we can dump the key logs using the `keyscan_dump` command,
    as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00157.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: We saw many commands over the course of this section. Let us now move into the
    advanced section for post-exploitation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Advanced post-exploitation with Metasploit
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use the information gathered from basic commands to
    achieve further success and access levels in the target's system.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Migrating to safer processes
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw in the previous section, our meterpreter session was loaded from
    a temporary file. However, if a user of a target system finds the process unusual,
    he can kill the process, which will kick us out of the system. Therefore, it is
    a good practice to migrate to safer processes, such as `explorer.exe` or `svchost.exe`,
    which evades the eyes of the victim by using the `migrate` command. However, we
    can always use the `ps` command to figure out the PID of the process we want to
    jump to, as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00236.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the PID of `explorer.exe` is `1896`. Let us use the `migrate`
    command to jump into it, as shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: We can see that we successfully managed to jump into the `explorer.exe` process.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Migrating from a process to a different one may downgrade privileges.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining system privileges
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the application we broke into is running with administrator privileges,
    it is very easy to get system-level privileges by issuing the `getsystem` command,
    as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00058.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: System-level privileges provide the highest level of privileges, with the ability
    to perform almost anything on the target system.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: The `getsystem` module is not as reliable on the newer version of windows. It
    is advisable to try local privilege escalation methods and modules to elevate
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Changing access, modification, and creation time with timestomp
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit is used everywhere, from private organizations to law enforcement.
    Therefore, while carrying out covert operations, it is highly recommended that
    you change the date of the files accessed, modified, or created. In Metasploit,
    we can perform time-altering operations using the `timestomp` command. In the
    previous section, we created a file called `creditcard.txt`. Let us change its
    time properties with the `timestomp` command as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00245.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: 'We can see the access time is 2016-06-19 23:23:15\. We can use the `-z` switch
    to modify it to `1999-11-26 15:15:25`, as shown in the preceding screenshot. Let
    us see whether or not the file was modified correctly:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00165.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: 'We successfully managed to change the timestamp for the `creditcard.txt` file.
    We can also blank all the time details for a file using the `-b` switch, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00183.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: Using the `timestomp` command, we can individually change modified access, and
    creation times as well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining password hashes using hashdump
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we gain system privileges, we can quickly figure out the login password
    hashes from the compromised system by issuing the `hashdump` command, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00217.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: Once we have found out the password hashes, we can launch a pass-the-hash attack
    on the target system.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: For more information on pass-the-hash attacks, refer to [https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/](https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to an excellent video explaining pass-the-hash attacks and their
    mitigation at [https://www.youtube.com/watch?v=ROvGEk4JG94](https://www.youtube.com/watch?v=ROvGEk4JG94).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit and privilege escalation
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at using Metasploit to obtain the highest level
    of privileges on the target system. Most of the applications we are targeting
    run on user-level privileges, which provide us with general access but not access
    to the complete system. However, to obtain system-level access, we need to escalate
    privileges using vulnerabilities in the target system after gaining access to
    the system. Let us see how we can achieve system-level access to various types
    of operating system in the next sections.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Escalating privileges on Windows Server 2008
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During a penetration test, we often run into situations where we have limited
    access, and, when running commands such as `hashdump`, we might get the following
    error:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00256.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: 'In such cases, if we try achieving system privileges with the `getsystem` command,
    we get the following errors:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00261.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: 'So, what shall we do in these cases? The answer is to escalate privileges using
    post-exploitation to achieve the highest level of access. The following demonstration
    is conducted on a Windows Server 2008 SP1 operating system, where we used a local
    exploit to bypass the restrictions and gain complete access to the target:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00279.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we used the `exploit/windows/local/ms10_015_kitrap0d`
    exploit to escalate privileges and gain the highest level of access. Let us check
    the level of access using the `getuid` command, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: We can see that we have system-level access, and we can now perform anything
    on the target.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: For more info on the kitrap0d exploit, refer to [https://technet.microsoft.com/en-us/library/security/ms10-015.aspx](https://technet.microsoft.com/en-us/library/security/ms10-015.aspx).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation on Linux with Metasploit
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw how we could escalate privileges on a Windows-based operating system
    using Metasploit in the previous section. Let us now have a look at manually running
    the privilege escalation exploits. This exercise will help you get ready for competitive
    and practical information security certification exams.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Say that we have gained a shell on a Linux UBUNTU 14.04 LTS server with limited
    access, as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: 'Let us drop into the shell and gain more reliable command execution access
    by issuing the `shell` command, as shown in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00259.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have issued the `id` command in the `shell` Terminal; we
    have the user ID of the current user, which is 1000, and the username is rootme.
    Gathering more information on the kernel with the `uname -a` command, we can see
    that the kernel version of the operating system is 3.13.0-24, the release year
    is 2014, and the machine is a running a 64-bit operating system.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Having found these details, and after browsing through the Internet, we come
    across *Linux Kernel 3.13.0 < 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - ''overlayfs''
    Privilege Escalation Exploit (CVE:2015-1328)* from [https://www.exploit-db.com/exploits/37292](https://www.exploit-db.com/exploits/37292).
    Next, we download the C-based exploit and host it on our local machine so that
    we can transfer this exploit to the target machine. Since we already have access
    to the shell on the target, we can just issue the `wget` command followed by the
    location of the raw C exploit source file hosted on our machine, as shown in the
    following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00143.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Our next task is to compile this exploit and run it on the target. To compile
    the exploit, we type in `GCC` followed by the source file''s name while assigning
    an output name with the `-o` switch. We will also be providing the `-lpthread`
    switch since we are using pthread calls in the exploit. Issuing the complete command,
    we can see that the exploit is compiled to the file named bang. Let''s assign
    execute permissions to the bang file by issuing the `chmod +x bang` command and
    run the exploit, as shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: Yeah! We can see that when issuing the `whoami` command, the system tells us
    that we are root. In other words, we have gained the highest possible access to
    the target and probably now have much more access to the server.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: For more information on CVE 2015-1328, refer to [http://seclists.org/oss-sec/2015/q2/717](http://seclists.org/oss-sec/2015/q2/717).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Gaining persistent access with Metasploit
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gaining persistent access to the target systems is important when you are a
    part of a law enforcement agency. However, in a conventional penetration test,
    persistence may not be very practical, unless the testable environment is huge
    and will take many days for the test to complete. But this doesn't mean that it
    is not worth knowing how to maintain access to the target. In the following section,
    we will cover persistence techniques, which one can use to maintain access to
    the target system. In addition, Metasploit has depreciated the persistence and
    `metsvc` modules in meterpreter, which were used to maintain access to the target.
    Let's cover the new techniques for achieving persistence.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Gaining persistent access on Windows-based systems
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we have already gained meterpreter access to a system running
    Windows Server 2012 R2\. Let''s move the meterpreter to the background using the
    `background` command and use the latest persistence module, which is `post/windows/manage/persistence_exe`.
    The beauty of this module is that it is not Metasploit dependent, which means
    that you can use any executable to achieve persistence on it. Let''s put it to
    `use` and run a quick `show options` to check all the options we need to set,
    as shown in the following screen:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: We can see that we have four options. REXENAME is the name of the `.exe` file
    that will be loaded onto the victim system. REXEPATH is the path of the executable
    on our system that will be uploaded to the target, and will be renamed as the
    value set on REXENAME. The SESSION option will contain the session identifier
    of the meterpreter through which the file will be uploaded to the target. The
    STARTUP option will contain one of the values from USER, SYSTEM, SERVICE. We will
    keep USER in the STARTUP option in the case of a limited access user; the persistence
    will be achieved on the login of that particular user only. Achieving persistence
    on any user login can be obtained by setting the value of STARTUP to SYSTEM. However,
    to achieve persistence at SYSTEM level, administrator privileges will be required,
    and the same would be the case for a SERVICE install. As a result, we will keep
    it as USER only.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'For REXEPATH, we have created a backdoor with `msfvenom` - which is a meterpreter
    for Windows-based systems - exactly the way we did in the previous chapters. Let''s
    set the `SESSION` option to `3`, since our session ID for meterpreter is `3`,
    as shown in the following screen:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00228.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s set the `REXEPATH` to the path of our executable and run the module
    as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00251.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: 'Running the module, we can see that the persistence is achieved. Let''s test
    it out by setting up the handler to accommodate our `nj.exe` file, which connects
    back to port `1337`, as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00264.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: What we did in the preceding case is supply the reboot command to the victim
    through meterpreter, which caused the system to reboot. Next, we quickly set up
    a handler to receive incoming meterpreter sessions on port `1337`, and, as soon
    as we ran the `exploit` command, the rebooted system connected to our meterpreter,
    which indicates a successful persistence over the target system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Gaining persistent access on Linux systems
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To achieve persistence on Linux systems, we can use the `exploit/linux/local/cron_persistence`
    module after gaining the initial meterpreter access, as shown in the following
    screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to set the `SESSION` option to our meterpreter session identifier,
    as well as configure the `USERNAME` to the current user of the target machine
    and run the module, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00057.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: As soon as Cron-based persistence is achieved, you can set up a handler for
    incoming meterpreter sessions in a similar way to the method we used for Windows
    systems. However, the payload for Linux-based operating systems will be `linux/x86/meterpreter/reverse_tcp`.
    I leave it to you guys to complete this exercise as no training is better than
    self-paced training.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: For more on Cron persistence, refer to [https://www.rapid7.com/db/modules/exploit/linux/local/cron_persistence](https://www.rapid7.com/db/modules/exploit/linux/local/cron_persistence).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered plenty of things in this chapter. We kicked off by learning basic
    post-exploitation and moved on to advanced post-exploitation. We also covered
    migration, obtaining system privileges, timestomp, and obtaining hashes. We also
    saw how we could use Metasploit for privilege escalation and maintaining access
    for both Linux and Windows systems.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'You had a variety of exercises to complete throughout this chapter. However,
    if you would like to try more, then try performing the following tasks:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Try privilege escalation on a variety of systems, including Windows Server 2003,
    Windows XP, Windows 7, Windows 8.1, and Windows 10\. Notice the differences and
    maintain a list of modules used for escalating privileges on these systems.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install two- to three-year-old copies of Red Hat, CentOS, and Ubuntu operating
    systems, figure out the kernel version, and try escalating privileges on those
    machines.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Figure out ways to obtain persistence on OSX, BSD, and Solaris operating systems.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 5](part0088.html#2JTHG0-a731d733dba14ccabae643b74e2c8790), *Testing
    Services with Metasploit*, we will look at testing services with Metasploit. Our
    focus will be on services that may act as an entire project rather than being
    a part of a VAPT engagement.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](part0088.html#2JTHG0-a731d733dba14ccabae643b74e2c8790)中，*使用Metasploit测试服务*，我们将研究如何使用Metasploit测试服务。我们的重点将放在可能作为整个项目而不是VAPT参与的一部分的服务上。
