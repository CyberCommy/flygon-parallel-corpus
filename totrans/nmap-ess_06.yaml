- en: Chapter 6. Introduction to the Nmap Scripting Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although being able to conduct port scans is an integral part of using the
    Nmap suite of tools, the developers of Nmap created a very powerful engine that''s
    built into the tool: the **Nmap Scripting Engine** (**NSE**). This chapter introduces
    the NSE, and covers all the topics needed to use reliably-written scripts in the
    Nmap script repository, in order to conduct reconnaissance scans that include
    much more than just what ports are open and which services are listening.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The history of the NSE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the NSE works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to find existing scripts to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to run scripts using the NSE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The history of the NSE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the mid-2000s, Nmap had established itself as the clear leader in port scanning
    tools—and security tools in general—whether open source or not. Although it's
    a constant battle to continually innovate and optimize, Nmap can only be considered
    as an extremely successful project.
  prefs: []
  type: TYPE_NORMAL
- en: Due to its popularity, and the fact that it's an open source project with a
    relatively high profile, Nmap was selected to participate in Google Summer of
    Code several times. Google Summer of Code is a software development internship/association
    project, during which students are selected and put on open source software teams
    to build new features into existing projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In May 2006—when the currently released version of Nmap was only 4.0—Nmap was
    selected for its second Summer of Code season. The previous year, in 2005, several
    improvements had been made through the students'' coding for the Nmap project:
    the students had written a contemporary implementation of Netcat (called Ncat),
    upgraded the OS detection for Nmap to its second (and much better) generation,
    and created a small, simplified GUI that would later become Zenmap.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this second run through, after an extremely successful first summer, the
    participant developers were even more ambitious. Since Nmap clearly had an excellent
    set of features, why not make those features extendable by the greater community?
    New vulnerabilities and scanning techniques were being pioneered on a very frequent
    basis, and full Nmap releases couldn''t keep up with the things that security
    professionals needed to assess. Every time a new vulnerability came out, security
    professionals (and malicious hackers!) would scan for vulnerable services with
    Nmap, but could only test whether software versions were vulnerable by using manual
    analysis: clearly, not a very efficient use of time.'
  prefs: []
  type: TYPE_NORMAL
- en: Because of the new resources granted by Google Summer of Code developers, an
    arbitrary scripting framework was created that allows users to trigger additional
    checks based on certain open ports or services. This means, for example, that
    if you're looking for a specific file on all web servers—`robots.txt`, for example—you
    can easily create a script that can check for it on all HTTP and HTTPS services.
    The NSE (and the inclusion of Nmap scripts in default installations of Nmap) truly
    revolutionized the versatility of the tool suite.
  prefs: []
  type: TYPE_NORMAL
- en: After months of hard work, the NSE was released in December 2006, packaged with
    Nmap release 4.21ALPHA1\. The scripts that come packaged with the NSE have continued
    to grow in complexity and usability, and are excellent resources to turn Nmap
    into a fully-featured security tool suite.
  prefs: []
  type: TYPE_NORMAL
- en: The inner working of the NSE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The NSE is a framework that runs code written in the programming language Lua
    with specific flags that the engine can parse. Lua is a lightweight, fast, and
    interpreted programming language—one that has the most fame for scripting user
    interfaces for computer games such as *World of Warcraft*—that has a similar syntax
    to other contemporary interpreted languages.
  prefs: []
  type: TYPE_NORMAL
- en: If you've ever seen code written in Python or Ruby, Lua won't seem too alien
    to you.
  prefs: []
  type: TYPE_NORMAL
- en: '![The inner working of the NSE](img/4065OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows an Nmap script that identifies information about
    Bitcoins (written by Patrik Karlsson). Don't worry if you don't understand it
    yet—that's something we will cover in [Chapter 7](ch07.html "Chapter 7. Writing
    Nmap Scripts"), *Writing Nmap Scripts*—but you can see that the code used to generate
    a relatively complex Nmap script looks very simple. This is the whole point of
    the NSE! Where security engineers and system administrators used to have to export
    Nmap results, find the information they are looking for and then use third-party
    tools to assist them; they are now able to either find a script that serves their
    purposes, or write a simple one themselves. Many penetration testers can leverage
    the Nmap scripting language to even weaponize the tool for security exploits—which
    we will cover in more detail in [Chapter 10](ch10.html "Chapter 10. Penetration
    Testing with Metasploit"), *Penetration Testing with Metasploit*.
  prefs: []
  type: TYPE_NORMAL
- en: Finding Nmap scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many Nmap scripts come with Nmap, and are already prepackaged on your system.
    Still, though, it can be difficult to determine which scripts you'd like to run
    for each particular scan—or assessment—that you may be on. Fortunately, the NSE
    documentation portal is one of the most in-depth and well-documented aspects of
    the entire Nmap project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By going to [http://nmap.org/nsedoc/](http://nmap.org/nsedoc/), you can see
    all of the scripts that are part of the official Nmap script repository.
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding Nmap scripts](img/4065OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the **Nmap Scripting Engine Documentation** (**NSEDoc**)
    reference portal web page, as well as all the official Nmap scripts at the time
    of writing this book. Each script has a small paragraph next to its name, which
    gives a brief description of what it is designed to do. At the time of writing,
    there are 490 and 113 Nmap scripts that are part of the official documentation—that's
    quite a lot you can do with the NSE!
  prefs: []
  type: TYPE_NORMAL
- en: 'These scripts are broken down into several categories, each with their own
    specific use case. It''s worth noting that sometimes these scripts can be in several
    categories, depending on the full functionality of the script. The categories
    and their definitions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Auth**: These scripts attempt to authenticate to services, and can verify
    found credentials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Broadcast**: These scripts broadcast certain protocols in order to find out
    whether or not they are listening'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Brute**: These scripts attempt brute force or dictionary-based attacks against
    network services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default**: This is the default category of scripts that may run when a scan
    is initiated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discovery**: These scripts attempt to enumerate sensitive information from
    hosts and network services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Denial of Service (DoS)**: These scripts may cause disruption to the service
    that is being scanned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploit**: These scripts attempt to execute an exploit that exploits a given
    vulnerability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External**: These scripts query third-party databases, such as DNS blacklists,
    to gather additional information about targets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fuzzer**: These scripts send random "garbage" information to services in
    order to attempt to find flaws in the software'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intrusive**: These scripts are an umbrella category for any script that may
    cause damage or be intrusive to the service itself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Malware**: These scripts attempt to find instances of the known malware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safe**: These scripts are verified to not cause harm to servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version**: These scripts attempt to identify specific versions—as well as
    information disclosures—from specific services in a more in-depth way than normal
    service version detection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vuln**: These scripts identify the known vulnerabilities in services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's important to know which categories you want to run, since several of these
    categories—specifically DoS, exploit, and intrusive—can be dangerous to run against
    weak or production systems. The inclusion of these Nmap scripts in security assessments
    can easily increase the utility of Nmap in a very significant way.
  prefs: []
  type: TYPE_NORMAL
- en: Running Nmap scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running Nmap scripts is easy—and some, the "default" category, will even run
    on their own as a part of a normal scan. Some scripts are designed to simply give
    additional information about a target, while others will go so far as to actively
    exploit it (the "exploit" category) or even take it offline (the "DoS" category).
  prefs: []
  type: TYPE_NORMAL
- en: The first step to run an Nmap script that's part of the actually NSEDoc repository
    is to verify that the script is stored locally. Unlike the Nmap tool itself, the
    Nmap script repository is frequently updated—so it's in your best interest to
    always verify that you have the most updated version. You can update the NSE scripts
    by running Nmap with the flag `--script-updatedb`, which updates the script database.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running Nmap scripts](img/4065OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the script database is updated, you can select scripts by using the `--script`
    tag. You can either select specific scripts for a given purpose, or you can select
    broad categories of scripts. Fortunately, the Nmap developers allow categories
    of scripts to be selected at once. For example, let''s say that we wanted to run
    all scripts that are default, but also all scripts that are intrusive; we can
    run a scan using the `--script default` or `intrusive` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running Nmap scripts](img/4065OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see in the preceding screenshot that running `default` scripts here
    clearly flagged several findings immediately. If you were to run the same scan
    with `-vv` to have double-verbose mode enabled on the scan, you would also be
    able to see the number of scripts loaded against the given target (in this case,
    93). In this particular instance, the `http-title` script showed the HTML title
    (`Go ahead and ScanMe!`) in the scan results itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'If selecting scans by category or categories is too much, you can also select
    scans by their specific name, or use wildcards. For example, if I wanted to scan
    a web server and load all the HTTP modules in the default scan repository, I would
    scan with the `--script "http-*"` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running Nmap scripts](img/4065OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that launching a scan with the `"http-*"` wildcard script name works
    in loading every script, but there are a few errors coming up. Certain scripts
    take parameters, so if loading many scripts, it's important to understand which
    ones are being loaded. The scripts that could accurately fire at HTTP ports will
    still launch, but those that require additional information would fail (and not
    return any useful information). To provide additional information to Nmap scripts,
    you can provide arguments with the `--script-args` flag.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, it's possible to combine different options to launch scripts by including
    different tags in parenthetical. For example, if you wanted to launch scripts
    that fit into the categories of default, safe, or intrusive—but specifically did
    not want to launch any scripts that launch against web servers—you could start
    a scan with the `--script` (default, safe, or intrusive) flag and not `"http-*"`.
    Always remember to keep in mind that the `or` flag is not an exclusive or— meaning
    that scripts in both categories will still run—but `and` must be in both sections.
  prefs: []
  type: TYPE_NORMAL
- en: Although the Nmap script repository is very thorough, it's always worth looking
    elsewhere on the Internet if a specific script that you think would be useful
    is not published. Many blogs from security researchers will have NSE scripts for
    a specific purpose, and before trying to write your own, it's absolutely worth
    it to check a search engine first!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced the NSE, which can be one of the most useful, versatile,
    and engaging features of the Nmap tool suite. We should now be able to launch
    scans that do more than just port and service versions—Nmap scripts can actually
    interact with the services listening, and in some cases can even exploit vulnerabilities!
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we covered the history of the NSE, how NSE works, how to find
    existing scripts to use, and how to run scripts using the NSE.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to write a basic Nmap script using Lua.
    Although many, many scripts already exist for a huge variety of tasks, custom
    in-house uses may require writing one of our own.
  prefs: []
  type: TYPE_NORMAL
