- en: Chapter 4. Advanced Utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building an Ajax chat system using the Comet technique
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charting with JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decoding Captcha through canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying data in a grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we're going to look at building a simple Ajax chat application
    using the Comet technique. **Comet** is a technique in web applications to push
    data to the client from a web server without the explicit need for a client to
    request it. In this application, we will use this simple Comet technique to push
    the chat message from the server to the browser, without using any special Comet
    server for it.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Charting with JavaScript* section, we will look at how to use the Google
    Visualization API to build an interactive chart using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we're going to show you how Ajax programming with canvas can decode
    a simple Captcha on the browser itself, using a Firefox Greasemonkey script.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The chat application used here doesn't use any Comet server such as APE ([http://www.ape-project.org](http://www.ape-project.org)
    ) or Livestreamer ([http://www.livestream.com](http://www.livestream.com)). We're
    just trying here to show how to get information from the server using Ajax with
    long polling, rather than traditional polling.
  prefs: []
  type: TYPE_NORMAL
- en: Building an Ajax chat system using the Comet technique
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's look at how to build a simple Ajax chat system using Ajax with the
    long polling technique. We've used the jQuery framework of JavaScript for most
    of the JavaScript code. In the traditional Ajax polling system, a request is sent
    to the server at regular intervals; so, whether there is new data or not, the
    server has to deal with the HTTP request. But in Ajax, with the long polling technique,
    the request is kept open from the server-side script until the server has new
    data to send to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: However, in our chat example, we're keeping the Ajax request open for 90 seconds.
    If there is no new chat message received from the server, the connection is closed
    and a new Ajax polling is opened.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, let''s look at what the interface of this application is like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](graphics/3081_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This chat utility has a very simple interface. You need to set a username to
    send chat messages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are different types of code associated with this Comet chat system. Let''s
    go through each part:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following HTML code forms the chat system''s layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now let's look at the PHP code for saving a message to a text file and to keep
    the Ajax request open until a new message is saved in the file. You can find this
    code in the `chat-backend.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's look at the JavaScript code for making the chat functional.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let''s look at the how this Ajax chat works with the Comet implementation.
    Some aspects of it are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Saving a chat message to a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The chat message is saved to the file in our application. Only the latest chat
    message is saved to the file. The previous chat messages are replaced by the latest
    message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The special characters of the message are converted into HTML entities, to convert
    the HTML special characters and avoid malformation of the HTML in the chat string.
    Then, the message, with username, is stored in the `$file_name` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing Comet with long Ajax polling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's look at the way we've implemented Comet with long Ajax polling.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first line of code, we''re storing the entrance time to PHP script in
    the `$entrance_time` variable to prevent execution of script for more than 90
    seconds as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the first line of the code in `chat-backend.php`, we've set the maximum execution
    time of the script to `91` (seconds), so that PHP doesn't throw a Fatal Error
    on the long execution time of script; because, by default, the `max_execution_time`
    of the PHP script is set to `30` in the `php.ini` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the main `while` loop, which blocks the Ajax call until
    a new chat message is received:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve stored the last file-modified time value in the `$last_modif` variable
    and current file-modified time in the `$curre_ftime` variable. The `while` loop
    keeps getting executed until two conditions are satisfied: the first one is that
    the last modification time of the text file should be greater than or equal to
    the current file modification time, and the second condition checks whether the
    script execution time so far has reached 90 seconds or not. So, if the file has
    been modified or script execution time is 90 seconds, then the request gets completed
    and response is sent to browser. Otherwise, the request gets blocked for long
    Ajax polling.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the JavaScript side, we call the `Comet.connect()` function when the DOM
    is ready for manipulation. This function makes an Ajax request to the `chat-backend.php`
    file. Now, let''s see how Ajax response is handled here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When we get a successful Ajax response, we check if the file modification time
    is greater than the timestamp sent to the server for checking or not. This condition
    is satisfied if the modification time of the file has been changed. In that case,
    we assign the `ts` variable to the current timestamp of file modification time
    and call the `show_response()` function to show the latest chat message to the
    browser. It then calls the `Comet.function()`, instantly.
  prefs: []
  type: TYPE_NORMAL
- en: If there is error in the Ajax request, it waits for 5 seconds before sending
    another request to the `connect()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Displaying the response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s look at the how the response is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this function, we're appending the Ajax response to the `div` with the ID
    `chattext`. After that, we set value of `scrollTop` (which means the vertical
    position of the scrollbar, if it exists) to `scrollHeight`. The `ScrollHeight`
    property gives the height of the scroll view of the element.
  prefs: []
  type: TYPE_NORMAL
- en: Charting with JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at an example of how to create interactive charts
    using Google Visualization's JavaScript API. The **Google Visualization API**
    provides a powerful set of functions for creating different kinds of charts, such
    as pie chart, line chart, bar chart, and so on. In this section, we will see,
    in brief, how to create them using this API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's look at the basic steps to follow to use Google Visualization API
    to create different styles of charting. We will be looking at an example where
    we create a bar chart, line chart, and pie chart on the page. Now, let's go through
    the preliminary steps to create the chart using the Visualization API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Placing a chart container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First of all, we need to place an HTML element in the web page that holds the
    chart. Typically, it should be a block-level element. Let''s start with the popular
    block-level element <div>, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Please make sure you assign an ID attribute to this HTML element, as this element's
    reference can be passed using the `document.getElementById()` JavaScript function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Loading Google Visualization API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After creating the container for the chart, let''s try to load the Google Visualization
    API here, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code snippet, we included the Google JavaScript API here in
    our web page. After including the JavaScript file, we now need to load the Google
    API''s visualization module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the `load()` function, the first parameter is the name of the module we wanted
    to load; in our case, the `visualization` module. The second parameter is the
    version of the module; 1 is the latest version here. In the third parameter, we're
    specifying which particular package has to be loaded from the module. In our case,
    it is the `corechart` package. The `corechart` library supports server types of
    common charts, such as bar chart, line chart, and pie chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to work with the function of the JavaScript API once the JavaScript
    library is fully loaded. To help with this situation, Google''s JavaScript API
    provides a function called setOnloadCallback(); it allows us to add the `callback`
    function when a particular module is loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the user-defined function called `draw_line_chart`
    is called when Google Visualization library is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: After learning how to load the Google Visualization API, let's look at the examples
    to draw the bar chart, line chart, and pie chart.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s see how the different charts (which we''re going to creating using
    the visualization API) appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/3081_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drawing a line chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we know what the created charts look like, let's create the line chart
    first. The line chart can be seen in the preceding image. The full code can be
    found in the `line-chart.html` file, provided in the code bundle. Now, let's go
    through different steps to create the line chart.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how to create the line graph to show the population
    growth of two major cities in the world, New York and London, and compare them
    with the line graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Preparing data for the chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To prepare data for the chart, we first need to store the data in the object
    of the `DataTable` class available within Google Visualization API to represent
    two-dimensional data for the array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the next step is to add the column for the graph. We''re displaying two
    lines on the graph showing the growth of the population in two cities, New York
    and London, on a decennial basis. For this, we need to create three columns for
    the object `DataTable`, using the `addColumn()` function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Next, create the three empty rows using the `addRows()` function. You can also
    pass the array to the `addRows()` function to create rows with data. We will see
    how to do that while creating the bar chart.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating the empty rows, let''s set the values on those empty rows using
    the `setValue()` function, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The first and second parameters of the `setValue()` function denote the row
    and column of the matrix. For example, the value `1,2` represents the second row
    and third column of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Displaying a line chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After creating the data for the chart in the data variable, now create and
    display the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we're creating a line chart in the div, with ID.chart,
    using the LineChart() function of Google Visualization API. Now, the chart object
    is created and is available at the chart variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the chart is drawn using the draw() function, which accepts two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one is the data of the chart, which is an object of the class `DataTable`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one specifies the different options like width, height, title of
    the chart, and so on. The whole list of parameters can be found here at [http://code.google.com/apis/visualization/documentation/gallery/linechart.html.](http://code.google.com/apis/visualization/documentation/gallery/linechart.html.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chart is drawn representing respective values automatically on the X-axis
    and Y-axis.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a bar chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will see how to draw the bar chart using Google Visualization
    API. We will visualize the population growth of London and New York in this example,
    using the same data that we used in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: This chart can be seen on the right-hand side of the preceding image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Preparing the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s look at the code to create the data for visualization using a bar chart.
    To hold the chart data, we need to create an instance of the `DataTable()` class,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, after adding the columns for the data
    table, we've added the rows using the `addRows()` function. We've used this function
    in a different way before, to create empty rows. Here, it will create three rows
    directly, with the data of the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Displaying a bar chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After preparing the data for the bar chart, let''s draw it on the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We're drawing a bar chart with a width of `600` pixels and height of `360` pixels,
    using the `object ColumnChart()` class. Using the options `hAxis` and `vAxix`,
    we're displaying the label `Year` on the horizontal axis and `Population` on the
    vertical axis. You can read about more options for the column chart API at [http://code.google.com/apis/chart/interactive/docs/gallery/columnchart.html.](http://code.google.com/apis/chart/interactive/docs/gallery/columnchart.html)
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `BarChart()` class is also available in Google Visualization API, but it
    creates a horizontal bar chart. You can find more about this type of chart at
    [http://code.google.com/apis/chart/interactive/docs/gallery/barchart.html](http://code.google.com/apis/chart/interactive/docs/gallery/barchart.html).
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a 3D pie chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will see how to create a pie chart using Google Visualization
    API. The sample pie chart produced by this example is shown on the left side of
    the preceding image.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will break down the hours involved in developing a simple
    website and visualize them using a pie chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Preparing the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's look at how we create the data for visualization of the project using
    a pie chart. As usual, we need to create an instance of the `DataTable()` class
    to store the data that needs to be populated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, we're creating two columns to hold the
    data for the hours spent on different phases of a project. The first column is
    `Phase` and the second column is `Hours spent` (the time spent on that particular
    phase of the project).
  prefs: []
  type: TYPE_NORMAL
- en: 'Displaying a pie chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s look at the actual code that will draw the pie chart on the `div`
    with ID chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, first the object of the `PieChart()` class is created.
    Then, the chart is drawn using the `draw()` function. The pie chart is drawn summing
    total hours given in column 2 as 100%. Please note that we've set the `is3D` option
    to `true`, to display a 3D pie chart.
  prefs: []
  type: TYPE_NORMAL
- en: Decoding CAPTCHA through canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CAPTCHA** (or **Captcha)** is an acronym for **C**ompletely **A**utomated
    **P**ublic **T**uring test to tell **C**omputers and **H**umans **A**part, based
    on the word ''capture''. It was originally coined by Luis von Ahn, Manuel Blum,
    Nicholas J. Hopper, and John Langford. **CAPTCHA** is meant to stop machines and
    robots from accessing webpage functionalities; it is usually placed in a web page''s
    signup form to ensure only human beings are signing up with the site. Often, it
    is based on the fact that computers find it difficult to recognize text when presented
    in image form. More research and advanced techniques of **OCR (Optical Character
    Recognition)** are weakening the Captcha concept, which in turn forces further
    research on Captcha. HTML5''s `canvas` element opens up the possibility of decoding
    it through JavaScript programming.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `canvas` element is part of the HTML5 specification. It was introduced by
    Apple in a WebKit component. After that, it was adopted by Gecko-based browsers,
    such as Mozilla Firefox. As of now, most of the browsers support it natively or
    through plugins. Earlier, SVG was promoted as a standard for drawing shapes, but
    `canvas` gained popularity due to its speed and lower-level protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require a browser that supports `canvas`. Generally, Firefox and Safari
    have built-in support for canvas. For displaying canvas in Internet Explorer,
    we may require plugins from Mozilla or Google.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google Chrome Frame (available at [http://code.google.com/chrome/chromeframe/)](http://code.google.com/chrome/chromeframe/))
    is a plugin that adds Chrome's JavaScript engine to Internet Explorer; it supports
    `canvas` too.
  prefs: []
  type: TYPE_NORMAL
- en: '`explorercanvas` ( available at [http://code.google.com/p/explorercanvas/)](http://code.google.com/p/explorercanvas/))
    is a JavaScript library, which, when added, converts `canvas` to VML and supports
    it on IE.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The concept of OCR with JavaScript got attention when a Greasemonkey script,
    developed by Shaun, was able to recognize MegaUpload's (the file sharing website's)
    Captcha. For a file sharing website, Captcha is a way to avoid machine-enforced
    downloading that might be from competitors or pirates. The Greasemonkey script
    here used `canvas` and its ability to be accessed through JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Greasemonkey** was originally a Firefox extension to execute user scripts
    on particular domains and URLs, at the time when the page gets displayed, thereby
    changing appearance or functionality. Now, other browsers have also started supporting
    Greasemonkey scripts, to some extent.'
  prefs: []
  type: TYPE_NORMAL
- en: The complete source can be found at Greasemonkey's website—[http://www.userscripts.org/scripts/review/38736](http://www.userscripts.org/scripts/review/38736).
    Here, we will review the concept of doing it in JavaScript with `canvas:`
  prefs: []
  type: TYPE_NORMAL
- en: The Captcha image is loaded to `canvas` and the image data is read through `getImageData()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image is then converted to grayscale.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image is further divided into three, for each character. This was easier
    with MegaUpload's Captcha, as it had a fixed distance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image is further processed to convert it in to two colors—black and white
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The divided images are cropped further to have sort of receptors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Receptor data is then passed to a neural network to recognize the characters.
    The neural network data is pre-seeded with data from previous runs to get a better
    match.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following image shows a sample Captcha found at the MegaUpload website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/3081_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, each processing phase that is described as follows is vital to get better
    recognition of the Captcha:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading a Captcha image to `canvas:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Captcha image is loaded to canvas through the Greasemonkey''s Ajax call
    to fetch the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Converting the image to grayscale:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As shown in preceding code block, the image data is taken pixel-by-pixel. Each
    pixel's color value is averaged. And, finally, the image is converted to grayscale
    by adjusting color value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Converting images to have only black and white colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, other colors can be referred to as "noise". The "noisy" colors are removed
    by retaining only black and white colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cropping unnecessary image data out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the image was of fixed size and text was at a fixed distance, the rectangle
    size of the matrix is set to remove unnecessary data, and so the image is cropped.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Applying a neural network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An **ANN (Artificial Neural Network)** (or simply, neural network) is a self-learning
    mathematical model. It is an adaptive system that changes its structure based
    on its external or internal information flow. The design is modeled after animal
    brains, and thus every unit of processors has a local memory and learning component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The processed image data acts as a receptor for the neural networks. When passed
    to the neural network with pre-seeded data, it helps us to find out the character
    in a Captcha image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Depending upon the Captcha complexity, even linear algebra could be used in
    the final step of character recognition. Applying linear algebra, rather than
    neural networks, may improve the speed of the detection. But, neural networks
    perform relatively better in all aspects.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Canvas` has other interesting applications as well. It is expected to replace
    Flash components. Some of the notable canvas applications are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: CanvasPaint ([http://canvaspaint.org/](http://canvaspaint.org/) ), with a UI
    similar to the MS Paint application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highcharts ([http://highcharts.com/)](http://highcharts.com/)) , a JavaScript
    chart API that uses `canvas` for rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Randomized Captcha images are hard to crack without humans. Google’s
  prefs: []
  type: TYPE_NORMAL
- en: '**reCAPTCHA API** is built around this problem of digitizing old books using'
  prefs: []
  type: TYPE_NORMAL
- en: 'OCR. When we use this reCAPTCHA API, it provides a Captcha with 2-texts:'
  prefs: []
  type: TYPE_NORMAL
- en: Random "known" Captcha text
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unknown" text from old scanned books--that were hard to decipher through OCR.
    When users fill up these Captcha, the "known" texts are matched for validity.
    Entered text against "unknown" text are used digitize scanned books.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Some websites offer human Captcha decoding services over API. The Captcha image
    is uploaded through API; in another part, "data entry" human decoders will input
    the text and it will be sent back. These services are usually used by automated
    bots rather than human beings. Some websites that offer such services are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Death By Captcha ([http://www.deathbycaptcha.com/](http://www.deathbycaptcha.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DeCaptcher ([http://www.decaptcher.com/](http://www.decaptcher.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying data in a grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Web 2.0 sites, the term "data grid" usually means a spreadsheet-/MS Excel-like
    display using HTML tables. Data grids provide usability and easy access to data
    for users. Some common features of data grids are:'
  prefs: []
  type: TYPE_NORMAL
- en: Ability to paginate data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to sort columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to sort rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to quickly search or filter data fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to have frozen/fixed rows or headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to have frozen columns or headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to highlight any column of interest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to load from different data sources, such as JSON, JavaScript array,
    DOM, and Hijax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to export data to different formats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to print formatted data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require the DataTables jQuery plugin from [http://datatables.net/](http://datatables.net/),
    along with jQuery core. Based on our requirement, we may sometimes require additional
    plugins.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a simple implementation (without using any other data sources), it is enough
    to display the data in an HTML table. DataTables, without any plugins and additional
    options, can turn it into a spreadsheet-like UI, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In an HTML table, it''s enough to display the data in a normal tabular format.
    Here, we display user records with name, phone number, city, zip code, and country
    name, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: In the original code, we had 100 rows. Here, many rows are snipped for
    brevity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, it''s enough to attach the data grid behavior through a jQuery plugin
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DataTables parses the data in an HTML table and keeps it in a JavaScript object
    array. Whenever required, it renders the content in its HTML template. As seen
    in the preceding screenshot, it adds a search box, pagination links, and a dropdown
    to choose the number of records to be displayed per page. The table headers contained
    in the `thead` element are decorated with sorting icons and links. When any text
    is entered inside the search box, it scans over the saved object array and repaints
    the grid. For quickly turning ordinary datatables into grids, this might be fairly
    sufficient, but, DataTables offers lots of other features besides options and
    plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it''s required to turn off certain features that DataTables offers, we
    can specifically disable them through options, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have disabled the pagination element and sorting feature. Similarly,
    we can disable any other features. When we don't require the grid feature, it's
    better not to initialize DataTables rather than to disable features using options,
    as it would affect performance.
  prefs: []
  type: TYPE_NORMAL
- en: The default configuration of DataTables isn't compliant with the jQuery UI theme
    framework; to make it compliant, we have to set the `bJQueryUI` flag to `true:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The major advantage of this is that it's easier to give all the JavaScript components
    a consistent theme/look.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user scrolls the data, we may want to provide frozen headers so that
    the values are easily correlated. For this purpose, DataTables offers the `FixedHeader`
    add-on. Setting up fixed headers is easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: With jQuery's plugin architecture, we can easily extend DataTables and thereby
    add any grid feature.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Different data grid plugins provide different UIs and different features. It''s
    always good to know their differences. Sometimes, on a heavy Ajax site, we may
    want to display millions of records. Let''s see what tools are available for these
    purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Other data grid plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have a lot of jQuery plugins available for data grids. Among them, the following
    are relatively popular and provide lot of features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'jQuery Grid: [http://www.trirand.com/blog/](http://www.trirand.com/blog/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Flexigrid: [http://flexigrid.info/](http://flexigrid.info/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'jqGridView: [http://plugins.jquery.com/project/jqGridView](http://plugins.jquery.com/project/jqGridView)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ingrid: [http://reconstrukt.com/ingrid/](http://reconstrukt.com/ingrid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SlickGrid: [http://github.com/mleibman/SlickGrid](http://github.com/mleibman/SlickGrid)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TableSorter: [http://tablesorter.com/](http://tablesorter.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a UI similar to any of these plugins is demanded, it's wise to use them
    rather than customizing DataTables, as presented in the preceding section.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying millions of data items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, not all data grid implementations can accommodate huge
    sets of records, except SlickGrid. Its patch and discussion about unlimited rows
    can be found at [https://github.com/mleibman/SlickGrid/tree/unlimited-rows](http://https://github.com/mleibman/SlickGrid/tree/unlimited-rows).
  prefs: []
  type: TYPE_NORMAL
