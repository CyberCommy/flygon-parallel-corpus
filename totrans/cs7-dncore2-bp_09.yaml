- en: Using Docker and ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking at how Docker works. You may have heard
    about Docker before but have not had the opportunity to play around with it yet.
    In particular, we will be looking at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What Docker is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images and containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Docker benefits web developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker on Windows 10 Pro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Docker and selecting some shared drives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting shared drives when Windows Firewall seems to be the issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Visual Studio 2017 integrates with Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ASP.NET Core MVC application and running it inside a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Docker Hub with GitHub and setting up automated builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker will open up a whole new world for you.
  prefs: []
  type: TYPE_NORMAL
- en: What is Docker?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin to work with Docker, let's have a look at exactly what Docker
    is. If you head on over to [https://www.docker.com](https://www.docker.com) and
    look at the What is Docker? page, you will see that they say that Docker is a
    containerization platform. From a first-look perspective, this does not make much
    sense. Digging a little deeper though, you will see that Docker simplifies the
    application-building process and allows you to ship and run those applications
    in different environments. The different environments may be development, testing,
    user acceptance testing, and production environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker makes use of images and containers, and if you look at the Docker logo,
    you will see this idea of containers represented in their logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/489db9e4-fde8-4041-8de7-8d9e548cb856.png)'
  prefs: []
  type: TYPE_IMG
- en: Cargo planners often have to be very careful how they stack the containers on
    a cargo ship. They need to keep the container destinations in mind when planning
    the location of the container on the ship.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a container bound for the Middle East could not be loaded under
    a container bound for Tokyo, Japan. This would mean that they had to remove the
    top containers just to offload the bottom container and then load the top containers
    back again. The position of the containers has to be planned very carefully to
    optimize the efficiency of the freight logistics.
  prefs: []
  type: TYPE_NORMAL
- en: Docker is similar in its approach to using containers. So, let's clarify the
    terms **containers** and **images** a bit further.
  prefs: []
  type: TYPE_NORMAL
- en: Images and containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Docker image is just a file used to create a Docker container. Think of it
    as a blueprint that Docker needs to create a running container. Images are read-only
    templates, if you like, that are created as a layered filesystem which shares
    common files used to create container instances.
  prefs: []
  type: TYPE_NORMAL
- en: Containers, on the other hand, are instances created from these images. Containers
    are isolated and secure, and can be started, stopped, moved, or deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Where does Docker run?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, using the analogy of the cargo ship, the cargo ship represents
    your development environment, test environment, or production environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker can run natively on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker also runs in the cloud on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon EC2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Compute Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rackspace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the preceding points, you can see that Docker is extremely flexible and
    that using Docker can provide a huge benefit to developers. Let's have a look
    at how Docker can benefit web developers in particular.
  prefs: []
  type: TYPE_NORMAL
- en: How Docker benefits web developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker provides several benefits to web developers. If you work in a mixed environment
    of developers, testers, designers, and so on, you probably want them to work with
    the actual application rather than with a prototype. You could set the application
    up on a server and hook it up to a SQL database and then manage the permissions
    needed for each user accessing the site from the server. Docker, on the other
    hand, allows us to make containers that can run on the individual developer or
    designer machines easily.
  prefs: []
  type: TYPE_NORMAL
- en: I previously mentioned that Docker containers are isolated and secure. Well,
    for this reason, containers eliminate application conflicts. I'm sure that if
    you have been developing for a while, you are bound to have run into a situation
    where the application is deployed on a production server. If you wanted (or needed)
    to upgrade the framework (for example) of the application, you might run into
    other application conflicts as a result of the upgrade. With Docker, the isolated
    containers can be upgraded without affecting other systems in the environment.
  prefs: []
  type: TYPE_NORMAL
- en: How many times have you heard a developer say, *But the application works fine
    on my system* when a deployed application fails? This is because there may be
    differences in the way a developer machine, staging server, or production server
    has been set up. With Docker, you simply move the image from one environment to
    another and get the containers up and running. This means that if your application
    runs fine inside its container on a dev machine, it definitely should run fine
    on a staging or production machine too.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the predictability and stability of Docker containers, you are able
    to ship code much faster than before. This leads to increased productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker on Windows 10 Pro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Windows 10 Pro and Windows 10 Enterprise, Docker **Community Edition** (**CE**)
    is available for free.
  prefs: []
  type: TYPE_NORMAL
- en: You can download Docker CE from [https://www.docker.com/docker-windows](https://www.docker.com/docker-windows).
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker CE requires Hyper-V and, for this reason, you need to be running Windows
    10 Pro or higher. To see what version of Windows you have, open Command Prompt
    as Administrator and type in the following command at the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following information displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f2a90cc-d069-4a19-934b-be1ecf222c06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To check whether Hyper-V is enabled, scroll a little way down:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f87eb65c-b913-4de0-b8cb-3135c7738593.png)'
  prefs: []
  type: TYPE_IMG
- en: Earlier versions of Windows don't have Hyper-V, so Docker CE will not run. From
    the Docker documentation ([https://docs.docker.com/v17.09/docker-for-windows/faqs/#questions-about-stable-and-edge-channels](https://docs.docker.com/v17.09/docker-for-windows/faqs/#questions-about-stable-and-edge-channels)),
    Windows 10 Home is also not supported.
  prefs: []
  type: TYPE_NORMAL
- en: For older Mac and Windows systems, Docker Toolbox can be installed. This uses
    the free Oracle VM VirtualBox. For more information on this, have a look at [https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/).
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, Docker CE can be downloaded for Windows 10 Pro and Windows
    10 Enterprise machines. You can get the installer from the Docker Store at [https://store.docker.com/editions/community/docker-ce-desktop-windows](https://store.docker.com/editions/community/docker-ce-desktop-windows).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, the download page on the store looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76541aed-10d6-4ee5-bd5d-e5e8492c5e6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Get Docker button to download the Docker installer to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: The installer will require you to log out of Windows to complete the installation.
    It will not do this automatically but, before performing the installation, it's
    a good idea to close any other running applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installer is actually one of the friendliest installers I have seen in
    recent years. It is also a breeze to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1871e2f6-5cc8-491d-9356-ea91c5ed25a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As a rule, I always run installers as Administrator. The installation process
    for Docker is really straightforward. After it has installed, it will prompt you
    to log out of Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2399db35-e2c3-4f03-bd5f-02d30470f177.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have logged back into Windows, you may see a message asking you to
    turn on Hyper-V to use Docker containers. Choose the option to turn on Hyper-V.
    At this point, your computer may restart again. After your computer has restarted,
    you will see a notification that Docker is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73e316ce-2eaf-4d34-b34a-b2720a80b19e.png)'
  prefs: []
  type: TYPE_IMG
- en: You have successfully installed Docker. I told you it was really easy.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start using Docker, look for the Docker for Windows desktop application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d2b33ab-b33c-4773-8fd7-dd45d5c50eb3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will start Docker on your machine. When Docker is running, you will see
    it in your taskbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c76ec28-90c1-444b-a42c-ff22667c23a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, Docker should be started after installation, so just check to see
    whether it''s running from the taskbar first. Let''s have a look at the various
    settings available to us with Docker. Right-click the Docker icon in the taskbar
    and select Settings from the context menu. When the screen opens, click on the
    Shared Drives tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2324abcf-d808-405e-9194-b6bdd9f82d0c.png)'
  prefs: []
  type: TYPE_IMG
- en: It is important that you select the local drives you want to be available to
    your containers. Checking the shared drives allows support for volumes. Volumes
    are the mechanism by which data that is generated by Docker containers is persisted.
    You can read more about volumes in the official Docker documentation at [https://docs.docker.com/engine/admin/volumes/volumes/](https://docs.docker.com/engine/admin/volumes/volumes/).
  prefs: []
  type: TYPE_NORMAL
- en: 'I do, however, want to point out the following bullet points from the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: Volumes can easily be backed up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volumes work on Linux and Windows containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can share volumes between multiple containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use volume drivers to store volumes on remote machines or in the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are able to encrypt the contents of volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Because a volume exists outside of a container, it is the preferred choice
    for persisting data. Docker also needs port `445` to be open to share drives between
    the host machine and the containers. If Docker detects that port `445` is closed,
    you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f5007bc-555a-4261-8605-e83c058c1486.png)'
  prefs: []
  type: TYPE_IMG
- en: You can click on the link to read the documentation on this error.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on shared drives, see the Docker documentation at [https://docs.docker.com/docker-for-windows/#shared-drives](https://docs.docker.com/docker-for-windows/#shared-drives).
  prefs: []
  type: TYPE_NORMAL
- en: There are a few recommended ways online to resolve this issue. The first is
    to uninstall and re-install File and Printer Sharing for Microsoft Networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, open the Network and Sharing Center from Windows settings. Then
    click on the vEthernet (DockerNAT) connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bdd2714f-ce9d-4cfe-8d65-3a88929a69b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the vEthernet (DocketNAT) Status window, click on the Properties button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a31733f-7913-4bc5-b40e-6875260fedb1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here you will see File and Printer Sharing for Microsoft Networks. Your first
    step is to click on the Uninstall button. This will remove the entry from the
    list. Next you need to click on the Install button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8c66efd6-a6d0-43c5-acfb-273bef665565.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Select Network Feature Type screen, click on the Service feature and
    click on the Add button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f424b5b-8afc-40f9-87b8-b6b4df3ed34e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Select Network Service screen, select Microsoft as the manufacturer
    and click on the File and Printer Sharing for Microsoft Networks service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/32fc82cc-f680-4f1e-9eaf-37cd244b737d.png)'
  prefs: []
  type: TYPE_IMG
- en: After clicking OK and closing all the screens, stop Docker by right-clicking
    the icon in the taskbar and click on Quit Docker. You can then restart Docker
    by clicking on the Docker for Windows application again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you should be able to select the shared drives to use with Docker
    from the settings screen. If you still see the Firewall detected message, the
    chances are that your antivirus is blocking it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my case, it was ESET Endpoint Security that was blocking the communication.
    You may be using a different antivirus, so have a look at the particular list
    of applications it has recently blocked. In my case, I started ESET Endpoint Security
    and selected SETUP and then Network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11591cb9-ac3c-4ebd-bf4e-f41c688d1141.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, I selected the Recently blocked applications or devices list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c3c1f7a-1b1a-464e-bbef-ee4c9158915c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scrolling through the list, I saw that `10.0.75.2` was blocked by ESET. According
    to the Docker documentation, this is the IP to allow through the firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '"To share the drive, allow connections between the Windows host machine and
    the virtual machine in Windows Firewall or your third-party firewall software.
    You do not need to open port 445 on any other network. By default, allow connections
    to 10.0.75.1 port 445 (the Windows host) from 10.0.75.2 (the virtual machine).
    If the firewall rules appear to be open, consider reinstalling the File and Print
    Sharing service on the virtual network adapter."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the Unblock button displays a confirmation screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d6a1c1ad-11b1-4cb8-a79b-7468da16d302.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you have done this, you have unblocked `10.0.75.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef684023-d7bd-41c4-b984-5e419f0cd385.png)'
  prefs: []
  type: TYPE_IMG
- en: To finish, click Done, head on back to the Docker settings, and select the drives
    you want to share.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now be able to select the shared drives for Docker to use. If you
    are still not able to share drives, have a look at the following Stack Overflow
    article for additional troubleshooting tips: [https://stackoverflow.com/questions/42203488/settings-to-windows-firewall-to-allow-docker-for-windows-to-share-drive/43904051#43904051](https://stackoverflow.com/questions/42203488/settings-to-windows-firewall-to-allow-docker-for-windows-to-share-drive/43904051#43904051).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will have a look at how Docker integrates into Visual Studio 2017,
    and what you can do to enable Docker support for your ASP.NET Core applications.
    We will also have a look at how to add Docker support (or Dockerize) existing
    ASP.NET Core applications.
  prefs: []
  type: TYPE_NORMAL
- en: Docker has a healthy community of developers and it also has a lot of help documentation
    available. Take the time to browse through this and research any issues you may
    come across.
  prefs: []
  type: TYPE_NORMAL
- en: Running an ASP.NET Core application from Visual Studio 2017 inside Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So where does this all leave us? We have had a look at how to set up Docker
    on Windows 10, as well as how to resolve a few issues surrounding this setup.
    Let us now have a look at how to create an ASP.NET Core application and add Docker
    support to the new application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new ASP.NET Core Web Application in Visual Studio 2017 and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/56d75944-f66e-4307-938a-991eb3e24ce1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, select Web Application (Model-View-Controller) or any type
    you like, while ensuring that ASP.NET Core 2.0 is selected from the drop-down
    list. Then check the Enable Docker Support checkbox. This will enable the OS drop-down
    list. Select Windows here and then click on the OK button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3522e171-82c9-4f00-a6b5-db3c4e8b52b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you see the following message, you need to switch to Windows containers.
    This is because you have probably kept the default container setting for Docker
    as Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/281112c2-1ca9-4c3e-9784-9e958e82c89c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you right-click on the Docker icon in the taskbar, you will see that you
    have an option to enable Windows containers there too. You can switch to Windows
    containers from the Docker icon in the taskbar by clicking on the Switch to Windows
    containers option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a31d6e29-9bcb-4a0f-ad57-b32230726971.png)'
  prefs: []
  type: TYPE_IMG
- en: Switching to Windows containers may take several minutes to complete, depending
    on your line speed and the hardware configuration of your PC.
  prefs: []
  type: TYPE_NORMAL
- en: If, however, you don't click on this option, Visual Studio will ask you to change
    to Windows containers when selecting the OS platform as Windows.
  prefs: []
  type: TYPE_NORMAL
- en: There is a good reason that I am choosing Windows containers as the target OS.
    This reason will become clear later on in the chapter when working with Docker
    Hub and automated builds.
  prefs: []
  type: TYPE_NORMAL
- en: 'After your ASP.NET Core application is created, you will see the following
    project setup in Solution Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be1d936d-3dcd-422f-87d8-35ea8f1e7b05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Docker support that is added to Visual Studio comes not only in the form
    of the Dockerfile, but also in the form of the Docker configuration information.
    This information is contained in the global `docker-compose.yml` file at the solution
    level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a4a2b60-616d-4d23-8438-e5c1223d37e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Dockerfile in Solution Explorer, you will see that it doesn''t
    look complicated at all. Remember, the Dockerfile is the file that creates your
    image. The image is a read-only template that outlines how to create a Docker
    container. The Dockerfile, therefore, contains the steps needed to generate the
    image and run it. The instructions in the Dockerfile create layers in the image.
    This means that if anything changes in the Dockerfile, only the layers that have
    changed will be rebuilt when the image is rebuilt. The Dockerfile looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have a look at the menu in Visual Studio 2017, you will notice that
    the Run button has been changed to Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2138e1e5-4f04-49e9-aaca-8536e87d1906.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Docker button to debug your ASP.NET Core application, you will
    notice that there are a few things popping up in the Output window. Of particular
    interest is the IP address at the end. In my case, it reads Launching http://172.24.12.112
    (yours will differ):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb41f852-e3b2-49a5-a426-04afafc9b495.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the browser is launched, you will see that the ASP.NET Core application
    is running at the IP address listed previously in the Output window. Your ASP.NET
    Core application is now running inside of a Windows Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c725afa8-0fe4-482b-a476-24d8c642e639.png)'
  prefs: []
  type: TYPE_IMG
- en: This is great and really easy to get started with. But what do you need to do
    to Dockerize an existing ASP.NET Core application? As it turns out, this isn't
    as difficult as you may think.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Docker support to an existing ASP.NET Core application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine that you have an ASP.NET Core application without Docker support. To
    add Docker support to this existing application, simply add it from the context
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64a64c14-60a7-4988-b714-d5e1bf29d3eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add Docker support to an existing ASP.NET Core application, you need to
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on your project in Solution Explorer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add menu item
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Docker Support in the fly-out menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c19e437f-7ae2-46eb-b76f-e07cc035afb4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Visual Studio 2017 now asks you what the target OS is going to be. In our case,
    we are going to target Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a7ba04b-3d6a-4ca8-bc8e-48a65a3e8bc6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on the OK button, Visual Studio 2017 will begin to add the Docker
    support to your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7982e375-fd2a-4f95-9d17-20dd50384d8c.png)'
  prefs: []
  type: TYPE_IMG
- en: It is extremely easy to create ASP.NET Core applications that have Docker support
    baked in, and even easier to add Docker support to existing ASP.NET Core applications.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, if you experience any issues, such as file access issues, ensure that
    your antivirus software has excluded your Dockerfile from scanning. Also, make
    sure that you run Visual Studio as Administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Using Docker Hub with GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following section will illustrate how to set Docker Hub up to do automated
    builds from your project in a GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, I will not be going through how to check your code into GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the DockerApp project created in the previous sections, check that into
    a new GitHub repository. Once you have checked in your code, swing on over to
    Docker Hub at [https://hub.docker.com/](https://hub.docker.com/) and log in, or
    create an account if you haven''t got one already:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c06ea26-3203-4497-a361-7af6ea985b2a.png)'
  prefs: []
  type: TYPE_IMG
- en: The sign-up process is really quick and easy. All you need to do is confirm
    your email address and you're in. After confirming your email address, you will
    be prompted to log in again. This will take you to your Docker Hub dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On this page, you have several options available to you. You can create repositories and
    organizations, and explore repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81522c86-c32f-4321-951b-c8c5c58bedc4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To start working with GitHub, we need to link Docker Hub with GitHub first.
    Click on the username you selected in the top right of the page. Then click on
    the Settings menu option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0aaf31c0-c55e-4573-a415-b34df6b71483.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under Settings, look for the Linked Accounts & Services tab and click on that.
    You will now need to click on the Link Github option to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc496846-3255-4330-a6a8-289300f640f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For simplicity''s sake (and because it is recommended), I just went ahead and
    clicked on the Public and Private access setting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3af8ca7-b625-48d4-a99b-fd83c3c07090.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Docker Hub now redirects you to the authorization page to allow Docker Hub
    to access your GitHub repository. Here you need to sign in with your GitHub credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9013b54-e767-4678-bf54-19f892e6a7af.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that if you have two-factor authentication enabled, you will need to type
    in the authentication code generated by your smartphone app. So keep your mobile
    close by.
  prefs: []
  type: TYPE_NORMAL
- en: 'To authorize Docker Hub, click on the Authorize docker button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7506ade2-0cfe-4af6-98dc-c020f17297dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You are now taken back to the Linked Accounts & Services page, where you will
    see the linked accounts on your Docker Hub profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6b0ef2f-fdf3-4304-ac9e-76de9356398d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to go and create an automated build. From the menu, click on
    the Create menu item and select Create Automated Build from the options below
    that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/14550eb3-11e9-430c-88f2-a320a4df177c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You then want to click on the Create Auto-build Github option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/56835390-96cb-4712-a22f-10f916fa8208.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will display a list of all the available repositories in your GitHub account.
    I previously checked in the DockerApp project to my GitHub account, so this is
    what we will be selecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/706d8496-54a0-4c3c-9336-9104c9038efa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can now go and define additional information here as needed, or you can
    keep it as default. It is up to you. When you are done, click on the Create button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9630b8e-c499-4e80-bb68-8d8ba859da69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our automated build is now created and ready. So how, precisely, does this
    automated build work? Well, every time you commit your code to your GitHub repository,
    Docker Hub will build your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de472987-7d85-4f15-80bb-5ff4abbb771a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To test this, open up your ASP.NET Core application in Visual Studio 2017 and
    make some changes. Then commit those changes to your GitHub repository. Then click
    on the Build Details link in Docker Hub. You will see that the build has been
    queued and will complete in a few minutes. To view the build results, just refresh
    this page after a little while:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a1f57fb4-fba3-4485-9233-fbba04336f93.png)'
  prefs: []
  type: TYPE_IMG
- en: After refreshing the page, you will see that an error has occurred. Docker Hub
    will display the build results for you and you can click on the build result to
    view the details of the failure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I am going to illustrate a few errors that are commonly received during an automated
    build. I will also show the way I have found to resolve these. I'm not sure whether
    there will have been changes to the way these work in the meantime but, at the
    time of writing, these issues presented themselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we look at the cause of the failure, we see that Docker Hub can''t find
    the Dockerfile in the root of the project. Why exactly this is an issue, I don''t
    know. I would have expected Docker Hub to recursively walk the tree structure
    of your project to find the Dockerfile location. Nevertheless, this is quite easy
    to fix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f514bdf0-50c6-431e-bb8e-add6e2314a9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I simply made a copy of my Dockerfile and copied it to the root of the solution.
    I then checked in my code again to GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5bbe7665-4b8f-4a9c-89ca-d875ceb1d2c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you refresh your automated build page, you will see that it is building
    the project again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b81716cc-8f41-4b77-a42c-6e7284824fbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This time around, another error presented itself. Clicking on the error entry
    once again takes you to the error details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/672b1c39-3f47-4b4b-b827-70b96cb865b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This time, it shows that the cause of the error is the fact that we have targeted
    Windows OS in our project instead of Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37330ff9-8d5d-4de0-99e9-5e814590b629.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The error is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To fix this issue, we need to modify the Dockerfile. The Dockerfile for Windows
    will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify it to use `aspnetcore:2.0` instead of `aspnetcore:2.0-nanoserver`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, commit your code to GitHub to initiate the automated build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a80b5125-a920-4c7f-abdf-11a1d2747594.png)'
  prefs: []
  type: TYPE_IMG
- en: This time around, you will see that the build succeeds.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on which OS to target with .NET containers, see the following
    Microsoft document: [https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/net-core-net-framework-containers/net-container-os-targets](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/net-core-net-framework-containers/net-container-os-targets).
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have a successful automated build of our GitHub project. Swing back
    to the Repo Info tab and make a note of the Docker pull command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e7cdf2a-8051-4316-8679-32126084070f.png)'
  prefs: []
  type: TYPE_IMG
- en: The Docker repository for your image is at `dirkstrauss/dockerapp` and the Docker
    pull command is `docker pull dirkstrauss/dockerapp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run Windows Command Prompt as Administrator, enter the Docker pull command,
    and press the *Enter* key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/13991978-bc1f-4220-a962-37207f72dde6.png)'
  prefs: []
  type: TYPE_IMG
- en: You will see that you will start to pull the image down to your local computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, when pulling the Docker image, you receive the error message Error response
    from daemon: Get https://registry-1.docker.io/v2/: net/http: request canceled
    while waiting for connection (Client.Timeout exceeded while awaiting headers),
    simply restart Docker by right-clicking the Docker icon in the taskbar, clicking
    on Settings, and then clicking on Reset, and then Restart Docker. If you receive
    an error along the lines of Image operating system "linux" cannot be used on this
    platform, you need to switch back to a Linux container. See the following URL
    for more information: [https://github.com/docker/kitematic/issues/2828](https://github.com/docker/kitematic/issues/2828).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to run the container by entering `docker run -d -p 5000:80` `[image-repository]`,
    which binds the container to port `5000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c2f1b0ab-af0e-466c-97bc-c61679e07b8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to see whether the container has started, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now see the container ID, as well as other information about the running
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/396f9412-d90d-4a78-ab7f-bb9f806582eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What we now want to do is run the ASP.NET Core application we checked in to
    GitHub in the browser. To do this, we need to find the IP address. On Windows
    10, we need to look for the IP address of the DockerNAT, and for this we need
    to run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see that the IP address defined is `10.0.75.1` and this is the IP
    address that our container will be running at:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7063e9b5-7dbd-4cfd-bbc0-62a279085475.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open up your browser and enter the IP address and port number as `10.0.75.1:5000`
    and hit *Enter*. Your ASP.NET Core application will pop into your browser window
    in all its glory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c595518-18bc-49e0-a905-832389e4a2ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up GitHub with Docker Hub to perform automated builds may seem like
    a bit of a hassle at first, but the benefits for dev teams are numerous. It allows
    you to always be working with the latest build of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we had a look at installing Docker on your Windows 10 Pro machine.
    We also had a look at what Docker is and the benefits to developers. We then took
    a look at troubleshooting the setup of Docker on your local machine when the firewall
    seems to be the blocking issue. Then, we took Docker and created an ASP.NET Core
    MVC application that had Docker support added from the start. We also looked at
    how to add Docker support to existing applications. Finally, we set up Docker
    to integrate with GitHub and perform automated builds. We also had a look at how
    to pull the container from Docker Hub and run it in a container on your local
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Docker containers and Docker Hub are tools that developers can use to make their
    work much easier. The power of collaborating with such popular platforms such
    as GitHub and Docker leads to benefits that will increase productivity and profitability.
    Docker takes away all those compatibility headaches of deploying your application
    across several machines.
  prefs: []
  type: TYPE_NORMAL
- en: There is still a lot to learn regarding Docker, much more than a single chapter
    can illustrate. Go forth and explore the power of Docker.
  prefs: []
  type: TYPE_NORMAL
