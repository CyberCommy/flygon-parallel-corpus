- en: Chapter 6. Developing Mobile Applications with Qt Creator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt and mobile development have a long history. Qt's beginnings included early
    releases on Linux Personal Digital Assistants in the late nineties and at the
    turn of this century. Since then, it's been ported to a number of mobile environments,
    including the mobile variants of Linux that Nokia shipped such as MeeGo, as well
    as Symbian. While Symbian and MeeGo have come and gone, Qt's acceptance of mobile
    platforms lives on, most recently with support for Android.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we talk a little about writing mobile applications, and then
    learn how to set up Qt Creator to write applications for Android. It's worth noting
    right at the outset that while we will leverage everything you have learned about
    Qt development developing a mobile application, we also need to understand how
    the environments that mobile software runs in are different from traditional desktop
    and laptop environments, and how to design for those constraints. Once we understand
    those differences, writing software for Android with Qt is a snap!
  prefs: []
  type: TYPE_NORMAL
- en: A mobile software development primer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The key difference to remember when developing software for any mobile platform—such
    as a cell phone or tablet—is that every resource is at a premium. The device is
    smaller, meaning that:'
  prefs: []
  type: TYPE_NORMAL
- en: Your user will pay less attention to your application, and use it for shorter
    periods of time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The screen is smaller, so you can display less information on the display (don''t
    be fooled by the high-dot pitch of today''s displays: reading 6-point font on
    a 4-inch display is no fun, high pixel densities or not)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The processor and graphics processing unit are slower
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's less RAM and less graphics memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's less persistent storage for your application's data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The network is slower, by as much as three orders of magnitude
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at each of these in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: User attention is at a premium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Can you walk and chew gum at the same time? I can't—but many people walk, chew
    gum, and use their mobile device all at the same time. (Worse, some even drive
    while using their devices!) It's very rare for an application on a cell phone
    or tablet to have 100 percent of the user's attention for more than a few minutes
    at a time. A good rule of thumb is that the smaller the device, the more likely
    the user is to treat it as something to pick up and glance at, or use it while
    they're doing something else.
  prefs: []
  type: TYPE_NORMAL
- en: 'The limited attention your user pays to your application has three key consequences:'
  prefs: []
  type: TYPE_NORMAL
- en: Your application must be fast. Mobile devices are no place for extra progress
    bars, spinning cursors, or lengthy splash screens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your application must be succinct. The best mobile applications show data on
    only a page or two, having very flat navigation hierarchies. A common structure
    is to have a single screen of information, and a single screen with preferences
    that lets you configure what information should be shown (such as what location
    for which you're getting the information). Favor clear iconography over verbose
    text—if you can't draw, find someone who can, or buy icons from a site such as
    *The Noun Project* ([http://bit.ly/1fvBsnu](http://bit.ly/1fvBsnu)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your application must be accessible. Buttons should be big (a good guideline
    is that no hit target in your application should be smaller than the pad of your
    finger, about a square centimeter), and the text should be bigger, if possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For these reasons, Qt Quick is the better choice for most mobile applications
    you'll write. You can create smooth and responsive applications that are visually
    pleasing and don't overwhelm your users.
  prefs: []
  type: TYPE_NORMAL
- en: Computational resources are at a premium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mobile devices must carry their power source with them: that means batteries.
    While batteries have improved over the last twenty years, they haven''t kept up
    with Moore''s Law; most of the improvements have been on the processor side, as
    processors have become smaller and dissipate less heat in the course of a normal
    operation.'
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, mobile devices aren't as fast as desktops or laptops—a good way
    to think about it is that the last generation's processor design probably scales
    well for mobile devices today. That's not to say that mobile devices are slow,
    just that they're slower. Equally important, you can't run the processor or graphics
    processor at full tilt without seriously affecting battery life.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt—especially Qt Quick—is optimized for low power consumption, but there are
    still things you can do to help squeeze the best performance out of your mobile
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Don''t poll**: This is probably the single most important point. Use Qt''s
    asynchronous signal-slot mechanism wherever possible, and consider multithreading
    using `QThread`, Qt''s multithreading environment, if you need to do something
    in the background. The more your application sleeps, the further it prolongs the
    battery life.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avoid gratuitous animations**: Some animation is both customary and important
    in today''s applications; well-thought-out animations can help to orient the user
    as to where they''ve come from in an application''s user interface and where they''re
    going. But don''t flash, blink, or otherwise animate just to see pixels move;
    under the hood a lot has to happen to move those pixels, and that can eat battery
    life.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use the network judiciously**: Most mobile devices have at least two radios
    (cellular and Wi-Fi); some have more. Accessing the network should be seen as
    a necessary evil, because the radios consume power when transmitting and receiving
    data. And don''t forget data parsing, either: if you''re parsing a lot of data,
    you''re likely running the CPU at full tilt to do the heavy lifting, and that
    means lower battery life.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network resources are at a premium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I''ve already warned you about the high cost to the battery for using the network.
    To add insult to injury, most mobile devices run on networks that can be up to
    three orders of magnitude slower than a desktop: your office desktop may have
    gigabit Ethernet, but in many parts of the world, a megabit per second is considered
    fast. This situation is rapidly improving, as network operators deploy cellular
    wireless networks such as **Long Term Evolution** (**LTE**) and Wi-Fi hotspots
    everywhere, but it''s by no means uniformly available. On a recent trip in California,
    in the course of eight hours, my cellular network connectivity throughput ran
    the gamut from faster than my cable modem (running at 25 megabits per second)
    down to the dreaded megabit-a-second that can make a large web page crawl.'
  prefs: []
  type: TYPE_NORMAL
- en: For most applications, you should be fine using the **Hypertext Transfer Protocol**
    (**HTTP**); Qt's `QNetworkAccessManager` class implements HTTP and HTTPS, and
    using HTTP means that you can build web services to support your backend in a
    standard way.
  prefs: []
  type: TYPE_NORMAL
- en: If you're developing a game or a very custom kind of application, you may need
    to build a custom protocol. Consider using `QTcpSocket` or `QUdpSocket` for your
    network protocol, remembering of course that TCP is a reliable protocol, while
    with UDP there's no guarantee of your data reaching its destination; reliability
    is up to you.
  prefs: []
  type: TYPE_NORMAL
- en: Storage resources are at a premium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mobile devices typically use all solid-state memory. Although solid-state memory
    has come down in price significantly in the last several years, it's still not
    as cheap as the rotating magnetic memory that makes up the disk drives in most
    desktops and many laptops. As a result, mobile devices may have as little as 8
    GB of flash memory for persistent storage, or if you're lucky, 16 or 32 GB. That's
    shared across the system and all applications; your application shouldn't use
    more than a few gigabytes at most, and that's only if your user is expecting it—say,
    for a podcast application. That should be the sum total of the size of your application,
    its static resources such as audio and video, and anything it might download and
    cache from the network.
  prefs: []
  type: TYPE_NORMAL
- en: Equally important, the runtime size of your application needs to be smaller.
    Most mobile devices have between a half GB and 2 GB of dynamic RAM available;
    the system shares this across all running applications, so it's important to allocate
    what you need and free it when you're done. Qt's memory management system, which
    I explained in [Chapter 3](ch03.html "Chapter 3. Designing Your Application with
    Qt Designer"), *Designing Your Application with Qt Designer,* and [Chapter 5](ch05.html
    "Chapter 5. Performance Optimization with Qt Creator"), *Performance Optimization
    with Qt Creator*, comes in handy here.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, don't forget that your graphics textures can eat valuable GPU memory
    as well. While Qt manages the GPU for you, whether you're using Qt or Qt Quick,
    you can write an application that consumes all of a device's texture memory, making
    it difficult, or impossible, for the native OS to render what it needs if it needs
    to interrupt your application.
  prefs: []
  type: TYPE_NORMAL
- en: To port or not to port?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To paraphrase the immortal bard, that's the question. With Qt's incredible flexibility
    across numerous platforms, the temptation to grab an existing application and
    port it can be overwhelming; especially in the vertical markets where you have
    a piece of custom software written in Qt for the desktop and a customer who wants
    "the same thing" for the latest mobile device for their mobile workers. In general,
    the best advice I can offer is to avoid porting UI, and only port the business
    logic in an application if it seems well-behaved for mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'UI ported from the desktop or a laptop environment seldom works well on mobile
    devices. The user''s operating patterns are just too different: what a person
    wants to do while seated at a desktop or laptop is just not the same as what they
    want or can do standing up, walking around, or in brief spurts in a conference
    room, cafeteria, or café. If you''re porting from one mobile device to another,
    it may not be so bad; for example, a developer with a Qt application for MeeGo,
    Nokia''s Linux-based platform, shouldn''t have too much of a problem bringing
    their application to Qt on Android.'
  prefs: []
  type: TYPE_NORMAL
- en: Porting business logic may be a safer bet, assuming it doesn't make heavy use
    of the CPU, network, or dynamic or static storage. Qt offers a wrapper for SQLite
    through QtSQL, and many enterprise applications use that for local storage. That's
    a reasonable alternative for data storage, and most HTTP-based networking applications
    shouldn't be too hard on the network layer, as long as they have reasonable caching
    policies and don't make too many requests for data too often. But if the application
    uses a lot of storage or has a persistent network connection, it's time to rearchitect
    and rewrite.
  prefs: []
  type: TYPE_NORMAL
- en: A word on testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Testing any application is important, but mobile applications require additional
    effort in testing, especially Android applications. There's a wide variety of
    devices on the market, and users expect your application to perform well on any
    device they may have.
  prefs: []
  type: TYPE_NORMAL
- en: The most important thing you can do is test your application on real devices,
    as many of them as you can get your hands on, if you're interested in releasing
    your application commercially. While as you will see, the Android SDK used by
    Qt Creator comes with an emulator that can run your Android application on your
    desktop or laptop, running in an emulator is no substitute for running on the
    device. A lot of things are different, from the size of the hardware itself to
    having a touch screen, and of course the network connection and raw processing
    power.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Android devices aren't terribly expensive, and there are an awful
    lot of them around. If you're just starting out, eBay or the Google Play Store
    can be a good place to shop for an inexpensive used or new device. If you're a
    student or budding entrepreneur, don't forget that many family members may have
    an Android device you can borrow, or you can use the Android cell phone that you
    already have.
  prefs: []
  type: TYPE_NORMAL
- en: What and when should you test? Everything and often! On a multiweek project,
    you should never be more than a few days away from a build running on a device.
    The longer you spend writing code that you haven't tested on a device, the more
    assumptions you may be making about how the device will perform.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure not to just test your application in good circumstances, but in bad
    ones as well. Network connectivity is a prime example; you should test your error
    handling in cases with no network coverage. If you have good network coverage
    where you're working, one trick you can use is to put the device in a metal cookie
    tin or paint can; the metal attenuates the signal and has the same effect as the
    signal being lost in the real world (say, in a tunnel or on the subway).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Qt Creator for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android''s functionality is delimited in API levels; Qt for Android supports
    Android level 10 and above: that''s Android 2.3.3, a variant of Gingerbread. Fortunately,
    most devices in the field today are at least Gingerbread, making Qt for Android
    a viable development platform for millions of devices.'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading all the pieces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with Qt Creator for Android, you''re going to need to download
    a lot of stuff. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Begin with a release of Qt for Android, which was either part of the Qt installation
    you downloaded in [Chapter 1](ch01.html "Chapter 1. Getting Started with Qt Creator"),
    *Getting Started with Qt Creator,* or you need to go back and download it from
    [http://bit.ly/13G4Jfr](http://bit.ly/13G4Jfr)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Android developer tools require a current version of the **Java Development
    Kit** (**JDK**) (not just the runtime, the Java Runtime Environment, but the whole
    kit and caboodle); download it from [http://bit.ly/14HAaj4](http://bit.ly/14HAaj4),
    or you may be able to get things to work with Linux using OpenJDK at [http://bit.ly/1deNuTX](http://bit.ly/1deNuTX)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need the latest Android **Software Development Kit** (**SDK**), which you
    can download for Mac OS X, Linux, or Windows from [http://bit.ly/146nsPl](http://bit.ly/146nsPl)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need the latest Android **Native Development Kit** (**NDK**), which you
    can download from [http://bit.ly/16UYK50](http://bit.ly/16UYK50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need the current version of Ant, the Java build tool, which you can download
    from [http://bit.ly/18AVIlF](http://bit.ly/18AVIlF)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download, unzip, and install each of these, in this order. On Windows, I installed
    the Android SDK and NDK by unzipping them to the root of my hard drive, and installed
    the JDK in the default location I was offered.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you install the JDK, you need to be sure that you''ve set your `JAVA_HOME`
    environment variable to point to the directory where it was installed. How you
    do this differs from platform to platform; on a Mac OS X or Linux box, you''d
    edit your `.bashrc`, `.tcshrc`, or the others; on Windows you''ll go into system
    properties, click on **Environment Variables...**, and add the `JAVA_HOME` variable.
    The path should be to the base of the JDK directory: for me, it was `C:\Program
    Files\Java\jdk1.7.0_25\`, although the path for you will depend on where you installed
    the JDK and what version you installed. (Make sure you set the path with the trailing
    directory separator; the Android SDK is pretty fussy about that sort of thing.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, you need to update your `PATH` variable to point to all the stuff
    you just installed. Again, it''s an environment variable, and you''ll need to
    add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `bin` directory of your JDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `android\sdk\tools` directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `android\sdk\platform-tools` directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For me, on my Windows 8 computer, my `PATH` variable includes the following
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget the separators: on Windows, it''s a semicolon (`;`) on Mac OS
    X and Linux it''s a colon (`:`).'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, it's a good idea to restart your computer (if you're running
    Windows) or log out and log back in to make sure all these settings take effect.
    If you're on a Mac OS X or Linux box, you may be able to start a new terminal
    and have the same effect (or reload your shell configuration file) instead, but
    I like the idea of restarting at this point to ensure that the next time I start
    everything up, it'll work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing the Android SDK installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to use the Android SDK tools to ensure you have a full version
    of the SDK for at least one Android API level installed. We''ll need to start
    Eclipse, the Android SDK''s development environment, and run the Android SDK manager.
    To do this, follow the ensuing steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Find Eclipse. It's probably in the Eclipse directory of the directory you installed
    the Android SDK in. If Eclipse doesn't start, check your `JAVA_HOME` and `PATH`
    variables; odds are Eclipse can't find the Java environment it needs to run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** when Eclipse prompts you for a workspace. This doesn't matter;
    you won't use Eclipse except to download Android SDK components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Android SDK Manager button in the Eclipse toolbar (circled in the
    next screenshot):![Finishing the Android SDK installation](img/2319OS_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Eclipse SDK, with the Android SDK Manager button circled
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have at least one Android API level above API Level 10 installed,
    along with the Google USB Driver (you'll need that to debug on hardware).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Quit Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let's see if the Android Debug Bridge—the software component that transfers
    your executables to your Android device and supports on-device debugging—is working
    as it should. Fire up a shell prompt and type `adb`. If you see a lot of output
    and no error, the bridge is correctly installed. If not, go back and check your
    `PATH` variable to be sure it's correct.
  prefs: []
  type: TYPE_NORMAL
- en: While you're at it, you should developer-enable your Android device, too, so
    it'll work with ADB. Follow the steps given at [http://bit.ly/1a29sal](http://bit.ly/1a29sal).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Qt Creator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, it''s time to tell Qt Creator about all the stuff you just installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Start Qt Creator, but don't create a new project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Tools** menu, choose **Options...** and then **Android**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the blanks, as the next screenshot shows. They should be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The path to the SDK directory in the directory where you installed the Android
    SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The path to where you installed the Android NDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check **Automatically create kits for Android tool chains**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The path to Ant; either the Ant executable itself on Mac OS X and Linux platforms,
    or `ant.bat` in the bin directory of the directory where you unpacked Ant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The directory where you installed the JDK (this may be automatically picked
    up from your `JAVA_HOME` directory).![Configuring Qt Creator](img/2319OS_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Qt Creator Android configuration, set with the paths where I installed the
    various Android components
  prefs: []
  type: TYPE_NORMAL
- en: Click on **OK** to close the **Options** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now be able to create a new Qt GUI or Qt Quick application for Android!
    Do so, and ensure that Android is a target option in the wizard as the next screenshot
    shows; be sure to choose at least one ARM target, one x86 target, and one target
    for your desktop environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Qt Creator](img/2319OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Android targets in the New Qt Quick Application wizard
  prefs: []
  type: TYPE_NORMAL
- en: Building and running your application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Write and build your application normally. A good idea is to first build the
    Qt Quick "Hello World" application for Android, before you go to town and make
    a lot of changes, and test the environment by compiling for the device. When you''re
    ready to run on the device:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Projects** (on the left) and then choose the **Android for arm**
    kit's **Run Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Package Configurations**, ensure that the Android SDK level is set to
    the SDK level of the SDK you installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that **Package name** reads something like `org.qtproject.example`, followed
    by your project name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your Android device to your computer using the USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Android for arm** run target, and then click on either **Debug**
    or **Run** to debug or run your application on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt for Android gives you an excellent leg up on mobile development, but it's
    not a panacea. If you're planning on targeting mobile devices, you should be sure
    to have a good understanding of the usage patterns for your application's users,
    as well as the constraints in CPU, GPU, memory, and network that a mobile application
    must run under.
  prefs: []
  type: TYPE_NORMAL
- en: Once we understand these, all of our skills with Qt Creator and Qt carry over
    to the mobile arena. Begin by installing the JDK, Android SDK, Android NDK, and
    Ant, and then develop applications as usual, compiling for the device and running
    on the device frequently to iron out any unexpected problems along the way.
  prefs: []
  type: TYPE_NORMAL
- en: In our final chapter, we learn a bunch of odds and ends about Qt Creator and
    Qt in general that will make software development much easier. Stay tuned!
  prefs: []
  type: TYPE_NORMAL
