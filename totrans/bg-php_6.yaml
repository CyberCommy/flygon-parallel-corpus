- en: Chapter 6. Building a PHP Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we have created a model and a controller, where the
    controller `Contacts` class instantiates the model `Contact` class. We successfully
    used a `namespace`, a `use` statement, a method, an access modifier, an object,
    and a class. We have witnessed the power of a framework in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be building an MVC framework from scratch. A framework
    is really just a way to organize the code and structure it. Starting from an empty
    directory, we will build an entire working framework as a starting point for more
    complex applications.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous chapter, we retrieved data from an array. In this lesson, we
    will retrieve it from the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Build a basic PHP MVC framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement the OOP concepts covered in the previous chapters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify how to route a controller to a specified URI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with the database with PHP Data Objects (PDO)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work with HTML to build and create reusable pages (views)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also be implementing the OOP concepts that we have covered in previous
    chapters, including, but not restricted to, namespaces, `use` statements, objects
    and classes, access modifiers, and methods.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to route a controller to a specified URL and work with HTML
    to build and create reusable pages (views). Finally, we will interact with the
    database using a PDO.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Project Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section is concerned with setting up the project development environment.
  prefs: []
  type: TYPE_NORMAL
- en: This is all about setting up the index, the `.htaccess` file, creating the web
    root, setting up the composer, and setting up the `app` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**The index** is the bootstrap file of the framework; this is ultimately where
    all requests are received. A request is made, for example, when the user inputs
    a URL into the address bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.htaccess** is the mod rewrite engine that passes all requests to the index
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web root** is the public folder that would be accessible to the browser,
    as well as for storing the index and .htaccess of all the web application''s assets.
    This would include images, CSS, and JavaScript files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Composer** is a package manager for managing libraries of code which the
    system is dependent on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App directory** is your application; it is where your views, models, controllers,
    and helpers will be stored. Helpers are compact methods that help with single
    common tasks developers come across frequently. It is common that a developer
    may find themselves repeating the same tasks and will create a helper class with
    single or several methods to help with this task. This could be formatting dates,
    performing specific calculations, and many more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The boot symbolizes what the process of setting up a framework is commonly known
    as bootstrapping. This is not to be confused with the popular CSS Grid named Bootstrap.
    This essentially tightly ties all core parts of the framework together.
  prefs: []
  type: TYPE_NORMAL
- en: Error Reporting Using Composer and Whoops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this project, we will be using the Whoops library to handle errors. The
    Whoops library is a tool for examining errors that may occur in your projects.
    This library is packaged and made available for other developers to use in their
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Whoops, when an error occurs in PHP, you will be able to see this display
    information as opposed to standard bland error reporting from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Error Reporting Using Composer and Whoops](graphics/6_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Composer will manage the use of this dependency as it is considered among PHP
    developers a very widely used and a very popular package manager.
  prefs: []
  type: TYPE_NORMAL
- en: Composer is a tool for dependency management in PHP. It allows you to declare
    the libraries your project depends on and it will manage (install/update) them
    for you. To install Composer, go to [https://getcomposer.org/download/](https://getcomposer.org/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a scenario where you have to install a dependency for PHP, and for installing
    that dependency, you need to install other overhead dependencies. Composer helps
    you in handling this problem. It is used to handle all the work for you to install
    a library, as it downloads all the libraries and dependencies together.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Composer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll look at setting up Composer in this section. To do this, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder to store the framework files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Feel free to call your folder anything you like, as long as it's all in lowercase
    without any spaces.
  prefs: []
  type: TYPE_NORMAL
- en: '`app` holds the application files'
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system` holds the core framework files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webroot` will hold the publicly accessible files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will set up Composer. Create a file in the root of your framework folder
    called `composer.json.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This file holds a JSON object that will autoload classes as we need them. We
    will be using PSR-4 autoloading.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PSR-4 autoloading will load a class based on its namespace when it's being used.
    For instance, new `App\Models\Contact()` will tell Composer to autoload a file
    called `Contact` that is stored in the folder `app\Models.`
  prefs: []
  type: TYPE_NORMAL
- en: Open `composer.json` and create an `App` and `System` definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will tell Composer that everything we call a namespace, with either `App`
    or `System` to look for the class in the `app` or `system` folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are also loading a third-party package called `Whoops.` We load this package
    by including it as a dependency in a `require` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Save `composer.json.` Now, inside `webroot,` create two files: `index.php`
    and `.htaccess.`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `.htaccess`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For security reasons, if a folder does not contain an `index` file, we don''t
    want its contents displayed in a browser. To disable directory browsing, enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, a check is made to ensure mod rewrite is enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`mod` rewrite provides a rule-based rewriting engine to rewrite requested URLs
    on the fly. It helps to make URLs, so `index.php?page` can become `/`page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, turn on the rewriting engine and set the base to the root of this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To force HTTPS, you can uncomment the `#` below, but only do this on a server
    that has HTTP enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, define the rewrite conditions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is to ignore trailing slashes and folder and files that exist. Only dynamic
    files should be routed, for example, URLs that do not exist as physical files.
  prefs: []
  type: TYPE_NORMAL
- en: The last rule passes all requests to `index.php?$1.` The `$1` is the request
    after the first `/` in the requested URL.
  prefs: []
  type: TYPE_NORMAL
- en: '`RewriteCond` basically means "execute the next `RewriteRule` only if this
    is true".'
  prefs: []
  type: TYPE_NORMAL
- en: The `RewriteRule` basically means that if the request is done that matches `^(.+)$`
    (matches any URL except the server root), it will be rewritten as `index.php?$1,`
    which means a request for contact will be rewritten as `index.php?contact:`
  prefs: []
  type: TYPE_NORMAL
- en: RewriteRule ^(.*)$ index.php?$1 [QSA,L]
  prefs: []
  type: TYPE_NORMAL
- en: QSA means that this flag forces the rewriting engine to append a query string
    part in the substitution string to the existing one instead of replacing it.
  prefs: []
  type: TYPE_NORMAL
- en: The Secure Sockets Layer (SSL) creates an encrypted connection between your
    web server and your web browser. This stops any data being intercepted from your
    machine to the web server. It's recommended to use HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to Lesson 6.php file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: Save the file. Now, open `index.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, start php and then do a check to determine if `vendor/autoload.php` exists
    (it won't exist yet) and require the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an important step. The autoload.php file will only exist once the Composer
    has been initialized. Checking before requiring the file is a precaution used
    to avoid a fatal error.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should inform the user what Composer is requesting and where to go and get
    it. We do this by using an `else` clause:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will set our environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will define a constant called `ENVIRONMENT` and give it a value of development.
    When going into `production,` set the `environment` to `production`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When in production, you do not want to show errors. Having an environment constant
    is a good way to set what the environment of the application is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, based on the `environment` constant, we can set the appropriate level
    of error reporting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In development mode, all errors will be displayed, but in production, no errors
    will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to Lesson 6.php file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new folder will now have been created called vendor. This folder is where
    Composer installs its required files and any third-party dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: You can now go back to your browser and reload the page. You should now see
    a blank page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This means Composer is working, but we haven't yet requested anything to be
    loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Errors in view when the Whoops package is turned on will display the errors
    on the screen with a full stack trace of how the framework has executed the code
    along the way. This can help developers isolate the issue by following the path
    that their code has traveled on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Using Composer to Install Dependencies'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you are working on a PHP project and you need a lot of dependencies
    for your project. You are on a strict deadline, yet, you cannot proceed ahead
    before adding those dependencies. You discovered that you can use Composer to
    install dependencies automatically. You now need to install Composer.
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this activity is to get you acquainted with Composer installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform this activity, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the framework by opening Terminal or command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If on Windows, navigate to the `framework` folder and launch the php server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `–S` means that run the server and use localhost:8000 as it's address, and
    `–t Webroot` sets the document `root` to the `Webroot` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Terminal output will look like this (some of the details will be different
    on your system):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, go to `http://localhost:8000` and you will see the Composer instructions
    we wrote in the `else` statement in `index.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is because we have not yet set up Composer. We do this by typing the following
    in the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Observe that a new folder will now have been created called `vendor`. This folder
    is where Composer installs its required files and any third-party dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go back to your browser and reload the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should now see a blank page.
  prefs: []
  type: TYPE_NORMAL
- en: This means Composer is working, but we haven't yet requested anything to be
    loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to index.php in your editor and add these lines at the bottom of the
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will load our `config` class and set up our routing.
  prefs: []
  type: TYPE_NORMAL
- en: Save `index.php` and create a new file called `Config.php` inside the `app` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take care to name the file `Config` and `not config.` Case sensitivity is important
    on Unix-based systems such as Mac and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: We have reached the end of this section. We have learned how to bootstrap an
    application, which allows for a single entry point, and how to use Composer to
    autoload the classes. We covered how errors are handled and finally, we covered
    the build process of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will set up the configuration class and will also set
    up routing.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Class, Default Classes, and Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about the `configuration` class, and we will
    also be setting up routing.
  prefs: []
  type: TYPE_NORMAL
- en: We will be setting up the `config` class. This will be located in the root of
    the `app` folder. The `config` class stores the default controller, the `default`
    method to be loaded, and the database credentials. In the `index` file at the
    beginning, you will be passing the `config` class to the `route` class. The `route`
    class controls what is to be loaded and when. The focus for now is the `configuration`
    class and routing. The other components will be looked at in more detail in later
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `configuration` class is an array of options for the framework including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Database source credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paths to default controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paths to default methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will also create a view class which is responsible for loading
    views, which enables a place for the presentation layer to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: When setting up routing, we are informing the framework where to look in the
    files system that matches the URL.
  prefs: []
  type: TYPE_NORMAL
- en: When loading the correct file, this will be the required controller class. We
    will activate the required method, the required model, and the required view.
  prefs: []
  type: TYPE_NORMAL
- en: We will do all of this so the user can see in their browser what they have requested
    from simply clicking on a link, which is otherwise known as making a request to
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will create the `route` class, which takes segments from the URL so
    it knows which controller and method to load and parameters to pass.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the URL `http://localhost:8000/contacts/view/2` says *Go to the
    contacts controller view method*. In this case, the number 2 represents a parameter
    being passed through to the view method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `configuration` class is more commonly known by developers as the config
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration is a natural place that users might look to for help on understanding
    how to remember important details about their framework project. It is advisable
    to developers to develop a system to remember details about their projects.
  prefs: []
  type: TYPE_NORMAL
- en: This can be helpful if they plan to make their project open source. It can also
    be helpful to the developer if they need to remember details about a project at
    a later date, as months, even years, can go by before the developer needs to revisit
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: What kind of details could these be?
  prefs: []
  type: TYPE_NORMAL
- en: '**Version number** – Over time, the developer may make additions and improvements,
    which can affect the very core of the code base. Knowing what version you are
    working with can help you select the proper approach to a programming problem
    later on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Credits** – It is good practice to credit the work of other developers whose
    work you have used. If you fail to do so and you may receive an unhappy email
    from an uncredited developer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Author details** – Users of open source projects may benefit from contact
    details of the original developer. Annoyed uncredited developers need somewhere
    to send that unhappy email.![Configuration Class, Default Classes, and Routing](graphics/6_02.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is an example of a Config class
  prefs: []
  type: TYPE_NORMAL
- en: Loading a View File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll look at an example to demonstrate the ability to load up view files once
    this section is complete. However, no views have been created at this stage, so
    a custom 404 page is used in its place.
  prefs: []
  type: TYPE_NORMAL
- en: The example in this section loads up the framework in a browser. Initially,
    you will see a 404 message in the browser as the view cannot be found. This is
    because the default controller does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: A sample `404 php` file exists inside the `views` folder with the message "the
    file cannot be found". Save the file and refresh the browser of the newly created
    404 page.
  prefs: []
  type: TYPE_NORMAL
- en: Open php and give the file a `namespace` of App.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The class belongs to the App namespace as it is stored inside the **app** folder.
  prefs: []
  type: TYPE_NORMAL
- en: Next, define a class called `Config` and create a method called `get`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `get` method needs to return an array. The keys of the array will be the
    settings used for the routing and database credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding namespace definition holds the path of `App\Controllers`. Note
    the double backslash—this is because backslashes are often escaped, so using a
    double stops it from being escaped.
  prefs: []
  type: TYPE_NORMAL
- en: The namespace definition, default controller, and default method will become
    clear when we write the router.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, set up the database properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up the database properties for the type of database to be used and its location,
    followed by the database name and the username and password to access the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to access a MySQL database in order to create a database. To set
    up a native database, MariaDB is recommended. To download MariaDB, follow the
    instructions at [https://mariadb.com/downloads/mariadb-tx](https://mariadb.com/downloads/mariadb-tx).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we have a database called mini, and my username is root. We
    do not have a password, so we leave it blank.
  prefs: []
  type: TYPE_NORMAL
- en: Save the `Config.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before the `routing` class can be set up, we need to create a `View` class.
    This class will be responsible for loading the `view` files and also showing a
    404 page when a URL cannot be found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In system, create a new file called `View.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open php and set the namespace to `System.` Next, define a class called `View`
    and create a method called `render` that accepts two parameters, `$path` and `$data.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`$path` will hold the path of the requested file.'
  prefs: []
  type: TYPE_NORMAL
- en: '`$data` will hold the content to be passed to the `view` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '`$data` is optional; note it has a default value of `false`. This means if
    there is only one parameter passed to the `render` method, then the data will
    not be used.'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the method ID, a Boolean checks for `$data.` If it's `false,` it is ignored;
    otherwise, the data is looped through using a `foreach` loop. On each loop, the
    data is extracted to a local variable.
  prefs: []
  type: TYPE_NORMAL
- en: After the loop, set the relative path to where the view files will be stored,
    in this case `app/views/` followed by the requested view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, a check is made to ensure the `view` file exists and requires it,
    otherwise an error is generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and create a new file called `Route.php` inside the `system` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open php and set the namespace to `System.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `View` class we''ve just created needs to be available to this class. To
    import it, add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This loads the `View` file. The reason PHP knows where to find the file is because
    of the namespace, which is Composer in action. Being able to import classes this
    way is really helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Now, create a class called `Route` and a method called `__construct,` which
    expects a parameter called `$config:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, set up the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `$url` will hold an array from the requested route in the form of /page/requested.
    This is how it works: When explode is run, it finds a forward slash in the requested
    URI, which the $_SERVER makes available.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, the `$controller` method uses a ternary operator to check if the 0 index
    of $url exists, otherwise the default_controller defined in the Config class is
    used.
  prefs: []
  type: TYPE_NORMAL
- en: The $method checks for the existence of a $url[1], otherwise it reads from the
    config class.
  prefs: []
  type: TYPE_NORMAL
- en: $args will get all other indexes of $url after the first 2.
  prefs: []
  type: TYPE_NORMAL
- en: '`$class` holds the path to the controllers as set in the `Config` class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What these parameters do is get the Controller, Method, and parameters from
    the requested URL. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8000/contacts/view/2`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This results in:'
  prefs: []
  type: TYPE_NORMAL
- en: Contacts = Contacts class.
  prefs: []
  type: TYPE_NORMAL
- en: View = View method inside the contacts class.
  prefs: []
  type: TYPE_NORMAL
- en: 2 = A parameter passed to the method.
  prefs: []
  type: TYPE_NORMAL
- en: If the requested URL is http:://localhost:8000/, then no controller or method
    is requested, so the default controller and method will be used, as set in `system\Config.php.`
  prefs: []
  type: TYPE_NORMAL
- en: 'After these variables have been set up, a check is made, that is, if the class
    does not exist, call a method of `not_found` that exists within the `Route` class
    (not yet set up):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the method is checked to ensure it exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, set up an instance of the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the class by calling `call_user_func_array` and pass in an array of the
    class instance and method, and pass any arguments as a second parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If a `route` is called that does not exist, a `not_found` method is needed.
    This calls the `render` method and passes `404` as the parameter. This will attempt
    to load `app/view/404.php`, should it exist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The full class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Manipulating the Output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section shows you how to manipulate the output of the previous example.
    Here are the steps to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load up the framework `http://localhost:8000` and you will see the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is because the default controller does not yet exist and neither does app/views/404.php.
  prefs: []
  type: TYPE_NORMAL
- en: Create a `views` folder inside the `app` folder and create a file called `404.php`.
    Enter a message such as '`The file cannot be found.`' and save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload the framework in your browser and you will now see your message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we covered the `configuration` class wherein we saw how the
    configuration class sits on top of the `root` folder. We also saw how to set up
    routing, where we performed the loading of a `view` page.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover the base controller, which defines the main
    functionality of the MVC framework.
  prefs: []
  type: TYPE_NORMAL
- en: Base Controller, Default States, and Routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The base controller class—because of the nature of an MVC framework—requires
    a default state.
  prefs: []
  type: TYPE_NORMAL
- en: A default view is loaded by a default method within a default controller class.
  prefs: []
  type: TYPE_NORMAL
- en: From this default controller class, all other controllers across the system
    are loaded.
  prefs: []
  type: TYPE_NORMAL
- en: This creation of the default `Controller` class and default method will be the
    focus of what we are building during in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is not essential that the model be included as the controller, and the view
    can work independently without a data source.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Base Controller, Default States, and Routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we''ll look at setting up base controller, default states,
    and routing. The following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Views:**'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's set up the default view. Create a file called `default.php` inside
    `app\views` and write the content of ``Hello from default view`.` or any other
    message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will be displayed when on the framework's home page.
  prefs: []
  type: TYPE_NORMAL
- en: '**Controllers:**'
  prefs: []
  type: TYPE_NORMAL
- en: Before we can start building our application controllers, we need a base controller
    that all other controllers can extend from. The reason for this is so the controllers
    can make use of any properties or methods defined in the base controller.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `BaseController.php` and save it in the `system` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open php and set the namespace to `System`. Define a class called `BaseController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define two class properties called `$view` and `$url`. Both of these properties
    will have an access modifier of public, meaning anywhere the `BaseController`
    is used, the properties will be available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a `construct` method, then set up a new instance of the `View`
    class. This is so `$this->view` can be used to call the `render` method of the
    `view` within `extended` controllers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, assign a method of `getUrl()` to the property `$this->url`. This will
    call another method to get the current URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, a check is run on the environment mode. If it's set to development, then
    a new instance of the Whoops error handler is created. This Whoops class is brought
    in by Composer, as defined by the composer.json file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Whoops` class will give a rich error stack trace when errors occur with
    the code when run in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, a `getUrl`() method is defined that will return the requested URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Home Controller:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app/Config.php,` we set the `default_controller` to be home:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Let's create this now. Create a `Controllers` folder inside the `app` folder
    and create a file called `Home.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All classes should start with a capital letter and each subsequent word should
    be capitalized.
  prefs: []
  type: TYPE_NORMAL
- en: Open php and set the namespace to `App\Controllers`. This namespace references
    the folder structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, import the `BaseController` by calling its namespace and call name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a class called `Home` and extend the `BaseController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will allow the `Home` controller to have access to `$this->view` and loading
    the views.
  prefs: []
  type: TYPE_NORMAL
- en: Create a method called `index` and then return `$this->view->render` and pass
    the filename to be loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this case, pass in default, and `app\views\default.php` will be loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity: Exploring the Results'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now be able to see the output of the task, as seen in the demo file.
    Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your framework in the browser `http://localhost:8000` and you will see
    your default view file being loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remember that Whoops class? Well, let''s see that in action. Open your `default.php`
    view file and add this code at the end of the file. Open php and write something,
    but not in a string. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, save and reload the page in the browser and you will see:![Activity: Exploring
    the Results](graphics/6_03.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This page tells you what the error is, but also shows a code snippet of where
    the problem is and a complete stack trace so that you can trace the journey from
    execution to failure:'
  prefs: []
  type: TYPE_NORMAL
- en: Now, remove your modifications from `default.php` so it only contains your original
    content, save, and reload the page again. You will see your page loading normally
    again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's look at how to access a new method. In your Home controller, create
    a new method called `packt` that loads a view called `packt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new view file in app\views called `packt.php` and enter the text '`Hello
    from Pack!'`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load up the page by going to `home/packt http://localhost:8000/home/packt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see the contents of your `packt` view file.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have gained a better understanding of the role default states
    play in our project. This project requires these base methods to initially run
    and to extend from.
  prefs: []
  type: TYPE_NORMAL
- en: We have gained experience by building default states including `baseController`
    and `baseMethod`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about PDO, a lightweight interface for gaining
    access to databases in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Working with PDO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be creating the PDO wrapper and using a database as
    a data source from our model.
  prefs: []
  type: TYPE_NORMAL
- en: From this section, we will gain the ability to use a database within our framework
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Six methods will be covered here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a `get` method — this is for creating a connection to the database
    and making sure it is a singleton instance, meaning it can only ever have one
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: We have a `raw` method for running raw, unsecured queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `select` method for running secure queries to select records from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `insert` method to create new records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `update` method to update records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `delete` method to delete records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `truncate` method to empty a table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What this does is allow your CRUD to work. Without this class, CRUD functionality
    would not be possible.
  prefs: []
  type: TYPE_NORMAL
- en: The base model is where we are creating the database connection using the database helper.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will allow other model classes to extend from this model and use a database
    connection. This only consists of one single method:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Construct:**'
  prefs: []
  type: TYPE_NORMAL
- en: This is responsible for passing the config to the database helper to create
    the database connection.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to start using the database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Database access: If you find that you do not have access to a database client
    or PHP admin web interface, then a fallback option is included that all students
    may use to create a database and insert data.'
  prefs: []
  type: TYPE_NORMAL
- en: The upcoming section is all about creating the first model inside the apps folder.
    We will create the model `contact.php` and talk about best practices and naming
    conventions, as well as extending from the base model created earlier, alongside
    setting up a method to display records from a database.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create a `contact` controller that extends from the base controller.
    That imports the contact model before calling that on an index method and passing
    the records from the model to the view. In that view, we will look through the
    records and display them one per line.
  prefs: []
  type: TYPE_NORMAL
- en: We then open up the browser and go to the contacts controller to see the contacts
    being displayed on the page.
  prefs: []
  type: TYPE_NORMAL
- en: To load a different controller, it's the same process as described in the previous
    subtopic. Create a controller, set its namespace, and define the classes to exist
    in the base controller, and either have an index method that loads when calling
    the controller name or use a different name and access it by calling your controllername/methodname.
  prefs: []
  type: TYPE_NORMAL
- en: We're nearly at the end of the framework setup. Right now, we can create controllers
    and methods to load pages and pass data to views. For a static site, this is great—it
    will keep your code organized and running quickly—but one vital component missing
    is the ability to use a database.
  prefs: []
  type: TYPE_NORMAL
- en: On that note, we're going to create a database helper. This is a fancy name
    for a class that's stored in a common folder named `helpers`. Helpers are classes
    that don't fit in with Controllers or Models, but are standalone classes to extend
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The database helper will have six methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get()` – Set up the database connection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raw()` – Run a raw, unsecure query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select()` – Run a query to select records from a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insert()` – Create new records'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update()` – Update existing records'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete()` – Delete existing records'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncate()` – Empty a table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Contact Controller and Viewing the Records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will start creating our contact controller. Follow these
    steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: First, create a folder called `Helpers` inside of the `app` folder and create
    a new file called `Database.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open php and set the namespace as `App\Helpers.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to import PDO.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PDO is a database abstraction layer; it's a wrapper that supports 12 different
    database engines including MySQL. It's what we will be using to talk to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To import PDO, use a `use` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Next, define a class called `Database` that extends `PDO`. Inside the class
    create a property called `$instances` and set it as an array datatype.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `$instances` property will be used to ensure there is only ever a single
    database connection in use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Next, create a method called `get()` that accepts a pram called `$config`. This
    will be the `Config` that is set up in `app\Config.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside this method, set up the local variables to hold the database credentials.
    These values will be extracted from the `$config` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, create a variable called `$id`. This will hold all the database local
    variables to create an identifier. Next, a check is performed to check if the
    `$instance` property already has this `$id`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `$instances` does have the `$id,` then it will return the `$instance,` otherwise
    a new PDO connection is attempted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When connecting to PDO, the database credentials are passed and the charset
    is set to UTF-8.
  prefs: []
  type: TYPE_NORMAL
- en: On the next line, the error mode is set to exception. This means any exceptions
    will be caused and displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, set the `$instance` to the current connection and return `$instance:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**RAW method**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a method called `raw.` This is a very simple method. It accepts a single
    parameter which is an SQL statement. The `$sql` is passed to `$this->query`, which
    will then run the query directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is useful for executing queries that you don't need to be secure. If no
    checking is done, the query will be executed as is and the result is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**SELECT method:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a method called `select().` This will accept four parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$sql` – The SQL query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$array` – Any keys to be bound to the query (optional)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$fetchMode` – Sets the PDO fetch mode default to object (optional)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$class` – Used to specify a class to be used in conjunction with the fetch
    mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inside the method so you don't have to write `$this->db->select('SELECT * FROM
    table') w`e're going to add select to the SQL query providing it's not already
    there. This is done by changing the case to lowercase and then using `substr`
    to check the first seven letters of the `$sql.` It it's not equal to select, then
    add select to the start.
  prefs: []
  type: TYPE_NORMAL
- en: Next, prepare the query. This will set up the SQL query without running it.
    Next, the $array is looped over and any values are assigned to the particular
    datatype. If the value is an INT, then a datatype of PARAM_INT is used, otherwise
    the datatype will use string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the execution is run. This passes the $sql to the server and the binded
    $array keys separately, meaning there is no way a SQL injection can ever happen,
    resulting in a secure query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the query has been executed, the response is then retuned. By default,
    an object is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**INSERT method**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To insert new records into the database, an insert query is required. Create
    a new method called insert with two parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $table – The table name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: $data – An array of keys and values to insert into the $table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sort the $data array by using ksort($data).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, extract all the array keys to a variable called `$fieldNames`. This is
    done using implode and setting a comma between each key and running `array_keys()`
    against the $data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, do the same again, this time adding `,` `:` as the implode options, and
    save this to a variable called $fieldValues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, using `$this->prepare`, a SQL command can be written that will set the
    `$fieldNames` into the value of `$fieldValues` for the `$table`. Loop over the
    `$data` and bind the values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lastly, return the ID of the last inserted record. This is useful when you
    need the primary key as soon as the record is inserted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '**UPDATE method**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a method called update with three parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$table` – The table name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$data` – An array of data to update'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$where` – An array of the key and value to put a condition, for example, [''id''
    => 2], where id is equal to 2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sort the `$data` and then extract the `$data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the loop, append to a variable called `$fieldData`. Add `$key = :$key`.
    Next, remove any whitespace to the right by calling `trim()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, loop through the `$where` array. On each loop, assign the `$key = :$key`.
    This creates a list of placeholders for the binding to catch later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, trim any whitespace to the right, then use `$this->prepare` and write
    the update SQL pass in the table name followed by the `fieldDetails` and the `WhereDetails`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, bind the keys to the :`$key` placeholders and execute the query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The last step is to return a `rowCount()`. This is the number of records that
    have been updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to the `Lesson 6.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '**DELETE method**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new method called delete with three parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$table` – The name of the table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$where` – An array of key values to determine the where condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$limit` – The number of records to delete, Default value is 1, pass null to
    remove a number limit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the method, sort the `$where` loop through the `$where` and set up the
    placeholders from the key and values of the array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare the query and write the SQL command passing, in the `$table`, `$where`,
    and `$limit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The last step is to return a rowCount(). This is the number of records that
    have been deleted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**TRUNCATE method**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last method to make is called truncate, which accepts one parameter, $table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$table` – The table name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inside the method, call $this->exec and the SQL command TRUNCATE TABLE $table.
    This will empty the table, resulting in no records. All primary keys will be reset
    to 0, as if the table had never been used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The full class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Save this class. This is a complex class, and the rest of the code we will be
    writing is much simpler. In the next few pages, we will be using the database
    helpers, and the purpose and use of methods will become clear as they are used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Base Model**'
  prefs: []
  type: TYPE_NORMAL
- en: Our next task is to create a `basemodel` class that will connect to the database
    using the Database helper and return the instance. This will allow other model
    classes to extend from this class and use the database connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `BaseModel.php` inside the system folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open php and set the namespace to System.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the Config class and the Database helper class by calling their namespaces
    in a use statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the class and call BaseModel, then create a protected property called
    `$db`. This is what other models will use to interact with the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `__construct()` method. This will run as soon as the class is instantiated.
    Inside this method, create a local variable called `$config` and assign it `Config::get()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a new instance of the Database helper and call the get method and
    pass in $config.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready to start using the database. Before we continue with our code
    base, open your database you connected to earlier, either using phpmyadmin or
    a MySQL client, or using Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a database—we will call it mini—and create a table called `contacts`
    with two columns: ID and name.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you don''t have a MySQL client, you can use Terminal by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: mysql –u root
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace root with your database username. Root is the default. I have MariaDB
    installed by default. There is no password, but should you need to enter the password,
    pass in the password flag –p:'
  prefs: []
  type: TYPE_NORMAL
- en: mysql –u root –p
  prefs: []
  type: TYPE_NORMAL
- en: Create a new database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create database `mini`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select that database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This now uses the database called mini.
  prefs: []
  type: TYPE_NORMAL
- en: 'The database is empty, so let''s create a table called contacts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To see a list of your tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: With these few commands, the database has been created, as well as a table,
    which has been populated with two records.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Creating and Executing the Model'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created the contact Controller and viewed the result. We now need to
    implement the Model for our application.
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this activity is to implement the Model for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting back to the framework, we are now ready to create our first Model.
    Follow these steps to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `app` folder, create a new folder called `Models`. This is where
    all the models will be stored. Now, create a new file called Contact.php.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's a best practice to name your models as a singular record, so in this case,
    Contact represents a table of Contacts.
  prefs: []
  type: TYPE_NORMAL
- en: In `Contact.php,` open `php` and set the namespace to `App\Models`;.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `BaseModel` and create a class called Contact and extend the `BaseModel.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a method called `getContacts().` This method will be used to get all
    contacts stored in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `$this->db->select()` to call the `select` method of the database helper
    and write the `SQL * FROM contacts.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's a best practice to write commands like `SELECT`, `FROM`, `WHERE`, `GROUP
    BY`, and `ORDER BY` in capitals, so make it clear in your code what the commands
    are.
  prefs: []
  type: TYPE_NORMAL
- en: 'The model looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to run this model. The best place for this is inside a controller.
    Create a new controller called `Contacts` inside the `app\Controllers` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This class extends from the `BaseController` and has a method called `index:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s inform the `index` method to load a view called `contacts/index`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Create a folder called `contacts` in `app\views` and create a file called `index.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you run this now and go to `localhost:8000/contacts`, you will get a blank
    page or see the contents of `contacts/index.php`, providing you've entered some
    content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to the `contacts` `controller`, we need to import the `contact`
    model. We do this by using a `use` statement and setting the namespace to the
    model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `index` method, create a new instance of the `contact` model and
    call the `getContacts()` method. Assign it to a variable called `$records:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Next, pass the `$records` to the `view:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using `compact()` is a clean way to put a string name representing the variable.
    This will read `$records` and pass it to the view:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside app\views\contacts\index.php
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `php` and check that `$records` exists and then do a `foreach` loop and
    loop through each record. `echo` the `name` key from the `$row` object. Add a
    string containing a `<br>` tag—this will cause each loop to be on a new line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Save and run this in a browser and go to `http://localhost:8000/contacts`. You
    will see a list of the contacts in the `contacts` table stored in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gained a better understanding of the role the database
    class plays in the project, which is used every time the developer interacts with
    the database. It is a wrapper for PDO queries. They do not need to call it directly
    as they are extending from it.
  prefs: []
  type: TYPE_NORMAL
- en: The only library we have used is called Whoops, which will show errors in a
    readable format.
  prefs: []
  type: TYPE_NORMAL
- en: We have also gained experience building default states, including `baseController`
    and `baseMethod`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a login system and authentication for users
    to log in and out. This will expand upon what we have covered so far and introduce
    new concepts. We will also be building the password recovery system in the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
