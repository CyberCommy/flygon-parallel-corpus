- en: Chapter 4. Spring Security with Grails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security authentication with Groovy Grails setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Grails to Secure Grails controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Groovy Grails logout scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Groovy Grails Basic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Groovy Grails Digest authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Groovy Grails multiple authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Groovy Grails LDAP authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grails is a plugin based framework and all it needs to work is a few intuitive
    commands on the command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we shall see how easily we can integrate Spring Security with
    Groovy on Grails with less coding.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security authentication with Groovy Grails setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we shall first set up Groovy and Grails. We shall then show how
    to integrate Spring Security with Grails.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Get Groovy installed from [http://groovy.codehaus.org/Download](http://groovy.codehaus.org/Download)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download Grails 2.3 from [http://groovy.codehaus.org/Download](http://groovy.codehaus.org/Download)
    and unzip it to a folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set environment variable: `GRAILS_HOME`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for `Groovy_HOME`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check Grails installation by typing `grails-version`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are taken to integrate Spring Security with Groovy Grails:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory: `Grails Project`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will create a controller which will be available inside the controller
    package.
  prefs: []
  type: TYPE_NORMAL
- en: You can open the generated controller file and view it. It will have package
    name `myfirstapp` which Grails has auto generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Update the generated controller file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Test the Grails Setup by accessing this URL `http://localhost:8080/myfirstapp/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Download the security jars for Grails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If the installer is not supported in your version of Grails you can add a dependency
    to `BuildConfig.groovy` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `Bootstrap.groovy` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding file we have populated users with username as `anjana` and
    password as `anjana123`.
  prefs: []
  type: TYPE_NORMAL
- en: Just by doing this we can authenticate the user.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that we have not updated any XML file. We have just installed the
    plugin and have modified the file.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see what kind of output we get when we run Grails: `grails run-app`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Update the `Messages.properties` file in the `i18n` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Click on the **LoginController** link at `http://localhost:8080/myfirstapp/login/auth`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to see the login screen which is generated by the Grails
    framework when we installed the security plugin. The pages are available in the
    views folder. Now you can login with the username and password: `anjana`, `anjana123`.
    You will be redirected to the Grails home page. On failure of authentication you
    will get an authentication failure message.'
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the **LogoutController** link, you will be logged out. When
    you again click on the controller you will be asked to log in again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is the workflow of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the Grails login screen—on the clicking on **Login** button, after
    entering the username and password, this submits the credentials to the Spring
    Security framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On failure of authentication, the user is redirected to the login screen with
    **Authentication failed** message.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Grails to Secure Grails controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails logout scenario* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails Basic authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails Digest authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails multilevel authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Grails to secure Grails controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's apply Spring Security to Grails controller. The scenario is that the user
    will access the Grails application and will be provided with a link to log in.
    On successful authentication, the user will be provided with links which he can
    access. The links are visible only to the logged in user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For demonstration purposes we will create the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple Grails controller: `myfirstapp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `MyFirstController` controller which will be secured with Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify `index.gsp`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are taken for integrating Spring Security with Grails to
    secure Grails Controller:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to `myfirstapp\grails-app\views`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the `index.gsp` file, rename it to `index.gsp_backup`. I have copied
    the styles from `index.gsp_backup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `index.gsp` file, edit the file as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access the URL: `http://localhost:8080/myfirstapp/`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now click on the **Spring Login** link, you will be redirected to a login page.
    Spring Security handles the authentication mechanism, where on successful login,
    the user will be provided with a link to access the secured controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The links are provided in the `index.gsp` page which will show and hide links
    based on the logged in or logged out status. This is provided using the security
    tags in the `index.gsp` pages.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the link **Secured Controller**. You should be able to see the output
    message of the secured controller on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails logout scenario* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails Basic authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails Digest authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails multilevel authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security authentication with Groovy Grails logout scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, let's look at the logout implementation with Spring Security
    in the Grails application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we install the Spring Security plugin with Grails, the `Login Controller`
    and `Logout Controller` class will be created automatically. `Login Controller`
    will handle the authentication. The `Logout Controller` will handle the logout
    process, it will redirect the user to the common page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are taken to implement the logout action in the Groovy
    on Grails application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `index.jsp` file we add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Logout Controller` class to redirect the request to `j_spring_security`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Click on the logout link. The user is redirected the home page. `SpringSecurityUtils.securityConfig.logout.filterProcessesUrl`
    is set to `/j_spring_security_logout` by default. So when the user clicks on logout,
    they are redirected to `/j_spring_security_logout action`. This will logout the
    user from the accessible page and the user has to again login to the Grails application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails Basic authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails Digest authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails multilevel authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Groovy Grails Basic authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we shall demonstrate Security with Groovy on Grails using the
    Basic authentication mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a Grails application: `grailsbasicauthexample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the Spring Security plugin to the new application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create `User` and `Role` classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `Config.groovy` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit `BootStrap.groovy` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a controller: `GreetingsController`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are taken for demonstrating Basic authentication with Groovy
    on Grails using Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands in the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Grails create-app grailsbasicauthexample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cd grailsbasicauthexample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grails install-plugin spring-security-core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grails s2-quickstart com.packt SecuredUser SecuredRole`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit the `config.groovy` file and set the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `Bootstrap.groovy` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the command `$grails create-controller Greetings` and add annotations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access the URL: `http://localhost:8080/grailsbasicauthexample/`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Greetings Controller** link. This is a secured link which has
    been restricted using Spring Security. When the user clicks on the link, the Basic
    authentication mechanism triggers a login dialog box to be filled. The user has
    to enter username/password: `anjana`/`anjana123`, then on authentication, the
    user gets redirected to an authorized page, that is, you will be prompted with
    the **Greetings Controller** link.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On successful authentication, the user is provided access to the greetings controller.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails Digest authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails multilevel authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Groovy Grails Digest authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, let's look at the Digest authentication mechanism in which the
    password will be hashed. Let's integrate this with the Grails application and
    see how it does authentication and authorization with it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a Grails application: `grailsdigestauthexample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Spring Security plugin to the new application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create `User` and `Role` classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `Config.groovy` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `BootStrap.groovy` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a controller: `SecuredPackt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are taken for demonstrating the implementation of Digest
    authentication with Groovy on Grails using Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command prompt run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following to the `config.groovy` file and edit the `Bootstrap.groovy`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `SecuredPacktController` file and add the annotations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Grails with Spring Security plugin requires a username to be passed as a salt
    value.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do a little tweaking with the generated `SecuredUser.groovy` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `SecuredUser.groovy` file, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the logged in user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the user accesses the URL `http://localhost:8080/grailsdigestauthexample/`,
    Spring Security will prompt the user with a login dialog box asking for the username
    and password. When the user enters the username and password, Spring Security
    authenticates it and redirects the user to the secured page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The work flow of the application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/grailsdigestauthexample/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the login dialog box that pops up when trying
    to access the secured resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It works in a similar way to Basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'On successful login, you will get a logout link. The user has now got access
    to the secured controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Displaying the logged in user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails multilevel authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Groovy Grails multiple authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen single-role authentication. Let's see a demonstration of
    multiple roles. The recipe uses another plugin called `spring-security-ui`.
  prefs: []
  type: TYPE_NORMAL
- en: It has many controllers which provide user management screens for the user.
  prefs: []
  type: TYPE_NORMAL
- en: This saves developer time in coding these screens. It also provides a search
    option with autocomplete.
  prefs: []
  type: TYPE_NORMAL
- en: The `spring-security-ui` plugin also requires additional plugins to be installed
    which will be prompted at the console. There is an alternative to installing the
    plugin, that is, you can give the dependency directly in the `BuildConfig.groovy`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to do the following for achieving a multilevel authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Grails app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the `spring-security-core` plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the `spring-security-ui` plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `quickstart` command to create the `Role` and `User` domain classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the `Sample` controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `BootStrap.groovy` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `SampleController` class for roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `.gsp` files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are taken for implementing multiple authentication with
    Groovy on Grails and Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Grails workspace and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`grails create-app multilevelroledemo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cd multilevelroledemo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grails install-plugin spring-security-core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grails install-plugin spring-security-ui`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grails s2-quickstart com.packt.security SecuredUser SecuredRole`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grails create-controller Sample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit the `SampleController` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `BootStrap.groovy` file. I have added multiple roles. These roles
    and users will be created from the domain groovy files that are generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `.gsp` files. Add an `index.gsp` file inside `views/sample`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `SecurityConfig.groovy` file inside the `config` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's see how it works. Also we get to see the controllers provided by `spring-security-ui`
    and its functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have three users here with different roles. They are created in the `Bootstrap.groovy`
    file using the domain classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`anjana`/`anjana123` as `ROLE_USER`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raghu`/`raghu123` as `ROLE_ADMIN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packt`/`packt123` as `ROLE_SUPERADMIN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Access the URL: `http://localhost:8080/multilevelroledemo/`.'
  prefs: []
  type: TYPE_NORMAL
- en: You will see the Grails home page with the list of controllers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **spring.security.ui.usercontroller** link. This controller belongs
    to the `spring-security-ui` plugin. This controller provides a user management
    screen. This controller provides the search functionality for the user. It''s
    a wonderful UI, it has even got an autocomplete option with search filters. You
    can go to the link:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/multilevelroledemo/user/search`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Spring user management console where you
    can see an option to search users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at the search result, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now check the role controller provided in the `spring-security-ui` plugin.
    This controller gives an option to search for roles and also provides roles with
    user mapping. It provides an option to update the roles as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/multilevelroledemo/role/roleSearch`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also create a user, the option is available with menus. Access the
    following link to create a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/multilevelroledemo/user/create`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the sample controller that we have created for the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following URL shows the sample controller mappings with various roles.
    This is also provided with the `spring-security-ui` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/multilevelroledemo/securityInfo/mappings`'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's access the sample controller at `http://localhost:8080/multilevelroledemo/sample/index`.
  prefs: []
  type: TYPE_NORMAL
- en: It displays the three roles. Click on the links and you will be prompted to
    log in.
  prefs: []
  type: TYPE_NORMAL
- en: Log in with the appropriate username and password, and your role information
    will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The `spring-security-ui` plugin itself provides an option to log in and log
    out which is applicable throughout the application.
  prefs: []
  type: TYPE_NORMAL
- en: We can only use annotations, that is, `@Secured` annotations to authenticate
    and authorize the user for certain actions.
  prefs: []
  type: TYPE_NORMAL
- en: We can also omit the creation of users in `Bootstrap.groovy`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Groovy Grails LDAP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Groovy Grails LDAP authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's further explore the `spring-security` plugin with Groovy on Grails with
    LDAP authentication. In this recipe, I have used **Apache DS** with Apache Studio
    installed on my machine. I would be using this for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Burt Beckwith has written very nice blogs on it. You can view them at: [http://burtbeckwith.com/blog/](http://burtbeckwith.com/blog/)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a Grails app: `grailssecurityldapexamplex`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create a controller: `SampleController`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install the following plugins:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-security-ldap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `Config.groovy` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We shall display the role and user details after successful authentication.
    In this recipe we are authenticating users against the email address and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to provide the Apache DS details and port number in `Config.groovy`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am using a separate partition `sevenseas`. You can create your own domain
    by adding a separate `jdmpartition`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two kinds of roles: User and admin. The roles mapped with the users
    in Apache DS. I have created two "Organizational Units" in Apache DS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**people**: This will have users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**groups**: This will have roles with users mapped to it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am getting `username`, `role`, and `email` from the Apache DS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are taken for implementing `spring-security` with Grails
    to authenticate with LDAP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the below commands to install plug-in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`create-app grailssecurityldapexample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cd grailssecurityldapexample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grails install-plugin spring-security-core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grails install-plugin spring-security-ldap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grails create-controller Sample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s first update the `message.properties` file for clean UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Let's then configure the Apache DS properties in the `Config.groovy` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This configuration will tell Grails to authenticate the user against their
    e-mail ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Edit the `resource.groovy` file with Bean mapping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the existing `body` tag of `index,gsp` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `MyUserDetails.groovy` under `src/groovy`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Let's create a `ContextMapper` for LDAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are getting the LDAP attributes here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following command for the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the user accesses the URL: `http://localhost:8080/grailssecurityldapexample/`,
    they will see a common page with a link. In the login form enter the username
    and password. Clicking on **submit**, the Grails will submit the URL to Spring
    Security. Spring Security connects with the LDAP details provided and queries
    the LDAP with the username. On success, the user is directed to the success URL.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Access the URL: `http://localhost:8080/grailssecurityldapexample/`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Spring Login** link and enter the username: `admin@test.com`
    and password: `123456`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **Logout**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Spring Login** link and enter the username: `test@test.com` and
    password: `pass`. The Grails application submits the credentials to the Spring
    Security framework which queries the LDAP and retrieves the user details and displays
    it on the secured page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/7525OS_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Spring Security with Vaadin"), *Spring Security
    with Vaadin*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Spring Security with GWT"), *Spring Security
    with GWT*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
