- en: Chapter 6.  Building a Customer Feedback App with a Restful API and Loopback.io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As previously commented, the Node.js ecosystem has various frameworks for developing
    powerful web applications. In previous chapters, we used the most popular of all
    the Express framework.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore another framework known as loopback.io. This
    framework is heavily based on Express, however, it provides us with some more
    features to create Restful APIs very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: It has a **Command-line Interface** (**CLI**) where it is possible to create
    APIs without using code, plus it exposes an interface for manipulation of HTTP
    verbs, a kind of Restful client embedded in your application, and a few more advantages.
  prefs: []
  type: TYPE_NORMAL
- en: We also see how to consume this API on the frontend of our application using
    the React.js library.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the LoopBack framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fundamentals of LoopBack CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating models using command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with datasource and database relations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple React.js application to consume the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will build an API to store any type of product, in this
    case a classic model of motorcycle, and store comments/feedback from users of
    this motorcycle. The result will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are building](img/image_06_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of Home page
  prefs: []
  type: TYPE_NORMAL
- en: Creating the baseline structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First let''s install the LoopBack framework:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the name: chapter-06 for the directory option.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the empty-server (An empty LoopBack API, without any
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: configured models or datasources) option.
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry about the end of the output, we will explain this in the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will be the following structure of folders and files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the baseline structure](img/image_06_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of folders and files
  prefs: []
  type: TYPE_NORMAL
- en: The structure is pretty simple; almost all configurations from LoopBack are
    inside JSON files, as we can see for **component-config.json**, **config.json**,
    **datasources.json**, and all the other files inside the **server** folder.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find out more about the **slc** command line by typing: slc -help in
    your terminal window.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating models with command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this time, we have the necessary structure to start the development of our
    API.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now use the command line to create the models of our application. We
    will build two models: one model for the product/motorcycle and another for the
    user/consumer.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell inside the chapter-06 folder and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Fill in the following information for motorcycle model, as shown in the following
    screenshot:![Creating models with command line](img/image_06_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the terminal output after model motorcycle created
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the property name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the customer model. Open terminal/shell and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Fill in the information for review model, as shown in the following figure:![Creating
    models with command line](img/image_06_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the terminal output after model review created
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the property name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Even using the command line, we can check and edit the model you just created.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An important point to note here is that the property common creates a directory
    and shares it with the client and server folders. If you are using the property
    server, the code is stored in the server folder and is not shared with the client
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Editing models after creation with command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can edit the models right into the common/models/ folder. We have two files
    for each model created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first is a JSON file with all the properties, as we can see in the following
    code for review.json file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The second is a JavaScript file, as we can see in the following code for review.js
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The JavaScript file is where you can configure the application methods. You
    may notice that while creating the model, its function is empty; this is due to
    the fact that the LoopBack framework abstracts the CRUD operations, commonly found
    in other applications, by using the Express framework as we did in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a datasource through the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use a database to store the feedback of our customers, so we will create
    the datasource using the LoopBack CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell in the root project and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Fill in the options with the following information:![Creating a datasource through
    the command line](img/image_06_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the datasource terminal output
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the final option is to install the MongoDB connector. So, don''t
    forget to create the database: motorcycle-feedback on your MongoDB instance.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the book example, we are not using User and Password for the database, but
    it is strongly recommended that you use a User and a strong Password in a production
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The datasource configuration can be found at: server/datasources.json file,
    as we can see in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The Loopback API offers us the possibility to configure more on a datasource
    with different databases.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting models to datasources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to make a relationship between models and datasources, for
    this we will edit the file manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that the command line also offers this feature with slc loopback:relation:
    however, at the time of writing, there is a bug in the generator and we cannot
    use this feature at the moment. However, this does not prevent us from continuing
    with our application, since the command-line tool is not mandatory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open server/model-config.json and add the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: At this stage, it is very common to use the visual interface known as the ARC
    tool for building, deploying, and managing our Node APIs, but for the book's examples
    we will not use it, thus keeping all our attention on the code.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about the ARC at this link: [https://docs.strongloop.com/display/APIS/Using+Arc](https://docs.strongloop.com/display/APIS/Using+Arc).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the API Explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best features of the LoopBack API Explorer is to generate a localhost
    API endpoint that allows us to view and test all endpoints generated by our API.
  prefs: []
  type: TYPE_NORMAL
- en: Also, it could be worth as documentation, containing all the necessary instructions
    as HTTP verbs GET, POST, UPDATE, DELETE, sending token access if necessary, the
    data type, and JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Go to http://localhost:3000/explorer/#/. The result will be the following screenshot:![Using
    the API Explorer](img/image_06_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the API Explorer
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to see the API base URL and the API version, our project name
    and the application endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the **review** model we can see all the endpoints with the
    HTTP verb, as we can see in the following image:![Using the API Explorer](img/image_06_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the review endpoint and the HTTP verbs
  prefs: []
  type: TYPE_NORMAL
- en: 'The endpoints created are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: http://localhost:3000/api/reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: http://localhost:3000/api/motorcycles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And of course, it is possible to access them directly with your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to note that the GET and POST endpoints are the same, the difference
    is: when we want to retrieve content we use GET method and when we want to insert
    content we use POST method, and the same goes for PUT and DELETE, where we need
    to pass the ID at the end of the URL as http://localhost:3000/api/reviews/23214.'
  prefs: []
  type: TYPE_NORMAL
- en: We can also see that at the right-hand side of each endpoint is a brief description
    of its purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also has some additional and very useful endpoints, as shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the API Explorer](img/image_06_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the additional methods from review endpoint
  prefs: []
  type: TYPE_NORMAL
- en: Inserting records using endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will use the API Explorer interface to insert a record in the database.
    We will insert a product, in our case, a motorcycle:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to http://localhost:3000/explorer/#!/motorcycle/motorcycle_create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the following content inside the data value field and press the **try
    it out** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The response body will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting records using endpoint](img/image_06_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the success of POST
  prefs: []
  type: TYPE_NORMAL
- en: Note that we have a HTTP status code **200** and an ID for the newly created
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving records using endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will use the API Explorer interface to retrieve a record from the database.
    We will use the motorcycle endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to http://localhost:3000/explorer/#!/motorcycle/motorcycle_find.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **try it out** button, and we have the same as the previous screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that we are using the API explorer, but we have all the API endpoints exposed
    through http://localhost:3000/api/.
  prefs: []
  type: TYPE_NORMAL
- en: Go to http://localhost:3000/api/motorcycles and you can see the following result
    on your browser:![Retrieving records using endpoint](img/image_06_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the motorcycles endpoint
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that we are using a Chrome extension called **JSON VIEW** that you can
    get here: [https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc).'
  prefs: []
  type: TYPE_NORMAL
- en: It is very useful when dealing with large JSON files.
  prefs: []
  type: TYPE_NORMAL
- en: Adding database relations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we already have our configured endpoints, we need to create the relationship
    between the application models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our feedback will be inserted into a particular type of product, in this case,
    our motorcycle example, then each motorcycle model can receive various feedbacks.
    Let''s see how simple it is to create the relationship between the models by directly
    editing the source code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open common/models/motorcycle.json and add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Re-launch the application, open terminal window, and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Go to http://localhost:3000/explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can see that LoopBack has created new endpoints for this relationship, as
    shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding database relations](img/image_06_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the new endpoints created
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can get all feedback related to a motorcycle model using:'
  prefs: []
  type: TYPE_NORMAL
- en: http://localhost:3000/api/motorcycles/<id>/review.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also get one comment by simply adding the review ID as the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: http://localhost:3000/api/motorcycles/<id>/review/<id>.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with LoopBack boot files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Boot files are very important in applications using a LoopBack framework. These
    files are started when the application is executed, and can perform various kinds
    of task.
  prefs: []
  type: TYPE_NORMAL
- en: The application already has all the endpoints that it needs. So, let's see how
    to create a boot file and use another feature from the LoopBack framework to migrate
    our models to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will see how to use the automigrate function to insert
    some content in the database at the time we start the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read more about the LoopBack API at [http://apidocs.strongloop.com/](http://apidocs.strongloop.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside server/boot, create a new file called create-sample-models.js and place
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The previous code is pretty simple; we just created objects using the objects
    properties from models. Now, every time the application starts, we send one motorcycle
    record and three motorcycle feedbacks to the database.
  prefs: []
  type: TYPE_NORMAL
- en: This step completes our API. Despite being a very trivial example, we explored
    several powerful features of the LoopBack framework.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we can use the ARC editor. As mentioned, it is possible to create models
    and migrations using only the graphical interface. It is also very useful for
    other purposes, such as deploying and other things.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will explore how to consume this API. We have seen that the API is contained
    in: localhost:3000/api/, and our root path only has some information regarding
    the API, as we can see by visiting localhost:3000:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let's change the root.js and middleware.json files and use some client side
    libraries to interact with the API.
  prefs: []
  type: TYPE_NORMAL
- en: Adding HTML content to client side
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Change the name of the root.js file inside server/boot to _root.js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open middleware.json from server/ folder and add the following highlighted
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Create a new file called index.html and save it in the client folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we configure the application to map the client folder and make it public
    access. This is very similar to when we set the static route for the Express framework.
    There are other ways we can set routes to application, but for this example let's
    keep it that way.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Bootstrap framework and React library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's add the dependencies to our HTML file; we will use Bootstrap and React.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the highlighted files are serving from a **Content Delivery Network**
    (**CDN**), but if you want you can store these files inside the client folder
    or subdirectories for CSS and JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the newly created file index.html and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, on the previous code we added two files in a script text/babel
    type. These files will be our application components built with the React.js library.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about the React.js here: [https://facebook.github.io/react/](https://facebook.github.io/react/).'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the client folder, create a new folder called images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can copy and paste the motorcycle sample image to this folder. Also, you
    can download all the example code for the book at the Packt Publishing website
    and at the official GitHub repository of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating React components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar jQuery widget and AgularJS directives there is React.js, which is  very
    useful library for creating interface components. However, it is not a complete
    framework like AngularJS or Ember.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way to think about React.js is by thinking about interface components:
    everything is a component and a component may be composed of one or more components.'
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating React components](img/image_06_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot simulating React.js components
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the components one by one for a better understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the client folder, create a new folder called js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the js folder, create a new file called review.js and add the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This is the list-item component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add the ReviewBox. Add the following code right after the previous
    one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This is the ReviewBox component and its two received components; one is the
    ReviewList component, and the second one is the ReviewForm component. Note that
    we are using the $.get() function from jQuery to get the reviews from the localhost:3000/api/reviews,
    using the GET method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we have a function called handleReviewSubmit() for dealing with the form
    submit action to the same endpoint: localhost:3000/api/reviews, using the POST
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the getInitialState() function to set an array of data, which waits
    for a promise function on a componentDidMount() function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add the ReviewList component to reviews.js. Add the following code
    right after the previous one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we add the ReviewForm component. Add the following code right after the
    previous one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we just need to create a React method to render all the contents.
    Add the following code right after the previous one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This previous piece of code will render the ReviewBox component inside: <div
    id="content"></div>; making a brief analogy of CSS classes, we have a component
    structure like this:'
  prefs: []
  type: TYPE_NORMAL
- en: ReviewBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReviewList
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReviewForm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, the render() method of the ReviewBox component renders two components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we do the same for the motorcycle component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called motorcycle.js inside the common/js folder and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the MotorcycleBox component. Add the following code right after
    the previous one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a motorcycleList component. Add the following code right after
    the previous one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note that we create a list to render all the motorcycle models from our database.
    This is recommended if you want to add or render more items in this collection.
    For our example, we have only one.
  prefs: []
  type: TYPE_NORMAL
- en: The last method is the render() function to render the MotorcycleBox component
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line, right after the previous one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This render method tells to render the MotorcycleBox component inside the HTML
    motorcycle div tag: <div id="motorcycle"></div>.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating new feedbacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it is time to create new feedbacks using the application we built:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to http://localhost:3000/ and fill in the form with the following data and
    press the **submit** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name: **John Doe**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'E-mail: **john@doe.com**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Feedback: **Great red and white classic bike!**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result is shown instantly on the screen, as we can see in the following
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating new feedbacks](img/image_06_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the newly created feedback
  prefs: []
  type: TYPE_NORMAL
- en: Simple checking endpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's make a simple checking on our API. The preceding image shows four feedbacks
    for a particular model of motorcycle; we can see that counting the comments appear
    in the image, but our API has an endpoint that shows this data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to http://localhost:3000/api/reviews/count and we can see the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Disable remote LoopBack endpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, LoopBack creates a number of additional endpoints than the traditional
    CRUD operations. We saw this earlier, including the previous example. But sometimes,
    we don't need to expose all the endpoints through the API explorer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can reduce the number of endpoints using just a few lines
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open common/models/review.js and add the following highlighted lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Re-launch the application, open your terminal/shell, and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Go to http://localhost:3000/explorer/ and click on **review** model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The result will be as in the following image, with only the CRUD endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Disable remote LoopBack endpoints](img/image_06_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the review endpoints
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about hiding and showing endpoints at: [https://docs.strongloop.com/display/public/LB/Exposing+models+over+REST#ExposingmodelsoverREST-Hidingendpointsforrelatedmodels](https://docs.strongloop.com/display/public/LB/Exposing+models+over+REST#ExposingmodelsoverREST-Hidingendpointsforrelatedmodels).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we discussed the creation of robust APIs using a LoopBack framework,
    and approached some very important points regarding the web application as a database,
    relationships between models, and datasources.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw some similarities between Express and Loopback and learned how to
    use the web interface of API explorer.
  prefs: []
  type: TYPE_NORMAL
- en: We built an interactive interface using the React.js library and approached
    the main concept of React.js, which is the creation of components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to build a real-time application using
    some very useful resources from Node.js.
  prefs: []
  type: TYPE_NORMAL
