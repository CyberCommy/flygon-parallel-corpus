- en: Getting Started with Vue.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vue.js入门
- en: 'In this chapter the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下内容：
- en: Writing Hello World with Vue.js
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue.js编写Hello World
- en: Writing lists
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写列表
- en: Creating a dynamic and animated list
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个动态和动画列表
- en: Reacting to events such as clicks and keystrokes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应事件，如点击和按键
- en: Choosing a development environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择开发环境
- en: Formatting your text with filters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用过滤器格式化文本
- en: Debugging your application with mustaches (for example, a JSON filter)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mustaches调试应用程序（例如JSON过滤器）
- en: X-raying your application with Vue developer tools
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue开发者工具分析应用程序
- en: Upgrading to Vue.js 2
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级到Vue.js 2
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Vue is a very powerful framework but one of its strengths is that it is very
    lightweight and easy to pick up. As a matter of fact, in the first recipe you
    will build a simple but functioning program in minutes, with no setup required.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Vue是一个非常强大的框架，但其优势之一是它非常轻量级且容易上手。事实上，在第一个示例中，您将在几分钟内构建一个简单但功能齐全的程序，无需任何设置即可完成。
- en: In this chapter, you will learn lists which will help you create web pages where
    an element is repeated (like a catalog). Furthermore, you will build an interactive
    page with event listeners.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何创建重复元素的网页列表（如目录）。此外，您将构建一个带有事件监听器的交互式页面。
- en: Some development environments are presented so you can choose the one that suits
    you better; you will use some debugging tricks that will give you a head start
    when developing your own code and better insight to kill bugs in your apps.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您更好地选择开发环境，我们还介绍了一些开发环境。您将使用一些调试技巧来快速开发自己的代码，并更好地理解如何解决应用程序中的错误。
- en: Please note that, at the time of writing, ES5 is the most well supported standard
    for JavaScript in browsers. In this chapter, I will use ES5 so you can follow
    along even if your browser does not support the newer ES6\. Remember though that
    in following chapters ES6 will be used. By now, Chrome is compatible with most
    ES6 important constructs, but in general you should use **Babel** to make your
    app compatible with older browsers. Refer to the recipe *How to use Babel to compile
    from ES6* in [Chapter 8](text00390.html) , *Organize + Automate + Deploy = Webpack*
    , when you are ready to use Babel.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在撰写本文时，ES5是浏览器中JavaScript最好支持的标准。在这一章中，我将使用ES5，这样即使您的浏览器不支持更新的ES6，您也可以跟着学习。请记住，在后续章节中将使用ES6。目前，Chrome与大多数ES6的重要构造兼容，但通常您应该使用**Babel**使您的应用程序兼容旧版浏览器。当您准备好使用Babel时，请参考[第8章](text00390.html)中的配方*如何使用Babel编译ES6*，以及*组织
    + 自动化 + 部署 = Webpack*。
- en: Writing Hello World with Vue.js
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用Vue.js编写Hello World
- en: Let's create the simplest possible program in Vue.js, the obligatory Hello World
    program. The objective here is to get our feet wet with how Vue manipulates your
    webpage and how data binding works.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Vue.js创建最简单的程序，即必备的Hello World程序。我们的目标是让您熟悉Vue如何操作您的网页以及数据绑定是如何工作的。
- en: Getting Ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete this introductory recipe, we will only need the browser. That is,
    we will use JSFiddle to write our code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个入门示例，我们只需要使用浏览器。也就是说，我们将使用JSFiddle来编写代码：
- en: '![](img/Image00004.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: 'If you have never used JSFiddle, don''t worry; you are about to become an expert
    frontend developer and using JSFiddle will become a handy tool in your pocket:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从未使用过JSFiddle，请不要担心；您即将成为一名专业的前端开发人员，使用JSFiddle将成为您口袋中的有用工具：
- en: 'Head your browser to [https://jsfiddle.net](https://jsfiddle.net) :'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的浏览器导航到[https://jsfiddle.net](https://jsfiddle.net)：
- en: You will be presented with a blank page divided into quadrants. The bottom-left
    is where we will write our JavaScript code. Going clockwise, we have an HTML section,
    a CSS section, and finally our preview of the resulting page.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个空白页面分为四个象限。左下方是我们将编写JavaScript代码的地方。按顺时针方向，我们有一个HTML部分，一个CSS部分，最后是我们预览的结果页面。
- en: Before beginning, we should tell JSFiddle that we want to use the Vue library.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 开始之前，我们应该告诉JSFiddle我们想要使用Vue库。
- en: In the top-right part of the JavaScript quadrant, press the cogwheel and select
    Vue 2.2.1 from the list (you should find more than one version, "edge" refers
    to the latest version and at the time of writing corresponds to Vue 2).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JavaScript象限的右上角，点击齿轮图标并从列表中选择Vue 2.2.1（你会找到多个版本，“edge”代表最新版本，在撰写时对应的是Vue 2）。
- en: We are now ready to write our first Vue program.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好编写我们的第一个Vue程序了。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具体步骤如下：
- en: 'In the JavaScript section, write:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JavaScript部分写入：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
- en: 'In the HTML quadrant, we create the `<div>` :'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTML象限中，创建`<div>`：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
- en: 'Click the Run button in the upper-left corner; we see the page greeting us
    with Hello world :'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左上角的运行按钮，我们可以看到页面显示Hello world：
- en: '![](img/Image00005.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理如下：
- en: '`new Vue({el:''#app''})` will instantiate a new Vue instance. It accepts an
    options object as a parameter. This object is central in Vue, and defines and
    controls data and behavior. It contains all the information needed to create Vue
    instances and components. In our case, we only specified the `el` option which
    accepts a selector or an element as an argument. The `#app`  parameter is a selector
    that will return the element in the page with `app` as the identifier. For example,
    in a page like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`new Vue({el:''#app''})`将实例化一个新的Vue实例。它接受一个选项对象作为参数。这个对象在Vue中是核心的，它定义和控制数据和行为。它包含了创建Vue实例和组件所需的所有信息。在我们的例子中，我们只指定了`el`选项，它接受一个选择器或一个元素作为参数。`#app`参数是一个选择器，将返回页面中以`app`作为标识符的元素。例如，在这样的页面中：'
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
- en: Everything that we will write inside the `<div>`  with the ID as `app` will
    be under the scope of Vue.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在具有ID为`app`的`<div>`中编写的所有内容都将在Vue的范围之内。
- en: Now, JSFiddle takes everything we write in the HTML quadrant and wraps it in
    body tags. This means that if we just need to write the `<div>` in the HTML quadrant,
    JSFiddle will take care of wrapping it in the body tags.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，JSFiddle会将我们在HTML象限中编写的所有内容包装在body标签中。这意味着，如果我们只需要在HTML象限中写入`<div>`，JSFiddle会负责将其包装在body标签中。
- en: It's also important to note that placing the `#app`  on the `body` or `html`
    tag will throw an error, as Vue advises us to mount our apps on normal elements,
    and its the same thing goes for selecting the `body` in the `el` option.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: The mustaches (or handlebars) are a way to tell Vue to take everything inside
    them and parse it as code. The quotes are a normal way to declare a literal string
    in JavaScript, so Vue just returns the string concatenation of `hello`  and `world`
    . Nothing fancy, we just concatenated two strings and displayed the result.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can leverage that to do something more interesting. If we were aliens and
    we wanted to greet more than one world at a time, we could write:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
- en: 'We may lose track of how many worlds we conquer. No problem, we can do math
    inside the mustaches. Also, let''s put `Hello`  and `worlds`  outside brackets:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
- en: 'Having the number of worlds as raw numbers inside the mustaches is just messy.
    We are going to use data binding to put it inside a named variable inside our
    instance:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
- en: This is how tidy applications are done. Now, every time we conquer a planet,
    we have to edit only the `countWorlds` variable. In turn, every time we modify
    this variable, the HTML will be automatically updated.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you completed your first step into the Vue world and are now
    able to build simple interactive applications with reactive data-binding and string
    interpolation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Writing lists
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The desire to produce lists almost seems to be an innate part of human nature.
    There is a deeply satisfying feeling that one obtains by watching a well ordered
    list marching down the computer screen.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: With Vue, we are given the tools to make lists of any kind with a stunning appearance
    and maximum ease.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe we are going to use basic data-binding, if you follow the very
    first recipe you are already familiar with it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to build lists in a couple of different ways: with a range of
    numbers, with an array, and finally with an object.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Range of numbers
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start off with lists, set up your JSFiddle like in the preceding recipe,
    adding Vue.js as a framework. Select Vue 2.2.1 (or Vue (edge) ):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'In the JavaScript section, write:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
- en: 'And in the HTML write:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
- en: This will result in a list with *Hello!*  written four times. In a few seconds
    your first list is complete, nice job!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'We can write a countdown with this technique--in the HTML, replace the content
    of the `<div>` with the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
- en: Arrays
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the HTML, to achieve the same result, edit the list to reflect the following:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
- en: Although this list is identical to the previous one, we shouldn't put literal
    arrays in HTML markup.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re better off with a variable that contains the array. Edit the preceding code
    to match the following:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
- en: 'Then put the array countdown in the JavaScript:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
- en: '![](img/Image00006.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: Arrays with index notation
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When enumerating an array, we also have access to the index, represented by
    the variable `i`  in the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML becomes:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
- en: 'In the code part, write:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
- en: '![](img/Image00007.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: Objects
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The preceding example can be refactored to match animal names and their sounds
    so that an accidental misalignment of the index will not affect our list.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML becomes:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
- en: 'And we need to create the  `animals`  object in the JavaScript:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The workings of lists are quite simple; here is a little more explanation on
    the syntax.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Range of numbers
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The variable `n` is in scope inside the `<li>` tag. To prove it to yourself,
    you can quickly build a countdown list as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
- en: We write `11` instead of `10` because enumeration in Vue is 1-indexed; this
    means that `n` in `10` will start to count from `1` , not from `0` like someone
    might expect, and go up to `10` . If we want our countdown to start from `10`
    , then we have to put `11` . The last number will be `10` , so we'll have `1`
    as the last number before the missile is launched.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: What `v-for="n in 10"` does is call **enumeration** ; specifically we are enumerating
    a range of numbers (1 to 10).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vue allows us to enumerate arrays too. The general syntax is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
- en: As seen, the index and parenthesis can be omitted if all we want are the array
    elements.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: This form of enumeration is guaranteed to be ordered. In other words, the ordered
    sequence of elements in the array will be the same you will see on the screen;
    this is not the case when enumerating objects.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Objects
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The syntax is `v-for="(value, property)"` and if you want you can also squeeze
    in the index with `v-for="(value, property, index)"` . The latter is not recommended
    though since, as already said, the order in which properties are enumerated is
    not fixed. In practice, in most browsers, the order is the same as the insertion
    order but this is not guaranteed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dynamic and animated list
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Vue most data is reactive. In practice this means that if something is going
    to change in our view-model, we will see the results immediately. This is what
    lets you concentrate on the app itself, leaving aside all the drawing logic. In
    this recipe, we are also going to acknowledge some limitations of this system.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this recipe, you should know how to use basic data-binding (introduced
    in the very first recipe) and how to create lists (second recipe).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous recipe we built a list for a countdown for a missile launch:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
- en: 'Wouldn''t it be great if it was animated? We can tweak the JavaScript to add
    numbers to countdown as seconds pass:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Copy the preceding code in the HTML and JavaScript sectors of JSFiddle, with
    the exception that we will fill the countdown ourselves, so set it to an empty
    array.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get hold of the countdown variable we must pass the variable through the
    Vue instance itself.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'Assign the Vue instance to a variable for later reference:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
- en: This way we can use `vm` to access the Vue instance.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize the countdown from 10:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
- en: 'Set up a function that repeatedly adds the number of remaining seconds to the
    now empty `countdown` array:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we are going to do is get a reference of the `countdown` array and fill
    it with decrementing numbers with the help of `setInterval` .
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: We are accessing `countdown` through the `vm` variable we set in the line `vm.countdown.push(counter--)`
    , so our list will get updated every time we add a new number to the array.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'This code is very simple, just note that we must use the `push` function to
    add elements to the array. Adding elements with the square brackets notation will
    not work:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
- en: The array will get updated, but this way of assignment will skip Vue's reactive
    system due to how JavaScript is implemented.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running the code now will add countdown numbers one at a time; great, but what
    about the final element `launch missile` ? We want that to appear only at the
    end.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that here is a little hack we can do directly in HTML:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
- en: This solution is not the best we can do; learn more in the recipe on `v-show`
    .
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'We just learned that we cannot add elements to a reactive array with the brackets
    notation if we want it to update in the view. This is true also for the modification
    of elements using brackets and for manually changing the length of the array:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
- en: 'You can overcome this limitation using the splice method:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
- en: Reacting to events such as clicks and keystrokes
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fundamental part of every application is the interaction with the user. Vue
    has shorthand to intercept most user events and connect them to relevant actions.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To successfully complete this recipe, you should know how to create a list.
    If you don't, check out recipe *Filtering a list with a computed property* in
    [Chapter 2](text00082.html) , *Basic Vue.js Features* .
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following bit of code shows how to react to a `click`  event:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the following HTML:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
- en: 'As for the JavaScript, write the following:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
- en: Run the code! An event listener will be installed on the button.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button and you should see a popup that says *Toasted!*
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running the preceding code will install an event handler on the button. The
    syntax is `v-on:DOMevent="methodEventHandler"` . The handler must be a method,
    that is, a function in the methods option. In the preceding example,  `toast`
    is the handler.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Two-way data binding
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `v-on`  attribute will have you covered in most cases, especially if the
    event comes from the element. On the other hand, it may sometimes be too verbose
    for some tasks.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we had a textbox and we wanted to update a variable with the
    content of the textbox and ensure that the textbox always has an updated value
    of the variable (which is called **two-way data binding** ), we would have to
    write a couple of handlers.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, this operation is carried out by the `v-model` attribute, as the following
    code shows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
- en: Play a little with this application and notice how no handler is necessary to
    keep the textbox in sync. Every time `toastedBreads` is updated, the text will
    update too; conversely, every time you write a number, the quantity gets updated
    as well.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you followed the first recipe in this chapter, you''ll remember how we greeted
    a variable number of worlds; we can make the experience more interactive. Let''s
    build a list of planets we''d like to greet:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
- en: 'We want to be able to keep track of newly conquered worlds and delete the ones
    we destroy. This means adding and removing elements from the list. Consider the
    following HTML:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
- en: 'Here the `@`  symbol is the shorthand for `v-on` : Let''s examine the modifications:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: We added a button to remove the planet (we needed to write out the index in
    the `v-for` )
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We placed a textbox that is bound to the data variable `newWorld`
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We placed a corresponding button that adds what's inside the textbox to the
    list
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running this code will work. But if you look at the console, you will see a
    warning when you update the text field:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
- en: 'This is because we never declared `newWorld` in our Vue instance, but that''s
    easy to fix:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
- en: '![](img/Image00008.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: Choosing a development environment
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to explore some different styles of developing, from the naive
    JSFiddle approach, to a more robust approach with WebStorm support. Since we want
    to use libraries to add new functionalities to our software, I'll provide you
    with a guide to add them regardless of whichever method of development you choose.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I will start from the simplest method and then present you some more involved
    methods for bigger projects.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Just the browser
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a series of websites such as JSFiddle that let you write a Vue application
    right from the browser (CodePen and JS Bin among others) and those are very good
    to test new functionalities and try recipes in this book. On the other hand, they
    are too limited in terms of code organization to develop anything more. In first
    recipe of this chapter, this style of development is used so please refer to that
    to learn how to develop with only the browser. In general, you should take what
    you learn by doing the recipes this way and transfer it into more structured projects,
    depending on what you are developing.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Adding dependencies with just the browser
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time I mention an external library, you will search for the relative `.js`
    file on the Internet, preferably distributed by a CDN, and add it to the left
    menu of JSFiddle. Let's try with moment.js .
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Open a new JSFiddle (point your browser to [https://jsfiddle.net/](https://jsfiddle.net/)
    ).
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In another tab, search for `momentjs CDN`  in your favorite search engine.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first result should lead you to a CDN website with a list of links; you
    should eventually find something like `https://somecdn.com/moment.js/X.X.X/moment.js`
    where the *X* represents the version number.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the link you found and go back to JSFiddle.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the External Resources  section in the left sidebar, paste your link and
    press *Enter* .
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For many libraries this is sufficient; some libraries do not support this and
    you will have to include them in your JSFiddle in some other way.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: TextEditor
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The rawest way to be up and running is with a text editor and a browser. This
    is totally legitimate for simple, self contained components.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'There are plenty of text editors from which to choose these days. One I like
    to use is Microsoft Visual Studio Code ( [https://github.com/Microsoft/vscode](https://github.com/Microsoft/vscode)
    ). There is little difference if you use another, is just so happens that Code
    has a plugin for Vue:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called  `myapp.html` , in which we write:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
- en: Open the file you just created in a browser.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vue gets downloaded from [https://cdnjs.com/](https://cdnjs.com/)  and the text
    `hello world` should appear (without mustaches--if you see the mustaches, chances
    are something's gone wrong so check the console for errors).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach resembles the JSFiddle one: we have an HTML part, a JavaScript
    part, and a CSS part on the top. We are just bringing everything under our control.
    Also, this way we can use Vue developer tools (check out the recipe *X-raying
    your application with Vue developer tools* for an introduction of those).'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Adding dependencies with a TextEditor
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding external libraries in this configuration means simply adding another
    `<script>` entry to your file and setting the source attribute to the respective
    link. If we wanted to add `moment.js` , we look for the library in the same way
    as explained before and we add the following snippet to our page:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
- en: Please note that you have to paste the link you found instead of the fake one
    mentioned in the preceding snippet.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Node package manager (npm)
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The canonical way to work with Vue projects, and the one officially supported
    by the Vue community, involves the use of npm and in particular an npm package
    named `vue-cli` .
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: If you are not familiar with npm , put it on your list of things to do, especially
    if you plan to develop with JavaScript extensively.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'Briefly stated, npm is a tool to organize and share your code, beyond using
    other people''s code in your projects. More formally, it''s a package manager
    for everything JavaScript. We will use some basic commands now and some more advanced
    later in the book, but you are invited to learn more by yourself:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Install npm. As it's bundled in Node.js, the best route to follow is to install
    Node.js directly. You will find instructions at [https://nodejs.org/en/download/](https://github.com/Microsoft/vscode)
    .
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you install npm, open a command line and type `npm install -g vue-cli`
    ; this will install `vue-cli` . The `-g` options stands for globally and it means
    that wherever you are, you can type `vue` and it will run the program.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory that will act as a workspace. We will put all of our
    projects inside it.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `vue list` ; we get all the available templates from the official Vue template
    repository--other templates can be used from other sources.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `simple` template will create a page similar to what we have done a few
    paragraphs before. I invite you to run `vue init simple` and check it out; spot
    the difference between that and what we have done. What we are doing now instead
    is a step further. We are going to use a more involved template that includes
    a bundler. There is one for `webpack` and `browserify` ; we are going with the
    first.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are not familiar with `webpack` or `browserify` they are programs to
    control the build process of JavaScript programs from sources and assets (images,
    css files, and others) to customized bundles. For example, for a single `.js`
    file:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Type `vue init webpack-simple` and the program will ask you some questions on
    how you would like your project to be. If you don't know how to answer, press
    *Enter* to go with the default.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We could have chosen in an equivalent way the `browserify-simple` template;
    those are two different libraries to achieve the same results.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Once the scaffolding is complete, type `npm install` . This will take care of
    downloading and installing all the npm packages we need to write our Vue app.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, you'll have a functioning demo application already in place.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Type `npm run dev` to run your application. Further instruction, will appear
    on the screen and will tell you to visit a specific web address, but there is
    a good chance that your browser will be opened automatically.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Point the browser at the specified address. You should be able to see the demo
    application right away.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exploring the source files created by `vue-cli` , you will find two notable
    files. The first file is the entry point for your application, `src/main.js` .
    It will contain something like the following:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
- en: This code was loaded in the `index.html` page you just saw. It just tells the
    main Vue instance to load and render the `App` component in an element selected
    by `#app`  (the element with the attribute `id="app"` , a `<div>` in our case).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: The `App.vue` file you will find is a self contained way you can write Vue components.
    You will find more on components in other recipes, but for now think of it as
    a way you can further divide your application to keep it more ordered.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is different from what you''ll find in the official template
    but it summarizes the general structure:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
- en: You can see that having code divided into HTML, JavaScript, and CSS is a recurring
    pattern. In this file we can see something similar to what we saw in JSFiddle
    in the first recipes.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: In the `<template>` tag we put our HTML, in the `<script>` tag JavaScript code
    and we use the `<style>` tag to add some styling to our application.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: After running `npm run dev` , you can try to edit the `msg` variable in this
    file; the webpage will reload the component automatically after saving your modifications.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Adding dependencies with npm
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add external libraries in this configuration you simply type `npm install`
    followed by the name of the library. Then in your code you use it with something
    along the lines of the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
- en: 'We can import `moment.js` with the following command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
- en: 'Then in our JavaScript we add the following lines:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
- en: IDE
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have a very big project, chances are you are already using tools such
    as IntelliJ or Webstorm. In this case, I suggest you stick to the embedded console
    for most of the work and only use features such as syntax highlighting and code
    completion. This is because developer tools are still immature for Vue and you
    will probably spend more time configuring your tools than actually programming:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Webstorm and create a new Empty Project :'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image00009.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
- en: 'In the bottom-left corner you should be able to open up the console or Terminal
    :'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image00010.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
- en: From this prompt you should be able to work with npm exactly as explained in
    the previous paragraph. Read it if you haven't yet. In our case, we are going
    to suppose Node is installed and vue-cli is also installed.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `vue init simple`  and answer the questions; you should end up with something
    similar to this:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image00011.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: Open the `index.html`  file by double-clicking it.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hover over the top-right corner of the `index.html` file, and you should see
    the browser icons; click one:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image00012.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: Your sample application is up and running!
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image00013.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: Wrap up
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can see more of how this works in dedicated recipes. Here I wanted you to
    have an overview of the possibilities for developing with Vue. For quick prototypes,
    you can definitely go with JSFiddle. When you need your own environment or you
    need to use Vue developer tools but not much more, using just a text editor can
    be acceptable. For the majority of serious projects though, you should familiarize
    yourself with npm , webpack, or Browserify and use vue-cli to scaffold your new
    projects.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Formatting your text with filters
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first version of Vue came bundled with some text filters that helped format
    text and solve some common problems.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'In this new version, there are no built-in filters (except the equivalent of
    the JSON  filter covered in the next recipe). I think this is because it''s very
    easy to write your own filter and also very easy to find online libraries that
    do a much better job in specialized situations. Finally, filters have somewhat
    changed purpose: they are more for post-processing now and less for actual filtering
    and sorting arrays.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate how easy it is to create a filter, we will recreate a filter
    of the old version of Vue: capitalize .'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don't need any particular knowledge to complete this recipe.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes we have some strings floating around in our variables like labels.
    When we put them in the middle of a sentence they work fine, but on the other
    hand they don't look very good at the beginning of a sentence or bullet point.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to write a filter that will capitalize whatever string we put into
    it. If, for example, we want the string `hello world`  to start with a capital
    `H` , we''d like to be able to write:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
- en: 'If we try to run this as HTML in a Vue app, it will complain `[Vue warn]: Failed
    to resolve filter: capitalize` .'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the filter and add it to Vue''s internal list of filters:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the following JavaScript to register a filter and instantiate Vue:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
- en: 'In the HTML section, write:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
- en: Run your code and notice how the text now reads Hello world .
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The pipe sign indicates that the following is the name of a filter; in our case
    `capitalize` is not in Vue's list of filters, hence the warning. Vue will print
    the string as is.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'What Vue will do before even starting is register our filter (with `Vue.filter`
    ) in its asset library. Vue has an the internal filters object and will create
    a new entry: `capitalize` . Every time it sees the pipe symbol it will look for
    a corresponding filter. Remember to write it before the actual instantiation of
    a Vue instance because otherwise Vue will not find it.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'The working of the filter is very basic JavaScript, in fact, a better way to
    write this filter with ES6 would be:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
- en: If you are not familiar with ES6, here is a brief explanation. The second line
    is called a **destructuring** assignment of string; in particular we are interpreting
    string as an array of characters, separating the first character into first and
    putting all the other characters in `tail` . This is a faster way to assign different
    parts of an array to multiple variables. The other thing that may seems mysterious
    is that `join('')` . Since `tail` is now an array of characters, we need some
    means to re-join the single letters into a compact string. The argument of `join`
    represents a separator between the single characters. We don't want any, so we
    pass an empty string.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will find more recipe for filters and cover other real
    use cases.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Debugging your application with mustaches (for example, a JSON filter)
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we had a complete overview of filters and we said that
    Vue comes with no built-in filters except for an equivalent of the JSON  filter.
    This filter was very useful and, while its considered not really orthodox to debug
    with it, sometimes it just makes your life easier. Now we have it straight away without
    even writing it.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To see it in action, we can simply display the value of an object in our Vue
    instance.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the following JavaScript:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
- en: This just creates a `cat` object in our code with a string inside.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the following HTML:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
- en: Run your app and notice how the `cat` object is outputted in all it's beauty,
    just like `JSON.stringify` .
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cat will display the content of the `cat` object. In the old Vue, to get this
    result we had to write `{{ cat | json }}` .
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: A thing to be wary of is loops in our objects. If our object contains a circular
    reference, and you wrap it in mustaches, this will not work. These objects are
    more common than you would think. HTML elements, for example, are JavaScript objects
    that contain references to a parent node; the parent node in turn contains a reference
    to its children. Any such tree structure would cause the mustaches to print an
    infinite description of the object. When you actually do it, Vue simply throws
    an error and refuses to work. The error you would see in the console is actually
    thrown by the internal method used to print the  `JSON.stringify`  object.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: A practical situation in which using mustaches could be useful is when the same
    value is changed in several places, or when you want to quickly check the content
    of a variable. Mustaches can be useful even for demonstrational purposes, as it's
    clear from the usage you will see in this book.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: X-raying your application with Vue developer tools
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using mustaches is a quick way to display the content of an object. However
    it has some limitations; one of them outlined in the previous recipe is that,
    out of the box, it breaks when dealing with objects that contain circular references.
    A tool that doesn't present this limitation when inspecting internal variables
    and that sports many more debugging features is Vue developer tools. There's a
    Chrome extension that will help you at every step of development, visualizing
    the state of your components, where they are in the page, and more. It's also
    deeply integrated with **Vuex** (covered in later recipes) and has a time machine
    feature that lets you rewind the event flow directly from the browser.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install it, you just have to download the extension from the Chrome Web
    Store in the extensions category. Just look for V ue.js devtools  and you''ll
    find it right away, press the **ADD TO CHROME**  button, and you''re set to go:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00014.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
- en: Unfortunately you won't be able to use it in some configurations; particularly
    it currently doesn't seem to work in `iframe` environments and JSFiddle is one
    of them, so to see it you have to at least use the *one page approach*  outlined
    in the *Choosing a development environment* recipe.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: .
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Access the Developer Tools of Chrome (Usually with *c* *md* + *opt* + *I* or
    *Ctrl* + *Shift* + *I* ) and you will see a new tab at the end that says Vue .
    Clicking it will bring forth the developer tools.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To make it work for pages opened via the `file://` protocol, you need to check
    Allow access to file URLs  for this extension in Chrome's extension management
    panel.![](img/Image00015.jpg)
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: You will be presented with a hierarchical tree of components laid out in your
    page and by selecting them you will be able to see all the variables in depth
    and in real time.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the various objects in the three to see details:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image00016.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
- en: 'Also, you will see a useful button: the inspect DOM  button (the eye) will
    scroll the page to where the element is and will show you the DOM representation
    in the Chrome developer tools. Furthermore, when you click on a component (root
    in the illustration) you will have a variable like `$vm0` available to be used
    in the console. For example, you can execute methods or inspect variables.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the root component and write the following in the console to explore
    the  `$vm0.docsUrl`  property:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Image00017.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
- en: Upgrading to Vue.js 2
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to upgrade your Vue app to version 2, most of your code is good
    to go. There are a couple of features though that need some modifications. Some
    are simple renaming, some are more involved.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To give your migration a head start; Chris Fitz (a member of the Vue core team)
    created a little helper app that will scan your code and guide you in the migration:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Vue Migration Helper with the following npm command:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
- en: Navigate to your app folder.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the program with the following command:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
- en: All the lines in which a change is necessary will be highlighted. Once you are
    finished updating, or if you still have doubts, you should take a look at the
    official documentation migration page at [https://rc.vuejs.org/guide/migration.html](https://rc.vuejs.org/guide/migration.html)
    .
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reading through the documentation will help you understand the critical points
    that need to be updated. Here I will provide you a rationale for some of the most
    challenging modifications.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of $broadcast, $dispatch, and the events option
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both methods `$broadcast`  and `$dispatch`  are now merged in the `$emit` method
    with the same syntax as the old version. Unfortunately, replacing every instance
    of `$broadcast` and `$dispatch` with `$emit` is not guaranteed to always work
    because the pattern used to manage events is a little different now.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: In Vue 1, you had events follow a path either downward (for `$broadcast` ) or
    upward (for `$dispatch` ), and horizontally (for `$emit` ) through the hierarchical
    tree.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: To be honest, I never liked having two (three if you count the old `$emit` )
    methods for emitting events. It was confusing even in the smallest contexts because
    you had to ask yourself *is this event for parents or children?*  Most of the
    time it was not that important of a distinction, you just wanted your method to
    fire. But there is no such thing as a free lunch; we have to add a moving part
    to our system to make everything work in the new paradigm.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Now all events should pass through one or more central hubs. The role of this
    central hubs can be taken by a Vue instance since they implement the necessary
    interface.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: 'When emitting an event consumed by `v-on` , you''re good to go by replacing
    `$broadcast` with `$emit` , since the event doesn''t have to travel far. On the
    other hand, if you are defining an interface for a component in terms of events,
    you will have to say goodbye to the events option since it will not work anymore.
    This is the direct consequence of having all the events passing through a hub--the
    events option wouldn''t know where to register all the events. This is the trade
    off for having a single emitting method: it fires in every direction but only
    in a precise piping.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say you have a dedicated empty Vue instance that will act as an event
    hub:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
- en: 'If you are writing a teapot component and you want to register the brew event,
    you will write in the created hook something like the following:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
- en: 'And with the HTML:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
- en: Every time the `brew` event is emitted with `eventBus.$emit('brew')` , the console
    will output a message.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this example is not very scalable. You cannot register a lot
    of events in the created hook and then expect to easily keep track of what they
    do and in which hub they are registered. For these more involved scenarios, the
    suggested way to proceed is to use Vuex, introduced in later recipes.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Any component you'll write can act as an event hub. You also have the API methods
    `$off` which deletes listeners, and `$once` , which listens for an event but only
    once.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of array filters
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you had a lot of filtered `v-for` lists, I have bad news for you. Even if
    in the wild the most common use for filters was with `v-for` , the community chose
    to remove this feature. The reason is mainly because having a lot of filters,
    often piped together, was hard to reason about and thus to maintain.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: The new recommended way to filter a list is with a computed property. Luckily
    for you, we have an entire recipe on how to do that. See the recipe *Filtering
    a list with a computed property* in the next chapter.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of Vue.config.delimiters
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom delimiters are not at the component level. If you want, you can have
    two different components using different delimiters.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: 'This is fairly easy to upgrade and allows you to write components intended
    to be used inside other template engines:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
- en: Renaming of life cycle hooks
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Life cycle have now a more consistent naming that will help with remembering
    their names in the long run:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '| **Old hook** | **New hook** |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
- en: '| `init` | `beforeCreate` |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
- en: '| `created` | `created` |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
- en: '| `beforeCompile` | `created` |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
- en: '| `no equivalent` | `beforeMount` |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
- en: '| `compiled` | `mounted` |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
- en: '| `ready` | `mounted` |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
- en: '| `attached` | `no equivalent` |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
- en: '| `detached` | `no equivalent` |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
- en: '| `no equivalent` | `beforeUpdate` |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
- en: '| `no equivalent` | `updated` |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
