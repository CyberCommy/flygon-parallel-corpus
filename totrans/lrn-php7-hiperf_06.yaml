- en: Chapter 6. Stress/Load Testing PHP Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After an application is developed, tested, debugged and then profiled, it is
    time to bring it to production. However, before going to production, it is best
    practice to stress/load test the application. This test will give us an approximate
    result of how many requests at a certain time can be handled by our server running
    the application. Using these results, we can optimize the application, web server,
    database, and our caching tools to get a better result and process more requests.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will load test different open source tools on both PHP 5.6
    and PHP 7 and compare these applications' performance for both versions of PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache JMeter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ApacheBench (ab)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seige
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load testing Magento 2 on PHP 5.6 and PHP 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load testing WordPress on PHP 5.6 and PHP 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load testing Drupal 8 on PHP 5.6 and PHP 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache JMeter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache JMeter is a graphical and open source tool used to load test a server's
    performance. JMeter is completely written in Java, so it is compatible with all
    operating systems that have Java installed. JMeter has a complete set of extensive
    tools for every kind of load testing, from static content to dynamic resources
    and web services.
  prefs: []
  type: TYPE_NORMAL
- en: Its installation is simple. We need to download it from the JMeter website and
    then just run the application. As mentioned before, it will require Java to be
    installed on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JMeter can test FTP servers, mail servers, database servers, queries, and more.
    In this book, we can't cover all these topics, so we will only load test web servers.
    Apache JMeter's list of features can be found at [http://jmeter.apache.org/](http://jmeter.apache.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the application at first, we will see the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache JMeter](graphics/B05225_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To run any kind of test, you need to first create a test plan. A test plan
    has all the components required to execute this test. By default, JMeter has a
    test plan called Test Plan. Let''s name it to our own plan, `Packt Publisher Test
    Plan`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache JMeter](graphics/B05225_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, save the test plan, and JMeter we will create a `.jmx` file. Save it in
    an appropriate place.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to add a thread group. *A thread group defines some basic
    properties for the test plan, which can be common among all types of tests*. To
    add a thread group, right-click on the plan in the left panel, then navigate to
    **Add** | **Threads (Users)** | **Thread Group**. The following window will be
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache JMeter](graphics/B05225_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The thread group has the following important properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Number of Threads**: This is the number of virtual users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Ramp-Up period**: This tells JMeter how long it should take to ramp up
    to the full capacity of the number of threads. For example, in the preceding screenshot,
    we have 40 threads and 80 seconds of ramp-up time; here, JMeter will take 80 seconds
    to completely fire up 40 threads, and it will take 2 seconds for each of the three
    to start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loop Count**: This tells JMeter how much time it should take to run this
    thread group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scheduler**: This is used to schedule the execution of the thread group for
    a later time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we will need to add the HTTP request defaults. Right-click on **Packt
    Thread Group** and then go to **Add** | **Config Element** | **HTTP Request Defaults**.
    A window similar to the following will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache JMeter](graphics/B05225_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding window, we have to just enter the URL of the application or
    the IP address. If the web server uses cookies, we can add HTTP Cookie Manager
    too, in which we can add user-defined cookies with all the data, such as the name,
    value, domain, path, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add an HTTP request by right-clicking and navigating to **Packt
    Thread Group** | **Add** | **Sampler** | **HTTP Request**, and the following window
    will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache JMeter](graphics/B05225_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The important field here is **Path**. We want to run the test only against the
    home page, so for this HTTP request, we will just add a slash (`/`) in the **Path**
    field. If we want to test another path, such as "Contact us", we will need to
    add another HTTP request sampler, as in the preceding screenshot. Then, in the
    path, we will add `path/contact-us`.
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP Request sampler can be used to test forms too, where POST requests
    can be sent to the URL by selecting the POST method in the **Method** field. Also,
    file upload can be simulated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to add some listeners. *Listeners provide some powerful views
    to display results*. The results can be displayed in a table view and different
    kinds of graphs can be saved in a file. For this thread group, we will add three
    listeners: View Results in Table, Response Time Graph, and Graph Results. Each
    listener view displays a different kind of data. Add all the preceding listeners
    by right-clicking on **Packt Thread Group** and then navigating to **Add** | **Listeners**.
    We will have a complete list of all the available listeners. Add all the three
    listeners one by one. Our final **Packt Publisher Test Plan** panel on the left-hand
    side of JMeter will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache JMeter](graphics/B05225_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we are ready to run our test plan by clicking on the **Start** button
    in the upper tool bar, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache JMeter](graphics/B05225_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as we click on the **Start** button (the green arrow pointing to the
    right-hand side), JMeter will start our test plan. Now, if we click on the **View
    Results in Table** listener on the left panel, we will see data for each request
    in a table, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache JMeter](graphics/B05225_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows some interesting data, such as sample time, status,
    bytes, and latency.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sample time** is the number of milliseconds in which the server served the
    complete request. **Status** is the status of the request. It can be either a
    success, warning, or error. **Bytes** is the number of bytes received for the
    request. **Latency** is the number of milliseconds in which JMeter received the
    initial response from the server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we click on **Response Time Graph**, we will see a visual graph for
    the response time, which is similar to the one that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache JMeter](graphics/B05225_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if we click on **Graph Results**, we will see the response time data along
    with graphs for average, median, deviation, and throughput graphs, as shown in
    the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache JMeter](graphics/B05225_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Apache JMeter provides very powerful tools to load test our web servers by simulating
    users. It can provide us with data regarding the amount of load that makes our
    web server's response slow, and using this data, we can optimize our web server
    and application.
  prefs: []
  type: TYPE_NORMAL
- en: ApacheBench (ab)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ApacheBench (ab) is also provided by Apache and is a command-line tool. It is
    a lovely tool for command line lovers. This tool is normally installed on most
    Linux flavors by default. Also, it is installed with Apache, so if you have Apache
    installed, you will probably have ab installed too.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax for an ab command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s discuss what each part of the preceding command means:'
  prefs: []
  type: TYPE_NORMAL
- en: '`n`: This is the number of requests for test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c`: This is concurrency, which is the number of simultaneous requests at a
    time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Address`: This is either the application URL or IP address of the web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Port`: This is the port number at which the application is running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Path`: This is the web path of the application that we can use to test. A
    slash (`/`) is used for the home page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s conduct a test using the ab tool by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As the default port for the web server is 80, it is not required to mention
    it. Note the slash at the end; this is required to place it there because it is
    the path's part.
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing the preceding command, we will have an output that looks similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ApacheBench (ab)](graphics/B05225_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see some useful information here, including the number of requests per
    second, which is **490.3**; the total time taken for the test, which is **1.020
    seconds**; the shortest request, which is **20 ms**; and the longest request,
    which is **52 ms**.
  prefs: []
  type: TYPE_NORMAL
- en: The server load limit can be found by increasing the number of requests and
    concurrency level and checking the web server's performance.
  prefs: []
  type: TYPE_NORMAL
- en: Siege
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Siege is another command-line open source tool to test load and performance.
    Siege is an HTTP/FTP load tester and benchmarking utility. It is designed for
    developers and administrators to measure the performance of their applications
    under load. It can send a configurable number of simultaneous requests to a server
    and those requests that place the server under a siege.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its installation is simple and easy. For Linux and Mac OS X, first download
    Siege by issuing the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It will download the Siege TAR compressed file. Now, uncompress it by issuing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, all the files will be in the `siege-3.1.4` folder. Build and install it
    by issuing the following commands one by one in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, Siege is installed. To confirm this, issue the following command to check
    the Siege version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If it displays the version with some other information, then Siege is installed
    successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of writing this book, the current Siege stable version is 3.1.4\. Also, Siege
    does not support Windows natively, and, of course, Windows servers can be tested
    and benchmarked using Siege.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s have a load test. A basic load test can be executed by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Siege will then start the test. We have to enter the application URL or server
    IP that we want to load test. To stop the test, press *Ctrl* + *C*, and we will
    have an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Siege](graphics/B05225_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot we can see **Transactions**, **Response time**,
    and **Transaction rate** along with **Longest transaction** and **Shortest transaction**.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Siege creates 15 concurrent users. This can be changed by using
    the `–c` option, which is done by making the following alteration in the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'However, Siege has a limitation for the concurrent users, which may be different
    for each OS. This can be set in the Siege configuration file. To find out the
    `config` file location and concurrent user limit, issue the following command
    in terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: A list of the configuration options will be displayed. Also the resource file
    or `config` file location will be displayed. Open that file and find the config
    concurrent and set its value to an appropriate required value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important feature of Siege is that a file that has all the URLs that
    need to be tested can be used. The file should have a single URL in each line.
    The `–f` flag is used with Siege as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Siege will load the file and start load testing each URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting feature of Siege is the internet mode, which can be entered
    using the `–i` flag in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the internet mode, each URL is hit randomly and mimics a real-life situation,
    in which it can't be predicted which URL will be hit.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Siege has lots of useful flags and features. A detailed list can be found in
    the official documentation at [https://www.joedog.org/siege-manual/](https://www.joedog.org/siege-manual/).
  prefs: []
  type: TYPE_NORMAL
- en: Load testing real-world applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We studied three tools in this chapter to load test. Now, it is time to load
    test some real-world applications. In this section, we will test Magento 2, Drupal
    8, and WordPress 4\. All these open source tools will have their default data.
  prefs: []
  type: TYPE_NORMAL
- en: We have three VPS configured with NGINX as the web server. One VPS has PHP 5.5-FPM,
    the second has PHP 5.6-FPM, and the third has PHP 7-FPM installed. The hardware
    specs for all the three VPS are same, and all applications we will test will have
    the same data and the same versions.
  prefs: []
  type: TYPE_NORMAL
- en: This way, we will benchmark these applications with PHP 5.5, PHP 5.6, and PHP
    7 and take a look at how fast these applications can run on different versions
    of PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this topic, we won't cover configuring the servers with NGINX, PHP, and the
    databases. We will assume that the VPS are configured and that Magento 2, Drupal
    8, and WordPress 4 are installed on them.
  prefs: []
  type: TYPE_NORMAL
- en: Magento 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Magento 2 is installed on all VPS, and all the caches are enabled for Magento.
    PHP OPcache is also enabled. After running the tests, we got an average result
    for all the three Magento 2 installations, as shown in the following graphs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Magento 2](graphics/B05225_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding chart, the vertical line, or Y-axis, shows the transactions
    per second. As can be seen in the charts, Magento 2 on PHP 7 has 29 transactions
    per second, while the same Magento 2 installation on the same hardware with PHP
    5.6 has 12 transactions per second. Also, on PHP 5.5, the same Magento installation
    has 9 transactions per second. So, in this case, Magento runs about 241% faster
    on PHP 7 than PHP 5.6 and about 320% faster than in PHP 5.5\. This is a very huge
    improvement of PHP 7 on both PHP 5.6 and PHP 5.5.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WordPress is installed on all of the three VPS. Unfortunately, there is no default
    cache embedded into WordPress, and we will not install any third-party modules,
    so no cache is used. The results are still good, as can be seen in the following
    graphs. PHP OPcache is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: '![WordPress 4](graphics/B05225_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As can be seen in the preceding graph, WordPress runs 135% faster in PHP 7 than
    in PHP 5.6 and 182% faster than in PHP 5.5.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We used the same VPS for PHP 5.5, PHP 5.6, and PHP 7\. The default Drupal 8
    cache is enabled. After load testing the default home of Drupal 8, we got the
    following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drupal 8](graphics/B05225_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding graph shows that Drupal 8 runs 178% faster in PHP 7 than in PHP
    5.6 and 205% faster than in PHP 5.5.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the preceding graphs, all these values are approximate values. If a low-power
    hardware is used, then smaller values will be generated. If we use a more powerful
    multiprocessor-dedicated server with the web server and database optimizations,
    we will get higher values. The point to consider is that we will always get better
    performance for PHP 7 than PHP 5.6.
  prefs: []
  type: TYPE_NORMAL
- en: 'A combined graph is shown here, which displays the performance improvements
    for different applications in PHP 7 over PHP 5.5 and PHP 5.6:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drupal 8](graphics/B05225_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed a few load testing and benchmarking tools, such
    as JMeter, ApacheBench (ab), and Siege. We used each tool to load test, and discussed
    the output and what it means. Finally, we load tested three famous open source
    applications, Magento 2, WordPress 4, and Drupal 8, and created graphs for each
    application's transactions per second in both PHP 7 and PHP 5.6.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss best practices for PHP development. These
    practices are not limited only to PHP and can be used for any programming language.
  prefs: []
  type: TYPE_NORMAL
