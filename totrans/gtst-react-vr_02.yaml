- en: 'Flatland and Beyond: VR Programming'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, you learned about what VR is and what it can be. How is
    it that programmers and developers (like you) create these virtual worlds? We
    found out that it is a difficult thing to do right. We have to maintain fast frame
    rates and proper stereoscopic rendering. How do we do that quickly and easily?
    Read on and find out how.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML and common programming methods, such as Node.js, JavaScript, and game engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The React Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphics libraries, for displaying 2D and 3D images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install all of these software so that we can begin programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML and ways to move beyond the 2D internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the web was developed, the early HTML language has evolved dramatically.
    A good web page experience typically involves more than just HTML. One of those
    ways to add more interactivity is via JavaScript. The combination of HTML, XML,
    and JavaScript is a large portion of what delivers the web, including applications,
    such as Google Documents or online Microsoft Word (also free).
  prefs: []
  type: TYPE_NORMAL
- en: These are, however, flat. To move into the third dimension has traditionally
    taken high–speed software, usually written in C++. As computers have gotten faster
    and faster and **Graphics Processing Units** (**GPU**) have taken over the bulk
    of the actual 3D generation, languages to describe 3D games have evolved.
  prefs: []
  type: TYPE_NORMAL
- en: There are currently quite a number of ways to program in VR. It is challenging
    to generate 90 frames per second at the resolution the Rift and Vive display at,
    so most VR programming is done in high-speed languages, that are direct to the
    metal or low level, such as C and C++. Game engines, such as Unity, Unreal, or
    Cryengine, however, do a lot of this for you.
  prefs: []
  type: TYPE_NORMAL
- en: At first, you may be thinking *why should I use a game engine? I'm not writing
    a game*. More generally, these engines are constructed for games, but do not have
    to build just games. Modern game engines handle rendering (what we need), physics
    (we need this to build realistic worlds), terrain (for outdoor scenes), lighting
    (for sophisticated rendering), Artificial Intelligence (to populate our world),
    networking (to build multi–user environments), and other code. None of this is
    necessarily game specific, although all of the various game engines do have nomenclature
    more suited for games than, say, enterprise data visualization. For example, in
    Unity a basic 3D object is referred to as a `GameObject`. So even if you aren't
    writing a game, you will have `GameObject`s.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, the top contenders for VR software are:'
  prefs: []
  type: TYPE_NORMAL
- en: Unity  (by Unity3D, more at [http://bit.ly/UnityForVR](http://bit.ly/UnityForVR))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unreal (by Epic games, makers of Unreal Tournament; more at [http://bit.ly/UnrealForVR](http://bit.ly/UnrealForVR))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryengine (by Crytek, makers of the game Crysis; more at [http://bit.ly/CrytekForVR](http://bit.ly/CrytekForVR))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lumberyard (by Amazon; more at [http://bit.ly/LumberyardForVR](http://bit.ly/LumberyardForVR))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many of these game engines also work on mobile platforms. The advantage of using
    a game engine is that you can *write once, run anywhere*, meaning that most of
    them have mobile support as well as PC support. Basically, you build a PC app,
    then change your build settings and build a mobile app. You now have two or more
    different apps for each platform.
  prefs: []
  type: TYPE_NORMAL
- en: There can be quite a steep learning curve with game engines, although it is
    still easier than writing your own rendering code. You do need to build an entire
    application, and that can be daunting.
  prefs: []
  type: TYPE_NORMAL
- en: Contrast this to the current state-of-the-art in web programming, people just
    want to describe what you want to see, not write the server-side code to send
    the web pages to your phone, nor write custom applications to download that information
    and display it.
  prefs: []
  type: TYPE_NORMAL
- en: So, why would VR require you to do that?
  prefs: []
  type: TYPE_NORMAL
- en: With React VR, you don't have to.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of learning a game programming engine, you can build your worlds with
    JavaScript. You build a VR world and UI with declarative components, instead of
    building rendering code. In effect, you can operate at a higher level to describe
    what your VR world has in it, instead of building that world a pixel at a time.
    Doesn't that sound like more fun?
  prefs: []
  type: TYPE_NORMAL
- en: Background of Node.js and JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Say Node.js out loud. Gesundheit!
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is an open source system for using JavaScript on the server side. It
    is, of course, the primary way that web browsers execute code. It was invented
    way back in the early days of the web for several reasons.
  prefs: []
  type: TYPE_NORMAL
- en: React and React VR make heavy use of JavaScript. To render React web pages to
    a browser requires server-side JavaScript, meaning that the web server doesn't
    just send the files to the browser, but rather executes code at the server side.
    Node.js allows you to program server-side code in the same language as the browser.
    For full-stack developers, this is ideal, as you can immerse yourself in one language.
  prefs: []
  type: TYPE_NORMAL
- en: Making servers React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React VR is based on React, a framework that allows web pages and interactive
    User Interfaces to built by declaration instead of programming. You build views
    for each state in the application, and then React will use the correct components
    to display that application.
  prefs: []
  type: TYPE_NORMAL
- en: Declarative views make your code easier, more robust, and easier to modify and
    debug.
  prefs: []
  type: TYPE_NORMAL
- en: Components use the Object-Oriented concept of encapsulation, meaning they are
    self-sufficient and manage their own state. You then take these components and
    use them to make complex UIs.
  prefs: []
  type: TYPE_NORMAL
- en: React allows developers to create applications that change over time, without
    having to constantly refresh a browser page. It uses the Model-View-Controller
    design pattern/template and can be used in combination with other JavaScript libraries,
    such as Angular.JS.
  prefs: []
  type: TYPE_NORMAL
- en: React was first used with Facebook's newsfeed in 2011\. It was made open-source
    in March, 2015.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more details about React at [https://facebook.github.io/react/](https://facebook.github.io/react/).
  prefs: []
  type: TYPE_NORMAL
- en: Graphics libraries — OpenGL and WebGL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section covers general 3D programming, but some discussion of different
    things is in order.
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenGL** is a standard for displaying graphics. Without getting into PC versus
    Workstation politics (ancient history now), it was a standard that a workstation
    vendor (SGI) pioneered to standardize computer graphics and the ability for programs
    to display graphics.'
  prefs: []
  type: TYPE_NORMAL
- en: There are other APIs, such as DirectX, which was backed by Microsoft and many
    PC game developers, CAD software, and other PC computer graphics.
  prefs: []
  type: TYPE_NORMAL
- en: OpenGL is not, strictly speaking, open source; yet the software can be used
    without royalty payments and is documented and freely available (to be fair, so
    is DirectX).
  prefs: []
  type: TYPE_NORMAL
- en: Basically, OpenGL is a way for software to display graphics. Software, in this
    case, usually means C++ (or other languages that can call native libraries and
    O/S utilities).
  prefs: []
  type: TYPE_NORMAL
- en: Vulkan is more or less an intended successor to OpenGL. It is on a lower level
    than OpenGL, and offers more ability to perform parallel tasking and directly
    utilize the power of the GPUs that are in most smart phones and PCs. As it is
    a low-level format, you'll hear more discussion of Vulkan with computer graphics,
    and less about Web graphics. As with OpenGL, it is usually used by a compiled
    native mode software (C++, and so forth).
  prefs: []
  type: TYPE_NORMAL
- en: '**WebGL** is a JavaScript API for rendering 3D graphics within a web browser,
    without requiring plugins. As SGI, the creator of OpenGL, is no longer in business,
    both OpenGL and WebGL are now supported, defined, and marketed by the Khronos
    group, a non for profit, member funded consortium. WebGL is used via JavaScript
    or other browser supported languages.'
  prefs: []
  type: TYPE_NORMAL
- en: The **three.js** is a series of JavaScript files that make WebGL easier to program
    in. It is, however, a fairly large download.
  prefs: []
  type: TYPE_NORMAL
- en: React VR is built on three.JS and React.
  prefs: []
  type: TYPE_NORMAL
- en: '**A-Frame** is another WebGL frontend; it has a similar concept to React VR,
    meaning it is declarative and high level and built on three.js. You don''t have
    to create points and wire them up to make a cube; you just declare a cube and
    give it a position, color, and so on. While this book primarily covers React VR,
    here are a few differences between them.'
  prefs: []
  type: TYPE_NORMAL
- en: React VR apps are written in **JSX**. It is a syntax that allows HTML-like tags
    to be mixed into JavaScript code. React VR is based on React and React Native.
    If you already know React, you can pick up React VR very quickly, and the underlying
    concepts are the same, so you will feel like a native.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A-Frame apps use HTML, with custom HTML tags. It is a powerful framework, providing
    a declarative, composable, reusable entity-component structure for three.js. A-Frame
    can be used from HTML, although developers still have access to JavaScript, DOM
    APIs, three.js, WebVR, and WebGL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both of them allow for custom JavaScript code and interfacing directly to three.js
    and WebGL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But why make a decision? You don't have to. You can use both. Let's install
    React VR.
  prefs: []
  type: TYPE_NORMAL
- en: Installation of Node.js and React VR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most desktop VR hardware currently available use Windows; because of this, the
    following instructions, and indeed most of this book will be a mixture of Windows
    installations and GearVR viewing. At the time of writing, Linux could be hacked
    to work with the HTC Vive and Oculus Rift, but it's a difficult road and a bit
    beyond the scope of this book. Apple PCs are just adding the capability to add
    an external video card for VR, as most of them simply do not have the video processing
    capability to render VR at the resolutions used by the Vive and Rift headsets.
  prefs: []
  type: TYPE_NORMAL
- en: React is, however, not PC specific. You could build all of the examples in this
    book with Linux or a Mac, and follow alongside, and use a Google Daydream, Unofficial
    Cardboard, or Samsung Gear VR to view all of the samples. In this case, some of
    the examples may use slightly different syntax. I wrote the book so that the majority
    of users with a Vive and Rift could follow along, and I apologize in advance for
    the platform restrictions for the rest of you.
  prefs: []
  type: TYPE_NORMAL
- en: Why can't we all just get along?
  prefs: []
  type: TYPE_NORMAL
- en: Where possible, I will include links and information for other platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Installation of Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will assume you know what platform you are on and have a computer (desktop
    PC) that is capable of having Node.js and React VR installed.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will need to install Node.js. If you already have it installed, that's
    great, just make sure (at the time of the writing of the book) you have at least
    version 4.0\. This book was constructed with the LTS Version: v6.11.0 and v8.5.0,
    which should be stable and out by the time you read this. (Includes `npm` 3.10.10)
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to get Node.js from: [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
    Download the 64-bit `.msi` prebuilt installer file. Once it downloads, double-click
    on the file or run it, depending on your browser.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We live in a nanny state, so it warns you that you are downloading native code.
    Then again, people get taken out all the time by spear phishing (virus emails
    that make you infect yourself). This one should be safe.
  prefs: []
  type: TYPE_NORMAL
- en: These warnings only come up if the program you are downloading has not been
    digitally signed. A digital code signing certificate is not that hard to get;
    insist that companies and non-profit organizations sign their code.
  prefs: []
  type: TYPE_NORMAL
- en: It will make the internet safer.
  prefs: []
  type: TYPE_NORMAL
- en: Do this for any code you release.
  prefs: []
  type: TYPE_NORMAL
- en: Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I know, but you really should read the terms and conditions--agree and click
    on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default location is fine. Thank gosh we don't have to worry about Linux
    that can't handle spaces in filenames (just kidding with all of you Linux folks).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Most of the installation options are okay. They don't require a lot of space,
    so it's okay to install everything.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may (should) get an alert that a piece of software is installing; tell Windows
    it's okay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've finished! Time to install the rest of React VR. Click on Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Node.js for Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js organization recommends using Homebrew: [https://brew.sh/](https://brew.sh/).'
  prefs: []
  type: TYPE_NORMAL
- en: But, you can also install Node.js via the Node.js download page:[ https://nodejs.org/en/download/](https://nodejs.org/en/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Installation should be straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js for Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: 'While the source code is here: [https://nodejs.org/en/download/,](https://nodejs.org/en/download/)
    you can download Node.js a little easier from the package manager; instructions
    are here: [https://nodejs.org/en/download/package-manager/.](https://nodejs.org/en/download/package-manager/)'
  prefs: []
  type: TYPE_NORMAL
- en: Installation should be straightforward; this is Linux, so I'm sure you can handle
    any wrinkles.
  prefs: []
  type: TYPE_NORMAL
- en: Post Node.js installation — installing React VR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Node.js software includes a package manager called `npm`. Package managers
    install software, as well as that software's dependencies. You will use this to
    install React VR. It makes the installation very easy and up to date. Whatever
    your platform, you will need to get to a Command Prompt to work with most of the
    examples in this book. A Command Prompt is the window incorrectly referred to
    as DOS. In Windows, this is referred to as the Node.js **Command Line Interface **(**CLI**)
    tool, although the actual title is Node.js command prompt. The Node.js installer
    set this up when it installed. You should use the CLI from the installation, as
    it sets up certain environment variables and the like. After having said that,
    I use an alternative command-line tool called **Take Command Console** (**TCC**),
    and after Node.js did the installation and registered path variables (part of
    the install), I can run `npm` and other commands from my TCC shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your preferred CLI (Start | `Node.js command prompt`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can do this from any location (folder) and the package manager (`npm` command)
    will install the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2910abed-bdb6-4459-85b8-b6f893a46b60.png)'
  prefs: []
  type: TYPE_IMG
- en: If you run this program a second time, the nice thing is it will confirm what's
    already there (although like a lot of open source programs, it's a bit terse).
  prefs: []
  type: TYPE_NORMAL
- en: '`npm` has a lot of other very useful options. For example, you can use `npm
    ls`, which will (just like `ls` in linux) give you a list of all objects installed.
    You can get exhaustive documentation by running the command `npm help npm`, which
    will open a web page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we want to use the same CLI to install the `WelcomeToVR` sample. First,
    go to a place (folder/directory) where you''d like to install your samples and
    code. I have a second, large hard drive installed as F: (your mileage, platform,
    and disk configuration will vary). So, before I started installing everything
    on my desktop, or my documents, I switched to my data drive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, I went ahead and used the ReactCLI to install the `WelcomeToVR` demo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The process will start:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5bd76b93-cf1f-4645-a9f5-9e74d4354e5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will take quite a while. At the end of the process, it''ll finish and
    tell you what to do next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/58701c79-4232-406e-b84b-d275cd7f19c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, go into your `WelcomeToVR` project directory that the tool just created,
    and initialize/start the local development server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This process will take a little while. While this runs, this command-line interface
    window will be busy running the program. It is not a service. If you close the
    window, it'll stop. So, don't close the window.
  prefs: []
  type: TYPE_NORMAL
- en: 'This window will also show helpful status information when you visit your various
    web pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/bd8152ae-3e63-4196-bcbc-c8f4e1d5cc7d.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, from your desktop, open your browser to `http://localhost:8081/vr/index.html`[, ](http://localhost:8081/vr/index.html)as
    the nice CLI tells you. You're done!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There is an easier way to go to this URL than opening your web browser, and
    typing the URL in the CLI window. You should turn on *quick edit mode*. Screenshots
    showing this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the little C:\ window in the corner of the CLI window. This is called
    the System Menu:![](Images/d4498878-271b-45a3-972d-cb33295f7702.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you''ve done that, click on Properties. Once in Properties, turn on Quick
    Edit Mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/ea17d3cc-6e93-4f9e-bcee-f5b0862ca284.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK. Now, that Quick Edit Mode is turned on, you can highlight text in
    the window and press *Enter* to select. Then, you can paste the URL directly into
    your WebVR-enabled browser. Easy!![](Images/d4d2c65f-0a44-4c65-9a53-c3f6b0cee22c.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If, like me, you like to use a CLI different from COMMAND.COM (I use 4nt or
    TCC), assuming a default install as we discussed, you just have to add to your
    `path` the following, assuming you installed Node.js  in the default location: `C:\Users\<user>\AppData\Roaming\npm;C:\Program
    Files\nodejs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installation of a WebVR browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have the server-side software installed, you'll need to install
    a web browser that is capable of displaying WebGL, OpenGL, and WebVR. This changes
    constantly, so I highly recommend going to WebVR and checking their compatibility
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Firefox, or the experimental Firefox Nightly is probably the easiest browser
    to use. For more information, refer to [http://bit.ly/WebVRInfo.](http://bit.ly/WebVRInfo)
  prefs: []
  type: TYPE_NORMAL
- en: 'The good news is that regular WebVR support is built into Firefox as of version
    55, so just make sure you are up to date with Firefox and you can view WebVR.
    To view your new VR site that you just generated, you''ll need to do the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure your browser can run JavaScript. This is the default unless you've locked
    down your browser in a security conscious way (which is a good thing). WebVR uses
    JavaScript extensively. You can also add localhost to your white-list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you bring up your WebVR-enabled browser (on PC, basically Chromium, Firefox
    Nightly, or IE), you will see hello. However, you are not in VR yet! You need
    to click on the View in VR. Your VR app should start. You can then put on your
    headset, and you will see a simple hello. No World? You're in a VR World!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/df2cf0ca-561d-40f1-961e-27ba268ef751.png)'
  prefs: []
  type: TYPE_IMG
- en: You will see a link that says View in VR. Until you click on this (on your regular
    desktop), your Vive/Oculus will not work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you click on View in VR, and put on your headset, you will see the hello
    in your VR world!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/5a2673ec-4726-46d5-9bbe-cac69c71b738.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You've built your first VR world. I bet that was a lot faster
    than learning Unity.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also view with a mobile VR, but you''ll need to find out the IP address
    of your development machine, and go to that website from the mobile device, something
    like: `http://192.168.1.100/vr`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the URL `http://localhost:8081/vr/index.html`, you substitute `localhost`
    with the IP address of your server (your desktop development PC).
  prefs: []
  type: TYPE_NORMAL
- en: Note this is almost certainly not the correct IP address, you'll need to get
    the IP address from your development machine/server and enter that into the mobile
    VR headset. For Windows, go to the network properties, or from a CLI type `ipconfig`.
    If your desktop PC is 192.168.0.100, from the mobile headset, you type out (from
    the virtual keyboard) `http://192.168.0.100:8081/vr/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Clean your mobile screen
  prefs: []
  type: TYPE_NORMAL
- en: If you don't, any specs, fingerprints, or crud on the screen will show up sharply
    in focus. These specs will be distracting as they will seem to hover in front
    of everything.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You've run and viewed your first React VR world!
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you don't have a headset or get a little tired of taking the headset
    on and off and having to walk out of your room-scale bounds to get back to your
    PC, there is a quick way to preview the world. In Firefox Nightly, you can just
    click on the small radar display and what is on the screen will show you what
    one eye would see in the VR headset. This is really useful for developers like
    you!
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/63f8fd9c-a988-42cc-a170-e12f11f2624b.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the basics of how to actually program VR worlds,
    and what software to use. We also went through installing the React VR system
    so that we could develop our own VR worlds! In the next chapter, we'll cover 3D
    basics and the math that we will need to build our VR worlds.
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry about the math; there won't be a popup quiz.
  prefs: []
  type: TYPE_NORMAL
- en: Now to actually create an interesting world. But first, we need to understand
    what the world consists of. The next section will describe the React VR terminology
    to describe your virtual world.
  prefs: []
  type: TYPE_NORMAL
