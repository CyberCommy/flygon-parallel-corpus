- en: Welcome to Ionic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we went through Angular 2 with the help of an example.
    In this chapter, we will look atÂ the big picture of Mobile Hybrid apps, set up
    the required software to develop Ionic apps, and finally scaffold a few apps and
    explore them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile Hybrid architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Apache Cordova?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Ionic?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the tools needed to develop and run Ionic apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Ionic templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile Hybrid architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start working with Ionic, we need to understand the bigger picture
    of Mobile Hybrid development.
  prefs: []
  type: TYPE_NORMAL
- en: The concept is pretty simple. Almost every mobile operating system (also called
    platform, when working with Cordova) has an API to develop apps. This API consists
    of a component named WebView. A WebView is typically a browser that runs inside
    the scope of a mobile application. This browser runs the HTML, CSS, and JS code.
    This means that we can build a web page using the preceding technologies and then
    execute it inside our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the same knowledge of web development to build native-hybrid mobile
    apps (here, native refers to installing the platform-specific format file on the
    device after it has been packaged along with the assets), for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Android uses Android Application Package (`.apk`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS uses iPhone Application Archive (`.ipa`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Phone uses Application Package (`.xap`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package/installer consists of a piece of native code that initializes the
    web page and a bunch of assets needed to show the web page content.
  prefs: []
  type: TYPE_NORMAL
- en: This setup of showing a web page inside the mobile app container that consists
    of our application business logic is called a Hybrid App.
  prefs: []
  type: TYPE_NORMAL
- en: What is Apache Cordova?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In simple terms, Cordova is the piece of software that stitches the web application
    and the native application together. The Apache Cordova website states that:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Apache Cordova is a platform for building native mobile apps using HTML, CSS
    and JavaScript."'
  prefs: []
  type: TYPE_NORMAL
- en: Apache Cordova does not just stitch the web app with the native app--but it
    also provides a set of APIs written in JavaScript to interact with the native
    features of the device. Yes, we can use JavaScript to access our camera, take
    a picture, and send it in an e-mail. Sounds exciting, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a better understanding of what is happening, let''s take a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, we have a WebView where the HTML/CSS/JS code gets executed. This
    code can be a simple standalone piece of user interface; at best we are making
    an AJAX request to get some data from a remote server. Or, this code can do much
    more, such as talk to the Bluetooth of the device and get the list of devices
    in the vicinity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the latter case, Cordova has a bunch of APIs that interface with the WebView
    using JavaScript and then talk to the device in its native language (for example,
    Java for Android), thus providing a bridge between Java and JavaScript in this
    scenario. For instance, if we would like to know more about the device, which
    is running our app, all we need to do is write the following code inside the JS
    file and launch the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing the device plugin, we can also access the UUID, model, OS
    version, and the Cordova version of the device from inside the WebView using JavaScript
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will deal more with Cordova plugins in [Chapter 6](part0097.html#2SG6I0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic Native*.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding explanation was to give you an idea of how Mobile Hybrid apps
    are structured and how we can use device features from the WebView using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Cordova does not convert the HTML, CSS, and JS code to an OS-specific binary
    code. All it does is wrap the HTML, CSS, and JS code and execute it inside a WebView.
  prefs: []
  type: TYPE_NORMAL
- en: So you must have guessed by now that Ionic is the framework with which we build
    the HTML/CSS/JS code that runs in the WebView and talks with Cordova to access
    device-specific APIs.
  prefs: []
  type: TYPE_NORMAL
- en: What is Ionic 2?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ionic 2 is a beautiful, open source, frontend SDK for developing Hybrid Mobile
    apps with HTML5\. Ionic provides mobile-optimized HTML, CSS, and JS components,
    as well as gestures and tools for building highly interactive apps.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic 2 is performance efficient with its minimal DOM manipulation and hardware-accelerated
    transitions as compared to other frameworks in this league. Ionic uses Angular
    2 as its JavaScript framework.
  prefs: []
  type: TYPE_NORMAL
- en: With the power of Angular inside a framework like Ionic 2, the possibilities
    are unlimited (we can use any Angular component inside Ionic as long as it makes
    sense in a mobile app). Ionic 2 has a very good integration with Cordova's device
    API. This means that we can access device APIs using Ionic Native and integrate
    it with the beautiful user interface components of Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic has its own command-line interface (CLI) to scaffold, develop, and deploy
    Ionic apps. Before we start working with the Ionic CLI, we need to set up a few
    pieces of software.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The latest version of Ionic at the time of this book's release is 3\. I have
    put together another chapter named Ionic 3 (Chapter 11), to which you can refer
    to know more about Ionic 3 and its changes.
  prefs: []
  type: TYPE_NORMAL
- en: Also, please note that the examples in this book are still valid when working
    with Ionic 3 as well. There may be few syntactic and structural changes, but the
    overall gist should ideally remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: Software setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we are going to set up all the required software needed to develop and run
    an Ionic app smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since Ionic uses Node.js for its CLI as well as for the build tasks, we will
    first install it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://nodejs.org/](https://nodejs.org/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Install button on the homepage and an installer for our OS will
    automatically be downloaded. We can also navigate to [https://nodejs.org/download/](https://nodejs.org/download/)
    and download a specific copy.
  prefs: []
  type: TYPE_NORMAL
- en: Install Node.js by executing the downloaded installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To verify that Node.js has been successfully installed, open a new Terminal
    (`*nix` systems) or Command Prompt (Windows systems) and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`npm` is a **Node Package Manager** that we will be using to download various
    dependencies for our Ionic project.'
  prefs: []
  type: TYPE_NORMAL
- en: We need Node.js only during the development. The version specified is only for
    illustration. You may have the same version or the latest version of the software.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is a free and open source distributed version control system designed to
    handle everything from small to very large projects with speed and efficiency.
    In our case, we will be using a package manager named Bower, which uses Git to
    download the required libraries. Also, the Ionic CLI uses Git to download the
    project templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Git, navigate to [http://git-scm.com/downloads](http://git-scm.com/downloads)
    and download the installer for your platform. Once you have successfully installed
    it, we can navigate to the command prompt/terminal and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Text editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a totally optional installation. Everyone has their own preferred text
    editor. After running around many text editors, I fell in love with Sublime Text,
    purely for its simplicity and the number of Plug and Play packages.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to give this editor a try, you can navigate to [http://www.sublimetext.com/3](http://www.sublimetext.com/3)
    to download Sublime Text 3.
  prefs: []
  type: TYPE_NORMAL
- en: Since we will be writing our JavaScript code in TypeScript, Microsoft's Visual
    Studio Code is another good option.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to give this editor a try, you can navigate to [https://code.visualstudio.com/](https://code.visualstudio.com/).
  prefs: []
  type: TYPE_NORMAL
- en: You can also check out Atom as another alternative.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to give this editor a try, you can navigate to [https://atom.io/](https://atom.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will be installing the TypeScriptÂ compiler. As mentioned in Chapter
    1, *Angular - A Primer*, we will be using TypeScript to write the JavaScript code.
    To install the TypeScript compiler, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once TypeScript is successfully installed, we can verify it by running this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The latest version of TypeScript at the time of release of Ionic 3 is 2.2.2\.
    You may need to update the version of TSC to 2.2.2 or higher when working with
    Ionic 3.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Cordova and Ionic CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, to complete the Ionic 2 setup, we will install the Ionic and Cordova
    CLI. Ionic CLI is a wrapper around the Cordova CLI with some additional features.
  prefs: []
  type: TYPE_NORMAL
- en: All the code examples in this book use Cordova version 6.4.0, Ionic CLI version
    2.1.14, and Ionic version 2.1.17.Â But the same should work with latest version
    of Ionic as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Ionic CLI, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the install, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run the following command to get the complete information regarding
    the Ionic setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you see anÂ Ionic CLI version greater than or equal to 2.2.2, you have an
    Ionic CLI that can work with Ionic 3 apps. Nonetheless, the commands and examples
    in this book will work the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a feel of what Ionic CLI is packed with, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see a list of tasks, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There are a few more tasks apart from the ones seen in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: We can read through the tasks and explanations to get an idea about what they
    do. Also, note that some of the tasks are still in beta, as of today.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have completed the installation of all the software needed to
    develop apps using Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: The platform guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this book, we will be building apps that are ready to be deployed
    on the device. Since Cordova takes HTML, CSS, and JS code as input and generates
    a platform-specific installer, we need to have the build environments available
    on our machine.
  prefs: []
  type: TYPE_NORMAL
- en: Android users can follow the instructions in the Android Platform Guide at [http://cordova.apache.org/docs/en/edge/guide_platforms_andr](http://cordova.apache.org/docs/en/edge/guide_platforms_android_index.md.html#Android%2520Platform%2520Guide)[oid_index.md.html#Android%20Platform%20Guide](http://cordova.apache.org/docs/en/edge/guide_platforms_android_index.md.html#Android%2520Platform%2520Guide)
    to set up SDK on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: iOS users can follow the instructions inÂ the iOS Platform Guide at [http://cordova.apache.org/docs/en/edge/guide_platforms_ios_index.md.html#iOS%20Platform%20Guide](http://cordova.apache.org/docs/en/edge/guide_platforms_ios_index.md.html#iOS%2520Platform%2520Guide)
    to set up SDK on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: You would need an macOS environment to develop iOS apps.
  prefs: []
  type: TYPE_NORMAL
- en: As of today, Ionic supports only Android 4.0+ (although it works on 2.3 as well)
    and iOS 6+ mobile platforms. But Cordova supports a few more.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check out the other supported platforms at: [http://cordova.apache.org/docs/en/edge/guide_platforms_index.md.html#Platform%20Guides](http://cordova.apache.org/docs/en/edge/guide_platforms_index.md.html#Platform%2520Guides).'
  prefs: []
  type: TYPE_NORMAL
- en: Hello Ionic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are done with the software setup, we will scaffold a few Ionic apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ionic has three main/go-to templates, using which we can quickly start developing
    apps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Blank: This is a blank Ionic project with one page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tabs: This is a sample app that is built using Ionic tabs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Side menu: This is a sample app that is built to consume side menu driven navigation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand the basics of scaffolding, we will start with the blank template.
  prefs: []
  type: TYPE_NORMAL
- en: To keep our learning process clean, we will create a folder structure to work
    with Ionic projects. Create a folder named `chapter2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open a new command prompt/terminal and change the directory (`cd`) to
    the `chapter2` folder. Now run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command has the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-a "Example 1"`: This is the human-readable name of the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i app.example.one`: This is the app ID/reverse domain name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`example1`: This is the name of the folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blank`: This is the name of the template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--v2`: This flag indicates that the project will be scaffolded with the latest
    version of Ionic. This may be removed in the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the [Appendix](part0179.html#5AMKM0-9757c8e51afd47e0a7a9ced32db749b8),
    Additional Topics, and Tips, to know more about the Ionic start task.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic CLI is very verbose when it comes to performing tasks. As we can see from
    the command prompt/terminal, while the project is being created, a lot of information
    is printed.
  prefs: []
  type: TYPE_NORMAL
- en: To start off, `ionic2-app-base` is downloaded from the `ionic2-app-base` GitHub
    repository, [https://github.com/driftyco/ionic2-app-base](https://github.com/driftyco/ionic2-app-base).
    AfterÂ that, `ionic2-starter-blank` is downloaded from the `ionic-starter-blank`
    GitHub repository at [https://github.com/driftyco/ionic2-starter-blank](https://github.com/driftyco/ionic2-starter-blank).Â Then
    all the required dependencies are installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the project has been successfully created, we will see a bunch of instructions
    on how to proceed further. Our output should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To proceed further, we will use the `cd` command to navigate to the `example1`
    folder. We will not follow the instructions provided in the command prompt/terminal,
    as we are yet to understand the project setup. Once we have a fair idea of Ionic,
    we can start using the commands from the command prompt/terminal output after
    we have scaffold, a new Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have changed the directory to the `example1` folder, we will serve
    the app by giving the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will start a new `dev` server on port `8100`, and will then launch the
    app in our default browser. I highly recommend setting Google Chrome or Mozilla
    Firefox as your default browser while working with Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: When the browser launches, we should see the blank template's home page.
  prefs: []
  type: TYPE_NORMAL
- en: If we run `ionic serve` and port `8100` is already taken, Ionic will launch
    the app on `8101`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also serve the Ionic app on any other port using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the application is successfully launched and we have seen the output in
    the browser, we will navigate back to the command prompt/terminalÂ and we should
    see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The browser developer tools setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we proceed further, I would recommend setting up the developer tools
    in your browser in the following format.
  prefs: []
  type: TYPE_NORMAL
- en: Google Chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the Ionic app is launched, open the developer tools by pressing *Command*
    + *Option* + *I* on Mac and *Ctrl* + *Shift* + *I* on Windows/Linux. Then click
    on the last but one icon in the top row, next to the close button, as seen in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will dock developer tools to the side of the current page. Drag the demarcation
    line between the browser and the developer tools until the viewÂ starts to resemble
    that of a mobile.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on the Elements tab in the developer tools, you can easily inspect
    the page and see the output in one go, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This view is very helpful for fixing errors and debugging issues.
  prefs: []
  type: TYPE_NORMAL
- en: Mozilla Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are a Mozilla Firefox fan, we can achieve the preceding result using
    Firefox as well. Once the Ionic app is launched, open developer tools (not Firebug,
    Firefox''s native development tools) by pressing *Command* + *Option* + *I* on
    Mac andÂ *Ctrl* + *Shift* + *I* on Windows/Linux. Then click on the dock to the
    side of the browser window icon, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can drag the demarcation line to achieve the same result as that we
    sawÂ in Chrome:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Ionic project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have scaffolded a blank Ionic app and launched it in a browser. Now,
    we will walk through the scaffolded project structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we open the `chapter2 example1` folder in our text editor, we should see
    the following folder structure at the root of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a quick explanation of each of the items:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src`: This is the folder where all the development happens. The app source
    code will be placed here. If you are coming from Ionic 1 to Ionic 2, this is the
    first change you would notice. ForÂ me, this is a very good upgrade toÂ the folder
    structure, as it keeps the development code separate from the deployment code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hooks`: This folder consists of scripts that get executed when a particular
    Cordova task is performed. A Cordova task can be any of the following: `after_platform_add`
    (after a new platform is added), `after_plugin_add` (after a new plugin is added),
    `before_emulate` (before emulation begins), `after_run` (before the app is run),
    and so on. Each task is placed inside a folder named after the Cordova task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources`: This folder consists of the various versions of the application
    icon and splash screen based on the mobile operating system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`www`: This folder consists of the build Ionic code, written inside the `src`
    folder. All the code present inside this folder is intended to land inside the
    WebView.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config.xml`: This file consists of all the meta information needed by Cordova
    while converting our Ionic app to a platform-specific installer. If you open `config.xml`,
    you will see a bunch of XML tags that describe our project. We will take a look
    at this file in detail again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ionic.config.js`: This file consists of the configuration that is needed for
    the build task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This file consists of the project-level node dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.json`: This file consists of the TypeScript configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tslint.json`: This file consists of TS lint rules. To know more about these
    rules, refer to: [https://palantir.github.io/tslint/rules/](https://palantir.github.io/tslint/rules/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The config.xml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `config.xml` file is a platform-agnostic configuration file. As mentioned
    earlier, this file consists of all the information needed by Cordova to convert
    the code in the `www` folder to the platform-specific installer.
  prefs: []
  type: TYPE_NORMAL
- en: The setting up of the `config.xml` file is based on W3C's packaged web apps
    (widgets) specification ([http://www.w3.org/TR/widgets/](http://www.w3.org/TR/widgets/)),
    and it is extended to specify core Cordova API features, plugins, and platform-specific
    settings. There are two types of configurations that we can add to this file.
    One is global, that is, common to all devices, and the other is specific to the
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we open `config.xml`, the first tag we encounter is the XML root tag. Next,
    we can see the widget tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `id` specified previously is the reverse domain name of our app, which we
    provided while scaffolding. Other specifications are defined inside the widget
    tag as its children. The children tags include the app name (which gets displayed
    belowÂ the app icon when installed on the device), app description, and author
    details.
  prefs: []
  type: TYPE_NORMAL
- en: It also consists of the configuration that needs to be adhered to while converting
    code in the `src` folder to a native installer.
  prefs: []
  type: TYPE_NORMAL
- en: The content tag defines the starting page of the application.
  prefs: []
  type: TYPE_NORMAL
- en: The access tag defines the URLs that are allowed to load in the app. By default,
    it loads all the URLs.
  prefs: []
  type: TYPE_NORMAL
- en: The preference tag sets the various options as name value pairs. For instance,
    `DisallowOverscroll` describes weatherÂ there should be any visual feedback when
    the user scrolls past the beginning or end of the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about platform-specific configurations at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Android: [http://docs.phonegap.com/en/edge/guide_platforms_android_config.md.html#Android%20Configuration](http://docs.phonegap.com/en/4.0.0edge/guide_platforms_android_config.md.html#Android%2520Configuration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'iOS: [http://docs.phonegap.com/en/edge/guide_platforms_ios_config.md.html#iOS%20Configuration](http://docs.phonegap.com/en/4.0.0edge/guide_platforms_ios_config.md.html#iOS%2520Configuration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance ofÂ platform-specific configurations and global configurations
    is the same. You can read more about global configuration at [http://docs.phonegap.com/en/edge/config_ref_index.md.html#The%20config.xml%20File](http://docs.phonegap.com/en/4.0.0edge/config_ref_index.md.html#The%2520config.xml%2520File).
  prefs: []
  type: TYPE_NORMAL
- en: The src folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, this folder consists of our Ionic app, the HTML, CSS,
    and JS codes. If we open the `src` folder, we will find the following file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at each of these in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app folder`: The app folder consists of the environment specific initializing
    files. This folder consists of `app.module.ts` where the `@NgModule` module is
    defined. `app.component.ts` consists of the root component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assets folder`: This folder consists of all the static assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pages folder:` This folder consists of the pages that we are going to create.
    In this example, we already have a sample page named `home`. Each page is a component,
    which consist of the business logic - `home.ts`, the markup - `home.html` and
    the component related styles - `home.scss`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme folder`: This folder consists of `variables.scss`, overriding which
    will change the look and feel of the Ionic components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`: This is where everything starts from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This completes our tour of the blank template. Before we scaffold the next template,
    let us take a quick peek at the `src/app/app.component.ts` file.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we are creating a new app/root component. The `@Component` decorator
    needs a `template` or `templateUrl` property to correctly load the Ionic 2 application.
    As part of the template, we add the `ion-nav` component.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the class definition, we have declared a `rootPage` and assigned it to
    the home page, and inside the constructor, we have the platform ready callback,
    which will be called when the platform is ready.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very simple and basic Ionic app. So far you must have worked on Angular
    code related to the web. But when you are dealing with Ionic, you would be working
    with scripts related to device features as well. Ionic provides us services to
    make these things happen in a more organized fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding the tabs template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get a good feel forÂ the Ionic CLI and the project structure, we will scaffold
    the other two starter templates as well. First we will scaffold the tabs template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `cd` command, go back to the `chapter2` folder and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The tabs project is scaffolded inside the `example2` folder. Using the `cd`
    command, go to the `example2` folder and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the tabbed interface app built using Ionic, as seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The tabs are located at the bottom of the page. We will talk more about customizations
    in [Chapter 3](part0064.html#1T1400-9757c8e51afd47e0a7a9ced32db749b8), *Ionic
    Components and Navigation*, and [Chapter 4](part0079.html#2BASE0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic Decorators and Services*.
  prefs: []
  type: TYPE_NORMAL
- en: If you go back to the `example2` folder and analyze the project structure, everything
    would be the same except for the contents of the `src`/`pages` folder.
  prefs: []
  type: TYPE_NORMAL
- en: This time, you will see four folders in the pages folder. The tabs folder consists
    of the tabs definition and the about, contact, and home folders consist of the
    definition for each of the tabs.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can get a good idea of how Ionic is integrated with Angular, and how
    all the components go hand-in-hand. When we deal with a few more pieces of Ionic,
    this structure will make a lot more sense.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding the side menu template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will scaffold the final template. Using the `cd` command, go back to
    the `chapter2` folder and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute the scaffolded project, using the `cd` command, go to the `example3`
    folder and give the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can analyze the project structure yourself and see the difference.
  prefs: []
  type: TYPE_NORMAL
- en: You can run `ionic start -l` or `ionic templates` to view the list of available
    templates. You can also use the `ionic start task` with the template name from
    the list to scaffold the app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we gained some knowledge on Mobile Hybrid architecture. We
    have also learned how a hybrid app works. We saw how Cordova stitches the HTML,
    CSS, and JS code to be executed inside the WebView of a native app. Then we installed
    the required software to develop Ionic apps locally. We scaffolded a blank template
    using the Ionic CLI and analyzed the project structure. Later on, we scaffolded
    the other two templates and observed the difference.
  prefs: []
  type: TYPE_NORMAL
- en: You can also refer to Ionic slides at [http://ionicframework.com/present-ionic/slides](http://ionicframework.com/present-ionic/slides)
    for some more information.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, *Ionic Components and Navigation*, we will look atÂ Ionic
    components and how to build a simple two page application and navigate between
    them. This will help us in building interesting user interfaces and multipage
    apps using the Ionic API.
  prefs: []
  type: TYPE_NORMAL
