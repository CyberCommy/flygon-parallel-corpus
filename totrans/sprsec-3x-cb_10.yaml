- en: Chapter 10. Spring Security with Spring Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Applying Spring Security on RESTful web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security for Spring RESTful web service using the cURL tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Spring Security with Apache CXF RESTful service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Spring Security with Apache CXF SOAP based web service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Spring Security with Apache Camel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SOAP** (**Simple Object Access Protocol**) is an XML-based web service. It
    is used to transfer the request and response messages between web services.'
  prefs: []
  type: TYPE_NORMAL
- en: '**REST** (**Representational State Transfer**) is a means of sending data as
    XML, text, or JSON files over the HTTP protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will apply Spring Security to web services. The normal flow
    of any web service is that the service WSDL or URL will be exposed to the end
    user. On application of Spring Security, the end users can be authenticated and
    authorized to use the services.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Spring Security on RESTful web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: REST has become another means of providing web services.
  prefs: []
  type: TYPE_NORMAL
- en: The data can be shared across applications using XML, text, or in JSON format.
    REST web services are considered as lightweight web services.
  prefs: []
  type: TYPE_NORMAL
- en: Let's apply Spring Security for accessing the REST web service, so that only
    authorized users can access the RESTful web service. Since the RESTful web service
    is accessed with a URL and uses HTTP protocol we can easily apply the URL level
    security. This example demonstrates form-based authentication. But the user can
    also use BASIC and Digest Authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the annotations used with Spring to generate RESTful web
    services:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@PathVariable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@RequestMapping`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@RequestMethod`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a RESTful web service using Spring web service API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Spring Security dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Spring filter configuration to the `Web.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `application-security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an `AccessController` class to handle the login and logout actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure Spring Security in the application to authenticate the users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps for integrating RESTful web services with Spring
    Security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a `BookController` class with `@PathVariable`, as shown in the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `Books` POJO class with the `@JsonAutoDetect` annotation, as shown
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `AccessController` class to handle login and logout actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the `Application-security.xml` file, as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access the URL: `http://localhost:8080/booksservice/books/1`. This is the REST-based
    URL, which is restricted from access using Spring Security. When the user calls
    the REST-based web service URL, Spring Security redirects the user to the login
    page. On successful authentication, the user is redirected to the authorized REST-based
    web service page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the workflow of the REST-based application with Spring Security.
    You will be redirected to the login page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On authentication and authorization, you will be able to access the RESTful
    web service, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache CXF RESTful web service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache CXF SOAP based web service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache Camel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security for Spring RESTful web service using the cURL tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example we are using the Spring Security API classes and interfaces
    explicitly. We will authenticate the RESTful web service using the `curl` command.
    With the cURL tool, you can transfer data with the URL. It can be used to test
    the authentication. It's the same book service example which has some explicit
    Spring Security related API classes such as `AuthenticationEntryPoint` and `SimpleURLAuthenticationSuccessHandler`.
    Here, the goal is to demonstrate their internal usage in Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implement the `AuthenticationEntryPoint` interface and configure in the XML
    file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extend `SimpleUrlAuthenticationSuccessHandler` and configure in the XML file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `Application-security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add security related filters to the `Web.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the cURL tool for your operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps for applying the Spring Security authentication
    and authorization mechanism by using `AuthenticationEntryPoint` interface and
    `SimpleURLAuthenticationSuccessHandler` class:'
  prefs: []
  type: TYPE_NORMAL
- en: The `AuthenticationEntryPoint` class is an entry class for authentication and
    it implements the `AuthenticationEntryPointImpl` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Extend the `SimpleURLAuthenticationSuccessHandler` class, as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Configure the `Application-security.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now access the URL: `http://localhost:8080/booksservice/books/1`'
  prefs: []
  type: TYPE_NORMAL
- en: You will see a page which says that you are not authorized to view the pages.
  prefs: []
  type: TYPE_NORMAL
- en: Let's use the cURL tool which gives us a cookie. The `200 OK` message implies
    that we are authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The cookies are stored in a file named `mycookies.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_10_03.jpg)![How it works...](img/7525OS_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache CXF RESTful web service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache CXF SOAP based web service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache Camel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Spring Security with Apache CXF RESTful web service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section let us create an Apache CXF RESTful web service. It is an open
    source web service framework. Let's use BASIC authentication for this demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: CXF supports contract-first and contract-last web services. It also supports
    RESTful web services.
  prefs: []
  type: TYPE_NORMAL
- en: Let us integrate Spring Security with CXF and authorize a RESTful web service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add the `cxf` dependency to the `pom` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up the RESTful web service with CXF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `spring-security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to integrate Spring Security with Apache CXF RESTful
    web services:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the `Book` POJO class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Configure the `BookCollection` POJO class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Configure the `BookService` interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Configure the `BookServiceImpl` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Configuring the `application-security.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Configure the `Web.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The RESTful service is provided by the CXF framework in this example. Then the
    application is integrated with Spring Security in order to provide secured authentication
    and authorization module to RESTful web service. Spring Security filter chain
    manages the authentication and authorization process. When you access the service,
    you will be prompted to log in, as shown in the following screenshot. After login,
    you can view the RESTful data. The Mozilla Firefox browser will prompt the user
    to download the data in a file format.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now access the URL: `http://localhost:8080/booksservice_cxf/services/services/book/1`'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache CXF RESTful web service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache Camel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Spring Security with Apache CXF SOAP based web service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's create a SOAP-based web service. We will demonstrate
    the integration of Spring Security with Apache CXF SOAP-based web service.
  prefs: []
  type: TYPE_NORMAL
- en: Creation of SOAP-based web service has become a simple process with Apache CXF.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add the CXF-SOAP dependency to the `pom` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Spring Security-based dependency to the `pom` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a SOAP-based web service with `interface` and an `Impl` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `spring-security.xml` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add jars to the `Tomcat_7.0/lib` folder as a part of setup. Tomcat requires
    the following jar files in its `lib` folder to work with CXF web services. Absence
    of these jars can cause some errors:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`streambuffer.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stax-ex`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jaxws-ap-2.1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jaxws-rt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to integrate Apache CXF SOAP-based web service
    with Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Book` POJO has getter and setter methods. It also has a parameterized constructor.
    The `Book` POJO is used in the `BookService` interface, to give details on `Book`
    that is requested from the client application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `BookService` interface is created with the `@WebService` annotation, in
    which `getBookDetails` is the service method in the WSDL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `BookServiceImpl` class is the implementation class of the `BookService`
    interface, and it is configured as an end point interface using `@webservice`
    annotation package `org.packt.cxf.service`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the `Cxf-servlet.xml` file, we register the web service interface and the
    implementation class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the `Web.xml` file, we give reference to the location of `cxf-servlet.xml`
    and configure `CXFSservlet`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section we demonstrate basic authentication on web service. Access
    the URL: `http://localhost:8080/bookservice/`'
  prefs: []
  type: TYPE_NORMAL
- en: We have used the CXF framework to create a SOAP-based web service. When the
    URL is accessed by the user, the expected behavior is to give access to the WSDL
    and its services. But the Spring Security interrupts the request and pops up a
    login dialog box for the user. On successful authentication, the user gets to
    access the WSDL.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_10_07.jpg)![How it works...](img/7525OS_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Generated WSDL is available at the following URL: `http://localhost:8080/bookservice/BookService?wsdl`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache CXF RESTful web service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache Camel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Spring Security with Apache Camel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Camel can be used to define rules for routing and mediating applications.
    Spring Security can be used with Apache Camel to authenticate the router. Spring
    Security authentication policy object controls the access to the router. The Spring
    Security authentication policy object contains the role information and has reference
    to the Spring authentication manager. You can download the source code from the
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create Camel context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add routing rules using the XML configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Spring XML file configure the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access decision manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Role voter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User details service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the authentication policy object with authorities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `camel-spring-security` dependency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to integrate Apache Camel with Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `Camel–context.xml` file and also define the routing rules with Spring
    Security.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Configure Camel servlet in `Web.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now access the URL: `http://localhost:8080/apachecamel/editor`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `camel-context.xml` file has routing rules; the location of the `camel-context.xml`
    file is configured in `Web.xml` along with `CamelServlet` to handle the routing
    mechanism. The `<authorizationpolicy>` tag handles the authentication and authorization
    of the resources configured in the `spring-security.xml` file. The `<spring-security:user-service>`
    tag has details of the users and roles to whom the access can be given before
    routing the requests. The following is the workflow of Apache Camel interrupting
    the routing process using Spring Security. The user is authorized on either of
    the two roles: `EDITOR` or `AUTHOR`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache CXF RESTful web service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Integrating Spring Security with Apache Camel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
