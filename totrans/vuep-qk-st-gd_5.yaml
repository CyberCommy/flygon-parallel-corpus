- en: Using Markdown in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In  [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating a Site
    in VuePress*, we learned how to set up a site or blog using VuePress. If you've
    been following the book so far, you should have an active VuePress installation
    on your local server or machine, with all the variables in place. Plus, you should
    also be aware of the various config values that you can tweak to get the most
    out of VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond that, you also know how to work with pages, how to set up site structure
    and navigation, apply the default styles, and more.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, you know how to get a VuePress site up and running, as well
    as how to populate it with content.
  prefs: []
  type: TYPE_NORMAL
- en: But speaking of content, how to manage and add content in VuePress? The easiest
    and preferred way to get things done in this case is with the use of Markdown.
  prefs: []
  type: TYPE_NORMAL
- en: Markdown is a simple and lightweight markup language that comes with its own
    formatting and syntax. Owing to its simplicity and ease of use, Markdown has risen
    in popularity ever since its birth.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn not just what Markdown is, but how to use it
    in VuePress. We will learn about Markdown syntax, as well as Markdown extensions
    for VuePress, and Markdown's various config variables.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to input content using Markdown
    not only in VuePress, but in any other content management system as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Markdown?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How is Markdown used?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markdown configuration in VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markdown extensions for VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting Markdown content in VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning Markdown for usage in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is highly advisable to gain some basic skills in Markdown formatting, as
    it is soon to become the de facto standard in the world of technical documentation,
    such as in README files for projects in VuePress, or even Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: What is Markdown?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have been active in the field of web development, you might already have
    come across Markdown, and may very well be using it in your projects. Naturally,
    owing to its popularity, Markdown does not need a hefty introduction.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, it might be worth the effort to mention Markdown and its advantages
    in passing, so that even readers new to the topic may find it of some merit.
  prefs: []
  type: TYPE_NORMAL
- en: Simply put, Markdown is a content formatting solution that focuses on ease of
    use and readability. It was created in the year 2004 by John Gruber, in collaboration
    with Aaron Swartz. The goal here was to provide plain text content in a more presentable
    format and, should the need ever arise, optionally convert this into valid HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Owing to its highly simplified and very presentable nature, Markdown gained
    a good following among the technically capable.
  prefs: []
  type: TYPE_NORMAL
- en: Markdown comes with a BSD-style license, and is currently available for various
    content management systems in the form of specialized plugins. Even WordPress
    has several Markdown plugins available.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, many websites and projects have implemented their own customised
    variants of Markdown. These users include SourceForge, GitHub, reddit, Stack Exchange,
    and many others.
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Notice that we talked about readability in the preceding section? Well, Markdown
    focuses heavily on being readable, even in its raw format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following piece of simple HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, compare the preceding example with the following code in Markdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Both of the previous code samples will give the same output. This will appear
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3d103c42-83a4-47dd-9d16-1fd4f17f99d5.png)'
  prefs: []
  type: TYPE_IMG
- en: But, as you can see, the Markdown code is rather clean to look at and easier
    to read than the HTML. It is not overloaded with cumbersome tags and other elements.
    Simple formatting aids mean that you can read the text even in its raw format
    (that is, without the output). This is where the simplicity and beauty of Markdown
    lies! It is highly readable, easy to grasp, and very easy to type.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the features and settings of Markdown on the official
    website, available at [https://daringfireball.net/projects/markdown](https://daringfireball.net/projects/markdown).
  prefs: []
  type: TYPE_NORMAL
- en: Naturally, many static site content management systems, such as VuePress, tend
    to favor Markdown for these very reasons. As a result, it is a good idea to try
    to grasp some of the basic formatting aids in Markdown in order to get the most
    out of VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: The markdown-it parser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned what Markdown is and what advantages it can offer us,
    it is time to get started on learning about Markdown usage and variations in VuePress.
    However, before we get to the VuePress environment, we must educate ourselves
    about a Markdown parser named markdown-it.
  prefs: []
  type: TYPE_NORMAL
- en: What does a Markdown parser do?
  prefs: []
  type: TYPE_NORMAL
- en: Its simplest task is to analyze and break down Markdown statements into syntactical
    components for easier processing.
  prefs: []
  type: TYPE_NORMAL
- en: markdown-it does its job fairly well and is rather easy to use. It comes with
    its own set of custom extensions, multiple plugins, and does not slow down your
    environment at all. Most of the Markdown extensions and config variables in VuePress
    work well with markdown-it, and some can be used only via markdown-it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use markdown-it, you first need to install it. It can be done via
    npm, as is the case with VuePress as well (you have learned about npm installation
    in [Chapter 1](4e1526aa-d994-42d8-9a18-12374ba932a0.xhtml), *Introducing Static
    Site Generators and VuePress*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Following this, you can load its plugins and make use of it as per your needs.
    To learn more about the markdown-it parser, you can check out its GitHub repository
    at [https://github.com/markdown-it/markdown-it](https://github.com/markdown-it/markdown-it).
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, there is also a working demo available at [https://markdown-it.github.io/](https://markdown-it.github.io/), which
    can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b4eeb097-6bb9-4457-b347-e5bb32d366ae.png)'
  prefs: []
  type: TYPE_IMG
- en: VuePress uses markdown-it as the default Markdown parser or renderer. Naturally,
    you can make use not just of markdown-it, but also its custom extensions and plugins
    within VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: In order to further customize markdown-it in VuePress, it might be a good idea
    to modify your `.vuepress/config.js` file to add the Markdown instance and modify
    it therein. We have already covered the contents and details of the `.vuepress/config.js`
    file in previous chapters. Note that you can refer to the markdown-it documentation
    for further details related to various plugins, and how to reference them for
    our usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how your sample code should look when added to the `config.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the last part of this code, be sure to add the relevant name of the markdown-it
    extension that you wish to use. Note that we will be covering the markdown-it-anchor
    and markdown-it-toc extensions in this chapter itself to help you better understand
    how to reference them and what output to expect.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned what Markdown is, what the markdown-it parser is,
    and how VuePress uses it as the default renderer for Markdown, it is safe to turn
    to the Markdown configuration variables and values in VuePress. Following that,
    we will turn our attention to VuePress usage and handling of Markdown.
  prefs: []
  type: TYPE_NORMAL
- en: Markdown config reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we will first focus on the various configuration-related entities
    for Markdown in VuePress. Note that these are VuePress-specific and may not hold
    true for other static site generators.
  prefs: []
  type: TYPE_NORMAL
- en: We have already covered basic config values in [Chapter 3](490b74d6-1bb0-4194-9173-c04c98e2b1e9.xhtml),
    *VuePress Development – Preliminary Steps*. Beyond that, we will be turning to
    theme-specific config values and their uses in the subsequent chapter that deals
    with custom themes.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will be focusing only on those values and variables that pertain
    to Markdown in the VuePress configuration. As you progress with VuePress in your
    projects, you can make use of these config reference entities to better manage
    your content in Markdown, and make sure that it is formatted and presented just
    the way you want it to be.
  prefs: []
  type: TYPE_NORMAL
- en: markdown.slugify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a very important function that you should, by all means, be aware of.
    In VuePress, markdown.slugify can be used to transform header text into slugs.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, you can input the header text in Markdown, and then use this function
    to generate a slug (that is, a URL or permalink) on the basis of that header text.
    Naturally, this means it is used mostly for anchor links, tables of contents,
    and other related material.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since `markdown.slugify` is of the function type, there is no value definition
    for it in terms of datatypes. Instead, it has a function definition.  Let''s take
    a look at its general syntax in closer detail to further understand its functioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can also browse the same source code at [https://github.com/vuejs/vuepress/blob/master/lib/markdown/slugify.js](https://github.com/vuejs/vuepress/blob/master/lib/markdown/slugify.js).
  prefs: []
  type: TYPE_NORMAL
- en: Now, did you notice what this function is doing? It takes the header text, removes
    its space characters so that they can be replaced by hyphens (`-`), then further
    removes any prefixes and trailing characters, and then, lastly, converts the header
    text to lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if our header text is `Header SamPLE`, it will convert it to `header-sample`
    for the slug. Naturally, because the slug is part of the URL, it cannot have certain
    characters and spaces in between. `markdown.slugify` ensures that this is the
    case.
  prefs: []
  type: TYPE_NORMAL
- en: markdown.externalLinks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `markdown.externalLinks` is used for adding external links to content (as
    is obvious from the name). By default, it pairs its values within the `<a>` tags
    and opens the external links in a new window.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `markdown.externalLinks` is of the object type and its default syntax is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you wish to not open the external link in a new window (for SEO reasons,
    or something similar), you can eliminate the `target:'_blank'` part, much like
    you would in any other HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: markdown.config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: markdown.config is of the function type and its default value, therefore, is
    undefined.
  prefs: []
  type: TYPE_NORMAL
- en: It is used to modify the default configuration, and also add additional functionality
    or external plugins to the markdown-it Markdown parser that we discussed in the
    previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample demonstrating its use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, markdown.config adds the requirement for an external
    entity named markdown-it-something, and can then be used to implement the added
    features of the same external entity.
  prefs: []
  type: TYPE_NORMAL
- en: markdown.toc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `markdown.toc` provides options for adding a table of contents to our website.
    It is especially useful if you are planning a site that will require such a table
    of contents, for example, a knowledge base site or the chapter layout of an online
    novel or book.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is of the object type and its default syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It is worth noting that `markdown.toc`, in reality, works with the markdown-it-table-of-contents
    plugin. This particular plugin provides a table of contents layout for the markdown-it
    plugin. You can learn more about it at [https://github.com/Oktavilla/markdown-it-table-of-contents](https://github.com/Oktavilla/markdown-it-table-of-contents).
  prefs: []
  type: TYPE_NORMAL
- en: markdown.anchor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `markdown.anchor` is of the object type and its general syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It provides options for adding header anchors to your content.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this should not be confused with header slugs or IDs that are added
    by `markdown.slugify`, as discussed previously. Instead, markdown.anchor lets
    you add anchor links within your content.
  prefs: []
  type: TYPE_NORMAL
- en: It works in assonance with the markdown-it-anchor plugin that adds header anchor
    functionality to markdown-it. You can learn more about this plugin on its GitHub
    page at [https://github.com/valeriangalliat/markdown-it-anchor](https://github.com/valeriangalliat/markdown-it-anchor).
  prefs: []
  type: TYPE_NORMAL
- en: markdown.lineNumbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever you add content such as code blocks to your VuePress site, you can
    optionally choose whether or not to show line numbers next to code blocks. For
    that purpose, you can make use of `markdown.lineNumbers` config entity.
  prefs: []
  type: TYPE_NORMAL
- en: The `markdown.lineNumbers` is of the `boolean` type, as it accepts a simple
    `true` or `false` value for showing (or not showing) line numbers.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, when the `markdown.lineNumbers` config value is set to true, code
    inputs will have line numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With the config value set as such, any code inputs will have line numbers appended
    to them. For example, if we were to show the same code in the page as preformatted
    content, here is how it will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6a450d13-1187-430e-861a-d8de7db545d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have covered almost all the relevant Markdown config terms, it is
    time to turn our attention toward Markdown extensions as used in VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: Markdown extensions in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we speak of Markdown extensions in VuePress, we are referring to those
    Markdown extensions that are available for immediate use within VuePress. You
    have seen how Markdown formatting can be used in everyday usage of VuePress in
    [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating a Site in VuePress*.
  prefs: []
  type: TYPE_NORMAL
- en: Header anchors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All headers in VuePress automatically get anchor links applied to them for easier
    navigation. This is mainly and primarily to facilitate navigation across site
    content, as VuePress is primarily a documentation management tool and not really
    a business site solution. Navigating by means of headers is the easiest way to
    manage content in this case.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to configure or modify the anchor settings, you can make use of
    the `markdown.anchor` config option, as discussed in a previous section of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In VuePress, links can either be internal or external.
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, internal links point to local content, whereas external
    links point to content of other websites and projects.
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss each one separately in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: External links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All external and outbound links to third-party websites automatically get the
    `target="_blank" rel="noopener noreferrer"` tag attached to them. This means that
    all external links tend to open in new windows (or browser tabs). You can modify
    this setting using the `markdown.externalLinks` config option, as discussed in
    the previous section of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Internal links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, it is worth remembering that VuePress generates **single page
    applications** (**SPAs**) for easier and faster navigation across site content.
    Now, in order to make SPA navigation possible, all local or inbound links need
    to be converted to router-links.
  prefs: []
  type: TYPE_NORMAL
- en: VuePress accomplishes this by converting all internal links ending in Markdown
    or HTML formats into `<router-link>`.
  prefs: []
  type: TYPE_NORMAL
- en: We learned in the previous chapter that every sub-directory in VuePress, unless
    it is not publicly accessible, must have a `README.md` file that will, in turn,
    be converted into an `index.html` file by VuePress before being served in the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Naturally, when adding an internal link to your content, you need to specify
    the proper file extension within the file path, otherwise you will get a 404 error.
    Thus, the following considerations must be borne in mind when adding internal
    or local links in VuePress:'
  prefs: []
  type: TYPE_NORMAL
- en: The `.html` or `.md`—the proper file extension must be appended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When writing the relative path to a file or resource, the trailing slash `/`
    is mandatory. In the absence of the trailing slash, VuePress fails to follow the
    relative path and will give a 404 error. Thus, `/mypath` is incorrect, whereas
    `/mypath/` is correct.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All path specifications are case-sensitive in nature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, to better comprehend these requirements, let''s take an example. Consider
    the following directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b23b3e6e-45c2-4554-8132-c81992ac1209.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table shows how the linking syntax for this structure should
    work:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **RELATIVE PATH** | **MARKDOWN** | **EXPLANATION** |'
  prefs: []
  type: TYPE_TB
- en: '| `/` | `[Home]` | The `README` file located at `root` folder |'
  prefs: []
  type: TYPE_TB
- en: '| `/testx/` | `[testx]` | The `README` file located inside `testx` sub-directory.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/testx/filea.md` | `[testx - filea]` | The `filea.md` file inside `testx`
    sub-dir; notice the `.md` extension. |'
  prefs: []
  type: TYPE_TB
- en: '| `/testx/fileb.html` | `[testx - fileb]` |'
  prefs: []
  type: TYPE_TB
- en: '&#124; The `fileb.md` file inside `testx` sub-dir; notice the `.html` extension,
    it still points to the `.md` file.  &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;  &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we can clearly see that the `.md` extension is automatically
    converted to parsed HTML by VuePress when rendering the page.
  prefs: []
  type: TYPE_NORMAL
- en: Emoji
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Considering the fact that emoji have become rather popular, there should be
    a way to properly format and include them in your content, should you so desire.
    WordPress has even integrated its own custom WordPress emoji that you can use
    in your content, or, alternatively, remove outright and rely instead on browser
    emoji.
  prefs: []
  type: TYPE_NORMAL
- en: However, unlike WordPress, VuePress focuses more on being lightweight and swift.
    Therefore, shipping with custom emoji sets in its core is of little sense in VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you can easily make use of the markdown-it-emoji plugin that comes
    loaded with over 1,000 emoji for you to choose from. Here is a sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b5d102f-74c0-43e1-aa6b-b0b71c3ff4ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can choose to go with the full version that offers all the GitHub-support
    emoji, or the light version that only offers the Unicode emoji. This particular
    plugin also supports character-based emoticons, such as `:-)` and others. It works
    with the markdown-it parser and can be installed via npm as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Of course, our primary focus here is how to use markdown-it-emoji in VuePress.
    To learn more about the plugin itself, you can find its GitHub page at [https://github.com/markdown-it/markdown-it-emoji](https://github.com/markdown-it/markdown-it-emoji).
  prefs: []
  type: TYPE_NORMAL
- en: 'In VuePress, you simply need to specify the emoji you require by typing its
    name inside two colons. For instance, to add a skull, an alien, a screaming face,
    and a sunglasses emoji on each successive line, try the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And the final output in browser will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8ab31bad-2450-42cc-9c9e-7781070cd70c.png)'
  prefs: []
  type: TYPE_IMG
- en: Of course, the final actual appearance of the emoji may also vary depending
    on your operating system and browser version. At times, certain web browsers tend
    to replace the default web emoji with their own variants.
  prefs: []
  type: TYPE_NORMAL
- en: Adding tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two major types of tables that VuePress supports in Markdown right
    out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one, obviously, is a table of contents. This is not a pure table,
    in the sense there are hardly any rows or columns, but is called a table nonetheless,
    so let’s keep it that way. The syntax here is simple, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will automatically generate a table of contents on the basis of the headers
    in your content. You can customize it further by using the `markdown.toc` config
    option, as described previously in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The second type of table in VuePress resembles the table layout on GitHub. In
    fact, it is called a GitHub style table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume we are creating a simple table outlining each country''s capital,
    tourist attraction, popular sport, and currency. You can enter the formatting
    and details in Markdown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6af5c01f-1e35-4d4c-8b1a-cbe9973bfe07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And the output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f51a2fbc-33c6-41f4-994d-0fba4d388939.png)'
  prefs: []
  type: TYPE_IMG
- en: That's all that there is to tables in VuePress. The tables are automatically
    formatted, and alternate rows are highlighted, as well, to give the table a more
    presentable appearance.
  prefs: []
  type: TYPE_NORMAL
- en: Front matter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concept of front matter by means of YAML data serialization was first popularized
    by Jekyll, another very popular and versatile static site generator that we discussed
    briefly in [Chapter 1](4e1526aa-d994-42d8-9a18-12374ba932a0.xhtml), *Introducing
    Static Site Generators and VuePress*.
  prefs: []
  type: TYPE_NORMAL
- en: Put simply, front matter contents are placed at the start of the file in between
    triple dashes. Inside that content, you can specify custom and predefined variables
    to provide further info about your project. Such variables will then be available
    to you for use throughout all pages, as well as custom components.
  prefs: []
  type: TYPE_NORMAL
- en: Discussing all of the variables associated with front matter is far beyond the
    scope of this quick start guide. However, you can check out more info on this
    topic on the website of the Jekyll project at [https://jekyllrb.com/docs/frontmatter/](https://jekyllrb.com/docs/frontmatter/).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's return to VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: In VuePress, YAML front matter is supported out of the box without the use of
    any custom imports or additional extensions. Thus, whatever you specify between
    the triple-dashed lines will be available throughout the entire page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s understand it with the help of an example. Consider the following front
    matter code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, in the preceding example, the title and lang variables are specified for
    the entire page anyway. You can, then, add custom meta tags, such as site description
    and SEO-related keywords, that will in turn be applicable to the entire page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just in case YAML is not your preferred type of scripting solution, you can
    alternatively opt for other options. TOML is supported too—to use it, you just
    need to specify that you prefer TOML, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'However, more often than not, many JavaScript coders would prefer JSON. In
    this case, you need to follow the standard JSON format for front matter; that
    is, using curly braces and quotes, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Front matter specification is fairly common in the world of static site generators,
    and anyone who has had experience of working with one such generator is almost
    certain to already be aware of the role of front matter.
  prefs: []
  type: TYPE_NORMAL
- en: Custom formatting options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some other lesser-used formatting options in Markdown that VuePress
    natively supports. These will be discussed in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Highlighting in code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can optionally choose to highlight lines in code so as to make the output
    more presentable. Here is some sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fadc0b9f-3bf7-446c-b3e6-f9f613984c08.png)'
  prefs: []
  type: TYPE_IMG
- en: Customized containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you may wish to put emphasis on certain pieces of your content, such
    as warnings, notices, and tips. You can easily highlight them in VuePress so that
    the user's attention is drawn straight to the content at hand.
  prefs: []
  type: TYPE_NORMAL
- en: This means that you first need to specify the given content as a tip, warning,
    or likewise. Thereafter, VuePress will generate the required notice or tip with
    a given colored container.
  prefs: []
  type: TYPE_NORMAL
- en: The final actual appearance may vary, depending on your own configuration, but
    this presentation is fairly comparable to GitHub-flavored Markdown, and if you
    have some experience of formatting `README` and other files in Markdown in GitHub,
    you may have already come across such customized content containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how you can do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d8f145d2-cfc5-4090-bd2a-b0a8e984f649.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can, optionally, tweak the title of each container too, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And once again, the output will show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7baca20a-08f2-4360-ab20-26b87a22f518.png)'
  prefs: []
  type: TYPE_IMG
- en: Importing code snippets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have existing files containing code, you can import code snippets from
    them into your VuePress project. The syntax to do this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: However, you need to bear in mind that you cannot use a path alias in webpack,
    as all imports of code snippets must generally be executed before webpack is compiled.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that importing of code snippets is an experimental feature and is still
    in beta. It may at times not work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code snippets import function supports line highlighting, as discussed
    earlier in this chapter. In this case, the syntax will become the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The default value for `@` will be `process.cwd()`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This brings us to the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned what Markdown is and what makes it so popular, such
    as its simplicity and readability, as well as ease of use. Beyond that, we were
    introduced to markdown-it parser, a very common and popular entity for rendering
    Markdown in static site generation tools such as VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: We have also covered VuePress config values for Markdown. Furthermore, we learned
    about the several Markdown extensions that we have available for use in VuePress.
    This, of course, is not an exhaustive list. Considering the fact that VuePress
    is under active development, you can expect newer values and extensions to be
    added eventually.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, having finished this chapter, you should by now have a good
    enough understanding of Markdown usage in VuePress and should be able to add `.md`
    files, format them in the way you want your content to be presented, and save
    them so that VuePress can render them in HTML and put together an SPA.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of SPAs, we now need to cover one highly important aspect of web development—templating
    and theming!
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about the default VuePress theme and what
    it can do for us, the layout it offers, and how we can use it to present our content.
    However, what about custom themes? In the world of today, it is often preferred,
    and sometimes even required, for websites to have their own individual look and
    feel. A custom theme can help you accomplish just that and make your website stand
    out from the crowd!
  prefs: []
  type: TYPE_NORMAL
- en: Thus, in the next chapter, we will be turning our attention toward custom themes
    in VuePress and covering the relevant topics around this.
  prefs: []
  type: TYPE_NORMAL
