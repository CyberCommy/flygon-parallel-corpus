- en: Getting Started with React and TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is a JavaScript library that helps us build the frontend of an app. It
    allows us to structure our apps using powerful and reusable components. It helps
    us manage the data that the components use, and their state, in a structured fashion.
    It uses something called a virtual DOM to efficiently render our frontend.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript can work beautifully with React, giving us the ability to add static
    types to our React components. The types help our code editor to surface problems
    while we write our React components, and give us tools to safely refactor them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll look at two different ways to create a React and TypeScript
    project. We'll create our first React component, which will be a confirmation
    dialog. Early topics we'll cover are JSX and strongly typed props. We'll look
    at handling the dialog's button click events.
  prefs: []
  type: TYPE_NORMAL
- en: We'll then look at declaring and interacting with strongly typed states, which
    will be used to hide and show the dialog. We'll discuss component life cycle methods,
    and touch on the ones that have been removed in React 17.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we'll look at function components, and when these are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a React and TypeScript project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a class component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling class component events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class component states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class component life cycle methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a function component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We use the following technologies in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js and** `npm`: TypeScript and React are dependent on these. Install
    them from the following link: [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
    If you already have these installed, make sure `npm` is at least version 5.2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**: We''ll need an editor to write our React and TypeScript
    code, which can be installed from [https://code.visualstudio.com/](https://code.visualstudio.com/).
    We''ll also need the TSLint extension (by egamma) and the Prettier extension (by Estben
    Petersen).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Babel Repl**: We''ll use this online tool briefly to explore JSX. This can
    be found at[ https://babeljs.io/repl](https://babeljs.io/repl).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code snippets in this chapter can be found online at [https://github.com/carlrip/LearnReact17WithTypeScript/tree/master/03-GettingStartedWithReactAndTypeScript](https://github.com/carlrip/LearnReact17WithTypeScript/tree/master/03-GettingStartedWithReactAndTypeScript).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a React and TypeScript project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several ways to create a React and TypeScript project. We'll start
    by quickly creating a project using a popular tool called `create-react-app`.
  prefs: []
  type: TYPE_NORMAL
- en: We'll then create a project in a more manual way, helping us to understand all
    the different pieces in play.
  prefs: []
  type: TYPE_NORMAL
- en: Using create-react-app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`create-react-app` is a command-line tool that we can use to quickly create
    a React and TypeScript app with lots of useful pieces.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio Code in an empty folder of your choice. Let''s create an
    app using this tool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the `create-react-app` `npm` package to create a React and TypeScript
    project by entering the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `npx` tool temporarily installs the `create-react-app` `npm` package and
    uses it to create our project.
  prefs: []
  type: TYPE_NORMAL
- en: We chose to call our project `my-react-ts-app`. We also specified `--typescript`,
    which is the bit that tells the tool to set the project up with TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: The tool will take a minute or so to create your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the version of React we use needs to be at least version `16.7.0-alpha.0`.
    We can check this in the `package.json` file. If the version of React in `package.json`
    is less that `16.7.0-alpha.0` then we can install this version using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When the project is created, add TSLint as a development dependency, along
    with some rules that work well with React and Prettier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add a `tslint.json` file, containing some rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here we are merging the generally recommended rules with specific ones for React
    and Prettier. We've enabled the use of `debugger` and `console` statements, which
    will come in handy from time to time as we develop our app.
  prefs: []
  type: TYPE_NORMAL
- en: We've also suppressed the rule about the ordering of `import` statements and
    object literal keys, to make life easier as we copy bits of code from this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now start the app running in a development server, by entering the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few seconds, a browser window opens, with our app running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a96969e2-42c9-4fe9-90a0-87511bdb988b.png)'
  prefs: []
  type: TYPE_IMG
- en: Our React code is in the `src` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our app still running, open the `App.tsx` file. You''ll immediately see
    a linting error on the `render` method, because we haven''t specified the modifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/48d8fa70-431f-4d63-90f4-abff818b1851.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, let''s fix that by adding `public` as the modifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'While we are still in `App.tsx`, let''s change the anchor tag to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Save the file, and go back to the app in the browser. The app has automatically
    changed, showing the new content. Nice!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/85a4cb7a-d20c-4c55-80d7-0b974afb25f8.png)'
  prefs: []
  type: TYPE_IMG
- en: '`create-react-app` has configured a lot of great stuff for us in our project.
    This is great if we just want to quickly start learning React, and skip over how
    the React and TypeScript code is packaged up to be served from a web server.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll do manually do some of what `create-react-app` did
    for us automatically. This will start to give us an understanding of what needs
    to happen when React and TypeScript apps are packaged up.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create a React and TypeScript project manually, step
    by step. We'll start by creating our folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our folder structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need a folder structure that gives us decent separation between the project's
    configuration files, source code, and files to distribute to our web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'All our configuration files will go in our project route:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio Code in an empty folder of your choice, and create a folder
    called `src`. This will hold our source code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's also create a folder called `dist`. This will hold the files to distribute
    to our web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating package.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `package.json`file defines our project name, description, build commands,
    dependent `npm` modules, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal window, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will prompt you for various bits of information about the project, and
    then create a `package.json` file containing that information.
  prefs: []
  type: TYPE_NORMAL
- en: Adding TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We installed TypeScript globally in [Chapter 1](372b9509-9775-47b7-88eb-dc68c8a6271f.xhtml),
    *TypeScript Basics*. In this section, we are going to install it locally within
    our project. Having TypeScript locally simplifies the build process a little bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install TypeScript just within our project by running the following
    command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `--save-dev` command marks the TypeScript dependency as being only for development
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tsconfig.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As outlined in [Chapter 1](372b9509-9775-47b7-88eb-dc68c8a6271f.xhtml),* TypeScript
    Basics*, `tsconfig.json` specifies how our TypeScript code is compiled and transpiled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new file called `tsconfig.json` in the root of our project,
    and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adding TSLint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'in [Chapter 1](https://cdp.packtpub.com/learn_react_17_with_typescript_3/wp-admin/post.php?post=24&action=edit#post_24),* TypeScript
    Linting*, introduced us to TSLint. Add it to your project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install TSLint by entering the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a basic `tslint.json` file at the root of our project, and enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Adding React with types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add the React library to our project, by running the following command
    in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We also want the TypeScript types for React. So, add these to our project as
    a development dependency, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating a root web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need an HTML page that is going to host our React app. Create a file called `index.html` in
    our `dist` folder, and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The HTML from our React app will be injected into the `div` with `id ="root"`.
    All the app's JavaScript code will eventually be bundled together into a file
    called `bundle.js` in the `dist` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, neither of these exist at the moment—we'll do this in a later section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple React component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a very simple React component. Create a file called `index.tsx`
    in your `src` folder, and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Our component simply returns `My React App!` in an `h1` tag.
  prefs: []
  type: TYPE_NORMAL
- en: The `tsx` extension distinguishes TypeScript React components from vanilla JavaScript
    React components, which have a `jsx`extension. `React.SFC` is a TypeScript type
    we can use for React components that don't have any internal state. We'll learn
    more about these components later in this book, and we'll look at state later
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to inject our React component into `index.html`. We can do
    that by using the `ReactDOM.render` function. `ReactDOM.render` takes in our component
    as the first parameter, and the HTML element to inject it into as the next element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the highlighted lines into `index.tsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have a small app in place, we need to package it up. We'll cover
    that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack is a popular tool that we can use to bundle all our JavaScript code
    into the `bundle.js` file that our `index.html` is expecting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install webpack and its command-line interface into our project as development
    dependencies, by entering the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Webpack also has a handy web server that we can use during development. So,
    let''s install that as well via the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s one final task to complete before we can start configuring webpack.
    This is to install a webpack plugin called `ts-loader`, which will help it load
    our TypeScript code. Install this as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have all this webpack stuff in our project, it''s time to configure
    it. Create a file called `webpack.config.js` in the project root, and enter the
    following into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s a fair bit going on here, so let''s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: The `module.exports` is our webpack configuration object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `entry` field tells webpack where to start looking for modules to bundle.
    In our project, this is `index.tsx`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `module` field tells webpack how different modules will be treated. Our
    project is telling webpack to use `ts-loader` to handle files with `ts` and `tsx`
    extensions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `resolve` field tells webpack how to resolve modules. In our project, we
    need to process `tsx` and `.ts` files, as well as the standard `.js` files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `output` field tells webpack where to bundle our code. In our project, this
    is the file called `bundle.js` in the `dist` folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `devServer` field configures the webpack development server. We are telling
    it that the root of the web server is the `dist` folder, and to serve files on
    `port 9000`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project folders and files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We should now have the following folders, with the following files within them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We are nearly ready to run our app now—there's just one more thing to do, as
    we'll discuss in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating start and build scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to leverage `npm` scripts to start our app in development mode,
    and also to build a production version of our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open up `package.json`—there should be quite a bit of content in there
    now. We need to find the `scripts` section, which will probably have a single
    script called `test` in place. Add the highlighted scripts for `start` and `build`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command, which produces a production version of our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, webpack will kick in and do its stuff. If we look in the `dist` folder,
    eventually a file called `bundle.js` will appear. This file contains all the JavaScript
    minified code, including code from the React library and our simple React component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The webpack development server will start.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we browse to `http://localhost:9000/` we''ll see our web app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/31fcd5ee-d43e-4ac6-9043-883e5e2fc4ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With our app still running, in `index.tsx`, let''s change our `App` component
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If we save `index.tsx` and go to the browser, we''ll see that our app automatically
    updates with the new content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d6eaae2c-cbff-47d2-8df0-d95baab0d1f9.png)'
  prefs: []
  type: TYPE_IMG
- en: We'll leave our manually-configured project there. It doesn't do as much as
    the `create-react-app` project, but we have started to gain an understanding of
    how React and TypeScript projects are packaged up.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a class component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have created some very simple components. In this section, we are
    going to build a component that is a little more complex, and start to get more
    familiar with some of the different parts of a component.
  prefs: []
  type: TYPE_NORMAL
- en: Together, we'll start to build a component called `Confirm` that will allow
    a user to either continue with an operation or stop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our component will look like the following screenshot when we''ve finished:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/479ba1df-b4b2-42c1-a901-e9684cd9e788.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to use `create-react-app` to spin up a project quickly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up Visual Studio Code in a folder of your choice and enter the following
    in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This time we chose to call our project `my-components`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add TSLint with some rules as a development dependency to our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add a `tslint.json` file, containing the following rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Fix the linting error in `App.tsx` by adding the missing access modifier on
    the `render` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now start a development server and start our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we''ll shrink and fix the app header, so that there is enough space for
    our confirmation component. Change the highlighted lines in `app.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The app header should now be a little shorter.
  prefs: []
  type: TYPE_NORMAL
- en: We'll keep our app running while we develop our component in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic class component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at `App.tsx`, which has been created for us. This is an example
    of a class component. We''re going to create our own class component now. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `Confirm.tsx` in the `src` folder, and enter the following
    into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We learned all about classes in [Chapter 1](372b9509-9775-47b7-88eb-dc68c8a6271f.xhtml),
    *TypeScript Basics**.* Here we are creating a class that extends the standard
    `Component` class from React. Note that we've imported React at the top of our
    file, and also that we are exporting our class component using a default export
    at the bottom of our file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start to implement our `Confirm` class component now, by creating a
    `render` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `render` method determines what the component needs to display. We define
    what needs to be displayed using JSX. In simple terms, JSX is a mix of HTML and
    JavaScript. We'll explore it in more detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the time being, let''s enter the following in our `render` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: At the moment, our `render` method looks a lot more like HTML than JavaScript,
    apart from that funny `className` attribute—shouldn't that be `class`?
  prefs: []
  type: TYPE_NORMAL
- en: We'll cover this and JSX in a little more detail in the next section, but before
    that, let's consume our `Confirm` component in the `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `App.tsx`, we need to import our `Confirm` component class, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `Confirm` component can be referenced as `<Confirm />` in JSX. So, let''s
    add this to the JSX in `App.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look at the browser page where our app is running, it should now look
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e7737339-e6c2-4376-bb53-7cda7d4a6751.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to make our component look more like a dialog using CSS. Let''s
    create a file called `Confirm.css`, and enter the following into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s import our CSS in our `Confirm.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Our component in the browser page should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f4c03642-d503-4ae2-a8ce-442cc9e83126.png)'
  prefs: []
  type: TYPE_IMG
- en: So, a React class component has a special method called `render`, where we define
    what our component displays in JSX.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll take a little break from our confirmation component
    while we learn a little more about JSX.
  prefs: []
  type: TYPE_NORMAL
- en: JSX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous section, JSX looks a bit like HTML. We can have
    JSX in our JavaScript (or TypeScript) code, as we did in the last section in our
    `render` function. JSX isn't valid JavaScript though—we need a preprocessor step
    to convert it into JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to use an online Babel REPL to play with JSX:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a browser, go to [https://babeljs.io/repl](https://babeljs.io/repl), and
    enter the following JSX in the left-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The following appears in the right-hand pane, which is what our JSX has compiled
    down to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that it compiles down to a call to `React.createElement`, which
    has three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The element type, which can be an HTML tag name string (such as `"span"`), a
    React component type, or a React fragment type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An object containing the props to be applied to the element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The children for the element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s expand our example by putting `div` tags around our `span`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This now compiles down to two calls to `React.createElement`, with `span` being
    passed in as a child to `div`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'This is starting to make sense, but so far our JSX has consisted of only HTML.
    Let''s add some JavaScript now, by declaring a props object literal. Let''s also
    reference the `title` prop inside the `span` using curly braces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This is more interesting now. It compiles down to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The key point is that we can inject JavaScript into HTML by using curly braces.
  prefs: []
  type: TYPE_NORMAL
- en: 'To further illustrate the point, let''s empty the `props` object literal, and
    use a JavaScript ternary inside `span`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that the nested call to `React.createElement` uses our ternary as the
    child of `span`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: So, why do we use the `className` attribute rather than `class`? Well, we now
    understand that JSX compiles down to JavaScript, and as `class` is a keyword in
    JavaScript, having a `class` attribute in JSX would clash. So, React uses `className` instead
    for CSS class references.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand a little more about JSX, let's come back to our `Confirm`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Component props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the moment, the title and content text for our `Confirm` component is hardcoded.
    Let's change these to reference properties (props) that the component takes in.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to define a TypeScript type for our props. We''ll use an interface
    for this preceding the `Confirm` class in `Confirm.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then reference the `IProps` type in angle brackets, after we reference
    `React.Component` in the class definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '`React.Component` is what is called a generic class. Generic classes allow
    types used within the class to be passed in. In our case, we have passed in our
    `IProps` interface. Don''t worry if this doesn''t make too much sense at the moment—we''ll
    cover generic classes later in the book.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We get access to props in our class using `this.props.propName`. In our JSX,
    we can now reference props instead of hardcoding the title and content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we now have a TypeScript compilation error when we reference our
    `Confirm` component in `App.tsx`. This is because our component now expects `title` and `content` attributes,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4263da72-8c5c-4219-904d-5402bbdf22bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add the `title` and `content` attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The compilation error now goes away, and if we look at the browser, our component
    is rendered exactly as it was before we implemented props.
  prefs: []
  type: TYPE_NORMAL
- en: Optional props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interface props can be optional, as we discovered in [Chapter 1](372b9509-9775-47b7-88eb-dc68c8a6271f.xhtml),
    *TypeScript Basics*. So, we can also use this mechanism to add optional props
    to a React component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add some optional props to allow the button captions to be configurable
    on our confirmation component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add some additional optional props called `cancelCaption` and `okCaption` to
    our interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: We put a `?` before the type annotation to denote that the prop is optional.
    Note also that we don't get a compilation error in `App.tsx`, where we reference,
    `Confirm` because we are not required to enter these as attributes on `Confirm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s reference these props in our JSX now, replacing the hardcoded captions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look at the browser now, we have no button captions in our running app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4f338c2a-2d36-4e95-af4e-4b0512a7f2cb.png)'
  prefs: []
  type: TYPE_IMG
- en: This is because we haven't supplied these values when we reference `Confirm` in `App.tsx`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll resolve this issue by adding some default values
    for `cancelCaption` and `okCaption`.
  prefs: []
  type: TYPE_NORMAL
- en: Default prop values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Default values can be added to component props when the component is initialized.
    These can be implemented using a static object literal called `defaultProps`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make use of this feature in our `Confirm` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create some default values for `cancelCaption` and `okCaption` in our class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: If we look at our running app again, we have button captions once more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s finish this section by overriding the defaults, and supplying specific
    attributes for these captions in `App.tsx`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Our running app should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/81002284-87f1-4fcd-9aa0-c6a345529b40.png)'
  prefs: []
  type: TYPE_IMG
- en: Optional props with default values can make components easier to consume, because
    the most common configurations can be automatically set up without needing to
    specify anything.
  prefs: []
  type: TYPE_NORMAL
- en: So, our `Confirm` component is nice and flexible now, but the buttons don't
    do anything yet. We'll tackle this in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Handling class component events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Events exist in many programming languages. They allow us to specify logic to
    be executed, depending on how a user interacts with our app.
  prefs: []
  type: TYPE_NORMAL
- en: Basic event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the native JavaScript events are available for us to handle in JSX. JSX
    allows us to do this with props that call functions. The prop name is derived
    by prefixing the native event name with `on`, using camel case. So the prop name
    for the `click` event is `onClick` in JSX.
  prefs: []
  type: TYPE_NORMAL
- en: We can see a list of all the available events with their corresponding types
    in the `index.d.ts` file in the `node_modules/@types/react` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to be able to control what the buttons do in our `Confirm` component.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is handling the `click` events on those buttons. Let''s set
    the `onClick` prop on the Okay button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: So, we're telling the button to call a `handleOkClick` method within our `Confirm`
    class when it is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s create the `handleOkClick` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Switch to the browser with our app running, and click the Yes please! button.
    If we look in the console, we should see Ok clicked displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b5435d53-febb-484b-9409-1fbc945b3d7e.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, it is pretty straightforward to handle events, using mechanisms
    we are already familiar with. There is actually a problem with our `handleOkClick` method,
    though. We'll drill into this and resolve the issue in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The this problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our event handler suffers from JavaScript's classic `this` problem. We aren't
    currently referencing `this` in our event handler, which is why the problem hasn't
    surfaced yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s expose the problem with the `handleOkClick` method, so that we can better
    understand what''s happening:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log the component props to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, try clicking the Yes please! button again. The following error appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/573cb4bc-dcf4-4716-9c3e-11b7d91b21be.png)'
  prefs: []
  type: TYPE_IMG
- en: The problem is that `this` doesn't reference our class in the event handler—it
    is `undefined` instead.
  prefs: []
  type: TYPE_NORMAL
- en: One solution is to change the `handleOkClick` method to be an arrow function.
  prefs: []
  type: TYPE_NORMAL
- en: Arrow function expressions have shorter syntax than function expressions. They
    also don't create their own `this`—so they are a great solution to the `this`
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s convert our method to an arrow function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Now try clicking the Yes please! button again. We should see props successfully
    output to the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on, let''s implement a click handler on the Cancel button now. First,
    we need to reference a handler on the Cancel button''s `onClick` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll create the `handleCancelClick` arrow function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: To summarize, in order to avoid the `this` problem, we can use arrow functions
    to implement event handlers.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we want the consumer of the component to be able to execute some logic
    when the buttons are clicked. We'll cover how to do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Function props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we saw how props can be set for functions with our
    `onClick` event handlers. In this section, we'll implement our own function props,
    so that the consumer of our component can execute some logic when the Ok and Cancel
    buttons are pressed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement these two additional props on our interface. The function
    will take no parameters, and not return anything. So, the type is `() => void`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The props are required, so, we immediately get a compilation error in `App.tsx`
    when we reference the `Confirm` component. We'll fix this a little later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s invoke our function props when the buttons are clicked, instead
    of logging messages to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll fix the compilation error now, by implementing arrow function handlers
    for these props in `App.tsx`. First let''s create the arrow function handlers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can reference these functions we where consume the `Confirm` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'If we go back to our app, we''ll see the compilation errors have been resolved.
    If we click the Ok and Cancel buttons, we get the message output to the console
    as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2b7617e1-c796-4058-85fe-f780bbeac83d.png)'
  prefs: []
  type: TYPE_IMG
- en: At the moment, our buttons still don't do anything other than log a message
    to the console. We want the confirmation dialog to close when we click either
    button. We'll implement this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Class component states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: State is an object that determines how the component behaves and renders. We
    need to introduce state into our app, in order to manage whether our confirmation
    dialog is open or closed.
  prefs: []
  type: TYPE_NORMAL
- en: This particular state is going to live and be managed within the `App` component,
    and be passed in as a prop to the `Confirm` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create an `open` prop in the `Confirm` component by adding it to its
    props interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: We're going to use the `open` prop in the `render` function to determine whether
    the dialog is visible or not. The `confirm-visible` CSS class makes the dialog visible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, on the outermost `div`, let''s use a JavaScript ternary expression in the
    `className` attribute to only include `confirm-visible` when the `open` prop is
    `true`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: We now have a compilation error in `App.tsx` because we haven't specified the
    `open` attribute where we use `Confirm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start to create and manage state within `App.tsx`, let''s simply
    pass `false` in the `open` attribute in `Confirm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: If we look at the app in the browser now, the compilation error will have disappeared,
    and our confirmation dialog will be closed.
  prefs: []
  type: TYPE_NORMAL
- en: Defining state type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a state in `App.tsx`, and properly manage whether the confirmation
    dialog is open or closed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create an interface for the state above the `App` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'We then tell the `App` component about the state type, which we can do using
    the second generic parameter of `React.Component`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: We have used `{}` as the props type because there are no props for this component.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have specified that our component has a state, we need to initialize
    it. We initialize component state in the class constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a constructor, and initialize the `confirmOpen` state to be `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: We call `super` because our class extends `React.Component`.
  prefs: []
  type: TYPE_NORMAL
- en: The state is held in a private prop in a component class. In the constructor,
    we can set the state to our required object literal, which in our case has `confirmOpen`
    set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then use this state when we reference the `Confirm` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: If we look at our running app, the confirmation dialog should be open again.
  prefs: []
  type: TYPE_NORMAL
- en: So, a private state prop gives us access to the component state, and we can
    initialize this in the class constructor.
  prefs: []
  type: TYPE_NORMAL
- en: Changing state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the confirmation dialog buttons are clicked, we want to close the dialog.
    So, we want to change the state of `confirmOpen` to be false when the buttons
    are clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already have arrow function handlers for the button click events, so perhaps
    we can change state in there:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to do that in `handleOkConfirmClick`, replacing the `console.log`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We get a compilation error, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/edfa879c-274c-4cb6-a891-5a01685fccf8.png)'
  prefs: []
  type: TYPE_IMG
- en: The error message is saying that the state is read-only! Why is this so, and
    how can we change the state?
  prefs: []
  type: TYPE_NORMAL
- en: We need to use a method called `setState` in the component class to change state.
    This helps ensure we manage state robustly and efficiently. `setState` takes a
    parameter, which is an object literal containing the state we want to change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change our code to use `setState`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The compilation error disappears, and if we click Yes please! in the running
    app, the confirmation dialog will now close. We have successfully changed the
    state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the implementation of `handleCancelConfirmClick` to close the dialog
    as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: After we close the confirmation dialog, we have no way to open it.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s add a button labeled Confirmthat does that in `App.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create the handler that we just referenced:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: We can now click the Confirm button to reopen the confirmation dialog when it
    has been closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a piece of text above the Confirm button in `App.tsx` that changes
    depending on whether the confirmation dialog is canceled or okayed. We''ll define
    an additional state to drive this text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s initialize the message in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The state is now changed when the confirmation dialog is okayed or canceled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can render the message above the Confirm button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: If we play with the running app now, we'll see the message in our app changing
    depending on whether we okay or cancel the confirmation dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Although we can set the state prop directly in the constructor when we initialize
    it, we can't elsewhere in a class component. Instead, state should be changed
    by calling the `setState` method in the component class.
  prefs: []
  type: TYPE_NORMAL
- en: Class component life cycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Life cycle methods in a class component allow us to run code at particular
    points in the process. The following is a high-level diagram of the component
    process, showing when the different methods are invoked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2ecfe87e-38c2-4fd0-856e-a05ecd325e72.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram of modern React life cycle methods, from React documentation
  prefs: []
  type: TYPE_NORMAL
- en: componentDidMount
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`componentDidMount` is invoked when a component has been inserted into the
    DOM. Here are some common use cases for this method:'
  prefs: []
  type: TYPE_NORMAL
- en: Calling a web service to get some data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding event listeners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing timers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing third-party libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''re going to change the app we have been building to give users a time limit
    of 10 seconds to confirm whether or not they want to learn React and TypeScript.
    In order to do this, we''ll need to make use of the `componentDidMount` method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by making the confirmation dialog closed when the app loads in
    `App.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to count down the seconds from `10` to `0`, and then hide the
    Confirm button when `0` is reached. Let''s add and initialize a state for both
    of these in `App.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll use `timer` to count down from `10` to `1` in the `App` class. Let''s
    create a private prop called `timer` just above the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s use the `componentDidMount` method to initialize our `timer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'The timer will call a method called `handleTimerTick` every second. Implement
    this method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'We are reducing our counter as well, updating the message shown to the user
    in this method. We need to do some more work here, though: we need to stop the
    timer, hide the Confirm button, and tell the user they are too late!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our natural instinct may be to write something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: However, this is incorrect, because the state is updated asynchronously, and
    so `this.state.countDown` won't have necessarily updated the line after we update
    it in the `setState` call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we need to move this code to the callback in `setState`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also stop the timer if the Confirm, Ok, or Cancel buttons are clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final job is to put a condition around the Confirm button to only show
    it if the `confirmVisible` state is `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '`x && y`allows us to concisely express a condition with a single branch in
    JSX. Basically, the right operand of `&&` isn''t evaluated and rendered if the
    left operand is falsy.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to give this a try. We''ll see the countdown when the app first
    runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/da7cda2b-f66d-4351-b761-21a66c56db0d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we don''t confirm within ten seconds, it''ll be too late:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cd90782e-9f5a-46cc-ae72-2c1e55eb4a6d.png)'
  prefs: []
  type: TYPE_IMG
- en: componentWillUnmount
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`componentWillUnmount` is invoked just before the component is removed from
    the DOM. Here are some common use cases for this method:'
  prefs: []
  type: TYPE_NORMAL
- en: Removing event listeners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canceling active network requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing timers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are going to use `componentWillUnmount` in our app to make sure our `timer`
    is stopped and removed. Let''s add the following in the `App` class after the
    `componentDidMount` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: getDerivedStateFromProps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`getDerivedStateFromProps` is invoked every time a component is rendered. It
    can be used to change state when certain props change. This is a static method
    in a component class that returns the changed state, or null if there are no changes
    to the state.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at this life cycle method in our app. Add the following
    at the top of the `App` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look in the console when the app is running, we see that our method is
    called each time the countdown decrements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6d95f4f-88ff-4fe5-ba0d-386d9009b0e8.png)'
  prefs: []
  type: TYPE_IMG
- en: getSnapshotBeforeUpdate and componentDidUpdate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`getSnapshotBeforeUpdate` is called just before the DOM is updated. The value
    that is returned from `getSnapshotBeforeUpdate` is passed on to `componentDidUpdate`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`componentDidUpdate` is called as soon as the DOM is updated. Resizing the
    window during rendering is an example of when `getSnapshotBeforeUpdate` can be
    useful.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at these life cycle methods in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the following near the top of the `App` class, under the `timer`
    variable declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the life cycle methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at the running app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/248117fa-5847-439f-aef2-ae492218628b.png)'
  prefs: []
  type: TYPE_IMG
- en: We see the methods being invoked in the order we expect, and `componentDidUpdate`
    successfully taking in the render count from `getSnapshotBeforeUpdate`.
  prefs: []
  type: TYPE_NORMAL
- en: shouldComponentUpdate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`shouldComponentUpdate` is invoked just before rendering happens. It returns
    a Boolean value that determines whether rendering should happen. It can be used
    to optimize performance, preventing unnecessary render cycles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at this life cycle method in our app by adding the following
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: If we look at the running app, we see that `shouldComponentUpdate` happens between `getDerivedStateFromProps`
    and `getSnapshotBeforeUpdate`, as we expect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now prevent rendering by returning `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'We see `getSnapshotBeforeUpdate` and `componentDidUpdate` aren''t invoked,
    because no rendering occurs after the initial render:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e807de25-6c9d-4cd8-823f-e3ce4f16362d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before moving on to the next section, let''s allow our component to render
    again by setting this flag back to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '`shouldComponentUpdate` can increase performance by stopping unnecessary rendering,
    but it should be used with care. It can introduce bugs that are hard to pin down. Also,
    the additional code we need to add to check whether a render should occur could
    in fact slow the app down.'
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated life cycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few life cycle methods that have been deprecated and renamed in
    React 17\. We don''t need to use these anymore—`getDerivedStateFromProps` and `getSnapshotBeforeUpdate`
    essentially replaced them. However, here''s a brief description of these methods,
    in case you come across them in existing codebases:'
  prefs: []
  type: TYPE_NORMAL
- en: '`componentWillMount` (now `UNSAFE_componentWillMount`): This is called before
    the component is added to the DOM during an initial render'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillReceiveProps` (now `UNSAFE_componentWillReceiveProps`): This
    is called when the component props change'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillUpdate` (now `UNSAFE_componentWillUpdate`): This is called just
    before a component updates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a function component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, a function component is implemented using a JavaScript
    function. These components are sometimes referred to as *functional stateless
    components*, which can be a little confusing because they can contain states in
    more recent versions of React.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic function component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s refactor our `Confirm` component to be a function component, in order
    to learn how to implement these:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Confirm.tsx` and replace the class signature with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: We define a function component using an arrow function, passing the props type
    in as a generic parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We'll learn about generic functions later in the book—so don't worry if this
    doesn't make perfect sense right now.
  prefs: []
  type: TYPE_NORMAL
- en: We use **stateless functional component** (**SFC**) `React.SFC` to represent
    these type of components.
  prefs: []
  type: TYPE_NORMAL
- en: Our component is now throwing several compilation errors. We'll resolve these
    in the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Function components don''t have render methods. Instead, the function itself
    returns the JSX that should be rendered. So, let''s change this part of our function
    by removing the `render` signature, and leaving the return statement as it was:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to change the event handlers to be arrow function constants, and access
    props directly rather than through `this`. We should also move these handlers
    above the `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'We then reference the props and event handlers directly, rather than through
    `this` in our JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have a problem with the static `defaultProps` variable. We move this
    outside our function, and place it as an object literal under the function, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: If we look at the running app, all the compilation errors should be resolved,
    and the app should be working as it was before.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is a template for a function component. Our `Confirm` component
    should have a structure similar to this now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: So, function components are an alternative way to create components. In the
    next section, we'll look at how to add state to a function component.
  prefs: []
  type: TYPE_NORMAL
- en: Stateful function components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve mentioned that function components can have state. In this section,
    we''ll add state to our function `Confirm` component, to force users to click
    the Cancel button twice before closing it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by defining and initializing state for the number of times the
    Cancel button is clicked, by adding the highlighted line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'This line of code looks a little strange, so let''s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`React.useState` is a React function that lets us create state, passing in
    a default value as a parameter. In our case, we pass it a default value of 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `useState` function returns an array containing two elements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first array element contains the current value of state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second array element contains a function to set state to a different value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We destructure the array and store the first array element (the state value)
    in `cancelClickCount`, and the second array element (the function to set state)
    in `setCancelClickCount`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the function now has access to the cancel click count, via the `cancelClickCount`
    variable. The function is also able to increment the cancel click count, via the `setCancelClickCount`
    variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s refactor the `handleCancelClick` arrow function to increment `cancelClickCount`,
    and only invoke the `onCancelClick` prop if the count has reached `2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Now, functions to set the piece of state take in the new state as their parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll change the Cancel button caption, to say Really? after the first
    click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: So, we access the state value in JSX through the variable we destructured when the
    state was defined.
  prefs: []
  type: TYPE_NORMAL
- en: If we give this a try in the running app, we should find the Cancel button text
    changes to Really? after the first click, and the confirmation dialog closes after
    the second click.
  prefs: []
  type: TYPE_NORMAL
- en: After we've got our heads around the code needed to define state, accessing
    and setting state is fairly simple and elegant.
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue to the next section, and look into how we can hook into a function
    component's life cycle events.
  prefs: []
  type: TYPE_NORMAL
- en: Function component life cycle hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can invoke code to execute at certain points in a function component''s
    life cycle. Let''s explore this in our `Confirm` component, starting with when
    the component is first rendering, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the highlighted lines of code just beneath where we define state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: We use React's `useEffect` function to hook into the component life cycle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function takes in an arrow function, which executes when the component is
    first rendered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function takes in a second parameter, which determines when our arrow function
    is called. This parameter is an array of values that, when changed, will cause
    the arrow function to be invoked. In our case, we pass in an empty array, so our
    arrow function will never be called after the first render.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we now try the running app and open the console, we'll see Confirm first
    rendering only appears once.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s remove the second parameter into `useEffect` now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: If we look at the running app and the console, we'll see Confirm rendering appear
    each time `Confirm` is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change this once again to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: If we look at the running app and the console, we'll see open changed appear
    each time the `Confirm` component's `open` prop changes value.
  prefs: []
  type: TYPE_NORMAL
- en: 'What about hooking into when a component is unmounted? Let''s try the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: So, our arrow function can return a function that is executed when the component
    is unmounted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `Confirm` component doesn''t currently unmount, so, in `App.tsx`, let''s
    make this not render if the countdown reaches `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: If we look at the running app and the console, we'll see `Confirm unmounted` appear
    when the countdown reaches `0`.
  prefs: []
  type: TYPE_NORMAL
- en: So, we can execute logic in function components when they are first rendered,
    when their props change, and when they are unmounted.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at a method we can use to optimize function
    component rendering cycles.
  prefs: []
  type: TYPE_NORMAL
- en: This section on hooks is written on React v16.6.0\. We will share updated codes
    when new version releases.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing function component rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our `Confirm` component is actually being rendered more than it needs to be.
    In this section, we are going to optimize this so that it only renders when its
    props change:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add a line at the top of our function component, so that we can
    see when it renders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: If we look at the running app and the console, we'll see that a render occurs
    every time the `App` component counts down. The countdown is in the `App` component
    state, and a change to state means the component will be rendered again, along
    with any child components. This is why, without any optimization, our `Confirm`
    component renders on each countdown.
  prefs: []
  type: TYPE_NORMAL
- en: 'On to the optimization then. It''s actually really simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: So, we wrap our component with a function called `memo` from React. We then
    export this wrapper function. The `memo` function then only renders the component
    if its props change.
  prefs: []
  type: TYPE_NORMAL
- en: If we look at the running app and the console, we'll see that our component
    no longer renders on each countdown.
  prefs: []
  type: TYPE_NORMAL
- en: So, given how simple this is, shouldn't we just wrap all our function components
    with `memo`? No! There is a performance cost when `memo` determines whether a
    component has changed. If the component doesn't actually do any unnecessary rendering,
    using `memo` would result in the component being slower.
  prefs: []
  type: TYPE_NORMAL
- en: '`memo` should be used with care, and only on components that are being rendered
    more than they need to be.'
  prefs: []
  type: TYPE_NORMAL
- en: Given that the features of class components and function components are similar,
    which type should we be using? There is no straightforward answer, really. If
    our team is used to object-oriented code, perhaps class-based components will
    be easier to learn. If our team is used to more functional programming techniques,
    then function-based components may enable them to be more productive.
  prefs: []
  type: TYPE_NORMAL
- en: Both approaches are great ways to create React components—it's down to you to
    choose!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned a couple of different ways we can create a React
    and TypeScript project. The more manual way taught us just how many moving parts
    there are. We'll use `create-react-app` regularly to quickly create our apps in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how all React class components have a `render` method that returns
    JSX, which tells React what to display. JSX is very flexible and powerful, because
    JavaScript expressions can be mixed in with HTML.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how components can be configured using props, and how we can add
    TypeScript types to props, to help prevent mistakes when consuming components.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learnt how components manage what is rendered and how they behave using
    state. Like props, state in a React and TypeScript app is strongly typed. We initialize
    state in the constructor, and change it via a `setState` method.
  prefs: []
  type: TYPE_NORMAL
- en: We also learnt about event handlers, which allow us to react to how users interact
    with our components. JSX gives us handy `onEventName` attributes for handling
    events.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learnt about the various life cycle methods that can be implemented
    to execute logic at various points in the process. The most commonly used life
    cycle method is `componentDidMount` , which occurs when a component has just been
    added to the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned about function components, which are an alternative approach
    to implementing components. In recent versions of React, we are able to use state
    within them, access common life cycle hooks, and even optimize rendering cycles.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](6938e951-47cf-4751-9cfc-c5afcdd73c9e.xhtml), *Getting Started
    with React and TypeScript*, we will learn about how we can efficiently build React
    and TypeScript apps that have multiple pages.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions, based on what we have just learned:'
  prefs: []
  type: TYPE_NORMAL
- en: During development, what are the TSLint settings for allowing debugger statements
    and logging to the console?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In JSX, how can we display a button with a label from a prop called `buttonLabel`
    in a class component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we make the `buttonLabel` prop optional, and default to Do It?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In JSX, how can we display this button only if the `doItVisible` state is `true`?
    (Assume we already have a state type declared containing `doItVisible`, and it
    has already been initialized in the constructor.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would we create a click handler for this button?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a state type declared containing `doItDisabled`. It has also been initialized in
    the constructor. How would we set this state to disable the Do it button after
    we click it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the button is clicked when it is in a disabled state, is the click handler
    still executed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What life cycle method would we use in a class component to add event handlers
    to a non-React web component living in our React component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which life cycle method would we use to remove this event handler?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a function component called `Counter`. It needs to contain a piece of
    state called `count`, and a function to update it called `setCount`. How can we
    define this state and default the initial count to 10?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding `Counter` component, we have a `decrement` function that needs
    to reduce `count` by `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: How can this be implemented?
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The official React introduction tutorial is worth going through: [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `create-react-app` documentation is also worth bookmarking: [https://facebook.github.io/create-react-app/docs/getting-started](https://facebook.github.io/create-react-app/docs/getting-started)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
