- en: Chapter 5. Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As our applications get larger and larger, we start to lose sight of what is
    configured to do what; we may also get into a situation where we have code running
    in 12 different places, each needing a bit of code that has to be changed to do
    something else, for example connecting to a different database. Then, for each
    of those 12 environments, we have three versions: production, staging, and development.
    All of a sudden, it gets very complicated. This is why we need to be able to configure
    our code from a higher-level so that we don''t break anything in the process.'
  prefs: []
  type: TYPE_NORMAL
- en: JSON files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few ways in which we can configure our application. The first way
    that we will look at is a simple JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at the extensions require supports by default, we can see that we
    can import JSON right into our code, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a simple server with a configuration file rather than a hardcoded
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to create the configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, we can now create our server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can just change the `config` file instead of changing the code to change
    the port on which our server is running.
  prefs: []
  type: TYPE_NORMAL
- en: But our `config` file is a bit too generic; we have no idea as to what is a
    host or a port and what they are related to.
  prefs: []
  type: TYPE_NORMAL
- en: While configuring, the keys need to be less generic so that we know what they
    are being used for, unless the context is given directly by the application. For
    example, if the application was to serve purely static content then it may be
    acceptable to have more generic keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make these configuration keys less generic, we can wrap them all in a server
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So now, in order to know about the port of the server we need to use the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'An example where this will be useful could be for a server that connects to
    a database, as they can accept both the port and host as the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Environmental variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way in which we can configure our applications is through the use of
    environmental variables.
  prefs: []
  type: TYPE_NORMAL
- en: These can be defined by the environment you are running your application in
    or in the command that you are using to start your process with.
  prefs: []
  type: TYPE_NORMAL
- en: In Node.js, you can access the environmental variables using `process.env`.
    When using `env`, you don't want to be polluting this space too much and so it
    is a good idea to prefix the key with something related to yourself—your program
    or company. For example, `Config.server.host` becomes `process.env.NAME_SERVER_HOST`;
    the reason for this is that we can clearly see what is related to your program
    and what isn't.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using environmental variables to configure our server, our code will look as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To run this code with our variables, we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You probably noticed that I had to use `parseInt` for `FOO_SERVER_PORT`; this
    is because all variables passed in this manner are essentially strings. We can
    see this by executing `typeof process.env.FOO_ENV`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Although this kind of configuration is very simple to create and consume, it
    may not be the best method, as the variables are hard to keep track of if there
    are a lot of them and they can be dropped very easily.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way in which the configuration can be done is through the use of arguments
    that are passed to Node.js as the process starts, you can access these using `process.argv`,
    with `argv` standing for argument vector.
  prefs: []
  type: TYPE_NORMAL
- en: The array that `process.argv` returns will always have a `node` at index `0`.
    For example, if you run node `server.js` then `process.argv` will have the value
    of `[ 'node', '/example/server.js' ]`.
  prefs: []
  type: TYPE_NORMAL
- en: If you pass an argument to Node.js then it will be added to the end of `process.argv`.
  prefs: []
  type: TYPE_NORMAL
- en: If you run `node server.js --port=8001`, the `process.argv` will contain `[
    'node', '/example/server.js', '--port=8001' ]`, pretty simple, right?
  prefs: []
  type: TYPE_NORMAL
- en: Even though we can have all this configuration, we should always remember that
    configuration can be simply excluded and we will still want our application to
    run when this happens. Usually, you should provide default hardcoded values as
    a backup when you have configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters such as passwords and private keys should never have a default value
    but links and options that are usually standard should be given defaults. It is
    pretty easy to give a default value in Node.js, all you need to do is use the
    `OR` operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Essentially, what this does is check if the value is `falsy`; if it is, then
    use the default value. You need to watch out for values that you know could be
    `falsy`, booleans and numbers definitely fall into this category.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these cases you can use an `if` statement checking for a `null` value, as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's all for configuration. In this chapter you learned about the three methods
    that you can use to create a dynamic application. We learned that we should name
    our configuration keys in a way that we can identify what the values are changing
    to and how they will affect our application. We also learned about how we can
    pass simple arguments to our application using environmental variables and `argv`.
  prefs: []
  type: TYPE_NORMAL
- en: With this information, we can move forward to connecting and utilizing databases
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  prefs: []
  type: TYPE_NORMAL
