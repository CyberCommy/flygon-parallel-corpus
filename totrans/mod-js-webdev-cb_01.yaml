- en: Working with JavaScript Development Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The recipes we''ll be seeing here are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code for development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Fira Code font for better editing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding npm for package management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing version control with Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting your source code with Prettier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documenting your code with JSDoc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding code quality checks with ESLint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Flow for data types checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript has gone beyond a simple tool for adding small effects or behaviors
    to web pages, and has now become one of the world's most-used languages, applied
    to all sorts of developments. Given the complexity and variety of packages, libraries,
    and frameworks these days, you wouldn't start working without a full set of tools,
    and in this chapter we will aim to set up a good development environment, so you
    can work in a most efficient fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by setting up some tools that will come in handy for all our JS
    development. It's been said that a bad craftsman blames his tools, so let's avoid
    even a hint of that by making some good choices!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code for development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first tool we'll need is an **Integrated Development Environment** (**IDE**),
    or at least a powerful code editor. Some people make do with a simple editor,
    possibly something like `vi` or `Notepad`, but in the long run, all the wasted
    time in doing everything by hand doesn't pay. There are many options, such as
    (in alphabetic order) Atom, Eclipse, IntelliJ IDEA, Microsoft Visual Studio, NetBeans,
    Sublime Text, WebStorm, and Visual Studio Code. Personally, I've opted for the
    latter, though of course you may work perfectly well with any of the others.
  prefs: []
  type: TYPE_NORMAL
- en: The term IDE isn't really very well-defined. An IDE usually integrates many
    tools, providing a more seamless experience for the developer. Editors meant for
    development work provide some similar functionality by means of plugins or extensions.
    While this can certainly approximate the ease of use of an IDE, there may be some
    problems, such as a harder installation or configuration, or an interface that
    might be harder to figure out, but in the end, you may get practically the same
    feature set.
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Code** (**VSC**) is basically a source code editor, developed
    by Microsoft in 2015\. Despite the similar name, it''s not related to Microsoft''s
    more powerful IDE, Visual Studio. The editor is free and open source, and the
    latest version is (currently) 1.29.1, dated November 2018, though new releases
    come out monthly. It can be used for JS development, but also for other languages,
    so if you wanted to, say, do your server-side coding in PHP, you could perfectly
    well use VSC for that too. However, from our point of view, the fact that VSC
    ships with IntelliSense for basically all the frontend languages (JS, TypeScript,
    JSON, HTML, CSS, LESS, SASS) is a good selling point. See [https://code.visualstudio.com/docs/editor/intellisense](https://code.visualstudio.com/docs/editor/intellisense)
    for more on this.'
  prefs: []
  type: TYPE_NORMAL
- en: A nice touch is that VSC is written in JS, based on Node, and packaged for the
    desktop by using the `Electron` framework. (We'll get to see these topics in [Chapter
    13](2aebad42-65b6-4cb7-bf4f-1e2e0907a70a.xhtml), *Creating a Desktop Application
    with Electron*.) This automatically lets you use VSC in Linux, macOS, and Windows,
    which is a good advantage if you work in a team and not everybody shares the same
    development environment preferences.
  prefs: []
  type: TYPE_NORMAL
- en: A commonly held misconception is that VSC is based on the Atom editor. Though
    VSC shares the same editor component (Monaco), VSC itself is distinct from Atom.
    A source of this misunderstanding may be the fact that `Electron`, when created
    in 2013, was originally called *Atom Shell*; the name change to `Electron` happened
    in 2015.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the past, I''ve worked extensively with Eclipse, Microsoft Visual Studio,
    and NetBeans. However, nowadays I work exclusively with VSC. Why do I prefer it?
    My reasons (your mileage may vary!) include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Availability for multiple operating systems*: I personally use it on Mac and
    Linux all the time, and sometimes on Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Actively developed and maintained*: With updates (including bug fixes) provided
    on a regular basis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Very good performance*: VSC feels quite speedy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*IntelliSense support*: Out of the box for all JS needs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Extensions available through plugins*: These become integrated into your work
    flow, adding new functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Integrated debugging*:As we''ll see in [Chapter 5](18752def-acd4-4b7d-9395-a1dad0864f16.xhtml),
    *Testing and Debugging Your Server*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Integrated source code management*: Through Git (see the *Doing version control
    with Git* section, later)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Integrated terminal*: You can run commands or launch processes without leaving
    VSC'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the other hand, there are also some disadvantages; the main two being as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The interface, configuration, and design of plugins usually varies from one
    to another, so you'll have to deal with frequent inconsistencies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VSC has no knowledge of projects or the links between tools needed to create,
    for example, a `React` frontend application that communicates with a `Node` backend
    server. VSC at most recognizes folders, but how you organize them, and where you
    place your pieces of code, is totally up to you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do you install VSC? Instructions are different for each operating system,
    and may vary over time, so we'll just point you to downloading the appropriate
    package for your system at [https://code.visualstudio.com/download](https://code.visualstudio.com/download),
    and following the correct platform-specific instructions at [https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview).
    For Linux distributions, instead of downloading and installing some package by
    yourself, there may be another way out. For example, with OpenSUSE, there exists
    a repository that will allow you to install and update VSC through OpenSUSE itself;
    check out [https://en.opensuse.org/Visual_Studio_Code](https://en.opensuse.org/Visual_Studio_Code)
    for instructions on this, or [https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux)
    for even more distribution-specific instructions.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to live on the edge, and get to see new features as early as possible,
    there's also an *Insiders build*. You may install both the normal VSC stable build
    and the Insiders build, and work with whichever you prefer. Be warned, though,
    that you may find unexpected bugs, but you can help the VSC development team get
    rid of those by letting them know!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After having installed it, open VSC and try out its settings to start configuring
    things the way you prefer, see the following screenshot. The bottom-left gear
    menu provides access to several related items, such as keyboard shortcuts, the
    color scheme, and icon set. If you have worked with VSC in the past, you''ll have
    access to more recent files and folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d38a030b-92bf-43aa-bdc6-833a89eed189.png)'
  prefs: []
  type: TYPE_IMG
- en: The Welcome screen in VSC, and the settings gear at the bottom left
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring VSC is sort of unusual, but maybe to be expected, due to its JS
    origins. Basically, as seen in the following screenshot, you get a split screen,
    showing all the available configuration items (more than four hundred!) on the
    left, in JSON format, and you may change their values by writing new ones on the
    right side. If you mouse over any setting, you''ll get to see the possible values,
    and you can select a new one just by clicking on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4bce1e1-98cd-4779-b9de-6d34fc01d6ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring VSC is done by editing a JSON file with your personal choices
  prefs: []
  type: TYPE_NORMAL
- en: Do you want to pick a different editor for your work, or at least check out
    what's available out there? You may check out [www.slant.co/topics/1686/~javascript-ides-or-editors](https://www.slant.co/topics/1686/~javascript-ides-or-editors) for
    a long list of candidates, with pros and cons for each. At the current time (October
    2018) the page shows 41 options, with Visual Studio Code at the top of the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'One extra advantage of VSC has to do with updates. It will periodically check
    to see whether there''s a new available version, and it will let you download
    and install it. (On the other hand, if you use Linux and install VSC through a
    repository, it may get updated automatically, without you even having to confirm
    it.) After that, you''ll get an information screen with the changes for the last
    month; as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0147cb80-fb72-48c5-b1bf-e23c89ff5dd0.png)'
  prefs: []
  type: TYPE_IMG
- en: After each monthly update, you'll be informed of VSC's new features
  prefs: []
  type: TYPE_NORMAL
- en: Configuration of VSC goes beyond what we have just mentioned; see the following
    sections to find out more ways of extending its power and making it better for
    you to use.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Visual Studio Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VSC includes many out-of-the-box features, with which you can actually get started
    and working with no problems. By means of extensions, you can add support for
    languages, debugging, code quality, and many more functions. Configuring visual
    aspects is also provided, and you can change VSC's theme, shortcuts, and general
    preferences. However, you will want to add even more functionality to VSC, and
    that's where extensions (plugins) come in.
  prefs: []
  type: TYPE_NORMAL
- en: You can even develop your own extensions for VSC, though we won't be getting
    into that subject in this book. If you are interested, check out [https://code.visualstudio.com/docs/extensions/overview](https://code.visualstudio.com/docs/extensions/overview).
    Extensions can be written in either JS or TypeScript (see the *Adding Flow for
    data types checks* section), and of course you can develop them by using VSC itself!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extensions are optional installable additions to VSC, which provide specific
    new functions. Installing new extensions is a breeze. You can bring up the menu
    of all the available extensions by going to View | Extensions in the main menu
    (where you can also find a keyboard shortcut for it) or by clicking the Extensions
    icon at the bottom of the Activities bar at the left of VSC.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will first get the list of currently installed extensions, as demonstrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e5b186a-d552-45ec-ae89-fbff2c15df79.png)'
  prefs: []
  type: TYPE_IMG
- en: The list of already-installed extensions
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want, you can disable any specific extension: click on it at the left
    side of the screen, and then click on Disable at the right. You can also fully
    uninstall any extension, and it''s a sure bet that you''ll do this quite a lot;
    the only way to find out if an extension works for you is by experimenting! Take
    a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73c6c77e-c750-4609-a37e-35676efd7b36.png)'
  prefs: []
  type: TYPE_IMG
- en: The VSC Marketplace is a good place to search for new extensions
  prefs: []
  type: TYPE_NORMAL
- en: 'Finding new extensions is also a breeze. You can either go to the VSC Marketplace
    at [https://marketplace.visualstudio.com/](https://marketplace.visualstudio.com/) as
    seen in the preceding screenshot or directly search from within VSC, by typing
    in the search box, as seen in the following screenshot. I''d recommend paying
    attention to the total number of installs (the higher the better) and the rating
    from 1 to 5 stars (also, the higher the better). We''ll be using several extensions;
    see, for example, in this chapter the *Formatting your source code with Prettier*
    and *Documenting your code with JSDoc* sections; there will be more in later chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2207fa9f-1218-4ede-a0fc-035ccf9d8e13.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also search for new extensions from within VSC by just typing some keywords
  prefs: []
  type: TYPE_NORMAL
- en: Extensions are updated automatically, and you won't have to do much. Periodically,
    I'd recommend having a look at your list of extensions, and possibly searching
    again for new ones; there have been cases of new versions deprecating old ones,
    but with a new name, so an update wouldn't have worked. And, finally, be ready
    to experiment and find for yourself which extensions make you tick!
  prefs: []
  type: TYPE_NORMAL
- en: Adding Fira Code font for better editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to try a topic that can quickly lead to a (warm? heated?) discussion,
    say out loud that the best font for programming is such and such, and just wait! I
    don't want to start any arguments, but I can certainly recommend a font that can
    make your JS code look much better, and become more readable.
  prefs: []
  type: TYPE_NORMAL
- en: An article in Slant, at [https://www.slant.co/topics/67/~best-programming-fonts](https://www.slant.co/topics/67/~best-programming-fonts),
    lists over 100 programming fonts; did you even think so many were available?
  prefs: []
  type: TYPE_NORMAL
- en: The key to a better font hinges on the concept of ligatures. In typography,
    a ligature occurs when two or more letters are joined, becoming a single character.
    OK, the proper technical word would be glyph, but let's not make it more complicated
    than needed!
  prefs: []
  type: TYPE_NORMAL
- en: 'Some ligatures you may not be aware of are these: the ampersand character (*&)*
    was originally a ligature of the letters *E* and *t*, spelling out *et* in Latin,
    meaning *and*. Similarly, the German *ß* character was a ligature of two *s* letters,
    next to each other, and the Spanish *Ñ* originally was a pair of *N* characters,
    one written on top of the other.'
  prefs: []
  type: TYPE_NORMAL
- en: In JS, there are many symbols that are written as two or more characters, just
    because no other way is available. For example, the greater than or equal to symbol
    is typed as `>=`, which doesn't look as good as the mathematical symbol `≥`, does
    it? Other combinations are `<=` (less than or equal to), `=>` (for arrow functions,
    which we'll meet in [Chapter 2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml), *Using
    Modern JavaScript Features*), the binary shift operators `<<` and `>>`, the equality
    operators `==` and `===` (plus the corresponding `!=` and `!==`), and more.
  prefs: []
  type: TYPE_NORMAL
- en: Do not confuse *ligatures* with *kerning*. Both have to do with showing adjacent
    characters, but the former refers to joining characters and replacing them with
    a new one, while the latter deals with reducing the distance between characters.
    If you place an *f *next to an *i*, kerning would make them closer without overlapping
    (in the same way that you can reduce spacing between *A* and *V* because of the
    letters' shapes), while a ligature would replace both characters with *fi,* actually
    joining both letters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While there are many monospaced fonts (meaning all characters have the same
    width, which helps with onscreen alignment and indentation), there are not so
    many that also provide ligatures. In my case, after experimenting with many, I
    can recommend using Fira Code, available online at [https://github.com/tonsky/FiraCode](https://github.com/tonsky/FiraCode).
    This font provides lots of ligatures, not only for JS but for other programming
    languages as well. Take a look at following illustration for all the possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecba6842-1641-458a-a28e-4aa70601b6d5.png)'
  prefs: []
  type: TYPE_IMG
- en: All the available ligatures, as seen in the figure taken from
  prefs: []
  type: TYPE_NORMAL
- en: https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/all_ligatures.png
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest version (1.206, as of December 2018) and install it, according
    to the standard procedures for your operating system. Afterwards, you''ll have
    to change a pair of VSC settings, as seen earlier in this chapter; just add the
    following lines, and save your configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first line defines what font you want to use (and in CSS style, I also provided
    alternatives, just in case I took my settings to a different machine where `Fira
    Code` wasn't available) and the second line tells VSC to enable onscreen ligatures.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After doing the changes in the previous section, when you open VSC, you''ll
    be able to see code as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2fe811e-09d8-4a0c-8df5-b4432724f2a4.png)'
  prefs: []
  type: TYPE_IMG
- en: A sample listing, showing several ligatures; see lines 60 (=>), 63 (=== and
    ||), or 71 (<=)
  prefs: []
  type: TYPE_NORMAL
- en: Note that you don't have to do anything at all when you type in your code. If
    you want an arrow ligature, you will have to type the two characters `=` and `>`
    as usual; the way they will look on screen is just a result of font rendering.
    Similarly, if you want to search for an arrow, seek `=>`, as that's what will
    be saved to disk.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have got VSC configured to our liking, let's start more packages to help
    with source code management and other features.
  prefs: []
  type: TYPE_NORMAL
- en: Adding npm for package management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working either on the frontend or the backend, you will surely want to
    use already available libraries and frameworks, and that begets an interesting
    problem: how to deal with those packages'' own needs, more packages, which themselves
    need even more packages, and so on. In [Chapter 3](f2d2d72d-2137-4f67-8d72-9a113dc3d09c.xhtml),
    *Developing with Node*, we''ll work with `Node`, but we need to get ahead of ourselves,
    and install `npm` (the package manager of `Node`) now to be able to set up several
    other tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm` also is the name of a gigantic repository of software, at [https://www.npmjs.com/](https://www.npmjs.com/),
    which counts has around 600,000 packages you can observe that in the following
    screenshot and it grows at a daily rate of more than 500 packages, according to
    counts such as at [http://www.modulecounts.com/](http://www.modulecounts.com/),
    a place that tracks several well-known code repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1bde3af9-d7d1-443d-86c0-d2a421e7f27f.png)'
  prefs: []
  type: TYPE_IMG
- en: The growth of the npm repository seems exponential, according to data from www.modulecounts.com/
  prefs: []
  type: TYPE_NORMAL
- en: It can be safely said that it's probably impossible that a modern JS application
    doesn't require at least one, and more likely several, packages from `npm`, so
    adding a package manager will be mandatory; let's see a couple of them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get `npm`, you must first install `Node`, and that will come in handy for
    [Chapter 3](f2d2d72d-2137-4f67-8d72-9a113dc3d09c.xhtml), *Developing with Node*,
    and the following ones. We won''t copy the details here from the web (see [https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node))
    but we can resume as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Install `Node`, either by downloading it and then doing a manual installation
    (the most common way for Windows) or by adding an appropriate repository and then
    using your Linux package manager to install `Node` (that's the way I do this in
    my OpenSuse machines). Be careful, and pick the **Long Term Support** (**LTS**)
    version, recognizable by its even major number (such as 8.x.x, for example), unless
    you feel adventurous enough to use the latest development version, and you don't
    mind risks such as things stopping working!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that `Node` is correctly installed. At the command line, type `node -v` and
    get the current version; in my machine, it's v9.7.1, but this will surely change
    by the time you try this out, and yes, I'm feeling adventurous and not using the
    LTS version!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check if `npm` is up to its latest version with the `npm -v` command. If it''s
    not (refer to the following code snippet), you''ll have to update it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you are working without a package manager (meaning you can get updates for
    your software automatically, without having to go and look for each on a one-by-one
    basis) you could also be interested in installing `nvm`, though it's optional;
    for more on this, see [https://github.com/creationix/nvm](https://github.com/creationix/nvm).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll be back to using `npm` in several places in this text. You'll have to
    use it in order to install several packages (some of which appear in this very
    chapter, such as `JSDoc` or `Prettier`) and later on we'll see how to configure
    an application, so all its required packages will be available and up to date.
  prefs: []
  type: TYPE_NORMAL
- en: You can find complete documentation for all `npm` features at [https://docs.npmjs.com/](https://docs.npmjs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project with npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you pick any empty directory and just install a package, you''ll get some
    warnings related to a missing file, and you''ll also find some new elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'What''s happening here? Let''s explain the results step by step, and then add
    whatever''s missing. When you install modules, they (plus all their dependencies,
    and their dependencies'' dependencies, and so on) are placed by default in a `node_modules` directory.
    This is a good measure, because all the code that will go in that directory is
    code that you haven''t actually written, and that will eventually get updated
    by `npm` without your direct control. We can verify that quickly by going to the
    newly created directory and checking out its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'But, how would you control what packages (and their versions) are to be installed?
    That''s the point of the missing `package.json` file, which, among other things
    that we''ll meet later in the book, lets you specify what packages you want. (We''ll
    also use it to specify parameters for other tools, such as Babel or ESLint, as
    we''ll see later in this chapter.) You can create this file by hand, but it''s
    easier to use `npm init` and just answer a few questions. This will create the
    required file, which will eventually describe all the dependencies of your project,
    plus other features (such as build or deploy procedures) that we''ll see later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s quickly go over each field, but remember these are only the basic ones;
    you can find more complete, official descriptions at [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json).
    As we skipped some answers, not all fields are present in the produced project
    file, but you can add everything later:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: Whatever name you want to assign to the project; by default, the directory''s
    name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: The semantic version number for your project. You would update this
    number whenever you create a newer version. See [https://semver.org/](https://semver.org/)
    for more information on semantic versioning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: A simple description of your project, used by the `npm` search
    command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main`: The name of the primary entry point to your program. It''s common to
    use `index.js` for this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test command`: A command (script) that you would run in order to execute unit
    tests for your code. We''ll also be seeing this later in the book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git repository`: If you are going to use source control, here you would give
    the details for it. We''ll get to this in the *Doing version control with Git*
    section later in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scripts`: This is an object that contains script commands you can run with
    `npm run`; for example, you could write scripts to build a project, deploy it,
    check it for code quality rules, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author`: Who created the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`license`: Whatever license you want to assign to your project; this is meant
    for other people to know how they may use your package (permissions, restrictions)
    should you allow it. You can find a (quite long!) list of possible licenses at [https://spdx.org/licenses/](https://spdx.org/licenses/),
    and be careful when selecting one; there are legal aspects involved!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But, where are the packages? Let's see about that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing packages for different purposes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways of installing `npm` packages: globally or locally:'
  prefs: []
  type: TYPE_NORMAL
- en: If you plan to use the package from the command line, install it globally; for
    example, `npm install prettier -g` would install the `prettier` command so you
    can use it anywhere. (We'll see more of `prettier` in the *Formatting your source
    code with Prettier* section.) You may need to run the command as an administrator,
    or with `sudo`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, if you just need the package for your project, install it locally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing packages locally can also be done in more than one way:'
  prefs: []
  type: TYPE_NORMAL
- en: If you need the package for your own project, then you install it as a production
    package with `npm install lodash --save`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead, if you need the package in order to build your project, but not as
    a part of the final, produced code, install it as a development package with `npm
    install eslint --save-dev`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many shorthand versions for commands and options, such as just `i`
    for `install`, or `-D` for `--save-dev`, but I am more comfortable spelling everything
    out. If you want to learn more about this, just try `npm --help`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running these two latter commands, if you inspect `package.json`, you''ll
    notice that some lines were added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dependencies` and `devDependencies` entries refer to the production and
    development packages you require. If you are writing your software, and you decide
    you need a new package, there are two ways of doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: Add an entry to `package.json`, in the proper place, and then do `npm install`
    to get it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively, use `npm install` with either `--save` or `--save-dev`, and `package.json`
    will be updated by `npm`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To remove a dependency, use `npm uninstall` instead. You must include `--save`
    or `--save-dev` in order to also remove the reference from `package.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need specific versions, you will have to learn about semantic versioning.
    Version rules may become complex, and we''ll just see the main ones; check [https://docs.npmjs.com/files/package.json#dependencies](https://docs.npmjs.com/files/package.json#dependencies)
    and [https://github.com/npm/node-semver#versions](https://github.com/npm/node-semver#versions)
    for a complete description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| 4.5.6 | Version 4.5.6, and none other |'
  prefs: []
  type: TYPE_TB
- en: '| ^4.0.0 | Latest compatible version 4.x.x |'
  prefs: []
  type: TYPE_TB
- en: '| ^4.2.0 | Latest compatible version 4.2.x |'
  prefs: []
  type: TYPE_TB
- en: '| >5.6.7 | A version greater than 5.6.7 |'
  prefs: []
  type: TYPE_TB
- en: '| ~8.7.6 | A version approximately equivalent to 8.7.6; should be 8.7.x |'
  prefs: []
  type: TYPE_TB
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maintaining your packages and updating them is an important task, and if you
    are part of a development team, with people possibly even in different regions
    or countries, it becomes mandatory that everybody should be working with the same
    configuration at all times. If the project is very dynamic (meaning that packages
    will be added, removed, or updated frequently), `npm` can become a bit slow and
    also produce consistency or security problems; to address this situation, in 2016
    Facebook released a new package manager, `yarn`. (See [https://yarnpkg.com/en/](https://yarnpkg.com/en/).)
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see the rationale for the changes, see the original blog post
    about yarn at [https://code.facebook.com/posts/1840075619545360](https://code.facebook.com/posts/1840075619545360).
  prefs: []
  type: TYPE_NORMAL
- en: A key feature is that you can seamlessly replace `npm` with `yarn`, and just
    start using the latter, because it shares the same feature set (apart from some
    minor differences) while working in a faster, more reliable, and more secure way.
    For instance, `yarn` can manage downloads in parallel, and even work with cached
    packages, so it would even be possible to do some updates without a connection
    to the internet!
  prefs: []
  type: TYPE_NORMAL
- en: Installation is quite simple, and a bit ironic. Use `npm` with `npm install
    -g yarn`, and from that moment on, you will be able to use `yarn` directly and
    forget `npm`. See [https://yarnpkg.com/en/docs/install](https://yarnpkg.com/en/docs/install)
    for more complete documentation on the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: For more details on comparing `npm` and `yarn` commands, check out [https://yarnpkg.com/lang/en/docs/migrating-from-npm/](https://yarnpkg.com/lang/en/docs/migrating-from-npm/)
    or [https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc](https://shift.infinite.red/npm-vs-yarn-cheat-sheet-8755b092e5cc).
  prefs: []
  type: TYPE_NORMAL
- en: Doing version control with Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In modern software development, it goes without saying that you will need some
    SCM (Software Configuration Management) software to keep track of all changes
    in your code. Today, the most-used tool is `Git`, which we'll also be using. `Git`
    was created in 2005 by Linus Torvalds (who also created Linux!) for the development
    of the Linux kernel; not a small task considering that its source is over 25 million
    lines of code!
  prefs: []
  type: TYPE_NORMAL
- en: Linux is not the only major operating system controlled with `Git`; in February
    2017, Microsoft itself decide to migrate the development of Microsoft Windows
    to `Git`, and developed customizations to enhance remote work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We won''t be delving into how `Git` works, what commands to use, and so on,
    because that would be material enough for a book! We will focus on how to use
    `Git` with VSC. This is rather simple because not only was VSC written with `Git`
    access in mind, but there are also some extensions that can make work even easier,
    so you don''t have to memorize lots of commands and options; take look at following
    illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7262d35b-aea2-4f27-b1a4-7cd70b379bb9.png)'
  prefs: []
  type: TYPE_IMG
- en: Git has lot of commands, but you can cope very well with a few selected ones.
  prefs: []
  type: TYPE_NORMAL
- en: This XKCD comic is available online at https://xkcd.com/1597/.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Personally, I have a GitHub account, and I decided to use it for the code for
    this book. This is not only a way of being able to quickly share all the code
    with readers, but also (and quite important!) a way to ensure I wouldn't be able
    to accidentally lose my work, which I am quite capable of doing! See [https://github.com/fkereki/modernjs](https://github.com/fkereki/modernjs) for
    all code. I will assume that you have an appropriate `Git` server, and that you
    are able to initialize a project, connect it to the server, and so on. Also, VSC needs
    `Git` to be pre-installed in your machine; if you haven't installed it, checkout [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) to
    get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'VSC provides full access to commands through its Command Palette.... as seen
    in the following screenshot. You can search for a command there, and after clicking
    on it, VSC will ask for all possible parameters one at the time, so you don''t
    have to do them by memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c0c8326-e5ab-4bf6-8786-94dce2dfe998.png)'
  prefs: []
  type: TYPE_IMG
- en: You can enter Git commands through VSC's command palette, and you'll get asked
    for the required parameters, if any
  prefs: []
  type: TYPE_NORMAL
- en: Committing code is quite frequent, so you can directly do it by clicking on
    the source control icon (third from the top, at the left) and entering the commit
    message that you want. In that screen, you can also revert local changes and more;
    mouse over to get all possible features.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a single `Git` extension that I would recommend for VSC: look for
    `GitLens` (also called **Git Supercharged**) and install it. This extension provides
    access to practically all `Git` information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4db95e0-4067-4468-97d3-d2f3e91f5df3.png)'
  prefs: []
  type: TYPE_IMG
- en: GitLens in use
  prefs: []
  type: TYPE_NORMAL
- en: 'Among other features, `GitLens` provides the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A lens, to show recent commit and author information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An explorer, to browse repositories and file histories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A blame annotation, to show who made the last change to a line, as with git
    blame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to search for commits in different ways, and much more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more detailed information, see [http://gitlens.amod.io/](http://gitlens.amod.io/).
    Pay particular attention to customization at [https://github.com/eamodio/vscode-gitlens/#configuration](https://github.com/eamodio/vscode-gitlens/#configuration),
    because most features can be twiddled to better suit your work style. You can
    access them through the standard Settings page (look for all configuration items
    whose names start with *GitLens*), or by opening the Command Palette and looking
    for GitLens: Open Settings, which will open a special setup screen as seen in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0e36b9a-de2a-4592-aada-d2774211b5ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Gitlens also provides a special onscreen settings feature, which allows you
    to configure practically every aspect of the tool
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a development environment set up, and we have chosen and installed
    a minimum set of tools, let's go further and add some optional, but highly recommended,
    additional packages that will help produce better code.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting your source code with Prettier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you work in a project with several other developers, sooner or later arguments
    as to how code should be formatted are certain to pop up, and they can keep going
    for a long time! Deciding upon a single standard for your source code is really
    needed, but if formatting depends on each person, it''s certain that you will
    end with even more "standards" than team members! Take a look at the following
    illustration.  Something you don''t want to have in a team is extra friction or
    aggravation, and style arguments can take forever:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b0c7a50-2f93-4ccc-b19e-0fd6cdea0d52.png)'
  prefs: []
  type: TYPE_IMG
- en: You cannot afford to have more than one standard.
  prefs: []
  type: TYPE_NORMAL
- en: This XKCD comic is available online at https://xkcd.com/927/.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is worsened by the fact that modern JS projects will not only include
    JS source code, but also possibly `TypeScript` or `Flow` (see the *Adding Flow
    for data types checks* section later), JSX (see [Chapter 6](82da8477-a63b-46d4-ad35-8a8cc114b542.xhtml),
    *Developing with React*), JSON, HTML, CSS or SCSS, and even more.
  prefs: []
  type: TYPE_NORMAL
- en: After having tried out many source code formatters, I finally decided to use
    `Prettier` for all purposes. `Prettier` is an *opinionated* code formatter, which
    supports all the languages that I listed previously, reformatting source code
    according to a set of rules, thus ensuring that all code conforms to an expected
    style.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to read the original description for `Prettier`, see the blog post
    at [https://jlongster.com/A-Prettier-Formatter](https://jlongster.com/A-Prettier-Formatter),
    where the author describes the rationale for the project and gives some details
    on implementation and options.
  prefs: []
  type: TYPE_NORMAL
- en: What does it mean, that it is *opinionated*? Many (or most) code formatters
    provide a very big set of configuration options that you can twiddle in order
    to get the code to look as you wish. On the other hand, `Prettier` has its own
    set of rules, with little leeway for configuration, and thus cuts short all arguments.
    Moreover, you can get it to work seamlessly with VSC, meaning that whenever you
    save the code, it will get reformatted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see some examples of this *opinionating*. Working with arrow functions
    (which we shall see in more detail in the *Defining functions* section of [Chapter
    2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml), *Using Modern JavaScript Features*),
    if the function has a single parameter, enclosing it in parentheses is optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'However, `Prettier` decides that in this case the parentheses should not be
    included. Also, note that it added several spaces for clarity, as well as the
    (optional) missing semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, if you use promises (we''ll see them in the *Doing async calls compactly*
    section of [Chapter 2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml), *Using JavaScript
    Modern Features*) you may write something such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it will get reformatted to the more usual following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note how each `.then(...)` was pushed to a separate line, according to the most
    common style for JS. The formatting rules that `Prettier` applies are derived
    from usual practice, and it wouldn't be possible to list them all here. But, what
    really matters is that by using this tool, you may be certain that your whole
    team will be working in the same fashion.
  prefs: []
  type: TYPE_NORMAL
- en: If your team grumbles about some rule or other, remind them of the saying *there's
    a right way, a wrong way, and the Army way!* After adopting `Prettier`, there
    will be no place for style discussions any more, and peace will eventually reign.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing `Prettier` is very simple: you should just add the VSC extension,
    which you can find by searching for `Prettier Code Formatter`; as a check, the
    latest version (as of December, 2018) is 1.16.0, and the author is Esben Petersen.
    The plugin itself can be found in the VSC marketplace, at [https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode).
    You can also install it globally (as we saw in the *Installing packages for different
    purposes* section earlier in this chapter) to be able to use it in scripts or
    from the command line with `npm` or `yarn`. See [https://prettier.io/docs/en/install.html](https://prettier.io/docs/en/install.html),
    and I''d recommend doing that.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one change you will want to make in the VSC preferences. Go to File
    | Preferences | Settings, and add the following line to your user configuration,
    so every file will be formatted automatically whenever you save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''d rather only apply `Prettier` to JS, then you should use this instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As we said, `Prettier` is pretty opinionated as to how code should look, and
    there are only a few options that you can change. The available options can be
    set in `package.json` (which makes it easier for all the team to share them) in
    a `"prettier"` key. Some of the possibilities (meaning the ones you might want
    to modify) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Default value** | **Meaning** |'
  prefs: []
  type: TYPE_TB
- en: '| `arrowParens` | `false` | For arrow functions with a single parameter, whether
    to enclose it in parentheses. |'
  prefs: []
  type: TYPE_TB
- en: '| `bracketSpacing` | `true` | Include a space after the opening brace of an
    object, and before the closing brace. |'
  prefs: []
  type: TYPE_TB
- en: '| `jsxBracketSameLine` | `false` | If `true`, the ending `>` for a multiline
    JSX element will be added at the end of the last line; if `false`, it will be
    on a separate line. |'
  prefs: []
  type: TYPE_TB
- en: '| `printWidth` | `80` | Maximum line size. |'
  prefs: []
  type: TYPE_TB
- en: '| `semi` | `true` | Add semicolons at the end of every line, even if not needed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `singleQuote` | `false` | Use single quotes for strings. |'
  prefs: []
  type: TYPE_TB
- en: '| `tabWidth` | `2` | Indentation size. |'
  prefs: []
  type: TYPE_TB
- en: '| `trailingComma` | `none` | Specify whether to add trailing commas or not,
    wherever possible. Options are `none` (never add such commas), `es5` (add them
    where ES5 allows, as in arrays or objects), or `all` (add them even to function
    arguments). |'
  prefs: []
  type: TYPE_TB
- en: '| `useTabs` | `false` | Use tabs for indentation. |'
  prefs: []
  type: TYPE_TB
- en: 'Personally, the only ones I use are `tabWidth:4` and `printWidth:75,` but the
    latter is for the sake of the book only, not for other work. My `package.json`
    thus includes the following; I have it just before the `dependencies` key, but
    you can place it elsewhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You can also use `Prettier` independently of VSC, and in that case the configuration
    options should go in a `.prettierrc` file. See [https://prettier.io/docs/en/cli.html](https://prettier.io/docs/en/cli.html) and [https://prettier.io/docs/en/configuration.html](https://prettier.io/docs/en/configuration.html) for
    more on this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if you want to avoid `Prettier` code formatting for some reason or
    another, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid all formatting for a given file by adding its path and name to a `.prettierignore`
    text file at the project root
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid reformatting a single sentence by preceding it with a `// prettier-ignore
    comment`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the latter option, remember to use the appropriate comment style depending
    on the source code language. For example, in an HTML file's you would use `<!--
    prettier-ignore -->`, while in CSS, it should be `/* prettier-ignore */`, and
    for JSX, `{/* prettier-ignore */}`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways of using `Prettier`. The first is to configure VSC to automatically
    format the code whenever you save it; following the instructions we saw earlier
    when we installed VSC, change the editor Format on save option to true, and you'll
    be set. Of course, you can also format the code whenever you want by right clicking
    and selecting the Format Document option.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use `Prettier` online. Go to [https://prettier.io/playground/](https://prettier.io/playground/),
    paste your code into the left panel, and you''ll instantly get a formatted version
    in the right panel. Take a look at the following screenshot for an example of
    code reformatting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfdc71d1-022c-47b1-a1ef-54b01c910557.png)'
  prefs: []
  type: TYPE_IMG
- en: Prettier online can be used to experiment with configuration parameters, or
    for a quick code reformatting session
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to experiment with the few available options, click Show Options at
    the bottom-left corner, and you''ll be able to configure Prettier, according to
    what we saw in the previous section, see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c72dd1d-4a57-4b2b-a2d5-83b20135de88.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to dynamically experiment with (the few available) Prettier settings,
    you can do so in the online playground
  prefs: []
  type: TYPE_NORMAL
- en: When preparing the code for this book, I set the right margin at 75, because
    that's what will fit in a printed page. I also set indentation to 4 characters,
    because I find it clearer. Other than that, I left everything as the default;
    fewer style arguments to deal with this way!
  prefs: []
  type: TYPE_NORMAL
- en: Documenting your code with JSDoc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A good rule for maintainability is that code should be documented. `JSDoc` (or
    `JSDoc3`; the name reflects the current version, 3.6.0) is an API documentation
    generator, which can produce an HTML website with full documentation for your
    code. You only have to add comments (in a specific format) to your source code,
    and `JSDoc` will scan the code to pick them up and generate the documentation.
    Let's first see how those comments should be written, and then turn to a tool
    to make the work easier with VSC.
  prefs: []
  type: TYPE_NORMAL
- en: The official web page for `JSDoc` is at [http://usejsdoc.org/](http://usejsdoc.org/),
    and the source code can be found at [https://github.com/jsdoc3/jsdoc](https://github.com/jsdoc3/jsdoc).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main idea for `JSDoc` is to document your APIs, including functions, classes,
    methods, and whatnot. `JSDoc` comments are expected to precede the code that is
    being documented. Comments start with `/**` and end with `*/`; the double star
    distinguishes them from normal comments.
  prefs: []
  type: TYPE_NORMAL
- en: Don't go overboard with stars, because if you write three or more, then the
    comment will also be ignored; `JSDoc` expects two stars, no more, no less.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block shows the simplest possible example, how you might
    document a function by providing a description of its goals and arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@param` notation is a block tag, which introduces a code item, in this
    case, a parameter of the function. A (partial) list of common tags is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `@author` | The developer''s name. |'
  prefs: []
  type: TYPE_TB
- en: '| `@class` | Defines a class. |'
  prefs: []
  type: TYPE_TB
- en: '| `@constructor` | Marks a function a constructor. |'
  prefs: []
  type: TYPE_TB
- en: '| `@copyright`, `@license` | Legal details. |'
  prefs: []
  type: TYPE_TB
- en: '| `@deprecated` | Marks a function or method as deprecated. |'
  prefs: []
  type: TYPE_TB
- en: '| `@exports` | An exported module member. |'
  prefs: []
  type: TYPE_TB
- en: '| `@function`, `@callback` | Defines a function, and more specifically, one
    used as a callback. |'
  prefs: []
  type: TYPE_TB
- en: '| `@param` | What parameters are expected. The data type may be added within
    braces. |'
  prefs: []
  type: TYPE_TB
- en: '| `@property` or `@prop` | A property of an object. |'
  prefs: []
  type: TYPE_TB
- en: '| `@return` or `@returns` | What the function or method returns. |'
  prefs: []
  type: TYPE_TB
- en: '| `@throws` or `@exception` | An exception thrown by a method. |'
  prefs: []
  type: TYPE_TB
- en: '| `@version` | A library''s version. |'
  prefs: []
  type: TYPE_TB
- en: There are more tags, such as `@private`, to identify a member as private, but
    since JS doesn't really provide that feature, I skipped it. Other tags are more
    specific, and you may not use them, such as `@generator` or `@mixin`. If you want
    to see the complete list of possible block (and also a couple of inline) tags,
    checkout [http://usejsdoc.org/index.html](http://usejsdoc.org/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'A confession: we won''t be using `JsDoc` very much in this book, but only because
    all the needed explanations will be given in the text itself. For normal work,
    I''d always use it, but in this book it would mainly be redundant.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Writing this sort of comment can quickly become tedious, but you can use the
    *Document This* VSC extension to automatically generate the needed template, which
    you will then complete. You can find the extension at [https://marketplace.visualstudio.com/items?itemName=joelday.docthis](https://marketplace.visualstudio.com/items?itemName=joelday.docthis),but
    it''s simpler to install it through VSC itself: search for `Document This` and
    it will quickly appear.'
  prefs: []
  type: TYPE_NORMAL
- en: After including this extension, if you right-click on the code, a new command
    will appear that will automatically generate (mostly empty) comments for you to
    complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for generating the automatic documentation, checkout [http://usejsdoc.org/about-commandline.html](http://usejsdoc.org/about-commandline.html);
    we won''t go into this because it''s fairly straightforward. You can configure
    `JSDoc`, and also change the template it uses for the generated page; see [http://usejsdoc.org/about-configuring-jsdoc.html](http://usejsdoc.org/about-configuring-jsdoc.html)
    and [http://usejsdoc.org/about-configuring-default-template.html](http://usejsdoc.org/about-configuring-default-template.html)
    for these topics. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c9ae20c-d9a8-40f7-8212-e1ee009e3be8.png)'
  prefs: []
  type: TYPE_IMG
- en: A simple example of the JSDoc output
  prefs: []
  type: TYPE_NORMAL
- en: Of course, documenting a single function won't be your use case! But for our
    purposes, it's enough; for normal use, you'd get an index with links to every
    class, function, and so on, fully documenting your code.
  prefs: []
  type: TYPE_NORMAL
- en: You have set up your working environment, and you are able to write documented,
    well-indented code in the latest version of JS, but that's still not proof against
    some error that may be committed, so let's now look into ways of enhancing your
    code more deeply.
  prefs: []
  type: TYPE_NORMAL
- en: Adding code quality checks with ESLint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JS is a very potent language, but there''s also great potential for misuse.
    For example, most people would agree that if `a==b` is true, and `b==c` is also
    true, then `a==c` should be true too, but because of the data type conversion
    rules that JS applies for the `==` operator, you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Another example follows; what does this very simple function return?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you answered *an object*, you would have been bitten by a missing semicolon.
    This code is actually interpreted by JS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note the semicolon after `return`. This function returns `undefined`, and `something`
    is interpreted as a label for an expression that happens to be `true`; bad! These
    kinds of situations are common enough, and even if you know what you are doing,
    getting at least a warning about possible problems with your code could help root
    out a bug, and that's the kind of warning that `ESLint` produces.
  prefs: []
  type: TYPE_NORMAL
- en: The *gotcha* shown previously is only one of many that JS has for unaware developers.
    Google for *JavaScript gotchas* and you'll get several lists of possible errors.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Linters** are a class of programming tools that analyze your source code,
    and raise warnings and errors about poor-quality uses or constructs that could
    even imply bugs. We are going to use ESLint, created by Nicholas Zakas in 2013;
    the tool''s current version is 5.10.0, as of December, 2018.'
  prefs: []
  type: TYPE_NORMAL
- en: The first `lint` program was written in 1978 by Stephen Johnson, at Bell Labs,
    where he also worked on Unix, **yet another compiler compiler** (**yacc**), and
    the portable C compiler, which made it easier to output code for different computer
    architectures.
  prefs: []
  type: TYPE_NORMAL
- en: ^(`ESLint` is based upon pluggable rules, which may be enabled or disabled at
    will, or configured according to your specific preferences. (You could even develop
    your own rules, but that's beyond the scope of this book.) There are also bundles
    of rules that let you avoid having to individually configure dozens of distinct
    rules.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing ESLint is quite simple, and just requires doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you will have to add ESLint options to the `package.json` configuration
    file; let''s get into this. First, we''ll add a script to apply ESLint to our
    complete source directory (which has only a single file at this time!) with `npm
    run eslint`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We must also specify some configuration for ESLint itself. We''ll add a completely
    new section for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go item by item:'
  prefs: []
  type: TYPE_NORMAL
- en: '`parserOptions` lets you specify what JS version you want to process (I''m
    going with 2017, for ES8), and whether you are going to use modules (I''m indicating
    this, in advance of what we''ll see in the *Organizing code in modules* section
    of [Chapter 2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml), *Using Modern JavaScript
    Feature*s).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`env` lets you specify the environment(s) you are going to work with, and that
    really means that some global variables will be assumed to exist. In this case,
    I''m saying I will be working both with code for browsers and for `Node`, but
    there are plenty more possible environments; checkout the *Specifying Environments*
    section at [https://eslint.org/docs/user-guide/configuring](https://eslint.org/docs/user-guide/configuring).
    Later on, we will be adding some more environments, for example, for unit testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extends` lets you select a predefined set of rules, which you will later be
    able to modify to suit your tastes. I''m going with the recommended set; you can
    read more about it at [https://github.com/kunalgolani/eslint-config](https://github.com/kunalgolani/eslint-config).
    The available sets of rules change only whenever the `ESlint` major version changes,
    so they are reasonably stable. Furthermore, the `recommended` set represents a
    usually agreed upon list of rules, so before you start tinkering with specific
    changes, give it a try as is. The complete set of rules is available at [https://eslint.org/docs/rules/](https://eslint.org/docs/rules/),
    and the recommended rules can be found at [https://github.com/eslint/eslint/blob/master/conf/eslint-recommended.js](https://github.com/eslint/eslint/blob/master/conf/eslint-recommended.js).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rules` lets you change some of the rules to better suit your style. We''ll
    see good reasons for this soon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If (and only if) you are planning to use some `Babel` feature that is not yet
    supported by `ESLint`, you should install and use the `babel-eslint` package from [https://www.npmjs.com/package/babel-eslint](https://www.npmjs.com/package/babel-eslint).
    This will also require adding a line to the `.eslintrc.json` file to change the
    parser that `ESLint` uses. However, keep in mind that it's highly unlikely you
    will require this change!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we use `npm run eslint` as is, we will get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The standard rules do not allow using `console.log(...)`, since you don''t
    probably want to include them in your shipped application; this is the `no-console`
    rule at [https://eslint.org/docs/rules/no-console](https://eslint.org/docs/rules/no-console).
    We can enable or disable rules on a global or local basis. If we approve of this
    `console.log(...)`, we must then disable the `no-console` rule locally. We''ll
    do this by adding a comment to the source code, just before the problem line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If you had used `// eslint-disable no-console`, you would have disabled the
    `no-console` rule for the whole source file; `// eslint-disable` with no further
    specification would have disabled *all* rules for the file. After this, if you
    use `npm run eslint`, you'll get no errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s set a global rule. Some people don''t like the `solutions++` line
    because not everybody feels comfortable with the `++` operator; there''s a `no-plusplus` rule
    for this, at [https://eslint.org/docs/rules/no-plusplus](https://eslint.org/docs/rules/no-plusplus),
    but by default it''s not enabled in the recommended set, so we will enable it globally
    by adding to the `rules` section in `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, if you run `ESLint`, you''ll get a new error, and the developer
    that supposedly did it should fix the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The possible configurations for a rule are `"off"` (if you want to disable it), `"warn"` (if
    you want to get a warning, but accept it), and `"error"` (rejecting the file).
    Some rules accept extra configurations, but those are specific; you'll have to
    read the rule documentation in order to learn about the possible changes. See [https://eslint.org/docs/rules/no-empty](https://eslint.org/docs/rules/no-empty)
    for a specific example with the `no-empty` rule, which disallows empty blocks
    of code but has an extra option to allow them in `catch` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Deciding what rules to enable or disable is something that usually happens at
    the beginning of a project, and it can be expected that some new rule changes
    will happen over time. In any case, no matter what you pick, ideally you should
    work only with `"off"` and `"error"`; if developers get used to warnings, they
    finally end up not paying attention to them, and that can be bad! Get used to
    the whole list of rules at [https://eslint.org/docs/rules/.](https://eslint.org/docs/rules/)
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, all projects will be using an `out/` directory for the output file,
    which you would then distribute. If you care to look at some files within it,
    you don''t need `ESLint` protesting about possible errors in generated code. To
    avoid this, you can add a small section to the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, all these checks are very good, but if you had to stop working, save
    everything, and run a separate tool each time you wanted to check for problems
    in your code, it would soon become unbearable. However, with VSC you can add a
    plugin to interact with ESLint in real time. Go to the extensions view and search
    for ESLint; you should find and install an extension, currently at version 1.7.2
    (March 2018), written by Dirk Baeumer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you install this extension, errors will be shown on screen with a wavy
    red underline, and if you mouse over them, you''ll get an explanation about the
    failed rule. Take a look at the  for an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2cbacf17-225c-450b-92b8-c0bd991c1b94.png)'
  prefs: []
  type: TYPE_IMG
- en: The ESLint plugin in action, showing problems with the code in real time
  prefs: []
  type: TYPE_NORMAL
- en: 'There are very few configuration items for `ESLint`; the only one I use is `"eslint.alwaysShowStatus":
    true`, so the status bar will show whether `ESLint` is enabled or not.'
  prefs: []
  type: TYPE_NORMAL
- en: An interesting package that you could consider is the web `DeepScan` tool at [https://deepscan.io/home/](https://deepscan.io/home/).
    `DeepScan` is advertised as *beyond Lint*, insofar as it can also detect runtime
    problems having to do with implicit type conversions, null checks, unreachable
    code, and more. For the time being, `DeepScan` is considered to be in beta stage
    and there are no paid plans yet. You can use it free for open source projects;
    for example, you can use it automatically with a GitHub project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Flow for data types checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's finish this chapter by considering a tool that turns JS into a (sort of)
    new language, a *typed* one. One of the characteristics of JS is being untyped;
    for example, a variable can hold, or a function may return, any kind of value,
    there's no way to declare what type(s) should be stored in a variable or returned
    from a function. In this section, we will add `Flow`, a tool developed by Facebook,
    which allows for data type controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular developers do not go for `Flow`, and opt for `TypeScript` instead.
    (OK, not Angular developers only; you can use `TypeScript` practically everywhere!)
    This version of JS was developed by Microsoft, and also includes data typing in
    a style very similar to `Flow`. `TypeScript` has its own transpiler, and you won''t
    need `Babel` or `Flow`, so configuration will be a tad simpler. Instead of `ESLint`,
    you''ll use `TSLint`, but you need not forego ESLint''s rules: install `tslint-eslint-rules`;
    (see [https://github.com/buzinas/tslint-eslint-rules](https://github.com/buzinas/tslint-eslint-rules))
    and you''ll get the best of both worlds.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be getting into how to fully use `Flow` in the *Adding types* section
    of [Chapter 2](2948d1ab-ac85-4b3a-90f1-f240b7688216.xhtml), *Using JavaScript
    Modern Features*, but let me give you a preview of what we expect; then, we''ll
    get to install all the needed packages, and afterwards we''ll go into more details. Imagine
    you wrote a highly complex function to add two numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'However, since JS won''t check types and has some conversion rules, the following
    two lines would also work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You could, on principle, add a lot of data type checking code to your function
    to verify `typeof(x)==="number"`, but that can become a chore. (Although, of course,
    for some cases it's the only solution.) However, many errors can be detected before
    even running the code, as would happen here.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you modify the function to include data type declarations, `Flow` will be
    able to detect the two wrong uses, and you will be able to solve the situation
    before even running the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Basically, that's all there is! Of course, there are many details about what
    data types are available, defining new ones, using interfaces, and much more,
    but we'll get to that in the next chapter. For the time being, let's just install
    it with the promise that we will learn more about its use very shortly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing `Flow` depends on whether you are working with `Babel` (as would
    be the case for client-side browser code) or not (as you would do for server-side
    code). We will see how to deal with `Node` starting in [Chapter 3](f2d2d72d-2137-4f67-8d72-9a113dc3d09c.xhtml),
    *Developing with Node*; here, we'll just consider Babel.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, execute the following command to get the needed Flow packages, including
    the Babel and ESLint ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the `"flow"` preset for Babel in `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add some lines to the `ESLint` configuration, also in `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `"flow"` script in `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Finally, perform `npm run flow init` to initialize `Flow`, only once, to create
    a `.flowconfig` file with information that will be used by the `Flow` process.
    (See [https://flow.org/en/docs/config/](https://flow.org/en/docs/config/) for
    more information on this file.)
  prefs: []
  type: TYPE_NORMAL
- en: The `.flowconfig` file doesn't really match the style of other configuration
    files, and should really be a JSON file instead, possibly part of `package.json`.
    However, this is a still pending item; you can check [https://github.com/facebook/flow/issues/153](https://github.com/facebook/flow/issues/153)
    to monitor advances, but for the time being, you'll have to deal with `.flowconfig`
    as is.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the configuration you just wrote, you are set! Just do `npm run flow` whenever
    you start to work, to run a background process that will check your code incrementally
    and let you know about possible data type problems. However, you may even skip
    this step if you work with VSC; see the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Flow's linting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though `ESLint` has us well covered for avoiding JS bad coding practices,
    it doesn't do much with regard to data types, but `Flow` can help us in this area.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a set of rules you can apply, and you will configure them through
    the `.flowconfig` file we mentioned in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line, `all=warn`, is a *catch-all*, which defines the standard setting
    for all rules; possible values are `off`, `warn`, and `error`. After that, you
    can specify settings for individual rules; for example, in the preceding code
    I decided to ignore warnings about unsafe getters or setters. Some rules are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sketchy-null`, which applies whenever you test the value of a variable that
    could be false (for example, zero) but also null or undefined, in the context
    of something like `if (x) { ... }`. This warning is meant to remind you that the
    variable might have a value you weren''t considering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sketchy-null-bool`, `sketchy-null-number`, `sketchy-null-string`, and `sketchy-null-mixed`
    are more granular versions of `sketchy-null`, and apply only to the specified
    data types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unclear-type` warns about using `any`, `Object`, or `Function` as data type
    annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`untyped-import` and `untyped-type-import` warn you against importing from
    untyped files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unsafe-getters-setters` advises against using getters or setters, because
    of their side effects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the complete current set of `Flow` linting rules at [https://flow.org/en/docs/linting/rule-reference/](https://flow.org/en/docs/linting/rule-reference/),
    where you will also find examples of each rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also set `include_warnings` to `true`, in order to be able to get
    warnings in VSC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Whatever settings you include in `.fontconfig` will apply globally to your
    entire project, but you can also change them on a file-by-file basis, or even
    for a single line of code, along the same lines as with ESLint. You can disable
    warnings for a line by using a `flowlint-next-line` comment and listing the rules
    you want to change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: There is another comment, `flowlint`, that applies to the complete file. Checkout [https://flow.org/en/docs/linting/flowlint-comments/](https://flow.org/en/docs/linting/flowlint-comments/)
    for more possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Using Flow within VSC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have been doing previously, we''ll want to see `Flow` problems right
    in VSC. There''s a simple solution: just go to Extensions, search for `Flow Language
    Support`, and install the package; that''s it!'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll also have to change two settings for VSC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `"flow.useNPMPackagedFlow": true` and this will remove the need to do `npm
    run flow` at the beginning; the extension will do that on its own'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add `"javascript.validate.enable": false` to avoid clashes between Flow''s
    syntax and JS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After that, you will be able to see `Flow` errors onscreen; see following screenshot
    for an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8759edb-75e5-437d-b204-2eb8b2641d2b.png)'
  prefs: []
  type: TYPE_IMG
- en: The VSC Flow extension lets you catch data type errors in real time; however,
    error messages are not always very clear
  prefs: []
  type: TYPE_NORMAL
