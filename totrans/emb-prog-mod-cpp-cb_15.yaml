- en: Microcontroller Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we mostly covered topics applicable to relatively powerful
    embedded systems that have megabytes of memory and run Linux operating systems.
    Now, we are going to explore the other side of the embedded system spectrum—microcontrollers.
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed in the introduction, microcontrollers are commonly used to perform
    simple, often real-time tasks, such as collecting data or providing a high-level
    API to a specific device. Microcontrollers are inexpensive, consume little energy,
    and can work in a wide range of environmental conditions, making them a perfect
    choice for IoT applications.
  prefs: []
  type: TYPE_NORMAL
- en: The other side of their low cost is their capabilities. Normally, they have
    onboard memory that is measured in kilobytes and do not have hardware memory mapping.
    They do not run any operating system at all, or run a simple real-time operating
    system like FreeRTOS.
  prefs: []
  type: TYPE_NORMAL
- en: There are many models of microcontrollers, tailored for specific applications.
    In this chapter, we will learn how to use the Arduino development environment.
    The recipes were created for the Arduino UNO board built on top of an ATmega328
    microcontroller, which is widely used for education and prototyping purposes,
    but they will work for other Arduino boards as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling and uploading a program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging microcontroller code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These recipes will help with setting up the environment and starting development
    for microcontrollers.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Arduino UNO board comes with an integrated development environment, or IDE,
    called the Arduino IDE. It can be downloaded for free from [https://www.arduino.cc/](https://www.arduino.cc/)[ website.](https://www.arduino.cc/)
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to set it up and connect your Arduino board.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to install the Arduino IDE, connect the Arduino UNO board to your
    computer, and then establish the communication between the IDE and the board:'
  prefs: []
  type: TYPE_NORMAL
- en: In your browser, open the downloads ([https://www.arduino.cc/en/Main/Software](https://www.arduino.cc/en/Main/Software))
    page and choose an installation option that matches your operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the download is complete, follow the installation instructions from the
    *Getting started* ([https://www.arduino.cc/en/Guide/HomePage](https://www.arduino.cc/en/Guide/HomePage))
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your Arduino board to your computer using a USB cable. It will power
    on automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the Arduino IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to establish communication between the IDE and the board. Switch
    to the Arduino IDE window. In the application menu, select Tools -> Port. This
    will open a sub-menu with serial port options available. Choose the one that has
    Arduino in its name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Tools menu, click the Board item and then select a model of your Arduino
    board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Tools -> Board Info menu item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Arduino boards come with a free IDE that can be downloaded from the manufacturer's
    site. The IDE installation is straightforward and is not different from the installation
    of any other software for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: All code is written, compiled, and debugged in the IDE, but the resulting compiled
    images should be flashed to the target board and executed there. For this, the
    IDE should be able to communicate with the board.
  prefs: []
  type: TYPE_NORMAL
- en: The board is connected to the computer running the IDE via USB. The USB cable
    provides not only communication but also power for the board. As soon as the board
    is connected to the computer, it turns on and starts working.
  prefs: []
  type: TYPE_NORMAL
- en: 'The IDE uses a serial interface for communication with the board. Since there
    can be multiple serial ports already configured on your computer, one of the steps
    to set up the communication is to choose one of the available ports. Usually,
    it is the one that has Arduino in its name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1a46111-aa64-40fa-8b02-89e6f0e44b6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, once the port has been selected, we let the IDE know the type of Arduino
    board we use. Once done, we can check whether communication between the board
    and the IDE actually works. When we invoke the Board Info menu item, the IDE displays
    a dialog window with information pertaining to the connected board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16acebfc-27e7-4597-9f52-8beceb7b0020.png)'
  prefs: []
  type: TYPE_IMG
- en: If the dialog does not show up, this indicates a problem. The board may be disconnected
    or damaged, or the wrong port may have been selected. Otherwise, we are ready
    to build and run our first program.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If something goes wrong, consider reading the troubleshooting section ([https://www.arduino.cc/en/Guide/Troubleshooting](https://www.arduino.cc/en/Guide/Troubleshooting))
    on the Arduino site.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling and uploading a program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learned how to set up the development environment.
    Now, let's compile and run our first program.
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino UNO board itself does not have a screen, but we need some way to
    know that our program is doing something. It does, however, have a built-in LED
    that we can control from our program without connecting any peripherals to the
    board.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to compile and run a program that blinks a
    built-in LED on an Arduino UNO board.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to compile and upload to the board an existing example application
    that comes with the IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the Arduino board to your computer and open the Arduino IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Arduino IDE, open the File menu and choose Examples -> 01\. Basics ->
    Blink.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new window will open. In this window, click the Upload button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observe how the built-in LED on the board starts flashing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arduino is a platform widely used for educational purposes. It is designed
    to be easy to use and comes with a bunch of examples. For our first program, we
    have chosen an application that does not require the board to be wired with external
    peripherals. Once we launch the IDE, we select the Blink application from the
    examples available, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c4aa898-0a41-4617-b54b-6bee11bd551f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This opens a window with the program code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5b18011-15bc-4c0e-aed8-d2f26799737d.png)'
  prefs: []
  type: TYPE_IMG
- en: Aside from the source code of the program, we can also see a black console window
    and a status bar, indicating that the Arduino UNO board is connected via the `/dev/cu.usbmodem14101`
    serial port. The device name depends on the board model, and the port name may
    look different in Windows or Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Above the source code, we can see several buttons. The second button, a right-pointing
    arrow, is the Upload button. Once we press it, the IDE starts building the application
    and then uploads the resulting binary to the board. We can see the build status
    in the console window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0a8e609-5449-4491-866d-7708f48e4f68.png)'
  prefs: []
  type: TYPE_IMG
- en: The application starts immediately after uploading. If we take a look at the
    board, we can see that the built-in yellow LED has started blinking. We were able
    to build and run our first Arduino application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After uploading, your program is stored in the flash memory on the board. If
    you power off your board and then power it on again, the program starts running
    even if you do not have an IDE running.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging microcontroller code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compared with more powerful embedded platforms, such as the Raspberry PI, the
    debugging capabilities of Arduino are limited. The Arduino IDE does not provide
    an integrated debugger, and the Arduino board itself does not have a built-in
    screen. It does, however, have UART, and provides a serial interface that can
    be used for debugging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the Arduino serial interface for debugging
    and reading user input.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement a simple program for the Arduino controller that waits for
    user input on the serial port and turns the built-in LED on or off depending on
    the data:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Arduino IDE and select New in its File menu. A new Sketch window will show
    up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Paste the following code snippet into the Sketch window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Click the Upload button to build and run the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Serial Monitor in the Tools menu of the Arduino IDE. A Serial Monitor
    window will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Serial Monitor window, enter `1010110`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We create a new Arduino sketch that consists of two functions. The first function,
    `setup`, is invoked on the program startup and is used to provide the initial
    configuration of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we need to initialize the serial interface. The most important
    parameter of serial communication is its speed in bits per second. Both the microcontroller
    and the IDE should agree to use the same speed, otherwise the communication will
    not work. By default, the serial monitor uses 9,600 bits per second, and we use
    this value in our program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It is possible to use higher communication speeds though. The serial monitor
    has a dropdown in the bottom-right corner of the screen that allows other speeds
    to be selected. If you decide to use other speeds, the code should be modified
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also configure pin 13, corresponding to the built-in LED, for output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the constant, `LED_BUILTIN`, instead of `13`, to make the code more
    understandable. The second function, `loop`, defines an endless loop of the Arduino
    program. For each iteration, we read a byte from the serial port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It the byte is `1`, we turn the LED on and write a message back to the serial
    port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, for `0`, we turn the LED off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: All other values are ignored. After each byte read from the port, we add a 500
    microsecond delay. This way, we can define different blinking patterns. For example,
    if we send `1001001`, the LED will turn on for 0.5 seconds, then off for 1 second,
    on for 0.5 seconds, off for 1 second, and finally, on again.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the code and enter `1001001` in the serial monitor, we can see the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d2f169e-1b5f-4686-8942-7f5faf28a277.png)'
  prefs: []
  type: TYPE_IMG
- en: The LED is blinking as expected and, apart from that, we can see debug messages
    in the serial monitor. In this way, we can debug real, more complex applications.
  prefs: []
  type: TYPE_NORMAL
