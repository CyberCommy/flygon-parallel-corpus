- en: Chapter 4. Control-Connected Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at how to control devices from remote sites using
    our Raspberry Pi Zero and Arduino UNO, using the following modules to communicate
    in a network: Wi-Fi shield and Ethernet shield. We will cover the following topics
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Making a simple web server with Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling a relay from a Raspberry Pi Zero using Restful API and Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Node.js in a computer as a web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring temperature, humidity, and light using Node.js with Arduino Wi-Fi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring temperature, humidity, and light using Node.js with Arduino Ethernet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a simple web server with Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important aspect of having a Raspberry Pi is that we have a
    real computer configured with services and servers. In this section, we will explain
    how to install Node.js, which is a powerful framework that we will use to run
    most of the applications we are going to see in this book. Luckily for us, installing
    Node.js on Raspberry Pi is really simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the folder for this chapter, open the file called `webserver.js`. We will
    create a server on port *8056*. To test the program and see the results we have
    to open the Node.js terminal on your MS-DOS interface and run this file with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines to `webserver.js` file to declare the HTTP request
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We create the server with the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the content of the file that we will show in the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We send the response from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s important to define the port that is going to be opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the message of the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To test this program, open the browser on your local computer and navigate
    to the following link: `http://192.168.1.105:8056`. If you see the following screen;
    your Node.js server is running perfectly on your computer; you need to change
    the IP address of your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a simple web server with Node.js](graphics/B05170_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling a relay from a Raspberry Pi Zero using Restful API and Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how to control a relay module connected to
    an Arduino UNO board, a relay for sending commands from a web browser. Let's do
    it.
  prefs: []
  type: TYPE_NORMAL
- en: JSON structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JavaScript Object Notation**  **(JSON)** is a lightweight data-interchange
    format. It is easy for humans to read and write. It is easy for machines to parse
    and generate. It is based on a subset of the JavaScript Programming Language.'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON is built on two structures:'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of name/value pairs. In various languages, this is realized as
    an object, record, struct, dictionary, hash table, keyed list, or associative
    array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An ordered list of values. In most languages, this is realized as an array,
    vector, list, or sequence.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, we need to know how to apply the JSON format that we use to describe
    this structure, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the format that we need to follow and make responsive:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data:** Defines the number of the command and then describes the definition
    of the command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name:** Follows the name of the device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connected:** Confirms if the device is connected or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the data that is between the `{ }` defines our JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: Commands with the aREST API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the `aREST` command like this, we can define our Arduino and the devices,
    and then control them from a web browser. The following are examples of the commands
    from the `aREST` API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`IP_Address_of the device/mode/6/o`: This configures the digital pin 6 like
    an output pin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IP_Address_of the device /digital/6/1`: Configures output 6 and makes the
    function like a digitalwrite. For example: `http://192.168.1.100/digital/6/1`;
    we define the IP address of the device and the number of the pin that will be
    activated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Node.js on your Raspberry Pi Zero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Node.js is a tool that will allow us to create servers running in the device,
    using code in JavaScript. The most important thing is that we will apply this
    framework to build a web server using this code.
  prefs: []
  type: TYPE_NORMAL
- en: Using Node.js means that we configure a web server that will open a port and
    the devices can be connected to the web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following command, you will install Node.js in your Raspberry Pi Zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'NPM is the default package manager for the JavaScript runtime environment with
    Node.js. To configure and install the `aREST` module, type the following line
    in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The Express philosophy is to provide small, robust tooling for HTTP servers,
    making it a great solution for single-page applications, websites, hybrids, or
    public HTTP APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also need to configure the express module with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Controlling the relay using aREST commands from a web browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next section, we will see how to control a digital output from a web
    browser using `Rest` commands. Let''s dive into it, to see more details:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the web server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can now either copy the code inside a file called outputcontrol.js, or
    just get the complete code from the folder for this project and execute it with
    Node.js. Open the terminal on your Raspberry Pi and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the GPIO of the device importing the commands, by using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now we will create our web server using Node.js using the following lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'We import the require packages that are necessary to run. We declare the libraries
    using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the body parser and open the port, in this case, *8099*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the body-parser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure **GPIO 11**, which we will control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We define the functions that we will call from the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The name of the function is `ledon`; it activates the **GPIO 11** and sends
    the message `led1 is on` to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The name of the function is `ledoff`; it turns off the **GPIO 11** and sends
    the message `led1 is off` to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We define the function `GET`, which means that we are making a request to the
    server when the browser receives the function called `ledon`; it responds with
    following format:  `{status:"connected",led:"on"}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now declare the app function for the incoming requests from the clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the function `GET` .which means that we are making a request to the
    server when the browser receives  the function called `/ledoff`, it responds with
    following format: `{status:"connected",led:"off"}. `'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We now open the port from the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If everything is correct, we open our favorite browser and type `http://IP_address
    of your Raspberry_PI_zero:port/command`.
  prefs: []
  type: TYPE_NORMAL
- en: '`In this case, we type 192.168.1.105:8099/ledon`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows you the response of the JSON request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the web server](graphics/B05170_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, we will see the final result, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the web server](graphics/B05170_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Node.js on a computer as a web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js is an open-source, cross-platform runtime environment for developing
    server-side and networking applications. Node.js applications are written in JavaScript,
    and can be run within the Node.js runtime on OS X, Microsoft Windows, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js also provides a rich library of various JavaScript modules that simplify
    the development of web applications using Node.js to a great extent.
  prefs: []
  type: TYPE_NORMAL
- en: In the last section, we configured Node.js in Raspberry Pi Zero, now in this
    section we will do the same thing using a Windows operating system and configure
    our web server Node.js running on it.
  prefs: []
  type: TYPE_NORMAL
- en: The main purpose of this section is to explain how to control our Arduino boards
    from a web server running in the Node.js framework. For that, it's important to
    install it; our system will run on Windows computer.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explain how to install Node.js in Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First we need to download Node.js for Windows 64 bit - it depends of the version
    of your operating system to download it, you just need to go to the following
    link: [https://nodejs.org/es/download/](https://nodejs.org/es/download/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading Node.js](graphics/B05170_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After we have downloaded the software, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **N****ext** button:![Installing Node.js](graphics/B05170_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button:![Installing Node.js](graphics/B05170_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select where to install it:![Installing Node.js](graphics/B05170_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the default configuration:![Installing Node.js](graphics/B05170_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To finish the configuration, we click on **Install**:![Installing Node.js](graphics/B05170_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installation is complete we will see the following:![Installing Node.js](graphics/B05170_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring web server port 8080 with Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we need to configure the port that will be expected to listen to the opening
    connection from the remote browsers. Open the file that is in the folder of this
    chapter, and then execute the file with Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: You can now either copy the code inside a file called `server.js`, or just get
    the complete code from the folder for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to create our server with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function named `loadServer` that has the code to respond to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If this function responds with the number 200 , it means that the connection
    is established, the server works perfectly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create and open the server port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the Terminal with the Node.js server installed on your computer, and then
    in your MS-DOS interface, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to test weather the server is running, we will go the web browser and
    type `localhost:number_of_port`; and you should see on your screen similar to
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![Configuring web server port 8080 with Node.js](graphics/B05170_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring temperature, humidity, and light using Node.js with Arduino Wi-Fi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this part of the chapter, we will explain the code for the Wi-Fi shield
    with Arduino:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring temperature, humidity, and light using Node.js with Arduino Wi-Fi](graphics/B05170_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We define the number of variables; in this case we will monitor three variables
    (`temperature`, `humidity`, and `light`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have to include the library for the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the pin for the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the instance of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We import the libraries for the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the pins for connecting the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We create the instance of the module that will be connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the aREST instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we define the SSID and password, which you need to change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We configure the port to listen for incoming TCP connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the server instance of the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the variables that will be published:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We have here the setup that defines the configuration of serial communications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We begin the variables that will be published:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the ID and the name of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We connect to the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we define the function to get the device connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the connections in the serial interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In this part, we declare the variables that will be acquired:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We then measure light level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We declare the function for requesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to execute the requests from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the networking configuration from the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Download the sketch of code in your Arduino board, and then go to the serial
    monitor to see the configuration of the IP address taken from your router. After
    that, we can display the configuration IP address of the Wi-Fi shield:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring temperature, humidity, and light using Node.js with Arduino Wi-Fi](graphics/B05170_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Connecting to the Wi-Fi network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we can see the IP address of your Arduino Wi-Fi shield, we can now
    connect our computer to the same network as the Arduino board. Look at the following
    screenshot to see more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the Wi-Fi network](graphics/B05170_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To test the application, we need to go to the following path and run the following
    commands on the computer that you have installed your Node.js server, on as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the Wi-Fi network](graphics/B05170_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this folder, we have the file in JavaScript and type the command node app.js
  prefs: []
  type: TYPE_NORMAL
- en: 'After entering the interface folder type the following command `node app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the Wi-Fi network](graphics/B05170_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you have launched the web server, application, switch over to a browser,
    on the same machine to see the results by entering the IP address of the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the Wi-Fi network](graphics/B05170_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the server is listening on port 300, it establishes communication with
    the Wi-Fi module sending a request to the IP address of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the Wi-Fi network](graphics/B05170_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring temperature, humidity, and light using Node.js with Arduino Ethernet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding section, we showed how to monitor our Arduino via Wi-Fi using
    the *CC3000* module; now we will use another important module: Ethernet Shield.
    The hardware connection of the part is similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring temperature, humidity, and light using Node.js with Arduino Ethernet](graphics/B05170_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Code for the application of the Arduino Ethernet shield
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can now either copy the code inside a file called `Monitor_Ethernet.ino`,
    or just get the complete code from the folder for this project; you need to use
    the Arduino  IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the libraries included in the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the library for the DHT11 sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the pins for the temperature and humidity sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We have the instance of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We register the MAC address for the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We now create an instance of the `aREST` API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We publish the variables that will be monitored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'We now configure serial communication and start the instance of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'We start the variables to publish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'It is very important to give the ID and the name of the device that we are
    using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We begin the Ethernet connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'We display the IP address on the serial monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We read the temperature and humidity sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'We measure the light level of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We listen for the incoming clients that will be connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have finished the configurations, we open a web browser and type
    the IP address of your Arduino Ethernet shield: `http://192.168.1.153`. If everything
    goes perfectly it will display the following screen with the JSON response from
    the board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code for the application of the Arduino Ethernet shield](graphics/B05170_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the results of the JSON request.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the device in Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will explain the code for configuring the devices that we
    can control from a web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We installed the express package in the previous section; if you have any difficulty,
    just open a terminal and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the node express and create the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define the port to listen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the instance of Jade application, using the view engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We configure the public folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'We now define the devices to monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'We serve the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We start the server and send the message when the device is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Open your terminal in MS-DOS and execute `app.js` in your Node.js server
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the application, open your web browser and type `http://localhost:3000`;
    if a screen like the following, congratulations appears, you just configured your
    server properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the device in Node.js](graphics/B05170_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we have the screen where we see the execution of `app.js` in the Node.js
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the device in Node.js](graphics/B05170_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to control your Arduino board, using modules
    of communication in a networking area from the Raspberry Pi Zero in a central
    interface Dashboard. We have looked at how to control and monitor devices from
    a central interface; you can use other sensors, for example, a sensor barometric
    pressure.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will do more interesting projects such as configuring
    and connecting a web camera to your Arduino board that can be monitored from your
    Raspberry Pi Zero.
  prefs: []
  type: TYPE_NORMAL
