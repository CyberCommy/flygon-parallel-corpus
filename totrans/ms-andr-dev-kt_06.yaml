- en: Permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hello again! Can you believe that one important part of this book is already
    behind us? We are finished with the user interface, and, now, we are heading into
    a more complex part of the book--the system.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, and the ones following, we will dig deep into the structure
    of the Android system. You will learn about permissions, database handling, preferences,
    concurrency, services, messaging, the backend, APIs, and high performances.
  prefs: []
  type: TYPE_NORMAL
- en: However, you shouldn't let yourself be fooled; this book and its content does
    not cover the entire framework. That is simply impossible; Android is such a vast
    framework that it can take you years to completely master it. Here, we are merely
    penetrating into the world of Android and Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: However, don't be discouraged! In this book, we will give you knowledge and
    skills needed for mastering both Kotlin and Android. In this chapter, precisely,
    we will discuss permissions in Android. You will learn what are permissions, what
    are they used for, and, most importantly, why we need (with strong emphasis on
    need) to use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Permissions from Android Manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permission handling in the Kotlin way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions from Android Manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android applications operate in their own process and are separated from the
    rest of the operating system. Because of this, in order to perform some system
    specific operations, it's required to request them. An example of such permission
    requests are requests to use Bluetooth, retrieve the current GPS location, send
    SMS messages, or read from or write to file system. Permissions grant access to
    various device features. There are several ways to deal with permissions. We will
    start with a very base using manifest.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we must determine what permissions are needed. It can happen that
    during the installation procedure, a user decides not to install an application
    because there are too many permissions. For example, a user can ask himself why
    an application requires the send SMS functionality when an application itself
    is just a simple image gallery application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Journaler, the application we are developing in this book, we will need
    the following permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the GPS coordinates because we want each note we create to have coordinates
    associated if we want to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will need access to the internet, so we can later execute API calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boot complete event, we will need it so the application service can do synchronization
    with the backend each time we reboot our phone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading and writing external storage so we can read the data or store it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access network state so we know if there is a connection to the internet available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use vibration so we can vibrate when we received something from the backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open the `AndroidManifest.xml` file and update it with the following permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Names for permissions we just requested are pretty much self-explanatory and
    they are covering all the points we mentioned. Besides these permissions, you
    can request some others as well. Take a look at the following names for each.
    You will be surprised what you can actually request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Requesting permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the Android SDK version, 23 permissions are required to be requested
    at runtime (not for all of them). This means that we need to request them from
    the code as well. We will demonstrate how to do that from our application. We
    will request required permissions for the GPS location obtaining as a user opens
    the application. The user will get a dialog to approve permission if there is
    not any approved. Open your `BaseActivity` class and extend it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So what exactly is going on in this code? We will explain all lines from top
    to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: In the `companion` object, we defined the ID for our request. We will wait for
    the result for that ID. In the `onCreate()` method, we called the `requestGpsPermissions()`
    method that actually makes the permission request under the ID we defined. The
    result of the permission request will be available in the `onRequestPermissionsResult()`
    overrode method. As you can see, we are logging permission request results. The
    application can now retrieve the GPS data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The principle is the same for all other Android permissions. Build your application
    and run it. You will be asked about permissions as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae6af33a-4ea1-4a16-ab34-4801233b8808.png)'
  prefs: []
  type: TYPE_IMG
- en: Doing it the Kotlin way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What happens if our application requires a lot of permissions that must be handled
    through the code? It happens that we have a lot of code handling different permission
    requests. This means that we have a lot of boilerplate code! Luckily for us, we
    are using Kotlin. Kotlin will be our tool to make things simpler!
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new package called `permission`. Then create two new Kotlin files
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PermissionCompatActivity` and `PermissionRequestCallback`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the permission request callback as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be the `callback` that will be fired when permissions are resolved.
    Then, define our permission `compat` activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The idea behind this class is the following--we exposed end-user to the `requestPermissions()`
    method that accepts a variable number of arguments representing permissions we
    are interested in. We can pass the `callback` (the interface we just defined)
    that is optional. If we do not pass our own `callback`, the default one will be
    used. After permissions are resolved, we fire `callback`s. We consider permissions
    resolving successful, only if all permissions are granted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update our `BaseActivity` class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we removed all previous permissions-related code from the `BaseActivity`
    class and replaced it with a single `requestPermission()` call.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was maybe short, but the information that you learned was extremely
    valuable. Permissions are needed for every Android application. They are there
    to protect both the users and the developers. And, as you have seen, there are
    quite a lot different permissions that you can use depending on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue with the system part, and you will learn
    about database handling.
  prefs: []
  type: TYPE_NORMAL
