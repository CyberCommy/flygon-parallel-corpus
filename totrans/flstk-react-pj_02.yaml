- en: Preparing the Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before building applications with the MERN stack, we first need to prepare the
    development environment with each technology, and also with tools to aid development
    and debugging. This chapter guides you through understanding workspace options,
    essential development tools, how to set up the MERN technologies in your workspace,
    and the steps to check this setup with actual code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Workspace options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code editors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome Developer Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npm modules to complete the MERN stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code to check MERN setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting development tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are plenty of options available when it comes to selecting basic development
    tools such as text editors or IDEs, version control software, and even the development
    workspace itself. In this section, we go over options and recommendations relevant
    to web development with MERN so you can make informed decisions when selecting
    these tools based on individual preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Workspace options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing on a local machine is the most common practice among programmers,
    but with the advent of good cloud development services, such as Cloud9 ([https://aws.amazon.com/cloud9/?origin=c9io](https://aws.amazon.com/cloud9/?origin=c9io)),
    it's now possible to use either or both. You can set up your local workspace with
    MERN technologies, and this will be assumed to be the case in the rest of the
    book, but you can also choose to run and develop the code in the cloud services
    that come equipped for Node development.
  prefs: []
  type: TYPE_NORMAL
- en: Local and cloud development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can choose to use both types of workspaces to enjoy the benefits of working
    locally without worrying about bandwidth/internet issues and to work remotely
    when you don't physically have your favorite local machine. To do this, you can
    use Git to version control your code, store your latest code on remote Git hosting
    services such as GitHub or BitBucket, and then share the same code across all
    your workspaces.
  prefs: []
  type: TYPE_NORMAL
- en: IDE or text editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most cloud development environments will come integrated with source code editors.
    But for your local workspace, you can pick any based on your preference as a programmer,
    then customize it for MERN development. For example, the following popular options
    can each be customized as required:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Atom** ([https://atom.io/](https://atom.io/)): A free, open-source text editor
    for GitHub that has many MERN stack relevant packages available from other developers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SublimeText** ([https://www.sublimetext.com/](https://www.sublimetext.com/)):
    A proprietary, cross-platform text editor that also has many MERN stack relevant
    packages available, along with support for JavaScript development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code** ([https://code.visualstudio.com/](https://code.visualstudio.com/)):
    A feature-rich source code editor by Microsoft with extensive support for modern
    web application development workflow, including support for MERN stack technologies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WebStorm** ([https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/)):
    A full-fledged JavaScript IDE by JetBrains, with support for MERN stack-based
    development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Loading, viewing and debugging the frontend is a very crucial part of the web
    development process. The Chrome Developer Tools, which are a part of the Chrome
    Browser, have many great features that allow debugging, testing, and experimenting
    with the frontend code, and the look, feel, responsiveness, and performance of
    the UI. Additionally, the React Developer Tools extension is available as a Chrome
    plugin, and it adds React debugging tools to the Chrome Developer Tools.
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any development workflow is incomplete without a version control system that
    enables tracking code changes, code sharing, and collaboration. Over the years,
    Git has become the de facto version control system for many developers and is
    the most widely used distributed source code management tool. For code development
    in this book, Git will help primarily to track progress as we go through the steps
    to build out each application.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start using Git, first install it on your local machine or cloud development
    environment based on your system specifications. Relevant instructions to download
    and install the latest Git, along with documentation on using Git commands can
    be found at: [https://git-scm.com/downloads](https://git-scm.com/downloads).
  prefs: []
  type: TYPE_NORMAL
- en: Remote Git hosting services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud-based Git repository hosting services such as GitHub and BitBucket help
    share your latest code across workspaces and deployment environments, and also
    to back up your code. These services pack in a lot of useful features to help
    with code management and the development workflow. To get started, you can create
    an account and set up remote repositories for your code bases.
  prefs: []
  type: TYPE_NORMAL
- en: All these essential tools will enrich your web development workflow and increase
    productivity once you complete the necessary setup in your workspace and start
    building MERN applications.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MERN stack technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MERN stack technologies are being developed and upgraded as this book is being
    written, so for the work demonstrated throughout this book, we use the latest
    stable versions at the time of writing. Installation guidelines for most of these
    technologies are dependent on the system environment of your workspaces, so this
    section points to all relevant installation resources, and also acts as a guide
    for setting up a fully functioning MERN stack.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB must be set up and running in the development environment before any
    database features are added to MERN applications. At the time of writing, the
    current stable version of MongoDB is 3.6.3, and this version of the MongoDB Community
    Edition is used for developing the applications in this book. The rest of this
    section provides resources on how to install and run MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to install and start MongoDB on your workspace to be able to use it
    for development. The installation and startup process for MongoDB depends on workspace
    specifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud development services will have their own instructions for installing and
    setting up MongoDB. For example, the how-to steps for Cloud9 can be found at: [https://community.c9.io/t/setting-up-mongodb/1717](https://community.c9.io/t/setting-up-mongodb/1717).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The guides for installation on your local machine are detailed at: [https://docs.mongodb.com/manual/installation/](https://docs.mongodb.com/manual/installation/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the mongo shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *mongo* shell is an interactive tool for MongoDB and a good place to get
    familiar with MongoDB operations. Once MongoDB is installed and running, you can
    run the *mongo* shell on the command line. In the *mongo* shell, you can try commands
    to query and update data as well as perform administrative operations.
  prefs: []
  type: TYPE_NORMAL
- en: Node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backend server implementation for the MERN applications relies on Node, and
    also npm. At the time of writing, 8.11.1 is the latest stable Node version available,
    and it comes bundled with npm version 5.6.0\. However, the latest version available
    for npm is 5.8.0, so after installing Node, npm will need to be upgraded as discussed
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node can be installed via direct download, installers, or the Node version
    manager:'
  prefs: []
  type: TYPE_NORMAL
- en: You can install Node by directly downloading the source code or a pre-built
    installer specific to your workspace platform. Downloads are available at [nodejs.org/en/download](https://nodejs.org/en/download/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud development services may come with Node preinstalled, such as in Cloud9,
    or will have specific instructions for adding and updating Node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To test if the installation was successful, you can open the command line and
    run `node -v` to see if it correctly returns the version number.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading npm versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to install npm version 5.8.0, run the following install command from
    the command line, and check the version with **`npm -v`**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Node version management with nvm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to maintain multiple versions of Node and npm for different projects,
    nvm is a useful command-line tool to install and manage different versions on
    the same workspace. You have to install nvm separately. Instructions for setup
    can be found at: [github.com/creationix/nvm](https://github.com/creationix/nvm).
  prefs: []
  type: TYPE_NORMAL
- en: npm modules for MERN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The remaining MERN stack technologies are all available as npm modules and can
    be added to each project using `npm install`. These include key modules, such
    as React and Express, which are required to run each MERN application, and also
    modules that will be necessary during development. In this section, we list and
    discuss the modules, then see how to use the modules in a working project in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: Key modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To integrate the MERN stack technologies and run your applications, we will
    need the following npm modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**React**: To start using React, we will need two modules:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-dom`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Express**: To use Express in your code, you will need the `express` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MongoDB**: To use MongoDB with Node applications, you also need to add the
    driver, which is available as an npm module named `mongodb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: devDependency modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To maintain consistency throughout the development of the MERN applications,
    we will use JavaScript ES6 across the stack. As a consequence, and also to aid
    the development process, we will use the following additional npm modules to compile
    and bundle the code and to automatically reload the server and browser app as
    the code is updated during development:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Babel modules are needed for converting ES6 and JSX to suitable JavaScript
    for all browsers. The modules needed to get Babel working are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`babel-core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`babel-loader` for transpiling JavaScript files with Webpack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`babel-preset-env`, `babel-preset-react`, and `babel-preset-stage-2` to provide
    support for React, the latest JS features, and some stage-x features such as declaring
    class fields that are not currently covered under `babel-preset-env`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Webpack modules will help bundle the compiled JavaScript, both for the client-side
    and server-side code. Modules needed to get Webpack working are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-cli` to run Webpack commands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-node-externals` to ignore external Node module files when bundling
    in Webpack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-dev-middleware` to serve the files emitted from Webpack over a connected
    server during development of the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-hot-middleware` to add hot module reloading into an existing server
    by connecting a browser client to a Webpack server and receiving updates as code
    changes during development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nodemon` to watch server-side changes during development, so the server can
    be reloaded to put changes into effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-hot-loader` for faster development on the client side. Every time a
    file changes in the React frontend, `react-hot-loader` enables the browser app
    to update without re-bundling the whole frontend code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although `react-hot-loader` is meant for aiding development flow, it is safe
    to install this module as a regular dependency rather than a devDependency. It automatically
    ensures hot reloading is disabled in production and the footprint is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: Checking your development setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will go through the development workflow and write code
    step-by-step to ensure the environment is correctly set up to start developing
    and running MERN applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will generate these project files in the following folder structure to run
    a simple setup project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The code discussed in this section is available on GitHub in the repository
    at: [github.com/shamahoque/mern-simplesetup](https://github.com/shamahoque/mern-simplesetup).
    You can clone this code and run it as you go through the code explanations in
    the rest of this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Initializing package.json and installing npm modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will begin by using npm to install all the required modules. It is a best
    practice to add a `package.json` file in every project folder to maintain, document,
    and share the npm modules being used in the MERN application. The `package.json`
    file will contain meta information about the application, as well as list the
    module dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the steps outlined in the following to generate a `package.json` file,
    modify it, and use it to install the npm modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm init`: From the command line, enter your project folder and run `npm init`.
    You will be asked a series of questions and then a `package.json` file will be
    auto-generated with your answers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dependencies`: Open the `package.json` in your editor and modify the JSON
    object to add the key modules and `react-hot-loader` as regular `dependencies`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file path mentioned before a code block indicates the location of the code
    in the project directory. This convention has been maintained throughout the book
    to provide better context and guidance as you follow along with the code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`devDependencies`: Modify `package.json` further to add the following npm modules
    required during development as `devDependencies`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mern-simplesetup/package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`npm install`: Save `package.json` and from the command line, run `npm install`
    to fetch and add all these modules to your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Babel, Webpack, and Nodemon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start coding up the web application, we need to configure Babel, Webpack,
    and Nodemon to compile, bundle, and auto reload the changes in the code during
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a `.babelrc` file in your project folder and add the following JSON with
    `presets` and `plugins` specified.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/.babelrc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `react-hot-loader/babel` plugin is required by the `react-hot-loader` module
    to compile `React` components.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to configure Webpack for bundling both the client and server code
    and the client code separately for production code. Create `webpack.config.client.js`,
    `webpack.config.server.js`, and `webpack.config.client.production.js` files in
    your project folder. All three files will have the following code structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `config` JSON object will differ with values specific to the client or server-side
    code, and development versus production code.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Webpack configuration for development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Update the `config` object with the following in your `webpack.config.client.js`
    file, to configure Webpack for bundling and hot loading React code during development.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/webpack.config.client.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`mode` sets `process.env.NODE_ENV` to the given value and tells Webpack to
    use its built-in optimizations accordingly. If not explicitly set, it defaults
    to the value `''production''`. It can also be set via the command line by passing
    the value as a CLI argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`devtool` specifies how source maps are generated, if at all. Generally, a
    source map provides a way of mapping code within a compressed file back to its
    original position in a source file to aid debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry` specifies the entry file where Webpack starts bundling, in this case
    with the `main.js` file in the `client` folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output` specifies the output path for the bundled code, in this case, set
    to `dist/bundle.js`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`publicPath` allows specifying the base path for all assets in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module` sets the regex rule for the file extension to be used for transpilation,
    and the folders to be excluded. The transpilation tool to be used here is `babel-loader`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HotModuleReplacementPlugin` enables hot module replacement for `react-hot-loader`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NoEmitOnErrorsPlugin` allows skipping emitting when there are compile errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side Webpack configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modify the code to require `nodeExternals`, and update the `config` object with
    the following in your `webpack.config.server.js` file to configure Webpack for
    bundling server-side code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/webpack.config.server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `mode` option is not set here explicitly but will be passed as required
    when running the Webpack commands with respect to running for development or building
    for production.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack starts bundling from the server folder with `server.js`, then outputs
    the bundled code in `server.generated.js` in the `dist` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Webpack configuration for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For preparing the client-side code for production, update the `config` object
    with the following code in your `webpack.config.client.production.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/webpack.config.client.production.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will configure Webpack for bundling the React code to be used in production
    mode, where the hot reloading plugin or debug configuration will no longer be
    required.
  prefs: []
  type: TYPE_NORMAL
- en: Nodemon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a `nodemon.js` file in your project folder, and add the following configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/nodemon.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This configuration will set up `nodemon` to watch for changes in the server
    files during development, then execute compile and build commands as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Frontend views with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to start developing a frontend, first create a root template file called
    `template.js` in the project folder, which will render the HTML with `React` components.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/template.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When the server receives a request to the root URL, this HTML template will
    be rendered in the browser, and the `div` element with ID `"root"` will contain
    our `React` component.
  prefs: []
  type: TYPE_NORMAL
- en: Next, create a `client` folder where we will add two React files, `main.js` and
    `HelloWorld.js`.
  prefs: []
  type: TYPE_NORMAL
- en: The `main.js` file simply renders the top-level entry `React` component in the
    `div` element in the HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/client/main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the entry `React` component is the `HelloWorld` component imported
    from `HelloWorld.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`HelloWorld.js` contains a basic `HelloWorld` component, which is hot-exported
    to enable hot reloading with `react-hot-loader` during development.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/client/HelloWorld.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To see the `React` component rendered in the browser when the server receives
    a request to the root URL, we need to use the Webpack and Babel setup to compile
    and bundle this code, and add server-side code that responds to the root route
    request with the bundled code.
  prefs: []
  type: TYPE_NORMAL
- en: Server with Express and Node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the project folder, create a folder called `server`, and add a file called
    `server.js` that will set up the server. Then, add another file called `devBundle.js`,
    which will help compile the React code using Webpack configurations while in development
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: Express app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `server.js`, we will first add code to import the `express` module in order
    to initialize an Express app.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then we will use this Express app to build out the rest of the Node server application.
  prefs: []
  type: TYPE_NORMAL
- en: Bundle React app during development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to keep the development flow simple, we will initialize Webpack to
    compile the client-side code when the server is run. In `devBundle.js`, we will
    set up a compile method that takes the Express app and configures it to use the
    Webpack middleware to compile, bundle, and serve code, as well as enable hot reloading
    in development mode.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/devBundle.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We will call this compile method in `server.js` by adding the following lines
    while in development mode.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: These two highlighted lines are only meant for development mode and should be
    commented out when building the application code for production. In development
    mode, when these lines are executed, Webpack will compile and bundle the React
    code to place it in `dist/bundle.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Serving static files from the dist folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack will compile client-side code in both development and production mode,
    then place the bundled files in the `dist` folder. To make these static files
    available on requests from the client side, we will add the following code in `server.js` to
    serve static files from `dist/folder`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Rendering templates at the root
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the server receives a request at the root URL `/`, we will render `template.js`
    in the browser. In `server.js`, add the following route handling code to the Express
    app to receive GET requests at `/`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Finally, add server code to listen on the specified port for incoming requests.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Connecting the server to MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To connect your Node server to MongoDB, add the following code to `server.js`,
    and make sure you have MongoDB running in your workspace.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this code example, `MongoClient` is the driver that connects to the running
    `MongoDB` instance using its `url` and allows us to implement the database related
    code in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: npm run scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Update the `package.json` file to add the following npm run scripts for development
    and production.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`npm run development`: This command will get Nodemon, Webpack, and the server
    started for development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run build`: This will generate the client and server code bundles for
    production mode (before running this script, make sure to remove the `devBundle.compile`
    code from `server.js`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run start`: This command will run the bundled code in production'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing and debugging in real time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the code developed so far, and to ensure everything is working, you
    can go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Run the application from the command line**: `npm run development`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Load in browser**: Open the root URL in the browser, which is `http://localhost:3000`
    if you are using your local machine setup. You should see a page with the title
    MERN Kickstart that just shows Hello World!.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Develop code and debug live**: Change the `HelloWorld.js` component text
    `''Hello World!''` to just `''hello''`. Save the changes to see the instantaneous
    update in the browser, and also check the command line output to see that `bundle.js`
    is not re-created. Similarly, you can also see instant updates when you change
    the server-side code, increasing productivity during development.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have made it this far, congratulations, you are all set to start developing
    exciting MERN applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed development tool options and how to install MERN
    technologies, and then we wrote code to check whether the development environment
    is set up correctly.
  prefs: []
  type: TYPE_NORMAL
- en: We began by looking at the recommended workspace, IDE, version control software,
    and browser options suitable for web development. You can select from these options
    based on your preferences as a developer.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set up the MERN stack technologies by first installing MongoDB, Node,
    and npm, and then adding the remaining required libraries using npm.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on to writing code to check this setup, we configured Webpack
    and Babel to compile and bundle code during development, and to build production
    ready code. We learned that it is necessary to compile the ES6 and JSX code that
    is used for developing a MERN application before opening the application on browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we made the development flow efficient by including React Hot
    Loader for frontend development, configuring Nodemon for backend development,
    and compiling both the client and server code in one command when the server is
    run during development.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we use this setup to start building a skeleton MERN application
    that will function as a base for full-featured applications.
  prefs: []
  type: TYPE_NORMAL
