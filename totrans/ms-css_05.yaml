- en: Creating the Main Navigation and Drop-Down Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll build all of the functionality and presentation for the
    site's primary navigation. This chapter is pretty deep, as building our main nav
    involves pseudo classes; static, absolute, relative, and fixed positioning; and
    CSS animations.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll begin by creating the cleanest HTML possible and then
    plug in the basic CSS to get it started. The following is what our final site
    should look like; this is what we''re aiming for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have a typical horizontal navigation bar. Some of the items have a drop-down
    menu. We also have a shark logo on the left-hand side of the nav bar, which is
    overhanging nicely.
  prefs: []
  type: TYPE_NORMAL
- en: The semantic HTML for building a menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s jump right in and type the HTML we need. We''ll start with this nice,
    big HTML comment. As you may have noticed, I like these big guys. This is because
    it''s easier to locate parts of the code I need quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll wrap everything in the HTML5 `nav` element and apply the `grouping`
    class because we''ll be floating everything in there. A clearfix will eventually
    be necessary so that the container doesn''t collapse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add a `figure` element that will wrap our shark image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll start an unordered list with the `primary-nav` class. Long ago,
    it was determined that it is very semantic to use a list for navigation because
    it''s essentially a list of links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll start with four list items. We''ll put an anchor tag inside each one
    of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When we apply this to our site, we''ll end up with a shark image and four links,
    all stacked vertically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00173.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We need to lay out these four links horizontally, like blocks. We'll do this
    with floats and a few other properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS to style the navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our CSS, first we''ll find the big block comment for the navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll then target the `primary-nav`. class. Let''s use a special type of descendant
    selector that only targets the first level of list items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is important. We''re doing this because later we''ll nest another unordered
    list within these list items to get a drop-down menu. Let''s say we create the
    same selector without the greater than symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This targets any and every `li` tag inside of `primary-nav`--children, grandchildren,
    great-grandchildren, and so on. If you only want to target immediate children,
    use this selector; it is known as the child combinator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The greater than sign between the elements ensures we are only targeting direct
    children. Let''s also float those list items to the left, then refresh the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00174.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's a start; there's a lot more to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the same type of child combinator to target only direct children
    anchors of a direct children list item of `.primary-nav`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'So we''re going to add padding of `25px` to the top and `0` to the left and
    right. We''ll also add a width; each one will be `150px` wide, and we''ll give
    each one a `border-left` of 1 pixel solid and color them gray:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that it''s now starting to loosely resemble our final nav:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00175.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll now drop this whole ruleset in our CSS, under the primary nav selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a more familiar descendant selector for some of the styles that we''ll
    apply to the main navigation items - as well as - the drop-down navigation items.
    This is a nice **DRY** (**Don''t Repeat Yourself**) approach, so we don''t have
    to re-write this code later for the drop-down menu. Let''s examine this ruleset
    more closely. Basically, we''re setting `font-family` to `Arial`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We have this text color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re using `text-transform: uppercase`. This is going to make sure that we
    could type lowercase letters for the navigation items in the HTML, and it would
    transform each one of those letters into uppercase characters. This way, if we
    decide later that the regular case is better than all uppercase, then all we would
    need to do is change it in one place, instead of updating the entire HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have a font size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We also align the text to the center:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We add a transition as well, as discussed in the previous chapter. This is
    to transition the background color in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what we get when we save the changes and refresh the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have some problems. One problem is that our anchor tags are inline elements,
    so what''s happening is they''re not actually behaving like block-level elements.
    Therefore, one of the things we can do is float them to the left as well. For
    this, add a `float: left` property to the `.primary-nav > li > a` ruleset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00177.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This looks a lot better.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s target the focus and hover states. Underneath our last ruleset,
    we''ll add another ruleset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This is going to target not only the focus and hover states, but also the class
    of `active`. This isn''t a "state" necessarily, as you would think of a focus
    or hover state. This is a class that we''re going to apply to elements to signify
    that you''re on that page. It''s going to be the same as the hover state. Moving
    on, we apply the color red to the background and the color white to the text.
    Now, when we refresh it, we get the hover and focus states, which is good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The only thing we have to do now is figure out the position of the nav bar
    and push the whole thing to the right, because right now it''s sitting underneath
    our image. So let''s float the entire nav bar to the right. Let''s do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this works out fairly well. We have the entire nav sitting below
    the shark. We could fix this by floating the shark to the left, but a few nice
    features can be achieved if we use absolute positioning, which is what we'll get
    to a little later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Finally though, let's tidy up this nav just a little bit more by adding a white
    background and restricting our image to just `160px` of width.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the site without the white background and our shark is quite large:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we refresh the site, though, we will have the white background we want
    and a smaller shark:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Okay, we've built the HTML and most of the CSS for the first layer of the nav.
    Next, you'll learn how pseudo - classes can help with certain issues in our navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Using pseudo classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already learned how to add classes to elements to apply special styles
    to them. You are always required to go into the HTML to add the class. Sometimes
    this can be a problem. For instance, when the content is generated dynamically
    through a content management system, you may not be able to edit any element because
    it may not exist in a static HTML file. Enter pseudo classes. Pseudo classes allow
    you to target elements based on their position in the HTML, and based on other
    qualities. In this section, we'll look at the `first-child` pseudo class that
    can help us style our navigation. We'll then look at several other pseudo classes,
    for example, `last-child` and `nth-child`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ultimately, I don''t want the home menu, which is the first menu, to have `border-left`
    because it''s the first element. So, I want to get rid of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00181.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The first child
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to target the first element in our CSS, we''ll add `first-child` after
    the anchor element. So we''ll copy this selector and paste it underneath itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll then add `:first-child` to the selector, delete the properties, and
    add `border-left` with the value set as `none`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this, go to the site, and refresh the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00182.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The result isn't what we might have expected. We actually removed the left border
    from every item in our navigation. This is because, firstly, all the anchors are
    children inside of their immediate parent, `li`. So we should actually go about
    this differently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking a quick look at `nav` in our HTML. The anchor is the first element that''s
    inside of `li`; there is no second element. So, if we want to target the first
    element inside of `ul`, it wouldn''t be the anchor, but the list item, which is
    `<li>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In our CSS, we''re going to actually move the pseudo class from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll remove it from the `a` and attach it to the `li`, as demonstrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have our `border-left` property on all of the nav elements, except for
    the first one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00183.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'One thing about `first-child` is that it has to be the first element that appears
    inside of the parent. So even though we targeted `li` specifically as the first
    child of the primary nav, if we had something else inside of `ul` before the first
    `li` tag, then our selector wouldn''t have worked. Let''s take a look at this.
    Let''s add an `h2` as a child of the `ul` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This is not valid HTML, but for fun, note that we get our left-hand side border
    back on the first `li` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00184.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's because it's no longer the first child. The `h2` is now the first child.
    This is a common mistake when working with the `first-child` pseudo class.
  prefs: []
  type: TYPE_NORMAL
- en: The last child
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s look at the `last-child` pseudo class. Let''s create a new selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll make the example a little more obvious by setting the background color
    as bright pink and the color of the text as white:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our last child gets those properties applied to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00185.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: I prefer `first-child` because it has deeper support going back to IE7, whereas
    `last-child` support starts at IE9.
  prefs: []
  type: TYPE_NORMAL
- en: nth-child pseudo class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `nth-child` class allows us to pick any occurrence of an element within
    its parent. Let''s get into the CSS and change `last-child` to `nth-child(2)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the code and refresh the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00186.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, on our site, the pink color should actually be applied to `h2` and HOME
    because the `h2` is the first element inside the `ul` and HOME is the second.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are a JavaScript person, `nth-child` is not zero indexed, so the first
    one is not zero: The first one is one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in mind, let''s set `nth-child` to `1`: which is essentially the
    same as using `first-child`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s get rid of this `h2` tag from our HTML real quick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We now see that the pink color stays on the first nav item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00187.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also use the keywords `odd` and `even`. So if I were to throw `even`
    or `odd` in there, you''ll get the numbers two and four with those properties
    applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Refresh the site and you will get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00188.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is an excellent technique for zebra striping a table or a list for added
    readability.
  prefs: []
  type: TYPE_NORMAL
- en: nth-of-type pseudo class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is also `nth-of-type`. Add `nth-of-type(2)` to the `primary-nav` selector
    in our CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The difference between `nth-of-type` and `nth-child` is that `nth-of-type`
    is pre-qualified to only look for an element that it''s attached to. For example,
    in our case we''ve attached `nth-of-type` to an `li`, so it only matches `li`
    tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see this in action. Let''s add back our `h2` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s not going to refer to just any child inside of the `ul`. We now see that
    the second `li` tag has those properties applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00189.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So `nth-of-type` is more precise than `nth-child`. Browser support for `nth-child`
    and `nth-of-type` starts at IE9 and later versions, as well as other major browsers.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we've learned about a few pseudo classes that allow you to
    target elements based on their order in the HTML. However, these aren't the first
    pseudo classes we've used so far. I'm mainly referring to state-based pseudo classes,
    such as `hover` and `focus`, which we've been using plenty up to this point. In
    the next section, we'll switch gears and discuss CSS positioning to further advance
    our navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Absolute positioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to start working on the different CSS positioning
    properties, as well as their complementary offset properties. First, we'll absolutely
    position the shark logo and follow that up by using fixed positioning for the
    entire navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: Absolutely positioning the shark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve got our menu in place, but the shark clearly sits on top of the nav.
    We need it to be aligned horizontally, more or less. We need to fix the shark
    so it overhangs the nav bar as well. We''ll also want the entire nav to remain
    stuck to the top of the browser window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00190.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So let''s go to our CSS and add `position: absolute` to the `nav figure` selector.
    Create a new selector underneath the `nav` ruleset. We''ll call it `nav figure`
    and give it a `position` property with the value of `absolute`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Right away, that looks a lot better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00191.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's talk about what we've just done. All elements, by default, have a `static`
    position. Static elements adhere to the *normal flow*, meaning block-level elements
    simply are stacked on top of each other as long as they're not floated. Changing
    `position` to `absolute` takes it out of the normal flow. Its block qualities
    disappear and other elements aren't affected by it at all. It can be thought of
    as something that exists on another plane or level. Once positioned absolutely,
    you can start using offset properties, such as `top`, `right`, `bottom`, and `left`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do that. Add two more properties to the `nav figure` element, namely
    `top` and `left`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'These are going to function a lot like `margin-top` and `margin-left`. If you
    view the results, you should see that the shark is `50px` from the left and `-50px`
    from the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00192.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So what happens when we switch the `top` property with `bottom` and the `left`
    property with `right`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: It actually moves the shark all the way to the bottom and the right of the page!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00193.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This image makes it a lot clearer how offset properties work combined with
    absolute positioning. The offset properties are based on the browser viewport
    now, but typically we don''t want to do this; instead, we want to base the absolute
    position off of its parent element by setting the parent element to `position:
    relative`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The parent element of the image is the `nav` selector, so let''s set that to
    relative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that even now we''re `50px` from the right because the nav extends
    all the way to the right edge, and we''re `-50px` from the bottom of the nav because
    the shark is extending below the nav bar there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00194.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `position: relative` declaration establishes itself as a coordinate system
    for children elements with `position: absolute`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move the shark back to where it is supposed to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The shark overlaps our nav bar nicely. It''s now sitting on top of our headline,
    which is kind of funny, but we''ll come back to this in a moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00195.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, let''s make the entire nav bar stick to the top by adding `position:
    fixed`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using fixed positioning for the nav bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s change the nav bar''s `position` property from `absolute` to `fixed`
    and take a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00196.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `fixed` value, such as `relative`, still acts like a coordinate system
    for any absolutely positioned child or descendant elements, but it also has some
    superpowers. *Right now, those superpowers are totally breaking our nav.* Here''s
    the issue: `position: relative` still keeps its block-element qualities, while
    `position: fixed` loses a lot of those block qualities when it''s removed from
    the *normal flow*, and the nav now looks kind of funny: it''s not stretching to
    the full width of the browser window. Let''s fix this with some offset properties.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can actually stretch the nav by saying `left: 0` and `right: 0`. Let''s
    also add `top: 0` to make sure there''s no doubt it''ll be positioned at the very
    top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'That looks better. And, because the nav''s position is set to fixed, as we
    scroll down the page everything inside the nav is stuck to the top and everything
    else moves underneath it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00197.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you scroll all the way to the top though, you''ll see the site title now
    sits behind the nav. This is because the nav is no longer part of the normal flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00198.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s fix this by adding `margin-top` to `intro-content` and our `go-premium`
    button. We''ll go to our `go-premium` ruleset and add a value of `150px` to `margin-top`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also go to our `intro-content` ruleset and add a `margin-top` of `125px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it looks very good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00199.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So you've learned about relative, absolute, and fixed positioning. You also
    learned that the default position of every element is static. `relative` position
    creates a coordinate system for children. `absolute` position allows you to move
    an element into its own universe and position it aggressively, based on the closest
    relatively positioned parent element. `fixed` position will make the element sticky
    based on the browser's viewport, and not based on any relatively positioned elements.
    Both `absolute` and `fixed` elements will serve as coordinate systems, relative
    to other child elements. In the next section, we'll look at building the drop-down
    menu, where we'll again use absolute positioning.
  prefs: []
  type: TYPE_NORMAL
- en: Building the drop-down menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a pure CSS drop-down menu! We'll start by adding the markup and
    follow it up by adding the CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the basic HTML list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typically, when building a component such as a drop-down menu that''s usually
    hidden from view, I build it as if it were not hidden. Then, once it''s complete
    and fully styled, I create the drop-down behavior. That''s what we''ll do here
    as well. So let''s create the HTML within our existing `index.html` document.
    We''ll go to the unordered list of our nav bar, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s best practice to build menus inside of an unordered list, where each
    menu item is an anchor inside of a list item. For drop-down menus, we''ll need
    to nest another `ul` tag inside of the `li` with the dropdown. We''ll nest it
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'But first, we''ll add a special class called `has-submenu` to any nav item
    that will have a dropdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, with the `has-submenu` class, we can target these `li` tags and their
    descendants specifically in the CSS. Inside of this movies `li` tag, we''ll create
    a new `ul` with `li` tags, and inside these `li` tags, we''ll put in an anchor
    tag. Here''s the markup for the dropdown menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three submenus in the dropdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00200.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We just need to style this to make it look like our final menu.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the dropdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to style the dropdown appropriately to fit with our existing menu.
    This is the effect we''re going to aim for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00201.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I want to separate the drop-down menu''s styling from the main nav''s styling.
    We''ll do this by creating this big `Drop Down Menu` comment we have here underneath
    the main nav:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The dropdown can have its own little section here. So let''s start by targeting
    only the `ul` inside of `has-sub menu`. In order to have the submenu placed outside
    of the white nav bar, let''s position it absolutely and `70px` from the `top`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00202.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now all we need to do is style the drop-down menu so it looks like it's supposed
    to. Note how, on our site, none of the `li` tags are floated to the left like
    our main nav. This is because, as you'll remember, we used a type of descendant
    selector that only targeted direct children `li` of `primary-nav`. We don't need
    to cancel out those styles from before. Lets' go back though and see what would
    happen if we didn't do that by changing those selectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is where are child combinator selectors are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'For a quick test, let''s remove the greater than symbols from both selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what that looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00203.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that all of the styles that we have in the top menu are repeated in the
    submenu. That''s kind of what we want to avoid, because we don''t want to write
    additional CSS that cancels out the whole menu floating left and having borders
    where we don''t need them. So let''s add those greater than signs back to our
    `.primary-nav` selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Alright, let''s add the white background and the borders to `.has-submenu`.
    Where changing the `background-color` and adding borders on the bottom, left,
    and right. We don''t want a border at the top, so instead of using the `border`
    shorthand, we will be using `border-bottom`, `border-left`, and `border-right`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now its starting to resemble a drop-down menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00204.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'One of the obvious problems is the width. We need to give it a `width` of `150px`
    to match the width of its parent element. Also, let''s add `border-radius` to
    the `bottom-left` and `bottom-right` corners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Note the shorthand for `border-radius`. It's very similar to the margin and
    padding shorthand. The first value is for the top-left corner, then it goes clockwise
    from there. So the second value is for the top-right corner, the third is for
    bottom-right, and the fourth for bottom-left.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have the `width` and `border-radius` we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00205.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'One weird thing is that it looks like the text of our nav items isn''t centrally
    aligned. The text of the anchor elements is aligned in the center. You can see
    this if you inspect this element by right-clicking on the `a` tags text and selecting
    "inspect":'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00206.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The problem is that `li` tags take the full width, whereas `a` tags are inline
    elements and only take up as much width as they need. Let''s add a new selector:
    `.has-submenu a` with `display: block` and `padding` of `20px` for the top and
    bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The dropdown looks much better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00207.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our hover states carry over from our main nav, which is good. The only problem
    is that our last hover state--Open Water--is hiding the rounded corners:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00208.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Fixing the hover state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways in which we can fix the rounded corners getting lost when
    we hover over the **Open Water** submenu item. The first is using the `last-child`
    pseudo class, which you learned about a couple of sections earlier, to target
    the `a` selector and the last `li` selector of the submenu. This should work just
    fine, but if we want to get even deeper browser support, we need to use a different
    technique that uses `overflow: hidden` on the `ul` element—the parent. I tend
    to like the `overflow: hidden` approach here because it''s minimal and has deeper
    browser support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look at the browser now, the problem is fixed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00209.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we're left with the static menu. It's always open. We need to create a drop-down
    behavior to appear when you hover your mouse over the MOVIES navigation item.
    One way to do this is to hide the drop-down menu by default and then show it using
    the `hover` and `focus` pseudo classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hide the drop-down menu by default using `display: none`. Let''s start by hiding
    the entire `ul` tag using `display: none`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We can target `ul` only when `has-submenu` is hovered by creating a new selector,
    `.has-submenu:hover ul`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'As per this ruleset, whenever you hover over the Movies menu, the `ul` element
    that sits inside of it is going to be displayed. Then, because we added `display:
    none` to the previous selector—the nonhover state, by default, that `ul` tag,
    which is a drop-down menu, won''t be displayed. There is no submenu available
    by default now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00210.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now when we hover over the Movies menu, the submenu appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00211.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'One thing I should also mention is that `display: none` has accessibility issues,
    as screen readers are unable to announce content with `display: none`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is an alternative as well: use an **off-screen hidden technique**, which
    involves a little extra work, but is well worth it.'
  prefs: []
  type: TYPE_NORMAL
- en: Hiding the drop-down menu using the off-screen hidden technique
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic idea is to absolutely position an element far, far away from the
    visible screen so that it isn''t visible, but screen readers can still announce
    it. There''s a lot more to learn about accessibility. I recommend that you start
    by checking out the article at [https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/](https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/)
    for more information, at least on how to use off-screen hidden techniques, and
    then go from there with regard to accessibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00212.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Web accessibility is a topic with so much depth that it deserves a book of
    its own. So I cannot do it thorough justice here. Although, instead of using `display:
    none` to hide our drop-down menu, we can replace it with something similar to
    the following to make it more accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This will *hide* the content from sighted users, but still announce the content
    for screen reader users.
  prefs: []
  type: TYPE_NORMAL
- en: We have put the drop-down menu to bed without much of a fuss. It worked out
    perfectly. Your first attempt at creating a drop-down menu may not always go this
    smoothly, but using these tips, you can avoid some of the problems you might encounter
    when creating it.
  prefs: []
  type: TYPE_NORMAL
- en: 'My two biggest tips are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Build the drop-down menu initially as if it will always be visible, then hide
    it after you have styled it up and it looks good.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the recommended approach is to use an unordered list inside an unordered
    list, it's worth carefully setting up your rules sets to avoid confusion. For
    instance, one ruleset for styles that apply to both the parent `ul` and the child
    `ul` (that is, `ul li`); another ruleset that only applies to the parent `ul`
    and `li` selector using the child combinator (that is, `ul > li`); and finally,
    a ruleset that applies only to the child `ul` (that is, `.has-submenu ul`). This
    way, you won't have to create a bunch of potentially confusing override styles
    for the child `ul` later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next piece of the navigation requires us to actually create the drop-down
    effect; we will use a CSS animation to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: CSS animations (part 1)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our main navigation is now coming together, and our drop-down functionality
    is almost complete. One of the last finishing touches required for the dropdown
    is the CSS animation, to allow the drop-down menu to animate downward smoothly.
    Animations are a lot of fun, and modern browsers, including Chrome, Firefox, Opera,
    and browsers starting with IE10, support them. IE9 will still show a drop-down
    menu, but it will simply appear/disappear. An animation is very similar to a transition,
    but instead of simply animating a state change, we can animate static elements
    and use different animation properties and key frames to control the animation.
    We''ll get more into this later. So here''s what we''re going to do in this section:
    We''ll define the `animation-name`, `animation-duration`, and `animation-timing-function`
    inside the selector of the element we want to animate. After that, we''ll go ahead
    and define the key frames of what we''re going to animate.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the animation name, duration, and timing function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s recall our dropdown menu''s CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s target the `hover` state of `has-submenu` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, we''ll use use the nonprefixed/W3C standard property names and go
    back and add the needed prefixes at the end. So, to do an animation, we use `animation-name`
    and use `slideDown` as the animation name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'I can name this animation anything I want, provided I don''t use any spaces.
    Like class names, I can''t begin it with a number either. Also, the keyword **none**
    can''t be used as an animation name as it is reserved as a special keyword for
    removing the animation. Next, we''re going to specify the animation duration in
    seconds, and the animation''s timing function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `timing-function` I''ve used `ease`, but you can also specify `linear`,
    `ease-in`, `ease-out`, and `ease-in-out` functions, which are the same timing
    functions we used for `transitions`. This code by itself doesn''t do anything.
    We have to specify what happens when we animate using `@keyframes`. So below the
    last ruleset, we''ll add a `@keyframes` *at-rule* with our animation name that
    we came up with previously `slideDown`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside curly braces, we''ll specify the `from` and `to` time offsets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'What ever''s inside the `from` curly braces will be the starting point, and
    what ever''s inside the `to` curly braces will be the end point of the animation.
    We could put several properties inside of the animation; let''s start with the
    `translateY` transform function with negative 100 percent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'This is going to move the unordered list up by negative 100 percent to make
    it the starting point. The percentage being the height of the element. `50%` would
    move it down half the elements height, whereas `100%` would move it down the full
    height of the element. So `-100%` is going to push it up vertically the entire
    height of the element. The `translateY` function is new to us here. It''s a lot
    like `translate`, except that it''s only for vertical translations. The `translateX`
    function can do horizontal translations. Inside the `to` curly braces, we''ll
    set `translateY` to `0%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now see the menu animating downward:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00213.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting additional keyframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, our animation could just as easily have been done with a `transition`,
    as nothing new has really been introduced. But the power of animation comes where
    we can set additional keyframes. Let''s change `from` and `to` in our CSS to `0%`
    and `100%`, respectively, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of adding just a start and an end, we can add any number of stops between
    these two points. Let''s add a new keyframe, say `90%`, with a `translateY` of
    `10%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re translating the position of the dropdown going from `-100%` to `10%`
    during the first `90%` of that 0.25 seconds. Then, in the last 10% of the 0.25
    seconds, the vertical movement goes from `10%` to `0%`. This gives the animation
    a little bit of a hop, or bounce, at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00214.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Not only can we add multiple keyframes, but also multiple properties per keyframe.
    So let''s add `opacity` to our animation. Let''s say we start with the keyframes
    being invisible and end at an opacity of `1`, which is fully visible. We won''t
    animate opacity at 90% keyframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The menu now animates downward and fades in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00215.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Vendor prefixes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To wrap up our drop-down animation, let''s get maximum browser support by adding
    in the necessary vendor prefixes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Both `@keyframes` animation need the `-webkit-` vendor prefix, as well as the
    `transform`, `animation-name`, `animation-duration`, and `animation-timing-function`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: As we come to the end of this section, we have our drop-down menu animation
    in place. CSS animations are supported in IE10 and later, so older versions of
    IE and other older browsers won't show the animation, but they will still have
    access to the menu and all of its content. In our case, since it's just an extra
    touch to the overall experience, it's not a serious issue if older browsers miss
    out on this; they can still get all of the core content they need. In the next
    section, we'll continue with CSS animations by experimenting with our shark logo
    to create a far more robust animation.
  prefs: []
  type: TYPE_NORMAL
- en: CSS animations (part 2)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our main navigation dropdown's sliding motion is complete. Now let's deep dive
    into CSS animations by experimenting with our shark logo and exploring other animation
    properties, such as `delay`, `iteration-count`, `fill-mode`, as well as, `animation`—which
    is the shorthand.
  prefs: []
  type: TYPE_NORMAL
- en: Animation delay, iteration-count, and fill-mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add an animation for the shark image to get a different perspective
    of what animations can do, and have it occur every time the page loads. We''ll
    name it `crazyShark`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a bunch of `@keyframes` that are translating and simultaneously
    rotating the shark image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s go to our animation properties and change the duration from `0.25`
    seconds to `1` second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The shark is really moving around, hence our animation is named `crazyShark`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00216.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the `translate` syntax I''m using is slightly different than what
    we''ve used previously. The two values separated by a comma are for *x* and *y*
    coordinates, respectively, whereas one single value can be used when the *x* and
    *y* coordinates are the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several other animation properties, two of which are `animation-delay`
    and `animation-iteration-count`. I find both of these useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll have a `2` second delay before the animation starts, *which I won''t
    try to illustrate in book format*. Then it should animate fully through twice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00217.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We could also endlessly repeat the animation if we wanted to; we could just
    add the `infinite` keyword instead of a number, and the shark would keep on going
    forever. *I''m definitely not going to try to illustrate this in book format either!*
    Let''s get rid of the `animation-delay` and `animation-iteration-count`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: animation-fill-mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The animation-fill-mode property tells the element being animated what to do
    with itself before the animation starts and after the animation completes. Using
    `animation-fill-mode` fills the space before and/or after the animation. We don''t
    need an `animation-fill-mode` property yet. That''s because the shark animation
    starts on page load and then lands the shark in its static position—we''re saying
    no translate and no rotate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: However, what if we end the animation with *x* at 10 percent, *y* at 70 percent,
    and a rotation at 10 degrees?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'If you apply this and go to the site, you''ll notice that the shark seems to
    end the animation near the first heading and then jumps back to its native position.
    This is illustrated by the following two screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The shark at the very end of its animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00218.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The shark teleports to its static position following the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00219.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We could use `animation-fill-mode: forwards` to fix this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, after the animation concludes, the shark will stay put in that position
    without jumping back to its native position:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00218.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's neat!
  prefs: []
  type: TYPE_NORMAL
- en: The `animation-fill-mode` property with a value of `backwards` will make sure
    that the element being animated is *filled* to its starting position even before
    the animation starts. The `both` keyword is a way to fill both the starting and
    ending position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s reduce our ruleset down to just these three animation properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also touch up and tone back this entire animation. This way, our crazy
    shark will become a little less crazy, *but still crazy enough*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: We'll have to add the vendor prefixes for each animation property. But, before
    we do this, let's make our coding lives easier using the animation property shorthand
    that combines all of the animation properties into one line.
  prefs: []
  type: TYPE_NORMAL
- en: Using the animation shorthand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take these declarations in our `nav figure` ruleset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove `-name` from `animation-name` and the bottom two declarations; so we
    are left with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll add `1s` and `ease`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what we should end up with now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you can dump all the different animation properties into one shorthand.
    It doesn''t really matter what order you put them in as long as `animation-duration`
    comes before `animation-delay`. The following is one possible way to use all the
    animation properties that we''ve talked about inside one convenient shorthand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the shorthand in place, it's going to make it a little easier
    to add in the vendor prefixed version.
  prefs: []
  type: TYPE_NORMAL
- en: Vendor prefixes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add the `-webkit-` prefixed version of the `animation` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'We will do the same for `@keyframes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Notice that I've prefixed the `@keyframes` with `@-webkit-keyframes`, as well
    as, the `transform` with `-webkit-transform`.
  prefs: []
  type: TYPE_NORMAL
- en: Additional info on animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on CSS animations, I recommend checking out my article,
    `CSS animations aren''t that tough.`, at [richfinelli.com/css-animations-arent-that-tough](http://richfinelli.com/css-animations-arent-that-tough):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00220.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In conclusion, we've explored other animation properties, such as `animation-delay`,
    `animation-iteration-count`, and `animation-fill-mode`, on our way to creating
    a fancy, over-the-top animation. We also simplified all these properties into
    a single, convenient shorthand. We also added the `-webkit-` prefixed version
    of each property for greater browser support. In the next and final section of
    this chapter, we'll add `box-shadow` to our entire nav, as well as fix a bug with
    our drop-down menu, namely `z-index`.
  prefs: []
  type: TYPE_NORMAL
- en: Finalizing the navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're almost done with our main navigation but still have a couple small things
    left to do. First, we'll fix a `z-index` issue, which I'll elaborate on more in
    a moment. Then we need to add `box-shadow` to the bottom of our nav bar to complete
    the design.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the Z index issue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''re going to fix a bug using the `z-index` property. When you hover
    over the MOVIES navigation item, a dropdown appears. You will notice a couple
    of things:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: First, one of the nav items in the dropdown items gets highlighted—when it really
    shouldn't. Second, the nav is actually animating on top of the MOVIES navigation
    item.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can slow down the animation speed to `2.5s` to get an easier look at this
    issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: This can make it easier to see that the dropdown menu is dropping down on top
    of the MOVIES menu item.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's our problem, and that's why we're ending up with one of the dropdown
    menu items highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we are in our CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'This bug, so to speak, can be fixed with a new property called `z-index`. The
    `z-index` property sets the stacking order of elements that overlap. Our drop-down
    menu appears at the top because it comes after the anchor tag''s main nav item
    for movies. Naturally, absolutely positioned elements will appear on top of elements
    that do not have a `position` property set. This is why the dropdown appears on
    top of the main nav. The value of `z-index` is a number. It can be applied to
    elements that are set to `relative`, `absolute`, or `fixed` positions as well
    as elements with an `opacity` less than one or with a `transform` applied, as
    well as a few other situations. As long as we have our drop-down menu—that is,
    a `z-index` less than its container—we are good to go. Going to the `.has-submenu
    a` selector, let''s apply the `position:relative` declaration. This way, the element
    is going to accept the `z-index`. And we''ll add a `z-index` of `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'On a `.has-submenu ul`, we don''t need to apply `position:relative` because
    it''s already set to `position: absolute`; it will accept `z-index` of `5`, which
    is less than 10\. So we should, in theory, have our bug fixed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this and take a look at our site. At full speed, none of the menu items
    get highlighted when you hover over the navigation item and the drop-down appears
    behind the main nav. Now just to be sure, slow down the animation again. You should
    see it appear behind the MOVIES menu, which is great:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s also change the `animation-duration` back to `.5s`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Adding box-shadow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s talk about the `box-shadow` property. On our final site, you can see
    we have this shadow below the main nav:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00223.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s move back to our CSS and find our `nav` selectors. `box-shadow` is a
    CSS3 property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re targeting the `nav` element and using the nonprefixed version, which
    is supported in all major browsers, starting with IE9 and above. We don''t have
    to go back and any vendor prefixes because the specification has matured enough,
    as all the browsers now support the nonprefixed version. The first two values
    we add are *x* and *y*. We set the *x* value at `0` and the *y* value at `8px`;
    this is going to make the `box-shadow` property emanate downward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: If I use a negative value, that would have the submenu emanate from the top
    of the nav. We want it to emanate from the bottom of the nav.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next value is blur. We''ll set it to `15px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: If I were to leave the blur value at `0`, we would get a hard, 8-pixel border.
    The blur is what makes it look more like a shadow than a border.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final value we''re going to use is a color. We''ll use a new color value,
    called `rgba`, which is a CSS3 color value. We''ll then add `0, 0, 0`. This means
    the red, green, and blue colors are all going to be zero, meaning their output
    will be black. The `a` variable refers to the alpha channel, and we''ll set it
    to `.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'So if you go to the site and check and uncheck box-shadow in DevTools, you
    will see the effect the `box-shadow` property has. Here is what it looks like
    without this property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00224.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This figure shows our site with box-shadow applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00225.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Sometimes with these CSS properties, it''s nice to visit the DevTools. Let''s
    see what they look like if we change their values. We can see what box-shadow
    looks like with more or less blur. In the following screenshot, we see what it
    looks like with the value increased from `15px` to `26px`—you can see that the
    blur fades away:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00226.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'With less blur, say `0px`, it turns into hardened shadow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00227.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I think that about `15px` was just right. You can also see what it looks like
    with greater opacity—rather a greater alpha channel. If we change the alpha channel
    from `.1` to `.5`, the box-shadow gets a lot darker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00228.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: I think `.1` is about right. This has turned out well.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was an extensive chapter; we covered a lot. We built and styled our menu.
    You learned about pseudo classes and how we can use them to target elements based
    on their position in the HTML. We familiarized ourselves with positioning properties,
    using `absolute` positioning for our shark icon. We built a dropdown for our menu
    and added animations to it. We explored animation properties, such as `animation
    delay`, `iteration count`, and `fill-mode`, and applied them to our shark icon.
    We finished off by finalizing the nav, fixing the `z-index` issue, and completing
    our design using the `box-shadow` property. In the next chapter, we'll look at
    one of my favorite subjects, responsive web design, as we get this site ready
    for varying device sizes.
  prefs: []
  type: TYPE_NORMAL
