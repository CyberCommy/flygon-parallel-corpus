- en: Chapter 9. Putting Things Together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at a selection of ways in which Jenkins
    can be extended by combining it with other languages, tools, and software.
  prefs: []
  type: TYPE_NORMAL
- en: 'In doing so, we will take a look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Jenkins script console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing with Groovy, Grails, and Gradle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins and Docker—Jenkins in Docker and Docker in Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building Android applications with Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building iOS applications with Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Covering all of these topics in detail is out of the scope of this book, but
    we will introduce the topics, explain the basic setup, and provide links for further
    information. This should provide a good enough overview and enable you to get
    started with using Jenkins with these technologies. Also, it may provide some
    ideas for extending your Jenkins setup to incorporate other tools and technologies.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins script console and Groovy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The inbuilt script console is a very useful and powerful Jenkins extension and
    ideally suits certain types of tasks. This simple but powerful built-in web console
    allows you to run Groovy scripts on your Jenkins instance (or its slave nodes)
    from directly within the user interface, and is installed as standard.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the console, either navigate to **Manage Jenkins** and then select
    **Script Console**, or simply append `/script` to your Jenkins host and port,
    like this for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://jenkinshost:8080/script`'
  prefs: []
  type: TYPE_NORMAL
- en: You should then be presented with a page similar to the following. This contains
    some introductory information and a link to the website [http://www.groovy-lang.org/](http://www.groovy-lang.org/)
    for further details on Groovy, the language that the script console uses.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Jenkins script console and Groovy](../images/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This provided link is from the Jenkins home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console](https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console)'
  prefs: []
  type: TYPE_NORMAL
- en: It provides a useful collection of example scripts to show you how this works
    in order to get you started.
  prefs: []
  type: TYPE_NORMAL
- en: These example scripts cover a wide range of functions and are mostly focused
    on general Jenkins admin and housekeeping tasks—tasks that this tool suits very
    well due to its ease of use and flexibility. Using this interface, you can quickly
    and easily insert and edit code in a web page, run it with the click of a button,
    and see immediate results. There are no compilation steps or external dependencies
    to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, copying this Groovy code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After entering the example script at [https://wiki.jenkins-ci.org/display/JENKINS/Display+timer+triggers](https://wiki.jenkins-ci.org/display/JENKINS/Display+timer+triggers)
    into the console and hitting **Run** will return the expected results—the details
    of all the scheduled jobs on this Jenkins instance (assuming you have some set
    up):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Jenkins script console and Groovy](../images/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from this very simple example and the Groovy website, the Groovy
    language is aimed at Java developers and has a very flat learning curve. It is
    an extremely powerful tool and is well suited for certain tasks. It is often used
    in situations where developing and managing your own plugin is more than you really
    want or need. A simple Groovy script that can be run and altered on the fly can
    often be a better option for these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: You can also create jobs that execute system Groovy scripts. These run within
    the Jenkins JVM, and therefore have access to the Jenkins internal objects and
    can interact with them.
  prefs: []
  type: TYPE_NORMAL
- en: This example details the setting up of a Groovy job that monitors the status
    of your slave nodes, refer to [http://www.donaldsimpson.co.uk/2013/06/07/monitoring-jenkins-slave-nodes-with-groovy/](http://www.donaldsimpson.co.uk/2013/06/07/monitoring-jenkins-slave-nodes-with-groovy/)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The crux of this approach is the following simple Groovy code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When added to a Jenkins job and run via a scheduled task, the Groovy code should
    exit with an error status whenever one or more of your existing slaves are offline,
    with the output being something along these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This could obviously be extended to then perform whatever follow-up actions
    you want, for example, sending out an e-mail alert, or performing some other function
    (such as attempting to restart the slave or bringing a replacement slave online).
  prefs: []
  type: TYPE_NORMAL
- en: 'This link demonstrates an approach for automatically restarting offline slave
    nodes—it''s written in Groovy too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Monitor+and+Restart+Offline+Slaves](https://wiki.jenkins-ci.org/display/JENKINS/Monitor+and+Restart+Offline+Slaves)'
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins' built-in support for Groovy allows you to quickly and easily develop
    powerful custom scripts for your own needs. The Jenkins script console home page
    also details how you can run Groovy scripts remotely, and provides a list of available
    Jenkins plugins that use and support the Groovy language. These can be set up
    to allow you to run Groovy scripts as part of your builds.
  prefs: []
  type: TYPE_NORMAL
- en: Groovy and Gradle as alternatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are interested in Groovy, you can also use this language and a combination
    of other tools to create your own plugins—you don't have to stick to Java and
    Maven if you don't want to.
  prefs: []
  type: TYPE_NORMAL
- en: 'This page explains how to modify your project to use a `build.gradle` file
    in place of the Maven POM file that we used previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://jenkins-ci.org/content/gradle-fy-your-jenkins-plugin-project](http://jenkins-ci.org/content/gradle-fy-your-jenkins-plugin-project)'
  prefs: []
  type: TYPE_NORMAL
- en: You can then execute commands such as `gradle jpi`, `gradle check`, `gradle
    install`, and so on to build and manage the plugin life cycle without Maven.
  prefs: []
  type: TYPE_NORMAL
- en: 'This CloudBees presentation illustrates the use of Groovy instead of Java for
    the plugin itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.cloudbees.com/event/topic/groovy-way-write-jenkins-plugin](https://www.cloudbees.com/event/topic/groovy-way-write-jenkins-plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: This is an increasingly popular approach due to the power and simplicity of
    Groovy. It also explains how you can replace Jelly with Groovy—using the same
    language (Gradle is based on Groovy, so… it's all Groovy!) throughout the development
    process makes a lot of sense.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins and Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker is an application that enables you to package an application along with
    all of its dependencies into a single unit (a Docker **container**) that can be
    version controlled and deployed in an easy and standardized way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Docker home page explains how Docker works and how to install and use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.docker.com/what-docker](https://www.docker.com/what-docker).'
  prefs: []
  type: TYPE_NORMAL
- en: Conceptually, Docker containers are similar to lightweight virtual machines,
    but they have some fundamental architectural differences that make them more lightweight
    and more efficient, as illustrated by the following Docker and virtual machine
    comparison diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows a normal virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins and Docker](../images/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following figure shows a Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins and Docker](../images/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Docker containers can be published and managed with every change recorded. They
    are like highly efficient VMs managed under a version control system that provides
    functions similar to Git. They are also highly configurable and offer flexible
    and scalable deployment processes.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the auditing and ease of use, there is also a guarantee that
    containers will be (and behave) exactly the same on any environment that is capable
    of running Docker.
  prefs: []
  type: TYPE_NORMAL
- en: This can remove many of the environmental discrepancies that are normally associated
    with modern software development, eliminating the old *well, it works on my machine*
    syndrome, and the subtle variances between (supposedly identical) environments
    that sometimes cause serious and hard-to-detect issues.
  prefs: []
  type: TYPE_NORMAL
- en: Like Jenkins, Docker is extremely flexible, incredibly powerful, and highly
    extendable. Not surprisingly, they work extremely well together.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways in which you can combine and leverage the power of Docker
    and Jenkins. These approaches typically mean using either **Docker in Jenkins**
    or **Jenkins in Docker**.
  prefs: []
  type: TYPE_NORMAL
- en: Docker in Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the Docker plugin for Jenkins ([https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin)),
    you can set up Jenkins jobs that can perform a guaranteed *clean build* every
    time in a fresh and known-good Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done by dynamically provisioning a new slave node for the job to
    run on (pulled from a version-controlled **Docker** **Hub**).
  prefs: []
  type: TYPE_NORMAL
- en: The build or tests can then be run on this environment, and the results can
    be recorded and archived. The entire environment can then be deleted with the
    guarantee that, should you ever wish to, combining that very Docker container
    with the same version of the deployed code will recreate exactly the same results
    at any future date and on any environment.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins in Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have previously looked at several different ways to set up and manage your
    Jenkins server. We have also stressed the importance of storing your Jenkins configuration
    in a version control system, and ensuring that you can recover from issues without
    losing data.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Jenkins to take advantage of Docker enables you to rapidly and easily
    create (or recreate) your own Jenkins environment from a known-good snapshot.
    Simply by setting up and maintaining your Jenkins server within a Docker-managed
    container, you immediately gain all the advantages and abilities that Docker offers.
  prefs: []
  type: TYPE_NORMAL
- en: 'A popular, readymade Docker container for this approach is the CloudBees one
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jenkinsci/docker](https://github.com/jenkinsci/docker)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have Docker installed and set up on your environment, all you need
    to do is run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Dockerfile` on the following GitHub page details how this container is
    built and some of the many alternative approaches and options that you can use
    and adapt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jenkinsci/docker/blob/master/Dockerfile](https://github.com/jenkinsci/docker/blob/master/Dockerfile)'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have Jenkins running in Docker, you can make any changes that you may
    want, and then publish a snapshot of your altered version under your own account
    on the Docker Hub, effectively version controlling the entire setup. If you prefer,
    you can even create and maintain your own local version of the Docker Hub (running
    on Docker, of course) and publish/pull your own images to and from there.
  prefs: []
  type: TYPE_NORMAL
- en: Docker containers do not persist their data once the container itself dies—you
    need to save the state and publish it. As mentioned on the GitHub page though,
    you can set up persistent storage by mounting data volumes from the local filesystem
    (that is, a specified folder on the host running Docker). The contents of these
    folders (which could contain configuration information, public keys, or plugin
    data for example) can be pulled from and managed by version control too. Alternatively,
    you can create your own dedicated volume container that would allow you to manage
    all of the persistent data within another Docker container. This can also be version
    controlled and attached to your Jenkins containers as and when required.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also set up your Jenkins slaves to run on dynamically provisioned Docker
    slaves. There are a number of Jenkins plugins for doing this, and as this is a
    rapidly evolving technology, there are bound to be many more, for example, this
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Docker+Slaves+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Docker+Slaves+Plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This detailed post on creating Jenkins slave Docker images for dynamic provisioning
    is available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.jboss.org/people/pgier/blog/2014/06/30/on-demand-jenkins-slaves-using-docker](https://developer.jboss.org/people/pgier/blog/2014/06/30/on-demand-jenkins-slaves-using-docker)'
  prefs: []
  type: TYPE_NORMAL
- en: These are just a few of the (currently) most common ways of combining Jenkins
    and Docker; there are many other possibilities and more are bound to evolve soon.
    You could, for example, run your main Jenkins instance inside a Docker container
    and have it run Jenkins jobs that create other Docker containers to run your tests
    and builds, which in turn could use Docker containers!
  prefs: []
  type: TYPE_NORMAL
- en: There is even a **Docker in Docker** project, which allows you to create and
    manage Docker containers from inside Docker containers… many interesting possibilities!
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins and Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jenkins can, with the help of an SDK and a few plugins, be set up to automate
    the building, deployment, testing, and publishing of Android applications. To
    build Android applications, you need the Android software development kit, which
    you can download from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'When it is downloaded, extract the archive to a local directory. Then edit
    and add the following environment variables to your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once this is done, update the SDK and verify that your Jenkins user has read
    and execute permissions on the SDK executable files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run an Android emulator as part of your build process, add this plugin to
    your Jenkins server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that this will attempt to install an Android SDK for you if it doesn''t
    find one. It''s often preferable to set up the SDK, as per your requirement, in
    advance though. You can disable the autoinstall attempt through the **Automatically
    install Android components when required** option on the **Manage Jenkins** settings
    page, and specify which SDK it should use here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins and Android](../images/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As described in the Android emulator plugin instructions, you should then be
    able to create a new Jenkins job that runs an Android emulator during the build
    with whatever hardware and software specification you would like to use. You can
    specify the memory, screen size and resolution, OS version, and so on, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins and Android](../images/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '(Source: https://wiki.jenkins-ci.org/download/attachments/43712988/android_job-custom.png?version=1&modificationDate=1270447137000)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your Jenkins job can then proceed to install your recently compiled application
    using the Android `adb` command-line tool, like this for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can specify a new build step that will (re)install the APK
    for you, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins and Android](../images/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: (Image taken from https://wiki.jenkins-ci.org/download/attachments/43712988/android_install-package.png?version=1&modificationDate=1299432099000)
  prefs: []
  type: TYPE_NORMAL
- en: After the application is deployed, you can include an additional test step to
    run the Android Monkey Tester tool. This will run your tests against the latest
    APK running on the Android emulator, which will emulate whatever hardware and
    software specifications you have selected. It's often useful to set up multiple
    jobs to ensure that your tests cover all the combinations and permutations of
    hardware and software that your users may have.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a Jenkins plugin that enables you to automatically publish and
    roll out your built application to the Google Play store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For further details on building, deploying, and testing Android applications
    with Jenkins, this link is a great place to start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Building+an+Android+app+and+test+project](https://wiki.jenkins-ci.org/display/JENKINS/Building+an+Android+app+and+test+project)'
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins and iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your Jenkins setup and scope can also be extended to build iOS projects in a
    very similar way to the preceding steps for Android. The general idea is the same;
    install and configure an SDK (XCode for iOS), add the required Jenkins plugin,
    build and deploy the application on an emulator, run the tests against it, and
    record the outcome.
  prefs: []
  type: TYPE_NORMAL
- en: However, one important distinction for iOS builds is that you need an OS X host
    to run it on. This host can be set up as a Jenkins slave node though, with your
    iOS-based Jenkins jobs set to run on that node only.
  prefs: []
  type: TYPE_NORMAL
- en: 'The host will need a local installation of XCode, which is available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/xcode/download/](https://developer.apple.com/xcode/download/)'
  prefs: []
  type: TYPE_NORMAL
- en: Or it is available from within the Apple App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'This Jenkins page covers the installation and setup process in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Xcode+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Xcode+Plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: 'And here are a few additional links for further information on iOS and Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://savvyapps.com/blog/continuous-integration-ios-jenkins](http://savvyapps.com/blog/continuous-integration-ios-jenkins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.built.io/blog/2014/10/how-to-set-up-customized-jenkins-for-ios/](https://www.built.io/blog/2014/10/how-to-set-up-customized-jenkins-for-ios/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://blog.pivotal.io/labs/labs/ios-ci-jenkins](http://blog.pivotal.io/labs/labs/ios-ci-jenkins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://youandthegang.com/2015/continuous-integration-delivery-with-jenkins/](http://youandthegang.com/2015/continuous-integration-delivery-with-jenkins/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping your Jenkins version and plugins up to date
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all modern software, it is important to keep your Jenkins version and
    plugins up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can subscribe to plugin release notifications via RSS here: [http://feeds.feedburner.com/JenkinsPluginReleases](http://feeds.feedburner.com/JenkinsPluginReleases)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, you can subscribe here: [https://jenkins-ci.org/releases.rss](https://jenkins-ci.org/releases.rss)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can follow Jenkins release notifications on Twitter at this link: [https://twitter.com/jenkins_release](https://twitter.com/jenkins_release)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the brief introductions and examples in this chapter, we have seen how
    easily Jenkins can be extended and adapted to work and integrate with other languages
    and technologies, taking advantage of what they offer and allowing you to set
    up processes that work the way you want and need them to. Combining Jenkins with
    other tools enables you to create powerful and flexible build processes for a
    wide variety of projects and purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins integrates well with these technologies (and many others), largely due
    to its inherent flexibility and extensibility, its wealth of plugins, and the
    vibrant development, support, and user community.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we have explored many different ways in which Jenkins
    can be adapted and extended to perform whatever functions you would like, from
    leveraging APIs, interacting through IDEs, and adapting the user interface to
    developing your own plugin, creating and using extension points, to embracing
    and leveraging new and emerging technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, these topics and skills will encourage and empower you to find new
    and interesting ways to leverage the power of Jenkins for your own projects.
  prefs: []
  type: TYPE_NORMAL
