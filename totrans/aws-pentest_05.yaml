- en: '*Chapter 3*: Exploring Pentesting and AWS'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the next portion of the journey. Here, we will begin to take the
    knowledge that we learned from the previous two chapters and start applying it
    to further our knowledge about pentesting and AWS. It is important that you understand
    the previous two chapters because we will be building more instances throughout
    this book and will be using the pentesting methodology you read about in [*Chapter
    2*](B15630_02_Final_ASB_ePub.xhtml#_idTextAnchor056)*, Pentesting and Ethical
    Hacking*.
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, we are going to focus on what it means to scan and enumerate
    information from the host that we built, as well as other general systems. Scanning
    and enumerating is one of the most important steps in pentesting, so it's crucial
    that we take a trip down recon lane to understand various ways to enumerate and
    understand our enumeration tactics. We will also learn about various attack paths
    in both pentesting and adversarial assessments and mindsets. It's crucial to understand
    that reconnaissance and enumeration play a huge role in creating attack paths
    that can lead to client compromise and expose threats that may have been overlooked
    by previous administrators.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumeration and AWS services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning and examining targets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating attack paths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning and connecting to AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning from experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the instructions in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit: [https://github.com/rapid7/metasploit-framework/blob/master//modules/post/multi/gather/aws_ec2_instance_metadata.rb](https://github.com/rapid7/metasploit-framework/blob/master//modules/post/multi/gather/aws_ec2_instance_metadata.rb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LambdaGuard: [https://github.com/Skyscanner/LambdaGuard](https://github.com/Skyscanner/LambdaGuard)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3eicsXx](https://bit.ly/3eicsXx)'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Reconnaissance**, also commonly known as **recon**, involves using tools
    that allow you to gather information about a target that can be used to gain an
    advantage on your target. Recon allows you to act like a James Bond-like figure
    and allows you to gather intelligence on a target. As mentioned in [*Chapter 2*](B15630_02_Final_ASB_ePub.xhtml#_idTextAnchor056)*,
    Pentesting and Ethical Hacking*, in a white-box test, the tester will know everything
    there is to know about the target. It is always best to use tools that search
    for information that the client may have forgotten to tell you, or that let us
    look at open source information the client may deem not "impactful." Various organizations
    will determine what is impactful and what is not – it isn''t a "one size fits
    all" type of deal. Let''s discuss a simple methodology for recon that can be applied
    to most organizations.'
  prefs: []
  type: TYPE_NORMAL
- en: Driving enumeration for recon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When performing successful recon, you must ensure that you discover as much
    information as possible. What this means is that you will need to look for things
    that you find impactful toward your client and continue searching until you have
    enough information to move forward. Results vary from pentest to pentest, so you
    have to use your best judgment on how much information is "enough." Here is a
    basic methodology of doing some basic recon and information gathering:'
  prefs: []
  type: TYPE_NORMAL
- en: Look up information on the target website. Look for email addresses, phone numbers,
    and anything that can be used to contact the client directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use other tools to automate processes in discovering information such as DNS,
    open S3 buckets, employee names, phone numbers, email addresses, street addresses,
    and more!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use your tool of choice to jot your notes down so that you can use them later
    in your pentest.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following these steps will allow you to execute proper recon on a client or
    target and help you create a better attack path that can lead to a full system
    compromise. Now that we have discussed those steps, let's take a look at some
    tools that we can use for recon.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various servers'' records that you will discover during a pentest
    engagement. While it doesn''t concern this book, it is good to know different
    record types. Check out more information here: [https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Harvesting email addresses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gathering email addresses can be extremely important during a pentest. Gathering
    email addresses allows you to see who works for the target company, and how they
    can be reached directly. Attackers use this method to phish organizations and
    try to trick a user into logging into a fake site or clicking on some type of
    malware. For pentesting, we use it to get an overall understanding of what is
    out there in the open so that we can discuss it with our client, unless the target
    specifically requests a phishing engagement.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to be using a tool called **theHarvester** to execute this. theHarvester
    allows us to gather various bits and pieces of information on a target by querying
    specific databases. In our case, we will target the company Packt Publishing and
    see what we can find.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Turn on your Kali Linux machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal in the machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use Google and Yahoo to query information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Like the previous attempt, we are using theHarvester to help us find readily
    available information that we or an attacker could use to help map an attack path.
    In this case, we are using the tool to find any potential domains and IP addresses
    that we could use to map a potential attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Output from theHarvester from Google and Yahoo'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.02_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Output from theHarvester from Google and Yahoo
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we found an email address that we can use for contact, as well
    as some hosts that we can target later. All this information will prove beneficial
    later, during your pentest, or after the pentest, during your report. Advising
    clients about information such as the data gathered from theHarvester shows what
    the outside of the organization looks like.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have gathered information such as names, emails, and hosts, let's
    take a look at a couple of tools that we can use to discover DNS information.
  prefs: []
  type: TYPE_NORMAL
- en: The WHOIS command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DNS names are assigned to IP addresses after those domain names have been registered.
    For example, `foo.com` may use a `WHOIS` command is used for discovering this
    information from a public or internal standby. Using the command reveals information
    about domain names, who those domains are registered to, ISP contacts, and other
    useful technical information that an attacker could use to create an in-depth
    attack path to their target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at how we can use WHOIS to pull up some information
    about an organization. In this case, we will target Packt Publishing to see what
    information we can discover about them. The next steps will illustrate how to
    execute this properly:'
  prefs: []
  type: TYPE_NORMAL
- en: Start up your Kali Linux machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up a Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After letting the command run for a little bit, you should see results come
    up with information regarding the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – DNS information retrieved from WHOIS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.03_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – DNS information retrieved from WHOIS
  prefs: []
  type: TYPE_NORMAL
- en: WHOIS will allow pentesters to gather information regarding the client's domain
    that they could use to make attack paths that could target specific hosts such
    as web servers or even domain controllers. Additionally, you can gather AWS information
    such as AWS regions being used via the WHOIS command or using the Netcraft command
    – which we will talk about next.
  prefs: []
  type: TYPE_NORMAL
- en: Netcraft
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Netcraft** is a great resource to use when trying to look up any public information
    about a particular target. The tool allows personnel to look up multiple domains
    by searching for an individual host. Some of the information that comes from the
    results of a query can be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nameservers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reverse DNS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netblock owner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS admin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS regions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I recommend always running Netcraft when pentesting an organization. It's a
    great tool that has a graphical user interface that can generate reports for you,
    unlike WHOIS. Also, when doing black-box testing, it can show you AWS information
    linked to the target domain, and also show you information that the client company
    may have overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out more about Netcraft here: [https://www.netcraft.com](https://www.netcraft.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed some quick and effective ways we can find information
    about our target, let's start looking more at how we can start performing recon
    on AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating and understanding AWS services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enumeration is the process of gathering information that gives you valuable
    characteristics about a target during the recon of a target. Enumeration involves
    performing reconnaissance and scanning your targets. This means getting information
    about services, domain names, ports, and so on. While we have been performing
    enumeration by gathering open source information, let's take a quick look at some
    of the AWS services that we may target or encounter during an AWS pentest. Discussing
    these services allows us to understand more about our targets before we begin
    exploiting them.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on enumeration, check out the penetration testing standard:
    [http://www.pentest-standard.org/](http://www.pentest-standard.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: S3 buckets and discovering open buckets with web apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: S3 buckets are a great resource provided by AWS. S3 buckets act as "containers"
    that allow users to store objects, or data, in them that can be retrieved at any
    time as long as the user has the proper permissions to access the data. While
    we won't go too far into S3 in this chapter, it's good to know that doing recon
    on S3 resources is an essential part of pentesting AWS. We will take a deeper
    dive into S3 during [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171)*,
    Exploiting S3 Buckets*. However, let's take a look at how we can openly query
    S3 buckets that lack security controls.
  prefs: []
  type: TYPE_NORMAL
- en: Open S3 buckets are one of the larger issues found in AWS environments. These
    types of vulnerabilities have created stressful and negatively impactful situations
    for organizations in the past and have had some companies even compromised and
    in the news – all due to open S3 buckets. We can help prevent this for our target
    by doing a quick search using a tool called **Grayhat Warfare**.
  prefs: []
  type: TYPE_NORMAL
- en: Grayhat Warfare is a web application tool that allows us to query for open S3
    buckets through the web application. This makes enumerating and recon fairly simple
    and easy since everything is laid out in a simple, yet efficient graphical user
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'Grayhat Warfare can be found at the following link: [https://buckets.grayhatwarfare.com/](https://buckets.grayhatwarfare.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a basic illustration of us querying for any
    open buckets on [packtpub.com](http://packtpub.com). As you can see, there are
    only two files open to the internet. Inspecting the files just from the web browser
    lets you know that they are image files – allowing us to assume that no impactful
    data is in the open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Discovering open S3 buckets with Grayhat Warfare'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.04_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – Discovering open S3 buckets with Grayhat Warfare
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand a little more about gathering information with S3 buckets,
    let's briefly look at and discuss a couple of other services that we will see
    throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Lambda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lambda is a serverless computing service that allows users to run code in responses
    to queries and/or triggering events. The code run inside of Lambda is called a
    **Lambda function**. When the Lambda function is executed, it does whatever you
    want it to. Lambda is great to use for executing code against applications you
    have running in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out more about Lambda, look here: [https://docs.aws.amazon.com/lambda/latest/dg/welcome.html](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html)'
  prefs: []
  type: TYPE_NORMAL
- en: We will take a deeper look at Lambda later on in this book, in [*Chapter 7*](B15630_07_Final_ASB_ePub.xhtml#_idTextAnchor309)*,
    Assessing and Pentesting*. For now, understand that Lambda is a compute service
    that lets you run code without provisioning or managing servers. We will be executing
    more hands-on techniques in the referenced chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's keep moving forward and begin discussing EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: EC2 instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: EC2 instances act as hosts for a specific operating system to be "hosted" on.
    Think of an EC2 instance as an actual device that belongs to someone else and
    allows you to "remotely" use that hardware to store and use an operating system
    on, and then your own applications. This instance then can be used to host applications
    and other services that companies can use to execute business practices.
  prefs: []
  type: TYPE_NORMAL
- en: This enables companies and other organizations the flexibility to expand and
    scale their business without having to buy physical resources. As we already have,
    we will constantly be encountering using EC2 instances throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Recon and enumeration are the first things that you start with when executing
    a penetration test. It's essential to perform successful enumeration to help you
    better understand your targets, and be able to map out what services you find.
    Now that we understand these topics, let's move forward with how we enumerate
    information with scanning techniques!
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and examining targets for reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scanning is one of the essential portions of testing AWS. Scanning allows you
    to see the overall posture of your instances and their environment. Doing so will
    enable you to view open ports, vulnerabilities, and service versions that an attacker
    may be able to exploit easily. As we move through this book, we will begin to
    use more and more scanning techniques and execute them to enumerate and exploit
    services.
  prefs: []
  type: TYPE_NORMAL
- en: In a real pentesting scenario, you would typically have a list of assets that
    needed to be scanned – unless this is a black-box assessment, in which case you
    would not know any information about the network. You then take the list of assets
    and scan them with various tools. If you use a tool such as Nmap, your primary
    mission would be to discover open ports and services. Ports allow us different
    avenues into systems, and the services running on them can sometimes give us an
    easy way in if the service is vulnerable and outdated.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For a quick recap on different styles of pentesting, such as white-box testing
    and black-box testing, revisit [*Chapter 2*](B15630_02_Final_ASB_ePub.xhtml#_idTextAnchor056)*,
    Pentesting and Ethical Hacking*.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, you may need to run a vulnerability scan against the live
    host to get all the vulnerability information about every asset. Vulnerability
    scans are a great way to give a company an overall highlight of their security
    posture because they provide every vulnerability that is live on every single
    host in their system. The caveat is that pentesters typically need to be given
    credentials to system hosts that allow the scanner to authenticate with and scan
    the host. Giving credentials to the white hats makes the engagement a little less
    holistic because the testers already have usernames and passwords without having
    to pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move forward and take a look at some of the tools we may use for scanning.
    Be advised that the next section will not be used as an exploiting exercise, but
    will discuss certain tools that are used for scanning and gathering information.
    We will be using various tools and techniques throughout the rest of this book
    about exploiting. However, we need to learn to walk before we can run, which we
    will see quite a bit throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It's always important to understand the theory of a tool before applying the
    knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While Metasploit is known for its exploit modules and automated exploiting,
    it also serves as a fantastic tool that allows scanning. Within its libraries,
    it hosts what are called "auxiliary modules." These modules serve as tools that
    allow scanning and verification for vulnerabilities. You can also use Metasploit
    to scan for ports just like you would with Nmap – more on that in just a moment
    – and probe open TCP and UDP ports.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, looking for open ports and vulnerabilities is great, but proper enumeration
    is still key when pentesting. Metasploit helps alleviate some of that process
    and allows you to search for versions of services and default credentials, and
    can discover open web directories that you might not normally find. We will be
    spending quite a bit of time with Metasploit throughout this book, so don't worry!
    The possibilities are endless when adding Metasploit to your arsenal. Another
    tool that has endless possibilities with scanning is Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We mentioned Nmap in [*Chapter 2*](B15630_02_Final_ASB_ePub.xhtml#_idTextAnchor056)*,
    Pentesting and Ethical Hacking*, however, it should be mentioned again that Nmap
    is a great asset to add to your scanning toolset. Nmap provides many scripts that
    allow you to enumerate versions of software running on various ports on your scanned
    targets. Finding versions of services allows you to be able to attack a service
    that may be outdated and have a public exploit for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use Nmap to do a scan on [packtpub.com](http://packtpub.com) and see
    what information we can discover. The following steps illustrate how we can do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To actively scan our target, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Terminal in Kali Linux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 3.5 – Discovering open S3 buckets with Grayhat Warfare'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.05_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – Discovering open S3 buckets with Grayhat Warfare
  prefs: []
  type: TYPE_NORMAL
- en: Notice how we got some more information, such as an IP and hops to the address.
    This lets us know the path to the host.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'SPARTA is a Python-based tool that gives you a graphical user interface to
    interact with your targets. While we won''t use SPARTA in this book, you might
    find it useful, depending on your needs. SPARTA combines various scans and checks
    at the click of a button. You can also import Nmap scans into SPARTA – making
    the possibilities endless for attack paths and automation. To learn more about
    SPARTA, check out the link here to discover more uses for the tool: [https://tools.kali.org/information-gathering/sparta](https://tools.kali.org/information-gathering/sparta).'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's discuss some more about AWS service tools, tips, and tricks.
  prefs: []
  type: TYPE_NORMAL
- en: LambdaGuard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lambda is a compute service where code can be executed, meaning the code only
    executes when it is supposed to – saving resources and money for the consumer.
    However, this isn''t to say that it comes without its issues – especially since
    it''s human-created code that drives Lambda environments. LambdaGuard is a tool
    that gives a visual on auditing Lambda services and scanning for any potential
    issues that could become attack vectors. Some of the other issues it may find
    could be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Public S3 buckets are publicly available and can be found on the internet by
    anyone. What that means is that you can query the public bucket and find information
    that may or may not be sensitive. Sensitive information such as personal information,
    credit card numbers, or health records could be a potential issue found in public
    buckets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public API gateways act as a gate to the internet, however, that doesn't mean
    that everyone should have access to them. AWS API gateways are used for internal
    resources, and if left public, can allow anyone potential access to a network
    if the API is unsecured. However, know that public APIs are created to also allow
    authorized personnel within an environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poorly configured policies create security issues that can turn into impactful
    situations. For example, a policy may be able to let someone bypass security restrictions
    and gain access to a resource, such as S3 buckets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install the tool, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use Git to pull the code from its repo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then change into the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you go into the LambdaGuard working directory, move forward with installing
    the application by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You should now be set to use the tool. I highly recommend using it and getting
    familiar with it, aside from this book.
  prefs: []
  type: TYPE_NORMAL
- en: S3 scanning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Misconfigured S3 buckets have become quite an issue in recent years and are
    one of the top spots to look for issues when pentesting AWS. S3 buckets come with
    security "built in," but security permissions are then edited later on after individual
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss a lot of information about S3 in [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171)*,
    Exploiting S3 Buckets*; it's prudent to understand that scanning is an essential
    function of recon and information gathering in regard to ethically hacking S3\.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we will focus on a brief overview of what is typically needed
    to scan an enterprise's S3 buckets. S3 buckets act as a "container" that stores
    information such as archives, PDF statements, and other redundant information.
    Scanning S3 buckets is essential to ensure that misconfigurations are not present.
    If so, they could leak information – such as the information mentioned – which
    could get into the wrong hands.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward with the information we know about AWS and its services, let's
    start to discuss some of the different types of attackers and the potential attack
    paths we emulate based on these types of attackers.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the attacker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Say you are on a pentesting assignment, and your client asks you to test their
    systems. There are a couple of ways we can do this. We can do it from an outsider
    perspective, or from an insider perspective. Both offer the client a different
    return of results and return on investment based on the client's business needs.
    Let's take a quick look at what exactly an **insider** and an **outsider** are.
  prefs: []
  type: TYPE_NORMAL
- en: Insiders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The more common request will be from an insider perspective. Insiders are considered
    employees or someone with access to the client's systems. This means you, the
    tester, would be given the information needed to connect to the AWS environment.
    You'll be given an account ID and credentials to access the cloud environment,
    and from there can let your scripts run to find issues in S3.
  prefs: []
  type: TYPE_NORMAL
- en: Often, white-box pentesting will be combined with an insider perspective. What
    that translates into is the client needs the pentesting firm to check for anything
    and everything in the system. That means the scope of the pentest will lay out
    all systems and credentials required to access those systems, allowing testers
    to find anything vulnerable and exploitable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, there are different types of insiders that you may have to emulate to
    fit the specific need or goal of a client for their requested pentest. It is important
    that you understand the various types of malicious insiders that can pose a threat
    to an organization. Here is a list of a few that you should take note of:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Emotional Attacker**: These are individuals who have let their emotions run
    rampant and take a malicious turn for the worse. Oftentimes, these attackers are
    previous and current disgruntled employees. The reasons they are disgruntled vary,
    but the mission is typically always the same: exfiltrate data for profit or a
    competing company. It would be best if you looked at the business and people processes
    when pentesting to ensure that insiders such as these are not making malicious
    or intended changes that could hurt their company.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unintentional and Inadvertent**: This type of insider is not so much an attacker
    as they are unaware of their own actions. For example, a database administrator
    may have accidentally dropped a table with important client information in it.
    Unaware to them, they may have just not fully understood what they did, and just
    lack training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between the event being an accident and a threat is if the individual
    persists. If they persist, then it may not be a lack of knowledge and could be
    something else. Ensuring employees are being trained and followed up with regularly
    will help alleviate the possibilities of this type of incident taking a turn for
    the worse. Also, it's essential to keep an eye on them because they are the most
    vulnerable to attackers. While we wouldn't necessarily emulate this type of insider,
    it is good knowledge to have.
  prefs: []
  type: TYPE_NORMAL
- en: '**Persistent Insider**: One of the most dangerous threats of all is the persistent
    one. This means that this individual will do whatever it takes to get the information
    or results that they desire. Their reasoning can vary from situation to situation,
    but their thirst for exploitation or profit makes them stubborn and determined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outsiders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Outsiders are considered anyone who does not work directly with the company,
    including contractors and less privileged personnel such as visitors or third-party
    vendors. At times, some individuals can be considered **near-siders** – but in
    this book, we will stick with calling them outsiders, to keep things simple.
  prefs: []
  type: TYPE_NORMAL
- en: An outsider is someone who has to have authorized access to the system and shouldn't
    have any knowledge about that target system. The critical word to remember here
    is the word "authorized" because there may be an unfortunate time when an outsider
    may have unauthorized access – which is still considered access.
  prefs: []
  type: TYPE_NORMAL
- en: Outsiders vary in descriptions and can be anyone from a script kiddie that is
    using others' code to attempt to exploit a web server, or could be a nation-state-sponsored
    threat – typically, an **Advanced Persistent Threat** (**APT**) – that will stop
    at nothing to get hold of a system and has the power and funding from the client
    to do so. In many cases, APT clients or funding comes directly from their government.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand various attackers, let's move forward and discuss attack
    paths and how these attackers use scenarios to execute attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating attack paths
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An attack path involves using information gathered from your target to make
    a "story" or "scenario" on how you or an actual threat could leverage that information
    to exploit the target system or application. There are frameworks on the net that
    allow you to get an idea of attack paths from actual previous events.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'While it''s a little off course for this book, I would highly recommend looking
    at the MITRE ATT&CK framework for more information: [https://attack.mitre.org/](https://attack.mitre.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: With various attack scenarios, comes different ways to pentest. Some scenarios
    require a holistic approach, and some are more goal-oriented. It's important to
    understand what information you will need to know before even beginning to scan
    and attempting to connect to any AWS appliance, or even before testing! Some clients
    may have a more natural approach, while others will have a direct target they
    want you to attack and attempt to exploit.
  prefs: []
  type: TYPE_NORMAL
- en: Organic attack paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Organic attack paths consist of exploiting a system in a natural way. What this
    means is you – the tester – are not given a specific target and should approach
    the system in whatever **ethical** means are possible. We highlight the word ethical
    because it's paramount to ensure the safety of the client and yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'An organic attack path could look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The tester is given **rules of engagement** (**ROE**) and an overview of the
    system architecture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tester sends a phishing email.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A highly privileged user clicks on a phishing email, allowing the tester to
    get admin credentials for the domain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tester is able to pivot from machine to machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After making lateral movements on the network, the tester is able to get **domain
    admin**. Once establishing as domain admin, the tester is able to perform any
    actions within the target environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting domain admin on the **domain controller** is often sought after as the
    main goal of pentesting. Essentially, if a user has domain admin to the network,
    they own the network – the term "own" here meaning they have full control of the
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, getting domain admin is not the goal of pentesting. Different engagements
    will have different scopes, and a different scope could entail a different objective.
    These types of engagements are known as "goal-based" engagements.
  prefs: []
  type: TYPE_NORMAL
- en: Goal-based attack paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Goal-based attack paths consist of exploiting a particular target for the client
    organization while staying in scope, of course. The purpose of a goal-based assessment
    may be to test a system that is being pushed to production or could be used to
    copy the attack methods of a particular **Advanced Persistent Threat** (**APT**).
  prefs: []
  type: TYPE_NORMAL
- en: A client could want a system to be tested in the same way a particular adversary
    might attack them. This is common in the defence industry and is used to test
    the defense capabilities of systems. Clients may want to ensure they are up to
    date and can detect and respond – just in case something were to happen.
  prefs: []
  type: TYPE_NORMAL
- en: AWS attack paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS attacks are not so conventional in pentesting yet. Largely due to the newer
    implementations of AWS, not all pentesting and adversarial emulations have caught
    up to AWS. However, that doesn't mean that we can still use our conventional thinking
    of creating attack paths that can't be applied to AWS. The following shows a way
    we could attack an AWS instance as a pentesting engagement or exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to AWS, attack paths often look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The tester scans the internet for public S3 buckets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tester scans for common bucket names and finds a match.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tester scans for objects in the bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tester finds matches and exfiltrates information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that you may be given credentials to access the AWS environment that will
    allow you to access the system as an insider. If given credentials to access the
    system, it's prudent to look for misconfigurations that may have been implemented
    by staff after creating the S3 buckets. It's important to look at this potential
    issue because it could lead to more adverse side effects such as information getting
    leaked, or allowing an unauthorized user to view information that they shouldn't
    be able to view.
  prefs: []
  type: TYPE_NORMAL
- en: Pentesting attack paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your attack path in a real-world pentesting scenario will vary from engagement
    to engagement, with an engagement being the pentest itself, and every aspect of
    that individual pentest. It's prudent to do your homework on a client site before
    engaging in the pentest to ensure that you have enough information gathered to
    perform an efficient and effective pentest for the target organization. To start
    gathering information, you can use Google to search for various attributes of
    a target. Perhaps you can find emails and phone numbers for a target, or even
    find public S3 buckets that store important information.
  prefs: []
  type: TYPE_NORMAL
- en: Red teaming for businesses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Red teaming isn't so much of an attack path as it is a quality assurance check
    on business processes and policies. Red teaming can involve a view of a different
    area of pentesting as well as a hybrid mix of attack paths, depending on what
    the client may need or want. Because of its flexibility and intensity, red teaming
    tests all aspects of businesses. However, it's important to understand clients
    will need to have mature business models before pentesting them.
  prefs: []
  type: TYPE_NORMAL
- en: Often, clients benefit more from a vulnerability assessment or a basic pentest
    before assessing a company with a red team engagement. Companies need to have
    a business model and security program that is mature and robust to its full potential,
    otherwise, a red team exercise will not be able to highlight the full scope of
    issues within a company.
  prefs: []
  type: TYPE_NORMAL
- en: Diving into the attacker mindset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This subject is a little more taboo but is something that will be mentioned
    time and time again over the course of this book. Hacking has always been taboo
    due to its usage in criminal activity such as stealing data and attacking governments.
    However, in recent years, it has become much more mainstream and is now used to
    test companies and allow them to get a real sense of what their security posture
    looks like.
  prefs: []
  type: TYPE_NORMAL
- en: It's crucial to understand the attacker mindset because it's what sets good
    results apart from great results. Good results come from understanding systems,
    how they work, and providing a detailed report to your client on how to fix and
    remediate vulnerabilities. A white-hat hacker with an attacker mindset is able
    to provide insight on how malicious hackers would break into a system by whatever
    means necessary.
  prefs: []
  type: TYPE_NORMAL
- en: We have now discussed quite a few different topics. We went from discussing
    recon and how we gather information and then discussed different attacker types
    to help illustrate what impact information can have on a company. Now, let's take
    a look at some hands-on exercises and apply this information. However, first,
    let's mention something important – SSH keys.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering SSH keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SSH**, or **secure shell**, is a common login service that various system
    administrators implement in their infrastructure. The fast and secure system makes
    the service ideal for security purposes, as well as "feasibility" due to its key-like
    infrastructure. The keys make authentication seamless, much like we did back in
    [*Chapter 1*](B15630_01_Final_ASB_ePub.xhtml#_idTextAnchor025)*, Building Your
    AWS Environment*, with the keys that we downloaded from our AWS instance. Those
    keys give us "the keys to the kingdom," so to speak, and allow us access to our
    AWS instances.'
  prefs: []
  type: TYPE_NORMAL
- en: How the keys work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A private and public key must be made to use the service. When creating a key
    pair, a private key is generated and stored on the system. In this case, the keys
    are stored in our EC2 instances. Private keys are keys that should never be shared
    with anyone, ever. Recent years have shed light on private exposures and the damage
    they have caused companies.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Public and private key illustration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.06_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – Public and private key illustration
  prefs: []
  type: TYPE_NORMAL
- en: The private key is only the first portion of the authentication relationship.
    There needs to be a public key generated that allows users to authenticate to
    the system. The public key is held by the user – in this case, us – and ensures
    that traffic is encrypted back and forth from the client and the server. If the
    public key does not match with a list of authorized keys on the server, then authentication
    will fail and the user will not be able to sign on to the server. You can find
    these keys stored in `~/.ssh` on your Linux instance.
  prefs: []
  type: TYPE_NORMAL
- en: Good hygiene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good practice is to never store your private keys in an unsafe place such
    as an open web directory. An open share is a file that may be a directory that
    can be accessed via anonymous FTP. Losing a private key to a server can have serious
    consequences that may be difficult to overcome. Always remember to **never** share
    private keys and to have them stored in a place that has access controls that
    won't allow unauthorized users access to the keys.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what these SSH keys are used for, let's put this knowledge
    to good use and connect to our EC2 instance!
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and connecting to AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we are going to be scanning systems inside of AWS. This plays an important
    part in pentesting because, as we mentioned, scanning and enumeration comprise
    the first technical portion of pentesting AWS and general pentesting engagements.
    It's important to know where to start when beginning to pentest AWS environments.
    Assuming that all prerequisites have been met, and all things are in order, moving
    forward with scanning and connecting to instances should be the next logical component
    of testing AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin, ensure that your Windows host is up and running. Log into the
    AWS management console and look back at [*Chapter 1*](B15630_01_Final_ASB_ePub.xhtml#_idTextAnchor025)*,
    Building Your AWS Environment*, if you need a refresher – then return back here.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're ready to go, we are going to move forward and start using Nmap to
    scan our AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning with Nmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s put Nmap into action and use it to check out the Windows 2008 server
    and poke around at the open RDP port we have enabled on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: To start, we will look at the host by scanning it with Nmap. This will allow
    us to check and see if **Remote Desktop Protocol** (**RDP**) is open. RDP will
    allow us to remotely connect to the host from our own machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To scan the host, use your Kali Linux host that we set up earlier on, back
    in [*Chapter 1*](B15630_01_Final_ASB_ePub.xhtml#_idTextAnchor025)*, Building Your
    AWS Environment*. Once your host is up and running, open a Terminal and fire off
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s do a quick breakdown of this simple, yet effective command. The following
    switches are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-p`: Indicates what ports we want to probe for, with probe meaning send a
    request in an attempt to get a response back from the host. In this case, we are
    checking for port `3389`, which is the port that correlates with RDP. If we wanted
    to scan for more ports, we could add them by separating the ports with a comma.
    We can also scan a range, such as using the following command to scan for the
    first 100 ports:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`-Pn`: This switch disabled `ping` from the `nmap` scan. `ping` can often cause
    unwanted noise, and at times will not give you a decent output on a scanned host,
    if the host doesn''t respond to `ping`. It is important to note that if a host
    does not respond to `ping`, then it doesn''t mean the host is not alive because
    it''s common for hosts not to respond to `ping`. Especially with AWS environments,
    make sure you get used to using the `-Pn` switch with `nmap` scans.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once your scan has finished, you will be given feedback alerting you that RDP
    is open and be given output that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Scanning for RDP'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.07_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – Scanning for RDP
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, our instance is showing the host is in fact running and has
    port `3389`, Remote Desktop open, and will allow us to connect to it. Before we
    look at connecting to the host with RDP open, let's take a look at how we can
    use Metasploit to scan for RDP. The reason we want to try this is it is good practice
    to test various tools against a host. Ultimately, this gives you options just
    in case you need to use a specific tool.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use Metasploit to scan, and in this case, since we are only looking
    at RDP, we just need to use a port scanner module in Metasploit to probe for the
    open port. As we mentioned, it is good practice to be able to use different tools
    to execute in a scenario just in case one tool doesn't work and you don't have
    time to troubleshoot. The following steps will discuss the steps needed to scan
    our host with Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that Metasploit is started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now have a Terminal that gives you the main background to Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Metasploit console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.08_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – Metasploit console
  prefs: []
  type: TYPE_NORMAL
- en: If this were a real engagement, such as a pentest for a client, the next step
    would be to connect to the resource and begin assessing the AWS resources. It's
    important to get credentials for the host that you will interact with during an
    engagement. In this case, we already have the information we need and can grab
    our credentials from the Windows machine we set up.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have Metasploit started, it's time to take a look at a few different
    scanning modules that we can use to scan RDP on the host. We will be using Metasploit
    on our local Kali instance for these next steps, however, feel free to use the
    Kali image in AWS if you choose to do so.
  prefs: []
  type: TYPE_NORMAL
- en: TCP scanning with Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we want to be able to scan our Windows host and check for open ports.
    Metasploit offers various modules to execute scanning your host. Each module offers
    different techniques and scans for various services. Before we launch our scan,
    let''s talk about a couple of the modules:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, type the following into your Metasploit Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you type in the command correctly, you should be given a prompt that looks
    something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Portscan Metasploit modules'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.09_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – Portscan Metasploit modules
  prefs: []
  type: TYPE_NORMAL
- en: If you did not get results that look like the preceding screenshot, then please
    update your Metasploit and then come back to this portion of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to use a TCP scan. A TCP scan is going to execute the full
    TCP 3-way handshake and make a full connection to the host in order to enumerate
    the host. This does not mean that our machine is going to authenticate to the
    host – more on that later. Our host is going to send a `3389` (RDP).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Moving back to using Metasploit, we are going to be using the TCP portscan
    module to perform the 3-way handshake and get the information we so desire. With
    Metasploit started, type in the following to use the TCP port scanner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll need to change a few parameters in the module before we can see whether
    port `3389` is open. First, you''ll need to type the `options` command to view
    the parameters (Metasploit labels them as options) and set those parameters to
    fit your needs. In this case, we are only going to change the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`RHOSTS`: This option is set to the target that you want to test, or in this
    case, the target that we want to scan. Set the option to your AWS instance''s
    public DNS address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PORTS`: This option can be set to a single port, or a range – much like how
    ports are set in Nmap. In this case, we are going to use port `3389`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ensure that you set those parameters correctly. If you find yourself second-guessing
    yourself, you can type the `options` command to view what your current options
    are set to. After that, you can type the `run` or `exploit` commands to execute
    the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Using Metasploit for port scanning'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.11_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – Using Metasploit for port scanning
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we are provided with output telling us port `3389` is open
    on our host. This is displayed to us by the module using the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Great news – we have successfully scanned our Windows host with Metasploit!
    Now that we know how the TCP scan module works, let's take a look at a different
    module that can be used for a less intrusive scan.
  prefs: []
  type: TYPE_NORMAL
- en: ACK scanning with Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we are going to use a scan that I like to use to see whether ports are
    filtered or not. Often, ports will be filtered to only allow specific traffic
    in, or only a particular host to use that port. This often makes pentesters use
    spoofing attacks to try and compromise the service, or just move on to something
    else.
  prefs: []
  type: TYPE_NORMAL
- en: A great way to check and see if a port is filtered or not is by using an ACK
    scan. This type of scan works by the host sending an `3389` is unfiltered or not.
    If it's unfiltered, then we can attempt to move forward on that port. In the case
    of our lab environment, the port will be open – however, if this were a real pentest
    and we were told that a port *was* filtered, it would be prudent to look at other
    ports and services that weren't filtered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move forward, look at the following diagram, which displays a brief
    overview of how an ACK scan works. This picture is a very simple breakdown of
    how this scan works and what it could be used for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – ACK scanning'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.12_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – ACK scanning
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a general understanding of ACK scanning, let''s use the following
    module to get the job done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like before, we are going to need to set the parameters for our module.
    We can accomplish this by setting the same parameters as we did previously for
    our TCP scan. Just as before, set your parameters and run your scan against your
    AWS host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – ACK scanning with Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.13_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.13 – ACK scanning with Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: If the scan goes as planned, you'll be given feedback that the host has successfully
    been scanned, and the port is being unfiltered.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have used both a TCP and an ACK scan on our host, let's take a look
    at one more module to do some recon on our host. For our next scan, we are going
    to use the built-in RDP scanner available in Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: RDP scanning with Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have done a good amount of recon and enumeration on our host since we started
    scanning with Metasploit. Between using Metasploit and Nmap, we now know the following
    about our target:'
  prefs: []
  type: TYPE_NORMAL
- en: Port `3389` is open.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port `3389` is unfiltered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If this were a real test, the next course of action would be to see what operating
    system is running on the host. We can do this by using the `-O` switch in Nmap,
    but since we have Metasploit up and running, let''s go ahead and use that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, use the following module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Once you set the parameters, start the scan by using the `run` command and view
    the output. If all goes well, output showing you that port `3389` is open and
    that the instance is operating on Windows should be displayed:![Figure 3.14 –
    RDP scanning with Metasploit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_3.14_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.14 – RDP scanning with Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see the difference in results, use the `UNSET` command to erase
    the value you put in the option. The `UNSET` command does exactly what it says
    – it unsets the parameter you just placed!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have successfully done some enumeration and scanned our host. Feel free
    to take a look at other modules to scan the hosts and get a feel for how Metasploit
    can be used to scan hosts in general.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get moving forward and actually connect to our Windows host. First, we
    will use our Kali Linux image – feel free to use your local or AWS Kali machine.
    After that, we will use the Remote Desktop client to test our connection to our
    AWS host.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting with Kali
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we positively know that `RDP` is open, we can connect to it using
    our username and password that we got from decrypting our Windows AWS key. If
    you need to, go back and look at how you retrieve your Windows password and come
    back here:'
  prefs: []
  type: TYPE_NORMAL
- en: To start, you're going to need to use a tool called `Administrator`. There is
    a parameter that allows the password to be entered in the Terminal, however, this
    is shown in plain text. It's best practice (more on that later) to not have passwords
    shown in plain text:![Figure 3.15 – Connecting over RDP via rdesktop
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_3.15_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.15 – Connecting over RDP via rdesktop
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the password parameter allows the password be viewed in plain text,
    you will enter your password when you are shown the login screen. Enter the password
    that your AWS key assigned to you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Login screen for Windows Server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.16_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.16 – Login screen for Windows Server
  prefs: []
  type: TYPE_NORMAL
- en: Once you have successfully logged in, you can make changes just as you would
    to a regular Windows host.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you connect properly, you should be greeted by a desktop that looks something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Windows desktop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.17_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.17 – Windows desktop
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to take a look around and get a feel for it. It can take a little
    bit of getting used to.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting with Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have used rdesktop on our Kali machine, it is time to move on to
    what is the more popular, or at least more conventional method of connecting over
    RDP. If you do not have a Windows-based host, do not fret; you can download the
    Remote Desktop for other operating systems as well:'
  prefs: []
  type: TYPE_NORMAL
- en: To start, open up the `Remote Desktop`, and then hit *Enter*. It should automatically
    bring up your installed RDP application. If it doesn't, you'll need to troubleshoot
    the issue and then return to finish this portion of the chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just as before, we will put in the public DNS name to our AWS instance, as well
    as the username `Administrator` to start the connection:![Figure 3.18 – Remote
    Desktop application on Windows
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_3.18_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.18 – Remote Desktop application on Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you hit the **Connect** button, you''ll be prompted to input the credentials
    for the Windows host. Go ahead and copy and paste the password into the **password**
    field and have the connection be remembered so that you don''t have to keep typing
    in the password every time you want to log in to the AWS instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Login prompt from Remote Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.19_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.19 – Login prompt from Remote Desktop
  prefs: []
  type: TYPE_NORMAL
- en: Once you connect, you should have a desktop that takes up your entire desktop.
    This new desktop is the desktop of your AWS Windows instance.
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! You have successfully scanned and connected to your AWS instance!
    We learned quite a bit throughout this chapter and now should be comfortable with
    using some pentesting tools and starting up our very own EC2 instances with various
    operating systems. Now that we have accomplished the basics of pentesting and
    AWS – let's talk about what the lessons learned were and how they apply to moving
    forward in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Learning from experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The lessons you learn while pentesting are among the most valuable resources
    you will gain during your time as a pentester. Whether you make a career out of
    it or do it as a side hobby, the lessons learned involve using the knowledge you
    have gained from experiences, both professional and personal, and applying them
    to your future endeavors.
  prefs: []
  type: TYPE_NORMAL
- en: Using hindsight to look at your pentesting endeavors allows you to view your
    mistakes and take those mistakes as a learning experience rather than a harsh
    failure. It's about failing forward, not failing backward, which will ensure your
    growth in the knowledge of pentesting. Often, this is what makes or breaks professionals
    and hobbyists in the pentesting community.
  prefs: []
  type: TYPE_NORMAL
- en: For this book, it's important to understand the lessons learned will require
    you to review material maybe more than once, or you may need to go back and try
    to do something a different way because it seems more suitable to you, or perhaps
    you realized you kept typing in the wrong parameter into Metasploit and now know
    that you need to police yourself before setting the parameter in the future. The
    lessons learned in this book alone will help you grow as you move through the
    material.
  prefs: []
  type: TYPE_NORMAL
- en: In real life pentesting, giving your clients a high **return on investment**
    (**ROI**) is typically the key to ensuring you brand yourself as a pentester and
    retain professional pentesting relationships. So, it is essential to evaluate
    yourself continually to allow you and your clients to get the most out of pentesting.
    We will discuss more of this later in the book, but it's still good to understand
    that lessons learned and ROI have a bit of a correlation and causation with each
    other in regard to pentesting.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now have the knowledge needed to move forward in this book. This chapter
    included an overview of pentesting techniques, as well different types of pentesting
    and how it's executed. It is important to briefly understand how pentesting can
    be used in different ways, such as red teaming or goal-oriented pentesting. We
    will look at more ways throughout this book and will remind you when those instances
    come up.
  prefs: []
  type: TYPE_NORMAL
- en: The big test in this chapter was scanning our AWS host and then connecting to
    it over RDP. We displayed both theory and practical knowledge in how we can scan
    our host to successfully enumerate and use that information to connect to the
    host. We will be using similar techniques and methods during this book – so make
    sure you keep what you've learned so far as a baseline for this book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to be moving forward with a much more hands-on
    topic and begin to exploit AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cyber frameworks: [https://www.nist.gov/cyberframework/online-learning/five-functions](https://www.nist.gov/cyberframework/online-learning/five-functions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information on Metasploit: [https://www.offensive-security.com/metasploit-unleashed/port-scanning/](https://www.offensive-security.com/metasploit-unleashed/port-scanning/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Three-way handshake: [https://study-ccna.com/tcp-three-way-handshake/](https://study-ccna.com/tcp-three-way-handshake/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port scanning: [https://resources.infosecinstitute.com/port-scanning-using-scapy/#gref](https://resources.infosecinstitute.com/port-scanning-using-scapy/#gref)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information on Remote Desktop: [https://www.microsoft.com/en-us/p/microsoft-remote-desktop/9wzdncrfj3ps?activetab=pivot:overviewtab](https://www.microsoft.com/en-us/p/microsoft-remote-desktop/9wzdncrfj3ps?activetab=pivot:overviewtab)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
