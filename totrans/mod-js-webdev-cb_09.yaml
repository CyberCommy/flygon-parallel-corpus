- en: Debugging Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The recipes we''ll see here are:'
  prefs: []
  type: TYPE_NORMAL
- en: Logging with style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with the React Developer Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with the standalone tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging Redux with redux-logger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Redux with the Redux Developer Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting routing for debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we saw how to develop a basic `React` application,
    how to enhance it for a better user experience, and how to expand it, making it
    more scalable for complex and large application scopes. All this development,
    however, is sure to require both testing and debugging, so in this chapter, we'll
    be touching upon debugging recipes, and in the following chapter, we'll cover
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Logging with style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging is still a very good tool, but you cannot just depend on using tools
    such as `console.log()` or `console.error()`. Even though they do the work for
    a short debugging run, if you plan to include logging more seriously and want
    to disable it in production, you'll have a lot of work chasing down every logging
    call—or *monkey patching* the console object so `.log()` or `.error()` won't do
    their thing, and that's even worse!
  prefs: []
  type: TYPE_NORMAL
- en: Back in the *Adding logging with Winston* section of [Chapter 5](18752def-acd4-4b7d-9395-a1dad0864f16.xhtml),
    *Testing and Debugging Your Server*, we used `Winston` for logging (and also `Morgan`,
    but that was specific for HTTP logging, so it doesn't count) and that library
    had features that enabled us to easily start or stop logging. There's no version
    of `Winston` for browsers, but we can fall back to `debug`, an old standard (we
    referred to in the *There's more...* section at the end of the chapter we just
    mentioned) that happens to work on the web as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete documentation for debug at [https://github.com/visionmedia/debug](https://github.com/visionmedia/debug).
    Note that if you wish, you could also use it with `Node`, though we think our
    earlier choice is better.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You install `debug` in the same way as if you wanted to use it with `Node`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You will also have to decide how to *namespace* your logs because with debug
    you have an easy way to select which messages (if any) get shown and which are
    not displayed. Some possible ideas are to have names like `MYAPP:SERVICE:LOGIN`,
    `MYAPP:SERVICE:COUNTRIES`, `MYAPP_SERVICE:PDF_INVOICE`, and so on for each service
    in your application, or `MYAPP_FORM:NEW_USER`, `MYAPP:FORM:DISPLAY_CART`, `MYAPP:FORM:PAY_WITH_CARD`,
    and so on for each form, or `MYAPP:COMPONENT:PERSONAL_DATA`, `MYAPP:COMPONENT_CART`,
    and the like for specific components; the list can go on for actions, reducers,
    and so on, as you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s a way to select afterwards which logs will be shown, by storing a
    value in `LocalStorage` (we''ll get to this) so you can set:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MYAPP:*` to display all logs from my app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYAPP:SERVICE:*` to display all service-related logs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYAPP:FORM:`  and `MYAPP:COMPONENT:*` to display logs related to some forms
    or components, but omit others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYAPP:SERVICE:COUNTRIES`,`MYAPP:FORM:NEW_USER` and `MYAPP:FORM:PAY_WITH_CARD`
    to display logs related to those three items'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also prefix a string with `"-"` to exclude it. `MYAPP:ACTIONS:*,-MYAPP:ACTIONS:LOADING`
    will enable all actions, but not the `LOADING` one.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may wonder: why include a fixed text such as `MYAPP:` everywhere? The key
    is that many of the libraries you may use actually also use debug for logging.
    If you were to say to display everything (`*`) instead of `MYAPP:*`, you would
    get in the console every single message from all those libraries, and that''s
    not what you expected!'
  prefs: []
  type: TYPE_NORMAL
- en: You are free to decide the naming of your logs, but setting up a well-structured
    list will make it possible for you to pick and choose later which logs to display,
    meaning that you won't have to start messing around with the code to enable or
    disable any given set of messages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s aim to replicate what we had in `Winston`, at least in part, so it will
    be easier for you if you do full stack work, both client- and server-side. We
    want to have a logger object with methods such as `.warn()` and `.info()` that
    will display a given message in an appropriate color. Also, we don''t want logs
    to be displayed in production. This leads us to the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Some important details:'
  prefs: []
  type: TYPE_NORMAL
- en: The `WHAT_TO_LOG` constant lets you select which messages should be shown.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `MIN_LEVEL_TO_LOG` constant defines the lowest level that will be logged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The log object has a method for each severity level, as in Winston.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, a non-operative `log` object is returned if we are not in development
    mode; all calls to logging methods will produce exactly nothing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that we used fallthrough in the `switch` statement (no `break` statements
    in it!) to correctly build up the `log` object. It's not often that you can do
    this in a good way, and we had to shut up ESLint about it!
  prefs: []
  type: TYPE_NORMAL
- en: We have the code we need; let's see an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given that logging is not a complex concept and we have already seen it for
    the server, let''s go with a very short example. We could change the `index.js`
    file for our application to include a few example logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Running our application will produce the following output in the console; see
    the next screenshot. You should verify that only the correct messages were logged:
    `info` level and above, and only if they matched `myapp:SERVICE:*`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0fe89aca-345f-49af-b3b2-d89d0eff1c53.png)'
  prefs: []
  type: TYPE_IMG
- en: Using debug produces clear, understandable output in the console
  prefs: []
  type: TYPE_NORMAL
- en: Note that, according to our specification, only the `myapp:SERVICE` related
    messages were shown.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with the React Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we worked with `Node` (in [Chapter 5](18752def-acd4-4b7d-9395-a1dad0864f16.xhtml),
    *Testing and Debugging Your Server*) we saw how to do basic debugging, but now
    we are going to focus on a `React`-specific tool, the **React Developer Tools**
    (**RDT**), which are attuned to working with components and props. In this recipe,
    let's see how to install and use the package.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RDT are an extension for Chrome or Firefox that let you inspect components
    in the standard web developer tools. We are going to work with the Chrome version
    here, but usage is similar for Firefox. You can install the extension by going
    to the **Chrome Web Store** at [https://chrome.google.com/webstore/category/extensions](https://chrome.google.com/webstore/category/extensions)
    and searching for RDT; the extension you want is authored by Facebook. Click the
    Add to Chrome button, and when you open the Chrome Developer Tools, you'll find
    a new tab, React.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't use Chrome or Firefox, or if you have to test a `React` application
    that will be shown in an iframe, you'll want to look at the standalone version
    of the tools; we'll get to them in the *Debugging with the standalone tool* section,
    just after this one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how to use RDT with the counter application we developed in the *Managing
    state with Redux* section in the previous chapter. That application was simple,
    so we''ll be able to see easily how to use the tool, but of course you can apply
    it to very complex, full-of-components pages as well. Start the application, open
    the web developer tools, select the React tab, and if you expand every component,
    you''ll see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/743c34cb-4cd1-4fd1-85c5-1a02994ddf51.png)'
  prefs: []
  type: TYPE_IMG
- en: The React tab in the web developer tools let you access the whole component
    hierarchy for your application
  prefs: []
  type: TYPE_NORMAL
- en: 'By the way, you can use the tool with any `React`-developed application. The
    small tool''s icon will change color when it can be used, and if you click on
    it you''ll get information on whether you are running a development (red-colored
    icon) or production (green-colored icon); this screenshot shows our specific situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ae420c8-6a29-46b5-90d6-a085034f12ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Our new tool will detect and work with any React-developed application
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have installed our debugging tool, and we have applied it to our application;
    let's now see how it works, and what we can do with it.
  prefs: []
  type: TYPE_NORMAL
- en: If you select any specific component by clicking on it, you can see which components
    and HTML elements it generates. You can also select a component in a more traditional
    way by selecting a component directly onscreen (click on the leftmost icon, to
    the left of the Memory tab) and then click on the React tab; the element you clicked
    on will be selected. You can also use the Search function to look for a specific
    component; this will be useful with large applications to avoid having to manually
    scroll through lots and lots of HTML.
  prefs: []
  type: TYPE_NORMAL
- en: The triangle next to each component may have two different colors, depending
    on whether it's an actual `React` component (such as `<Counter>` or `<ClicksDisplay>` ,
    in our case) or a `Redux` connection to the store. HTML elements don't have any
    triangles.
  prefs: []
  type: TYPE_NORMAL
- en: In the third panel, you can see the current props. If you edit one (try setting
    the `count` prop to a different value, for example), you'll immediately see changes
    on the left. Also, if you click on a button, you'll see how the prop values change;
    experiment a bit with the three buttons on your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to interact with any component, you may notice that the currently
    selected one has `== $r` next to it. This means that there is a special JS variable,
    which points to the selected component in our case, `<Counter>`. If you open the
    Console tab, you can examine its props, by typing in `$r.props`, or experiment
    with calling the diverse methods available, such as `$r.onAdd1()` , as shown in
    the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bc8ebab-96ed-4077-a15e-929aa0f32746.png)'
  prefs: []
  type: TYPE_IMG
- en: The `$r` variable lets you work (and experiment) with the currently selected
    component
  prefs: []
  type: TYPE_NORMAL
- en: 'Interestingly, in our application, as we coded it, the `.onAdd1()` method actually
    dispatches an action, and we can see it in the screenshot: an object with `type:"counter:increment"`
    and `value:1`, just as we coded it; see the *Defining Actions* section in the
    previous chapter to check.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select the `<Provider>` component, you can inspect the current state
    of the application. First you''ll have to select it (so `$r` points to it) and
    then, in the Console tab, you''ll need to enter `$r.store.getState()` to get results
    as in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/229f2495-f313-4896-8673-1b225ab6e9bc.png)'
  prefs: []
  type: TYPE_IMG
- en: By selecting the <Provider> component, you can inspect the application's state
  prefs: []
  type: TYPE_NORMAL
- en: In fact, you can even fire actions if you want; by entering something like `$r.store.dispatch({type:"counter:increment",
    value:11})` , you have full control over the application state.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with the standalone tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are working with other browsers such as Safari or Internet Explorer,
    or if you cannot use Chrome or Firefox for some reason, there's a standalone version
    of the tool, which you can find at [https://github.com/facebook/react-devtools/tree/master/packages/react-devtools](https://github.com/facebook/react-devtools/tree/master/packages/react-devtools).
    Be warned, though, that for web development, you won't be getting the full functionality,
    so you'll probably be better off keeping to a supported browser!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to use the standalone tool; let''s see how to set it up. To start with,
    obviously, we need to install the package. You can do it globally, but I prefer
    working locally within the project itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to be able to run the new command, you could use `npx` (as we saw
    a couple of times in the book), but it''s easier to just define a new script in
    `package.json`. Add something like the following to it, and you''ll be able to
    open the standalone app with `npm run devtools`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now you are set up; let's see how to use the tool.
  prefs: []
  type: TYPE_NORMAL
- en: In case you are curious, this standalone application is itself written in JS
    and converted to a desktop application with `Electron`, as we'll be seeing later
    in the book in [Chapter 13](2aebad42-65b6-4cb7-bf4f-1e2e0907a70a.xhtml), *Creating
    a Desktop Application with Electron*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We got the standalone tool; let's see how to use it. In order to use the RDT
    in a standalone fashion, you'll have to add a single line at the top of your HTML
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then start the application normally, and after it''s up and running, start
    the standalone app. You''ll get something like the next screenshot. Note that
    we are seeing two separate windows: one with the RDT, and the other with the application
    (for variety) in Opera; in the same way I could have used Safari or IE or any
    other browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da859f94-64d3-4da9-a779-bf2bc63a38a3.png)'
  prefs: []
  type: TYPE_IMG
- en: The standalone RDT let you inspect React applications even if they are running
    in browsers other than Chrome or Firefox
  prefs: []
  type: TYPE_NORMAL
- en: Now you are really set to go; let's finish this section by seeing what we can
    (and cannot) do.
  prefs: []
  type: TYPE_NORMAL
- en: For more details on how to configure the standalone application, in particular,
    if you need to use a different port, check out the official documentation at [https://github.com/facebook/react-devtools/tree/master/packages/react-devtools](https://github.com/facebook/react-devtools/tree/master/packages/react-devtools).
    For complicated cases, you may end up using a different package, `react-devtools-core`,
    over at [https://github.com/facebook/react-devtools/tree/master/packages/react-devtools-core](https://github.com/facebook/react-devtools/tree/master/packages/react-devtools-core).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This version of the developer tools lets you interact with the application and
    see components and props, but you'll be restricted as to interacting with them
    through the console, as we'll see.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, start by checking that if you click on the buttons in the Opera window,
    you''ll automatically see the changes in the RDT, as before see the next screenshot
    for the results after some Add 1 clicks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98090598-82a8-4e6b-b56b-6e7a7566f9e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Whatever you do in the React application will be shown in the Developer Tools.
    In this example, I clicked six times on Add 1, and the updated component tree
    shows the new values
  prefs: []
  type: TYPE_NORMAL
- en: 'Most functions work the same way as in Chrome. You can search for a component
    by name, and if you right-click on a component, you get several options, including
    showing all the occurrences of the component''s name (as with the search) or copying
    its props; see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab13863f-9c53-4bb8-b198-025b5f2a8276.png)'
  prefs: []
  type: TYPE_IMG
- en: The RDT let you get full information about any component
  prefs: []
  type: TYPE_NORMAL
- en: 'However, note that you won''t get *complete* values. For instance, in the preceding
    example, the copied props were as in the following code snippet; instead of a
    function, I got a string description:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Another restriction is that you won't be able to use `$r` to directly access
    an object; this is beyond the tools' capabilities. However, if you are out of
    solutions for debugging, at least you'll be able to see the internal workings
    of your app, nothing to be dismissed out of hand!
  prefs: []
  type: TYPE_NORMAL
- en: Logging Redux with redux-logger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One basic tool for debugging is the use of a logger. While JS already has enough
    logging features available (we already mentioned the `window.console` functions
    in the *Adding logging with Winston* section in [Chapter 5](18752def-acd4-4b7d-9395-a1dad0864f16.xhtml),
    *Testing and Debugging Your Server,* you will require some help in order to log
    the `Redux` actions, a key requirement. Certainly, you could add code before dispatching
    any action, but that would become too long-winded. Rather, we'll consider adding
    some middleware that will log all actions; even if we'll see better tools in the
    next *Debugging Redux with the Redux Developer Tools* section, this kind of log
    will prove quite useful. In this recipe, let's see how to add `redux-logger`.
  prefs: []
  type: TYPE_NORMAL
- en: We have used middleware for thunks, but if you want to write your own middleware,
    you can find several examples (including a logging function) at [https://redux.js.org/advanced/middleware](https://redux.js.org/advanced/middleware).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our first step, as always, is to get the new tool. Installation is simple and
    straightforward, along the same lines we seen in most of the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will install the new package, but you'll have to manually add it to your
    store creation code; by itself, the package won't have any effect.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to read more about the `redux-logger` features and capabilities,
    check out [https://github.com/evgenyrodionov/redux-logger](https://github.com/evgenyrodionov/redux-logger).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up `redux-logger` requires first creating a logger with the `createLogger()`
    function, which lets you select many options to customize the logged output, and
    then include the generated logger as middleware for `Redux`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Out of the many available options, these are the most interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '`colors` : If you wish to change how the output looks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diff:` : A Boolean flag to decide if you want to display the difference between
    the old state and the new state; there''s also a `diffPredicate(getState, action)`
    function that you can use to decide whether to display the differences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration` : A Boolean flag to print how long it took to process an action;
    this would be interesting mainly in async actions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`predicate(getState, action)` : Can inspect the action and the current state,
    and return true or false to define whether the action should be logged or not;
    this is quite useful to restrict logging to, say, just a few action types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`titleFormatter()`, `stateTransformer()`, `actionTransformer()`, and several
    other formatter functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the complete set of options, check out [https://github.com/evgenyrodionov/redux-logger](https://github.com/evgenyrodionov/redux-logger).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our counter application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll see how to use this logger with our counter application for the simplest
    possible case, and then with the regions browser, which will add thunks to the
    mix. You have to use the `applyMiddleware()` function (which we already saw in
    the *Doing async actions: redux-thunk* section in [Chapter 8](70dac9ad-13ec-4c7b-a09c-eb97f396cab1.xhtml),
    *Expanding Your Application*, when we started using `redux-thunk`) to add the
    logger to the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you would probably want to enable this only for development, so
    the last line in the preceding snippet should rather be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This sets the logger to access every single action that gets dispatched, and
    to log it including the differences between states and the processing time. We'll
    get to see how this works soon, but first let's take a look at our second application,
    which already had some middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our region application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you want to apply two or more pieces of middleware, you have to specify
    in which order they will be applied. In our case, remembering that a thunk could
    either be an object (fine to list) or a function (that will get called to eventually
    produce an object) we have to place our logger right at the end of all possible
    middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: I decided to skip listing differences because we'd be getting lists that are
    a bit long (over 200 countries, for example) so output would have become too large.
    Let's now get to see how this logging works in practice.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We set both our applications to log all actions, with no filtering; all we have
    to do is `npm start`, and the logger's output will appear in the web developer
    tools console.
  prefs: []
  type: TYPE_NORMAL
- en: Logging the counter application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The counter application is quite simple: the whole state had just two pieces
    of data (the current counter value and the number of clicks so far) so it''s easy
    to follow what happens during a test run; see the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4040d91b-4ca8-43af-b050-d5ba98a58b2e.png)'
  prefs: []
  type: TYPE_IMG
- en: A sample run of the counter application, but logging all actions with redux-logger
  prefs: []
  type: TYPE_NORMAL
- en: You can easily follow the test run, and you'll be able to see when we clicked
    each of the buttons which action was dispatched and the successive values of the
    store—if there were any problems with the reducer's logic, you'd probably find
    them easy to detect, given all the information that appears onscreen.
  prefs: []
  type: TYPE_NORMAL
- en: Logging the region application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our second application is more interesting, given that we are doing actual
    async requests, the amount of data to process is larger, and the screen display,
    while still a bit simple, is at least more complex than the counter display. When
    we start the application, the dropdown used an action to request the whole list
    of countries, as you can see in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e3c3471-b707-4727-af16-64443064975e.png)'
  prefs: []
  type: TYPE_IMG
- en: The drop-down component dispatched an action to get the countries (countries:request),
    and it proved successful (countries:success) returning a list with 249 countries
  prefs: []
  type: TYPE_NORMAL
- en: 'After the countries were loaded, I decided to pick France (a very small homage
    to the FIFA Soccer World champions of 2018!), and some new actions were fired,
    as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7dab0e5a-6108-4a4d-ba75-5b641266a2d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The results of picking a country: several actions were dispatched and the API
    was called'
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of a smaller display, I compacted the two first actions, and I
    could then expand the last one, showing the answer that was received from our
    own server. You can check that all regions are correctly displayed, though in
    alphabetic order, as we had sorted the list by name.
  prefs: []
  type: TYPE_NORMAL
- en: With this logger, you have already a good tool to see what happens in the `React`+`Redux`
    applications—but we'll add yet another tool for a even better way of working.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Redux with the Redux Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best things to have if you are working with `React`+`Redux` are the
    `Redux` Developer Tools (or DevTools), which provide a console that lets you look
    into actions and, states, and even provide a "time machine" mode that allows you
    to go back and forth in time, so you can carefully check if everything's as it
    should be. In this recipe, let's see how to use this very powerful tool to help
    debug our code.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see Dan Abramov's demonstration of this tool, check out his talk
    at React Europe in 2015 at [https://www.youtube.com/watch?v=xsSnOQynTHs](https://www.youtube.com/watch?v=xsSnOQynTHs).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing the required `redux-devtools-extension` is easy, but be careful! Don''t
    confuse the `redux-devtools-extension` package, at [https://github.com/zalmoxisus/redux-devtools-extension](https://github.com/zalmoxisus/redux-devtools-extension),
    with `redux-devtools`, a similar but different package at [https://github.com/reduxjs/redux-devtools](https://github.com/reduxjs/redux-devtools).
    The latter is more of a "DIY" package, which requires plenty of configuration,
    though it will let you create a totally custom monitor for `Redux`, if you care
    to. For ourselves, this is what we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You will also want to install a Chrome extension, `Redux Devtools`, which works
    together with the package we just installed. This extension will add a new option
    to the web developer tools, as we'll see.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you run the code, it will work exactly as before, but let's see how the added
    debugging functions work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s fire up our region application, and then open the web developer tools
    and pick the Redux tab. You''ll get something like in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/848f36e9-84ed-4eb2-bc94-bbf8ca07728d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Loading the application shows the initial state plus a couple of actions: the
    request for countries and the success of that request'
  prefs: []
  type: TYPE_NORMAL
- en: There are many features here. The following slider (you will have to click the
    clock icon on the bottom bar to see it) is probably the most interesting one,
    because it lets you go back and forth; try sliding it, and you'll see how the
    application changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you could easily see how the screen looked when the country request
    action had been dispatched, but before the data came back; see the next screenshot.
    You''ll remember that in order to check this out, we had to add an artificial
    time delay before; now, you can examine the situation at will, with no need to
    add any special code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62796905-cfd8-495a-9794-8ea553c95e3f.png)'
  prefs: []
  type: TYPE_IMG
- en: By using the slider, you can see how the application looked at any previous
    moment
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select the Inspector option in the drop-down list at the top, you can
    examine actions and states. For example in the next screenshot, you can examine
    the action that was dispatched when the list of countries was retrieved from the
    server with all its data. You''ll notice that this kind of information is very
    similar to what the `Redux` logger package produced, but you can work with it
    in a more dynamic way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3f573f9-1e9d-498b-8596-51c2cf96c89c.png)'
  prefs: []
  type: TYPE_IMG
- en: The Inspector feature lets you view actions (as here) and states, so you can
    inspect everything that happened
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s advance a bit; select France again, and we''ll see how the state changed
    after those regions came in. The Diff tab shows you only the differences in the
    state: in our case, the `loadingRegions` value was reset to false (it had been
    set to true when the request for region action was dispatched), and the list of
    regions got its values (all the regions of France). See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85b81bbc-a823-4c88-8694-c84c74b7b8a7.png)'
  prefs: []
  type: TYPE_IMG
- en: The Diff tab lets you quickly see just the state changed attributes for a faster,
    simpler analysis
  prefs: []
  type: TYPE_NORMAL
- en: We haven't gone through all functions, so go ahead and click everywhere to find
    what else is available. For example, the buttons on the left in the bottom bar
    let you open a separate window for debugging, so your screen won't get so cramped;
    another button lets you create and dispatch any action, so go ahead, try everything
    out!
  prefs: []
  type: TYPE_NORMAL
- en: You really should experiment with the tool to get a clear perspective on what
    you can achieve with it—and, in particular, try out the `time machine` function.
    You'll appreciate the fact that this kind of result is possible only because of
    the way in which `React` creates the view as a function of the state, but then
    you will eventually come to notice that something is missing; let's find out what
    is it, and how to fix it?
  prefs: []
  type: TYPE_NORMAL
- en: Connecting routing for debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What did we miss? The simple applications we tried out in previous sections
    of this chapter didn''t include routing—but what would have happened if they did?
    The problem now is visible: whenever the user navigates to a new route, nothing
    in the state would keep track of that change, so the time machine functions wouldn''t
    really work. To solve this, we need to keep the router information in sync with
    the store, and that will restore full functionality to our debugging; let''s see
    here how to do that.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With previous versions of `react-router`, a `react-router-redux` package took
    care of linking the router and the state, but that package was recently deprecated
    and replaced by `connected-react-router`, which we''ll install. I''m mentioning
    this because there are many articles on the web that still show the usage of the
    former package; be careful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This is half the solution; getting the package to work will (once more!) require
    changes in the store and in the structure of your application; let's see that.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to modify our code so that the Redux time machine functionality will
    work. Let's use again the basic routing application we saw in the *Adding routing
    with react-router* section in [Chapter 8](70dac9ad-13ec-4c7b-a09c-eb97f396cab1.xhtml),
    *Expanding Your Application*; we had routing and also a login form that dispatched
    some actions, so we'll be able to see (on a very small scale, agreed!) all the
    kinds of things we  find in a normal application.
  prefs: []
  type: TYPE_NORMAL
- en: 'There will be changes in two places: first, we''ll have to connect our store
    with a `history` object related to the router, and, second, we''ll have to add
    a component to our main code. The store changes are as follows—observe that we
    also added here our other debugging tools to match those in the rest of the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is sort of obscure-looking, but basically:'
  prefs: []
  type: TYPE_NORMAL
- en: We create a `history` object, which we'll have to export because we'll need
    it later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We wrap our original `reducer` with `connectRouter()` to produce a new reducer
    that will be aware of the router state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We add `routerMiddleware(history)` to allow for routing methods like `push()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then we''ll have to add a `<ConnectedRouter>` component to our main JSX; this
    will require the history object that we created before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Everything's set now; let's see how this works.
  prefs: []
  type: TYPE_NORMAL
- en: For a fuller description of `connected-react-router`, check out its GitHub page
    at [https://github.com/supasate/connected-react-router](https://github.com/supasate/connected-react-router);
    in particular, you may be interested in the many articles listed near the bottom
    of the page with diverse tips and suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start our application now, and don''t forget to run our server from
    [Chapter 4](6b0f5248-5e86-4182-b7fe-1501f2ff09a3.xhtml), *Implementing RESTful
    Services with Node*, as we did before. Opening the `Redux` DevTools, we see a
    single new action, `@@INIT`, and the state now includes a new router attribute;
    see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e01f59d1-f5d3-4a42-9807-cbcee3338a5c.png)'
  prefs: []
  type: TYPE_IMG
- en: After connecting routing to the store, some new actions and state attributes
    appear
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on Alpha..., we''ll see that two actions were dispatched: the first
    attempted to access `/alpha`, and the second was our redirection to the `/login`
    page, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b11bbd6d-5992-4c1d-b2d2-256d78e4fecb.png)'
  prefs: []
  type: TYPE_IMG
- en: Attempting to access a protected route redirects us to the login page
  prefs: []
  type: TYPE_NORMAL
- en: 'After entering user and password, we see our login:request and login:success
    actions—as we have seen since we enabled the `Redux` Developer Tools—followed
    by another action, corresponding to the redirection to the `/alpha` page appears
    after as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8acb7fa1-5e29-474b-86fb-db859607bc33.png)'
  prefs: []
  type: TYPE_IMG
- en: Our own actions are intermixed with the router actions
  prefs: []
  type: TYPE_NORMAL
- en: 'But, now the time machine functionality is enabled for routing as well; for
    example, if you move the slider back to the beginning, you''ll see the home page
    again, and you can go back and forth, and the view will appropriately reflect
    everything you had earlier seen; check the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b15fe95-47a8-49eb-8f22-96a22251408f.png)'
  prefs: []
  type: TYPE_IMG
- en: Having connected the router to the state, now we can use the slider to go back
    and see the correct pages every time
  prefs: []
  type: TYPE_NORMAL
- en: We now have a good set of debugging tools; let's move on to do automatic testing,
    as we earlier did with `Node`.
  prefs: []
  type: TYPE_NORMAL
