- en: Chapter 9. Get Your Game Out There
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After all the hard work, our game is ready to be released. In this chapter we
    are going to upload our game to a web server, so that it can be played on the
    Internet by anyone. We will look at how we can allow users to log into their Facebook
    account, and post the score of a level to their Facebook walls. We will also integrate
    Flurry analytics to track useful data that will allow us to understand how and
    where people are playing the game. Finally, we will briefly talk about earning
    money from games.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing a game on your own site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order for people to play the game, we need to get it up onto a website, preferably
    your own. This means we are going to need to find a place to host the website,
    export a final build of the game, and of course utilize an FTP program so that
    we can upload the game.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All throughout the book we have been testing and playing our games using GameMaker:
    Studio''s built-in server emulator. It allows us to see how the game will perform
    as if it were on an actual website, but it is only accessible to the computer
    we are developing on. To upload the game to a website, we will need to build all
    the files into the proper HTML5 format.'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Tower Toppling game that we have been working on, if it isn't already
    open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we create the final build, we should look at some of the options available.
    Navigate to **Resources** | **Change Global Game Settings**, and then go to the
    **HTML5** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **General** subtab there are four sections of options as can be seen
    in the next screenshot. Looking at **HTML5 File Options**, it is possible to use
    a custom web page file and a custom loading bar if we want a specific layout or
    additional content on the page. Creating these files requires knowledge of HTML
    and JavaScript, and a code editor that supports these languages, both of which
    are outside the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the application](img/4100_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Splash screens** are seen before the game is loaded and are actually embedded
    into the `index.html` code. It requires a PNG file that should be of the same
    size as the game area; if it is of a different size, it will be scaled to fit
    the proper dimensions. One drawback of using a splash screen is that the image
    will be drawn instead of the loading bar. As it is generally considered a best
    practice to always let the user know what is occurring, especially when it comes
    to the loading of data, we will not be adding a splash screen to this game.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we compile the game, GameMaker: Studio will create a file named `favicon.ico`
    in the root directory with the icon set in the **Global Game Settings**. Users
    will see this icon in the browser tab along with the name of the page that the
    tab is showing; it is also visible when saving the page as a bookmark. The icon,
    a common feature of most websites, is a small image in the ICO format used for
    displaying a representative symbol of the website. Most image editors do not natively
    save out to ICO format and usually require a plugin to do so. Luckily, there are
    plenty of free websites that will convert any image into an icon for us. I personally
    prefer using [http://iconverticons.com/online/](http://iconverticons.com/online/)
    because they accept most common image formats and convert into all the major icon
    formats including Windows, Mac, and web icons. Once we have a proper ICO file,
    we can then use it in our game.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's update **Icon** by clicking on **Update** and by loading `Chapter 9/Resources/Extras/GameIcon.ico`.
    Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The game is now ready to be exported. Navigate to **File** | **Create Application**
    and save the game to a new folder called `Destruct` in the game project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** and you will see the game compile and create all the files
    required to run your game. In the `Destruct` folder you should see two files and
    a folder. There is a `favicon.ico` file, and an `index.html` file which is the
    web page that will display the game. The folder, `html5game`, contains all the
    assets, such as all the sounds in both OGG and MP3 formats, a few PNG files starting
    with `index_texture` that contain all the graphics compiled into individual sprite
    sheets, and an `index.js` file that contains all the game functionality. There
    is also a `particles` folder that contains all the images used for the particle
    shapes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hosting the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The game has been built; we just need a place to put it. There are many options
    available on the Internet for hosting a website for the game. These can range
    from free web hosting to owning a personal server and everything in between. Choosing
    a host can be very time consuming due to all the different packages available,
    the varying price-points, and what our overall intentions are. Every developer
    will need to consider things, such as how many people are expected to play the
    game, will more games be added in the future, and will the site have advertising
    on it, and so on. A free web hosting service might suffice if the game will only
    be shown to family and friends, but if the goal is to earn money from the game
    it is better to use some form of paid service. When selecting a provider, the
    main features we want to look for are: how much server space, the amount of bandwidth,
    FTP access, and maximum file size.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you should ensure that the site allows MP3 files to be uploaded,
    as many free and a few paid sites do not allow this. Popular sites, such as [www.godaddy.com](http://www.godaddy.com)
    and [www.globat.com](http://www.globat.com) offer plenty of server space and bandwidth
    for a very affordable price that will suit most developers, or at least when they
    first start releasing games.
  prefs: []
  type: TYPE_NORMAL
- en: In order to move onto the next step, make sure you have secured web server space
    and that you have FTP access to it.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading the game with FTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get our game onto the server we need to use an FTP client to transfer the
    files. There are many free downloadable FTP clients available, such as WinSCP,
    CuteFTP, and FileZilla. Some browsers can be used for FTP if the appropriate plugin
    is installed, such as FireFTP for Firefox. Some web hosting services even offer
    drag-and-drop FTP capabilities. For this project we will be using WinSCP which
    can be downloaded from [http://winscp.net](http://winscp.net).
  prefs: []
  type: TYPE_NORMAL
- en: Download the WinSCP client and install it according to the instructions. When
    the **Initial user settings** page appears, select **Commander interface** as
    shown in the following screenshot:![Uploading the game with FTP](img/4100_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run WinSCP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As this is the first time we are accessing the website's FTP, we will need to
    click on **New** to create a new FTP session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to select a file protocol method by navigating to **Session** | **File
    Protocol** to transfer the files. The default is **SFTP** (**Secure FTP**), but
    many hosting sites only allow for standard FTP access, so we will go with that.
    Navigate to **File Protocol** | **FTP**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Consult your hosting provider's documentation for instructions on how to configure
    your FTP connection.
  prefs: []
  type: TYPE_NORMAL
- en: Next we need to enter the server FTP address, often your website name, plus
    your username and password. It should look something like the following screenshot:![Uploading
    the game with FTP](img/4100_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To make it easier to access the site in the future we can save these settings,
    including the password. Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will take us back to the login screen and we can now see the FTP connection
    in the **Stored sessions** list as shown in the next screenshot. To open a connection,
    we can double-click the site name, or select the site name and click on **Login**.![Uploading
    the game with FTP](img/4100_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all the information has been correctly entered, a directory window should
    open. As seen in the next screenshot, there are two panes with file directories.
    The left-hand side is the local drives of the computer and the right-hand side
    is the server directory. The server should be open to the root directory though
    it might be displayed as being in a folder called `www` or `public_html`. There
    likely is at least one file in the directory already, `index.html`, which would
    be the default page that is seen when people go to the domain.
  prefs: []
  type: TYPE_NORMAL
- en: '![Uploading the game with FTP](img/4100_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the left panel, locate the `Destruct` folder where our game has been exported
    to. Drag the entire folder over to the right panel to transfer all the files to
    the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pop-up dialog box will ask if we want to copy all the files over. Click on
    **Copy**. It may take a few moments to transfer everything over.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The game has now been uploaded and is accessible on the Internet. To access
    it, just open a browser and go to the website and the `Destruct` subdirectory,
    for example, `http://www.yoursitename.com/Destruct/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrating with Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the game now uploaded to a server it is available for anyone in the world
    to play it. They can play the game, that is, if they know about it. One of the
    most difficult challenges any developer faces is getting the word out about their
    product. One of the easiest ways to spread the news is through social media sites,
    such as Facebook. GameMaker: Studio makes this easy as the functionality for connecting
    with Facebook is already integrated. We are going to add a Facebook login button
    to the frontend of the game, and we will add the ability for the player to post
    their scores to their Facebook walls.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to use the Facebook functions, we need to have both a Facebook account
    and a Facebook developers' account. Go to [http://developers.facebook.com/](http://developers.facebook.com/)
    and log in. If you do not have a Facebook account, it will prompt you to create
    one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we have logged in to the developers' page, we need to click **Apps** on
    the top menu bar. This will take us to the **Apps** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we need to click on the **Register as a Developer** button. This will open
    a registration dialog that we need to go through. First we will need to **Accept
    the Terms** **and Conditions**, and then we need to supply a phone number to **Verify
    the Account**. This must be a valid number, as it will send a text message that
    is needed for verification. Finish the process as instructed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always read the Terms and Conditions *before* you agree to them and ensure that
    you fully understand what it is you are legally agreeing to.
  prefs: []
  type: TYPE_NORMAL
- en: Having completed the registration, we should find ourselves back on the **Apps**
    dashboard. There is a Create New App button close to the registration button.
    Click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Create New App** dialog box, as seen in the next screenshot, we need
    to enter an **App Name**. This name does not need to be unique so long as we don't
    have another app with the same name. There are a few rules about naming conventions
    that you can read by clicking on the **Facebook Platform Policies** link. The
    optional **App Namespace** is for integrating into Facebook a bit deeper with
    app pages and using Open Graph, a notification tool. We will not need an App Namespace
    so we can leave it blank. We also do not need **Web Hosting** and can click **Continue**.![Integrating
    with Facebook](img/4100_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about Facebook Open Graph, App Namespaces, and more, check out
    the Facebook Developers API Documentation at [https://developers.facebook.com/docs/reference/apis/](https://developers.facebook.com/docs/reference/apis/).
  prefs: []
  type: TYPE_NORMAL
- en: The next step is a CAPTCHA security check. Follow the directions and click on
    **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app has now been created and we are on the **Basic Info** page. Here we
    can finish setting up how the game will be integrated into Facebook. Enter the
    base domain name of the game website in **Basic Info** | **App Domains**. This
    will allow the app to run on that domain and all subdomains. It should not include
    the `http://` or any other element beyond the name of the root site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Select how your app integrates with Facebook**, we need to select **Website
    with Facebook Login**, and then enter the exact URL where the game is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save Changes** as we are done with the basic info. The settings should
    look like the following screenshot with the appropriate domain information entered
    for your site:![Integrating with Facebook](img/4100_09_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we get back into GameMaker: Studio, we need to copy **App ID:** from
    the top of the **Basic** page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reopen the game project and navigate to **Resources** | **Change Global Game
    Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Facebook** tab, as shown in the next screenshot, check the box for
    **Use Facebook**, and then paste the ID we copied into **Facebook App Id**. Click
    on **OK**.![Integrating with Facebook](img/4100_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now have access to the Facebook app; now we just need to initialize it.
    Create a new script, `scr_Global_Facebook`, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We start by initializing Facebook, and then we create a global variable for
    a `ds_list` that will contain all the permissions we want to be able to request
    from Facebook. In our case we are just asking to be able to publish to the Facebook
    wall of the logged in user. All the options that are available can be found on
    the Facebook Developers' site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `scr_Global_GameStart` and execute the following line at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Adding a Facebook login button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have Facebook active, we can implement it into the game. We will
    start by adding a login button.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Sprite, `spr_Button_FacebookLogin`, with **Remove Background**
    unchecked, load `Chapter 9/Resources/Sprites/FacebookLogin.gif`, and center the
    origin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Object, `obj_Button_FacebookLogin`, attach the sprite we just created,
    and then set **Parent** to `obj_Button_Parent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Mouse** | **Left Pressed** event and attach a new Script, `scr_Button_FbLogin_MousePressed`,
    and have the user log in to Facebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Open `MainMenu` and add a single instance of the button below the **START**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to let the players post to their walls. For this we will add another
    button to the score screen. Create a new Sprite, `spr_Button_FacebookPost`, with
    **Remove Background** unchecked, load `Chapter 9/Resources/Sprites/FacebookPost.gif`,
    and center the origin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The score screen is all code, so we don't need a new object, but we do need
    to add code to the existing scripts. Open `scr_ScoreScreen_Create`, and add a
    variable for the Y placement, width offset, and height offset of the button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next we will create a new Script, `scr_Menu_Button_FbPost`, which will control
    the functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We only want to post to Facebook if the player defeats a level, so we start
    by checking the win condition. We check the status of the Facebook connection,
    as we want to display the button only if the player is signed in. If the player
    is signed in, we draw the button on the screen and check to see if the mouse is
    hovering over it, as we did with all our other buttons. If the button is clicked,
    we create some variables for the message title, caption and text, an image, and
    a link back to the site. We then post a message to Facebook. The function also
    has two additional parameters that are for using more advanced Facebook actions,
    but we are leaving these blank.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see what advanced options are available, see the Facebook Developers' API
    Post page at [https://developers.facebook.com/docs/reference/api/post/](https://developers.facebook.com/docs/reference/api/post/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to draw this on screen we need to reopen `scr_ScoreScreen_DrawGUI`
    and execute the script we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save the game and click on **Create Application**. It is OK to overwrite the
    existing project files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open WinSCP and connect to the FTP server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transfer all the files over to the server. Click on **Yes to All** when prompted
    to confirm the overwriting of the files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also need to transfer over the image we want to include in the post. Open
    `Chapter_09/Resources/Extras/` and transfer `Thumbnail.gif` over to the server
    into the `Destruct` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a browser and go to the game site. When the game loads up, we should see
    the new button just below the **START** button as shown in the following screenshot:![Adding
    a Facebook login button](img/4100_09_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Log Into Facebook** button. A pop-up window, like the next screenshot,
    should appear. If nothing happens, check to see if the browser has blocked pop
    ups and unblock it. When the pop up does appear, we just need to sign into our
    Facebook account.![Adding a Facebook login button](img/4100_09_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play a level successfully. When the Score screen appears we should see the **POST
    TO FACEBOOK** button, as shown in the following screenshot:![Adding a Facebook
    login button](img/4100_09_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the button and then go to your Facebook page. We will see a new post
    that has been shared with the world, which will look like the following screenshot:![Adding
    a Facebook login button](img/4100_09_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! The game is now available for everyone to play and is being
    exposed to the world through Facebook. The goal for any developer is to create
    interesting games that everybody enjoys playing and is able to complete. But how
    do you know whether that is occurring? Are people getting stuck in the game? Is
    it too easy? Too hard? After all the hard work that went into making the game,
    it would be a shame to not know any of these answers. This is where analytics
    come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking the game with Flurry Analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Analytics** is the process of gathering and finding patterns within a set
    of data. This data can be any quantifiable action, such as a mouse click, and
    its related elements, such as what was clicked. This information allows developers
    to see how users are using their product. It is incredibly useful when creating
    games, because there are so many things that can be tracked.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to implement Flurry Analytics, one of the two systems GameMaker:
    Studio has built-in and is the most robust. While it is possible to track anything
    and everything, it is generally better to focus on things that are most relevant
    to the user experience. For our game we are going to track each level''s score,
    equipment used, and times played. We will only send this data out upon the player
    successfully completing a level. This will allow us to see how often each level
    is played, what equipment is used the most, the variation in scores, how hard
    each level is, and where people quit the game on average.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Flurry Analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use Flurry Analytics, we need to have an account with the service,
    an application to send the data to, and have it activated in GameMaker: Studio.
    Once that has been done, a new build needs to be uploaded to the site and people
    need to play the game.'
  prefs: []
  type: TYPE_NORMAL
- en: First, let's sign up for Flurry analytics. Go to [http://www.flurry.com/](http://www.flurry.com/)
    and sign up for a free account, following the site's directions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the account has been set up and you have logged in, we should be on the
    developer home page. On the menu bar click on the **Applications** tab to go to
    the **Applications** page as shown in the following screenshot:![Setting up Flurry
    Analytics](img/4100_09_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't have any application at this point, so we need to add one. Click on
    **Add a New Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next page asks for a platform to be selected. Click on the Java icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we need to add in some basic info for the application. As seen in the next
    screenshot, enter the name of the game, `Destruct`, and choose an appropriate
    category, in our case, **Games - Simulation** seems to fit best. Then click on
    **Create App**.![Setting up Flurry Analytics](img/4100_09_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the next page it asks how we want to integrate the SDK with a couple of
    options. GameMaker: Studio already has this integrated into the software, which
    means we can skip this step. Click on **Cancel** to finish this step and return
    to the **Home** page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now see our application in **Application Summary**, as can be seen
    in the next screenshot. We need to get our application ID, so click on **Destruct**.![Setting
    up Flurry Analytics](img/4100_09_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to navigate to **Manage** | **App Info** in the left menu to
    access the page with our application information. At the bottom of the list, as
    seen in the next screenshot, is the **API Key**. This key is needed to connect
    the game in GameMaker: Studio into this analytics app. Copy this key. We are done
    with this site for now.![Setting up Flurry Analytics](img/4100_09_16.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reopen the project file and open **Global Game Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the right arrow at the top of the **Global Game Settings** until you
    see the **Analytics** tab as shown in the next screenshot. Click on the **Analytics**
    tab.![Setting up Flurry Analytics](img/4100_09_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **HTML5** subtab, set **Analytics Provider:** to **Flurry**, check the
    box for **Enable Flurry**, and paste the API Key into **Flurry Id**. We now have
    everything set up and ready to output some data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tracking events in the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we can send out data we just need to implement it into the existing
    game. We need to add some bits of code into several scripts, plus create some
    new ones, in order to get useful, trackable information. We want to track the
    level being played, usage of each piece of equipment, how many times the level
    has been played, and the score of the level.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already have constants for tracking the equipment (`TNT: 0, WRECKINGBALL:
    1`, `MAGNET: 2`) that can be reused for tracking purposes. That leaves us needing
    some additional constants for the level, the attempts, and the score. Navigate
    to **Resources** | **Define Constants** and add `LEVEL: 3, ATTEMPTS: 4, LVLSCORE:
    5`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to keep this data in a grid accessible globally. Create a new Script,
    `scr_Global_Analytics`, and initialize values for the whole game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We start by creating a global data structure that has six values for each level
    in the game. We run a loop to set the initial values for each piece of equipment,
    the level by grabbing the level name from the previously created level array,
    the amount of attempts, and the level score, all set to zero.
  prefs: []
  type: TYPE_NORMAL
- en: Reopen `scr_Global_GameStart` and execute this script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to insert some code to change these values for each level. We
    will start with tracking the attempts for each level. This is going to require
    changes to several scripts. The first one we will change is `scr_Button_LevelSelect_MousePressed`,
    where we need to add an attempt when the player selects a level. In the `else`
    statement, before we change rooms, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We search through the levelData grid for the room that has been selected in
    order to find out what row we need to change. Once we have the row, we add one
    attempt to that level's data.
  prefs: []
  type: TYPE_NORMAL
- en: As we are tracking attempts, we need to insert the same code into `scr_Menu_Button_Restart`
    just before we restart the room.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we also need to add similar code to `scr_Menu_Button_NextLevel`, except
    we cannot use `myLevel` to find the room. Instead, we need to look ahead to the
    next room. Just before we change rooms, insert the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With the attempts now being tracked, we can move onto tracking the rest of the
    desired data. Create a new Script, `scr_Level_Stats`, and update all the relevant
    stats.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We start by finding the row for the level that has just been completed. We then
    run a loop through the equipment to see how many were used in the level, by subtracting
    the remaining equipment from how many the player started with. To ensure we get
    a positive number we use the abs function which returns an absolute value. We
    also grab the final score of the level and update the grid.
  prefs: []
  type: TYPE_NORMAL
- en: We want to run this script only upon the successful completion of a level, and
    the easiest place to put this is into `scr_WinCondition`, just before the last
    line of code where we return a true value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Sending the data to Flurry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data is now properly updated each time the level is played and successfully
    completed. All we need to do now is send the data to Flurry. Flurry does not update
    in real time, but instead compiles the data several times a day. If we send bits
    and pieces of data individually throughout the entire play session, that data
    might be separated when it is compiled, resulting in anomalies. To help prevent
    this, we are going to send all the relevant data of every level each time we want
    to update. Flurry will recognize the changes and keep the data together.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Script, `scr_Analytics_Send`, and run a loop through all the level
    data and send it out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this loop, we start by grabbing the name of the room stored in the grid and
    all the values for each piece of data. Using the function `analytics_event_ext`
    we can send up to 10 different pieces of data to Flurry. The first parameter is
    the category of data, sent as a string, in this case we are using the name of
    the levels as categories. All the following parameters are key/value pairs with
    the name of the data we are tracking and its associated value.
  prefs: []
  type: TYPE_NORMAL
- en: We need to send an initial set of analytics upon the start of the game, so we
    can start with a clean slate. Reopen `scr_Global_Analytics` and send the data
    at the end of the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We also need to send the data out upon completion of the level. Reopen `scr_Level_Stats`
    and send the data at the end of the script as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now finished implementing the analytics. All that is left is to put it
    up on the web. Save the game, click on **Create Application**, and upload the
    new version of the game to the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the game several times, making sure to use differing amounts of equipment
    and retrying levels each time. We want to have some basic data tracked, so we
    can see what it all means.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding the Analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are tracking several pieces of data, and Flurry will be compiling this information
    into event logs. We can see when a session has occurred and what happened during
    that play session. While this is somewhat useful, Flurry breaks things down even
    further on a global scale that will show us how each level is played on average.
    Let's take a moment to see what Flurry provides us with. Before we get started,
    it is important to know that Flurry Analytics are not updated in real time, and
    it may take a few hours before we see any data appear.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Flurry account and go to your **Destruct** application page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The very first statistic you will see on the **Dashboard** is the **Sessions**
    graph, as shown in the next screenshot. Here we can see how many times the game
    was played each day. There is also information, such as average duration of each
    play session, where in the world people are playing the game from, and so on.![Understanding
    the Analytics](img/4100_09_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Events** on the left-hand side menu. The first option is the **Event
    Summary**, as shown in the following screenshot, which displays how often the
    level was played and the percentage of users that have completed this level per
    session.![Understanding the Analytics](img/4100_09_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we click on the little pie icon of a level, we will get a breakdown of the
    individual event parameters. Each parameter will show the total usage of all sessions.
    As can be seen in the following screenshot, one player used three pieces of TNT,
    another needed only two, and six players did not use any TNT at all.![Understanding
    the Analytics](img/4100_09_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Having this type of information is incredibly valuable. Knowing where players
    stop playing the game can tell us where improvements can be made. Tracking what
    the player is using during the game lets us know if the game is balanced properly.
    The more useful data we can gather, the better we can apply the lessons learned
    to future games.
  prefs: []
  type: TYPE_NORMAL
- en: Making money with your games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Releasing a game is a fantastic accomplishment, but every developer at some
    point is going to want to earn some money from their efforts. The most common
    way to monetize a game is to place advertising on the site, but there are a few
    drawbacks with this when it comes to HTML5 games. The first problem is that the
    site will need a very high volume of traffic before enough clicks have accrued
    to earn any money. This affects the second problem, which is that advertising
    only works if people play the game on the specific site's web page. Unfortunately,
    other sites can embed HTML5 games through an **iframe** , which is a window inside
    a web page that allows content from another site to be displayed, and place their
    own advertising around it. This can be quite frustrating, as it means we are not
    earning money even though the game is running on our site. Happily, there are
    other ways to monetize a game, such as sponsorship.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sponsors** are game portals that will pay money to place their brand on a
    game. The branding is usually the sponsor''s logo as the splash screen seen at
    the start of the game, but can also include things such as a button that links
    back to their site or what the Facebook post shows. The only downside to sponsorship
    is that there aren''t many game portals that currently host HTML5 games, which
    means fewer potential offers. Looking to the future, expect more and more portals
    to jump onboard as HTML5 games mature and demand increases.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the best places to attempt to find sponsorship isn't a game portal at
    all, but rather a marketplace for all types of browser-based games. FGL, [http://www.fgl.com](http://www.fgl.com),
    was originally created as a place to connect flash game developers with sponsors,
    but recently it has expanded into HTML5 and Unity games, as well as accepting
    games for iOS and Android devices. This marketplace allows developers to expose
    their game privately to sponsors and other game developers, gain feedback, and
    when ready, put the game up for bidding. Unlike a traditional auction house where
    the highest bid wins, the developer can choose which offer they prefer and can
    negotiate with bidders over the exact terms of the deal. There is no guarantee
    that a game will be offered any money, but if there is a chance to get money up
    front, this is where it will likely happen.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There we have it! In this chapter we covered a wide range of things. We started
    by uploading a game to a web server using an FTP client. We then integrated Facebook
    into the game, allowing players to log into their account and post level scores
    to their walls. We then implemented analytics using Flurry to track how players
    are playing the game. Finally, we briefly spoke about making money off our games
    through sponsorship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have completed this book, you should have a very solid foundation
    to build your own games. We started by exploring the GameMaker: Studio interface
    and building the simplest of games. We took a look at creating art and audio so
    that we could improve the quality of our games. We then focused on using the GameMaker
    Language to code several games. We started with a simple side-scrolling shooter
    that demonstrated the basics of scripting. We then built upon that knowledge by
    creating an adventure game with multiple rooms and enemies on paths. We learned
    how to better structure our games and improve our scripting efficiency in our
    platforming boss fight. From there we moved onto using Box2D physics to create
    a simple tower toppling game, which we then polished into a full game with a full
    frontend, particle effects, Facebook integration, and Flurry Analytics.'
  prefs: []
  type: TYPE_NORMAL
- en: 'GameMaker: Studio still has plenty more to offer and new features are constantly
    being added. It''s up to you to use all of this acquired knowledge to make games
    of your own design. Have fun exploring the possibilities of the HTML5 platform
    and get your games out there. I wish you luck!'
  prefs: []
  type: TYPE_NORMAL
