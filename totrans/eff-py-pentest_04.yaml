- en: Chapter 4. Attack Scripting with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Open Web Application Security Project** (**OWASP**) Top 10 is a list of the
    10 most critical web application security risks. In this chapter, we will discuss
    how to script OWASP top 10 attack with Python libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: Injections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Broken authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-site scripting (XSS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure direct object references
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security misconfiguration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive data exposure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing function level access control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSRF attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using components with known vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unvalidated redirects and forwards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Injections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL Injection is the method where an attacker may create or alter SQL commands
    in order to disclose data in the database. This can be effective on an application
    that takes user input and combines it with static parameters to build a SQL query
    without proper validation.
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, all types of injection attacks can be done with manipulating input
    data to the application. With Python, we could inject some attack vectors to the
    application and analyze the output to verify the possibility of the attack. Mechanize
    is a very useful Python module for navigating through web forms, which provide
    a stateful programmatic web-browsing experience with Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could use `mechanize` to submit forms and analyze the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will print out the response for the POST request. Here we submit an attack
    vector to break the SQL query and print all the data in the table instead of one
    row. When testing a website, we have to create many customized scripts like this
    to test with many similar attack vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let us rewrite the script to get all the attack vectors from a file and
    send all of them one by one to the server, and save the output to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We could check the responses for the requests and identify the possible attacks.
    For instance, the preceding code sample will provide responses which include the
    sentence `You have an error in your SQL syntax`. From this, we could identify
    that this form may be prone to SQL injection. After that we could exclude the
    responses which contain an error, as they won't have the required data.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we could write custom scripts to inject LDAP, XPath, or NoSQL queries,
    OS commands, XML parsers, and all other Injection vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Broken authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When authentication functions that help to authenticate users to the application
    are not implemented correctly, that may allow hackers to compromise passwords
    or session IDs, or to exploit other implementation flaws using other users' credentials.
    These types of flaws are known as broken authentication.
  prefs: []
  type: TYPE_NORMAL
- en: We can use mechanize scripts to check the authentication mechanism in an application.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have to check the account management functions like account creation,
    change password, and recover password. We could also write customized brute-force
    and dictionary attack scripts to check the login mechanism of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can generate all possible passwords with a range of characters in them as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Later, we can use these passwords in a brute-force attack as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here we can analyze the response and confirm the login. For that we have to
    search the response for the error messages. If no error messages are found in
    the response it will be a successful login.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, we can check if we were taken back to the login page
    or not. If we are taken to the login page, the login failed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can also modify this script to brute-force predictable, or less random session
    cookies. For that we have to analyze authentication cookie patterns. We can also
    replace the password with the words in a dictionary. The code will be the same
    as we have done for injections, The attack vector will be replaced with the words
    in the dictionary file provided.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-site scripting (XSS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cross-site scripting is also a type of injection attack, which occurs when attackers
    inject malicious attack vectors in the form of a browser-side script. This occurs
    when a web application uses input from a user to craft the output without validating
    or encoding it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could modify the script used to inject SQL attack vectors to test XSS injection.
    To verify the output response, we could search for the expected script in the
    response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: XSS occurs when user input prints to the response without any validation. So,
    to check the possibility of an XSS attack, we can check the response text for
    the attack vector we provided. If the attack vector is present in the response
    without any escaping or validation there is a high possibility of XSS attack.
  prefs: []
  type: TYPE_NORMAL
- en: Insecure direct object references
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This vulnerability occurs when an application uses actual reference identifiers
    (IDs), names, or keys to create web pages or URLs, and the application does not
    verify the authenticity of the user to access the requested page. An attacker
    may change the parameters in the URLs to detect such vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'In an application, the data of a user will not be accessible for another user.
    Check the following script sample; It will iterate through the users and check
    the data is visible for the logged-in user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Security misconfiguration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For better secure applications, it requires a secure configuration of each
    of its underlying technologies, like application, web server, database server,
    and operating system. Also, we need to keep all software up to date. Some of the
    examples for security misconfigurations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Outdated software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presence of sample application or sample databases in server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling directory listings that lead to data disclosure, including codebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unhandled error pages, which can reveal sensitive information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active default passwords in the applicable or applicable framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use Python scripts to verify these types of vulnerabilities. As we discussed
    in the previous sections, we can use Python libraries to send crafted requests
    and analyze their responses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive data exposure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We could write customized Python scripts to check the possible data exposure
    in the web pages. For instance, we have discussed the e-mail gathering script
    in the previous chapter, which could also be used to check if there are any e-mail
    IDs exposed in the web pages.
  prefs: []
  type: TYPE_NORMAL
- en: For that, we have to write a script to check the HTTP responses for the patterns
    we are looking for. Sensitive data may vary according to the website and its usage.
    But we can check for the exposure of sensitive information like credit card, bank
    details, Personal Identification numbers, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Missing function level access control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications verify the function level access rights for a user before providing
    access to a specific functionality. These access control checks also need to be
    verified server-side. If these types of access checks are missing on the server
    side, an attacker can enter the application without any authorization. To check
    this type of vulnerability, we can create custom scripts to authenticate a less
    privileged user to the application and try accessing restricted pages. We can
    make sure that all restricted pages are not accessible for any less privileged
    user.
  prefs: []
  type: TYPE_NORMAL
- en: CSRF attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cross-Site Request Forgery** (**CSRF**) attacks deceive the victim''s browser
    into sending a manipulated request to the vulnerable application while the victim
    is logged in. So, an application should make sure the request is legitimate.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a CSRF attack is an attack on a logged-in user, we have to send the session
    cookie with the request. We can use `cookielib` to remember cookies between sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To test for CSRF, we have to submit the form from a page other than the actual
    page. We could also check the form for a CSRF token. If such a token exists in
    the form, manipulate the values and make sure the form fails with incorrect CSRF
    token and it generate a new one on each request.
  prefs: []
  type: TYPE_NORMAL
- en: Using components with known vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This type of vulnerability occurs when we use components like libraries, frameworks,
    and so on without proper validation. These components may always execute in full
    privilege in the application. So, when a vulnerable component is used in the application,
    it makes the job easier for an attacker. We can write a Python script to check
    the versions of used components in the application and to verify it with **Open
    Source Vulnerability Database** (**OSVDB**) for any unpatched known vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: OSVDB lists almost all known vulnerabilities for libraries and frameworks. So
    we have to make sure that we are using the latest components with the latest patches
    applied on them.
  prefs: []
  type: TYPE_NORMAL
- en: Unvalidated redirects and forwards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications frequently redirect users to other pages or external websites.
    We have to validate the credibility of those redirected pages and websites. If
    the redirect target is passed as a parameter to the application, an attacker can
    lead the user to any phishing or malware-injected web page. We can write a Python
    script to validate all external links in the application. To validate the credibility,
    we can depend on any third-party service like Google Safe Browsing checker or
    site advisor from McAfee.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Google Safe Browsing checker can be found here: [https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html](https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html) and
    McAfee site adviser here: [http://www.siteadvisor.com/sites/](http://www.siteadvisor.com/sites/).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed the basic possibilities of attack scripting. Now you can create
    custom scripts according to your needs. In this chapter we have used mechanize
    for the scripting. We can also use any other modules we have discussed in the
    previous chapters to achieve the requirements. We will discuss more on fuzzing
    and brute-forcing attacks in the next chapter.
  prefs: []
  type: TYPE_NORMAL
