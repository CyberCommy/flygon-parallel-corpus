- en: Chapter 4. Auditing Web Servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter shows you how to do some things that in many situations might be
    illegal, unethical, a violation of the terms of service, or just not a good idea.
    It is provided here to give you information that may be of use to protect yourself
    against threats and make your own system more secure. Before following these instructions,
    be sure you are on the right side of the legal and ethical line... use your powers
    for good!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing supported HTTP methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if an HTTP proxy is open
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering interesting files and directories on various web servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing HTTP authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abusing mod_userdir to enumerate user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing default credentials in web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute-force password auditing WordPress installations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute-force password auditing Joomla! installations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting web application firewalls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting possible XST vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting Cross Site Scripting vulnerabilities in web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding SQL injection vulnerabilities in web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting web servers vulnerable to slowloris denial of service attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Hypertext Transfer Protocol (HTTP)** is arguably one of the most popular
    protocols in use today. Web servers have moved from serving static pages to handling
    complex web applications with actual user interaction. This has opened the doors
    to tainted user input that could change an application''s logic to perform unintended
    actions. Modern web development frameworks allow almost anyone with a knowledge
    of programming to produce web applications within minutes, but this has also caused
    an increase of vulnerable applications on the Internet. The number of available
    HTTP scripts for the Nmap Scripting Engine grew rapidly, and Nmap turned into
    an invaluable web scanner that helps penetration testers perform a lot of the
    tedious manual checks in an automated manner. Not only can it be used to find
    vulnerable web applications or detect faulty configuration settings, but thanks
    to the new spidering library, Nmap can even crawl web servers, looking for all
    sorts of interesting information.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is about using Nmap to audit web servers, from automating configuration
    checks to exploiting vulnerable web applications. I will introduce some of the
    NSE scripts I've developed over the last year and that I use every day when conducting
    web penetration tests at Websec. This chapter covers tasks such as detecting a
    packet filtering system, brute force password auditing, file and directory discovery,
    and vulnerability exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Listing supported HTTP methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web servers support different HTTP methods according to their configuration
    and software, and some of them could be dangerous under certain conditions. Pentesters
    need a way of quickly listing the available methods. The NSE script `http-methods`
    allows them not only to list these potentially-dangerous methods but also to test
    them.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to use Nmap to enumerate all of the HTTP methods supported
    by a web server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are shown for every web server detected on ports `80` or `443`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p80,443 --script http-methods` makes Nmap launch the `http-methods`
    script if a web server is found ports 80 or 443 (`-p80,443`). The NSE script `hhttp-methods`
    was submitted by Bernd Stroessenreuther, and it uses the HTTP method `OPTIONS`
    to try to list all of the supported methods by a web server.
  prefs: []
  type: TYPE_NORMAL
- en: '`OPTIONS` is implemented in web servers to inform clients of its supported
    methods. Remember that this method does not take into consideration configuration
    or firewall rules, and having a method listed by `OPTIONS` does not necessarily
    mean that it is accessible to you.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To individually check the status code response of the methods returned by `OPTIONS`,
    use the script argument `http-methods.retest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the script `http-methods` uses the root folder as the base path
    ( `/` ). If you wish to set a different base path, set the argument `http-methods.url-path`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Interesting HTTP methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTTP methods `TRACE`, `CONNECT`, `PUT`, and `DELETE` might present a security
    risk, and they need to be tested thoroughly if supported by a web server or application.
  prefs: []
  type: TYPE_NORMAL
- en: '`TRACE` makes applications susceptible to **Cross Site Tracing (XST)** attacks
    and could lead to attackers accessing cookies marked as `httpOnly`. The `CONNECT`
    method might allow the web server to be used as an unauthorized web proxy. The
    methods `PUT` and `DELETE` have the ability to change the contents of a folder,
    and this could obviously be abused if the permissions are not set properly.'
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about common risks associated with each method at [http://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29](http://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_%28OWASP-CM-008%29).
  prefs: []
  type: TYPE_NORMAL
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests that use Nmap''s
    default HTTP User Agent. You can use a different HTTP User Agent by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: HTTP pipelining
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some web servers allow the encapsulation of more than one HTTP request in a
    single packet. This may speed up the execution of an NSE HTTP script, and it is
    recommended that it is used, if the web server supports it. The HTTP library,
    by default, tries to pipeline 40 requests and auto adjusts the number of requests
    according to the traffic conditions, based on the `Keep-Alive` header.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can use the argument `http.max-pipeline` to set the maximum
    number of HTTP requests to be added to the pipeline. If the script parameter `http.pipeline`
    is set, this argument will be ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering interesting files and directories on various web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web application firewalls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Abusing mod_userdir to enumerate user accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing default credentials in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web servers vulnerable to slowloris denial of service attacks*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if an HTTP proxy is open
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP proxies are used to make requests through their addresses, therefore hiding
    our real IP address from the target. Detecting them is important if you are a
    system administrator who needs to keep the network secure, or an attacker who
    spoofs his real origin.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to use Nmap to detect an open HTTP proxy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The results include the HTTP methods that were successfully tested:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use the argument `--script http-open-proxy -p8080` to launch the NSE script
    `http-open-proxy` if a web server is found running on port `8080`, a common port
    for HTTP proxies.
  prefs: []
  type: TYPE_NORMAL
- en: The NSE script `http-open-proxy` was submitted by Arturo "Buanzo" Busleiman
    and it was designed to detect open proxies, as its name indicates. By default
    it requests [google.com](http://google.com), [wikipedia.org](http://wikipedia.org),
    and [computerhistory.org](http://computerhistory.org), and looks for a known text
    pattern to determine if there is an open HTTP proxy running on the target web
    server.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may request a different URL and specify the pattern that will be returned
    if the connection is successful by using the script parameters `http-open-proxy.url`
    and `http-open-proxy.pattern`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests that use Nmap''s
    default HTTP user agent. You can use a different HTTP User Agent by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering interesting files and directories on web various servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web application firewalls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing HTTP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Abusing mod_userdir to enumerate user accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing default credentials in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing WordPress installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing Joomla! installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding SQL injection vulnerabilities in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web servers vulnerable to slowloris denial of service attacks*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering interesting files and directories on various web servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the common tasks during penetration tests that cannot be done manually
    is file and directory discovery. There are several tools made for this task, but
    Nmap really shines with its robust database that covers interesting files, such
    as READMEs, database dumps, and forgotten configuration backups; common directories,
    such as administration panels or unprotected file uploaders; and even attack payloads
    to exploit directory traversals in common, vulnerable web applications.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to use Nmap for web scanning in order to discover
    interesting files, directories, and even vulnerable web applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The results will include all of the interesting files, directories, and applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p80 --script http-enum` tells Nmap to initiate the script `http-enum`
    if a web server is found on port 80\. The script `http-enum` was originally submitted
    by Ron Bowes and its main purpose was directory discovery, but the community has
    been adding new fingerprints to include other interesting files, such as version
    files, READMEs, and forgotten database backups. I've also added over 150 entries
    that identify vulnerable web applications from the last two years, and new entries
    are added constantly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The fingerprints are stored in the file `http-fingerprints.lua` in `/nselib/data/`,
    and they are actually LUA tables. An entry looks like something like following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You may add your own entries to this file or use a different fingerprint file
    by using the argument `http-enum.fingerprintfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, `http-enum` uses the root directory as the base path. To set a
    different base path, use the script argument `http-enum.basepath`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To display all the entries that returned a status code that could possibly
    indicate a page exists, use the script argument `http-enum.displayall`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different HTTP User Agent by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: HTTP pipelining
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some web servers allow the encapsulation of more than one HTTP request in a
    single packet. This may speed up the execution of an NSE HTTP script, and it is
    recommended that it is used if the web server supports it. The HTTP library, by
    default, tries to pipeline 40 requests and automatically adjusts that number according
    to the traffic conditions, based on the `Keep-Alive` header.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can use the argument `http.max-pipeline` to set the maximum
    number of HTTP requests to be added to the pipeline. If the script parameter `http.pipeline`
    is set, this argument will be ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Brute forcing HTTP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Abusing mod_userdir to enumerate user accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing default credentials in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing WordPress installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing Joomla! installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing HTTP authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many home routers, IP webcams, and even web applications still rely on HTTP
    authentication these days, and penetration testers need to try a word list of
    weak passwords to make sure the system or user accounts are safe. Now, thanks
    to the NSE script `http-brute`, we can perform robust dictionary attacks against
    HTTPAuth protected resources.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to perform brute force password auditing against web servers
    that are using HTTP authentication.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following Nmap command to perform brute force password auditing against
    a resource protected by HTTP''s basic authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The results contain all of the valid accounts that were found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p80 --script http-brute` tells Nmap to launch the `http-brute`
    script against the web server running on port 80\. This script was originally
    committed by Patrik Karlsson, and it was created to launch dictionary attacks
    against URIs protected by HTTP's basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: The script `http-brute` uses, by default, the files `usernames.lst` and `passwords.lst`
    located at `/nselib/data/` to try each password, for every user, to hopefully
    find a valid account.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The script `http-brute` depends on the NSE libraries `unpwdb` and `brute`. These
    libraries have several script arguments that can be used to tune the auditing
    for your brute force password.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use different username and password lists, set the arguments `userdb` and
    `passdb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To quit after finding one valid account, use the argument `brute.firstOnly`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, `http-brute` uses Nmap''s timing template to set the following
    timeout limits:'
  prefs: []
  type: TYPE_NORMAL
- en: '-T3,T2,T1: 10 minutes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '-T4: 5 minutes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '-T5: 3 minutes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For setting a different timeout limit, use the argument `unpwd.timelimit`.
    To run it indefinetly, set it to `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different User Agent value by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: HTTP pipelining
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some web servers allow the encapsulation of more than one HTTP request in a
    single packet. This may speed up the execution of an NSE HTTP script, and it is
    recommended that it is used if the web server supports it. The HTTP library, by
    default, tries to pipeline 40 requests and auto adjusts that number according
    to the traffic conditions, based on the `Keep-Alive` header.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can use the argument `http.max-pipeline` to set the maximum
    number of HTTP requests to be added to the pipeline. If the script parameter `http.pipeline`
    is set, this argument will be ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Brute modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The brute library supports different modes that alter the combinations used
    in the attack. The available modes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user`: In this mode, for each user listed in `userdb`, every password in `passdb`
    will be tried.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`pass`: In this mode, for each password listed in `passdb`, every user in `usedb`
    will be tried.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`creds`: This mode requires the additional argument `brute.credfile`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering interesting files and directories on various web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web application firewalls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Abusing mod_userdir to enumerate user accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing default credentials in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing WordPress installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing Joomla! installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web servers vulnerable to slowloris denial of service attacks*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abusing mod_userdir to enumerate user accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache's module `UserDir` provides access to the user directories by using URIs
    with the syntax `/~username/`. With Nmap we can perform dictionary attacks and
    determine a list of valid usernames on the web server.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to make Nmap perform brute force attacks to enumerate
    user accounts in Apache web servers, with `mod_userdir` enabled.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To try to enumerate valid users in a web server with `mod_userdir`; use Nmap
    with these arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the usernames that were found will be included in the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p80 --script http-userdir-enum` launches the NSE script `http-userdir-enum`
    if a web server is found on port 80 (`-p80`). Apache web servers with `mod_userdir`
    allow access to user directories by using URIs such as [http://domain.com/~root/](http://domain.com/~root/),
    and this script helps us to perform dictionary attacks to enumerate valid users.
  prefs: []
  type: TYPE_NORMAL
- en: First, the script queries a non-existent directory to record the status response
    of an invalid page. Then it tries every word in the dictionary file, testing URIs
    and looking for an HTTP status code 200 or 403 that will indicate a valid username.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The script `http-userdir-enum` uses, by default, the word list `usernames.lst`
    located at `/nselib/data/`, but you can use a different file by setting the argument
    `userdir.users`, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different User Agent value by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: HTTP pipelining
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some web servers allow the encapsulation of more than one HTTP request in a
    single packet. This may speed up the execution of an NSE HTTP script, and it is
    recommended that it is used if the web server supports it. The HTTP library, by
    default, tries to pipeline 40 requests and auto adjusts that number according
    to the traffic conditions, based on the `Keep-Alive` header.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can use the argument `http.max-pipeline` to set the maximum
    number of HTTP requests to be added to the pipeline. If the script parameter `http.pipeline`
    is set, this argument will be ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Discovering interesting files and directories on various web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web application firewalls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing HTTP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing default credentials in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing WordPress installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing Joomla! installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing default credentials in web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Default credentials are often forgotten in web applications and devices. Nmap's
    NSE script `http-default-accounts` automates the process of testing default credentials
    in popular web applications, such as Apache Tomcat Manager, Cacti, and even the
    web management interfaces of home routers.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to automatically test default credential access in
    several web applications by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To automatically test default credential access in the supported applications,
    use the following Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The results will indicate the application and default credentials if successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We initiate the NSE script `http-default-accounts` (`--script http-default-accounts`)
    if a web server is found on port 80 (`-p80`).
  prefs: []
  type: TYPE_NORMAL
- en: 'I developed this NSE script to save time during web penetration tests, by automatically
    checking if system administrators have forgotten to change any default passwords
    in their systems. I''ve included a few fingerprints for popular services, but
    this script can be improved a lot by supporting more services. I encourage you
    to submit new fingerprints to its database, if you have access to a service commonly
    left with default credential access. The supported services so far are:'
  prefs: []
  type: TYPE_NORMAL
- en: Cacti
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Tomcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Axis2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arris 2307 routers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cisco 2811 routers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The script detects web applications by looking at known paths and initiating
    a login routine using the stored, default credentials. It depends on a fingerprint
    file located at `/nselib/data/http-default-accounts.nse`. Entries are LUA tables
    and they look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Each fingerprint entry must have the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This field specifies a descriptive service name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`category`: This field specifies a category needed for less intrusive scans.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`login_combos`: This field specifies an LUA table of default credentials used
    by the service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`paths`: This field specifies an LUA table of paths where a service is commonly
    found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`login_check`: This field specifies a login routine of the web service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For less intrusive scans, filter out probes by category by using the script
    argument `http-default-accounts.category`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The available categories are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`web`: This category manages web applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`router`: This category manages interfaces of routers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`voip`: This category manages VOIP devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`security`: This category manages security-related software'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This script uses the root folder as the base path by default, but you can set
    a different one by using the argument `http-default-accounts.basepath`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The default fingerprint file is located at `/nselib/data/http-default-accounts-fingerprints.lua`,
    but you can use a different file by specifying the argument `http-default-accounts.fingerprintfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different User Agent value by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering interesting files and directories in various web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web application firewalls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing HTTP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Abusing mod_userdir to enumerate user accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing WordPress installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing Joomla! installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding SQL injection vulnerabilities in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute-force password auditing WordPress installations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WordPress is a widely known **CMS** (**Content Management System**) that is
    used in many industries. Nmap now includes its own NSE script to help pentesters
    launch dictionary attacks and find accounts using weak passwords that could compromise
    the application's integrity.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to perform brute force password auditing against WordPress
    installations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To find accounts with weak passwords in WordPress installations, use the following
    Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the valid accounts that were found will be shown in the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p80 –script http-wordpress-brute` initiates the NSE script `http-wordpress-brute`
    if a web server is found on port 80 (`-p80`). I developed this script to save
    me from having to set the WordPress URI and the HTML variable names for the usernames
    and passwords, when using `http-brute` against WordPress installations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This script uses the following default variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`uri`: `/wp-login.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uservar`: `log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passvar`: `pwd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set the number of threads, use the script argument `http-wordpress-brute.threads`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If the server has virtual hosting, set the host field by using the argument
    `http-wordpress-brute.hostname`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'To set a different login URI, use the argument `http-wordpress-brute.uri`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'To change the name of the `POST` variable that stores the usernames and passwords,
    set the arguments `http-wordpress-brute.uservar` and `http-wordpress-brute.passvar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different User Agent value by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Brute modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Brute library supports different modes that alter the combinations used
    in the attack. The available modes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user`: In this mode, for each user listed in `userdb`, every password in `passdb`
    will be tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '`pass`: In this mode, for each password listed in `passdb`, every user in `usedb`
    will be tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '`creds`: This mode requires the additional argument `brute.credfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering interesting files and directories on various web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web application firewalls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing HTTP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Abusing mod_userdir to enumerate user accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing default credentials in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing Joomla! installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding SQL injection vulnerabilities in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web servers vulnerable to slowloris denial of service attacks*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute-force password auditing Joomla! installations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joomla! is a very popular CMS that is used for many different purposes, including
    e-commerce. Detecting user accounts with weak passwords is a common task for penetration
    testers, and Nmap helps with that by using the NSE script `http-joomla-brute`.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to perform brute force password auditing against Joomla!
    installations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the valid accounts that were found will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p80 –script http-joomla-brute` launches the NSE script `http-joomla-brute`
    if a web server is found on port 80 (`-p80`). I developed this script to perform
    brute force password auditing against Joomla! installations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script `http-joomla-brute` uses the following default variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`uri`: `/administrator/index.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uservar`: `username`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passvar`: `passwd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Set the thread number with the argument `http-joomla-brute.threads` by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the `Host` field in the HTTP requests, use the script argument `http-joomla-brute.hostname`,
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Set a different login URI by specifying the argument `http-joomla-brute.uri`
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'To change the name of the `POST` variable that stores the usernames and passwords,
    set the arguments `http-joomla-brute.uservar` and `http-joomla-brute.passvar`
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different User Agent value by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Brute modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Brute library supports different modes that alter the combinations used
    in the attack. The available modes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user`: In this mode, for each user listed in `userdb`, every password in `passdb`
    will be tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '`pass`: In this mode, for each password listed in `passdb`, every user in `usedb`
    will be tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '`creds`: This mode requires the additional argument `brute.credfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering interesting files and directories on various web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing HTTP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Abusing mod_userdir to enumerate user accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing default credentials in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing WordPress installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web servers vulnerable to slowloris denial of service attacks*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting web application firewalls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web servers are often protected by packet filtering systems that drop or redirect
    suspected malicious packets. Web penetration testers benefit from knowing that
    there is a traffic filtering system between them and the target application. If
    that is the case, they can try more rare or stealthy techniques to try to bypass
    the **Web Application Firewall (WAF)** or **Intrusion Prevention System (IPS)**.
    It also helps them to determine if a vulnerability is actually exploitable in
    the current environment.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to use Nmap to detect packet filtering systems
    such as a Web Application Firewall or an Intrusion Prevention System.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To detect a Web Application Firewall or Intrusion Prevention System:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The script `http-waf-detect` will let you know if a packet filtering system
    was detected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p80 --script http-waf-detect` initiates the NSE script `http-waf-detect`
    if a web server is found running on port 80\. I developed `http-waf-detect` to
    determine if HTTP requests with malicious payloads were being filtered by web
    application firewalls (WAFs) or intrusion prevention systems (IPSs).
  prefs: []
  type: TYPE_NORMAL
- en: The script works by saving the status code, and optionally the page body, of
    a safe HTTP `GET` request and comparing it with requests containing attack payloads
    for the most common web application vulnerabilities. Because each malicious payload
    is stored in an odd variable name, it is really unlikely that it is used by the
    web application, and only packet filtering systems would react and alter any of
    the returned status codes, to maybe receive an HTTP status code 403 (Forbidden)
    or the page content.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To detect changes in the response body, use the argument `http-waf-detect.detectBodyChanges`.
    I recommend that you enable it when dealing with pages with little dynamic content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'To include more attack payloads, use the script argument `http-waf-detect.aggro`.
    This mode generates more HTTP requests but can also trigger more products:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'To set a different URI for the probes, set the argument `http-waf-detect.uri`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different User Agent value by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: HTTP pipelining
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some web servers allow the encapsulation of more than one HTTP request in a
    single packet. This may speed up the execution of an NSE HTTP script, and it is
    recommended that it is used if the web server supports it. The HTTP library, by
    default, tries to pipeline 40 requests and automatically adjusts that number according
    to the traffic conditions, based on the `Keep-Alive` header.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can use the argument `http.max-pipeline` to set the maximum
    number of HTTP requests to be added to the pipeline. If the script parameter `http.pipeline`
    is set, this argument will be ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering interesting files and directories on various web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing HTTP authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Abusing mod_userdir to enumerate user accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing default credentials in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing WordPress installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute-force password auditing Joomla! installations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding SQL injection vulnerabilities in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web servers vulnerable to slowloris denial of service attacks*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting possible XST vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cross Site Tracing (XST) vulnerabilities** are caused by the existence of
    **Cross Site Scripting vulnerabilities (XSS)** in web servers where the HTTP method
    `TRACE` is enabled. This technique is mainly used to bypass cookie restrictions
    imposed by the directive `httpOnly`. Pentesters can save time by using Nmap to
    quickly determine if the web server has the method `TRACE` enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to use Nmap to check if `TRACE` is enabled and therefore
    vulnerable to possible Cross Site Tracing (XST) vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'If `TRACE` is enabled and accessible, we should see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, `http-trace` won''t return anything and `TRACE` will not be listed
    under `http-methods`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p80 --script http-methods,http-trace --script-args http-methods.retest`
    tells Nmap to launch the NSE scripts `http-methods` and `http-trace` on port 80
    if a web server is detected, and to individually test each of the methods returned
    by the HTTP `OPTIONS` request.
  prefs: []
  type: TYPE_NORMAL
- en: '`http-methods` was submitted by Bernd Stroessenreuther, and it sends an `OPTIONS`
    request to enumerate the methods supported by a web server.'
  prefs: []
  type: TYPE_NORMAL
- en: The script `http-trace` was written by me, and its purpose is to detect the
    availability of the HTTP method `TRACE`. It simply sends a `TRACE` request and
    looks for a status 200 code, or the same request is echoed back by the server.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By setting the script argument `http-methods.retest`, we can test each HTTP
    method listed by `OPTIONS`, and analyze the return value to conclude if `TRACE`
    is accessible and not blocked by a firewall or configuration rules.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the method `TRACE` could be enabled and not listed by `OPTIONS`,
    so it is important to run both of the scripts `http-methods` and `http-trace`
    to get better results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the arguments `http-trace.path` and `http-methods.url-path` to request
    a path different than the root folder ( `/` ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different HTTP User Agent by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Checking if an HTTP proxy is open* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering interesting files and directories on various web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web application firewalls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding SQL injection vulnerabilities in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web servers vulnerable to slowloris denial of service attacks*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting Cross Site Scripting vulnerabilities in web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cross Site Scripting vulnerabilities allow attackers to spoof content, steal
    user cookies, and even execute malicious code on the user's browsers. There are
    even advanced exploitation frameworks such as `Beef` that allow attackers to perform
    complex attacks through JavaScript hooks. Web pentesters can use Nmap to discover
    these vulnerabilities in web servers in an automated manner.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to find Cross Site Scripting vulnerabilities in web applications
    with Nmap NSE.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To scan a web server looking for files vulnerable to Cross Site Scripting (XSS),
    we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the files suspected to be vulnerable will be listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The script output will also include the vulnerable parameter and which characters
    were returned without being filtered or encoded.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are working with a PHP server, run the following Nmap command instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Against a web server with vulnerable files, you will see a similar output to
    the one shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The script `http-unsafe-output-escaping` was written by Martin Holst Swende,
    and it spiders a web server to detect the possible problems with the way web applications
    return output based on user input. The script inserts the following payload into
    all the parameters it finds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: The payload shown above is designed to detect the characters `> " '`, which
    could cause Cross Site Scripting vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'I wrote the script `http-phpself-xss` to detect the Cross Site Scripting vulnerabilities
    caused by the lack of sanitation of the `$_SERVER["PHP_SELF"'']` script. The script
    will crawl a web server to find all of the files with a `.php` extension, and
    append the following payload to each URI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: If the same pattern is reflected on the website, it means that a page is using
    the variable `$_SERVER["PHP_SELF"]` unsafely.
  prefs: []
  type: TYPE_NORMAL
- en: 'The official documentation of the scripts `http-unsafe-output-escaping` and
    `http-phpself-xss` can be found at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://nmap.org/nsedoc/scripts/http-phpself-xss.html](http://nmap.org/nsedoc/scripts/http-phpself-xss.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://nmap.org/nsedoc/scripts/http-unsafe-output-escaping.html](http://nmap.org/nsedoc/scripts/http-unsafe-output-escaping.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scripts `http-unsafe-output-escaping` and `http-phpself-xss` depend on the
    library `httpspider`. This library can be configured to increase its coverage
    and overall behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the library will only crawl 20 pages by default, but we can set
    the argument `httpspider.maxpagecount` accordingly for bigger sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Another interesting argument is `httpspider.withinhost`, which limits the web
    crawler to a given host. This is turned on by default, but if you need to test
    a collection of web applications linked to each other, you could use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also set the maximum depth of directories we want to cover. By default
    this value is only `3`, so if you notice that the web server has deeply nested
    files, especially when "pretty urls" such as [/blog/5/news/comment/](http:///blog/5/news/comment/)
    are implemented, I recommend that you update this library argument by using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The official documentation for the library can be found at [http://nmap.org/nsedoc/lib/httpspider.html](http://nmap.org/nsedoc/lib/httpspider.html).
  prefs: []
  type: TYPE_NORMAL
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different User Agent value by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: HTTP pipelining
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some web servers allow the encapsulation of more than one HTTP request in a
    single packet. This may speed up the execution of an NSE HTTP script, and it is
    recommended that it is used if the web server supports it. The HTTP library, by
    default, tries to pipeline 40 requests, and automatically adjusts that number
    according to the traffic conditions, based on the `Keep-Alive` header.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can use the argument `http.max-pipeline` to set the maximum
    number of HTTP requests to be added to the pipeline. If the script parameter `http.pipeline`
    is set, this argument will be ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web application firewalls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting SQL injection vulnerabilities in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web servers vulnerable to slowloris denial of service attacks*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding SQL injection vulnerabilities in web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL injection vulnerabilities are caused by the lack of sanitation of user input,
    and they allow attackers to execute DBMS queries that could compromise the entire
    system. This type of web vulnerability is very common, and because each script
    variable must be tested, checking for such vulnerabilities can be a very tedious
    task. Fortunately, we can use Nmap to quickly scan a web server looking for vulnerable
    files for SQL injection.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to find SQL injection vulnerabilities in web applications
    with Nmap NSE.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To scan a web server looking for files vulnerable to SQL injection by using
    Nmap, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'All vulnerable files will be shown with the arguments that are possibly vulnerable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The script `http-sql-injection.nse` was written by Eddie Bell and Piotr Olma.
    It crawls a web server looking for forms and URIs with parameters, and attempts
    to find SQL injection vulnerabilities. The script determines if the server is
    vulnerable by inserting SQL queries that are likely to cause an error in the application.
    This means that the script will not detect any blind SQL injection vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: The error messages that the script matches are read from an external file located
    by default at `/nselib/data/http-sql-errors.lst`. This file was taken from the
    `fuzzdb` project ([http://code.google.com/p/fuzzdb/](http://code.google.com/p/fuzzdb/)),
    and users may choose an alternate file if needed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `httpspider` library behavior can be configured via library arguments.
    By default it uses pretty conservative values to save resources, but during a
    comprehensive test, we need to tweak several of them to achieve optimum results.
    For example, the library will only crawl 20 pages by default, but we can set the
    argument `httpspider.maxpagecount` accordingly for bigger sites, as shown in the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Another interesting argument is `httpspider.withinhost`, which limits the web
    crawler to a given host. This is turned on by default, but if you need to test
    a collection of web applications linked to each other, you could use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also set the maximum depth of directories we want to cover. By default
    this value is only `3`, so if you notice that the web server has deeply nested
    files, especially when "pretty urls" such as `/blog/5/news/comment/` are implemented,
    I recommend that you update this library argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The official documentation for the library can be found at [http://nmap.org/nsedoc/lib/httpspider.html](http://nmap.org/nsedoc/lib/httpspider.html).
  prefs: []
  type: TYPE_NORMAL
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different User Agent value by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: HTTP pipelining
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some web servers allow the encapsulation of more than one HTTP request in a
    single packet. This may speed up the execution of an NSE HTTP script, and it is
    recommended that this is used if the web server supports it. The HTTP library,
    by default, tries to pipeline 40 requests and automatically adjusts that number
    according to the traffic conditions, based on the `Keep-Alive` header.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can use the argument `http.max-pipeline` to set the maximum
    number of HTTP requests to be added to the pipeline. If the script parameter `http.pipeline`
    is set, this argument will be ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web application firewalls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting Cross Site Scripting vulnerabilities in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web servers vulnerable to slowloris denial of service attacks*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting web servers vulnerable to slowloris denial of service attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The denial of service attack is very popular these days, and Nmap can help pentesters
    detect web servers that are vulnerable to these types of attacks. The "slowloris
    denial of service" technique is presumed to have been discovered by Adrian Ilarion
    Ciobanu back in 2007, but Rsnake released the first tool in DEFCON 17 proving
    that it affects several products, including Apache 1.x, Apache 2.x, dhttpd, and
    possibly many other web servers.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to detect if a web server is vulnerable to slowloris DoS
    attacks by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To launch a slowloris attack against a remote web server with Nmap, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'The results include some attack statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p80 --script http-slowloris` initiates the NSE script `http-slowloris`
    if a web server is detected on port 80 (`-p80`).
  prefs: []
  type: TYPE_NORMAL
- en: The slowloris DoS technique works differently from other denial of service techniques,
    where the communication channels are flooded with requests. Slowloris uses minimum
    bandwidth and does not consume a lot of resources, by sending the minimum amount
    of information to keep a connection from closing.
  prefs: []
  type: TYPE_NORMAL
- en: The official write-up by RSnake can be found at [http://ha.ckers.org/slowloris/](http://ha.ckers.org/slowloris/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The NSE script was written by Aleksandar Nikolic and Ange Gutek. The official
    documentation can be found at the following url:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://nmap.org/nsedoc/scripts/http-slowloris.html](http://nmap.org/nsedoc/scripts/http-slowloris.html)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set the time between each HTTP header, use the script argument `http-slowloris.send_interval`
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the slowloris attack for a certain period of time, use the script argument
    `http-slowloris.timelimit` as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternately, there is an argument that can be used to tell Nmap to attack the
    target indefinitely, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'There is another NSE script to check for vulnerable web servers named `http-slowloris-check`
    written by Aleksandar Nikolic. This script only sends two requests, and it uses
    a clever way to detect vulnerable servers by reading and comparing the connection
    timeouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can use a different User Agent value by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Detecting possible XST vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering interesting files and directories on various web servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting web application firewalls* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing default credentials in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding SQL injection vulnerabilities in web applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
