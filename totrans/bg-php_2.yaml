- en: Chapter 2. Arrays and Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered variables and data types along with the
    different operators. We also covered how to control the flow of programs using
    conditionals. In this chapter, we will focus on how to store multiple values using
    arrays and how to control the flow using loops. The basic idea of an array is
    that it is a variable type, allowing one to store multiple items within a single
    `container`.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you wanted to store the names of all the employees working in
    a company under the same variable, an array would help you do that. Loops are
    used when we want to run the same block of code multiple times. This saves a lot
    of work for the developer by reusing the pre-defined code block. These two concepts
    are at the core of almost every PHP-based web application and website on the web
    today.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement one-dimensional and multidimensional arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify the difference between indexed and associative arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform different operations on arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement various types of loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will talk about the various types of arrays and then look
    at some common operations with them.
  prefs: []
  type: TYPE_NORMAL
- en: Indexed Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Indexed arrays are the most common types of arrays that you will see, and they
    can be defined as either prepopulated or empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'An empty array can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that `$the_array` is a variable. You can use any other variable that you
    like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to use the shortcut syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to initiate an array with values, you can do so as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When you initialize an array with prepopulated values, each element gets a numeric
    index, starting at 0\. So, in the preceding example, the index for Jill will be
    0, the index for Michael will be 1, the index for John will be 2, and the index
    for Sally will be 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to print out the first index of the `students` array, you can use
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Usually, when you use an array, you want to add to it throughout the course
    of your program. This can be done in one of two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `append` shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Or the `array`_`push` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Typically, the shortcut method is used by developers; if you want to push multiple
    records to an array at a time, you can use the `array_push` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, you''ll have an element in an array that needs to be removed. To
    remove an element from an array, use the `unset` function. In the following example,
    we remove "Tom" from the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The last section that we will discuss before moving on is updating an element.
    To do so, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Associative Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next is associative arrays, better known as key value pairs. With associative
    arrays, you can use text-based keys to store your values, which can be helpful
    in specific cases. For example, if we take one of the students from the preceding
    examples (in this case, Michael), we can store his `age`, `gender`, and `favorite
    color,` as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to access a specific value in the array, you can use the `key`.
    For example, if we want to print Michael''s age, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding data to an `associative` array is just as easy as adding data to an
    indexed array. You can simply use the key and assign a value. Let''s suppose that
    we want to add an occupation to Michael''s array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To remove an element from an associative array, follow the same steps that we
    did with the `indexed` array, but this time, use the key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s remove the occupation that we added in the last step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Working with Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to include `name`, `age`, `location`, and `education
    level`. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your code editor and create a new file, `arrays.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the new file, create your open and close `php` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to create a new variable, called `$myinfo,` and initialize
    it with a new array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then, we are going to populate the new array with our `name`, `age`, `location`,
    and `education level`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll print our data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your working directory in the Terminal, and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get a result as displayed in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Converting a String into an Array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, when you''re building a PHP-based application, you don''t instantiate
    an array with a predefined set of data - which is the case when building a utility
    script, for example. Let''s suppose that you have a variable with the string version
    of a filename, and you want to get the name of the file without the extension.
    This task can be done easily, by using the `explode` function. The `explode` function
    takes two arguments: the delimiter, and the string that you want to convert into
    an array. `Explode` function takes two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we define a filename variable, and then, using the
    explode function, we break the string into its parts with the period delimiter.
    The `$filename_parts` variable contains an array of two elements, the first being
    the string `myexamplefile`, and the second containing the string `txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing this, we can print out the filename by accessing the 0 index of the
    array of string parts.
  prefs: []
  type: TYPE_NORMAL
- en: Merging an Array into a String
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Along with the `explode` function, PHP also gives us a function that allows
    us to do the exact opposite: the `implode` function. When you want to take an
    existing array and convert it into a string, you can use the implode function
    to define a delimiter and pass it the array; you''ll get a single string as a
    result.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to the `explode` example. Suppose that we have a filename and
    want to append some other string to the end of it before saving it back to a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code example, we start off by using the explode function to
    break our original filename into its parts. We then access the filename portion
    and append the string _v1 to the end of it. Using the implode function, we recombine
    the filename using its parts, and finally, we print it back to the screen for
    the user to see.
  prefs: []
  type: TYPE_NORMAL
- en: Slicing Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another `array_slice` function; by default, the function requires only two
    arguments, but it can take four. The two required arguments are the array itself
    and the starting point for the new array. The two optional arguments are the length
    of (or number of elements to include in) the new array and the preserve option.
    The preserve option allows you to decide whether the current array elements should
    remain the same, or be reordered after the split. Here''s a basic usage example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, when we run the fruit array through `array_slice,`
    we will get an array containing oranges, lemons, and limes.
  prefs: []
  type: TYPE_NORMAL
- en: Sorting an Array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sorting is another important tool for building certain types of programs. One
    of the sorting functions that you'll often see in PHP is the `ksort` function.
    `ksort` allows you to pass an array in as an argument, and then sort it in ascending
    order.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of how to use it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we have an array of people. Once you put the people
    array through the `ksort` function, you should see the names in alphabetical order.
  prefs: []
  type: TYPE_NORMAL
- en: Multidimensional Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next type is the `multidimensional` array. Multidimensional arrays are
    simply arrays within arrays. In our previous examples of arrays, we stored a student''s
    name. What happens when we want to store multiple details for a specific student?
    This is where multidimensional arrays come in. Let''s look at how we can define
    a student array that also stores the student''s `gender` and `favorite` `color`:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, open the `Lesson 2.php` from the code files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to access a student''s information, we can use the following key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example will print out Jill's age. With multidimensional arrays,
    we update element values in pretty much the same way we do when using one-dimensional
    arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to change Jill''s age to `21,` we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Including an Array of Hobbies in Our Existing Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to expand on the previous example to include
    an array of hobbies:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your code editor and create a new file, `multidimensional.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the new file, create your open and close `php` tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new variable called `$user,` and initialize it with a new array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Populate the new array with two main sections: `info` and `hobbies`. In the
    info array, store the `name`, `age`, `location,` and `education level`, and in
    the `hobbies` array, we will store three hobbies.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 2.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we''ll print our data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 2.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your working directory in the Terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You will get a result based on the input that we provided in the preceding array.
  prefs: []
  type: TYPE_NORMAL
- en: Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Loops are powerful tools within any programming language. They allow you to
    write code that can be executed a specific number of times, based on a given condition.
    In this section, you will learn about the various loops that are available to
    you, such as for loops, foreach loops, `while` loops, and `do-while` loops.
  prefs: []
  type: TYPE_NORMAL
- en: for Loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start our exploration of loops with the `for` loop. It is known to
    be the most complex loop structure, and it is used when you know how many times
    you need a block of code to run. The structure of a for loop is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The steps to create the `for` loop are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize the starting count variable - usually, it will start at `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide an evaluation condition that resolves to either `true` or `false`. The
    loop will continue if the condition is `true`, and will exit (or break) when the
    condition is `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increment the value by a specific number. Typically, it would be incremented
    by `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s a complete example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Combining Loops and Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to explore how to combine loops and arrays. Here
    are the steps to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your code editor and create a new file, `forloop.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the new file, create your open and close `php` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we create a new variable called `$food,` and initialize it with a new
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we populate the new array with food names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we loop through our array and print our data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The count function returns the number of elements within an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your working directory in the Terminal, and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: while Loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next loop that we will explore is the while loop. while loops are used
    when you want to cycle through a block of code until a specific condition is met.
    while loops are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'while loops are pretty simple, as they only require a condition to run. The
    loop will continue until the condition is false:'
  prefs: []
  type: TYPE_NORMAL
- en: '![while Loops](graphics/2_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We take the preceding `count` variable and assign it the value of 1\. The `while`
    condition checks to see whether the `count` variable is less than 25, and will
    break once the `counter` variable equals 25\. Inside of the while function, we
    `echo` out the current count, and then increment the `count` variable by 1.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the while Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will build a `while` function which will iterate while
    the `counter` is less than 30\. Follow these steps::'
  prefs: []
  type: TYPE_NORMAL
- en: Open your code editor and create a new file, `while.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the new file, create your open and close `php` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a `counter` function and initialize it with the number 1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can create a `while` loop that will echo out the current count, and
    then increase `counter` by 1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your working directory in the Terminal, and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Do-While Loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do-while loops are just like while loops, but instead of running the condition
    at the beginning of the loop, they check after the internal code block has been
    run. The idea is that if you need the block of code to run at least once, you
    use this loop instead of a while loop.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do-while loops are also called exit controlled loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do-while loops are represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to modify the while loop from what precedes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Conversion of a while Loop to a do-while Loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to copy the previous example, but convert the
    while loop to a do-while loop so that you can see the differences in how they
    function. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file and call it `dowhile.php.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, open up the `while.php` file and copy the contents into the `dowhile.php`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are now going to modify the `while` function to resemble the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your working directory in the Terminal, and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: foreach Loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'foreach loops are next on our list. foreach loops are designed to give programmers
    a simple way to iterate through an array. This loop will only work with arrays
    and objects, which you will learn about later in this book. There are two syntaxes
    for this loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The first syntax takes a given array and iterates through each element in the
    array, assigning it to the secondary variable. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we define an array filled with students' names. We
    then use the foreach loop to iterate through our `students` array and `echo` out
    each name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second syntax is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In this version of the `for each` function, the given array is iterated through,
    but instead of giving a single element, it gives you both the `key` and the `element`
    itself. Here''s an example of how we''ll use it:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full code snippet, refer to the `Lesson 2.php` file in the code files
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we define a multidimensional array that stores each student's
    age and favorite color and is indexed using the student's name. We then use the
    `foreach` function to iterate through the `students` array and assign each element's
    key to the `name` variable and the student's info to the `info` variable. Within
    the loop, we `echo` out the student's name, along with their age.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Working with the foreach Loop'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's put our understanding of for each loops into practice.
  prefs: []
  type: TYPE_NORMAL
- en: Your manager has asked you to create a PHP script that will calculate how much
    each employee makes per month, based on their given salary.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what you do:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory and name it `monthly_payment`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the new directory, create an `index.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, you''ll define the multidimensional array that will store the employee''s
    name, job title, and salary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, define the `foreach` loop that will iterate through the `employee` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add an `echo` statement that will print the name, title, and calculated
    monthly pay:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The calculator script is now done. If you need to add additional employees,
    it is as easy as adding an additional associative array with the employee's info.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have reached the end of the second chapter. In this chapter, we have seen
    how to declare and define an array and have covered the different types of arrays.
    We saw the various operations that can be performed on an array. We have also
    covered control flow statements such as the for loop, while loop, and do while
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about code reusability using functions
    and classes, taking you one step closer to building your own custom application.
  prefs: []
  type: TYPE_NORMAL
