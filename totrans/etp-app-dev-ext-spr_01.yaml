- en: Chapter 1. Preparing Your Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will install and configure your development environment. The **Rapid
    Application Development** (**RAD**) tool is **NetBeans**, an open source, cross-platform
    **Integrated Development Environment** (**IDE**) that can be used for creating
    visual desktop, mobile, web, and **Service-Oriented Architecture** (**SOA**) applications.
    NetBeans officially supports Java, PHP, JavaScript, and C/C++ programming languages,
    but it is best known for providing a complete toolset for all the latest **Java
    Enterprise Edition** (**Java EE**) standards (currently Java EE 7).
  prefs: []
  type: TYPE_NORMAL
- en: The database of choice for this book is MySQL, the world's most widely used
    open source **Relational Database Management System** (**RDBMS**). MySQL is the
    most popular choice of database for web applications hosted on Linux platforms
    and continues to deliver outstanding performance in a multitude of applications.
    Its small footprint and ease of use makes it perfect for development use on a
    single computer.
  prefs: []
  type: TYPE_NORMAL
- en: The application server used in this book is **GlassFish 4**, which comes bundled
    with the NetBeans download. GlassFish is installed as part of the NetBeans installation,
    and the tight integration between the two makes configuring GlassFish a simple
    process. GlassFish is an open source, production-quality application server that
    implements all the Java EE 7 features. It has enterprise-grade reliability and
    is considered by many to be the best open source application server available.
    GlassFish 4 is the **Reference Implementation** (**RI**) for the Java EE 7 specification,
    a full description of which can be found at [https://glassfish.java.net/downloads/ri/](https://glassfish.java.net/downloads/ri/).
  prefs: []
  type: TYPE_NORMAL
- en: All of these development tools are freely available for PC, Mac, and Linux.
    Each tool has extensive examples, comprehensive tutorials, and online support
    forums available.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that although this chapter focuses on NetBeans, MySQL, and
    GlassFish, it is possible for you to configure any appropriate combination of
    tools that they are familiar with. The development tasks outlined in this book
    can just as easily be followed using Eclipse, Oracle, and JBoss—although some
    described configuration details may require minor modifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the MySQL Database server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the Java SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and configure the NetBeans IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the application project and explore Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the project in GlassFish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL can be downloaded from [http://www.mysql.com/downloads/mysql](http://www.mysql.com/downloads/mysql).
    Select the appropriate MySQL Community server for your operating system and architecture.
    It is important to follow the instructions, making note of installation directories
    and paths for future reference. After downloading and running the setup file,
    you should select the **Developer Default** installation for this book.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing MySQL](img/5457_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the default settings is best unless you are familiar with MySQL. This
    will include setting the default port to `3306`, enabling TCP/IP networking, and
    opening the required firewall port for network access (not strictly required for
    a developer machine where all apps are running on the same environment, but required
    if you are configuring a dedicated MySQL server).
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the environment, it is important to set a root user password during
    the installation process. We will use the root user to connect to the running
    MySQL server to execute commands.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing MySQL](img/5457_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The rest of this book will assume the root user has the password `adminadmin`.
    This is not a very secure password but should be easy to remember!
  prefs: []
  type: TYPE_NORMAL
- en: We recommend that the MySQL server is configured to start when the operating
    system starts. How this is done will depend on your environment, but it is usually
    performed at the end of the **Initial Configuration** action. Windows users will
    have the option to start the MySQL server at system startup. Mac users will need
    to install the **MySQL Startup Item** after the server has been installed.
  prefs: []
  type: TYPE_NORMAL
- en: Should you decide not to start MySQL when the operating system starts, you will
    need to start the MySQL server manually whenever required. How this is done will
    once again depend on your environment, but you should start your server now to
    confirm that the installation was successful.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unix and Linux users will need to install MySQL as appropriate for their operating
    system. This may include the use of **Advanced Packaging Tool (APT**) or **Yet
    another Setup Tool** (**YaST**), or even the installation of MySQL from source.
    There are detailed instructions for various operating systems found at [http://dev.mysql.com/doc/refman/5.7/en/installing.html](http://dev.mysql.com/doc/refman/5.7/en/installing.html).
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the configuration process, you will have a running MySQL server
    ready to be used in [Chapter 2](ch02.html "Chapter 2. The Task Time Tracker Database"),
    *The Task Time Tracker Database*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Java SE Development Kit (JDK)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Java** **SE Development Kit** (**JDK**) can be downloaded from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
    You may choose to skip this step if you already have the JDK 7 Update 45 (or later)
    installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not select the NetBeans bundle as it does not contain the GlassFish server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Java SE Development Kit (JDK)](img/5457_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will need to accept the JDK 7 License Agreement before selecting the appropriate
    distribution. After downloading the JDK, run the setup program and follow the
    instructions and prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the NetBeans IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NetBeans can be downloaded from [https://netbeans.org/downloads/](https://netbeans.org/downloads/).
    The distribution requires a valid JDK to be already installed on your platform.
    At the time of this writing, I used JDK 7 Update 45, but any JDK 7 (or higher)
    version would be fine. There are several distribution bundles; you will need to
    select the **Java EE** bundle.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the NetBeans IDE](img/5457_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The latest version at the time of this writing was NetBeans 7.4, which introduced
    significant new features, including extended HTML5 and JavaScript support. For
    the first time, NetBeans also included editing and code completion support for
    the Ext JS framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the software, simply download and follow the detailed instructions
    available from the NetBeans website. This will take you through a sequence of
    setup screens as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The GlassFish 4 server is automatically selected. You do not need to install
    Tomcat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the terms in the license agreement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the terms of the JUnit license agreement. JUnit is used for testing in
    [Chapter 5](ch05.html "Chapter 5. Testing the DAO Layer with Spring and JUnit"),
    *Testing the DAO Layer with Spring and JUnit*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the installation path of the NetBeans IDE for future reference. Select
    the appropriate JDK that was installed previously (if there is more than one JDK
    on your system).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the installation path for the GlassFish 4 server for future reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final screen summarizes the installation. Ensure to **Check for Updates**
    before clicking on **Install** to start the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The process may take several minutes depending on your platform and hardware.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the installation is complete, you can run NetBeans for the first time.
    If you had a previous version of NetBeans installed, you may be prompted to **Import
    Settings**. The default opening screen will then be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the NetBeans IDE](img/5457_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The most useful panels can now be opened from the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Projects**: This panel is the main entry point to your project sources. It
    shows a logical view of important project content, grouped into appropriate contexts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Files**: This panel shows the actual file structure of the project node as
    it exists on your filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services**: This panel displays your runtime resources. It shows a logical
    view of important runtime resources such as the servers and databases that are
    registered with the IDE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At this stage, the first two panels will be empty but the **Services** panel
    will have several entries. Opening the **Servers** panel will display the installed
    GlassFish 4 Server as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the NetBeans IDE](img/5457_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Introducing Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apache Maven is a tool that is used for building and managing Java-based projects.
    It is an open source project hosted at [http://maven.apache.org](http://maven.apache.org)
    and comes bundled with the NetBeans IDE. Maven simplifies many steps common to
    all Java development projects and provides numerous features, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The provision of convention over configuration. Maven comes with a series of
    predefined targets for performing certain well-defined tasks including compilation,
    testing, and packaging of projects. All tasks are managed through a single configuration
    file: `pom.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A consistent coding structure and project framework. Each Maven project has
    the same directory structure and location for source files, test files, build
    files, and project resources. This common structure brings us easily up to speed
    with projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A consistent build system with numerous plugins to make common tasks easy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to execute tests as part of the build process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A highly flexible and powerful dependency management system. This allows software
    developers to publish information and share Java libraries through (external or
    remote) Maven repositories hosted on the Internet. Libraries are then downloaded
    and cached locally by Maven for use in the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We encourage you to visit the Maven website to explore the many features available.
    NetBeans will use Maven to create and manage the web application project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Maven Web Application project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A NetBeans project encapsulates all the source code and related components
    required to maintain and develop an application. Navigate to **File** | **New
    Project** from the menu to start the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Maven Web Application project](img/5457_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select **Maven** in the **Categories** listing and **Web Application** from
    the **Projects** listing, as shown in the preceding screenshot, before selecting
    the **Next** button. This will present you with the project configuration screen
    with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project Name**: This specifies the display name of the project in the project
    window. This name is also used to create the project folder and must not contain
    spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our project is called Task Time Tracker. This tool will allow users to manage
    the time spent on different tasks for different projects. The project name field
    is the lowercase, nonspaced translation of the name of the project: `task-time-tracker`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project Location**: This specifies the filesystem root folder where you want
    to store the project metadata and source code. We normally create a project-specific
    folder at the root level of a drive, rather than burying it deep within a folder
    structure under NetBeans. This makes it easier to find and copy files into the
    project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Windows users should create a project folder under `c:\projects`. Mac users
    may wish to replace this with `/Users/{username}/projects` and Unix users with
    `/home/{username}/projects`. The rest of the book will refer to this location
    in all examples as *the project folder*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Project Folder**: The project folder is read-only and generated based on
    the name of the project and the project location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Artifact Id**: This is a read-only Maven-specific property to identify the
    project and is based on the project name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group Id**: This is another Maven property that represents a top-level container
    for multiple artifacts. It usually represents the **Top-Level Domain** (**TLD**)
    of the organization owning the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Group Id** for the project is `com.gieman`, the company of the author.
  prefs: []
  type: TYPE_NORMAL
- en: '**Version**: This is another Maven property that represents the version of
    the artifact. The default version is **1.0-SNAPSHOT**, which we will change to
    `1.0`. As projects evolve and new versions are released, Maven will keep track
    of the different builds based on their versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package**: The IDE will automatically create a Java source package structure
    based on this field. We will use the package `com.gieman.tttracker`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should now have entered the following project details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Maven Web Application project](img/5457_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Next** button to view the final screen. Do not change the default
    GlassFish Server 4.0 and Java EE 7 settings before clicking on the **Finish**
    button. You will now see activity in the **Project Creation** output tab as the
    project is created and configured. Opening the **Project** and **Files** panels
    will allow you to see the project structure:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Maven Web Application project](img/5457_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-clicking on the project name in either tab will allow you to select the
    **Properties** for the project. This will display all properties and paths relevant
    to the project under different categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Maven Web Application project](img/5457_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should not need to change these properties for the remainder of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the POM and dependency management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each Maven project has a `pom.xml` configuration file at the root level of
    the NetBeans project. Click on the **Files** view and double-click on the `pom.xml`
    file to open it in the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the POM and dependency management](img/5457_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should see the **Navigator** window open in the bottom-left panel. This
    displays an outline of the file being edited and is very helpful when navigating
    through large files. Double-clicking on a node in the **Navigator** will position
    the cursor at the appropriate line in the editor.
  prefs: []
  type: TYPE_NORMAL
- en: If the **Navigator** window does not open (or has been closed), you can open
    it manually by navigating to **Window** | **Navigating** | **Navigator** from
    the menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Project Object Model (POM**) fully defines the project and all required
    Maven properties and build behaviors. There is only one dependency shown in `pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This dependency identifies that the project requires Java EE 7 for building.
    This entry ensures the full Java EE 7 APIs are available for Java coding in the
    Task Time Tracker project. Our project also requires the Spring Framework, which
    must now be added as additional dependencies. Typing in the editor will result
    in autocompletion help to determine the correct dependencies. After adding the
    Spring Framework `groupId` and `artifactId` entries, as shown in the following
    screenshot, the *Ctrl* + Space bar keyboard shortcut will open the available matching
    entries for the `artifactId` starting with the text `spring`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the POM and dependency management](img/5457_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If this autocomplete list is not available, it may be due to the Maven repository
    being indexed for the first time. In this situation you will then see the following
    screenshot at the bottom of the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the POM and dependency management](img/5457_01_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Be patient and in a few minutes the indexing will be finished and the autocomplete
    will become available. Indexing is required to download available entries from
    the Maven repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'The required Spring Framework components are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-context`: This is the central artifact required for Spring''s dependency
    injection container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-tx`: This is the transaction management abstraction required for implementing
    transactional behavior'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-context-support`: These are various application context utilities,
    including Ehcache, JavaMail, Quartz, and FreeMarker integration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-jdbc`: This is the JDBC data access library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-orm`: This is the **Object-to-Relation-Mapping** (**ORM**) integration
    for JPA development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-instrument`: This is for the weaving of classes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-webmvc`: This is the **Spring Model-View-Controller** (**MVC**) for
    Servlet environments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test`: This is the support for testing Spring applications with JUnit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To add these dependencies using the latest Spring release version (3.2.4) requires
    the following additions to the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Understanding dependency scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final Spring Framework dependency is only required for testing. We can define
    this by adding a `scope` attribute with value `test`. This tells Maven that the
    dependency is only required when running the testing phase of the build and is
    not required for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `javaee-web-api` dependency that was automatically created by NetBeans has
    a scope of `provided`. This means the dependency is not required for deployment
    and is provided by the target server. The GlassFish 4 server itself is the provider
    of this dependency.
  prefs: []
  type: TYPE_NORMAL
- en: If the `scope` attribute has not been included, the dependency JAR will be included
    in the final build. This is the equivalent of providing a scope entry of `compile`.
    As a result, all the Spring Framework dependency JARs will be included in the
    final build file.
  prefs: []
  type: TYPE_NORMAL
- en: A full explanation of the Maven dependency mechanism and scoping can be found
    at [http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html).
  prefs: []
  type: TYPE_NORMAL
- en: Defining Maven properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Spring Framework dependencies defined in `pom.xml` all have the same version
    (3.2.4.RELEASE). This duplication is not ideal, especially when we wish to upgrade
    to a newer version at a later time. Changes would be required in multiple places,
    one for each Spring dependency. A simple solution is to add a property to hold
    the release version value as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This custom property, which we have named `spring.version`, can now be used
    to replace the multiple duplicates as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `${spring.version}` placeholder will then be substituted with the `properties`
    value during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Maven-build plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven build process executes each defined build plugin during the appropriate
    build phase. A full list of build plugins can be found at [http://maven.apache.org/plugins/index.html](http://maven.apache.org/plugins/index.html).
    We will introduce plugins as needed in subsequent chapters, but the default plugins
    created by the NetBeans IDE are of interest now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `maven-compiler-plugin` controls and executes the compilation of Java source
    files. This plugin allows you to specify both the `source` and `target` Java versions
    for compilation as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Changing these values to `1.6` may be required when compiling projects for older
    Java servers running on the earlier versions of Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `maven-war-plugin` builds a WAR file for the project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The default generated WAR filename is `{artifactId}-{version}.war`, which can
    be changed by including the `warName` configuration property. We will be adding
    properties to this plugin when building the project for production release in
    the final chapter. A full list of `maven-war-plugin` options may be found at [http://maven.apache.org/plugins/maven-war-plugin/war-mojo.html](http://maven.apache.org/plugins/maven-war-plugin/war-mojo.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `maven-dependency-plugin` copies dependency JAR files to the defined output
    directory as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is useful to see which JARs are used by the project and to identify what
    transitive dependencies are required (dependencies of dependencies).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will modify this plugin to copy all compile-time dependencies of the project
    to a directory in `${project.build.directory}`. This special build directory is
    under the root folder of the project and is named `target`, the target destination
    of the build process. The updated entry will now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As we are now performing two executions in the single plugin, each execution
    needs its own `<id>`. The second execution, with ID `copy-all-dependencies`, will
    copy all dependent JARs with the scope `compile` to the `target/lib` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the Maven build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The simplest way to execute a build is to click on the **Clean and Build Project**
    button in the toolbar. You can also right-click on the project node in the **Projects**
    tab and select **Clean and Build** from the menu. The build process will then
    execute each defined phase in the POM, resulting in Java code compilation, dependency
    resolution (and copying), and finally, WAR file generation. Opening the target
    directory structure will display the build result as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Executing the Maven build](img/5457_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Even though we have not written a single line of code, the generated WAR file
    `task-time-tracker-1.0.war` can now be deployed to the GlassFish server.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the GlassFish 4 server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Opening the **Services** tab and expanding the **Servers** node will list the
    GlassFish server that was installed during the NetBeans installation process.
    You can now right-click on the **GlassFish Server 4.0** node and select **Start**
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the GlassFish 4 server](img/5457_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Output** panel should now open at the bottom of your NetBeans IDE and
    display the startup results. Select the **GlassFish Server 4.0** tab to view the
    details.
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the GlassFish 4 server](img/5457_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The fifth-last line identifies that the server has started and is listening
    to port 8080, written as 8,080 in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '**INFO: Grizzly Framework 2.3.1 started in: 16ms - bound to [/0.0.0.0:8,080]**'
  prefs: []
  type: TYPE_NORMAL
- en: You can now open your preferred browser and view the page `http://localhost:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that depending on your environment, you may have other applications listening
    to port 8080\. In these circumstances, you will need to substitute the correct
    port, as defined in the GlassFish server output, in place of 8080.
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the GlassFish 4 server](img/5457_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now stop the server by right-clicking on the **GlassFish Server 4.0**
    node and clicking on **Stop**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting the GlassFish 4 server](img/5457_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running the Task Time Tracker project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already built the project successfully; it is now time to run the project
    in GlassFish. Click on the **Run** toolbar item to start the process as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the Task Time Tracker project](img/5457_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The output should display the process, first building the project followed
    by starting and deploying to the GlassFish server. The final step will open your
    default browser and display the world-renowned message that is loved by all developers,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the Task Time Tracker project](img/5457_01_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Congratulations! You have now configured the core components for developing,
    building, and deploying a Spring Java project. The final step is to change the
    text on the default page. Open the `index.html` file as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the Task Time Tracker project](img/5457_01_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Change `<title>` to `Task Time Tracker Home Page` and the `<h1>` text to `Welcome
    to Task Time Tracker!`. Save the page and refresh your browser to see the change.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the Task Time Tracker project](img/5457_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Didn't see the updated text change on browser refresh? Under some circumstances,
    after deploying to GlassFish for the first time, the changes made in the `index.html`
    file may not be seen in the browser when you refresh the page. Restarting your
    NetBeans IDE should fix the issue and ensure subsequent changes are immediately
    deployed to GlassFish when any project resource is saved.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have been introduced to some of the key technologies we
    will be using in this book. You have downloaded and installed the MySQL database
    server, the JDK, and the NetBeans IDE. We then introduced Maven and how it is
    used to simplify the building and management of Java projects. We finally deployed
    our skeleton Task Time Tracker project to GlassFish without writing a single line
    of code.
  prefs: []
  type: TYPE_NORMAL
- en: Although we have added the Spring Framework to our project, we are yet to delve
    into how it is used. Likewise, we are yet to mention Sencha Ext JS. Be patient,
    there is plenty more to come! The next chapter will introduce our Task Time Tracker
    database tables and start our development journey.
  prefs: []
  type: TYPE_NORMAL
