- en: Debugging Isomorphic Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Debugging an Isomorphic Go web application consists of the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying compiler/transpiler errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining panic stack traces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracing code to pinpoint the source of issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying compiler/transpiler errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can think of programming as a conversation between you (the programmer) and
    the machine (the compiler/transpiler). Because Go is a typed language, we can
    find many errors at compile/transpile time itself. This is a clear advantage to
    writing vanilla JavaScript where problems (caused by the lack of type checking)
    can lay hidden and surface at the most inopportune times. Compiler errors are
    the means by which the machine communicates to us that something is fundamentally
    wrong with our program, whether it's a mere syntactical issue or the inappropriate
    use of a type.
  prefs: []
  type: TYPE_NORMAL
- en: '`kick` comes in very handy for displaying compiler errors, since it will show
    you errors from both the Go compiler and the GopherJS transpiler. The moment you
    introduce an error (that the compiler/transpiler can identify) and save your source
    file, you will see the error displayed in the terminal window where you have `kick`
    running.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s open up the `client/client.go` source file. In the `run`
    function, let''s comment out the line where we set the `ts` variable to the `TemplateSet`
    object that we receive over the `templateSetChannel`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We know that the `ts` variable will be used later to populate the `TemplateSet`
    field of the `env` object. Let''s set the `ts` variable to the Boolean value of
    `false` by introducing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The moment we save the `client.go` source file, `kick` will give us a *kick*
    (pun intended), about the error that we just introduced as shown in *Figure A1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71b520d8-7d2f-44db-a642-54d1fdedca6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A1: The kick command immediately shows us the transpiler error upon
    saving the Go source file'
  prefs: []
  type: TYPE_NORMAL
- en: The compiler error received shows us the exact line where the problem occurred,
    from which we can diagnose and rectify the issue. The lesson to be learned from
    this example is that it comes in very handy to have a terminal window running
    `kick` in the background while you are developing your Isomorphic Go web application.
    By doing so, you will be able to see compiler/transpiler errors the moment that
    you make them.
  prefs: []
  type: TYPE_NORMAL
- en: Examining panic stack traces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For runtime errors that cannot be found by the transpiler at *transpile time*,
    there usually is a helpful **panic stack trace**, which is displayed in the web
    browser's console, and provides us with valuable information to diagnose issues.
    The JavaScript source map file that GopherJS produces helps the web browser map
    the JavaScript instructions to their respective lines in the Go source files.
  prefs: []
  type: TYPE_NORMAL
- en: Let's introduce a runtime error whereby our client-side program is syntactically
    correct (it will pass the transpiler checks); however, the code will issue a problem
    at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to the `run` function found in the `client/client.go` source file,
    notice the following code changes we''ve made with regards to the `ts` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We have commented out the declaration and initialization of the `ts` variable,
    and we have also commented out the assignment of the `ts` variable to the `TemplateSet`
    field of the `env` object. We have introduced a line of code to assign the `nil`
    value to the `TemplateSet` field of the `env` object. By taking this action, we
    have essentially disabled the client-side template set, which will prevent us
    from being able to render any template on the client-side. This also prevents
    any cog from being rendered, since cogs are dependent on the template set to properly
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'After loading the IGWEB home page, a panic stack trace is generated and is
    visible in the web browser''s console as shown in *Figure A2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab084ae4-bd48-4ac4-a4ae-88e52d6fefcb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A2: The panic stack trace shown in the web browser''s console'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your front-end debugging travels, you will come across the following error
    message quite often:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`runtime error: invalid memory address or nil pointer dereference` usually
    means that we are attempting to perform operations on a value (such as accessing
    or mutating a property) that is equal to a JavaScript `null` value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examining the produced panic stack trace helps us zero in on the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The areas of interest in the panic stack trace are shown in bold. From the panic
    stack trace, we can ascertain that the carousel cog failed to render, since it
    appears that something is wrong with the `TemplateSet`. By further inspecting
    the panic stack trace, we can identify that the call was made to the `run` function
    at line 112 in the `client.go` source file. The `run` function is where we had
    introduced the error by setting the `TemplateSet` field of the `env` object to
    `nil`. From this debugging exercise, we can see that in this situation, the panic
    stack trace did not reveal the exact line of the problem but it provided us with
    enough clues to rectify the issue.
  prefs: []
  type: TYPE_NORMAL
- en: A good practice to follow when developing on the client-side is to always have
    the web browser's console open, so that you will be able to see problems as they
    occur.
  prefs: []
  type: TYPE_NORMAL
- en: Tracing code to pinpoint the source of issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another good client-side debugging practice is **tracing**, the practice of
    printing out key steps in the flow of a program. In a debugging scenario, this
    would consist of strategically making calls to the `println` (or `fmt.Println`)
    function around suspected areas of problematic code. You can use the web browser's
    console to verify that these print statements are reached, which will give you
    a better understanding of how the client-side program is functioning while it
    is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, when debugging the issue introduced in the previous section, we
    can place the following `println` calls in the run function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We performed tracing by printing key steps in the flow of the program, by making
    strategic `println` function calls. The first `println` call is used to verify
    that we reach the `run` function. The second `println` call is used to check the
    health of the template set that is returned to us from the template set channel.
    The third, and final `println` call, is used to check the health of the template
    set after we have completed prepped the `env` object by populating its fields.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure A3* shows the web console with the print statements displayed, along
    with the respective line number in the `client.go` source file where the `println`
    call was made:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89c7d534-96df-44fd-bae3-19b9caa9ba92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A3: The print statements displayed in the web console'
  prefs: []
  type: TYPE_NORMAL
- en: From the tracing exercise, we can first verify that we have successfully reached
    the `run` function. Secondly, we can verify the health of the `TemplateSet` object
    received over the `templateSetChannel` by noticing that properties of the object
    appear (such as `members`, `Funcs`, and `bundle`). The third, and final print
    statement, also verifies the health of the `TemplateSet` object after the `env`
    object has been prepped. This print statement reveals the source of the problem
    by showing us that the `TemplateSet` object has not been initialized, since we
    don't see any of the properties of the object appear in the printed statement.
  prefs: []
  type: TYPE_NORMAL
