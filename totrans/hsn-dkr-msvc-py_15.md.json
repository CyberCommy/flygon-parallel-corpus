["```\n$ cd Chapter11/microservices/\n$ cd rsyslog\n$ docker-compose build\n...\n$ cd frontend\n$ ./build-test.sh\n...\n$ cd thoughts_backend\n$./build-test.sh\n...\n$ cd users_backend\n$ ./build-test.sh\n... \n```", "```\n$ cd Chapter11/kubernetes\n$ kubectl create namespace example\n$ kubectl apply --recursive -f .\n...\n```", "```\n127.0.0.1 thoughts.example.local\n127.0.0.1 users.example.local\n127.0.0.1 frontend.example.local\n```", "```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: shared-config\n  namespace: example\ndata:\n  DATABASE_ENGINE: POSTGRES\n  POSTGRES_USER: postgres\n  POSTGRES_HOST: \"127.0.0.1\"\n  POSTGRES_PORT: \"5432\"\n  THOUGHTS_BACKEND_URL: http://thoughts-service\n  USER_BACKEND_URL: http://users-service\n```", "```\n$ kubectl get configmap -n example shared-config\nNAME               DATA AGE\nshared-config      6    46m\n```", "```\n$ kubectl describe configmap -n example shared-config\nName: shared-config\nNamespace: example\nLabels: <none>\nAnnotations: kubectl.kubernetes.io/last-applied-configuration:\n {\"apiVersion\":\"v1\",\"data\":{\"DATABASE_ENGINE\":\"POSTGRES\",\"POSTGRES_HOST\":\"127.0.0.1\",\"POSTGRES_PORT\":\"5432\",\"POSTGRES_USER\":\"postgres\",\"THO...\n\nData\n====\nPOSTGRES_HOST:\n----\n127.0.0.1\nPOSTGRES_PORT:\n----\n5432\nPOSTGRES_USER:\n----\npostgres\nTHOUGHTS_BACKEND_URL:\n----\nhttp://thoughts-service\nUSER_BACKEND_URL:\n----\nhttp://users-service\nDATABASE_ENGINE:\n----\nPOSTGRES\n```", "```\n$ kubectl apply -f kubernetes/configuration.yaml\n```", "```\nspec:\n    containers:\n        - name: thoughts-backend-service\n          image: thoughts_server:v1.5\n          imagePullPolicy: Never\n          ports:\n              - containerPort: 8000\n          envFrom:\n              - configMapRef:\n                    name: shared-config\n          env:\n              - name: POSTGRES_DB\n                value: thoughts\n          ...\n```", "```\n$ kubectl get pods -n example\nNAME                              READY STATUS  RESTARTS AGE\nthoughts-backend-5c8484d74d-ql8hv 2/2   Running 0        17m\n...\n$ kubectl exec -it thoughts-backend-5c8484d74d-ql8hv -n example /bin/sh\nDefaulting container name to thoughts-backend-service.\n/opt/code $ env | grep POSTGRES\nDATABASE_ENGINE=POSTGRESQL\nPOSTGRES_HOST=127.0.0.1\nPOSTGRES_USER=postgres\nPOSTGRES_PORT=5432\nPOSTGRES_DB=thoughts\n/opt/code $ env | grep URL\nTHOUGHTS_BACKEND_URL=http://thoughts-service\nUSER_BACKEND_URL=http://users-service\n```", "```\nspec:\n    containers:\n        - name: users-backend-service\n          image: users_server:v2.3\n          imagePullPolicy: Never\n          ports:\n              - containerPort: 8000\n          envFrom:\n              - configMapRef:\n                    name: shared-config\n          env:\n              - name: POSTGRES_DB\n                value: thoughts\n          ...\n```", "```\nspec:\n    containers:\n        - name: frontend-service\n          image: thoughts_frontend:v3.7\n          imagePullPolicy: Never\n          ports:\n              - containerPort: 8000\n          envFrom:\n              - configMapRef:\n                    name: shared-config\n```", "```\n$ openssl genrsa -out private_key.pem 2048\nGenerating RSA private key, 2048 bit long modulus\n........+++\n.................+++\ne is 65537 (0x10001)\n$ openssl rsa -in private_key.pem -outform PEM -pubout -out public_key.pub\nwriting RSA key\n$ ls \nprivate_key.pem  public_key.pub\n```", "```\n$ kubectl create secret generic thoughts-secrets --from-literal=postgres-password=somepassword --from-file=private_key.pem --from-file=public_key.pub -n example\n```", "```\n$ kubectl get secrets -n example\nNAME             TYPE   DATA AGE\nthoughts-secrets Opaque 3    41s\n```", "```\n$ kubectl describe secret thoughts-secrets -n example\nName: thoughts-secrets\nNamespace: default\nLabels: <none>\nAnnotations: <none>\n\nType: Opaque\n\nData\n====\npostgres-password: 12 bytes\nprivate_key.pem: 1831 bytes\npublic_key.pub: 408 bytes\n```", "```\n$ kubectl get secret thoughts-secrets -o yaml -n example\napiVersion: v1\ndata:\n postgres-password: c29tZXBhc3N3b3Jk\n private_key.pem: ...\n public_key.pub: ...\n$ echo c29tZXBhc3N3b3Jk | base64 --decode\nsomepassword\n```", "```\nspec:\n    containers:\n    - name: users-backend-service\n      ...\n      env:\n      ...\n      - name: POSTGRES_PASSWORD\n        valueFrom:\n          secretKeyRef:\n            name: thoughts-secrets\n            key: postgres-password\n        volumeMounts:\n        - name: sign-keys\n          mountPath: \"/opt/keys/\"\n\n    volumes:\n    - name: sign-keys\n      secret:\n        secretName: thoughts-secrets\n        items:\n        - key: public_key.pub\n          path: public_key.pub\n        - key: private_key.pem\n          path: private_key.pem\n```", "```\nimport os PRIVATE_KEY = ...\nPUBLIC_KEY = ...\n\nPUBLIC_KEY_PATH = '/opt/keys/public_key.pub'\nPRIVATE_KEY_PATH = '/opt/keys/private_key.pem'\n\nif os.path.isfile(PUBLIC_KEY_PATH):\n    with open(PUBLIC_KEY_PATH) as fp:\n        PUBLIC_KEY = fp.read()\n\nif os.path.isfile(PRIVATE_KEY_PATH):\n    with open(PRIVATE_KEY_PATH) as fp:\n        PRIVATE_KEY = fp.read()\n```", "```\nimport os\nPUBLIC_KEY = ...\n\nPUBLIC_KEY_PATH = '/opt/keys/public_key.pub'\n\nif os.path.isfile(PUBLIC_KEY_PATH):\n    with open(PUBLIC_KEY_PATH) as fp:\n        PUBLIC_KEY = fp.read()\n```", "```\nTOKENS_PUBLIC_KEY = ...\n\nPUBLIC_KEY_PATH = '/opt/keys/public_key.pub'\n\nif os.path.isfile(PUBLIC_KEY_PATH):\n    with open(PUBLIC_KEY_PATH) as fp:\n        TOKENS_PUBLIC_KEY = fp.read()\n```", "```\n$ git log --format=format:%H -n 1\n```", "```\n$ git describe --tags\n```", "```\n$ # in master branch, 17 commits from the tag v2.3\n$ git describe\nv2.3-17-g2257f9c\n$ # go to the tag\n$ git checkout v2.3\n$ git describe\nv2.3\n```", "```\n# Prepare the version\nARG VERSION_SHA=\"BAD VERSION\"\nARG VERSION_NAME=\"BAD VERSION\"\nENV VERSION_SHA $VERSION_SHA\nENV VERSION_NAME $VERSION_NAME\n```", "```\n# Obtain the SHA and VERSION\nVERSION_SHA=`git log --format=format:%H -n 1`\nVERSION_NAME=`git describe --tags`\n# Build using docker-compose with arguments\ndocker-compose build --build-arg VERSION_NAME=${VERSION_NAME} --build-arg VERSION_SHA=${VERSION_SHA}\n# Tag the resulting image with the version\ndocker tag thoughts_server:latest throughs_server:${VERSION_NAME}\n```", "```\n#!/bin/bash\nif [ -z \"$1\" ]\n  then\n    # Error, not version name\n    echo \"No VERSION_NAME supplied\"\n    exit -1\nfi\n\nVERSION_SHA=`git log --format=format:%H -n 1`\nVERSION_NAME=$1\n\ndocker-compose build --build-arg VERSION_NAME=${VERSION_NAME} --build-arg VERSION_SHA=${VERSION_SHA}\ndocker tag thoughts_server:latest throughs_server:${VERSION_NAME}\n```", "```\nimport os\n\n@admin_namespace.route('/version/')\nclass Version(Resource):\n\n    @admin_namespace.doc('get_version')\n    def get(self):\n        '''\n        Return the version of the application\n        '''\n        data = {\n            'commit': os.environ['VERSION_SHA'],\n            'version': os.environ['VERSION_NAME'],\n        }\n\n        return data\n```", "```\n$ cd Chapter11/microservices/thoughts_backend\n$ ./build.sh\n...\nSuccessfully tagged thoughts_server:latest\n$ docker-compose up -d server\nCreating network \"thoughts_backend_default\" with the default driver\nCreating thoughts_backend_db_1 ... done\nCreating thoughts_backend_server_1 ... done\n$ curl http://localhost:8000/admin/version/\n{\"commit\": \"2257f9c5a5a3d877f5f22e5416c27e486f507946\", \"version\": \"tag-17-g2257f9c\"}\n```", "```\nimport os\n...\nVERSION = os.environ['VERSION_NAME']\n...\n\ndef create_app(script=False):\n    ...\n    api = Api(application, version=VERSION, \n              title='Thoughts Backend API',\n              description='A Simple CRUD API')\n```", "```\nimport os\n\nVERSIONS = {\n    'thoughts_backend': \n        (f'{os.environ[\"THOUGHTS_BACKEND_URL\"]}/admin/version',\n         'v1.6'),\n}\n```", "```\nimport requests\n\ndef main():\n    for service, (url, min_version) in VERSIONS.items():\n        print(f'Checking minimum version for {service}')\n        resp = requests.get(url)\n        if resp.status_code != 200:\n            print(f'Error connecting to {url}: {resp}')\n            exit(-1)\n\n        result = resp.json()\n        version = result['version']\n        print(f'Minimum {min_version}, found {version}')\n        if not check_version(min_version, version):\n            msg = (f'Version {version} is '\n                    'incorrect (min {min_version})')\n            print(msg)\n            exit(-1)\n\nif __name__ == '__main__':\n    main()\n```", "```\nfrom natsort import natsorted\n\ndef check_version(min_version, version):\n    versions = natsorted([min_version, version])\n    # Return the lower is the minimum version\n    return versions[0] == min_version\n```", "```\n$ kubectl get pods -n example\nNAME READY STATUS RESTARTS AGE\nfrontend-54fdfd565b-gcgtt 0/1 CrashLoopBackOff 1 12s\nfrontend-7489cccfcc-v2cz7 0/1 CrashLoopBackOff 3 72s\ngrafana-546f55d48c-wgwt5 1/1 Running 2 80s\nprometheus-6dd4d5c74f-g9d47 1/1 Running 2 81s\nsyslog-76fcd6bdcc-zrx65 2/2 Running 4 80s\nthoughts-backend-6dc47f5cd8-2xxdp 2/2 Running 0 80s\nusers-backend-7c64564765-dkfww 2/2 Running 0 81s\n```", "```\n$ kubectl logs frontend-54fdfd565b-kzn99 -n example\nChecking minimum version for thoughts_backend\nMinimum v1.6, found v1.5\nVersion v1.5 is incorrect (min v1.6)\n```"]