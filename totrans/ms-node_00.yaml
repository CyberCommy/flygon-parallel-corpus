- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The internet is no longer a collection of static websites to be passively consumed.
    The browser (and mobile) user has come to expect a much richer and interactive
    experience. Over the last decade or so, network applications have come to resemble
    desktop applications. Also, recognition of the social characteristics of information
    has inspired the development of new kinds of interfaces and visualizations modeling
    dynamic network states, where the user is viewing change over real time rather
    than fading snapshots trapped in the past.
  prefs: []
  type: TYPE_NORMAL
- en: Even though our expectations for software have changed, the tools available
    to us as software developers have not changed much. Computers are faster, and
    multicore chip architectures are common. Data storage is cheaper, as is bandwidth.
    Yet we continue to develop with tools designed before billion-user websites and
    push-button management of cloud-based clusters of virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: The development of network applications remains an overly expensive and slow
    process because of this. Developers use different languages, programming styles,
    complicating code maintenance, debugging, and more. Very regularly, scaling issues
    arrive too early, overwhelming the ability of what is often a small and inexperienced
    team. Popular modern software features, such as real-time data, multiplayer games,
    and collaborative editing spaces, demand systems capable of carrying thousands
    of simultaneous connections without bending. Yet we remain restricted to frameworks
    designed to assist us in building CRUD applications, binding a single relational
    database on a single server to a single user running a multipage website in a
    browser on a desktop computer.
  prefs: []
  type: TYPE_NORMAL
- en: Node helps developers build more resilient network applications at scale. Built
    on C++ and bundled with Google's V8 engine, Node is fast, and it understands JavaScript.
    Node has brought together the most popular programming language in the world and
    the fastest JavaScript compiler around, and has given easy access to an operating
    system through C++ bindings. Node represents a change in how network software
    is designed and built.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ad3a0c29-f1fb-4319-9042-a9f38bb0b53a.xhtml), *Understanding the
    Node Environment, *gives a brief description of the particular problems Node attempts
    to solve, their history and roots in the Unix design philosophy, and Node''s power
    as a systems language. We will also learn how to write optimized, modern JavaScript
    on V8 (the engine powering Node), including a brief tour of the newest features
    of the language that will help you upgrade your code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](4cb6b06a-7800-4595-9908-f14d1ced3602.xhtml), *Understanding Asynchronous
    Event-Driven Programming, *digs deep into the fundamental characteristics of Node''s
    design: event-driven, asynchronous programming. By the end of this chapter, you
    will understand how events, callbacks, and timers are used in Node as well as
    how the event loop works to enable high-speed I/O across filesystems, networks,
    and processes. We''ll also learn about modern concurrency modeling constructs,
    from the default Node callback pattern to Promises, Generators, async/await, and
    other flow control techniques.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](c7665bc9-3f44-4d7c-8318-61f9dfe962b3.xhtml), *Streaming Data Across
    Nodes and Clients, *describes how streams of I/O data are knitted through most
    network software, emitted by file servers or broadcast in response to an HTTP
    GET request. Here, you will learn how Node facilitates the design, implementation,
    and composition of network software, using examples of HTTP servers, readable
    and writable file streams, and other I/O focused Node modules and patterns. You
    will take a deep dive into the Streams implementation, mastering this fundamental
    part of the Node stack.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](886e76b5-09f3-4ab0-bb0e-191b2c40c299.xhtml), *Using Node to Access
    the Filesystem, *lays out what you need to know when accessing the filesystem
    with Node, how to create file streams for reading and writing, along with techniques
    for handling file uploads and other networked file operations. You will also implement
    a simple file browsing application using Electron.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ae24c7b4-7661-4041-8108-15fe453bf8c8.xhtml), *Managing Many Simultaneous
    Client Connections, *shows you how Node helps in solving problems accompanying
    the high-volume and high-concurrency environments that contemporary, collaborative
    web applications demand. Through examples, learn how to efficiently track user
    state, route HTTP requests, handle sessions, and authenticate requests using the
    Redis database and Express web application framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](7c71fdd2-8060-4363-9ab3-1c5cdc24c8cf.xhtml), *Creating Real-Time
    Applications, *explores AJAX, Server-Sent-Events, and the WebSocket protocol,
    discussing their pros and cons when building real-time systems, and how to implement
    each using Node. We finish the chapter by building a collaborative document editing
    application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](48e16668-9318-4577-b3c0-3f4dbce035d9.xhtml), *Using Multiple Processes, *teaches
    how to distribute clusters of Node processes across multicore processors, and
    other techniques for scaling Node applications. An investigation of the differences
    between programming in single and multithreaded environments leads to a discussion
    on how to spawn, fork, and communicate with child processes in Node, including
    a section on using the PM2 process manager. We also build an analytics tool that
    records, and displays, the mouse actions of multiple, simultaneous clients connected
    through a cluster of web sockets.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8,](97a06823-2b25-44a5-9482-86f80d3d28ed.xhtml) *Scaling Your Application, *outlines
    some techniques for detecting when to scale, deciding how to scale, and scaling
    Node applications across multiple servers and cloud services, with examples, including
    how to use RabbitMQ as a message queue, using NGINX to proxy Node servers, and
    using Amazon Web Services in your application. The chapter closes with us building
    a robust customer service application deployed on Heroku, where you will learn
    how to use the Twilio SMS gateway with Node.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](c8e13bc3-e661-441c-9fbc-bfdf6019f5f8.xhtml), *Microservices,* introducesthe
    concept of microservices—small, independent services—and how we got from monolithic
    and 3-Tier stacks to large fleets of independent services whose collaboration
    patterns are dynamic. We''ll learn how to use Seneca and Node to create an autodiscovering
    services mesh, AWS Lambda to create serverless applications infinitely scalable
    in the cloud, and finally, how to create Docker containers and orchestrate their
    deployment with Kubernetes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](404d3cde-f615-4c63-b789-442e218a1263.xhtml), *Testing Your Application, *explains
    how to implement unit, functional, and integration tests with Node. We will go
    deep, exploring how to use native debugging and testing modules, heap dumps and
    CPU profiling, eventually building test suites with Mocha and Chai. We''ll cover
    mocks, stubs, and spies with Sinon, live debugging of running Node processes with
    Chrome DevTools, and how to use tools like Puppeteer to implement headless testing
    of your UI code.'
  prefs: []
  type: TYPE_NORMAL
- en: Appendix A, *Organizing Your Work into Modules, *gives tips on using the npm
    package management system. Here, you will learn how to create, publish, and manage
    packages.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix B, *Creating your own C++ Add-ons, *provides a brief introduction on
    how to build your own C++ add-ons and how to use them from within Node. We also
    cover the new **NAN (Native Abstractions for Node)** tool and how that can help
    you with writing cross-platform, future-proofed add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have some familiarity with JavaScript, and have a copy of Node
    installed on your development machine or server, Version 9.0 or higher. You should
    know how to install programs on this machine, as you will need to install Redis,
    along with other libraries like Docker. Having Git installed, and learning how
    to clone GitHub repositories, will greatly improve your experience.
  prefs: []
  type: TYPE_NORMAL
- en: You should install RabbitMQ so that you can follow with the examples using message
    queues. The sections on using NGINX to proxy Node servers will, of course, require
    that you can install and use that web server. To build C++ add-ons, you will need
    to install the appropriate compiler on your system.
  prefs: []
  type: TYPE_NORMAL
- en: The examples in this book are built and tested within UNIX-based environments
    (including Mac OS X), but you should be able to run all Node examples on Windows-based
    operating systems as well. You can obtain installers for your system, and binaries,
    from [http://www.nodejs.org](http://www.nodejs.org).
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for developers who want to build high-capacity network applications,
    such as social networks, collaborative document editing environments, real-time
    data-driven web interfaces, networked games, and other I/O-heavy software. If
    you're a client-side JavaScript developer, reading this book will teach you how
    to become a server-side programmer using a language you already know. If you're
    a C++ hacker, Node is an open source project built using that language, offering
    you an excellent opportunity to make a real impact within a large and growing
    community, even gaining fame, by helping to develop this exciting new technology.
  prefs: []
  type: TYPE_NORMAL
- en: This book is also for technical managers and others seeking an explanation of
    the capabilities and design philosophy of Node. The book is filled with examples
    of how Node solves the problems modern software companies are facing in terms
    of high-concurrency, real-time applications pushing enormous volumes of data through
    growing networks. Node has already been embraced by the enterprise, and you should
    consider it for your next project.
  prefs: []
  type: TYPE_NORMAL
- en: We are using the bleeding-edge version of Node (9.x at the time of writing).
    This is the only book you need to be ready for in the next few years as Node continues
    its march through the enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "If
    we take a look at our `find-byte.c` file, we will see that our `render` method
    returns content wrapped in the `View` component".'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Clicking the Next button moves you to the next screen."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
