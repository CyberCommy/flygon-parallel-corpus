- en: Chapter 2. Validation of Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Form validation has always been tricky and painful for developers since the
    Web was born. Before HTML5, it was a nightmare for developers to write lines of
    code for validating forms to get the desired information from the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Validation, their benefits, and their types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 `<input>` and attributes used in validations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between JavaScript and HTML5 validations with an example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation constraints and supported APIs (Application Programming interface)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default error messages displayed by the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validation of a form is a series of checks and notifications that guides a user
    as to what is required as an input while submitting information to a server. We
    can also say that it is a process of checking the input data against a specific
    standard or requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Form validation is a process for detecting invalid control data and displaying
    those errors to the end users. The term has several benefits as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Provides the necessary instructions and hints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides a logical reading and navigation order of the elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can easily get to know the mistakes they have made while entering the
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensures that the form can be completed and submitted using the keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saves users' waiting time on an HTTP request or a network call
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saves the owner's server time and memory from dealing with bad inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation ensures that sufficient data has been provided by the user, such
    as with online shopping, which typically includes the address, e-mail address,
    and many more details which are mandatory for a transaction to be complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many methods to perform form validations, which can be categorized
    into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Client-side form validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side form validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side form validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Client-side validation can be performed using HTML5 attributes on a browser
    that supports them or even with the help of JavaScript for other browsers. HTML5
    attributes reduce the effort of validation in comparison to cumbersome JavaScript
    validations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of client-side form validation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It enhances the experience of the user by responding quickly at the client side
    itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation can occur as the `<form>` controls are filled by the user before
    submitting the form to the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This approach is quite simple as it ensures that the user has filled the required
    fields with valid data and also guides the user while filling up the form correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's a fast form of validation as it does not require any server-side scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages of client-side form validation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It can be disabled in the client's browser and does not provide any security
    mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This approach cannot protect our application from various security concerns
    while transmitting the data along the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side validation provides minimum security as it can be altered or bypassed
    very easily
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side form validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Various scripting languages, such as PHP, ASP, or Perl are used to screen and
    filter the data submitted by the user at server side.
  prefs: []
  type: TYPE_NORMAL
- en: This approach is used when we know that some checks can be performed only on
    the server side as security is required, as in the case of online shopping, where
    the user enters card details for making a payment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of server-side form validation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The valid and complete information can be submitted without any error recovery
    messages and warnings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every page that a user sees in the browser is downloaded to the computer, which
    includes JavaScript that has validation code. So, a hacker can create a new version
    of the page without any validation and can fool our server by entering invalid
    data. In such scenarios, server-side validations are helpful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side validation is more secure and cannot be altered or bypassed easily.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages of server-side form validation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: This approach requires more response time leading to poor user experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server-side processing code resubmits the page so as to display the error
    messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To have the minimum number of request-response life cycles, it validates all
    form fields at the same time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More or less, we all have relied on JavaScript to validate forms. Also, we should
    always keep in mind that client-side form validation is not a replacement for
    foolproof server-side validation and handling errors. It is an efficient means
    of providing an instant feedback on the input of the user at the client end. In
    case of online shopping, the user selects total number of pieces, but after a
    certain limit, the user sees an error that the limit has been exceeded. All these
    validations demand high-end server-side validations, which is not possible on
    the client side. Always remember, in case of forms, use server-side validations.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 form validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of introducing HTML5 validation is to notify a user that a page
    contains some mandatory information that needs to be filled or corrects the users
    for any errors using the browser's built-in processing. We should take advantage
    of all the capabilities and knowledge that the browser has, to catch errors within
    a form, before sending it to the server. Also, we need not bother about the time
    and expense of a network round-trip or getting a response from the server about
    some stupid error.
  prefs: []
  type: TYPE_NORMAL
- en: New `<input>` attributes such as `required` and `pattern` used in combination
    with CSS pseudo-class selectors make it easier to write the checks and display
    feedback to the user. There are also other advanced validation techniques that
    allow you to use JavaScript to set custom validity rules and messages or to determine
    whether an element is invalid and why.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go deeper into HTML5 validations, let us see the difference when the
    client-side validation is performed using JavaScript and how we can validate using
    HTML5 `<form>` controls. Here, in the following instance, we are validating a
    simple textbox which is mandatory to be filled in by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Code 1 – validating a textbox using JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code will validate a textbox using JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code 1 – validating a textbox using JavaScript](img/4661OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Code 2 – validating a textbox using HTML5 <form> controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code will validate a textbox using HTML5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code 2 – validating a textbox using HTML5 <form> controls](img/4661OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding two code examples, we saw how the `<script>` part in the first
    code was replaced by a single attribute of the HTML5 `<form>` control in the second
    code, which not only reduced the lines of code, but also removed the scope of
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Constraint validations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The algorithm that browsers run to determine the validity of a form when it
    is submitted is called constraint validation. To constrain data or check validity,
    the algorithm utilizes new HTML5 attributes such as `min`, `max`, `step`, `pattern`,
    and `required`, as well as existing attributes such as `maxlength` and `type`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In HTML5, basic constraints are declared in two different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: By choosing the most semantically appropriate value for the `type` attribute
    of the `<input>` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By setting values on validation-related attributes and allowing basic constraints
    to be described in a simple way without the need for JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 constraint validation APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nowadays, an increasing number of browsers are supporting the constraint validation
    API, and it's becoming more and more reliable. However, HTML5 constraint validation
    doesn't remove the need for validation on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: 'At a high level, this API covers the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Form fields have a validity property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form fields also have a generic `checkValidity()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, there is a `setCustomValidity()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The validity object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `validity` object is a set of keys and Boolean values that represent the
    validity of a particular form. In simple terms, we can say that it tells what
    a particular form lacks.
  prefs: []
  type: TYPE_NORMAL
- en: Let us take the numeric field type as an example to understand this. With the
    numeric field type, we can specify that a form field should be numeric and we
    can set the limitation; for example, the number should be higher than 0 and less
    than 25\. The `validity` property would actually be able to tell you if the value
    wasn't a number or was too low or too high.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `validity` object of a DOM node returns a `ValidityState` object containing
    a number of Boolean properties related to the validity of the data in the node.
    In a `ValidityState` object, whenever we get a reference to it, we can keep a
    hold of it, and the validity checks that we get in return will update as needed
    when the changes occur as shown in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The checkValidity method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `checkValidity` method is called to check for the value that this method
    returns for the successful and unsuccessful validation scenarios. It returns a
    Boolean value, and we can use this method when there is no need to know why a
    field is invalid, or we can use this method before we sneak into the `validity`
    property to know why the field is not valid.
  prefs: []
  type: TYPE_NORMAL
- en: This method allows us to check validation on the form without any input from
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Validation of form is checked whenever the user or the script code submits
    the form, but this method allows validation to be done at any time, as shown in
    the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The checkValidity method](img/4661OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The setCustomValidity() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `setCustomValidity()` method lets us decide logically and create a custom
    validation error message and display it when an invalid input is submitted to
    the form. This lets us use JavaScript code to establish a validation failure other
    than those offered by the standard constraint validation APIs. The message is
    displayed while reporting the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'This method also allows us to set a message and sets the field as being in
    an error state by default. If the argument is the empty string, the custom error
    is cleared or is considered valid. When we do not customize the error message
    using the `setCustomValidity()`method, the built-in error message is displayed,
    as shown in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The setCustomValidity() method](img/4661OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The willValidate attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `willValidate` attribute indicates whether an element will be validated
    based on the form's validation rules and constraints. If any of the constraints,
    such as the `required` attribute or the `pattern` attribute, are set on the control,
    the `willValidate` field will let you know that validation checking will be enforced.
  prefs: []
  type: TYPE_NORMAL
- en: 'This attribute returns **true** if the element will be validated when the form
    is submitted; otherwise, it will return **false,** as shown in the following code
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The willValidate attribute](img/4661OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The validationMessage attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `validationMessage` attribute allows us to programmatically query a localized
    error message that the control does not satisfy. If the control is not a candidate
    for constraint validation, or if the element's value satisfies its constraints,
    `validationMessage` sets to an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, if a required field has no input, the browser will present its
    default error message to the user. Once supported, this is the text string that
    will be returned by the `validationMessage` field as shown in the following code
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The validationMessage attribute](img/4661OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: HTML5 provides us with several ways to enforce correctness on forms; that is,
    HTML5 provides several validity constraints on any given `<form>` control.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, several validity constraints on any given `<form>`
    control are discussed in this section.
  prefs: []
  type: TYPE_NORMAL
- en: The patternMismatch property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `patternMismatch` property is used to set any pattern rule on a `<form>`
    control and returns if the `<input>` value matches the rules defined by the `pattern`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The validity.patternMismatch attribute
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the element's value does not match the provided `pattern` attribute, it returns
    **true**; otherwise, it returns **false**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element will match the `:invalid` CSS pseudo-class when it returns **true**
    as shown in the following code example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The validity.patternMismatch attribute](img/4661OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The customError property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `customError` property is used to handle the errors that are calculated
    and set by the application code. This property validates whether the customized
    error message is set or not.
  prefs: []
  type: TYPE_NORMAL
- en: It is used to call the `setCustomValidity()` property to put a form control
    into the `customError` state.
  prefs: []
  type: TYPE_NORMAL
- en: The validity.customError property
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If the element has a custom error, it returns **true**; otherwise, it returns
    **false,** as shown in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The validity.customError property](img/4661OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The rangeOverflow property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rangeOverflow` property is used to notify that the input value of the `<form>`
    control is greater than the maximum value or that the input value is out of range.
  prefs: []
  type: TYPE_NORMAL
- en: This property checks the `max` attribute to a `<form>` control with the maximum
    input value.
  prefs: []
  type: TYPE_NORMAL
- en: The validity.rangeOverflow property
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the element's value is higher than the provided maximum value, it returns
    **true**; otherwise, it returns **false**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element will match the `:invalid` and `:out-of-range` CSS pseudo-classes
    when it returns **true,** as shown in the following code example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown inthe following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The validity.rangeOverflow property](img/4661OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The rangeUnderflow property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rangeUnderflow` property is used to notify that the input value of the
    `<form>` control is lower than the minimum value.
  prefs: []
  type: TYPE_NORMAL
- en: This property checks the `min` attribute to a `<form>` control with the minimum
    input value.
  prefs: []
  type: TYPE_NORMAL
- en: The validity.rangeUnderflow property
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the element's value is lower than the provided minimum value, it returns
    **true;** otherwise, it returns **false**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element will match the `:invalid` and `:out-of-range` CSS pseudo-classes
    when it returns **true,** as shown in the following code example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The validity.rangeUnderflow property](img/4661OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The stepMismatch property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `stepMismatch` property ensures that an `<input>` value complies with the
    rules or standards of the values of `min`, `max`, and `step`. For example, if
    the step value is five and the value entered is three, we will have a step mismatch
    in this case.
  prefs: []
  type: TYPE_NORMAL
- en: The validity.stepMismatch property
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the element's value doesn't fit the rules given by the `step` attribute,
    it returns **true**; otherwise, it returns **false**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element will match the `:invalid` and `:out-of-range` CSS pseudo-classes
    when it returns **true,** as shown in the following code example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The validity.stepMismatch property](img/4661OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The tooLong property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property ensures that an `<input>` field does not contain too many characters.
  prefs: []
  type: TYPE_NORMAL
- en: We ensure this by adding a `maxlength` attribute on the `<form>` control.
  prefs: []
  type: TYPE_NORMAL
- en: The validity.tooLong property
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the element's value is longer than the provided maximum length, it returns
    **true;** otherwise, it returns **false**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element will match the `:invali``d` and `:out-of-range` CSS pseudo-classes
    when it returns **true,** as shown in the following code example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The validity.tooLong property](img/4661OS_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The typeMismatch property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `typeMismatch` property is used to notify that the `<input>` value does
    not match with the `<form>` control in cases such as e-mail, URL, and number,
    and ensures that the type of value matches its expected field.
  prefs: []
  type: TYPE_NORMAL
- en: The validity.typeMismatch property
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the element's value is not in the correct syntax, it returns **true**; otherwise,
    it returns **false**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element will match the `:invalid` CSS pseudo-class when it returns **true,**
    as shown in the following code example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The validity.typeMismatch property](img/4661OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The valueMissing property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `valueMissing` property ensures that some value is set on the `<form>` control.
    To ensure this, set the required attribute on the `<form>` control to **true**.
  prefs: []
  type: TYPE_NORMAL
- en: The validity.valueMissing property
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the element has no value but is a required field, it returns **true**; otherwise,
    it returns **false**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element will match the `:invalid` CSS pseudo-class when it returns **true,**
    as shown in the following code example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The validity.valueMissing property](img/4661OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The valid property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `valid` property is used to check whether the field is valid.
  prefs: []
  type: TYPE_NORMAL
- en: The validity.valid property
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the element's value has no validity problems, it returns **true**; otherwise,
    it returns **false**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The element will match the `:invalid` CSS pseudo-class when it returns **true,**
    as shown in the following code example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The validity.valid property](img/4661OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table shows the various attributes with their possible values
    and associated violations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Attribute | <Input> types supporting the attribute | Possible values | Constraint
    description | Associated violation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `required` | date, month, week, checkbox, radio button, URL, telephone, e-mail,
    text, password, search, time, range, number and tags such as `<select>`, `<textarea>`,
    `checkbox`, and `radiobutton` | It returns the Boolean value `None`; when present,
    it returns **true** and when absent, it returns **false** | The value is to be
    filled mandatorily | Constraint violation:Missing |'
  prefs: []
  type: TYPE_TB
- en: '| `min` | number and range | Must be a valid number | The filled parameter
    must be greater than or equal to the value defined | Constraint violation:Underflow
    |'
  prefs: []
  type: TYPE_TB
- en: '| month, date, and week | Must be a valid date |'
  prefs: []
  type: TYPE_TB
- en: '| datetime-local, time, and datetime | Must be a valid date and time |'
  prefs: []
  type: TYPE_TB
- en: '| `maxlength` | tags such as `<textarea>` and attributes are `text`, `password`,
    `search`, `tel`, `url`, and `email` | Must be an integer length | The value of
    the attribute must not be greater than the number of characters filled | Constraint
    violation:Too long |'
  prefs: []
  type: TYPE_TB
- en: '| `max` | number and range | Must be a valid number | The filled parameter
    must be lesser than or equal to the value defined | Constraint violation: Overflow
    |'
  prefs: []
  type: TYPE_TB
- en: '| month ,date, and week | Must be a valid date |'
  prefs: []
  type: TYPE_TB
- en: '| datetime-local, time, and datetime | Must be a valid date and time |'
  prefs: []
  type: TYPE_TB
- en: '| `pattern` | text, search, URL, telephone, e-mail, and password | It is a
    regular expression defined using JavaScript | The value of the attribute must
    exactly match the pattern defined | Constraint violation: Pattern mismatch |'
  prefs: []
  type: TYPE_TB
- en: '| `step` | month | Must be an integer number of months | Until the value of
    `step` is set to the any literal (values available in the `step` menu), value
    will be `min` value plus an integral multiple of `step` | Constraint violation:
    Step mismatch |'
  prefs: []
  type: TYPE_TB
- en: '| date | Must be an integer number of days |'
  prefs: []
  type: TYPE_TB
- en: '| week | Must be an integer number of weeks |'
  prefs: []
  type: TYPE_TB
- en: '| datetime, datetime-local, and time | Must be an integer number of seconds
    |'
  prefs: []
  type: TYPE_TB
- en: '| number and range | Must be an integer |'
  prefs: []
  type: TYPE_TB
- en: Error messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, all modern browsers support most of the features of HTML5\. The functionality
    of the features is the same in all browsers but there are some differences; one
    of which is the default error message that the browser, displays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the default error messages displayed by various browsers are shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Error messages](img/4661OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, we can change the default error message of the browser with the help
    of `setCustomvalidity`. Let us understand this with an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code changes the default error message of a browser to a custom
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Error messages](img/4661OS_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about form validation and their types. We also learned
    the benefits of the different types of validations. We have also seen the various
    `<input>` types and attributes used in the validation of forms.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen the difference between JavaScript validation and HTML5 validation
    by building a sample code.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learned about constraint validations and the various APIs supported
    by HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we saw the various browser-specific default error messages and learned
    how to change the browser's default error message.
  prefs: []
  type: TYPE_NORMAL
