- en: Chapter 7. Resolving Classic Problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a frontend developer, you are always dealing with classic CSS problems. The
    most known and repeatable issues are centering elements in both axes and opacity.
    With current CSS, you can do it pretty simple, but you need to have a foundation
    to know how to do it. Knowledge about fallbacks of previous versions of browsers
    can be used in some other further techniques. That's why they are added to this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to center elements in both axes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to deal with opacity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gather both the preceding tricks and create an effect similar to the trendy
    lightbox effect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centering elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Centering elements is an aspect known since the first CSS versions. There were
    always some element/elements on a page that needed to be centered vertically or
    horizontally in some container or in a browser. The easiest way to center some
    elements was to append the element into a table element and add to it vertical
    align and horizontal align attributes in HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'But how can we do this in modern CSS? There are two kinds of centering:'
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vertical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's resolve this problem.
  prefs: []
  type: TYPE_NORMAL
- en: Inline elements – horizontal centering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s assume that we have a text that we need to center. It is very simple.
    We just need to add `text-align: center` and that''s it. In the example that we
    will implement, the background for our container is set to `red` and the element''s
    background is set to `white` to see how it works.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with this HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'What we will see in browser is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inline elements – horizontal centering](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To center the box, as mentioned previously, we need to add `text-align: center`
    to the container:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in the browser, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inline elements – horizontal centering](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s assume that we have both block elements and we want to adjust them as
    in the preceding example. What do we need to do? We need to change the display
    type to `inline` or `inline-block`. Let''s change the HTML code a little bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now with the SASS code added previously, our example will behave similar to
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inline elements – horizontal centering](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, the block element is taking the
    full possible weight. What we need to do is to modify the SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in the browser, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inline elements – horizontal centering](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Block elements – centering in both axes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with the code from the previous chapter, which will be the base
    for our CSS styling. This is the element in `container`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The SASS code with colors is added for better visibility of the problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the starting point, our code in the browser will like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Block elements – centering in both axes](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, our container with `Centered` content
    is now on the left side of black container. Let''s assume that this is the container
    for the page that needs to be centered and stuck to the top of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The most important line is the one in bold. This makes our container centered,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Block elements – centering in both axes](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So what can we do to center it in both axes? The old school way, with the known
    width and height of the element, is to add the container relative position to
    the element absolute position. The element needs to be moved from the top and
    left by 50%. Then we need to shift the element with a half of the known height
    to the top and left side using negative margins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Block elements – centering in both axes](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, the element is centered in both
    axes. The biggest issue is the static width and height of the element. Yes, of
    course, there is a way to add a JavaScript code to achieve it, but it's better
    to use native CSS functions. So let's try to make it with the `transform` property.
  prefs: []
  type: TYPE_NORMAL
- en: Using transform in centering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we have been trying to resolve the problem of centering
    elements. Let''s extend it with the transform declaration. We will dig deeper
    into transform in the next chapter to understand how it works with rotation and
    scale, but for this chapter, we need to add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The last line in the preceding code is making the same effect as it did in the
    previous section, defining the negative left and top margins. The best feature
    of this code is that we can add it everywhere without knowledge of the width and
    height. In the next chapter, we will learn about flexbox, which can be used for
    the centering of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with opacity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Opacity occurs in projects very often. For example, when you are creating some
    model windows on a page or lightbox-like gallery. It is used on the layer added
    under the main window (overlay element), which, in most cases, has added an `onclick`
    event listener in JavaScript, which hides the window upon clicking. How can you
    create this effect? How was it done in the past? Let''s start with a simple HTML
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dealing with opacity](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'What we need to do is to add a layer with opacity over the actually visible
    container. Let''s append this code after the currently added code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'What we need to do now is to change the container position to `fixed` and change
    the position of the element to `absolute`. Let''s add a little bit more code to
    add more styling for better visibility of effects of our work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser, we will see the white centered block on a black container as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dealing with opacity](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding code is going to be the base in the next section, where we will
    see the differences between `opacity` and `rgba`.
  prefs: []
  type: TYPE_NORMAL
- en: Opacity versus RGBA – differences and where can we use them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try to make the .`window_container` element added previously into the
    HTML/SASS structure be transparent. The easiest way to do it is add `opacity`:
    `.5`. So let''s try to add the following code to our current SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The effect in browser will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Opacity versus RGBA – differences and where can we use them](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, opacity is inherited by the element
    inside our `.window_container`. It''s not the way we want to have it, so we have
    to change the CSS (SASS) or HTML code. If we want to change the HTML code, we
    can do it this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And the SASS code will be changed in the window description. We will change
    only the position to `fixed`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The effect in the browser will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Opacity versus RGBA – differences and where can we use them](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, in the browser, the effect is achieved
    but our HTML structure is a little bit confusing. We have parallely added two
    elements into the HTML code, which are related to one element. So let''s get back
    to the code from the beginning of our chapter where `.window` is in the `.window_container`.
    This is the place where we will use `rgba`. Be sure that the HTML code responsible
    for the window looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'What we need to do is to change the definition of the background color of the
    `window_container` and append our `rgba`. As we know, we can define colors of
    elements in few ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding color names (`black`, `white`, `red`, ...)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hex colors definition (`#ff00ff`, `#fff` ...)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RGB (`rgb(0,0,0)`, `rgb(255,255,255)` ) based on R(ed)G(reen)B(lue)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HSL (`hsl(100, 90%, 50%)`) based on H(ue) S(aturation) L(ightness)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RGBA (`rgb(0,0,0, .4)`, `rgb(255,255,255, .7)`) based on R(ed)G(reen)B(lue)
    + alpha channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HSLA (`hsl(100, 90%, 50%, .8)`) based on H(ue) S(aturation) L(ightness) + alpha
    channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our case, we will use `rgba`. The final SASS code for `window_container`
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `opacity` declaration is removed. Color is defined as RGBA.
    The rest of code is the same. The code in the browser will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Opacity versus RGBA – differences and where can we use them](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Opacity in the past – fallback for old IE versions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fallback for old browsers was done in a similar way as it was when you wanted
    to use border radius—you needed to use images. How was it finally done? When the
    graphics were cut in graphic software, the overlay was cut as a small transparent
    image, for example, PNG 1px per 1px. Then it was added as a background and repeated
    in *x* and *y* axes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you gained knowledge about the most known, classic issues
    in CSS: centering and opacity. You resolved this problem and gained knowledge
    about the pros and cons of the solutions. Additionally, you learned how the opacity
    problem was resolved in old browsers.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about modern CSS aspects like flexbox gradients,
    shadows, transforms, and data attributes. You will also learn about some tricks
    that you can apply to your code using this feature. Let's move on to the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
