- en: Chapter 3. Mailing with Spring Mail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A mailing API is a part of all modern web applications. End users prefer to
    be intimated by mail on details of the transactions performed with the application.
  prefs: []
  type: TYPE_NORMAL
- en: Spring has made it easier to provide mailing abilities to any Java application.
    In this chapter, we shall see how we can use the Spring mail template to e-mail
    recipients. In the previous chapter, we used messaging as the middleware to store
    messages in the queue, and now in this chapter, we shall demonstrate using Spring
    mailing template configurations using different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Spring mail message handling process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following diagram depicts the flow of a Spring mail message process. With
    this, we can clearly understand the process of sending mail using a Spring mailing
    template.
  prefs: []
  type: TYPE_NORMAL
- en: A message is created and sent to the transport protocol, which interacts with
    internet protocols. Then, the message is received by the recipients.
  prefs: []
  type: TYPE_NORMAL
- en: '![Spring mail message handling process](img/7320OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Spring mail framework requires a mail configuration, or SMTP configuration,
    as the input and message that needs to be sent. The mail API interacts with internet
    protocols to send messages. In the next section, we shall look at the classes
    and interfaces in the Spring mail framework.
  prefs: []
  type: TYPE_NORMAL
- en: Interfaces and classes used for sending mails with Spring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The package `org.springframework.mail` is used for mail configuration in the
    spring application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Interfaces and classes used for sending mails with Spring](img/7320OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the three main interfaces that are used for sending mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MailSender`: This interface is used to send simple mail messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JavaMailSender`: This interface is a subinterface of the `MailSender` interface
    and supports sending mail messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MimeMessagePreparator`: This interface is a callback interface that supports
    the `JavaMailSender` interface in the preparation of mail messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following classes are used for sending mails using Spring:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SimpleMailMessage`: This is a class which has properties such as `to`, `from`,
    `cc`, `bcc`, `sentDate`, and many others. The `SimpleMailMessage` interface sends
    mail with `MailSenderImp` classes.![Interfaces and classes used for sending mails
    with Spring](img/7320OS_03_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JavaMailSenderImpl`: This class is an implementation class of the `JavaMailSender`
    interface.![Interfaces and classes used for sending mails with Spring](img/7320OS_03_04.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MimeMessageHelper`: This class helps with preparing MIME messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending mail using the @Configuration annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We shall demonstrate here how we can send mail using the Spring mail API.
  prefs: []
  type: TYPE_NORMAL
- en: First, we provide all the SMTP details in the `.properties` file and read it
    to the class file with the `@Configuration` annotation. The name of the class
    is `MailConfiguration`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`mail.properties` file contents are shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to create a rest controller to send mail; to do so, click on
    **Submit**. We shall use the `SimpleMailMessage` interface since we don't have
    any attachment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Sending mail using MailSender and SimpleMailMessage with the XML configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Simple mail message" means the e-mail sent will only be text-based with no
    HTML formatting, no images, and no attachments. In this section, consider a scenario
    where we are sending a welcome mail to the user as soon as the user gets their
    order placed in the application. In this scenario, the mail will be sent after
    the database insertion operation is successful.'
  prefs: []
  type: TYPE_NORMAL
- en: Create a separate folder, called `com.packt.mailService`, for the mail service.
    The following are the steps for sending mail using the `MailSender` interface
    and `SimpleMailMessage` class.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Maven web project with the name `Spring4MongoDB_MailChapter3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The example used the MongoDB database created in [Chapter 1](ch01.html "Chapter 1. Spring
    Mongo Integration"), *Spring Mongo Integration*. We have also used the same Eshop
    db database with MongoDB for CRUD operations on `Customer`, `Order`, and `Product`.
    We have also used the same `mvc` configurations and source files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the same dependencies as used in [Chapter 2](ch02.html "Chapter 2. Messaging
    with Spring JMS"), *Messaging with Spring JMS*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to add dependencies to the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compile the Maven project. Create a separate folder called `com.packt.mailService`
    for the mail service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a simple class named `MailSenderService` and autowire the `MailSender`
    and `SimpleMailMessage` classes. The basic skeleton is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, create an object of `SimpleMailMessage` and set mail properties, such
    as `from`, `to`, and `subject` to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We need to configure the SMTP details. Spring Mail Support provides this flexibility
    of configuring SMTP details in the XML file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to send mail to the customer after the order has been placed successfully
    in the MongoDB database. Update the `addorder()` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Sending mails to multiple recipients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to intimate the user regarding the latest products or promotions
    in the application, you can create a mail sending group and send mail to multiple
    recipients using Spring mail sending support.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created an overloaded method in the same class, `MailSenderService`,
    which will accept string arrays. The code snippet in the class will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the code snippet for listing the set of users from MongoDB
    who have subscribed to promotional e-mails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Sending MIME messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Multipurpose Internet Mail Extension** (**MIME**) allows attachments to be
    sent over the Internet. This class just demonstrates how we can send mail with
    MIME messages. Using a MIME message sender type class is not advisable if you
    are not sending any attachments with the mail message. In the next section, we
    will look at the details of how we can send mail with attachments.'
  prefs: []
  type: TYPE_NORMAL
- en: Update the `MailSenderService` class with another method. We have used the MIME
    message preparator and have overridden the prepare `method()` to set properties
    for the mail.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Sending attachments with mails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also attach various kinds of files to the mail. This functionality is
    supported by the `MimeMessageHelper` class. If you just want to send a MIME message
    without an attachment, you can opt for `MimeMesagePreparator`. If the requirement
    is to have an attachment to be sent with the mail, we can go for the `MimeMessageHelper`
    class with file APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Spring provides a file class named `org.springframework.core.io.FileSystemResource`,
    which has a parameterized constructor that accepts file objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Sending preconfigured mails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we shall provide a message that is to be sent in the mail,
    and we will configure it in an XML file. Sometimes when it comes to web applications,
    you may have to send messages on maintenance. Think of a scenario where the content
    of the mail changes, but the sender and receiver are preconfigured. In such a
    case, you can add another overloaded method to the `MailSender` class.
  prefs: []
  type: TYPE_NORMAL
- en: We have fixed the subject of the mail, and the content can be sent by the user.
    Think of it as "an application which sends mails to users whenever the build fails".
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now we shall sent two different bodies for the subjects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using Spring templates with Velocity to send HTML mails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Velocity is the templating language provided by Apache. It can be integrated
    into the Spring view layer easily. The latest Velocity version used during this
    book is 1.7\. In the previous section, we demonstrated using Velocity to send
    e-mails using the `@Bean` and `@Configuration` annotations. In this section, we
    shall see how we can configure Velocity to send mails using XML configuration.
  prefs: []
  type: TYPE_NORMAL
- en: All that needs to be done is to add the following bean definition to the `.xml`
    file. In the case of `mvc`, you can add it to the `dispatcher-servlet.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Create a new Maven web project with the name `Spring4MongoDB_Mail_VelocityChapter3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a package and name it `com.packt.velocity.templates`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file with the name `orderconfirmation.vm`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Use all the dependencies that we have added in the previous sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To the existing Maven project, add this dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To ensure that Velocity gets loaded on application startup, we shall create
    a class. Let's name the class `VelocityConfiguration.java`. We have used the annotations
    `@Configuration` and `@Bean` with the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Use the same `MailSenderService` class and add another overloaded `sendMail()`
    method in the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Update the controller class to send mail using the Velocity template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Sending Spring mails over a different thread
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are other options for sending Spring mail asynchronously. One way is to
    have a separate thread to the mail sending job. Spring comes with the `taskExecutor`
    package, which offers us a thread pooling functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Create a class called `MailSenderAsyncService` that implements the `MailSender`
    interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `org.springframework.core.task.TaskExecutor` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a private class called `MailRunnable`. Here is the complete code for
    `MailSenderAsyncService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Configure the `ThreadPool` executor in the `.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Test the source code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Sending Spring mails with AOP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also send mails by integrating the mailing functionality with **Aspect
    Oriented Programming** (**AOP**). This can be used to send mails after the user
    registers with an application. Think of a scenario where the user receives an
    activation mail after registration. This can also be used to send information
    about an order placed on an application. Use the following steps to create a `MailAdvice`
    class using AOP:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a package called `com.packt.aop`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class called `MailAdvice`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This class creates a new thread and starts it. In the `run` method, the `proceedingJoinPoint.proceed()`
    method is called. `ProceddingJoinPoint` is a class available in `AspectJ.jar`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `dispatcher-servlet.xml` file with `aop` configurations. Update
    the `xlmns` namespace using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Also update the `xsi:schemalocation`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the bean configuration in the `.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we demonstrated how to create a mailing service and configure
    it using Spring API. We also demonstrated how to send mails with attachments using
    MIME messages. We also demonstrated how to create a dedicated thread for sending
    mails using `ExecutorService`. We saw an example in which mail can be sent to
    multiple recipients, and saw an implementation of using the Velocity engine to
    create templates and send mails to recipients. In the last section, we demonstrated
    how the Spring framework supported mails can be sent using Spring AOP and threads.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at Spring Batch framework.
  prefs: []
  type: TYPE_NORMAL
