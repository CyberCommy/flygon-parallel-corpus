- en: '*Chapter 11*: Staying Out of Trouble'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pentesting can be very intrusive on AWS systems, and can also lead to legal
    issues if not executed correctly. When pentesting AWS, it's crucial to understand
    what you as a pentester can and cannot perform on an AWS system. These types of
    attacks bring systems down during a pentest and ruin your reputation, while also
    potentially destroying client systems and creating substantial revenue loss for
    both the pentesting company and the targeted client.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will discuss **Denial of Service** (**DoS**) and flooding attacks
    and how they work. Understanding how these attacks work illustrates the severity
    of the attacks and why we should stay away from them.
  prefs: []
  type: TYPE_NORMAL
- en: We will finish the chapter by discussing stress testing, which is also sometimes
    referred to as load testing, and get a high-level view as to what stress testing
    is and whether customers should be worried.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Prohibited activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exhausting services via DoS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding flooding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding legal issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stress testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prohibited activities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's essential to understand what activities are allowed and which ones are
    not when it comes to pentesting. As we have stated throughout this book, this
    is what we call *within scope* and *out of scope*. When we mention systems that
    are within scope, we are discussing what we can test, at what times, and how much
    impact we can have on those within scoped hosts. However, it is just as important
    to know what is out of scope as well. Knowing what is out of scope ensures that
    you only test what the client is requesting and keeps you and your team from dodging
    any type of legal fines or punishment.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections are going to discuss what AWS states as prohibited activities
    toward their infrastructure and service. Remember that part of the shared security
    model relies on AWS and its uptime for its hardware – so AWS has a say in how
    its product is tested.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move forward and discuss the prohibited attacks on AWS – **DoS** and **flooding**.
  prefs: []
  type: TYPE_NORMAL
- en: Exhausting services via DoS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DoS and **Distributed Denial of Service** (**DDoS**) are disruptive attacks
    that target various systems, such as websites and applications, and at times can
    also target users. A DoS attack generates a large volume of traffic that aims
    to overwhelm a target and render it useless or take it offline. A DDoS attack
    executes the same attack, only it does it from multiple compromised or controlled
    hosts – known as a **botnet** – to attack the target.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'A large amount of controlled or compromised hosts are commonly known as a **botnet**.
    AWS has an older but interesting article on botnets that is located here: [https://aws.amazon.com/security/security-bulletins/zeus-botnet-controller/](https://aws.amazon.com/security/security-bulletins/zeus-botnet-controller/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'DoS and DDoS attacks will attack multiple layers of the **Open Systems Interconnection**
    (**OSI**) model; however, the more common attacks that we see occur at layer **3**,
    layer **4**, layer **6**, and layer **7**. The following screenshot is from AWS''s
    website and shows the various layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Layers for AWS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.01_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Layers for AWS
  prefs: []
  type: TYPE_NORMAL
- en: 'The layers **3**, **4**, **6**, and **7** illustrate the most prominent layers
    for disruptive attacks and can be grouped into two different layers. Grouping
    these eases the mitigation process because it allows us to apply mitigation techniques
    to multiple layers that reside in one group. We join the layers into the following
    groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure layer** (layers **3** and **4**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application layer** (layers **6** and **7**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having our groups in mind, let's discuss them and what services they target
    in regard to AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure-layer attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Infrastructure-layer attacks focus on attacking the network layer (**3**) and
    transport layer (**4**). Some of the more common attacks we see in AWS that attack
    this layer involve SYN flooding and UDP flooding – which we will discuss further
    in the *Understanding flooding* section of this chapter – which aim to bring services
    down at this layer. This entails disrupting any connections that are established
    over the network via TCP, UDP, and IP, such as establishing connections with other
    nodes within your AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's discuss the next layer, the application layer, and consider what
    it would disrupt in regard to AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Application-layer attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Attacks that occur at the application layer are typically less common; however,
    they do present their own issues. While these types of DoS attacks can produce
    large traffic values to bring services down, they also can be something as simple
    as changing the integrity of a file, policy, or another type of data that allows
    access and authorization to a resource. We have seen attack situations and methods
    throughout this book that illustrate denying service by changing an S3 policy
    or changing SSH keys on an EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: The application-layer attack primarily targets SSH and HTTP when targeting AWS.
    This means that APIs and access to EC2 instances could be vulnerable if not secured
    or protected correctly. We will discuss protections and mitigations further in
    the *Mitigating flood attacks and DoS* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the layers, let's move forward and discuss flooding and
    what that means during a pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding flooding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Flooding is a simple but effective tactic that malicious and curious users perform
    by sending an overload of packets to a target host in the hope of overwhelming
    the host. Another portion of the flood that makes it **simple** is that it uses
    the shortest path to its target by flooding every path within a network, or in
    our case, within our **VPC** and cloud environment. This means that when flooding
    attacks occur, they could potentially affect other hosts besides that target because
    the flood **sprays** out to other nodes to find the shortest path.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, flooding is a common technique in DoS attacks. A DoS attack's
    mission is to overwhelm and flood the network, system, or environment to where
    the availability is disrupted, and the service is brought down.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's mention a few flooding techniques, as well as a few styles of DoS
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: UDP flooding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Port flooding involves an attack that targets a system's ports and overflows
    them with **User Data Protocol** (**UDP**) packets. Because UDP packets are connectionless,
    they can be sent in a flood that does not require any established connection from
    the target host, unlike the three-way **Transport Control Protocol** (**TCP**)
    handshake. When a target is sent an enormous amount of UDP packets, it could become
    overwhelmed and go offline. If the target host goes offline, a message stating
    **Destination Unreachable** will be sent back to us.
  prefs: []
  type: TYPE_NORMAL
- en: Discussing SYN floods and TCP handshakes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An SYN flood, or TCP SYN flood, is a DoS attack that exploits that three-way
    TCP handshake by sending an overload of SYN requests without ever accepting an
    ACK request sent by the target. Essentially, what this does is leaves the target
    waiting for a response from the attacker while also processing the abundance of
    SYN requests coming from that attacker machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To better understand the SYN flood, we need to understand the TCP handshake
    and how it works. The following steps highlight the three steps in how the TCP
    handshake is initiated between two nodes – which, in our case, could be a target
    and attacker if the attacker wanted to establish a connection:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker machine sends an SYN message to that target to request a connection
    to the target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The target sends an SYN-ACK request back to the attacker machine and acknowledges
    the request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker machine responds with an ACK message, and a connection is initiated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the steps we just mentioned here and helps
    give a visual on the TCP three-way handshake:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – TCP three-way handshake'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.02_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – TCP three-way handshake
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we understand how the handshake works, let''s discuss how this handshake
    can be exploited and used to attack our target. The following steps will highlight
    how the SYN flood is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: The attack initiates an SYN flood. The attacker sends multiple SYN requests,
    which are sent to that target server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The target receives and responds to an overload of requests without receiving
    an ACK response from the attacking machine. While attempting to receive an ACK
    from the attacker machine, the target will still be overloaded with SYN requests
    from the attacker machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The service goes down and makes that target unable to process legitimate requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next figure illustrates the three steps we just mentioned in our flooding
    methodology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Abusing the three-way handshake with DoS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.03_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – Abusing the three-way handshake with DoS
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, flooding attacks can be hazardous if not mitigated correctly.
    Having a service down means a loss of revenue, loss of reputation, and a potential
    loss in employees' trust. We will explore these reasons more in just a bit; however,
    remember that while flooding is a dangerous attack, there is an excellent resolution
    for it within AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand DoS, DDoS, and flooding attacks from a high level, let's
    mention how we mitigate these attacks from occurring. This is what we would recommend
    to our clients on how they could protect their systems from disruptive attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Mitigating flood attacks and DoS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The most basic understanding of floods and how to mitigate them is that most
    operating systems, such as Windows, will limit the ICMP responses and filter out
    the overload of requests. You can also use a more traditional approach and use
    a firewall solution to help mitigate these attacks. AWS provides a service called
    **AWS Firewall**, which acts as a **Web Application Firewall** (**WAF**) that
    can be used to filter out traffic to your AWS environment and APIs and prevent
    common exploits against your web applications.
  prefs: []
  type: TYPE_NORMAL
- en: There is another service, known as **AWS Shield**, that helps prevent DoS and
    DDoS attacks against any of your applications that are running within AWS. The
    two-tier service provides real-time detection and mitigations that prevent overloaded
    traffic sent to applications from actually causing any damage – which is awesome
    because AWS Shield essentially does all the heavy lifting and does not require
    you to have any additional AWS support.
  prefs: []
  type: TYPE_NORMAL
- en: So, how does AWS Shield work exactly, and why should it be something that is
    recommended to prevent any type of DoS attack?
  prefs: []
  type: TYPE_NORMAL
- en: Simply put, AWS Shield creates and provides real-time heuristic-based monitoring
    and inline mitigation. What this means is that AWS Shield uses advanced monitoring
    techniques that create baselines within the environment that are based on usual
    traffic, and it will report anything that deviates from that traffic. Additionally,
    it will also perform real-time mitigations on common and more frequent attacks,
    such as DoS and flood attacks. It will also provide more specific detection and
    advanced mitigation techniques that help hinder a more advanced style of attack,
    such as DDoS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can discover more about AWS Shield and how it can help you with mitigation
    strategies here: [https://aws.amazon.com/shield/](https://aws.amazon.com/shield/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to mitigate against any disruptive attacks is by reducing the attack
    surface of your AWS environments. This means ensuring that EC2 instances are not
    publicly available unless they need to be based on a business reason. The less
    exposure that applications have to the internet, the less prone they are to being
    discovered and attacked. We can also help by scaling to help the load that the
    environments will take on by placing **load balancers** within the environment.
    The following diagram shows how a load balancer takes the load between four different
    nodes and distributes it between the four nodes based on what type of traffic
    they will be able to handle at that time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Load balancing within AWS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.04_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.4 – Load balancing within AWS
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, instead of each node handling traffic on its own, the load balancer
    distributes the traffic based on how much traffic each node can handle.
  prefs: []
  type: TYPE_NORMAL
- en: One of the last things to mention, but also very important, is that you have
    trained AWS engineers that are able to implement security controls within the
    environment securely and efficiently. The best way your engineers will implement
    these controls is by understanding and knowing what is normal and what is abnormal
    traffic within an environment. This is why culture is such a significant portion
    of security not only in AWS but also in an enterprise itself.
  prefs: []
  type: TYPE_NORMAL
- en: While culture is a huge influence, it's also important to know that insiders
    can have an influence and how their malicious hacker mindset can present issues
    within the organization. The next section is going to discuss the hacker mindset
    as it relates to DoS and DDoS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: The attacker mindset for DoS and DDoS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are many reasons why attackers execute disruptive attacks against victim
    targets. In this case, the threat actions would be the DoS or DDoS attack, which
    looks to directly create a nuisance that destroys the reputation of the company,
    or many times is used to create a political state if a political affiliate owns
    the AWS system.
  prefs: []
  type: TYPE_NORMAL
- en: We mentioned in [*Chapter 3*](B15630_03_Final_ASB_ePub.xhtml#_idTextAnchor098),
    *Exploring Pentesting and AWS*, some of the various styles of attackers, such
    as insiders and outsiders. Those same attacker mindsets can be applied to reasons
    for executing DoS and flood attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand more about the attacks that we need to stay away from,
    let's wrap up the chapter and discuss some of the legal issues you may face if
    going out of the scope of a pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding legal issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen throughout this book, pentesting can be very intrusive and at
    times can even be very dangerous if your team doesn't fully understand what is
    within the scope of the pentest, and can lead to fines or even actions that would
    be considered illegal under the **Computer Fraud and Abuse Act** (**CFAA**). Depending
    on who and what the pentest team is testing, you could also be breaking other
    laws, such as federal and state laws; however, that would depend on each pentest.
  prefs: []
  type: TYPE_NORMAL
- en: This all being said, let's take a quick look at how we can stay out of trouble
    with both the law and our clients.
  prefs: []
  type: TYPE_NORMAL
- en: Get-out-of-jail-free card
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is one of the most significant fundamental factors in ensuring that you
    stay out of any legal conflict during a pentest. The get-out-of-jail-free card
    is essentially a piece of paper stating that a pentest team is authorized to pentest
    the target organization – however, it should also annotate **WHAT**, **WHERE**,
    and **WHEN** the pentest team is allowed to pentest. This is extremely important
    because pentesters may not be able to pentest during certain times due to high-value
    traffic times; they also may not be authorized for some pentest regions of the
    network or web applications hosted within the AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: Before the target organization gives out the get-out-of-jail-free cards to the
    pentest team, there needs to be a clear understanding of the scope. If something
    in the range of the pentest needs to be added or removed, then it should be corrected
    and listed on the get-out-of-jail-free card.
  prefs: []
  type: TYPE_NORMAL
- en: Potential damage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a topic that many of us don''t like to discuss, or at the very least,
    feel very uneasy discussing: the potential that systems may be damaged or brought
    down during the pentest. This is especially challenging when asked for the pentest
    of a production or live system that would have massive revenue loss if it went
    down. The pentest team and the client organization must create an emergency response
    plan in the unfortunate case that an outage does occur. Additionally, there should
    be a workaround to bring up a test system that mimics the production environments.'
  prefs: []
  type: TYPE_NORMAL
- en: When pentesting AWS, we can advise our clients to create a separate private
    VPC that mimics the production environment and only allow access to the pentest
    team. Doing this allows the pentest team to test the systems in real time without
    causing any harm to the live system.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the data classifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to know what type of data is being stored in the environments during
    the pentest. If there is credit card data, social security numbers, and other
    sensitive data, then there needs to be a statement that illustrates that data
    may be seen during the pentest. Of course, if sensitive data is discovered in
    plain text when it should be encrypted, then the pentest team needs to notify
    their client immediately.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned quite a bit in this chapter about impactful attacks and also
    about legal issues. Now, let's discuss one more issue that we need to understand
    and look out for – stress testing.
  prefs: []
  type: TYPE_NORMAL
- en: Stress testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are policies built around Amazon customers who plan on using some type
    of high-volume testing to test against the reliability and durability of their
    systems, networks, and products. In this case, often customers may want to ensure
    that web servers hosted on an EC2 instance can withstand large amounts of traffic.
    Stress testing, which can also at times be called load testing, or gameplay testing,
    can also ensure that if traffic becomes too much for the web server, the traffic
    is then redirected by a load balancer. For a high-level view of load balancing,
    please refer to *Figure 11.4*.
  prefs: []
  type: TYPE_NORMAL
- en: Why stress test?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, we execute a stress test to ensure that the target environment
    can take on the high amount of traffic that may be expected while the system is
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A production server will typically be accessible on the web and will ensure
    large amounts of traffic from legitimate and non-legitimate sources.
  prefs: []
  type: TYPE_NORMAL
- en: Load testing, or stress testing, essentially acts as an assurance policy and
    gives you peace of mind to understand your AWS environment's availability – ensuring
    that your site or applications don't go down! If something, especially in production,
    were to go down, it could result in revenue loss, the loss of trust between the
    company and its customers, or the loss of employee-to-company trust relationships.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the impacts of stress testing – and in some sense, we
    also understand the implications of stress testing if not applied – let's discuss
    how to get stress testing done on an AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: Authorized stress testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to be authorized to perform stress testing on your AWS environment,
    you need to submit an intake form to AWS. While most customer networks do not
    fall within the guidelines, it is essential to check rather than not – after all,
    not stress testing your environment could result in more significant issues later!
  prefs: []
  type: TYPE_NORMAL
- en: While AWS does a wonderful job of supplying resources that prevent any issues
    related to the adverse effects of high-volume traffic, customers can send emails
    to AWS staff to determine whether their networks should be subject to a load test,
    and how much of a load should be applied to the test.
  prefs: []
  type: TYPE_NORMAL
- en: If concerned, customers should send the query to `aws-security-simulated-event@amazon.com`.
    Once confirmation of the email is received, customers' concerns about their network
    will need to be filled out on an intake form and they must authorize AWS to evaluate
    their environment to analyze whether it needs to be stress-tested or not.
  prefs: []
  type: TYPE_NORMAL
- en: Consent for stress testing will be based on risk and the impact of the systems
    in question. It's advised that customers illustrate the effects that potential
    high-volume traffic may have on live systems. If stress testing is authorized,
    it is recommended that a backup site be ready to deploy in the event that the
    production system fails the load test. A production system failing a load test
    results in the system going offline and not being accessible by customers.
  prefs: []
  type: TYPE_NORMAL
- en: Another great way to have a consistent backup is by having a development model
    or test model of the production system on the internal network. This replica of
    the live system can be used to test new features and as a target during an external
    and internal pentest, instead of targeting the production site. If a test system
    of the production site is not available, it is highly encouraged to have one!
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand more about stress testing and how we can use it to evaluate
    our own systems, let's start to wrap up this chapter and start moving forward
    to the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed what to look out for during a pentest and learned
    more details about what DoS, DDoS, and flooding attacks are. As we learned, these
    attacks can be extremely impactful and are made against AWS policies. We also
    learned about avoiding legal issues and how to mitigate any potential legal issues
    that may come up during a pentest. We finished off the chapter by discussing stress
    testing and what AWS customers can do in order to understand whether their environments
    should be subject to a load balancing test or not.
  prefs: []
  type: TYPE_NORMAL
- en: In the next, and final, chapter, we are going to explore some other projects
    that we can use to help strengthen our AWS methodology.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS pentesting: [https://aws.amazon.com/security/penetration-testing/](https://aws.amazon.com/security/penetration-testing/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is DDoS and DoS? [https://aws.amazon.com/shield/ddos-attack-protection/](https://aws.amazon.com/shield/ddos-attack-protection/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stress testing: [https://aws.amazon.com/ec2/testing/](https://aws.amazon.com/ec2/testing/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
