- en: Chapter 14. Decouple URL Paths from File Paths
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though we have a document root that separates our public and non-public
    resources, the users of our legacy application still browse directly to our page
    scripts. This means that our URLs are coupled directly to file system paths on
    the web server.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step is to decouple the paths so that we can route URLs independently
    to any target we want. This means putting in place a Front Controller to handle
    all incoming requests for our legacy application.
  prefs: []
  type: TYPE_NORMAL
- en: Coupled Paths
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we noted in the previous chapter, our web server acts as a combined front
    controller, router, and dispatcher for our legacy application. The routes to the
    page scripts are still mapped directly onto the file system, using our `docroot/`
    directory as the base for all URL paths.
  prefs: []
  type: TYPE_NORMAL
- en: This presents us with some structural problems. For example, if we want to expose
    a new or different URL, we have to modify the location of the related page script
    in the file system. Similarly, we cannot change what page script responds to a
    particular URL. There is no way intercept the incoming request before it is routed.
  prefs: []
  type: TYPE_NORMAL
- en: These and other problems, including the ability to complete future refactorings,
    mean that we must create a single entry point for all incoming requests. This
    entry point is called a front controller.
  prefs: []
  type: TYPE_NORMAL
- en: In our first implementation of a front controller for our legacy application,
    we will add a Router to convert the incoming URL path to a page script path. That
    will allow us to remove our page scripts from the document root, thereby decoupling
    the URLs from the file system.
  prefs: []
  type: TYPE_NORMAL
- en: The Decoupling Process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with separating our public resources from our non-public ones, we will have
    to make a change to our web server configuration. Specifically, we will enable
    URL rewriting so we can point all incoming requests to a front controller. We
    need to coordinate this refactoring with our operations personnel so they can
    deploy the changes as easily as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process, in general, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Coordinate with operations to communicate our intentions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a front controller script in the document root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `pages/` directory for our page scripts, along with a `page not found`
    page script and controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reconfigure the web server to enable URL rewriting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spot check the reconfigured web server to make sure the front controller and
    URL rewriting work properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move all page scripts from `docroot/` to `pages/`, spot checking along the way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit, push, and coordinate with operations for QA testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Coordinate with Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the single most important step in the process. We should never make
    changes that affect server configurations without discussing our intentions with
    the people in charge of the servers (i.e., our operations personnel).
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we need to tell our operations personnel that we have to enable
    URL rewriting. They will advise or instruct us on how to do this for our particular
    web server.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if we have no operations personnel and are in charge of our own
    servers, we will need to determine on our own how to enable URL rewriting. Proceed
    carefully in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Add a Front Controller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once we have coordinated with our operations personnel, we will add a front
    controller script. We will also add a `page not found` script, controller, and
    view.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create the front controller script in our document root. It uses
    a `Router` class to map the incoming URL to a page script. We call it front.php,
    or some other name that indicates it is a front controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We `require` the `Router` class file because the autoloader has not been registered
    yet. That will happen only when we execute the page script, which does not occur
    until the end of the front controller logic. We will remedy this situation in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Create a pages/ Directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The front controller references a `$pages_dir`. The idea is that we will move
    all our page scripts out of the document root and into this new directory.
  prefs: []
  type: TYPE_NORMAL
- en: First, we make a `pages/` directory at the top level of our legacy application,
    next to the `classes/`, `docroot/`, `views/`, etc. directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create a `pages/not-found.php` script, along with a corresponding controller
    and view file. The front controller will call the `not-found.php` script when
    the `Router` is unable to match a URL path. The `not-found.php` script should
    set itself up like any other page script in our legacy application, then invoke
    its corresponding view file for the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Reconfigure the Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our front controller in place and a target location for our
    page scripts, we reconfigure our local development web server to enable URL rewriting.
    Our operations personnel should have given us some instructions on how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, it is beyond the scope of this book to give full instructions
    on web server administration. Please review the documentation for your particular
    server for more information.
  prefs: []
  type: TYPE_NORMAL
- en: In Apache, we would first enable the `mod_rewrite` module. In some Linux distributions,
    this is as easy as issuing `sudo a2enmod` rewrite. In others, we need to edit
    the `httpd.conf` file to enable it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once URL rewriting is enabled, we need to instruct the web server to point
    all incoming requests to our front controller. In Apache, we might add a `docroot/.htaccess`
    file to our legacy application. Alternatively, we may modify one of the Apache
    configuration files for our local development server. The rewriting logic would
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For example, if the incoming request is for `/foo/bar/baz.php`, the web server
    will invoke the `front.php` script instead. This will be the case for every request.
    The various superglobals values will remain unchanged, so `$_SERVER['REQUEST_URI']`
    will still indicate `/foo/bar/baz.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, after we have enabled URL rewriting, we restart or reload the web server
    to make our changes take effect.
  prefs: []
  type: TYPE_NORMAL
- en: Spot check
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have enabled URL rewriting to point all requests to our new front
    controller, we should browse to our legacy application, using a URL path that
    we know does not exist. The front controller should show us the output from our
    `not-found.php` page script. This indicates that our changes are working properly.
    If not, we need to review and revise our changes up to this point and try to fix
    whatever went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Move Page scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once we are sure that the URL rewriting and front controller are operating properly,
    we can begin to move all of our pages scripts out of `docroot/` and into our new
    `pages/` directory. Note that we are moving only page scripts. We should leave
    all the other resources in `docroot/`, including the `front.php` front controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we start out with this structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We should end up with this structure instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We have moved only the page scripts. Images, CSS files, Javascript files, and
    the front controller all remain in `docroot/`.
  prefs: []
  type: TYPE_NORMAL
- en: Because we are moving files around, we may need to change our include-path values
    to point to the new relative directory locations.
  prefs: []
  type: TYPE_NORMAL
- en: As we move each file or directory from `docroot/` to `pages/`, we should spot
    check our changes to make sure the legacy application continues to work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the rewriting rules described earlier, our page scripts should continue
    to work whether they are in `docroot/` or `pages/`. We want to make sure to move
    all page scripts to `pages/` before we continue.
  prefs: []
  type: TYPE_NORMAL
- en: Commit, Push, Coordinate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we have moved all of our page scripts to the new `pages/` directory, and
    our legacy application works properly in this new structure, we commit all of
    our changes and push them to the common repository.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we would normally notify QA of our changes for them to test.
    However, because we have made a change to the server configuration, we need to
    coordinate the QA testing with our operations personnel. Operations will probably
    need to deploy the new configuration to the QA servers. Only then will QA be able
    to effectively check our work.
  prefs: []
  type: TYPE_NORMAL
- en: Common Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Did we really Decouple the Paths?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Astute observers will note that our *Router* still uses the incoming URL path
    to find the page scripts. The only difference between this and the original setup
    is that the path is mapped onto the `pages/` directory instead of the `docroot/`
    directory. Have we actually decoupled the URLs from the file system after all?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, we have achieved our decoupling goal. This is because we now have an interception
    point between the URL path and the page script that gets executed. Using the *Router*,
    we could create an array of routes where URL paths are the keys and file paths
    are values. That mapping array would allow us to route the incoming URL path to
    any page script we like.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to map a URL path like `/foo/bar.php` to a page script
    like `/baz/dib.php`, we could do so via the `setRoutes()` method on the *Router*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then when we `match()` the incoming URL path of `/foo/bar.php` against the *Router*,
    our returned route will be `/baz/dib.php`. We can then execute that route as the
    page script for the incoming URL. We will use a variation on this technique in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Review and next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the decoupling of our URLs from our page scripts, we are nearly finished
    with our modernization work. Only two refactorings remain. First, we will move
    repeated logic in our page scripts up to the front controller. Then we will remove
    the page scripts entirely and replace them with a dependency injection container.
  prefs: []
  type: TYPE_NORMAL
