- en: Testing and Debugging Your Mobile App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll be looking into the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing unit tests with Jest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding snapshot testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring test coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Storybook to preview components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging your app with react-native-debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging in an alternative way with Reactotron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how to develop a `React Native` (RN) mobile
    app, and along the same lines of what we did with `Node` and `React`, here let's
    complete the development process for mobile apps by looking at testing and debugging
    our app.
  prefs: []
  type: TYPE_NORMAL
- en: Writing unit tests with Jest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Doing unit testing for RN won't be too much of a surprise, because it happens
    that we'll be able to reuse most of what we learned before (for example, using
    `Jest` also with snapshots, or how to test `Redux`), except for some small details
    that must be taken care of, as we'll see.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll look at how to set up unit tests for RN, along the lines
    of what we already did for `Node` and `React`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whether you create the mobile app with CRAN (as we did) or with `react-native
    init`, support for `Jest` is baked in; otherwise, you''d have to install it on
    your own, as we saw in the *Unit testing your code *section of [Chapter 5](18752def-acd4-4b7d-9395-a1dad0864f16.xhtml),
    *Testing and Debugging Your Server*. Depending on how you create the project,
    there''s a difference in the `Jest` configuration in `package.json`; we won''t
    have to do anything, but see [https://jestjs.io/docs/en/tutorial-react-native.html#setup](https://jestjs.io/docs/en/tutorial-react-native.html#setup) for
    the alternative. We''ll have to add a few packages that we used earlier, but that''s
    about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After doing this, we can write tests as before. Let's look at an example.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Earlier in this book, we wrote some tests for the countries and regions application,
    and since we have already rewritten that in RN, why not also rewrite the tests?
    That will allow us to verify that writing unit tests for RN isn''t that different
    from writing them for plain `React`. We had already written tests for the `<RegionsTable>`
    component; let''s check them here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The differences are really minor, and mostly it''s the same code:'
  prefs: []
  type: TYPE_NORMAL
- en: We had to add `fakeDeviceData`, but that was only because our RN component required
    it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We changed `Enzyme.render()` to `Enzyme.shallow()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We changed the way we use the `wrapper` object to check for included text directly,
    using ``wrapper.contains()``
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a complete (and long!) list of all the available wrapper methods, check
    out [https://github.com/airbnb/enzyme/blob/master/docs/api/shallow.md](https://github.com/airbnb/enzyme/blob/master/docs/api/shallow.md).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also have a look at the `<CountrySelect>` tests, which involved simulating
    events. We can skip the tests that are practically identical to the `React` versions;
    let''s focus on the last one of our original tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The key difference between how we wrote the tests for `React` and for RN is
    in the way we `.find()` the element to click (RN uses a `Picker` component, instead
    of a group of `option` elements), and the event we simulate (`"ValueChange"` instead
    of `"change"`). Other than that, though, the code is the same as earlier.
  prefs: []
  type: TYPE_NORMAL
- en: For native modules, you may have to use mocks in order to simulate the expected
    behaviors. We haven't used such modules in our code, but should you require any
    of them, use the same mocking styles we saw in [Chapter 5](18752def-acd4-4b7d-9395-a1dad0864f16.xhtml),
    *Testing and Debugging Your Server*, and for `React` itself in [Chapter 10](95a025ab-5e4e-4652-b5b2-33426fb7ec79.xhtml),
    *Testing Your Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Having gone over some of the differences in RN components testing, we are done,
    because there are no differences in the code when testing actions or reducers.
    These use the same style of functional unit testing that doesn't involve any particular
    RN features, so we have nothing more to say. In the next section, we'll look at
    our test run.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Running the tests is achieved with a single command, as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as shown in the following screenshot—note that we also ran some
    tests we had copied from the `React` chapter, without any changes, and they also
    performed perfectly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2bb19d5-78b8-4f57-944f-2b23fc48df1c.png)'
  prefs: []
  type: TYPE_IMG
- en: All our components' tests run OK
  prefs: []
  type: TYPE_NORMAL
- en: So, apart from the need to use shallow rendering, and possibly some changes
    in the way we access elements or simulate events, coding unit tests for RN is
    pretty much the same as for `React`, which is good news. We are forgetting something,
    however – what about snapshot testing? Let's move on to that.
  prefs: []
  type: TYPE_NORMAL
- en: Adding snapshot testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snapshot testing with RN is a nice surprise, because you won't have to change
    anything in the way you worked before. Let's just look at a few examples, and
    you'll be convinced.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We had already seen snapshot testing in the *Testing changes with snapshots* section
    of [Chapter 10](95a025ab-5e4e-4652-b5b2-33426fb7ec79.xhtml), *Testing Your Application*.
    It so happens that the very same code will work perfectly with RN apps, without
    demanding any specific changes, other than those depending on variations in the
    code. Let''s consider the following example. The `<RegionsTable>` component we
    had developed earlier has an extra prop in RN: `deviceData`. So, we can copy the
    original snapshot test code and just add the new prop, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you bother to compare versions, you''ll see that the only changed parts
    are the ones I highlighted in bold text, and they have to do with the different
    components, not with any RN-specific thing. If you write a snapshot test for the
    `<CountrySelect>` component, you''ll find exactly the same result: the only necessary
    changes have to do with its new props (`deviceData`, `currentCountry`), but pose
    no other difficulty.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For variety, let''s add snapshot testing to our `<Main>` component. We''ll
    have two interesting details here:'
  prefs: []
  type: TYPE_NORMAL
- en: Since our component rendered itself differently in portrait or landscape mode,
    we should have two tests; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the component includes connected components, we must not forget to add a
    `<Provider>` component, lest the connections cannot be made.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code would be as follows; in particular, notice the varying device data,
    and the `<Provider>` inclusion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since all our snapshot tests'' filenames end with `.snapshot.js`, we can run
    all the snapshot tests with a single command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The first time you run the tests, as before, the snapshots will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38d8d4ed-7f20-4ddc-b976-e694a40b4e88.png)'
  prefs: []
  type: TYPE_IMG
- en: As with React, the first run will create snapshots for components
  prefs: []
  type: TYPE_NORMAL
- en: 'If we check the `__snapshots__` directory, we will find the three produced
    `.snap` files within. Their format is the same as with the `React` examples that
    we developed earlier. Let''s just have a look at the `<RegionsTable>` one, which
    we showed earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If in the future you run the tests again and nothing has been changed, then
    the results will be three PASS green messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bde6097-450b-47fa-87d8-8c1824c948cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Our snapshot tests were all successful
  prefs: []
  type: TYPE_NORMAL
- en: Everything is working fine, so we can aver that writing snapshot tests doesn't
    add any complications to RN testing, and can be carried out without difficulty.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring test coverage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the same way we did for `Node` and `React`, back in [Chapter 5](18752def-acd4-4b7d-9395-a1dad0864f16.xhtml),
    *Testing and Debugging Your Server*, and [Chapter 10](95a025ab-5e4e-4652-b5b2-33426fb7ec79.xhtml),
    *Testing Your Application*, we would like to have a measure of the coverage of
    our tests to see how thorough we have been, and to be able to detect pieces of
    code that need more work. Fortunately, we'll be able to manage with the same tools
    that we did before, so this recipe will prove easy to implement.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The setup for the application done by CRAN included `Jest`, as we saw, and
    `Jest` provides us with the coverage option we need. To start, we''ll have to
    add a simple script, to run our suite of tests with a couple of extra parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: That's all, we don't have anything else to do; let's just see it work!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Running the tests is simple; we just have to use the new script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the suite will be run in the same fashion as in the previous sections
    of this chapter, but at the end, a text summary will be produced. As earlier,
    colors will be used: green for well-covered (in terms of testing) source files,
    yellow for intermediate coverage, and red for low or no coverage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c128c727-66e1-4504-8ad8-0ca091acd55f.png)'
  prefs: []
  type: TYPE_IMG
- en: Running Jest with the coverage option enabled produces the same type of result
    we saw for Node and React
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also examine the HTML-produced files, which can be found at `/coverage/lcov-report`.
    Open the `index.html` file there, and you''ll get an interactive version of the
    report, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6786267b-dbbf-4c1d-9778-641d5de3e382.png)'
  prefs: []
  type: TYPE_IMG
- en: The produced HTML report is interactive, and lets you see what you missed in
    your tests
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you wondered why the `deviceHandler.component.js` file got
    such a low value (and never mind that you didn''t write a test for it; all code
    should be covered, if possible), you can click on it and see the reason. In our
    case, the `onLayoutHandler` code was (logically) never called, thus lowering the
    coverage for the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0523cce4-3e14-46ad-a739-3307671a681b.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on a file shows what lines were executed and which ones (red background)
    were missed
  prefs: []
  type: TYPE_NORMAL
- en: To see some ways to disable reporting lines that aren't covered, or for cases
    you don't want to consider, look at [https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md](https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md).
  prefs: []
  type: TYPE_NORMAL
- en: Using Storybook to preview components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Storybook`, our `React` tool from the *Simplifying component development with
    Storybook* section of [Chapter 6](82da8477-a63b-46d4-ad35-8a8cc114b542.xhtml),
    *Developing with React*, can also be used to help with the development of components,
    so in this recipe, let''s look at how to use it in order to simplify our work.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing `Storybook` is simple, and similar to what we did before; the `react-native-storybook-loader` package
    will let us place our `*.story.js` files wherever we want, and find them anyway.
    The second command will take a while, installing many packages; be warned! Also,
    a `storybook` directory will be created, at the root of your directory. Install
    `Storybook` with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `storybook/Stories` directory can be safely deleted, as we'll place our
    stories elsewhere, along with the components being demonstrated, as we did earlier
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running `Storybook` within an RN app created with CRNA requires an extra step:
    providing an appropriate `App.js` file. The simplest way to achieve this is with
    a one-liner file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this is a problem—how will you run your app? You could, of course,
    have two different `App.storybook.js` and `App.standard.js` files, and copy one
    or another to `App.js`, but that would quickly become boring if done manually.
    Of course, you could make do with some `npm` scripts. The following would work
    for Linux or macOS machines by using the `cp` command to copy files, but would
    require small changes for Windows devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also need to add some configuration for the loader in `package.json`.
    The following makes the loader look for `*.story.js` files in the `./src` directory,
    and generates a `storyLoader.js` file with the found stories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll have to modify `storybook/index.js`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We are now set; let's write some stories!
  prefs: []
  type: TYPE_NORMAL
- en: Check [https://github.com/storybooks/storybook/tree/master/app/react-native](https://github.com/storybooks/storybook/tree/master/app/react-native) for
    more documentation on `Storybook` for RN, and [https://github.com/elderfo/react-native-storybook-loader](https://github.com/elderfo/react-native-storybook-loader) for
    details on the loader we are using.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s write some stories. We can start with the `<RegionsTable>` component,
    which is quite simple: it doesn''t include any actions, and just displays data.
    We can write two cases: when an empty list of regions is provided, and when a
    non-empty one is given. We don''t have to think too much about the needed fake
    data, because we can reuse what we wrote for our unit tests! Consider the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding a decorator to center the displayed component is just for clarity: the
    necessary `<Centered>` code is simple, and needs a little of the styling we saw
    in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, setting up stories for `<CountrySelect>` is more interesting, because
    we have actions. We''ll provide two to the component: one when the user clicks
    on it to select a country, and an other for the `getCountries()` callback that
    the component will use to get the list of countries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We are all set now; let's see how this works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To view the `Storybook` app, we need to use the script we edited in the preceding
    section. Start by running the `storybook` script (it would be better to do this
    in a separate console) and then run the application itself, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The first command produces a bit of output, allowing us to confirm that our
    script works and that all our stories were found. The following code was slightly
    edited for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can open the browser and get a view quite similar to the one we got for
    the web apps and `React`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd5e5f68-4756-403d-b280-a662dd677a7a.png)'
  prefs: []
  type: TYPE_IMG
- en: You can select stories in the sidebar, and the app will show them
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select a story in the menu, the app will show it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bdad9c0b-3193-40df-bf36-ff2cd0983ab6.png)'
  prefs: []
  type: TYPE_IMG
- en: The app shows the story you picked in the browser
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also select which story to show in the app itself by pressing the hamburger
    menu at the top left of the preceding screenshot. The resulting selection menu
    is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca2bb2b9-4837-43d3-b0ee-28281efa21d9.png)'
  prefs: []
  type: TYPE_IMG
- en: The app also lets you select what story to show
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can see the actions in the browser. Let''s imagine you open the
    story for the country list with three countries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fdcfc50d-9a8a-4ae5-a6da-dd6cd39b0352.png)'
  prefs: []
  type: TYPE_IMG
- en: The country selector lets you interact with actions
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on Brazil, the browser will show the fired actions. First, we can
    see call:getCountries when the `getCountries()` callback is called, and then click:country when
    you click on an option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db13f2c1-3c0b-438d-8046-6b6ffd1625ef.png)'
  prefs: []
  type: TYPE_IMG
- en: As with web apps, you can interact with stories and see what actions were called
    with which parameters
  prefs: []
  type: TYPE_NORMAL
- en: So, we've seen that adding stories is practically the same as for the web, and
    you get an extra tool to help in development—you should take this into account.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging your app with react-native-debugger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging a RN app is harder than working with a web app, because everything
    you want to do is done remotely; you cannot just run a fully powered debugger
    in your mobile device. There are several tools that can help you out with this,
    and in this section, we'll consider a "catch-all" tool, `react-native-debugger`,
    that includes a powerful trio of utilities, with which most (if not all) of your
    requirements should be fulfilled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic tools you''ll require for thorough debugging (and we already met
    them earlier) would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Chrome Developer Tools, at [https://developers.google.com/web/tools/chrome-devtools/](https://developers.google.com/web/tools/chrome-devtools/),
    for access to the console and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`React devtools` (in its standalone version) at [https://github.com/facebook/react-devtools](https://github.com/facebook/react-devtools),
    for dealing with components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Redux DevTools` extension, at [https://github.com/zalmoxisus/redux-devtools-extension](https://github.com/zalmoxisus/redux-devtools-extension),
    for inspecting actions and state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You could, of course, install each of them separately, and work with the trio,
    but having all of them together is undoubtedly simpler, so we'll follow that track.
    So, let's get on with debugging our code in this recipe!
  prefs: []
  type: TYPE_NORMAL
- en: You can read about the basics of RN debugging at [http://facebook.github.io/react-native/docs/debugging](http://facebook.github.io/react-native/docs/debugging),
    and study `react-native-debugger` at [https://github.com/jhen0409/react-native-debugger](https://github.com/jhen0409/react-native-debugger).
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll have to install several packages in order to get everything to work. First,
    just get the `react-native-debugger` executable from its releases page at [https://github.com/jhen0409/react-native-debugger/releases](https://github.com/jhen0409/react-native-debugger/releases).
    Installation is just a matter of unzipping the file you downloaded; execution
    simply requires running the executable within the unzipped directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll require a couple of packages in order to connect our app, which be get
    by running either on a simulator or on an actual device, with `react-native-debugger`.
    Let''s install these with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We now have everything we need. Let's look at a few details on integrating the
    tools (mostly, the Redux debugger) with our app, and we'll be ready to start debugging.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to set up our app so that we can use our debugging tools.
    To start with, we''ll require a simple change in the store creation code, adding
    a couple of lines, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Just for the sake of it—so that we can actually get some debugging messages
    – I added sundry `console.log()` and `console.error()` calls throughout the code.
    For consistency, I wanted to use `debug` (from [https://www.npmjs.com/package/debug](https://www.npmjs.com/package/debug)),
    as we did earlier in the book, but it won''t work, because it requires `LocalStorage`,
    and in RN you get `AsyncStorage` instead, with a different API. Just as an example,
    we''ll look at some log output from `world.actions.js`. I didn''t bother logging
    the output from successful API calls, because we''ll be getting that through `react-native-debugger`,
    as we''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We have everything in place; let's try it out.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, run your app with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'On your device (whether real or emulated), access the developer menu by shaking
    (on an actual device) or using command + *m* for macOS or *Ctrl* + *M* for Windows
    or Linux. At the very least, you want to enable remote JS debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b4d9410-50e0-43b2-aa9a-5aae78aa05c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the device's developer menu to enable remote JS debugging
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `react-native-debugger` app by clicking on the executable you
    downloaded. If nothing happens, even after reloading the app, then the problem
    is surely due to a different port being set: in the menu, select Debugger, then New
    Window, and pick port 19001, and everything should be fine. When you start the
    app, it should look like the following screenshot. Notice all our logs on the
    right of the screen, the first `Redux` actions in the top left, and the React
    tools in the bottom left (and if you don''t care for some of these tools, right-click
    on the screen to hide any of the three):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58bf756b-f41f-4a72-b8d2-9c97f0f96783.png)'
  prefs: []
  type: TYPE_IMG
- en: Upon successful connection, you'll see the three tools in react-native-debugger
    running at once
  prefs: []
  type: TYPE_NORMAL
- en: 'If you check the Network tab, you''ll see that the API calls from the app don''t
    appear by default. There''s a simple workaround for this: right-click on `react-native-debugger`,
    choose Enable network inspection, then right-click on the Chrome Developer tools
    and select Log  XMLHttpRequests, and all calls will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc2d3c4a-f7e0-4d00-b545-d04b780a354e.png)'
  prefs: []
  type: TYPE_IMG
- en: API calls are not displayed by default, but can be enabled by right-clicking
    on the react-native-debugger screen
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also inspect `AsyncStorage`—see the following screenshot. I opted to
    hide `React` and `Redux DevTools`, as I mentioned previously, just for clarity. Since
    our app doesn''t actually use `AsyncStorage`, I fudged it a bit: note that you
    can use a `require()` function on any module, and then use it directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee47bfc1-178f-47e8-9aac-9536ed3b0234.png)'
  prefs: []
  type: TYPE_IMG
- en: Examining AsyncStorage with the RN debugger
  prefs: []
  type: TYPE_NORMAL
- en: What else can we say? Not much, actually, since these tools are basically the
    same that we saw when using `React` for the web. The interesting detail here is
    that you get all of them together, instead of having to deal with many separate
    windows. Let's finish this chapter by considering an alternate tool, which you
    might just happen to prefer.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging in an alternate way with Reactotron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While it''s possible that `react-native-debugger` will work for most of your
    needs, there''s another package that, while coinciding with many features, also
    adds some new ones, or at least give a twist to old ones: Reactotron. This tool
    can also work with plain `React`, but I opted to show it here with RN, because
    it''s more likely you''ll require it. After all, `React` tools for the web are
    easy to use without any undue complications, while RN debugging is, as we''ve
    seen, a bit more of a challenge. Reactotron is said to be more efficient than
    `react-native-debugger`, but I won''t attest to that: check it out, and be aware
    that **Your mileage may vary** (**YMMV**). Let''s finish this chapter with a recipe
    to demonstrate this alternative way of debugging.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll need a pair of packages: the basic Reactotron one, along with `reactotron-redux`
    to help with Redux. Install them with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Reactotron can work with `redux-sagas` instead of `redux-thunk`, and even with
    MobX, instead of Redux. Read more about this at [https://github.com/infinitered/reactotron](https://github.com/infinitered/reactotron).
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll also require the native executable tool that connects to your app. Go
    to the releases page at [https://github.com/infinitered/reactotron/releases](https://github.com/infinitered/reactotron/releases) and
    get the package that matches your environment: in my particular case, I just downloaded
    and unzipped the `Reactotron-linux-x64.zip` file. For macOS users, there is another
    possibility: check out [https://github.com/infinitered/reactotron/blob/master/docs/installing.md](https://github.com/infinitered/reactotron/blob/master/docs/installing.md).'
  prefs: []
  type: TYPE_NORMAL
- en: After installing all of this, we are ready to prepare our app; let's do so now!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s a fact that you can use both Reactotron and `react-native-debugger` at
    the same time, but in order to avoid mixing things up, let''s have a separate
    `App.reactotron.js` file and a few other changes. We have to follow a few simple
    steps. First, let''s begin by adding a new script to `package.json` in order to
    enable running our app with Reactotron:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, let''s configure the connection and plugins. We''ll create a `reactotronConfig.js`
    file to establish the connection with `Reactotron`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few details about some of the values and options in the previous
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`192.168.1.200` is the IP for my machine, and `9090` is the suggested port
    to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ignoreUrls` option for networking gets rid of some calls made by Expo,
    but not our own code, making for a clearer session.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `isActionImportant` function lets you highlight some actions so that they
    will be more noticeable. In our case, I opted to pick out the `countries:success`
    and `regions:success` actions, both of which include `"success"` in their types,
    but of course, you could select any others as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Reactotron` also includes logging functions, so I added three (useless!) calls
    just to see how they appear in our debugging. I didn''t want to show all the logging
    we added, but you would probably want to use the following commands so all your
    logging will go to `Reactotron` instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to adapt our store so that it will work with the `reactotron-redux`
    plugin. I opted to make a copy of `store.js`, called `store.reactotron.js`, with
    the following necessary changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Just for variety, and to be able to see how `Reactotron` handles `AsyncStorage`,
    I added a few (totally useless!) lines to set a few items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s make some changes to our `App.js` file. These changes are minor:
    simply include the configuration file, and use the store I just adapted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now, we're ready; let's see it work!
  prefs: []
  type: TYPE_NORMAL
- en: For full documentation on `Reactotron`, check out the developers' web page at [https://github.com/infinitered/reactotron](https://github.com/infinitered/reactotron). `Reactotron`
    includes more plugins that can help you when working with `Redux` or `Storybook` to
    do benchmarking of slow functions, or to log messages, so you may find many things
    of interest there.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use `Reactotron`, just start it (double-clicking should do the job) and
    you''ll get the initial screen shown in the following screenshot. The tool will
    just wait for your app to connect; sometimes, it may take more than one attempt
    to get the initial connection started, but after that, things should move along
    swimmingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53889851-b482-4fab-81f1-b32dbc58e568.png)'
  prefs: []
  type: TYPE_IMG
- en: The initial screen for Reactotron shows it waiting for connections
  prefs: []
  type: TYPE_NORMAL
- en: 'After you start the application, you will see that it made a connection. `Reactotron`
    shows some details: for example, the device is on Android, running version 8.1.0,
    and we can also see the size and scale of the device. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67fd3435-06d3-4250-b1c4-3271e18a3e31.png)'
  prefs: []
  type: TYPE_IMG
- en: After a connection is made, you can see the details about the device
  prefs: []
  type: TYPE_NORMAL
- en: 'When the app starts, we get something like the following screenshot. Notice
    the highlighted action (`countries:success`), the ASYNC STORAGE logs, and the
    three lines from old movies that we added (trivia time, for movie buffs: who said
    those three lines?):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e2f9fe5-cab8-43b9-8185-fa74553a599a.png)'
  prefs: []
  type: TYPE_IMG
- en: When our app starts to run, we get all these debugging texts in the Reactotron
    window
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see the state of the `Redux` store—see the following screenshot.
    I inspected `deviceData` and one of the countries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cef3163e-ae4e-443a-abcb-6290027d3776.png)'
  prefs: []
  type: TYPE_IMG
- en: You can examine the Redux store to see what was put in it
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, I select Austria in the app. We can examine the API call that went
    out, and also the action that was dispatched afterwards; see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/317cfaa2-af06-4c2b-97e0-41579c46d748.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The results of selecting Austria in our app: we can examine the API call and
    the Redux actions as well. Here, we see the'
  prefs: []
  type: TYPE_NORMAL
- en: nine regions of Austria, and the details for the fifth one, Salzburg, of Mozart
    fame
  prefs: []
  type: TYPE_NORMAL
- en: '`Reactotron` has, as we said, some different features, and for some purposes,
    it may suit you better than `react-native-debugger`, so it''s a worthwhile inclusion
    in your arsenal of debugger tools.'
  prefs: []
  type: TYPE_NORMAL
