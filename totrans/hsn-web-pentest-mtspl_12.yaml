- en: Pentesting CMSes - Joomla
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we learned about how to perform **Penetration Testing**
    (**pentesting**) on WordPress. Just like WordPress, there is another **Content
    Management System** (**CMS**) that is widely used by organizations to manage their
    website portals – Joomla. In this chapter, we will learn about Joomla, its architecture,
    and the modules that can be used to test the security of a Joomla-based website.
    The following are the topics that we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Joomla
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Joomla architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reconnaissance and enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating Joomla plugins and modules using Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing vulnerability scanning with Joomla
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joomla exploitation using Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joomla shell upload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical prerequisites for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Metasploit Framework ([https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joomla CMS ([https://www.joomla.org/](https://www.joomla.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An installed database; MySQL is recommended ([https://www.mysql.com/](https://www.mysql.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic knowledge of Linux commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Joomla
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joomla is a free, open source CMS created by Open Source Matters, Inc. for the
    publication of web content. It is based on a **Model-View-Controller** (**MVC**)
    web application framework, which can be used independently of the CMS. Joomla
    was founded on August 17, 2005, as a result of a Mambo fork.
  prefs: []
  type: TYPE_NORMAL
- en: 'Joomla has thousands of extensions and templates and a lot of them are available
    free of charge. Some of Joomla''s features include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It is multilingual.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides out-of-the-box **Search Engine Optimization** (**SEO**) and is **Search
    Engine Friendly** (**SEF**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is free to use under a **General Public License** (**GPL**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has access control lists that allow you to manage the users of a website,
    as well as different groups.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has menu management, so as many menus and menu items as required can be created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have covered a short introduction to Joomla, let's look at its architecture
    to dive a little deeper into the software.
  prefs: []
  type: TYPE_NORMAL
- en: The Joomla architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Joomla''s architecture is based on the MVC framework. We can divide the architecture
    into four major parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The display**: This is the frontend, which a user sees when they visit the
    website. It contains the HTML and CSS files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensions**: Extensions can be further sub-divided into five major types:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Components**: Components can be thought of as mini-applications; they are
    intended for both users and administrators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modules**: These are small and flexible extensions that can be used to render
    pages. One example is a login module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins**: These are more advanced extensions and are also known as event
    handlers. These events can be triggered from anywhere and execute the plugin associated
    with that event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Templates**: Templates take care of how the website looks. There are two
    types of templates that are used—frontend and backend. The backend template is
    used by the administrators to monitor functions, whereas the frontend template
    presents the website to visitors/users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Languages**: These handle the translation of the website text. Joomla supports
    over 70 languages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Framework**: The framework consists of the Joomla core. These are the PHP
    files that take care of the major functionality of the application, such as configuration
    files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database**: The database stores the user information, content, and so on.
    Joomla supports MySQL, **Microsoft Server SQL** (**MSSQL**), and PostgreSQL, among
    others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file and directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Directory names in Joomla are very simple. We can guess a directory''s content
    just by looking at its name. Joomla files and directories have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Root`: This is where we extract Joomla''s source code. It contains an index
    file that executes the installation process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Administrator`: This folder contains all the files for Joomla''s administrator
    interface (components, templates, modules, plugins, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Cache`: This folder contains files cached by Joomla to increase the performance
    and efficiency of the CMS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Components`: This folder contains all the user components (excluding the administrator),
    including login and search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Images`: This directory contains all the images used by the Joomla interface,
    as well as those uploaded by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Includes`: This directory contains the core Joomla files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Installation`: This folder contains the files needed to install Joomla. It
    should be deleted after installation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Language`: This folder contains all the language files. Joomla stores translations
    in a simple INI-based file format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Libraries`: This folder contains the entire core libraries, as well as Joomla''s
    third-party libraries. It contains files describing the filesystem, database,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Logs`: This folder contains the application logs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Media`: This directory stores all the media files, such as flash and videos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Modules`: Modules are placed in a Joomla template, such as panels. This folder
    contains all the files for the frontend modules. Some common modules include login,
    news, and poll.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Plugins`: This folder contains all the plugin files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Templates`: This folder contains all the frontend template files. Each template
    is organized in the folder by name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tmp`: This folder stores the temporary files and cookies that are used by
    the administrator and user interface of Joomla.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have now learned about the Joomla architecture. Next, we will look at reconnaissance
    and enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance and enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before using Joomla, the first step to carry out is to confirm whether the
    web application is powered by it. There are various ways of detecting the installation
    of the CMS, some of which are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: By searching for `<meta name="generator" content="Joomla! - Open Source Content
    Management" />`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By exploring the `X-Meta-Generator HTTP` header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By checking `RSS/atom feeds: index.php?format=feed&type=rss/atom`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By using Google Dorks: `inurl:"index.php?option=com_users`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By looking for the `X-Content-Encoded-By: Joomla` header'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By looking for `joomla.svg/k2.png/SOBI 2.png/SobiPro.png/VirtueMart.png`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's find out which version of Joomla is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Version detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know enough about Joomla, we can start with CMS pentesting (which
    we learned about in the previous chapter, [Chapter 8](e13c4d6e-8576-4fc0-aa78-aa4d54536bca.xhtml),
    *Pentesting a CMS – WordPress*). The first step in pentesting the Joomla CMS is
    to find the version installed on the target server. The following are the ways
    that we can detect which version is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Detection via a meta tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detection via server headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detection via language configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detection via `README.txt`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detection via the `manifest` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detection via unique keywords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detection via a meta tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `generator` meta tag is generally described as the software that is used
    to generate a document or web page. The exact version number is disclosed in the
    `content` attribute of the meta tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82ef2e82-24d6-4cd3-9a27-74f670398713.png)'
  prefs: []
  type: TYPE_IMG
- en: Joomla-based websites often have this tag in their source, as shown in the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via server headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Joomla version number is frequently disclosed in the response headers of
    the server that the application is hosted on. The version can be disclosed in
    the `X-Content-Encoded-By` header, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3ee649c-071d-4f66-ad7b-ce5974b1332a.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will look at detection via language configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via language configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Joomla supports over 70 languages. Each language pack has an XML file that
    discloses the version information, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b38d2ea2-3445-401a-87b8-f27f8df1dba8.png)'
  prefs: []
  type: TYPE_IMG
- en: This page can be accessed through the `/language/<language-type>/<language-type>.xml`
    page. In this case, we searched for the British English (`en-GB`) format.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via README.txt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the easiest and most basic technique. All we have to do is visit the
    `README.txt` page and we will see the version number, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84a276d9-a0a7-4831-a9ff-950000598200.png)'
  prefs: []
  type: TYPE_IMG
- en: This file contains various pieces of information pertaining to first-time users
    of Joomla.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via the manifest file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Joomla `manifest` file, located in `/administrator/manifests/files/joomla.xml`,
    contains basic information relating to the CMS installed on the server, along
    with the modules that are running, the version number, the installation date,
    and so on. This is also a good place to look for the version number of the CMS
    that is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec64c9e9-b139-4460-8e4c-f04559707ac7.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the `manifest` file containing the version number.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via unique keywords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another way of determining the version of Joomla running on the web server
    is to look for specific keywords in the following files. These keywords are version-specific
    and some of them are listed in the table following this code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The unique keyword details according to their Joomla version are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Joomla version** | **Unique keywords** |'
  prefs: []
  type: TYPE_TB
- en: '| Version 2.5 | `MooTools.More={version:"1.4.0.1"}` |'
  prefs: []
  type: TYPE_TB
- en: '| Version 1.7 | `21322 2011-05-11 01:10:29Z dextercowley``22183 2011-09-30
    09:04:32Z infograf768``21660 2011-06-23 13:25:32Z infograf768``MooTools.More={version:"1.3.2.1"}`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Version 1.6 | `20196 2011-01-09 02:40:25Z ian``20990 2011-03-18 16:42:30Z
    infograf768``MooTools.More={version:"1.3.0.1"}` |'
  prefs: []
  type: TYPE_TB
- en: '| Version 1.5 | `MooTools={version:''1.12''}``11391 2009-01-04 13:35:50Z ian`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Version 1.0 | `47 2005-09-15 02:55:27Z rhuk``423 2005-10-09 18:23:50Z stingrey``1005
    2005-11-13 17:33:59Z stingrey``1570 2005-12-29 05:53:33Z eddieajau``2368 2006-02-14
    17:40:02Z stingrey``4085 2006-06-21 16:03:54Z stingrey``4756 2006-08-25 16:07:11Z
    stingrey``5973 2006-12-11 01:26:33Z robs``5975 2006-12-11 01:26:33Z robs` |'
  prefs: []
  type: TYPE_TB
- en: 'The following screenshot shows one of the keywords in the `en-GB.ini` file,
    which implies that the version is 1.6:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bff5130-8203-495b-9ba7-82f577678c0b.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will look at carrying out reconnaissance on Joomla using
    Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Joomla reconnaissance using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have learned about the different ways of detecting a Joomla-based
    target, we can perform reconnaissance using the Metasploit modules that are already
    provided with the Metasploit framework. The first module that we''ll use is the
    `joomla_version` module. We can use the `use auxiliary/scanner/http/joomla_version`
    command, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60685918-9370-456c-9dc2-5ddebea2de7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After setting up all the information required by the module (in other words,
    RHOSTS and RPORT), we can execute the module using the `run` command, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6460087b-34ed-4416-bed3-c71a480711fb.png)'
  prefs: []
  type: TYPE_IMG
- en: This module will return the Joomla version running on the target instance via
    the different methods that we covered in the *Version detection* section. In the
    next section, we'll learn how to enumerate Joomla plugins and modules using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating Joomla plugins and modules using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also use inbuilt auxiliaries of Metasploit to perform the enumeration
    of Joomla. The following are the categories for enumerating Joomla that are available
    in Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: Page enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugin enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first one is **page enumeration**. This auxiliary scans for common pages
    that exist in Joomla, such as `readme` and `robots.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the auxiliary, we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We then see the various module options by using the `show options` command,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3c98ba2-b630-4430-887a-e57582d667e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We set `RHOSTS` and `RPORT` and run the module. The pages discovered will be
    printed once the module is complete, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f939e755-910b-4602-a7b3-7efb23577547.png)'
  prefs: []
  type: TYPE_IMG
- en: The next step is to enumerate the Joomla plugins using another Metasploit module.
  prefs: []
  type: TYPE_NORMAL
- en: Plugin enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another auxiliary for Metasploit that can be used to enumerate plugins is `joomla_plugins`.
    The auxiliary uses a word list to find directory paths to detect various plugins
    used by Joomla. We can execute the following command to use the plugin enumeration
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b689ce7-db23-49cd-9092-905bec42526b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output of `show options` is shown in the preceding screenshot. Once the
    module is executed, the script returns the name of the plugins it has discovered,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78a520b0-7398-4a09-af7f-0ace7b588f47.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, the word list at [https://github.com/rapid7/metasploit-framework/blob/master/data/wordlists/joomla.txt](https://github.com/rapid7/metasploit-framework/blob/master/data/wordlists/joomla.txt) is
    used by the auxiliary; we can use a custom word list as well. In the next section,
    we will use Joomla to perform vulnerability scanning.
  prefs: []
  type: TYPE_NORMAL
- en: Performing vulnerability scanning with Joomla
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit does not yet have an inbuilt module for Joomla's specific vulnerability
    assessment. This gives us two options; either make a wrapper or plugin for Joomla
    ourselves, as we did for WordPress in the previous chapter, or use different tools
    that are already available online, such as JoomScan or JoomlaVS. In this section,
    we will look at a great tool that can be used to perform a vulnerability assessment
    of Joomla.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following description is included on the official Joomla GitHub wiki page:'
  prefs: []
  type: TYPE_NORMAL
- en: JoomlaVS is a Ruby application that can help automate assessing how vulnerable
    a Joomla installation is to exploitation. It supports basic fingerprinting and
    can scan for vulnerabilities in components, modules, and templates, as well as
    vulnerabilities that exist within Joomla itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'JoomlaVS can be downloaded from: [https://github.com/rastating/joomlavs](https://github.com/rastating/joomlavs).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool can be run by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the tool without any arguments will print the `help` section, as in
    the following screenshot. The tool supports different scan types, such as scanning
    just the modules, templates, or components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5bde690-ac4d-4083-9705-1f1af0e2d550.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To perform a scan on a URL for all extensions, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The tool will start running and the details of everything it discovered will
    be printed on the screen, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/749ba025-2bdd-4480-a3d7-14ff526b45ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we have our information about the available exploits, plugins, and version
    numbers, we can proceed to the exploitation process.
  prefs: []
  type: TYPE_NORMAL
- en: Joomla exploitation using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once all the enumeration and version detection is done, it''s time for the
    exploitation. In this section, we will look at some of the ways that Joomla can
    be exploited. The first one is the well-known SQL injection vulnerability applied
    in Joomla to gain **Remote Code Execution** (**RCE**). A Metasploit module is
    available for this and we can use it by executing the `use exploit/unix/webapp/joomla_comfields_sqli_rce`
    command, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d800eb99-cc46-4f88-888e-e82771c15cfd.png)'
  prefs: []
  type: TYPE_IMG
- en: Before running the exploit, let's see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How does the exploit work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following SQL query is sent to the server, which returns a Base64-encoded
    value of the table name prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/175502cd-5b6a-477e-860a-0e6eade8e1d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The screenshot of the request sent to the web server can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33683472-0583-44e1-821d-074d99fd1c4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The web server returns the Base64-encoded value of the table name prefix, shown
    here in between `ABC`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d256823-36e9-4d9c-8fc9-284a588ff85b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot displays the SQL query used to dump the user''s session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa19bb5a-5181-4a86-baf9-140f996e7ce7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The request is sent using the `send_request_cgi()` method. The server will
    give an `Internal Server Error` error (code `500`), but we can find the session
    using the hex values—in other words, `#{start_h}` and `#{fin_h}`—as a regex from
    the output. The following screenshot shows the code that looks for the session
    in between the hex values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/722f98bd-9f1f-45aa-bae1-d37bebb5b1f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the SQL query that is sent to the server to
    dump the session information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/410b4f1a-403d-4459-a341-f7ea5d58b63c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the web server''s response, disclosing the user''s session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41f1f4b3-c48a-4d73-969c-3e77d866b616.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the following screenshot, the session was retrieved from the
    database, but in our case, we faced an issue; there appeared to be a character
    limit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/520c75b5-e6ea-4042-8d12-3642c2ebed67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the value in the database, we can see that not all the characters
    were returned, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bc9e70e-01c8-4ab4-b180-4595f2bce4a9.png)'
  prefs: []
  type: TYPE_IMG
- en: The final three characters with a hex value of `ABC` at the end were not displayed
    on the screen. To resolve this issue, we can use a workaround, where instead of
    using a single query to retrieve the session from the database, we split the session
    into two parts using the `MID()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first SQL session payload `1` that needs to be used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6cfd060-c8b2-466f-9284-9ebc8ca73aa8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result of executing the preceding SQL payload `1` is given in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14d81c3c-c996-49d4-ae29-f0d8d387f41f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the second SQL session payload that we need to use is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35074079-65cf-465d-b0fb-39a9517c5b64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result for executing the preceding SQL payload `2` is given in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c331c46-13d5-4910-99a2-242eb36e4c71.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we just need to concatenate the two outputs that we retrieved by executing
    payloads `1` and `2` from the preceding steps into one. Let''s add the code to
    the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9826aad9-f0ef-4aac-aea7-5c62a9216c64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the code has been modified, let''s save the file and execute the module
    to see whether it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c526dd4-ffc5-4a95-adfa-02a201b87b07.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the preceding screenshot, we were able to retrieve the session
    successfully and, using the session stored in the database, we opened up a Meterpreter
    session!
  prefs: []
  type: TYPE_NORMAL
- en: Joomla shell upload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand where a shell is uploaded in the previously mentioned exploit,
    we will upload a basic command execution shell manually from the administrator
    panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'After exploitation, once we have logged in successfully as an admin, we can
    upload a shell from the templates menu. The following screenshot shows the administration
    panel of Joomla:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f3daf8f-deb5-43d1-865c-03c1ef5d159f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the panel''s menu, we click on Extensions | Templates | Templates, as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb7f8860-6a33-4368-9547-996a7f5fe653.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are redirected to the Templates page, where all the templates currently
    uploaded are listed, including the one being currently used. It''s always best
    not to touch the current template as this may cause the administrators to notice
    the change and discover our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b30ff10-0af6-49fd-bc55-c8b4cb80fed2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot shows the list of templates. We will choose Protostar,
    so click on the template and you will then be redirected to the next page where,
    on the left-hand side, all of the template''s PHP pages are listed, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1bb9f06-3347-4e52-8e4d-43f2a1dd4b3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We click on index.php and add our custom PHP one-liner code to the file. This
    acts as a backdoor and will allow us to execute system-level commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows that the first line of the index now has our
    backdoor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44711f34-0857-42a5-8816-3e4eab8efa0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the changes are saved, we can browse our backdoor at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows that our command has been executed successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f8be83b-b9e5-48f8-b61c-d476a4af7543.png)'
  prefs: []
  type: TYPE_IMG
- en: The exploitation of Joomla is over once we have given the proof of concept to
    the client. However, going beyond the normal exploitation method and getting inside
    the network is something that needs to be discussed with the client in the kick-off
    meeting that heralds the project. As pen-testers, we have to abide by the scope
    that is defined by the client.
  prefs: []
  type: TYPE_NORMAL
- en: If any such payload is uploaded for the sole reason of getting the proof of
    concept, we are obliged to remove these backdoors once the exploitation is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the Joomla architecture and its files and
    directory structure. Then, we moved on to the reconnaissance process and understood
    different ways of finding a Joomla instance and its version number. We also looked
    at tools and scripts that automate the process for us. Finally, we studied the
    in-depth process of Joomla exploitation and how the exploitation works using examples
    of previously discovered public exploits.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn about performing a pen test on another popular
    CMS—Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Can I install Joomla on any operating system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can I create my own Metasploit modules in case the existing ones are not able
    to find the Joomla version?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Metasploit module is not able to detect the Joomla version installed. Is
    there any other way of detecting it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I was able to upload a shell by exploiting the Joomla upload vulnerability.
    Is it possible to backdoor the CMS in any stealthy way?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A list of vulnerable extensions in Joomla can be found at [https://vel.joomla.org/live-vel](https://vel.joomla.org/live-vel).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about the Joomla architecture can be found at [https://docs.joomla.org/Archived:CMS_Architecture_in_1.5_and_1.6](https://docs.joomla.org/Archived:CMS_Architecture_in_1.5_and_1.6).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
