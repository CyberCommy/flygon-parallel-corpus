- en: Deploying a Full-Stack App to the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the functionality of Vuebnb is complete, the final step is to deploy
    it to production. We'll use two free services, Heroku and KeyCDN, to share Vuebnb
    with the world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to the Heroku cloud platform service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Vuebnb to Heroku as a free app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How CDNs improve the performance of full-stack apps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating a free CDN with Laravel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building assets in production-mode for performance and security
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Heroku is a cloud platform service for web applications. It's immensely popular
    among developers due to the simplicity and affordability it offers for getting
    apps online.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Heroku applications can be made in a variety of languages including PHP, JavaScript,
    and Ruby. In addition to a web server, Heroku offers a variety of add-ons, such
    as databases, email services, and application monitoring.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Heroku apps can be deployed for free, though there are certain limitations,
    for example, the app will *sleep* after periods of inactivity, making it slow
    to respond. These limitations are lifted if you upgrade to a paid service.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: We will now deploy Vuebnb to the Heroku platform. The first step is to create
    an account by visiting the following URL: [https://signup.heroku.com](https://signup.heroku.com).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: CLI
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most convenient way to use Heroku is from the command line. Visit the following
    URL and follow the steps for installation: [https://devcenter.heroku.com/articles/heroku-cli](https://devcenter.heroku.com/articles/heroku-cli).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve installed the CLI, log in to Heroku from the Terminal. After verifying
    your credentials you''ll be able to use the CLI to create and manage your Heroku
    apps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating an app
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now create a new Heroku app. New apps require a unique name, so replace `vuebnbapp` in
    the command below with your own choice. The name will be part of the app''s URL,
    so make sure it''s short and memorable:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the app is created you will be given the URL, for example: [https://vuebnbapp.herokuapp.com/](https://vuebnbapp.herokuapp.com/).
    Put it in the browser and you''ll see this default message:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1df365a5-0d94-4368-b8e6-d0a053a05f7c.png)Figure 10.1\. Heroku default
    messageNew Heroku apps are assigned a free domain name, for example: `appname.herokuapp.com`, but
    you can also use your own custom domain. See the Heroku Dev Center for more information
    at [https://devcenter.heroku.com](https://devcenter.heroku.com).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Source code
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deploy code to your Heroku app you can use Heroku''s Git server. When you
    created your app with the CLI, a new remote repository was automatically added
    to your Git project. Confirm this with the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once we've completed the configuration of our app we'll make our first push.
    Heroku will use this code to build the app.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Heroku apps have an ephemeral filesystem that only includes code from the most
    recent Git push. This means Vuebnb will not have its `.env` file present since
    this file is not committed to the source code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Environment variables are instead set by Heroku CLI, with the `heroku config` command.
    Let''s begin by setting the app key. Replace the following value with your own
    app key:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating a database
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need a database for our production app. The ClearDB add-on for Heroku provides
    a MySQL cloud database that is easy to set up and connect.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: This add-on is free for a limited number of transactions each month. However,
    you will need to verify your Heroku account before you can add a database, which
    means you'll need to supply credit card details, even if you use the free plan.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: To verify your Heroku account, go to this URL: [https://heroku.com/verify](https://heroku.com/verify).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve done that, create a new ClearDB database with this command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Default string length
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, ClearDB uses MySQL version 5.5, while our Homestead
    database is MySQL 5.7\. The default string length in MySQL 5.5 is too short for
    Passport authorization keys, so we need to manually set the default string length
    in the app service provider before we run the database migrations in our production
    app.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '`app/Providers/AppServiceProvider.php`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Configuration
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you installed the ClearDB add-on, a new environment variable, `CLEARDB_DATABASE_URL`, was
    automatically set. Let''s read its value using the `heroku config:get` command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In a Laravel project, the database is connected by setting values for `DB_HOST` and `DB_DATABASE`.
    We can extract the values for these from the `CLEARDB_DATABASE_URL` variable,
    which is in the form:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you''ve extracted the values, set the applicable environment variables
    in the Heroku app:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Configuring a web server
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web server configuration for Heroku is done via a special file called `Procfile` (no
    file extension) that lives in the root of your project directory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now create that file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each line of the `Procfile` is a declaration that tells Heroku how to run various
    pieces of your app. Let's create a `Procfile` for Vuebnb now and add this single
    declaration.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '`Procfile`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The part to the left of the colon is the process type. The `web` process type
    defines where HTTP requests are sent in the app. The part to the right is the
    command to run or start that process. We will route requests to an Apache server
    that points to the *public* directory of our app.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Passport keys
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 9](046ff094-aa7d-43d0-9f9b-444652bcaf1d.xhtml), *Adding a User Login
    and API Authentication with Passport*, we created encryption keys for Passport
    with the `php artisan passport:install`command. These keys are stored in text
    files that can be found in the `storage` directory.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Encryption keys should not be under version control, as this would make them
    insecure. Instead, we need to regenerate these keys on each deploy. We can do
    this by adding a post-install script to our composer file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '`composer.json`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Deployment
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve done all the necessary set up and configuration, so we''re ready now
    to deploy Vuebnb. Make sure you commit any file changes to your Git repository
    and push to the master branch of the Heroku Git server:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'During the push you''ll see the output similar to the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ad3ba19b-a5b8-411e-a8a2-b4e2dac68549.png)Figure 10.2\. Git output
    after a push to HerokuSomething wrong with your Heroku app that needs debugging? `heroku
    logs --tail` will show you the Terminal output from your Heroku app. You can also
    set the `APP_DEBUG=true` environment variable to debug Laravel. Remember to set
    it back to `false` when you''ve finished, though.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Migration and seed
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the deploy completes, we will migrate our tables and seed the database.
    You can run Artisan and other app commands on the production app via Heroku CLI
    by preceding them with `heroku run`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once the migration and seeding are complete, we can attempt to view the app
    via the browser. The page should be served but you''ll see these mixed content
    errors:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f0f43db3-8576-44f5-a20d-4e2f75127fb5.png)Figure 10.3\. Console errors'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Fixing these errors won't help much, as the files referred to are not on the
    server anyway. Let's deal with that issue first.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Serving static assets
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since our static assets, that is, CSS, JavaScript and image files, are not in
    version control, they have not been deployed to our Heroku app server.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: This is okay, though, as a better option is to serve them via a CDN. In this
    part of the chapter, we'll set up an account with KeyCDN and serve our static
    assets from there.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Content distribution networks
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a server receives an incoming HTTP request, it usually responds with one
    of two types of content: dynamic or static. Dynamic content includes web pages
    or AJAX responses containing data specific to that request, for example, a web
    page with user data inserted via Blade.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Static content includes images, JavaScript, and CSS files that do not change
    between requests. It's inefficient to use a web server for serving static content
    since it unnecessarily engages the server resources to simply return a file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 静态内容包括图片、JavaScript和CSS文件，在请求之间不会改变。使用Web服务器提供静态内容是低效的，因为它不必要地占用服务器资源来简单地返回一个文件。
- en: A **Content Delivery Network** (**CDN**) is a network of servers, usually in
    different locations around the world, that are optimized for delivering static
    assets more quickly and cheaply than your typical web server.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容传送网络**（**CDN**）是一个服务器网络，通常位于世界各地不同位置，专门用于更快、更便宜地传送静态资产。'
- en: KeyCDN
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: KeyCDN
- en: There are many different CDN services available, but in this book we'll use
    KeyCDN as it offers an easy-to-use service with a free usage tier.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的CDN服务可用，但在本书中，我们将使用KeyCDN，因为它提供了一个易于使用的服务，并且有免费使用层。
- en: Let's sign up for an account by visiting this link and following the instructions: [https://app.keycdn.com/signup](https://app.keycdn.com/signup).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问此链接并按照说明进行注册：[https://app.keycdn.com/signup](https://app.keycdn.com/signup)。
- en: Once you have created and confirmed a new KeyCDN account, add a new zone by
    visiting the following link. *Zones* are simply collections of assets; you'd probably
    have a different zone for each website you're managing with KeyCDN. Call your
    new zone *vuebnb* and make sure it's a *Push* zone type, which will allow us to
    add files with FTP: [https://app.keycdn.com/zones/add](https://app.keycdn.com/zones/add).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建并确认了一个新的KeyCDN账户，通过访问以下链接添加一个新的区域。*区域*只是资产的集合；你可能为你用KeyCDN管理的每个网站创建一个不同的区域。将你的新区域命名为*vuebnb*，并确保它是*推送*区域类型，这将允许我们使用FTP添加文件：[https://app.keycdn.com/zones/add](https://app.keycdn.com/zones/add)。
- en: Uploading files with FTP
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用FTP上传文件
- en: We will now push our static assets to the CDN with FTP. You could use an FTP
    utility such as Filezilla to do this, but I've included a Node script with the
    project, `scripts/ftp.js`, that allows you to do it with a simple command.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用FTP将静态资产推送到CDN。你可以使用FTP实用程序（如Filezilla）来完成这个任务，但我已经在项目中包含了一个Node脚本`scripts/ftp.js`，可以让你用一个简单的命令来完成。
- en: 'The script requires a few NPM packages, so install those first:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本需要一些NPM包，所以首先安装这些包：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Environment variables
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境变量
- en: 'In order to connect to your KeyCDN account, the FTP script requires a few environment
    variables to be set. Let''s create a new file called `.env.node` to keep this
    configuration separate from the main Laravel project:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了连接到你的KeyCDN账户，FTP脚本需要设置一些环境变量。让我们创建一个名为`.env.node`的新文件，将这个配置与主要的Laravel项目分开：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The URL used for FTP-ing to KeyCDN is [ftp.keycdn.com](http://ftp.keycdn.com).
    The username and password will be the same as those you created an account with,
    so be sure to replace those in the values in the following code. The remote directory
    will be the same as the name of the zone you created.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 用于FTP到KeyCDN的URL是[ftp.keycdn.com](http://ftp.keycdn.com)。用户名和密码将与你创建账户时相同，所以确保在以下代码的值中替换它们。远程目录将与你创建的区域名称相同。
- en: '`.env.node`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`.env.node`：'
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Skipping images
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跳过图片
- en: The files we need to transfer to the CDN are in the `public/css`, `public/js`, `public/fonts`, and `public/images`
    directories. The FTP script has been configured to recursively copy these.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要传输到CDN的文件位于`public/css`、`public/js`、`public/fonts`和`public/images`目录中。FTP脚本已配置为递归复制这些文件。
- en: If you set the `FTP_SKIP_IMAGES` environment variable to true, however, the
    script will ignore any files in `public/images`. You'll want to do this after
    you've run the script the first time, as the images don't change and take quite
    a while to transfer.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果将`FTP_SKIP_IMAGES`环境变量设置为true，脚本将忽略`public/images`中的任何文件。你应该在第一次运行脚本后这样做，因为图片不会改变，传输需要相当长的时间。
- en: '`.env.node`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`.env.node`：'
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can see how this takes effect in `scripts/ftp.js`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`scripts/ftp.js`中看到这是如何生效的：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: NPM scripts
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NPM脚本
- en: To make it easy to use the FTP script, add the following script definitions
    to your `package.json` file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便使用FTP脚本，将以下脚本定义添加到你的`package.json`文件中。
- en: '`package.json`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`：'
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Production build
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产构建
- en: Before you run the FTP script, be sure to first build your app for production
    with the `npm run prod`command. This runs a Webpack build with the `NODE_ENV=production` environment
    variable set.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行FTP脚本之前，确保首先使用`npm run prod`命令为生产构建你的应用程序。这将使用`NODE_ENV=production`环境变量进行Webpack构建。
- en: A production build ensures your assets are optimized for a production environment.
    For example, when Vue.js is bundled in production mode, it will not include warnings
    and tips, and will disable Vue Devtools. You can see how this is achieved from
    this snippet of the `vue.runtime.common.js` module.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 生产构建确保你的资产被优化为生产环境。例如，当Vue.js在生产模式下捆绑时，它将不包括警告和提示，并且将禁用Vue Devtools。你可以从`vue.runtime.common.js`模块的这一部分看到这是如何实现的。
- en: '`node_modules/vue/dist/vue.runtime.common.js`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`node_modules/vue/dist/vue.runtime.common.js`：'
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Webpack will also run certain production-only plugins during a production build
    to ensure your bundle files are as small and secure as possible.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack在生产构建过程中还会运行某些仅限于生产环境的插件，以确保你的捆绑文件尽可能小和安全。
- en: Running the FTP script
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行FTP脚本
- en: 'The first time you run the FTP script you will need to copy all the files,
    including images. This will take some time, probably 20 to 30 minutes depending
    on your Internet connection speed:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行FTP脚本时，你需要复制所有文件，包括图片。这将需要一些时间，可能需要20到30分钟，具体取决于你的互联网连接速度：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once the transfer completes, uploaded files will be available at the zone URL,
    for example, `http://vuebnb-9c0f.kxcdn.com`. The path to a file will be relative
    to the `public` folder, for example, `public/css/vue-style.css` will be available
    at `[ZONE_URL]/css/vue-style.css`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦传输完成，上传的文件将在区域URL上可用，例如，`http://vuebnb-9c0f.kxcdn.com`。文件的路径将相对于`public`文件夹，例如，`public/css/vue-style.css`将在`[ZONE_URL]/css/vue-style.css`上可用。
- en: 'Test a few files to ensure the transfer was successful:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 测试一些文件以确保传输成功：
- en: '>![](assets/92cca9a8-5fe1-4fc2-a271-2c46b40445b0.png)Figure 10.4\. Testing
    CDN files'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Subsequent transfers can skip the images by using this command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Reading from the CDN
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now want Vuebnb to load any static assets from the CDN instead of the web
    server when in production. To do this, we're going to create our own Laravel helper
    method.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, we reference assets in our app using the `asset` helper. This helper
    returns a fully-qualified URL for that asset''s location on the web server. For
    example, in our app view we link to the JavaScript bundle file like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Our new helper, which we''ll call `cdn`, will instead return a URL that points
    to the asset''s location on the CDN:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: CDN helper
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin by creating a file called `helpers.php`. This will declare a new
    `cdn` method which, for now, won't do anything but return the `asset` helper method.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`app/helpers.php`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To ensure this helper is available to be used anywhere in our app, we can use
    Composer's *autoload* feature. This makes a class or file available to all other
    files without them having to manually `include` or `require` it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '`composer.json`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Each time you modify Composer''s autoload declaration you need to run `dump-autoload`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'With that done, the `cdn` helper will be available for use within our app.
    Let''s test it with Tinker:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Setting the CDN URL
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `cdn` helper method will need to know the URL of the CDN. Let's set an `CDN_URL` environment
    variable that will be assigned the zone URL for Vuebnb, minus the protocol prefix.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: While we're at it, let's add another variable, `CDN_BYPASS`, that can be used
    to bypass the CDN in our local development environment where we won't need it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '`.env`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Let's now register these new variables in the app configuration file.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '`config/app.php`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now we can complete the logic of our `cdn` helper.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '`app/helpers.php`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you still have Tinker open, exit and re-enter, and test the changes work
    as expected:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Using the CDN in Laravel
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now replace usages of the `asset` helper in our Laravel files with the `cdn` helper.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '`app/Http/Controllers/ListingController.php`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`resources/views/app.blade.php`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Using the CDN in Vue
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our Vue app, we're loading some static assets as well. For example, in the
    toolbar we use the logo.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '`resources/assets/components/App.vue`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As this is a relative URL it will, by default, point to the web server. If we
    make it an absolute URL instead, we'd have to hard-code the CDN URL, which is
    not ideal either.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Let's instead get Laravel to pass the CDN URL in the head of the document. We
    can do this by simply calling the `cdn` helper with an empty string.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '`resources/views/app.blade.php`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We'll now use a computed property to construct the absolute URL using this global
    value.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '`resources/assets/components/App.vue`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We'll use the same concept in the footer where the grey logo is used.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '`resources/assets/components/CustomFooter.vue`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Deploying to Heroku
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With that done, commit any file changes to Git and push again to Heroku to trigger
    a new deploy. You'll also need to rebuild your frontend assets and transfer these
    to the CDN.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, set the CDN environment variables:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Finale
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now completed the case-study project for this book, a sophisticated
    full-stack Vue.js and Laravel application. Congratulations!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to show Vuebnb off to your friends and colleagues, as they'll no doubt
    be impressed with your new skills. I'd also appreciate if you tweeted me the link
    to your project so I can admire your work too. My Twitter handle is `@anthonygore`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Recap
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve come a long way in this book, let''s recap some of what we''ve achieved:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](29c092e4-bc60-42f4-892f-fb74440d3765.xhtml), *Hello Vue – An
    Introduction to Vue.js*, we were introduced to Vue.js
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 2](b381aa06-e15c-4cb9-9b8b-4b9421ed73db.xhtml), *Prototyping Vuebnb,
    Your First Vue.js Project*, we learned the basics of Vue.js including installation,
    data binding, directives, and lifecycle hooks. We built a prototype of the listing
    page of Vuebnb including the image modal
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](b381aa06-e15c-4cb9-9b8b-4b9421ed73db.xhtml)中，*原型设计Vuebnb，您的第一个Vue.js项目*，我们学习了Vue.js的基础知识，包括安装、数据绑定、指令和生命周期钩子。我们创建了Vuebnb列表页面的原型，包括图像模态框
- en: In [Chapter 3](e50310e5-b580-47d0-aff6-015808cc3b1c.xhtml), *Setting Up a Laravel
    Development Environment*, we installed the main Vuebnb project and set up the
    Homestead development environment
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](e50310e5-b580-47d0-aff6-015808cc3b1c.xhtml)中，*建立Laravel开发环境*，我们安装了主要的Vuebnb项目，并设置了Homestead开发环境
- en: In [Chapter 4](86698fb7-c4c0-4a6e-831d-4b8cdde3a4b8.xhtml), *Building a Web
    Service with Laravel*, we created a Laravel web service to supply data for Vuebnb
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](86698fb7-c4c0-4a6e-831d-4b8cdde3a4b8.xhtml)中，*使用Laravel构建Web服务*，我们创建了一个Laravel
    Web服务，为Vuebnb提供数据
- en: In [Chapter 5](f7d2046c-81c6-416b-977e-2f166a911244.xhtml), *Integrating Laravel
    and Vue.js with Webpack*, we migrated the prototype into the main project and
    used Laravel Mix to compile our assets into bundle files
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第5章](f7d2046c-81c6-416b-977e-2f166a911244.xhtml)中，*使用Webpack集成Laravel和Vue.js*，我们将原型迁移到主项目，并使用Laravel
    Mix将我们的资产编译成捆绑文件
- en: In [Chapter 6](c3b31042-0e33-40d8-ad31-d048ccf7082d.xhtml), *Composing Widgets
    with Vue.js Components*, we learned about components. We used this knowledge to
    add an image carousel to the modal on the listing page and refactored the frontend
    to incorporate single-file components
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第6章](c3b31042-0e33-40d8-ad31-d048ccf7082d.xhtml)中，*使用Vue.js组件组合小部件*，我们学习了组件。我们利用这些知识在列表页面的模态框中添加了图像轮播，并重构了前端以整合单文件组件
- en: In [Chapter 7](08354437-8373-40d1-b1d5-c63219c85c95.xhtml), *Building a Multi-Page
    App With Vue Router*, we added Vue Router to the project, allowing us to add a
    home page with the listing summary sliders
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第7章](08354437-8373-40d1-b1d5-c63219c85c95.xhtml)中，*使用Vue Router构建多页面应用*，我们向项目添加了Vue
    Router，允许我们添加一个带有列表摘要滑块的主页
- en: In [Chapter 8](a05bfc41-f7fe-471f-a964-205c36fe528d.xhtml), *Managing Your Application
    State With Vuex*, we introduced the Flux architecture and added Vuex to our app.
    We then created a save feature and moved page state into Vuex
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第8章](a05bfc41-f7fe-471f-a964-205c36fe528d.xhtml)中，*使用Vuex管理应用程序状态*，我们介绍了Flux架构，并将Vuex添加到我们的应用程序中。然后我们创建了一个保存功能，并将页面状态移到了Vuex中
- en: In [Chapter 9](046ff094-aa7d-43d0-9f9b-444652bcaf1d.xhtml), *Adding a User Login
    and API Authentication With Passport*, we added a user login to the project. We
    sent the user's saved listings back to the database with an authenticated AJAX
    call
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第9章](046ff094-aa7d-43d0-9f9b-444652bcaf1d.xhtml)中，*使用Passport添加用户登录和API认证*，我们向项目添加了用户登录。我们通过经过身份验证的AJAX调用将用户保存的列表返回到数据库。
- en: In [Chapter 10](f96ef3b9-1a2a-416d-beba-8e61cde19a05.xhtml), *Deploying a Full-Stack
    App to the Cloud*, we deployed the app to a Heroku cloud server and transferred
    static assets to a CDN
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第10章](f96ef3b9-1a2a-416d-beba-8e61cde19a05.xhtml)中，*将全栈应用部署到云端*，我们将应用部署到Heroku云服务器，并将静态资产转移到CDN
- en: Next steps
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: You may have reached the end of the book, but your journey as a full-stack Vue
    developer has only just begun! What should you move on to next?
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经读到了本书的结尾，但作为全栈Vue开发人员，您的旅程才刚刚开始！接下来应该做什么呢？
- en: 'Firstly, there are still plenty more features you can add to Vuebnb. Designing
    and implementing these yourself will increase your skill and knowledge immensely.
    Here are a few ideas to get you started:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您仍然可以向Vuebnb添加许多功能。自己设计和实现这些功能将极大地增加您的技能和知识。以下是一些开始的想法：
- en: Complete the user authentication flow. Add a registration page and functionality
    for resetting passwords
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成用户认证流程。添加注册页面和重置密码的功能
- en: Add a user profile page. Here, users can upload an avatar that will display
    in the toolbar when they're logged in
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加用户个人资料页面。在这里，用户可以上传头像，在登录时会显示在工具栏中
- en: Create a form on the listing page that allows the room to be booked. Include
    a drop-down datepicker widget for selecting start and end dates
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列表页面创建一个表单，允许预订房间。包括一个下拉式日期选择器小部件，用于选择开始和结束日期
- en: Server render the app by running Vue from a JavaScript sandbox on the server.
    This way users get a complete page with visible content when they load the site
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在服务器上运行Vue来对应用进行服务器渲染。这样用户在加载网站时就能看到完整的页面内容
- en: Secondly, I invite you to check out *Vue.js Developers*, an online community
    for Vue.js enthusiasts that I founded. Here you can read articles on Vue.js, stay
    up-to-date with Vue.js news through our newsletter, and share tips and tricks
    with other developers in our Facebook group.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我邀请您查看*Vue.js Developers*，这是一个我创建的Vue.js爱好者的在线社区。在这里，您可以阅读有关Vue.js的文章，通过我们的通讯订阅了解Vue.js的最新消息，并与我们的Facebook小组中的其他开发人员分享技巧和诀窍。
- en: 'Check it out at this URL: [https://vuejsdevelopers.com](https://vuejsdevelopers.com).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在此网址查看：[https://vuejsdevelopers.com](https://vuejsdevelopers.com)。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to deploy a full-stack app to a Heroku cloud
    server. To do this, we used the Heroku CLI to set up a new Heroku app, and then
    deployed it using Heroku's Git server.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将全栈应用部署到Heroku云服务器。为此，我们使用Heroku CLI设置了一个新的Heroku应用，然后使用Heroku的Git服务器进行部署。
- en: We also created a CDN with KeyCDN, and used FTP to deploy our static assets
    to the CDN.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用KeyCDN创建了一个CDN，并使用FTP将静态资产部署到CDN。
- en: Finally, we learned why it's important for performance and security to build
    our JavaScript assets in production-mode ahead of deployment.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们了解到在部署之前以生产模式构建JavaScript资产对性能和安全性的重要性。
- en: This is the final chapter of the book. Thank you for reading and good luck on
    your web development journey!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书的最后一章。感谢您的阅读，祝您在网页开发之旅中好运！
