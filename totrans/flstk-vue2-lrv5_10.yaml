- en: Deploying a Full-Stack App to the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the functionality of Vuebnb is complete, the final step is to deploy
    it to production. We'll use two free services, Heroku and KeyCDN, to share Vuebnb
    with the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to the Heroku cloud platform service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Vuebnb to Heroku as a free app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How CDNs improve the performance of full-stack apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating a free CDN with Laravel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building assets in production-mode for performance and security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Heroku is a cloud platform service for web applications. It's immensely popular
    among developers due to the simplicity and affordability it offers for getting
    apps online.
  prefs: []
  type: TYPE_NORMAL
- en: Heroku applications can be made in a variety of languages including PHP, JavaScript,
    and Ruby. In addition to a web server, Heroku offers a variety of add-ons, such
    as databases, email services, and application monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: Heroku apps can be deployed for free, though there are certain limitations,
    for example, the app will *sleep* after periods of inactivity, making it slow
    to respond. These limitations are lifted if you upgrade to a paid service.
  prefs: []
  type: TYPE_NORMAL
- en: We will now deploy Vuebnb to the Heroku platform. The first step is to create
    an account by visiting the following URL: [https://signup.heroku.com](https://signup.heroku.com).
  prefs: []
  type: TYPE_NORMAL
- en: CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most convenient way to use Heroku is from the command line. Visit the following
    URL and follow the steps for installation: [https://devcenter.heroku.com/articles/heroku-cli](https://devcenter.heroku.com/articles/heroku-cli).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve installed the CLI, log in to Heroku from the Terminal. After verifying
    your credentials you''ll be able to use the CLI to create and manage your Heroku
    apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating an app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now create a new Heroku app. New apps require a unique name, so replace `vuebnbapp` in
    the command below with your own choice. The name will be part of the app''s URL,
    so make sure it''s short and memorable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the app is created you will be given the URL, for example: [https://vuebnbapp.herokuapp.com/](https://vuebnbapp.herokuapp.com/).
    Put it in the browser and you''ll see this default message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1df365a5-0d94-4368-b8e6-d0a053a05f7c.png)Figure 10.1\. Heroku default
    messageNew Heroku apps are assigned a free domain name, for example: `appname.herokuapp.com`, but
    you can also use your own custom domain. See the Heroku Dev Center for more information
    at [https://devcenter.heroku.com](https://devcenter.heroku.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deploy code to your Heroku app you can use Heroku''s Git server. When you
    created your app with the CLI, a new remote repository was automatically added
    to your Git project. Confirm this with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once we've completed the configuration of our app we'll make our first push.
    Heroku will use this code to build the app.
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Heroku apps have an ephemeral filesystem that only includes code from the most
    recent Git push. This means Vuebnb will not have its `.env` file present since
    this file is not committed to the source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Environment variables are instead set by Heroku CLI, with the `heroku config` command.
    Let''s begin by setting the app key. Replace the following value with your own
    app key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creating a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need a database for our production app. The ClearDB add-on for Heroku provides
    a MySQL cloud database that is easy to set up and connect.
  prefs: []
  type: TYPE_NORMAL
- en: This add-on is free for a limited number of transactions each month. However,
    you will need to verify your Heroku account before you can add a database, which
    means you'll need to supply credit card details, even if you use the free plan.
  prefs: []
  type: TYPE_NORMAL
- en: To verify your Heroku account, go to this URL: [https://heroku.com/verify](https://heroku.com/verify).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve done that, create a new ClearDB database with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Default string length
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, ClearDB uses MySQL version 5.5, while our Homestead
    database is MySQL 5.7\. The default string length in MySQL 5.5 is too short for
    Passport authorization keys, so we need to manually set the default string length
    in the app service provider before we run the database migrations in our production
    app.
  prefs: []
  type: TYPE_NORMAL
- en: '`app/Providers/AppServiceProvider.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you installed the ClearDB add-on, a new environment variable, `CLEARDB_DATABASE_URL`, was
    automatically set. Let''s read its value using the `heroku config:get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In a Laravel project, the database is connected by setting values for `DB_HOST` and `DB_DATABASE`.
    We can extract the values for these from the `CLEARDB_DATABASE_URL` variable,
    which is in the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''ve extracted the values, set the applicable environment variables
    in the Heroku app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Configuring a web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web server configuration for Heroku is done via a special file called `Procfile` (no
    file extension) that lives in the root of your project directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now create that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Each line of the `Procfile` is a declaration that tells Heroku how to run various
    pieces of your app. Let's create a `Procfile` for Vuebnb now and add this single
    declaration.
  prefs: []
  type: TYPE_NORMAL
- en: '`Procfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The part to the left of the colon is the process type. The `web` process type
    defines where HTTP requests are sent in the app. The part to the right is the
    command to run or start that process. We will route requests to an Apache server
    that points to the *public* directory of our app.
  prefs: []
  type: TYPE_NORMAL
- en: Passport keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 9](046ff094-aa7d-43d0-9f9b-444652bcaf1d.xhtml), *Adding a User Login
    and API Authentication with Passport*, we created encryption keys for Passport
    with the `php artisan passport:install`command. These keys are stored in text
    files that can be found in the `storage` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Encryption keys should not be under version control, as this would make them
    insecure. Instead, we need to regenerate these keys on each deploy. We can do
    this by adding a post-install script to our composer file.
  prefs: []
  type: TYPE_NORMAL
- en: '`composer.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve done all the necessary set up and configuration, so we''re ready now
    to deploy Vuebnb. Make sure you commit any file changes to your Git repository
    and push to the master branch of the Heroku Git server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'During the push you''ll see the output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ad3ba19b-a5b8-411e-a8a2-b4e2dac68549.png)Figure 10.2\. Git output
    after a push to HerokuSomething wrong with your Heroku app that needs debugging? `heroku
    logs --tail` will show you the Terminal output from your Heroku app. You can also
    set the `APP_DEBUG=true` environment variable to debug Laravel. Remember to set
    it back to `false` when you''ve finished, though.'
  prefs: []
  type: TYPE_NORMAL
- en: Migration and seed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the deploy completes, we will migrate our tables and seed the database.
    You can run Artisan and other app commands on the production app via Heroku CLI
    by preceding them with `heroku run`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the migration and seeding are complete, we can attempt to view the app
    via the browser. The page should be served but you''ll see these mixed content
    errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f0f43db3-8576-44f5-a20d-4e2f75127fb5.png)Figure 10.3\. Console errors'
  prefs: []
  type: TYPE_NORMAL
- en: Fixing these errors won't help much, as the files referred to are not on the
    server anyway. Let's deal with that issue first.
  prefs: []
  type: TYPE_NORMAL
- en: Serving static assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since our static assets, that is, CSS, JavaScript and image files, are not in
    version control, they have not been deployed to our Heroku app server.
  prefs: []
  type: TYPE_NORMAL
- en: This is okay, though, as a better option is to serve them via a CDN. In this
    part of the chapter, we'll set up an account with KeyCDN and serve our static
    assets from there.
  prefs: []
  type: TYPE_NORMAL
- en: Content distribution networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a server receives an incoming HTTP request, it usually responds with one
    of two types of content: dynamic or static. Dynamic content includes web pages
    or AJAX responses containing data specific to that request, for example, a web
    page with user data inserted via Blade.'
  prefs: []
  type: TYPE_NORMAL
- en: Static content includes images, JavaScript, and CSS files that do not change
    between requests. It's inefficient to use a web server for serving static content
    since it unnecessarily engages the server resources to simply return a file.
  prefs: []
  type: TYPE_NORMAL
- en: A **Content Delivery Network** (**CDN**) is a network of servers, usually in
    different locations around the world, that are optimized for delivering static
    assets more quickly and cheaply than your typical web server.
  prefs: []
  type: TYPE_NORMAL
- en: KeyCDN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many different CDN services available, but in this book we'll use
    KeyCDN as it offers an easy-to-use service with a free usage tier.
  prefs: []
  type: TYPE_NORMAL
- en: Let's sign up for an account by visiting this link and following the instructions: [https://app.keycdn.com/signup](https://app.keycdn.com/signup).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created and confirmed a new KeyCDN account, add a new zone by
    visiting the following link. *Zones* are simply collections of assets; you'd probably
    have a different zone for each website you're managing with KeyCDN. Call your
    new zone *vuebnb* and make sure it's a *Push* zone type, which will allow us to
    add files with FTP: [https://app.keycdn.com/zones/add](https://app.keycdn.com/zones/add).
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files with FTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now push our static assets to the CDN with FTP. You could use an FTP
    utility such as Filezilla to do this, but I've included a Node script with the
    project, `scripts/ftp.js`, that allows you to do it with a simple command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script requires a few NPM packages, so install those first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to connect to your KeyCDN account, the FTP script requires a few environment
    variables to be set. Let''s create a new file called `.env.node` to keep this
    configuration separate from the main Laravel project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The URL used for FTP-ing to KeyCDN is [ftp.keycdn.com](http://ftp.keycdn.com).
    The username and password will be the same as those you created an account with,
    so be sure to replace those in the values in the following code. The remote directory
    will be the same as the name of the zone you created.
  prefs: []
  type: TYPE_NORMAL
- en: '`.env.node`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Skipping images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The files we need to transfer to the CDN are in the `public/css`, `public/js`, `public/fonts`, and `public/images`
    directories. The FTP script has been configured to recursively copy these.
  prefs: []
  type: TYPE_NORMAL
- en: If you set the `FTP_SKIP_IMAGES` environment variable to true, however, the
    script will ignore any files in `public/images`. You'll want to do this after
    you've run the script the first time, as the images don't change and take quite
    a while to transfer.
  prefs: []
  type: TYPE_NORMAL
- en: '`.env.node`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see how this takes effect in `scripts/ftp.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: NPM scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make it easy to use the FTP script, add the following script definitions
    to your `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: '`package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Production build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you run the FTP script, be sure to first build your app for production
    with the `npm run prod`command. This runs a Webpack build with the `NODE_ENV=production` environment
    variable set.
  prefs: []
  type: TYPE_NORMAL
- en: A production build ensures your assets are optimized for a production environment.
    For example, when Vue.js is bundled in production mode, it will not include warnings
    and tips, and will disable Vue Devtools. You can see how this is achieved from
    this snippet of the `vue.runtime.common.js` module.
  prefs: []
  type: TYPE_NORMAL
- en: '`node_modules/vue/dist/vue.runtime.common.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Webpack will also run certain production-only plugins during a production build
    to ensure your bundle files are as small and secure as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Running the FTP script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first time you run the FTP script you will need to copy all the files,
    including images. This will take some time, probably 20 to 30 minutes depending
    on your Internet connection speed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Once the transfer completes, uploaded files will be available at the zone URL,
    for example, `http://vuebnb-9c0f.kxcdn.com`. The path to a file will be relative
    to the `public` folder, for example, `public/css/vue-style.css` will be available
    at `[ZONE_URL]/css/vue-style.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test a few files to ensure the transfer was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '>![](assets/92cca9a8-5fe1-4fc2-a271-2c46b40445b0.png)Figure 10.4\. Testing
    CDN files'
  prefs: []
  type: TYPE_NORMAL
- en: 'Subsequent transfers can skip the images by using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Reading from the CDN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now want Vuebnb to load any static assets from the CDN instead of the web
    server when in production. To do this, we're going to create our own Laravel helper
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, we reference assets in our app using the `asset` helper. This helper
    returns a fully-qualified URL for that asset''s location on the web server. For
    example, in our app view we link to the JavaScript bundle file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Our new helper, which we''ll call `cdn`, will instead return a URL that points
    to the asset''s location on the CDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: CDN helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin by creating a file called `helpers.php`. This will declare a new
    `cdn` method which, for now, won't do anything but return the `asset` helper method.
  prefs: []
  type: TYPE_NORMAL
- en: '`app/helpers.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: To ensure this helper is available to be used anywhere in our app, we can use
    Composer's *autoload* feature. This makes a class or file available to all other
    files without them having to manually `include` or `require` it.
  prefs: []
  type: TYPE_NORMAL
- en: '`composer.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Each time you modify Composer''s autoload declaration you need to run `dump-autoload`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'With that done, the `cdn` helper will be available for use within our app.
    Let''s test it with Tinker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Setting the CDN URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `cdn` helper method will need to know the URL of the CDN. Let's set an `CDN_URL` environment
    variable that will be assigned the zone URL for Vuebnb, minus the protocol prefix.
  prefs: []
  type: TYPE_NORMAL
- en: While we're at it, let's add another variable, `CDN_BYPASS`, that can be used
    to bypass the CDN in our local development environment where we won't need it.
  prefs: []
  type: TYPE_NORMAL
- en: '`.env`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Let's now register these new variables in the app configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: '`config/app.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now we can complete the logic of our `cdn` helper.
  prefs: []
  type: TYPE_NORMAL
- en: '`app/helpers.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If you still have Tinker open, exit and re-enter, and test the changes work
    as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Using the CDN in Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now replace usages of the `asset` helper in our Laravel files with the `cdn` helper.
  prefs: []
  type: TYPE_NORMAL
- en: '`app/Http/Controllers/ListingController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '`resources/views/app.blade.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Using the CDN in Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our Vue app, we're loading some static assets as well. For example, in the
    toolbar we use the logo.
  prefs: []
  type: TYPE_NORMAL
- en: '`resources/assets/components/App.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As this is a relative URL it will, by default, point to the web server. If we
    make it an absolute URL instead, we'd have to hard-code the CDN URL, which is
    not ideal either.
  prefs: []
  type: TYPE_NORMAL
- en: Let's instead get Laravel to pass the CDN URL in the head of the document. We
    can do this by simply calling the `cdn` helper with an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: '`resources/views/app.blade.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We'll now use a computed property to construct the absolute URL using this global
    value.
  prefs: []
  type: TYPE_NORMAL
- en: '`resources/assets/components/App.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We'll use the same concept in the footer where the grey logo is used.
  prefs: []
  type: TYPE_NORMAL
- en: '`resources/assets/components/CustomFooter.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Deploying to Heroku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With that done, commit any file changes to Git and push again to Heroku to trigger
    a new deploy. You'll also need to rebuild your frontend assets and transfer these
    to the CDN.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, set the CDN environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Finale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now completed the case-study project for this book, a sophisticated
    full-stack Vue.js and Laravel application. Congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to show Vuebnb off to your friends and colleagues, as they'll no doubt
    be impressed with your new skills. I'd also appreciate if you tweeted me the link
    to your project so I can admire your work too. My Twitter handle is `@anthonygore`.
  prefs: []
  type: TYPE_NORMAL
- en: Recap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve come a long way in this book, let''s recap some of what we''ve achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](29c092e4-bc60-42f4-892f-fb74440d3765.xhtml), *Hello Vue – An
    Introduction to Vue.js*, we were introduced to Vue.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 2](b381aa06-e15c-4cb9-9b8b-4b9421ed73db.xhtml), *Prototyping Vuebnb,
    Your First Vue.js Project*, we learned the basics of Vue.js including installation,
    data binding, directives, and lifecycle hooks. We built a prototype of the listing
    page of Vuebnb including the image modal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 3](e50310e5-b580-47d0-aff6-015808cc3b1c.xhtml), *Setting Up a Laravel
    Development Environment*, we installed the main Vuebnb project and set up the
    Homestead development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 4](86698fb7-c4c0-4a6e-831d-4b8cdde3a4b8.xhtml), *Building a Web
    Service with Laravel*, we created a Laravel web service to supply data for Vuebnb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 5](f7d2046c-81c6-416b-977e-2f166a911244.xhtml), *Integrating Laravel
    and Vue.js with Webpack*, we migrated the prototype into the main project and
    used Laravel Mix to compile our assets into bundle files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 6](c3b31042-0e33-40d8-ad31-d048ccf7082d.xhtml), *Composing Widgets
    with Vue.js Components*, we learned about components. We used this knowledge to
    add an image carousel to the modal on the listing page and refactored the frontend
    to incorporate single-file components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 7](08354437-8373-40d1-b1d5-c63219c85c95.xhtml), *Building a Multi-Page
    App With Vue Router*, we added Vue Router to the project, allowing us to add a
    home page with the listing summary sliders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 8](a05bfc41-f7fe-471f-a964-205c36fe528d.xhtml), *Managing Your Application
    State With Vuex*, we introduced the Flux architecture and added Vuex to our app.
    We then created a save feature and moved page state into Vuex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 9](046ff094-aa7d-43d0-9f9b-444652bcaf1d.xhtml), *Adding a User Login
    and API Authentication With Passport*, we added a user login to the project. We
    sent the user's saved listings back to the database with an authenticated AJAX
    call
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 10](f96ef3b9-1a2a-416d-beba-8e61cde19a05.xhtml), *Deploying a Full-Stack
    App to the Cloud*, we deployed the app to a Heroku cloud server and transferred
    static assets to a CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have reached the end of the book, but your journey as a full-stack Vue
    developer has only just begun! What should you move on to next?
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, there are still plenty more features you can add to Vuebnb. Designing
    and implementing these yourself will increase your skill and knowledge immensely.
    Here are a few ideas to get you started:'
  prefs: []
  type: TYPE_NORMAL
- en: Complete the user authentication flow. Add a registration page and functionality
    for resetting passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a user profile page. Here, users can upload an avatar that will display
    in the toolbar when they're logged in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a form on the listing page that allows the room to be booked. Include
    a drop-down datepicker widget for selecting start and end dates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server render the app by running Vue from a JavaScript sandbox on the server.
    This way users get a complete page with visible content when they load the site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secondly, I invite you to check out *Vue.js Developers*, an online community
    for Vue.js enthusiasts that I founded. Here you can read articles on Vue.js, stay
    up-to-date with Vue.js news through our newsletter, and share tips and tricks
    with other developers in our Facebook group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check it out at this URL: [https://vuejsdevelopers.com](https://vuejsdevelopers.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to deploy a full-stack app to a Heroku cloud
    server. To do this, we used the Heroku CLI to set up a new Heroku app, and then
    deployed it using Heroku's Git server.
  prefs: []
  type: TYPE_NORMAL
- en: We also created a CDN with KeyCDN, and used FTP to deploy our static assets
    to the CDN.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned why it's important for performance and security to build
    our JavaScript assets in production-mode ahead of deployment.
  prefs: []
  type: TYPE_NORMAL
- en: This is the final chapter of the book. Thank you for reading and good luck on
    your web development journey!
  prefs: []
  type: TYPE_NORMAL
