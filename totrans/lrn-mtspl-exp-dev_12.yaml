- en: Chapter 12. Exploit Research with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploit, in very simple words, is a piece of code or a collection of commands
    specifically written in a typical format that takes advantage of a vulnerability
    or weakness in the software/hardware and causes unanticipated behavior to occur.
    This unintended behavior may be in the form of a system crash, denial of service,
    buffer overflow, a blue screen of death, or the system being unresponsive. When
    we talk about exploits, we have something known as a zero-day exploit. A zero-day
    exploits a security vulnerability on the same day the vulnerability gets known.
    This means that developers have zero days to address and patch the vulnerability.
    These are used by attackers to attack vulnerable systems before the developer
    of the target software knows about the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploit Research with Metasploit](img/3589_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Image take from [http://static.itpro.co.uk/sites/itpro/files/styles/gallery_wide/public/security_exploits.jpg](http://static.itpro.co.uk/sites/itpro/files/styles/gallery_wide/public/security_exploits.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: Exploit writing tips and tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will focus on using Metasploit for exploit development. There
    are a large number of exploits already available in Metasploit, which may be edited
    and used for our purposes during the exploit-development exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Important points
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few important points that need to be kept in mind while writing
    exploits for the Metasploit Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: Transfer most of the work to the Metasploit Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Rex Protocol libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the available mixins extensively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Badchars declared must be 100 percent accurate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the payload space is highly reliable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make use of randomness whenever possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Randomize all payloads by using encoders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When generating padding, use `Rex::Text.rand_text_* (rand_text_alpha, rand_text_alphanumeric,`
    and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All Metasploit modules have a consistent structure with hard-tab indents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fancy code is harder to maintain anyway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixins provide consistent option names across the Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proofs of concepts should be written as Auxiliary DoS modules and not as exploits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final exploit reliability must be high
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Format for an exploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The format for an exploit in the Metasploit framework is similar to that of
    an Auxiliary module, but it has more fields. There are a few important things
    that need to be kept in mind while formatting exploits:'
  prefs: []
  type: TYPE_NORMAL
- en: A payload information block is absolutely necessary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There should be a listing of the available targets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `exploit()` and `check()` functions should be used rather than the `run()`
    function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we demonstrate a simple Metasploit exploit to show how it is written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We begin our exploit module by including the MSF core package. This is followed
    by a class declaration and function definitions. In our example, we include a
    plain TCP connection, so we use `Msf::Exploit::Remote::Tcp`. Metasploit has handlers
    for HTTP, FTP, and so on, which help in building exploits faster since we do not
    need to write the entire exploit ourselves. We need to define the length and badchars,
    and then define the targets. Target-specific settings also need to be defined,
    such as the return address and the offset. Then we need to connect to the remote
    host and port and build and write the buffer to the connection. Once the exploit
    hits the connection, we handle the exploit and then disconnect.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical Metasploit exploit module consists of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Header and some dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The core elements of the exploit module, which are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require ''msf/core''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class definition`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`includes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"def" definitions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initialize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check (optional)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exploit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a screenshot of our Metasploit exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Format for an exploit](img/3589_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exploit mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mixins are best known for their usefulness in adding functionality to a module.
    Based on Ruby, which is a single-inheritance language, the mixins provide support
    for multiple inheritance. For good exploit development, it is very important to
    understand and efficiently use the mixins since Metasploit makes use of mixins
    to a large degree. Mixins are not specific to a module category though they appear
    under the one that most closely defines them. Hence we can make use of the exploit
    module mixins in Auxiliary modules and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: The Auxiliary::Report mixin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Metasploit Framework, we can make use of the `Auxiliary::Report` mixin
    to save the host, service, and vulnerability information into a database. This
    has two inbuilt methods, namely `report_host` and `report_service`, that are used
    to indicate the status of a host and a service (the status indicates whether the
    host/service is working or not). To use this module, we need to include this mixin
    into our classes by using `include Auxiliary::Report`.
  prefs: []
  type: TYPE_NORMAL
- en: Hence we can make use of this mixin for saving any information into the database.
  prefs: []
  type: TYPE_NORMAL
- en: Widely used exploit mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The widely used exploit mixins are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Exploit::Remote::Tcp`: This provides the TCP functionality and methods to
    the module. It aids in setting up a TCP connection using `connect()` and `disconnect()`.
    It creates `self.sock` as the global socket and offers SSL, Proxies, CPORT, and
    CHOST. It uses parameters such as RHOST, RPORT, and ConnectTimeout. It''s code
    file is located at `lib/msf/core/exploit/tcp.rb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exploit::Remote::DCERPC`: This mixin provides utility methods for interacting
    with a DCERPC service on a remote machine. These methods are generally useful
    in the context of exploitation. This mixin inherits from the TCP exploit mixin.
    It uses methods such as `dcerpc_handle()`, `dcerpc_bind()`, and `dcerpc_call()`.
    It also supports IPS evasion methods with multicontext BIND requests and fragmented
    DCERPC calls. It''s code file is located at `lib/msf/core/exploit/dcerpc.rb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exploit::Remote::SMB`: This mixin provides utility methods for interacting
    with an SMB/CIFS service on a remote machine. These methods are generally useful
    in the context of exploitation. This mixin extends the TCP exploit mixin. Only
    one SMB service can be accessed at a time using this class. It uses methods such
    as `smb_login()`, `smb_create()`, and `smb_peer_os()`. It also supports options
    like SMBUser, SMBPass, and SMBDomain. It exposes IPS evasion methods such as `SMB::pipe_evasion`,
    `SMB::pad_data_level`, and `SMB::file_data_level`. It''s code file is located
    at `lib/msf/core/exploit/smb.rb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exploit::Remote::BruteTargets`: This mixin provides brute-force attacks on
    the targets. Basically it overloads the `exploit()` method and calls `exploit_target(target)`
    for each target. It''s code file is located at `lib/msf/core/exploit/brutetargets.rb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exploit::Remote::Brute`: This mixin overloads the exploit method and calls
    `brute_exploit()` for each step. It is best suited for brute-force attacks and
    address range. The address range is a remote brute-force exploit mixin and is
    best suited for brute-force attacks. This provides a target aware brute forcing
    wrapper. It calls the `brute_exploit` method with the supplied address. If this
    is not a brute force target then the `single_exploit` method is called. The code
    file of `Exploit::Remote::Brute` is located at `lib/msf/core/exploit/brute.rb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing an exploit module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good way to understand how an exploit module is written is to first edit one.
    We edit the module located at `opt/metasploit/msf3/modules/exploits/windows/ftp/ceaserftp_mkd.rb`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notes by the author are shown after a # sign.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Working with payloads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While working with payloads, we need to select an encoder that does not touch
    certain registers, must be under the maximum size, must avoid badchars, and should
    be selected according to their ranking.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next are the Nops Generators, which should be selected with the most random
    Nop first. Also, they are ranked according to their effectiveness and should be
    selected accordingly. Following is a list of payloads:'
  prefs: []
  type: TYPE_NORMAL
- en: '`msfvenom` – It is a combination of both `msfpayload` and `msfencode`. It is
    a single tool that has standardized command-line options and good speed.![Working
    with payloads](img/3589_12_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfpayload`: It is a basic command-line instance of Metasploit that is used
    to generate and output all of the shell code that is available in Metasploit.
    It is most commonly used for the generation of the shell code for an exploit that
    is not currently present in the Metasploit Framework. It is even used for working
    with and testing different types of shell code and options while working with
    exploit modules.![Working with payloads](img/3589_12_04.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfencode`: This is another great payload in Metasploit''s arsenal for exploit
    development. Sometimes it becomes difficult to use shell code generated straight
    out of `msfpayload`; therefore, it has to be encoded.![Working with payloads](img/3589_12_05.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this part, we are going to write a small exploit for Minishare Version 1.4.1\.
    First create a file on the desktop with any name and save it as a Python extension
    file. For example, we create a file named `minishare.py`. Next, just write the
    exploit code on that file. The code is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing exploits](img/3589_12_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We write the code shown in the screenshot in the `minishare.py` file and save
    it. Now we can run our exploit against our target machine, on which we have already
    installed the Minishare software. Open the terminal and execute the `minishare.py`
    file from the directory where the file is located. So type in `./minishare.py
    <target IP>`; for example, here we are using `./minishare.py 192.168.0.110`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing exploits](img/3589_12_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After executing the exploit, we see that Minishare has crashed, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing exploits](img/3589_12_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we move on to use a very useful Metasploit utility known as `pattern_create.rb`.
    This is located in the Metasploit's `tools` folder as shown in the following screenshot.
    Using this script will generate a string composed of unique string patterns. Hence
    we can replace our present buffer pattern by creating a random pattern using this
    script.
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing exploits](img/3589_12_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We type in `ruby pattern_create.rb 2000` and then press *Enter*. This creates
    a random string pattern for us, which can be used to cause the buffer overflow
    and figure out the exact memory location for the overflow.
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing exploits](img/3589_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We then replace our original string pattern in the buffer with the random pattern
    just generated. Hence we again have a buffer of random strings that can be used
    to cause the buffer overflow in the Minishare software.
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing exploits](img/3589_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After creating the buffer, we run the script again, as shown in the following
    screenshot, and wait for the results.
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing exploits](img/3589_12_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'What we see on the victim''s machine is that Minishare crashes again due to
    the buffer overflow exploit that runs on it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing exploits](img/3589_12_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scripting with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we move on to some concepts of custom Metasploit scripting using Ruby. Let
    us start off with a very simple program that will print **Hello World** on the
    screen. Demonstrated in the following screenshot is how we write our first simple
    program. We can even simply write down the same program in a text pad and save
    it in the destination folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scripting with Metasploit](img/3589_12_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since we already have a Meterpreter session, we can simply run our script by
    typing in `run helloworld`. We can see that our program has successfully executed
    and has printed `Hello World` on the screen. So we have successfully built our
    own custom script.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scripting with Metasploit](img/3589_12_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Earlier, we used a `print_status` command; similarly, we can use `print_error`
    for displaying a standard error and `print_line` for displaying a line of text.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scripting with Metasploit](img/3589_12_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that this has been displayed on the screen as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scripting with Metasploit](img/3589_12_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now let us move on to having a more structured look for our program by introducing
    the use of functions, error handling for incorrect input, and extracting some
    important information through the script. In this script, we will use some of
    the API calls to look for basic information about the victim's system, such as
    the operating system, computer name, and privilege level of the script.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scripting with Metasploit](img/3589_12_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now let us run the script. It successfully gives us all the information we need
    by using the API calls. Hence we are a step ahead with our scripting skills by
    extracting the basic information of the victim's computer. So what we have done
    here is we have declared a function, as we do in any other programming language,
    to maintain the structure of the program and passed a variable named `session`
    to it. This variable is used to call various methods for printing the victim's
    basic computer information. After this, we have a few status messages followed
    by the result of the API calls. We have used `getinfo(client)` at the end to call
    our function.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scripting with Metasploit](img/3589_12_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next we move on to writing more advanced Meterpreter script and gathering some
    more information from our target victim. This time we have two parameters, named
    `session` and `cmdlist`. First of all, we print a status message followed by setting
    up a response timeout so that the session does not hang. After this, we run a
    loop, which takes in the items in an array one at a time and executes it on the
    system through `cmd.exe /c`. Next, it prints the status that is returned from
    the command execution. We then set up commands for extracting information from
    the victim's system, such as `set`, `ipconfig`, and `arp`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scripting with Metasploit](img/3589_12_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we run our script in Meterpreter by typing in `run helloworld`; our
    code gets successfully executed on the target system, giving important information,
    which is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scripting with Metasploit](img/3589_12_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have covered the basics of exploit research with Metasploit.
    Exploitation itself is a very vast topic and a separate study. We covered the
    various payloads in Metasploit and learned how exploits are designed. We also
    covered a series of Metasploit scripting basics for information retrieval in our
    Meterpreter session. In the next chapter we will cover two Metasploit add-on tools,
    Social Engineering Toolkit and Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://searchsecurity.techtarget.com/definition/zero-day-exploit](http://searchsecurity.techtarget.com/definition/%E2%80%A8zero-day-exploit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Exploit_%28computer_security%29](http://en.wikipedia.org/wiki/Exploit_%28computer_security%29)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Zero-day_attack](https://en.wikipedia.org/wiki/Zero-day_attack)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Exploit_Design_Goals](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Exploit_Design_Goals)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Exploit_Format](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Exploit_Format)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Exploit_Mixins](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Exploit_Mixins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikibooks.org/wiki/Metasploit/UsingMixins](http://en.wikibooks.org/wiki/Metasploit/UsingMixins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/](https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Msfpayload](http://www.offensive-security.com/metasploit-unleashed/Msfpayload)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Msfvenom](http://www.offensive-security.com/metasploit-unleashed/Msfvenom)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dev.metasploit.com/api/Msf/Exploit/Remote/DCERPC.html](https://dev.metasploit.com/api/Msf/Exploit/Remote/DCERPC.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dev.metasploit.com/api/Msf/Exploit/Remote/SMB.html](https://dev.metasploit.com/api/Msf/Exploit/Remote/SMB.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Metasploit exploit payloads: [http://www.offensive-security.com/metasploit-unleashed/Exploit_Payloads](http://www.offensive-security.com/metasploit-unleashed/Exploit_Payloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Writing Windows exploits: [http://en.wikibooks.org/wiki/Metasploit/WritingWindowsExploit](http://en.wikibooks.org/wiki/Metasploit/WritingWindowsExploit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Custom scripting with Metasploit: [http://www.offensive-security.com/metasploit-unleashed/Custom_Scripting](http://www.offensive-security.com/metasploit-unleashed/Custom_Scripting)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cesar FTP exploits: [http://www.exploit-db.com/exploits/16713/](http://www.exploit-db.com/exploits/16713/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit Research using Metasploit [http://www.securitytube.net/video/2706](http://www.securitytube.net/video/2706)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
