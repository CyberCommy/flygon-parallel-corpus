- en: Information Gathering and Vulnerability Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a myth that all Windows systems are easy to exploit. This is not entirely
    true. Almost any Windows system can be hardened to the point that it takes too
    long to exploit its vulnerabilities. In this chapter, you will learn how to footprint
    your Windows network and discover the vulnerabilities before the bad guys do.
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn ways to investigate and map your Windows network to find
    Windows systems that are susceptible to exploits. In some cases, this will be
    adding to your knowledge of the top 10 security tools; in others, we will show
    you entirely new tools to handle this category of investigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Footprinting the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An annotated list of Nmap command options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenVAS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Maltego
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using KeepNote
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A running version of Kali Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some Windows hosts on a network to scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Footprinting the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can't find your way without a good map. In this chapter, we are going to
    learn how to gather network information and assess vulnerabilities on the network.
    In the hacker world, this is called **footprinting**. This is the first step to
    any righteous hack. This is where you will save yourself time and massive headaches.
  prefs: []
  type: TYPE_NORMAL
- en: Without footprinting your targets, you are just shooting in the dark. The biggest
    tool in any good penetration tester's toolbox is yourÂ **mindset**. You have to
    have the mind of a sniper. You learn your target's habits and its actions. You
    learn the traffic flows on the network where your target lives. You find the weaknesses
    in your target and then attack those weaknesses. Search and destroy!
  prefs: []
  type: TYPE_NORMAL
- en: In order to do good footprinting, you have to use several tools that come with
    Kali. Each tool has it strong points and looks at the target from a different
    angle. The more views of your target, the better plan of attack you have.
  prefs: []
  type: TYPE_NORMAL
- en: Footprinting will differ depending on whether your targets are external on the
    public network, or internal and on a LAN. We will be covering both of these aspects.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and using these tools against a machine on a public network, which
    you do not have written permission to access, is a Federal crime.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, for most instances of Kali Linux, we will be using virtual machines
    running on **VMware** and **Oracle VirtualBox** that are built specifically for
    this book. The instances of Kali that we use on a daily basis are fairly heavily
    customized, and it would take a whole book just to cover the customizations. For
    external networks, we will be using several live servers on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Please be respectful and leave these addresses alone, as two of them are Bo's
    personal servers, and several are in the Atlanta Cloud Technology server cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Please read the preceding note again, and remember you do not have our permission
    to attack these machines. *Don't do the crime if you can't pay the time*.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can''t talk about networking without talking about **Nmap**. Nmap is the
    Swiss Army knife for network administrators. It is not only a great footprinting
    tool but also the best and cheapest network analysis tool any sysadmin can have
    on their machine. It really is the Swiss Army knife of network analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: It's a great tool for checking a single server to make sure the ports are operating
    properly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can heartbeat-ping an entire network segment or several hosts on a network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can even discover machines when ICMP (ping) has been turned off
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be used to pressure-test services. If the machine freezes under the load,
    it needs repairs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap was created in 1997 by Gordon Lyon, who goes by the handle Fyodor on the
    internet. Fyodor still maintains Nmap and it can be downloaded from [http://insecure.org](http://insecure.org/).
    You can also order his book about Nmap on that website. It is a great book. Well
    worth the price! Fyodor and the Nmap hackers have collected a great deal of information
    and security email lists on the site. Since you are running Kali Linux, you have
    a full copy of Nmap already installed!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of Nmap running against a Kali Linux instance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Terminal from the icon on the top bar or by clicking on the menu links:
    Application | Accessories | Terminal. You could also choose the Root Terminal
    if you want, but since you are already logged in as Root, you will not see any
    difference.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `nmap -A 10.0.0.4` at the Command Prompt. (You need to put in the IP of
    the machine you are testing.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The output shows the open ports among 1,000 commonly used ports. In this example,
    there are no open ports, so to make it a little more interesting, do the following.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the built-in web server by typing `/etc/init.d/apache2 start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the web server started, run the Nmap command again, as follows: `nmap
    -A 10.0.0.4`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see, Nmap is attempting to discover the OS and to tell what web
    server version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bef77e3f-6617-41d5-85fc-ba47adb79259.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is an example of running Nmap from the Git Bash application,
    which lets you run Linux commands on your Windows Desktop. This view shows a neat
    feature of Nmap. If you get bored or anxious and think the system is taking too
    much time to scan, you can hit the down arrow key and it will print out a status
    line to tell you what percentage of the scan is complete. This is not the same
    as telling you how much time is left to the scan, but it does give you an idea
    of what has been done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ad09350-b0bb-4a78-b914-46d1be5e89a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Nmap also comes as a Windows-installable application for your Windows machine.
    If you are a network or systems admin, you'll find this a great tool, not just
    for footprinting, but for systems and network troubleshooting. For other systems,
    you can find the Nmap installers at [https://nmap.org/download.html](https://nmap.org/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: Zenmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nmap comes with a GUI called **Zenmap**. Zenmap is a friendly graphical interface
    for the Nmap application. You will find Zenmap under Kali Linux | Information
    Gathering | Network Scanners | Zenmap. The interface looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f615fc31-0eb3-4922-92d3-3026c9ca0adb.png)'
  prefs: []
  type: TYPE_IMG
- en: One of the cool features of Zenmap is that, when you set up a scan using the
    buttons, the application also writes out the command-line version of the command,
    which will help you learn the command line flags used with Nmap in command-line
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hacker tip:'
  prefs: []
  type: TYPE_NORMAL
- en: Most hackers are very comfortable on the Linux **Command-Line Interface** (**CLI**).
    You want to learn Nmap commands on the command line, because you can use Nmap
    inside automated bash scripts and make up cron jobs to make routine scans much
    simpler. You can set a cron job to run the test in non-peak hours, when the network
    is quieter, and your tests will have less impact on the network's legitimate users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The intense-scan choice produces a command line of `nmap -T4 -A -v`:'
  prefs: []
  type: TYPE_NORMAL
- en: This produces a fast scan; the `T` stands for Timing (from 1 to 5), and the
    default timing is `-T3`. The faster the timing, the rougher the test, and the
    more likely you are to be detected if the network is running an **Intrusion Detection
    System** (**IDS**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With a deep port scan, including OS identification and attempts to find the
    applications listening on the ports, and the versions of those applications. `-A`
    stands for All.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the `-v` stands for verbose. `-vv` means very verbose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following, we see a list of the most common scans in a drop-down box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f121faf5-36e5-4aef-a775-5c5b00496fdf.png)'
  prefs: []
  type: TYPE_IMG
- en: The difference verbosity makes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next three screenshots show the difference verbosity makes in an OS scan.
    The OS scan includes a stealth scan, so `nmap -O hostname` is exactly the same
    as `nmap -sS -O hostname`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/622a9b90-a2cf-4276-9f93-4b29907c9e03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The verbose version here has been adjusted slightly to fit all the detail into
    the screenshot. The different scan options have different enhanced content when
    the `-v` or `-vv` options are added to the search strings. It makes sense to use
    `-v` or `-vv` when you have chosen some likely targets using the basic display
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a1c8e0d-5d04-483b-b796-4893f7e201bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next screenshot, we have added another `v` (`-vv`) to the verbosity
    flag and rerun the scan. As we can see, a lot more information about the system
    and the scan is outputted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/422cf39b-72d1-4c71-85d5-a241ee747c73.png)'
  prefs: []
  type: TYPE_IMG
- en: Scanning a network range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following example has a network range of `192.168.202.0/24`, and the scan
    type chosen is an intense scan with no ping. You then click the Scan button and
    your scan runs. During the scan, you will see the output in the Nmap Output tab
    on the screen. From our scan, we see we have six active hosts on the network.
    From the icons next to the IP addresses, we can tell we have identified two Windows
    machines, two Linux machines, and two unknown OS systems. Notice how, in the Command
    field in the following screenshot, as you set your scan variables, the command-line
    variables show up in this field. This is a good way to learn how to use Nmap from
    the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea241f4d-4774-4428-8750-495cd5bf9b55.png)'
  prefs: []
  type: TYPE_IMG
- en: If a network has ICMP turned off, attempting to ping the machines takes a lot
    of time. It takes almost as long as pinging UDP ports on the target machines.
    For either case, each machine will take approximately 75 seconds per port. In
    the first case, that means a ping of six machines takes 450 seconds just to fail
    the ping test. UDP searches test many more ports per machine. At 1,000 ports tested
    per standard UDP-port scan, you are going to take about 21 hours per machine just
    to test UDP. If you don't have a really good reason to check UDP ports with Nmap,
    it is not a cost-effective exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking the Topology tab and then clicking the Hosts Viewer button, you
    get a nice list of the hosts. By clicking the addresses, you can see the details
    of each host. Note that the addresses are different colors. Nmap picks out the
    low-hanging fruit for you. Green means secured, whereas yellow and red have vulnerabilities
    or services and could be exploited:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/767c78e7-da82-4ca1-be63-6f7089694dd5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Zenmap also has a nice feature for comparing scans. You will find it in the
    menu bar under Tools | Compare Results. In the following screenshots, you will
    see that we ran two scans on the network. When we compare the two, we can see
    that, on the second scan, a new machine was found. In the results of the first
    scan, it is marked in red, and shows `192.168.202.131` as down. When it is green,
    it is showing it as up, and displays the open ports and system information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f15c054-d736-427d-ad69-23ae60371194.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot is the result of running Nmap from the command line.
    As you saw previously, Nmap has been ported to Windows. If your company allows
    it, Nmap can be run on a Windows system by the command line in either the command
    window or through Windows PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a1160ad-087f-477e-acea-f7208b19eb02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have a large network, and just want to find Windows machines so that
    you can focus on Windows vulnerabilities, you can run the Quick Scan with the
    following command: `nmap -T4 -F 10.0.0.0/24`. Or, you can opt for Quick Scan Plus
    by typing `nmap -sV -T4 -O -F -version-light 10.0.0.0/24`. These will give you
    a good idea of which machines you really want to focus on. It looks like `10.0.0.12`
    is a Windows machine, based on the fact that four of five open ports are Windows-related:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de79df54-8481-4d03-b23b-d69be656b39a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you are looking at the Topology tab, you can adjust the size of the group
    by changing the values of the controls at the bottom of the window. The size of
    the graphic is increased by increasing **interest factor**. The standard view
    puts the local host at the center of the grouping, but if you click on one of
    the other hosts, it is brought to the center, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fbcbb5e-8479-4966-9f66-a416ef504854.png)'
  prefs: []
  type: TYPE_IMG
- en: An annotated list of Nmap command options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though Zenmap has a short, punchy drop-down list of popular and useful
    scans, there are quite an assortment of commands and options that you can use
    in customizing your scans.
  prefs: []
  type: TYPE_NORMAL
- en: '**Where can you find instructions on this thing?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Linux box, there are three places where you can find more information
    about a command-line application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The help page**: Almost all Unix and Linux applications have a help file
    that you can access by typing the application name and `-h` on the command line.
    Consider the following as an example: `root@kali-01: ~# nmap -h`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The man page**: This is a full manual for most modern command-line applications,
    which you can access by typing `man` and the application name on the command line.
    See the following for an example: `root@kali-01: ~#-`. This gets you a pretty
    good explanation of how to use Rsync, the secure and logged file transfer protocol.
    Man pages are of varying quality, and many of them are actually written by rocket
    scientists, so a newbie may have to research how to read the manual page before
    it will be useful to them. The Nmap man page is clearly written, with understandable
    examples to try out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Info pages**: For Bash shell built-ins, there is a group of information pages,
    instead of man pages. To get at the info pages, type `info` and the application
    name. For example, `root@kali-01: ~# info ls` will present you with the info page
    for the ls command, which is the Linux version of the DIR command in DOS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-h` commands present you with in-line text in the Terminal window, so you
    are returned to the Command Prompt immediately after the information scrolls past.
    The `man` and `info` commands launch the text reader, **Less**, so you can scroll
    up and down on the document, even though you are still in the Terminal window.
    To escape from **Less**, just press the Q key.
  prefs: []
  type: TYPE_NORMAL
- en: The Shift key is your friend in the Linux Terminal Emulator.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to scroll up and down in the Terminal window, for instance, if the
    `-h` help file is longer than a single screen, just hold Shift + the up or downcursor
    key.
  prefs: []
  type: TYPE_NORMAL
- en: The hot-key sequence for copy and paste are *Shift* + *Ctrl* + *C* and *Shift*
    + *Ctrl* + *V*, respectively. *Ctrl* + *C*Â means close the running application
    in the Bash Shell, and *Ctrl* + *V* does nothing at all.
  prefs: []
  type: TYPE_NORMAL
- en: The Nmap 6.47 help file can be found at [http://nmap.org](http://nmap.org).
  prefs: []
  type: TYPE_NORMAL
- en: '| **Usage**: `nmap [Scan Type(s)] [Options] {target specification}` |  |'
  prefs: []
  type: TYPE_TB
- en: '| **TARGET SPECIFICATION**: |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Ex**: | `atlantacbudtech.com`, `aarrrggh.com/26`, `192.168.3.111`; `10.1-16.0-255.1-254`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-L <inputfilename>`: | Input from list of hosts/networks. |'
  prefs: []
  type: TYPE_TB
- en: '| `-R <num hosts>`: | Choose random targets. |'
  prefs: []
  type: TYPE_TB
- en: '| `-exclude <host1, [host2], [host3], ...>`:Â  | Exclude hosts/networks. |'
  prefs: []
  type: TYPE_TB
- en: '| `-exludefile <exclude_file>`: | Exclude list from file. |'
  prefs: []
  type: TYPE_TB
- en: '| **HOST DISCOVERY**: |  |'
  prefs: []
  type: TYPE_TB
- en: '| `-sL`: | List Scan - simply list targets to scan. |'
  prefs: []
  type: TYPE_TB
- en: '| `-sn`: | Ping Scan - disable port scan. |'
  prefs: []
  type: TYPE_TB
- en: '| `-Pn`: | Treat all hosts as online - skip the ping for host discovery. |'
  prefs: []
  type: TYPE_TB
- en: '| `-PS/PA/PU/PY [portlist]`: | TCP SYN/ACK, UDP or SCTP discovery to given
    ports. |'
  prefs: []
  type: TYPE_TB
- en: '| `-PE/PP/PM`: | ICMP echo, timestamp, and netmask request discovery probes.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-PO [protocol list]`: | IP protocol ping, as opposed to ICMP ping. |'
  prefs: []
  type: TYPE_TB
- en: '| `-n/-R`: | Never do DNS resolution/Always resolve [default:sometimes]. |'
  prefs: []
  type: TYPE_TB
- en: Resolving DNS gives you more information about the network, but it creates DNS
    request traffic, which might alert a sysadmin that there is something going on
    that is not entirely normal, especially if they are not using DNS in the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a view of the help file that comes with Nmap, with our comments included
    (you can find much more at the manual page at [http://nmap.org/book/man/](http://nmap.org/book/man/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '`--dns-servers <serv1[,serv2],...>`: Specify custom DNS servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--system-dns`: Use OS''s DNS resolver. This is the default behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--traceroute`: Trace the hop path to each host. This would only make sense
    in large, complicated, segmented networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scan techniques:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`-sS/sT/sA/sW/sM`: TCP SYN/Connect()/ACK/Window/Maimon scans'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sU`: UDP scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sN/sF/sX`: TCP Null, FIN, and Xmas scans'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--scanflags <flags>`: Customize TCP scan flags'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NS - ECN-nonce concealment protection (this is experimental: see RFC 3540 for
    more information).'
  prefs: []
  type: TYPE_NORMAL
- en: '`CWR`: Congestion Window Reduced. Used to indicate that packets are being reduced
    in size to maintain traffic under congested network conditions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ECE`: ECN-Echo has a dual role, depending on the value of the SYN flag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the SYN flag is set (1), then it indicates that the TCP peer is ECN-capable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the SYN flag is clear (0), then it indicates that a packet with a Congestion
    Experienced flag in the IP header set is received during normal transmission (this
    is added to the header by RFC 3168).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`URG`: This indicates that the Urgent pointer field is significant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ACK`: This indicates that the Acknowledgment field is significant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PSH`: The Push function. Asks to push the buffered data to the receiving application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RST`: Reset the connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SYN`: Synchronize sequence numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FIN`: No more data from sender.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sI <zombie host[:probeport]>`: Idle scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sY/sZ`: SCTP INIT/COOKIE-ECHO scans.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sO`: IP protocol scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-b <FTP relay host>`: FTP bounce scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port specification and scan order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-p <port ranges>`: Only scan specified ports.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following code: `-p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9`'
  prefs: []
  type: TYPE_NORMAL
- en: '`-F`: Fast modeâscan fewer ports than the default scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r`: Scan ports consecutively-don''t randomize'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--top-ports <number>`: Scan <number> most common ports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--port-ratio <ratio>`: Scan ports more common than a given `<ratio>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Service/version detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-sV`: Probe open ports to determine service/version info'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--version-intensity <level>`: Set from 0 (light) to 9 (try all probes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--version-light`: Limit to the most likely probes (intensity 2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--version-all`: Try every single probe (intensity 9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--version-trace`: Show detailed version of scan activity (for debugging)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Script scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-sC`: equivalent to `-script=default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script=<Lua scripts>`: `<Lua scripts>` is a comma-separated list of directories,
    script-files, or script-categories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script-args=<n1=v1,[n2=v2,...]>`: provide arguments to scripts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script-args-file=filename`: provide NSE script arguments in a file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script-trace`: Show all data sent and received'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script-updatedb`: Update the script database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script-help=<Lua scripts>`: Show help about scripts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Lua scripts>` is a comma-separated list of script-files or script-categories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OS detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-O`: Enable OS detection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--osscan-limit`: Limit OS detection to promising targets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--osscan-guess`: Try to guess the OS more aggressively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Timing and performance:'
  prefs: []
  type: TYPE_NORMAL
- en: Options that specify time intervals are in seconds, or we can append 'ms' (milliseconds),
    's' (seconds), 'm' (minutes), or 'h' (hours) to the value. For example, `23ms`
    would translate as 23 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: '`-T<0-5>`: Set the timing template (higher is faster, and also noisier)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--min-hostgroup/max-hostgroup <size>`: Parallel host scan group sizes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--min-parallelism/max-parallelism <numprobes>`: Probe parallelization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout <time>`: Specifies probe
    round-trip time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--max-retries <tries>`: Caps the number of port scan probe retransmissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--host-timeout <time>`: Give up on target after this time interval'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--scan-delay/--max-scan-delay <time>`: Adjust the delay between probes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--min-rate <number>`: Send packets no slower than <number> per second'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--max-rate <number>`: Send packets no faster than <number> per second'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Firewall/IDs evasion and spoofing:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-f; --mtu <val>`: fragment packets (optionally with a given MTU)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-D <decoy1,decoy2[,ME],...>`: Cloak a scan with decoys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-S <IP_Address>`: Spoof the source address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-e <iface>`: Use a specified interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-g/--source-port <portnum>`: Use a given port number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--proxies <url1,[url2],...>`: Relay connections through HTTP/SOCKS4 proxies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--data-length <num>`: Append random data to sent packets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ip-options <options>`: Send packets with specified IP options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ttl <val>`: Set IP time-to-live field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--spoof-mac <mac address/prefix/vendor name>`: Spoof your MAC address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--badsum`: Send packets with a bogus TCP/UDP/SCTP checksum'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-oN/-oX/-oS/-oG <file>`: Output the scan in normal, XML, s|<rIpt kIddi3, and
    grepable format, respectively, to the given filename'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-oA <basename>`: Output in the three major formats at once'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`: Increase verbosity level (use `-vv` or more for greater effect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`: Increase debugging level (use `-dd` or more for greater effect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--reason`: Display the reason a port is in a particular state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--open`: Only show open (or possibly open) ports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--packet-trace`: Show all packets sent and received'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--iflist`: Print host interfaces and routes (for debugging)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-errors`: Log errors/warnings to the normal-format output file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--append-output`: Append to, rather than clobber, specified output files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--resume <filename>`: Resume an aborted scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--stylesheet <path/URL>`: Use an XSL stylesheet to transform XML output to
    HTML'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--webxml`: Reference stylesheet from nmap.org for more portable XML'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-stylesheet`: Prevent associating of XSL stylesheet with XML output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Miscellaneous:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-6`: Enable IPv6 scanning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-A`: Enable OS detection, version detection, script scanning, and traceroute.
    This is a shortcut for `-sS -sV --traceroute -O`. This is Wolf''s favorite scanning
    option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--datadir <dirname>`: Specify custom Nmap data file location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--send-eth/--send-ip`: Send using raw ethernet frames or IP packets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--privileged`: Assume that the user is fully privileged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--unprivileged`: Assume the user lacks raw socket privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-V`: Print Nmap version number. Doesn''t work in conjunction with other options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`: Print the help summary page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can construct custom Nmap scanning strings and copy them into Zenmap, so
    you get the benefits of the Zenmap interface.
  prefs: []
  type: TYPE_NORMAL
- en: Using OpenVAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Chapter 2, we set up OpenVAS for vulnerability scanning. Nmap does a great
    job of reporting ports and services, but lacks the ability to scan for vulnerabilities.
    OpenVAS will find vulnerabilities and produce a report on systems. The guys at
    OpenVAS update their vulnerability list weekly, so it is best to update OpenVAS
    before running a scan. To do this on Kali, run the following commands from the
    Terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run vulnerability updates for OpenVAS. The first time you run it,
    you will see the information visible in the following screenshot, asking you to
    migrate to using Rsync to update the vulnerabilities. Type `Y` and hit the *Enter*
    key. The update will start. The first time this is run, it will take quite a while,
    because it has to give you the entire list of plugins and tests available. In
    subsequent runs of the `update` command, it only adds the new or changed data,
    and is far faster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4eb5d48-5264-41c1-ae7d-43ef2e7dcd41.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After this finishes updating, we are ready to go. Now let''s fire up the OpenVAS
    service. Go to Applications | Kali Linux | System Services | OpenVAS | OpenVAS
    start. A Terminal window will open and you will see related services starting.
    Once they are started, you can close this window and go to the following link:
    `https://localhost:9392`.'
  prefs: []
  type: TYPE_NORMAL
- en: When would you not use OpenVAS?
  prefs: []
  type: TYPE_NORMAL
- en: On some company networks, there are scanning services in place that you can
    use to scan for vulnerabilities. There is no sense in doing it twice, unless you
    suspect that the official company scanning tool is not configured properly for
    the scope of the search, or that it has not been updated to include searches for
    the most recent vulnerabilities. Scanning services such as Qualys, Nexpose, and
    Nessus are great scanning tools and accomplish the same task as OpenVAS. All of
    these services export their data in XML format, which can then be imported later
    into tools such as Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Now, log into the OpenVAS web interface with the extremely long and complex
    password that was generated during the setup steps. Normally, the user is `admin`.
  prefs: []
  type: TYPE_NORMAL
- en: Now is a good time to go to the Administration tab and change the password to
    something still complex but more easily remembered.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run your first scan, just enter the network subnet or the single IP address
    of the machine to be scanned into the scan text box, and start the scan by clicking
    the button. The little geeky girl wizard will set up several normal parameters
    for you and run the scan. You can also set up custom scans, and even schedule
    jobs to run at a given date and time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a85dc8e9-dd39-4af2-bc7e-ac0e5af2a129.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the scan is started, you will get the following screen. At this point,
    you will see it marked Requested, and in a minute or so the screen will refresh
    and you will see the progress bar start to move. Depending on how large a network
    you are scanning, you can either go get a cup of coffee, go have a meal, come
    back tomorrow, or leave for the weekend. This will take a while. The good thing
    to note is you do not need to stay close by to click a Next button throughout
    this process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the scan has completed, you will see a screen like the following one.
    Go to the Scan Management tab, and then to Reports in the drop-down menu. This
    will take you to the reports page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/824c6c7d-53ac-4d9a-a059-57ad4366833b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The reports page will give you the results of the scan, categorizing the vulnerabilities
    found from the most severe to the lowest, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/acd7f2e3-954d-4282-b9d5-77be2875e630.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, you can generate a report in various formats. Pick the format needed
    and click the green button, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c87d4a4-47c8-47bc-ae8c-3b0964fb981c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can then download the report. You can edit it to display your company logo,
    and any required company information that is not already in the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2647312-ed08-4b74-b7f3-4b6be35cb0b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Maltego
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Maltego** is an information gathering tool that has many uses besides gathering
    network information. You can also gather information on people and companies from
    various sources. For now, we will use it for gathering network information about
    a public network.'
  prefs: []
  type: TYPE_NORMAL
- en: The first time you start Maltego, you will need to do some setup, and also register
    at their website in order to log in to the Transform servers. It's easy, free,
    and spam-free, so giving them your email address won't be a problem. First, you
    will need to pick the version that you want to use. Maltego XL and Classic are
    professional versions, which you must pay to get a license for. The CE version
    is the free version, and while you are learning how to use this tool, the CE version
    that we will be using in the following section will work just fine. If you are
    pen-testing for a living, the license for the Classic version is a bit expensive,
    but worth it. The paid-for versions will pull down over 10,000 entities in its
    searches. The CE version is limited to 10 per entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, pick the CE version and click Run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22950f50-6818-4b30-802d-62b6ed19d07a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, fill in the information that you used for registration, solve the Captcha,
    and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/644d528b-8d22-44f9-9537-fec223335dfb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, we are all registered, and we get the following window. Click Next to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8dd88348-0735-44b8-a380-39ed3a70a753.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we get a window asking how we want to start. We are going to pick a blank
    chart, then click Finish, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b141eeb6-ed46-4003-abfd-481d6090ba1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After we click Finish, we are given a blank chart page, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bdb499cb-6b04-4cc6-81d3-525d1245930d.png)'
  prefs: []
  type: TYPE_IMG
- en: So, let's footprint a domain.
  prefs: []
  type: TYPE_NORMAL
- en: Click and drag the Domain icon in the left tool bar to the center of the graph
    page. The default domain is shown as paterva.com. This is Maltego's website and
    is just a placeholder for now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e94cb9ee-8216-4540-bc87-2cc8b3cc14ab.png)'
  prefs: []
  type: TYPE_IMG
- en: In the bottom right-hand toolbar, in the Property View, change paterva.com to
    the domain that you want to footprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: never test anything you don''t own or have written permission to
    test! Jail is no fun, and the powers that be are coming down hard on hacking and
    you don''t want to be labeled a *cyber-terrorist*.Â And no, you do not have permission
    to test my stuff. Please play nice!'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following section, we are going to footprint one of the writer''s domains:Â `boweaver.com`.
    Since I own the domain, I give myself permission to test the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3589676-7b53-4d67-b7c4-e771f8205e8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, right-click on the domain icon, and you'll get a command window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the double arrows. This will run all the transforms on the domain.
    This will take a minute to run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f7cbdf0d-0580-42dc-b954-756f09be8afd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the transforms have run, you''ll see the output information on the screen.
    Just in one click, the application went out, checked many online sources, and
    pulled a lot of basic information about the domain: the owner, the IP address,
    the physical location of that address, and a lot more. You can now right-click
    on any of these entities to drill down and gather more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb9725be-03cc-4c4e-989e-b7939eefab9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we''ve generated some data, we need to save our results. Click on
    the Maltego icon (the circle with three colored circles inside it, at the top-left
    of the window), then click on Save As and save your file to your project workspace,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e589a3e4-5c96-4203-9019-9cade47268ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's look at some of the information gathered. From the first line, we
    can tell the domain is registered at GoDaddy. The DNS-listed admin email address
    is `postmaster@boweaver.com`. On the second line, we see other DNS record entries,
    which show the mail server (`bomail`) and the web server (`www`). We also see
    there is a relation to the domain `boweaver.net`. On the third line, we see several
    email addresses that the search has found from the transform sources. Also, the
    MX record listing for the domain shows `bomail.boweaver.com` and the mail server
    for this domain. The fourth line shows the NS server and entities connected to
    the domain.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5249a0ce-3532-4e59-8e67-dcc578b8e56b.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the left part of the data output in the following screenshot. By
    looking at the abuse email address listed there, we can tell that a privacy block
    is set on the domain, so the phone numbers and email addresses point to GoDaddy.
    We also see the related website `www.boweaver.com` listed. So, a simple one-click
    search has revealed a lot of information about the domain, its structure, and
    its owners.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c583ce95-9589-429f-b056-148536ca2c70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By right-clicking on the website, we get the following window. By clicking
    the double arrows next to Resolve to IP, we get the IP address and network information
    for the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95bcbbfb-3c44-44d7-b802-a510b6a407df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, by digging deeper, we have found the IP address, the assigned network block,
    and the **Autonomous System Number** (**ASN**). We can also see that the site
    is hosted at Digital Oceans'' New York data center:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42daf813-3d32-48f4-86eb-9e7e05795852.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Maltego lets you save this information to a table (a CSV file), generate a
    report, or export a graph as an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf2d6c37-aec3-4237-b00e-1f841f1a0b14.png)'
  prefs: []
  type: TYPE_IMG
- en: So, with just two clicks of a mouse in this application, and not once actually
    touching any of the target's assets, we have determined a lot of information about
    the target.
  prefs: []
  type: TYPE_NORMAL
- en: This is just a simple use of this tool. The depths of information that this
    tool can dig up are astounding, and also kind of scary, especially if you get
    the pro version. Full use of this tool is beyond the scope of this book. There
    are plenty of online sources on the in-depth use of this tool.
  prefs: []
  type: TYPE_NORMAL
- en: Using KeepNote
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A word here on note-taking! Penetration testing gathers a lot of data, even
    on a small network, and I mean a lot! So when pen-testing, you need the ability
    to gather your incoming data as you are carrying out the test. Kali comes with
    several applications for this. Whichever one you choose, just choose one and use
    it. Six weeks after the test is run, and you need to go back and verify something,
    you'll be happy you did. Also, when testing in a high-security environment, such
    as a network that must be either HIPPA- or PCI-compliant, these notes are particularly
    useful when building your report. Also, make sure you keep all your project files
    in one directory along with this framework. Another reason to take good notes
    is that, if legal actions arise, your notes could be your best defense.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the framework Bo uses. He makes a folder for
    the client organization, and then a folder for the actual test with the date in
    the folder name. It is safe to assume that, wherever you ply your trade, you will
    see the same clients over and over. If you are not seeing repeat business, something
    is wrong with your own business model. Ext-20150315 translates to an external
    test conducted on 20150315\. 20150315 is a Unix-style date that breaks down to
    YYYYMMDD. If you see Unix-style datestamps that look like 20150317213209, then
    this can be broken down to the second. Inside of that folder, Bo sets up directories
    for evidence, notes, and scans-docs. All evidence collected, including screenshots,
    is dropped into the `evidence` folder. Notes from KeepNote are kept in the `notes`
    folder, and scans and other related documents are kept in the `scans-docs` folder.
    When we start conducting tests later in this book, you will see this framework
    being used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the folder layout. We are using the LXDE File
    Manager in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a1a71aa-96b4-4282-b0e9-63dfe17ed211.png)'
  prefs: []
  type: TYPE_IMG
- en: Even if you work for only one company, keep each test's data separated and dated;
    this will help you to keep track of your testing.
  prefs: []
  type: TYPE_NORMAL
- en: For the actual note-taking, Kali comes with several applications, as shown previously;
    Maltego is one of these tools and is capable of keeping all your data in one place.
  prefs: []
  type: TYPE_NORMAL
- en: Bo's favorite is KeepNote. You saw an introduction to KeepNote in [Chapter 1](b18fe074-058f-410f-86de-77499a727708.xhtml),
    *Choosing Your Distro*. KeepNote is a simple note-taking application. As Bo tests,
    he keeps copies of outputs from manual exploits, individual scan data, and screenshots.
    What makes this nice is that you have the ability to format your data as you go,
    so importing it into a template later is just a matter of copy/paste.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75220810-40c0-4906-ac1f-ecaa0e5bdf58.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned some of the many uses of the Nmap tool, and
    its GUI interface, Zenmap. We learned about the detailed use of OpenVAS Vulnerability
    Scanner, and the use of this data in your attack. We also learned about the use
    of the informational gathering tool, Maltego.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Nmap Network Scanning by Fydor**: [https://nmap.org/book/](https://nmap.org/book/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenVAS Documentation**: [http://www.openvas.org/documentation.html](http://www.openvas.org/documentation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maltego User Guide**: [https://www.paterva.com/web7/docs/userguides/user_guide.php](https://www.paterva.com/web7/docs/userguides/user_guide.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
