- en: Password Attacks â€“ The Fault in Their Stars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying different types of hash in the wild!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using hash-identifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking with patator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking hashes online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing with John the ripper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Johnny Bravo!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using cewl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating word list with crunch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A weak password is a well-known scenario where most of the corporates are compromised.
    A lot of people use weak passwords that can be brute forced and plaintext can
    be obtained. In this chapter, we will talk about different ways in which we can
    crack a password hash obtained during a pentest activity performed on a webapp/network,
    among others.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying different types of hash in the wild!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hashes are generated by one-way mathematical algorithms, which means they cannot
    be reversed. The only way to break is to brute force them. In this recipe, you
    will learn how to identify some of the different types of hashes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following are the types of hashes.
  prefs: []
  type: TYPE_NORMAL
- en: MD5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the most common type of hash. MD stands for **Message Digest** algorithm.
    These hashes can be identified using the following observation:'
  prefs: []
  type: TYPE_NORMAL
- en: They are hexadecimal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are 32 characters in length and of 128 bits, for example, `21232f297a57a5a743894a0e4a801fc3`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL less than v4.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We may come across such hashes while extracting data from SQL Injection. These
    hashes can be identified using the following observation:'
  prefs: []
  type: TYPE_NORMAL
- en: They are hexadecimal as well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are 16 characters in length of and 64 bits, for example, `606727496645bcba`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MD5 (WordPress)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is used on websites made via WordPress. These hashes can be identified
    using the following observation:'
  prefs: []
  type: TYPE_NORMAL
- en: They begin with `$P$`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They contain alphanumeric characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are 34 characters in length and of 64 bits, for example, `$P$9QGUsR07ob2qNMbmSCRh3Moi6ehJZR`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is used in newer versions of MySQL to store credentials. These hashes
    can be identified using the following observation:'
  prefs: []
  type: TYPE_NORMAL
- en: They are all CAPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They always start with an *asterisk*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are 41 characters in length, for example, `*4ACFE3202A5FF5CF467898FC58AAB1D615029441`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base64 encoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Base64 is easy to identify. The conversion is done by encoding eight octets
    into four characters. The easiest way to check a Base64 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the length is a multiple of 4 characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify that every character is in the set A-Z, a-z, 0-9, +, / except the padding
    at the end, which is 0, 1, or 2, = characters, for example, `YW55IGNhcm5hbCBwbGVhc3VyZS4=`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s an article to learn more about different types of hashes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.101hacker.com/2010/12/hashes-and-seeds-know-basics.html](http://www.101hacker.com/2010/12/hashes-and-seeds-know-basics.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Using hash-identifier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding recipe, you learned how to identify some common hash types.
    But there are other hashes as well, and in this recipe, you will learn how to
    identify other hashes we find during our pentesting project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of hash-identifier:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali comes preinstalled with a tool called hash identifier. To start the tool,
    we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7621405e-a661-48b5-91dd-730589d384a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now all we need to do is paste the hash we found here, and it will show us
    the type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fda88db1-ba2a-4f6c-8646-24dfc886216a.png)'
  prefs: []
  type: TYPE_IMG
- en: Cracking with patator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, it is possible we have the usernames but we want to try brute forcing
    the password for it. Patator is an amazing tool that allows us to brute force
    multiple types of logins and even ZIP passwords. In this recipe, we will see how
    to use patator to perform a brute force attack.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following are the steps to use patator:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see all the options, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46dc4fa8-7370-4303-8994-e4eaef109036.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to brute force an FTP login:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0c1dadf-bd97-4661-9503-f340c6373d8f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now set the `host`, `user` file, and `password` file and run the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c9f8b24-4d4f-4c4f-a0ca-06aafd033b93.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that access has been granted and the module has stopped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cracking hashes online
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often when we come across hashes while pentesting, it''s a good idea to check
    the hash online: whether it has been already cracked or not. In this recipe, you
    will learn about some of the cool websites that provide the hash cracking service.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at identifying different types of hashes.
  prefs: []
  type: TYPE_NORMAL
- en: Hashkiller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of Hashkiller:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hashkiller is a great service where we can submit our hashes, and if it has
    already been cracked in the past, it will show us the plaintext:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/714fa5ac-a3a0-4378-b325-97dee1e71141.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The process is simple; we simply choose the option on the website where it
    says Decrypter / Cracker and then we click on the type of hash we want to crack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7a0893f5-8a61-4c69-9be4-c06c4d78fe7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the page that opens, we paste our hash, fill in the CAPTCHA, and then click
    on Submit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28c468cd-eb2d-4af7-b625-7cd3d6e09519.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the hash exists, it will show us the plaintext; else, we will see a message
    saying Failed to find any hashes!:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0d907b24-ab9a-4c4e-a44c-eba1f711ee3f.png)'
  prefs: []
  type: TYPE_IMG
- en: Crackstation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Crackstation is a free service that supports MD2, MD5, NTLM, and SHA1 cracking.
    It uses its own word list and lookup tables to effectively perform a plaintext
    search of a hash from its database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We visit the website [https://crackstation.net/](https://crackstation.net/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed038a5f-d588-44ca-9834-f7c14a7d810a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We paste the hash that we want to crack and fill in the CAPTCHA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f00d32e0-bd02-45a2-a8ee-4e0675027952.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will see the plaintext if the hash is found; else, we see a message that
    says the hash was not found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/914c8ba8-702a-449f-87e9-2d8634a70d38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Crackstation also provides a download link of its password list and lookup
    tables if we want to use it for the offline cracking of passwords using hashcat,
    among others, [https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm](https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b78c8393-ef80-4e56-882d-38b09393bae3.png)'
  prefs: []
  type: TYPE_IMG
- en: OnlineHashCrack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a freemium service and one of my favorites. It supports OSX, MD4, MD5,
    NTLM, WPA(2), and the brute forcing of Word, Excel, PPT-protected documents as
    well. It provides up to eight characters password-free, after which it charges
    a small fee to reveal the password, which has been cracked successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We visit the website [http://onlinehashcrack.com/](http://onlinehashcrack.com/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0eaa159d-5873-497f-8093-3df7e508bc9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can submit our hashes or the `.apt` file for cracking and the email
    address where we want to receive our notification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e5f8a60-ce72-4348-a0ef-19dcd1f17179.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the unique link we receive in our email, we can then see the status of all
    the hashes that were cracked or not found on the website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/91e5dc8d-b703-40a1-8904-1b615c2fabc1.png)'
  prefs: []
  type: TYPE_IMG
- en: Playing with John the ripper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Websites and online services may not be always available and it is also possible
    that those websites may not have the plaintext of the hash we have found. In such
    cases, we can use different offline tools that are available to crack the hashes.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume we now have the hash and we have identified what type it is. In
    this recipe, we will see how to crack hashes with John the ripper. John is fast
    and supports various cracking modes. It also has the ability to auto-detect the
    hash type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'to learn about John the ripper, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the full features using the help (`-h`) command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dcdde2e5-00c3-422a-82d9-b0db8d96d0c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To crack the password, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will see that the password has been cracked successfully!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/65614c93-756b-41a0-a96b-94197c32f363.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information you can refer to the following articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats](http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Johnny Bravo!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Johnny is a GUI client for John. Since it adds a UI, it becomes much easier
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about Johnny follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have learned to use John in our previous recipe. We will start Johnny using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a6df28f-4ea3-4062-babd-bbca0835b8ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We load our password file by clicking on the Open Passwd File option. Our file
    is loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/67bfc2c7-9007-473f-b365-b06b0f18a239.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we go to Options and choose the type of attack we want to perform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/94dda386-d2cf-4eea-817b-d93b7cee9917.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We choose the Format of the hash:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ac61e99-c00b-477f-97f6-8f33da475e27.png)'
  prefs: []
  type: TYPE_IMG
- en: Once it is done, we click on Start Attack, and we should see our password when
    it's cracked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using cewl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `cewl` is a ruby-based crawler that crawls a URL and searches for words
    that can be used for password attacks. In this recipe we will look at how to use
    it to our advantage.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following are the steps on using `cewl`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To view all the options of `cewl`, we use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28ca2f77-8349-4e38-b55b-0abbdd363864.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To crawl a website, we use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e77aa60-2a6c-4450-8ac5-3b726f06fd65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will see a list of interesting keywords that can be used to make our own
    dictionary the password list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/501811e8-de2e-4af9-9d15-1db24d860544.png)'
  prefs: []
  type: TYPE_IMG
- en: Generating word list with crunch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Crunch is a word list generator. It uses permutations and combinations to generate
    all possible combinations of the supplied character set.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about Crunch follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Crunch is preinstalled with Kali, and we can launch it with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/38d54f58-1bb5-468d-9831-e552fe6af082.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we see, it is easy to use to generate a password list of a minimum of two
    characters and maximum of two characters containing only `abcdef`, and we can
    use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the word list has been generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a494141a-f419-4c9a-bfe3-dd7c91460257.png)'
  prefs: []
  type: TYPE_IMG
- en: To save it in a file, we can use the `-o` switch. Crunch also has an inbuilt
    list containing a predefined character set. It can be found at `/usr/share/crunch/charset.lst`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To use a charset, we use the `-f` switch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16b316a9-0366-4841-9a00-e945fd4cae5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will generate a list of a minimum length and maximum length of `2`, containing
    lowercase alphabets. Crunch also has a `-t` switch, which can be used to create
    a word list of a specific pattern:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@`: This will insert lowercase characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`,`: This will insert uppercase characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%`: This will insert numbers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`^`: This will insert symbols'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Switch `-b` can be used to specify the size of the file you want to create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4deacd02-cccb-477c-941a-57b657c1c6bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to create a list with a specific pattern and of 1 MB in size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it''s, done, we will see a list of text files created with the pattern
    in the same folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b748c3bc-c127-40bd-8434-8d513052907a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `-z` flag can be used to create a word list and save it in a compressed
    file. The compression is done on the go:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89842d96-8111-4070-868a-8f115ff80512.png)'
  prefs: []
  type: TYPE_IMG
