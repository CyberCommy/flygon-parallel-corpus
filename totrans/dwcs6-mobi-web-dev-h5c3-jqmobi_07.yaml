- en: Chapter 7. Creating Mobile Pages with jQuery Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a web design consultant, I''m immersed for periods of time studying statistical
    trends—who is using the Web? To do what? In what browsing environments? But you
    probably don''t need a summary of my research to know that both in numbers and
    in impact, people using mobile devices constitute the dynamic factor in web activity.
    I''ll share one statistic compiled from a number of surveys I''ve been sifting
    through: as this edition of our book goes to press, about half of all visits to
    websites will be from mobile devices. And in categories such as entertainment
    and restaurants, an overwhelming amount of web browsing is already done using
    mobile devices.'
  prefs: []
  type: TYPE_NORMAL
- en: Are they using web browsers for this? Or apps? Both. But at this stage of the
    game, mobile websites provide a far more accessible technique for developers.
    You can, and will, create fully mobile-friendly websites with jQuery Mobile that
    look and feel like apps but that do not require the high-level coding involved
    in building apps.
  prefs: []
  type: TYPE_NORMAL
- en: This is not our first engagement with the challenges of designing for multiple
    media. In [Chapter 6](ch06.html "Chapter 6. Responsive Design with Media Queries"),
    *Responsive Design with Media Queries*, we began by exploring pages built with
    HTML5's Media Queries to present the same content, but with different styling,
    for full-sized, mobile, and tablet-sized pages. And in [Chapter 5](ch05.html "Chapter 5. Embedding
    HTML5 Native Audio and Video"), *Embedding Native Audio and Video*, we explored
    using HTML5 audio and video to embed mobile-friendly (non-Flash) video in web
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Mobile pages provide a more radical approach to creating mobile-friendly
    content than simply using Media Queries and mobile-friendly video. jQuery Mobile
    pages involve creating *different*, *distinct* content for mobile devices (usually
    shorter, more compressed content) and presenting that content in a radically different
    way from websites aimed at desktop and laptop users. We'll explore what that means
    next.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Design for mobile—an overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps and mobile pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The three components of Mobile Web: HTML5, CSS, and jQuery Mobile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQuery Mobile in Dreamweaver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating mobile-ready pages from starter pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing Mobile starter page content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding "pages"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing mobile page CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile pages – an overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The principles involved with designing mobile sites can be boiled down to one
    word: simple.'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile sites have to be simple in design. People are viewing and interacting
    with them on small devices. It is for this reason that columns, sidebars, and
    complex backgrounds that work well on a laptop or desktop are uninviting and inaccessible
    on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second dimension of "simple" when it comes to design for mobile devices
    is that sites can''t be loaded up with plugins (such as Flash), server-side scripting
    (such as PHP), or complicated navigation schemes. Some of these features are supported
    in some mobile devices (Flash is supported in some versions of the Android operating
    system), but most are not. Moreover, mobile devices have limited processing power,
    battery time, and other constraints that take us back to the watchword: simple.'
  prefs: []
  type: TYPE_NORMAL
- en: Laptops and desktops on one hand and mobile devices on the other have quite
    different interface features. Obviously, in most cases, desktop/laptop viewports
    (screens) are wider. So multicolumn page layouts are not only possible, they are
    generally necessary to present inviting content. This is not the case with mobile
    phones and not even with large tablets.
  prefs: []
  type: TYPE_NORMAL
- en: Desktop and laptop computers have a mouse or some kind of hover device that
    can hover over an object; mobile devices have touchscreens that can be resized
    or scrolled.
  prefs: []
  type: TYPE_NORMAL
- en: Take some time to examine your favorite sites on both a full-sized viewport
    and in a mobile device. You'll see that professionally designed sites have a separate
    mobile presence that takes these factors into account. YouTube, for example, presents
    a multicolumn grid in a laptop and takes advantage of hovering to allow users
    to get pop-up content when they hover over an element on the page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mobile pages – an overview](img/4742_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the other hand, if you visit YouTube on an iPhone, you'll experience a single-column
    site that does not rely on hovering.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mobile pages – an overview](img/4742_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mobile pages, apps, and jQuery Mobile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the introduction to this chapter, I briefly pointed out the relationship
    between using responsive design (Media Queries), jQuery Mobile, and apps to present
    mobile-accessible pages. Let me expand on that a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: Responsive design is the easiest approach to mobile-friendly content from a
    development perspective because with this approach you use the same content for
    all your pages and simply present distinct page layouts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'jQuery Mobile requires more work since it involves distinct content for mobile
    pages, different from that provided to fullscreen visitors. On the other hand,
    jQuery Mobile sites have a number of advantages such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They download more quickly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They provide inviting animation and interactivity for mobile users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They allow the use of special, mobile-friendly navigation elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They enable form elements that work better in small screens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The remainder of this chapter will walk you through how that works
  prefs: []
  type: TYPE_NORMAL
- en: Apps look and act much like jQuery Mobile pages but require a whole other level
    of expertise and resources for their creation and maintenance. Apps are written
    either in the Objective-C programming language or in other complex programming
    languages. We'll explore PhoneGap in depth in the last chapter of this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While app development makes sense for major institutions with relatively unlimited
    development resources, or people whose main goal is to sell apps for profit at
    iTunes, an overwhelming majority of websites are served best with either responsive
    design or jQuery Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: What is jQuery Mobile?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jQuery is a library of JavaScript-based objects. JavaScript works in any browser
    or operating system. It is an open source (free) software.
  prefs: []
  type: TYPE_NORMAL
- en: OK, so what is JavaScript? And what is a library?
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript is a *client-side* scripting language. That is, it is a programming
    language that creates animation and interactivity that is run in browsers ("client"
    is more or less a techie term for browser). Another way to put it: JavaScript
    (almost always) runs on a user''s computer, not on a server.'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript has been part of Dreamweaver for as as long as Dreamweaver has existed.
    The rather abandoned **Behaviors** panel generates JavaScript. Spry widgets (introduced
    in the earlier versions of Dreamweaver) are JavaScript based. In another dimension
    of web design, that is, outside of Dreamweaver, jQuery has evolved as a relatively
    accessible set of customizable JavaScript objects. Now when I say relatively accessible,
    I mean that implementing JavaScript through the jQuery library still requires
    editing JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A library, in the context in which we''re using the word here, is usually a
    combination of HTML, CSS, and a programming language. What you get from such libraries
    are sets of files: one or more HTML files, one or more CSS files, and one or more
    program files that add animation and interactivity to HTML and CSS. These files
    work together—you need HTML, CSS, and the program script to make the library element
    work.'
  prefs: []
  type: TYPE_NORMAL
- en: With the emergence of mobile devices, a distinct JavaScript library emerged—jQuery
    Mobile—with a set of objects particularly useful in designing for mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Creating mobile pages from Dreamweaver starters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A small, but very substantial, set of jQuery Mobile objects are available in
    the **Design** view in Dreamweaver. They don't require coding! The most widely
    used of these objects have been bundled into a very handy set of customizable
    starter pages. In this chapter, we'll create pages using these starters, examine
    them, and customize the HTML and CSS that control the content and look of these
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery objects that come with mobile starter pages in Dreamweaver are not
    customizable themselves. In this way, they differ a bit from the Spry widgets
    in Dreamweaver where you can often customize some of the JavaScript itself. But
    as we'll see, this isn't going to be much of a problem because you can do most
    of the customizing you can imagine doing by editing the HTML and CSS associated
    with jQuery Mobile objects.
  prefs: []
  type: TYPE_NORMAL
- en: How does that work? Dreamweaver has set up tools that allow us to customize
    jQuery Mobile objects without worrying about what is happening under the surface.
    But as a very basic foundation, it is helpful to understand that JavaScript (and
    this applies to both Spry and jQuery Mobile objects) works either on HTML objects
    (such as tags, often including `div` tags) or on defined CSS style properties.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a jQuery object might change its background color when clicked
    (or tapped on a mobile device). But the colors—both before and after—are defined
    in an associated CSS rule that is accessible in the **CSS Styles** panel. Moreover,
    the content (text, images, media) in that object is defined by the HTML you create
    in Dreamweaver's **Design** view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dreamweaver comes with three starter pages based on jQuery Mobile: **jQuery
    Mobile (CDN)**, **jQuery Mobile (Local)**, and **jQuery Mobile with theme (Local)**.
    You can access these options to open the **New Document** dialog by navigating
    to **File** | **New** and choosing **Page** from **Sample** in the left-hand side
    column and from **Mobile Starters** in the **Sample Folder** column.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating mobile pages from Dreamweaver starters](img/4742_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What are those three options for jQuery Mobile sample pages?
  prefs: []
  type: TYPE_NORMAL
- en: '**jQuery Mobile (CDN)** uses versions of the JavaScript and CSS that are stored
    and distributed through a **Central Distribution Network** (**CDN**) dedicated
    to providing jQuery Mobile. This is the most reliable and stable way to build
    pages in jQuery Mobile because the centrally distributed files can''t be corrupted
    by anything you do. Furthermore, as new versions of the JavaScript and CSS files
    are introduced, you can update the links to them. The downside is that you can''t
    work on your jQuery Mobile site in Dreamweaver unless you are online.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jQuery Mobile (Local)** uses the versions of JavaScript and CSS that come
    with Dreamweaver. These files are easier to corrupt as they are stored on your
    computer (and uploaded to your server). But you can use them to develop jQuery
    Mobile sites in Dreamweaver in situations where you don''t have Internet access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **jQuery Mobile with theme (Local)** option is new to Dreamweaver CS6 and
    is an attempt by Adobe to make it easier to edit the theme for a jQuery Mobile
    site. A theme is the portion of the required CSS that defines fonts, colors, and
    other styling options. My experience has been that it is easy and reliable to
    use one of the other options, and you can avoid this option. But we'll return
    to these issues in [Chapter 9](ch09.html "Chapter 9. Customizing Themes with ThemeRoller"),
    *Customizing Themes with ThemeRoller*, when we explore customizing themes in detail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In most cases, use the **jQuery Mobile (CDN)** option to begin creating a new
    jQuery Mobile site.
  prefs: []
  type: TYPE_NORMAL
- en: After you click on the **Create** button in the **New Document** dialog, a web
    page based on jQuery Mobile opens in the Dreamweaver **Document** window.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile pages in Split view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Editing and previewing jQuery Mobile pages presents a specific challenge: you
    cannot really see how the pages will look without going into Live view because
    the jQuery Mobile application that makes the page work is not displayed with the
    Live view. But on the other hand, you can''t edit the content of a jQuery Mobile
    page in the Design view with the Live view on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two options for handling this challenge:'
  prefs: []
  type: TYPE_NORMAL
- en: You can toggle back and forth within the **Live** view, turning it off (to edit
    your page) or on (to see your page)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can leave the **Live** view on in the **Design** window and edit it in the
    **Code** view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, we'll use and combine both the techniques. To do this, you will
    find it most useful to examine the page in Split view for two reasons. In the
    Split view, you can both examine HTML code and see the page previewed as it will
    appear in a browser. Plus you can see your page in a narrower preview window that
    will more closely simulate how your page will look in a mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: It's particularly useful while designing for mobile devices to avail yourself
    of the **Window Size** pop up at the bottom of the **Design** half of the **Split**
    view, and change the size of the **Preview** window to `480` pixels wide—a dimension
    that corresponds to many popular mobile devices. Do this using the **Window Size**
    pop-up in Dreamweaver's (bottom) status bar.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mobile pages in Split view](img/4742_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, you can use the preset sizing buttons in the status bar for
    mobile-, tablet-, or desktop-sized windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mobile pages in Split view](img/4742_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Previewing jQuery Mobile pages in Live view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you explore the template page generated by any of the jQuery Mobile starter
    pages, you'll note one thing right away that is very different from other pages
    you've worked with in Dreamweaver; until you flip on the Live view (click on the
    **Live View** button in the **Document** toolbar), hardly any of the formatting
    is visible. Try toggling it back and forth, turning **Live View** on and off to
    see what is and is not displayed with **Live View** off.
  prefs: []
  type: TYPE_NORMAL
- en: '![Previewing jQuery Mobile pages in Live view](img/4742_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Customizing Mobile page content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a basic sense, you customize jQuery Mobile page content the same way you
    customize any starter-page-generated content. Starter pages come with template
    content, and you can replace that with your own real content.
  prefs: []
  type: TYPE_NORMAL
- en: Simple enough? Kind of. As we've noted, there is a different order of gaps between
    the content and layout in jQuery Mobile pages. To put it another way, nothing
    is even close to how it appears with Live View turned off. And yet, you can't
    edit content in Live View.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML5 data-role property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Div tags associated with the jQuery Mobile script can function as different
    kinds of elements, including ones that appear to be and act like pages in a mobile
    device. This is done by implementing the data-role property in HTML5 tags, and
    then defining CSS (stylesheet) rules to go with each data-role.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, and this is the case for the starter pages in Dreamweaver, jQuery
    Mobile pages are organized and laid out using the following four data-roles:'
  prefs: []
  type: TYPE_NORMAL
- en: Page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data-role pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic framework for organizing page content within an HTML page is `div`
    tags with properties of `data-role-page`. In other words, within a single HTML
    page there are usually multiple "pages" created using `data-role` of `div` tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see how this works if you take a look at both the code and page layout
    generated from a Dreamweaver jQuery Mobile starter. You''ll see that what appears
    to be a "page" in Live view is actually a `div` `data-role` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data-role pages](img/4742_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Organizing content into what are actually `div` tags with an HTML5 property
    called `data-role` allows people to navigate through what feel and act like web
    pages. But these `div` tags, acting like pages, allow visitors to hop back and
    forth between "pages" without having to wait for a new page to load in their browser.
    The use of such `data-page` `div` tags is central to how the tiny space on a mobile
    device can be best used to present a lot of content.
  prefs: []
  type: TYPE_NORMAL
- en: 'People navigate between `data-role` pages in mobile devices by tapping, dragging,
    or otherwise navigating in a way that essentially shows or hides different "pages".
    You can familiarize yourself with how this works by navigating around the "pages"
    in a jQuery Mobile starter page in Live View. Use the **Back** button in the Dreamweaver
    **Document** window toolbar to simulate the **Back** button in a mobile browsing
    device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data-role pages](img/4742_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Customizing page content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you understand how jQuery Mobile pages are organized and function within
    an HTML page, customizing the content of the "pages" in the starter page will
    flow pretty naturally. One way to approach this process is to kind of ignore everything
    else and simply replace the content in jQuery "pages" with your own content. Then,
    try the content out in Live View, see how it flows, and edit, move, break up,
    and revise the content as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your own content to replace the header, content, and footer for each page.
    Identify this code in each generated page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Replace the content in the highlighted lines of code with any HTML5 content.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Remember**: Use only HTML5 content in your jQuery Mobile pages. Avoid plugins
    such as Flash. Also, avoid server-side include content—data served into a page
    using server-side scripting—if that is something you work with. Server-side live
    data is not something we''ll explore in this book, but if you are using PHP scripting,
    that won''t fly in jQuery Mobile pages. Again, the basic rule is: stick to HTML,
    CSS, and JavaScript content.'
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, while I'm an advocate of maximizing the use of the Design view in
    Dreamweaver, in part because of the great gap between the content and formatting
    in jQuery Mobile pages, I have to confess that I generally resort to creating
    HTML content in the Code side of the Split view, with the Live View turned on
    in the Design side.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing content for different data roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generally speaking, the process of customizing content for "pages" will consist
    of going through and customizing the header, content, and footer sections of the
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Mobile pages also use the `listview` data role to organize sets of links.
    Those links are—again, generally speaking—links within the HTML page to other
    data-role "pages". In more conventional HTML terms, these are links to named anchors.
    You can see how these are set up by examining the default set of (internal) listview
    links that come with the starter page. As you'll see, by default, they link to
    `#page2`, `#page3`, and `#page4`; you can copy and paste these links to create
    more links to more "pages". We'll explore that process in detail next.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new jQuery Mobile pages and objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The jQuery Mobile starter page comes with four pages, and links to four pages.
    A nice number, but what if you want to have five, or six, or seven pages?
  prefs: []
  type: TYPE_NORMAL
- en: If you need to add more "pages", copy, paste, and slightly edit (change the
    page numbers) the fairly easily recognizable sections of HTML code that define
    each "page". As you customize the content, toggle Live View on and off to see
    how the page will look in a browser, or as an app, using the **Window Size** pop
    up to define the preview environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the things you need to do as you copy and paste to create new pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy and paste a link in the list at the top of the page and change `xxx`.
    So, for example, when you create a fifth page, that code will be added to the
    list after the fourth page as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there are two changes in the copied code in the list.
  prefs: []
  type: TYPE_NORMAL
- en: You need to create a new page by copying and pasting the generated `page4` and
    making a `page5`. Select and copy the code that defines `page4`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding new jQuery Mobile pages and objects](img/4742_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then paste that code after the closing `</div>` tag at the end of the **data-role**
    property for **page4**. Change the `id` value to `page5`.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, you will want to create custom content in the header, content, and
    footer sections of your new page. But in order for the link you created in the
    list at the top of the page to work, you also need to be sure to change the page
    ID to match the `href` link you defined in the list at the top of the page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding new jQuery Mobile pages and objects](img/4742_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Dreamweaver has a menu option for adding a new page. To use that, navigate
    to **Insert** | **jQuery Mobile** | **Page**. The **jQuery Mobile Page** dialog
    appears, with a preset prompt to add a page following your last existing page.
    The checkbox options allow you to include a header and footer (or not) on your
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding new jQuery Mobile pages and objects](img/4742_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I wanted to show you the code before introducing this dialog box option so you'd
    have a better sense of what is happening, but having done that, I encourage you
    to use the dialog to save time.
  prefs: []
  type: TYPE_NORMAL
- en: Styling with theme swatches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CSS file that is part of the jQuery Mobile library has five theme swatches.
    To get technical for a moment, all five of these swatches are built into a single
    CSS file. They are named `a`, `b`, `c`, `d`, and `e`. Each of these theme swatches
    provides a different, mobile-friendly (high contrast) color scheme for page backgrounds
    and font colors.
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that, in a nutshell, you don't apply styling to jQuery Mobile
    pages by editing the CSS as you would for a normal web page. Instead, you change
    the HTML to apply one of the five theme swatches to any element on your page.
  prefs: []
  type: TYPE_NORMAL
- en: Isn't it a bit constricting to be limited to five theme swatches? Yes. But we'll
    solve that problem in [Chapter 9](ch09.html "Chapter 9. Customizing Themes with
    ThemeRoller"), *Customizing Themes with ThemeRoller*, by creating our own custom
    theme swatches. First, let's get comfortable applying theme swatches.
  prefs: []
  type: TYPE_NORMAL
- en: Applying themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What are "themes" in jQuery Mobile, exactly? The jQuery Mobile CSS file has
    built-in themes: `a`, `b`, `c`, `d`, and `e`. Again, these are not individual
    CSS stylesheet files; they are themes (sometimes referred to as swatches) within
    the CSS file. And each of these themes has a different color scheme.'
  prefs: []
  type: TYPE_NORMAL
- en: You define which jQuery Mobile theme is applied to any element by using the
    `data-theme` property in HTML5\. You can assign a theme swatch to any selected
    element with the **jQuery Mobile Swatches** panel.
  prefs: []
  type: TYPE_NORMAL
- en: View the panel by navigating to **Window** | **jQuery Mobile Swatches**. Click
    on any element in your page, and click on a swatch to assign that color scheme
    to the element. This works with Live view toggled to on, by the way.
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying themes](img/4742_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can handcode theming. For example, to apply theme `e` to a page with a
    `div` ID of `page`, use this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Or to take a second example, if you wish to apply theme `a` to a content element
    on a page, use this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Editing CSS in jQuery Mobile pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because so much of the formatting in jQuery Mobile pages relies on the central
    CSS file that is part of the jQuery Mobile library, your options for defining
    custom CSS are quite limited. The CSS file that makes jQuery Mobile pages work
    is highly complex, with hundreds of CSS styles. Editing that stylesheet file can
    potentially undo the whole package and render your jQuery Mobile page dysfunctional.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a high-level CSS coder, you can append your own CSS styles to the
    file provided as part of the jQuery Mobile package. But again, a high level of
    customization is available by using custom jQuery Mobile themes—something we'll
    explore in [Chapter 9](ch09.html "Chapter 9. Customizing Themes with ThemeRoller"),
    *Customizing Themes with ThemeRoller*, of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, if you do want to "go under the hood", here is a bit of advice on
    creating your own CSS styles for a jQuery Mobile page:'
  prefs: []
  type: TYPE_NORMAL
- en: You can identify and edit the `div` tag's styles—mostly `class` styles—to reformat
    content containers and other objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can identify and edit element (tag) rules in the CSS dialog. For example,
    you can redefine the heading and paragraph tags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In applying both of the preceding methods, you can draw on and apply the techniques
    explored in [Chapter 2](ch02.html "Chapter 2. Using HTML5 for Page Structure"),
    *Using HTML5 for Page Structure*, except that you have to additionally take into
    account that many objects (`class` styles) in the jQuery Mobile page have specific
    rules for each of the five themes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these three bits of advice, readers who are experts at CSS coding might
    want to create their own CSS styles to enhance those provided as part of the jQuery
    Mobile pack.
  prefs: []
  type: TYPE_NORMAL
- en: Example – build a mobile web page with jQuery Mobile objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To review and reinforce the concepts in this chapter, and to provide you with
    a quick set of steps to create your own jQuery Mobile page, let's walk through
    an example.
  prefs: []
  type: TYPE_NORMAL
- en: As with everything you do in Dreamweaver CS6, the prerequisite is that you are
    working on a defined Dreamweaver site. I'm calling mine `jqm`, but in any case
    if creating a site, if the essential nature of the process is not clear, review
    [Chapter 1](ch01.html "Chapter 1. Creating Sites and Pages with Dreamweaver CS6"),
    *Creating Sites and Pages with Dreamweaver CS6*, and create the site.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new jQuery Mobile page by navigating to **File** | **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New Document** dialog, choose **Page** from **Sample** in the **Category**
    column, **Mobile Starters** from the **Sample Folder** column, and **jQuery Mobile
    (CDN)** from the **Sample Page** column. Click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the page as `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a convenient workspace by choosing the **Split** view, setting the **Design**
    view **Window Size** to be `480` pixels wide and `800` pixels high, and viewing
    your **CSS Styles** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a fifth page element to your jQuery Mobile site. To insert that page at
    the end of your site, click in the **Code** view to place your insertion point
    right before the closing `</body>` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the new page element by navigating to **Insert** | **jQuery Mobile**
    | **Page**. The **jQuery Mobile Page** dialog appears, with a preset prompt to
    add **page five**. Keep the checkbox options selected to include a header and
    footer on your page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even though Dreamweaver added a fifth page element, you still need to create
    a link to that element from your home page. Copy and paste the **Page Four** link
    on the home page of the jQuery Mobile site. Change the link text to **Page Five**,
    and change the link to **#page5** in the **Properties** inspector.![Example –
    build a mobile web page with jQuery Mobile objects](img/4742_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize the page content for each page. Need some inspiration for an example?
    Head over to Wikipedia's page for endangered species, and copy and paste some
    of the text (and pictures) into your various pages. When you copy and paste text
    from Wikipedia (or other sources), navigate to **Edit** | **Paste Special** to
    enable the **Paste Special** dialog and choose the **Text only** option to avoid
    copying links and styles as you paste the text into Dreamweaver.![Example – build
    a mobile web page with jQuery Mobile objects](img/4742_07_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the links on your home page element work. If you have set up pages
    for four endangered species, the home page should have links to each. And be sure
    to appropriately credit Wikipedia in your footer.![Example – build a mobile web
    page with jQuery Mobile objects](img/4742_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test your site in Live view. Clicking each link on the home page element should
    open one of the four additional page elements.![Example – build a mobile web page
    with jQuery Mobile objects](img/4742_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the **jQuery Mobile Swatches** panel is open (if not, navigate to
    **Window** | **jQuery Mobile Swatches**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With Live View on, systematically work through your new site, selecting elements
    and applying swatch coloring to each element.![Example – build a mobile web page
    with jQuery Mobile objects](img/4742_07_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your page and navigate to **File** | **Preview in Browser**. Test your
    page in a browser. While testing in a browser in your development environment
    (a laptop or desktop computer) doesn't completely duplicate a mobile experience,
    it provides a good enough testing environment.![Example – build a mobile web page
    with jQuery Mobile objects](img/4742_07_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the basic elements of creating complete jQuery Mobile
    pages in Dreamweaver CS6\. These "pages" are pages on two levels. On one level,
    they are regular HTML pages using HTML5 (combined with CSS and JavaScript supplied
    via jQuery Mobile). On another level, this HTML page has jQuery data pages that
    are basically pages within a page. This technique allows us to create a mobile
    web page that allows visitors to navigate without having to wait for their mobile
    device to load additional pages.
  prefs: []
  type: TYPE_NORMAL
- en: For creating this jQuery Mobile page (with a set of data-pages), we relied on
    the Dreamweaver starter page. This page includes many of the most widely used
    jQuery Mobile elements. There are other useful jQuery Mobile page elements as
    well, and we'll explore them in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You edit the content of jQuery Mobile pages just as you would any HTML5 page.
    So all the blood, sweat, and tears you poured into mastering the basic techniques
    involved with customizing content of HTML5 pages in earlier chapters is paying
    off here. However, because page formatting and navigation rely so heavily on JavaScript
    (the jQuery Mobile library of scripts in particular), you need to rely more on
    Live View to see how pages will look compared to normal HTML5 pages.
  prefs: []
  type: TYPE_NORMAL
- en: Editing styles in jQuery Mobile are constrained to the fact that jQuery Mobile
    pages involve many CSS rules and jQuery Mobile CSS is organized into themes. In
    this chapter, you learned to apply theme swatches. In [Chapter 9](ch09.html "Chapter 9. Customizing
    Themes with ThemeRoller"), *Customizing Themes with ThemeRoller*, we'll explore
    how to create custom themes.
  prefs: []
  type: TYPE_NORMAL
- en: In the basic jQuery Mobile page you've learned to create in this chapter, you
    have the foundation for creating very extensive jQuery Mobile sites. In the next
    chapter, we'll explore additional tools for creating more complex jQuery Mobile
    pages.
  prefs: []
  type: TYPE_NORMAL
