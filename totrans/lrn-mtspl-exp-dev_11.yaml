- en: Chapter 11. Post Exploitation – Pivoting and Network Sniffing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is pivoting?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pivoting in simple terms is depending on one element to make use of the other
    element. In this chapter, we will look into the art of pivoting and network sniffing.
    The scenario is more applicable to end-system firewalls, or maybe a web server,
    which are the only points for getting into the internal network. We would leverage
    this connectivity of the web server with the internal network to connect to the
    internal systems through our exploitation techniques covered in the previous chapters.
    So in simple words, the first compromised system aids us in compromising the other
    systems, which are inaccessible from the outside network.
  prefs: []
  type: TYPE_NORMAL
- en: '![What is pivoting?](img/3589_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pivoting in a network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, this is a very interesting part of Metasploit where we will hack into
    a LAN network by compromising a system. Here, we already have a compromised system,
    and we have a `meterpreter` shell of that system.
  prefs: []
  type: TYPE_NORMAL
- en: 'First let us check the IP settings on that system by typing in `ipconfig`.
    We can see in the screenshot that the victim has two network adapters. `Adapter
    #2` has the IP of `10.10.10.1` range.![Pivoting in a network](img/3589_11_02.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will check the whole network routing table using the route command by
    typing in `route`.![Pivoting in a network](img/3589_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now our plan is to attack this additional network. For this attack, Metasploit
    has a post exploitation script, which is known as `autoroute`. This script allows
    us to attack the second network using the first compromised system. Using this
    script we can attack the second network from this compromised system. Type in
    `run autoroute -h` and it will show all usage commands of the script.![Pivoting
    in a network](img/3589_11_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here we are using `run autoroute -s 10.10.10.1/24`; running this command will
    add a route to the target machine from our compromised system.![Pivoting in a
    network](img/3589_11_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we can see in the preceding screenshot that a route has been added via
    `192.168.0.110`, which is our compromised system. Now we will verify whether our
    route has been added or not by typing in `run auroroute -p`.![Pivoting in a network](img/3589_11_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see in the screenshot that our route has been successfully added in the
    routing table. Next what we have to do is to escalate the privileges of the compromised
    system. For this, we type in `getsystem`.![Pivoting in a network](img/3589_11_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After escalating the privileges of the compromised system, we can now dump the
    hashes of all users and get their passwords. To do so, we type in `run hashdump`.![Pivoting
    in a network](img/3589_11_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After successfully dumping the credentials, we will background our `meterpreter`
    process by pressing *Ctrl* + *Z* and then pressing *Y*.![Pivoting in a network](img/3589_11_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next thing we do is to scan the second network address to check whether
    the other systems are online or not, and also check for open ports. So we perform
    a TCP port scan by using an auxiliary module. For this, we type in `use auxiliary/scanner/portscan/tcp`.![Pivoting
    in a network](img/3589_11_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now type in `show options` and it will show all the options of this module that
    are usable for this module.![Pivoting in a network](img/3589_11_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will set our target address range in the `RHOST` options. So, type in
    `set rhosts <target IP range>`; for example, here we are using `set rhosts 10.10.10.1/24`.![Pivoting
    in a network](img/3589_11_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, set the port numbers that we are looking for. Here we are looking for
    the most common ports that are found open in a computer system. So type in `set
    ports <port number>`; for example, here we are giving `set ports 139,445`.![Pivoting
    in a network](img/3589_11_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we will set the concurrent thread's number for scanning the TCP ports.
    So here we are giving threads `50` by typing in `set threads 50`.![Pivoting in
    a network](img/3589_11_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now our auxiliary module is fully loaded for scanning. The last and final command
    we are going to execute is the `run` command. So, type in `run`.![Pivoting in
    a network](img/3589_11_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see in the preceding screenshot that our auxiliary TCP module scanner
    has been started and it found that two systems are online having an IP of 10.10.10.1
    and 10.10.10.2, and also found two open ports on that system 139 and 445\. Here
    the IP 10.10.10.1 is already compromised so our target is IP 10.10.10.2.
  prefs: []
  type: TYPE_NORMAL
- en: So now we are going to use an exploit for exploiting another system. The exploit
    we are going to use has already been used in the [Chapter 3](ch03.html "Chapter 3. Exploitation
    Basics"), *Exploitation Basics*; so we know very well the process for using this
    exploit. Now let us start; type in `use exploit/windows/smb/ms08_067_netapi` and
    press *Enter*. Then type in `set rhost <target IP>`; for example, here we are
    using `set rhost 10.10.10.2`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pivoting in a network](img/3589_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After setting the target IP, now set the payload for compromising the target
    system. This time we are using `windows/meterpreter/bind_tcp` payload for attacking.
    So type in `set payload windows/meterpreter/bind_tcp`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pivoting in a network](img/3589_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All things are now ready for the attack, so type in the deadly `exploit` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pivoting in a network](img/3589_11_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After triggering the `exploit` command, we can see that `meterpreter` session
    2 has been opened on IP 10.10.10.2\. We already had session 1 from our compromised
    system; through that compromised system we were able to compromise another system
    in the network.
  prefs: []
  type: TYPE_NORMAL
- en: Now let us check the system to see whether we have compromised the correct system
    or not by checking its properties. So type in `sysinfo`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pivoting in a network](img/3589_11_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see in the screenshot that the system has the name **PWNED**, so now
    we are going to verify this name.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pivoting in a network](img/3589_11_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sniffing in a network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After pivoting the network, we are now moving to another topic where we will
    learn how to sniff in a network by using `meterpreter` post exploitation scripts.
    Before using the sniffer, we must load the sniffer extension in the `meterpreter`
    session. So type in `use sniffer`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see in the screenshot that our sniffer extension has been successfully
    loaded by `meterpreter`. Before using sniffer, we must know the sniffer usage
    commands; for that, type in `help` in the `meterpreter` session and it will show
    all the `meterpreter` commands. There you will find all sniffer usage commands
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can see all the commands for the sniffer script. Firstly, we will enumerate
    the network interface on which we will start our sniffer. So type in `sniffer
    interfaces`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After enumerating the network interfaces, it's time to select an interface and
    run the sniffer on that network interface. Type in `sniffer_start <Interface number>`;
    for example, here we are selecting interface number 1, so we type in `sniffer_start
    1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can see that our sniffer is in action and has started capturing packets
    on `interface 1`. So let us check the captured packet status on `interface 1`
    by typing in `sniffer_stats 1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that uptill now we have captured `91` packets of size `14511` bytes.
    Now we want to dump or save the captured packets for further analysis, so we type
    in `sniffer_dump <Interface no.> <file name for save in pcap extension>`; for
    example, here we are using `sniffer_dump 1 hacked.pcap`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we will analyze this captured packet file with the famous packet analyzer
    and capturing tool, known as Wireshark. So open a new terminal and type in `wireshark
    <captured packet file name>`; for example, here we are using `wireshark hacked.pcap`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After executing the `wireshark` command, we can see the Graphical User Interface
    of the Wireshark tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is also another way of sniffing and capturing packets without loading
    the sniffer extension in `meterpreter`. This is also a `meterpreter` postexploitation
    script known as `packetrecorder`. Type in `run packetrecorder` and it will show
    all the usage commands for `packetrecorder`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see all the usage options for `packetrecorder`. So first of all we will
    enumerate the network interfaces, which are available for sniffing by typing in
    `run packetrecorder -li`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can see that we have two network interfaces available. Select an interface
    for running our sniffer on that. So type in `run packetrecorder -i 1 -l /root/Desktop`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The usage syntax is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`i` stands for interface number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l` stands for location for saving the captured packet file![Sniffing in a
    network](img/3589_11_31.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After running the `packetrecorder` script, as shown in the preceding screenshot,
    the packets are being saved at the location `/root/Desktop/logs/packetrecorder`.
    Let us check the directory in our system.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sniffing in a network](img/3589_11_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Espia Extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Espia extension is also another interesting extension, which we have to load
    in `meterpreter` before using it. So type in `load espia`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Espia Extension](img/3589_11_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our espia extension has been successfully loaded by `meterpreter` as we can
    see in the previous screenshot. Now type in the command `help` in `meterpreter`
    and it will show you the available usage commands in this extension.
  prefs: []
  type: TYPE_NORMAL
- en: '![Espia Extension](img/3589_11_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that there is only one command available in the espia extension,
    that is, `screengrab`. Using this command we can grab a screenshot of the compromised
    system. Type in `screengrab`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Espia Extension](img/3589_11_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the screenshot we can see that the captured screenshot is saved into the
    root directory. So let us check whether the screenshot is saved or not in the
    root directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![Espia Extension](img/3589_11_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have covered the various techniques through which we can
    leverage our point of contact server/system on the external network, and leverage
    it to exploit other systems. Since the point of contact system had another network
    card for connectivity with the internal network, we used this to pivot our way
    from the external to the internal system. Hence, once we had connectivity to the
    internal network, we were able to exploit it as well through our exploitation
    techniques covered in the previous chapters. The next chapter will deal with learning
    the art of exploit writing using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Pivoting](http://www.offensive-security.com/metasploit-unleashed/Pivoting)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.securitytube.net/video/2688](http://www.securitytube.net/video/2688)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Packet_Sniffing](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Packet_Sniffing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
