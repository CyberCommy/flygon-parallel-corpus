- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Companies need to utilize C++ for its speed. However, object-oriented software
    design leads to code which is easier to modify and maintain. Understanding how
    to utilize C++ as an object-oriented language is essential. Programming in C++
    won't guarantee OOP – one must understand OO concepts and how they map to C++
    language features as well as OO programming techniques. Additionally, programmers
    will want to harness additional skills beyond OOP to make code more generic, more
    robust, as well as employ well-tested, creative solutions which can be found in
    popular design patterns.
  prefs: []
  type: TYPE_NORMAL
- en: A programmer who learns how to use C++ as an object-oriented language will become
    a valuable C++ developer. A C++ programmer without OOP understanding and skills
    is one whose code will be difficult to maintain, modify or to understand by anyone
    else. Becoming an OO programmer in C++ is a valuable skill desired by companies
    needing to utilize this language.
  prefs: []
  type: TYPE_NORMAL
- en: This book has step-by-step explanations of essential OO concepts, paired with
    practical examples in code and often with diagrams so you can truly understand
    how and why things work. Self-assessment questions are available to test your
    skills.
  prefs: []
  type: TYPE_NORMAL
- en: This book first provides the necessary building blocks of skills (which may
    not be object-oriented), which provide an essential foundation on which the OO
    essentials will be built. Next, OO concepts will be described and paired with
    language features as well as coding techniques so that you can understand how
    to use C++ as an OOP language successfully. Additionally, more advanced skills
    are added to augment the programmer's repertoire, including friend function/classes,
    operator overloading, templates (to build more generic code), exception handling
    (to build robust code), STL basics, as well as design patterns and idioms.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you will understand both essential and advanced OO
    concepts and how to implement these concepts in C++. You will learn not just how
    to use C++, but how to use it as an OOP language. You will additionally understand
    ways to make more robust and easily maintainable code, as well as understand how
    to employ well tested design patterns as part of your programming repertoire.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book's intended audience is professional programmers as well as adept college
    students who want to understand how to utilize C++ as an object-oriented programming
    language to write robust, maintainable code. This book assumes the reader is a
    programmer, but not one who is necessarily familiar with C++. The early chapters
    concisely review core language features and serve as building blocks for the predominant
    OOP chapters, advanced features and design patterns.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B15702_01_Final_NM_ePub.xhtml#_idTextAnchor018), *Understanding
    Basic C++ Assumptions*, provides a concise review of basic language features assumed
    in the book, which existing programmers can quickly grasp.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B15702_02_Final_NM_ePub.xhtml#_idTextAnchor066), *Adding Language
    Necessities*, reviews non-OO features that are critical C++ building blocks: const
    qualifiers, function prototyping (default values) and function overloading.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B15702_03_Final_NM_ePub.xhtml#_idTextAnchor112), *Indirect Addressing
    – Pointers*, reviews pointers in C++, including memory allocation/deallocation,
    pointer usage/dereferencing, usage in function arguments and void *''s.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B15702_04_Final_NM_ePub.xhtml#_idTextAnchor169), *Indirect Addressing
    – References*, introduces references as an alternative to pointers, including
    initialization, function arguments/return values and const qualification.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B15702_05_Final_NM_ePub.xhtml#_idTextAnchor199), *Exploring Classes
    in Detail*, introduces OOP by first exploring OO the concepts of encapsulation
    and information hiding and then covers class features in detail: member functions,
    the `this` pointer, access labels and regions, constructors, destructors and qualifiers
    on data members and member functions (`const`, `static`, `inline`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B15702_06_Final_NM_ePub.xhtml#_idTextAnchor262), *Implementing
    Hierarchies with Single Inheritance*, details generalization and specialization
    using single inheritance. It covers inheriting members, the use of base class
    constructors, inherited access regions, the order of construction/destruction,
    as well as public versus private and protected base classes and how this changes
    the meaning of inheritance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B15702_07_Final_NM_ePub.xhtml#_idTextAnchor298), *Utilizing Dynamic
    Binding through Polymorphism*, describes the OO concept of polymorphism and then
    distinguishes operation from method, and details virtual functions and the runtime
    binding of methods to operations (including how the v-table works).'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B15702_08_Final_NM_ePub.xhtml#_idTextAnchor335), *Mastering Abstract
    Classes*, explains the OO concept of an abstract class, their implementation using
    pure virtual functions, the OO concept of an interface and how to implement it,
    as well as up and down casting within a public inheritance hierarchy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B15702_09_Final_NM_ePub.xhtml#_idTextAnchor361), *Exploring Multiple
    Inheritance*, details how to use multiple inheritance as well as its controversy
    in OO designs. It covers virtual base classes, diamond-shaped hierarchies, and
    when to consider alternate designs by examining the OO concept of a discriminator.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B15702_10_Final_NM_ePub.xhtml#_idTextAnchor386), *Implementing
    Association, Aggregation and Composition*, describes the OO concepts of association,
    aggregation and composition and how to implement each concept using pointers,
    sets of pointers, containment and sometimes references.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B15702_11_Final_NM_ePub.xhtml#_idTextAnchor417), *Handling Exceptions*,
    explains how to `try`, `throw`, and `catch` exceptions by considering many exception
    scenarios. It also shows how to extend an exception handling hierarchy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B15702_12_Final_NM_ePub.xhtml#_idTextAnchor453), *Friends and
    Operator Overloading*, explains the proper use of friend functions and classes,
    and examines operator overloading (which may use friends) to allow an operator
    to work with user defined types in the same way it works with standard types.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B15702_13_Final_NM_ePub.xhtml#_idTextAnchor486), *Working with
    Templates*, details template functions and classes to genericize certain types
    of code to work with any data type. It also shows how operator overloading can
    make selected code more generic for any type to further support the use of templates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B15702_14_Final_NM_ePub.xhtml#_idTextAnchor518), *Understanding
    STL Basics*, introduces the Standard Template Library in C++ and demonstrates
    how to use common containers, such as `list`, `iterator`, `deque`, `stack`, `queue`,
    `priority_queue` and `map`. Additionally, STL algorithms and functors are introduced.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B15702_15_Final_NM_ePub.xhtml#_idTextAnchor572), *Testing Classes
    and Components*, illustrates OO testing methods using the canonical class form,
    drivers to test classes, and shows how to test classes related through inheritance,
    association and aggregation and testing classes using exception handling.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B15702_16_Final_NM_ePub.xhtml#_idTextAnchor622), *Using the
    Observer Pattern*, introduces design patterns overall, and then explains the Observer
    pattern with an in-depth example illustrating the components of the pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B15702_17_Final_NM_ePub.xhtml#_idTextAnchor649), *Applying the
    Factory Pattern*, introduces the Factory Method pattern and showcases its implementation
    with and without an Object Factory. It also compares an Object Factory with an
    Abstract Factory.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 18*](B15702_18_Final_NM_ePub.xhtml#_idTextAnchor682), *Applying the
    Adapter Pattern*, examines the Adapter pattern, providing strategies and examples
    utilizing inheritance versus association to implement the pattern. Additionally,
    it demonstrates a wrapper class as a simple Adapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 19*](B15702_19_Final_NM_ePub.xhtml#_idTextAnchor718), *Using the
    Singleton Pattern*, examines in detail the Singleton pattern with a sophisticated
    paired-class implementation. Singleton registries are also introduced.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 20*](B15702_20_Final_NM_ePub.xhtml#_idTextAnchor756), *Removing Implementation
    Details Using the pImpl Pattern*, describes the pImpl pattern to reduce compile
    time dependencies within code. A detailed implementation is explored using unique
    pointers. Performance issues are explored relating to the pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is assumed that you have a current C++ compiler available. You will want
    to try the many online code examples! You may use any C++ compiler; however, version
    17 or higher is recommended. The code presented will be C++20 compliant, but will
    work equally well in version 17\. Minimally, please download g++ from [https://gcc.gnu.org](https://gcc.gnu.org).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15702_Preface_Table_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Please keep in mind that though there is an ISO standard for C++, some compilers
    vary and interpret the standard with very slight differences.*'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the digital version of this book, we advise you to type the
    code yourself or access the code via the GitHub repository (link available in
    the next section). Doing so will help you avoid any potential errors related to
    the copying and pasting of code.
  prefs: []
  type: TYPE_NORMAL
- en: '*Trying the coding examples as you read the book is highly recommended. Completing
    the assessments will further enhance your grasp of each new concept.*'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://static.packt-cdn.com/downloads/9781839218835_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781839218835_ColorImages.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please visit the following link to check the CiA videos: [https://bit.ly/2P1UXlI](https://bit.ly/2P1UXlI)'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example from the book: "Reviewing our aforementioned `main()`
    function, we first create an `STL` `list` of `Humanoid` pointers with `list<Humanoid
    *> allies;`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code or program segment is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For example, words in menus or dialog boxes appear in the text like this.
    Here is an example: "The pImpl pattern (**p**ointer to **Impl**ementation idiom)
    is a structural design pattern that separates the implementation of a class from
    its public interface."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at [customercare@packtpub.com](mailto:customercare@packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in, and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://packt.com).
  prefs: []
  type: TYPE_NORMAL
