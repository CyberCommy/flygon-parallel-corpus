- en: Chapter 5. Introducing Hashtags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tags are one of the most prominent features in Web 2.0 applications. A **tag**
    is a keyword associated with a piece of information, such as an article, image,
    or link. **Tagging** is the process of assigning tags to content. It is usually
    done by the author or users and allows for user-defined categorization of content.
  prefs: []
  type: TYPE_NORMAL
- en: We will also be using tags in our project, and we will be calling it **hashtags**.
    Tags have become very popular in web applications because they enable users to
    classify, view, and share content easily. If you are not familiar with tags, you
    can see examples by visiting social sites such as Twitter, Facebook, or Google
    Plus, where tags are pinned to each status or conversation to help us find trending
    topics. Since we are going to build a micro blogging site, tags will help us to
    categorize the conversations between users.
  prefs: []
  type: TYPE_NORMAL
- en: To introduce tags into our system, we need a mechanism that enables users to
    submit tweets to the database along with hashtags. Later, we will also need a
    method for browsing tweets classified under a certain tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing a hashtag data model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an algorithm that separates hashtags from a tweet form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating pages for listing tweets under a certain hashtag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a tag cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hashtag data model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hashtags need to be stored in the database and associated with tweets. So, the
    first step to introducing tags into our project is to create a data model for
    hashtags. A hashtag object will only hold one piece of data, a string that represents
    the hashtag. In addition, we need to maintain the list of hashtags associated
    with a particular tweet.
  prefs: []
  type: TYPE_NORMAL
- en: You may recall from [Chapter 4](part0034.xhtml#aid-10DJ41 "Chapter 4. Building
    an Application Like Twitter"), *Building an Application Like Twitter*, that we
    used foreign keys to associate tweets with users, and we called this a one-to-many
    relationship. However, the relationship between hashtags and tweets is not one-to-many,
    because one hashtag can be associated with many tweets, and one tweet can also
    have many hashtags associated with it. This is called a many-to-many relationship,
    and it is represented in Django models using the `models.ManyToManyField` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be well aware by now that data models go into the `mytweet` | `models.py`
    file. So, open the file and add the following `HashTag` class to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Pretty straightforward, isn''t it? We simply defined a data model for hashtags.
    This model holds the tag name and its tweet in its `ManyToManyField` parameter.
    When you have finished entering the code, don''t forget to run the following command
    in order to create a table for the model in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to see the detailed SQL query of how Django creates and implements all
    the relationships, and also how it creates the table for them, we can just issue
    the command `sql` with the model name to `manage.py`. It will show the SQL queries
    it will run to create the instance of the object. Those who are already familiar
    with SQL know that many-to-many relationships are usually implemented in SQL by
    creating a third table that connects the two related tables. Now, let''s see how
    Django implements this type of relationship. In the terminal, issue the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The output may slightly differ depending on your database engine. Indeed, Django
    automatically creates an extra table called `tweet_hashtag_tweet` to maintain
    the many-to-many relationship.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that when we define a many-to-many relationship in Django's
    model API, the `models.ManyToMany` field can be placed in either of the two related
    models. We could have put this field in the tweet model instead of hashtag; since
    we created the hashtag model later, we put the `models.ManyToMany` field in it.
  prefs: []
  type: TYPE_NORMAL
- en: For testing purposes, we will move to the admin panel and create a tweet with
    hashtags, as we did for both user and tweet creation. But, first, we will have
    to register the hashtags for the administration panel in the `admin.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The modified `admin.py` file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now we can move to the administration panel with /administration URL.
  prefs: []
  type: TYPE_NORMAL
- en: Before we create a hashtag for a tweet, we need to create a tweet with a hashtag.
    Later, we will write a program that will parse the tweet and automatically create
    the hashtag instance associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the demo diagram for creating the tweet that we have shown in [Chapter
    4](part0034.xhtml#aid-10DJ41 "Chapter 4. Building an Application Like Twitter"),
    *Building an Application Like Twitter*, and create a tweet with the following
    text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With the same user we used, `ratancs`, then move on to the hashtag model and
    create the hashtag `#Django` and associate it with the tweet we created. This
    will give you an idea of how we assign a hashtag to the tweet.
  prefs: []
  type: TYPE_NORMAL
- en: Let us create a proper tweet submission form, which will ask users to write
    the tweet as input. It will create all the hashtags associated with the tweet
    and will save the tweet.
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at the user profile page we have created. At the top center of the
    page, there will be an input box already associated with the user; thus, when
    he writes a tweet and hits the button to submit, the tweet will be saved with
    his ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, visit this URL: `http://localhost:8000/user/ratancs/`. You will see both
    the tweets we created earlier.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The hashtag data model](img/image00299.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will go back to the `profile.html` code and append a text area with a submit
    button to post a tweet for the user. The design will be the same as we chose to
    display the tweet–that is, we will be using the same well box of `Twitter bootstrap`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `profile.html` file template is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This `{%for ...}` block is used to represent multiple tweets, one below each
    other, as they have the `div` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will create a `div` tag just above the `{% for ...}` block, and will
    add our tweet submission form.
  prefs: []
  type: TYPE_NORMAL
- en: Before we write out the form, let us understand about Django forms and how they
    can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Django forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating, validating and processing forms is an all-too-common task. Web applications
    receive input and collect data from users by means of web forms. So, naturally,
    Django comes with its own library to handle these tasks. All you have to do is
    to import the library and start writing your forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The Django forms library handles three common tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML form generation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side validation of user input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML form redisplay in case of input errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The way in which this library works is similar to the way in which Django's
    data models work. You start by defining a class that represents your form. This
    class must be derived from the `forms.Form` base class. Attributes in this class
    represent form fields. The `forms` package provides many field types.
  prefs: []
  type: TYPE_NORMAL
- en: When you create an object from a class that is derived from the `forms.Form`
    base class, you can interact with it using a variety of methods. There are methods
    for HTML code generation, methods to access the input data, and methods to validate
    the form.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn about the forms library by creating a tweet post form in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the tweet post form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating our first Django form. Create a new file in the tweets
    application folder and call it `forms.py`. Then, open the file in your code editor
    and enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After examining the code, you will notice that the way in which we defined
    this class is similar to the way in which we defined the model classes. We derived
    the `TweetForm` class from `forms.Form`. All form classes need to inherit from
    this class. Next, we define the fields that this form contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The form contains a text field which will have an HTML tag for text area, an
    additional attribute for rows and column, and a maximum size limit for input,
    which is same as the maximum length of the tweet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Please note that the form also contains a hidden field called `country`, which
    will be a char field.
  prefs: []
  type: TYPE_NORMAL
- en: There are many field types in the `forms` package. There are several parameters,
    listed as follows, which can be passed to the constructor of any field type. Some
    specialized field types can take other parameters in addition to these ones.
  prefs: []
  type: TYPE_NORMAL
- en: '`label`: The label of the field when HTML code is generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`required`: Whether the user must enter a value or not. It is set to `True`
    by default. To change it, pass `required=False` to the constructor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`widget`: This parameter lets you control how the field is rendered in HTML.
    We used it just now to make the `CharField` parameter of the password become a
    password input field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`help_text`: A description of the field will be displayed when the form is
    rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a table of commonly used field types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Field type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `CharField` | Returns a string. |'
  prefs: []
  type: TYPE_TB
- en: '| `IntegerField` | Returns an integer. |'
  prefs: []
  type: TYPE_TB
- en: '| `DateField` | Returns a Python `datetime.date` object. |'
  prefs: []
  type: TYPE_TB
- en: '| `DateTimeField` | Returns a Python `datetime.datetime` object. |'
  prefs: []
  type: TYPE_TB
- en: '| `EmailField` | Returns a valid e-mail address as a string. |'
  prefs: []
  type: TYPE_TB
- en: '| `URLField` | Returns a valid URL as a string. |'
  prefs: []
  type: TYPE_TB
- en: 'Here is a partial list of available form widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `PasswordInput` | A password text field. |'
  prefs: []
  type: TYPE_TB
- en: '| `HiddenInput` | A hidden input field. |'
  prefs: []
  type: TYPE_TB
- en: '| `Textarea` | A text area that enables text entry on multiple lines. |'
  prefs: []
  type: TYPE_TB
- en: '| `FileInput` | A file upload field. |'
  prefs: []
  type: TYPE_TB
- en: 'Now, we need to modify the `profile.html` file as per the `form.py` file. Update
    the `profile.html` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Posting the tweet is achieved by a simple form, which is `<form method="post"
    action="post/">{% csrf_token %}`. The method with which the form will be posted
    is `"post"` and the relative URL to post a tweet form will be `post/`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This code generated the CSRF token, which actually addresses a security issue;
    it protects this `post` URL from attacks from another server; details on this
    will be explained in a later section in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We have added a `div` tag just before the tweet `<div>`, and this `div` tag
    contains a form that will save the tweets when the post button is clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This `fieldWrapper` class in the `div` tag is used by Django's form library
    to render the HTML tag that we have mentioned for text in form class (which is
    Text area), followed by the cases of form renders for any error.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will render the form as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the tweet post form](img/image00300.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to do two things to make this form work:'
  prefs: []
  type: TYPE_NORMAL
- en: We have to define a method in a controller that is going to take this form submission
    request and save the tweet data to our tweet model class object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have to define a URL pattern to which this form will be submitted with the
    tweet as content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To handle the request, we will add a new class which will accept the tweet from
    the form. We will name this class `PostTweet`. This class is added in `tweet/view.py`
    with an import dependency `from tweet.forms import TweetForm`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We only need to define the post method as we only need this class to accept
    the data. This logic is pretty clear here; if the form is valid, only then will
    the data be persisted. Redirection always happens. The code also does one more
    special task; that is, the separation of all the hashtags from a tweet. This is
    done in a similar way to splitting all the words in a tweet, and if the word starts
    with `#` (hash), it will create a hashtag of that word (think of a regular expression
    here). For the second part, we are going to add an entry in our `urls.py` file,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look carefully at the last line, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This means that all the requests of the form `/user/<username>/post` will be
    rendered by `PostTweet`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, we have made a simple Django form that can make the user post the
    tweet from his Twitter page, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the tweet post form](img/image00301.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the tweet is posted, the page will show all tweets, as shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the tweet post form](img/image00302.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a tag page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will create a page that is similar to the Twitter listing for hashtags.
    For this task, we will almost follow the same architecture that we followed for
    the user profile. Let''s start by adding a URL entry for the hashtag page. Open
    the `urls.py` file and insert the following entry (preferably below the user page
    entry so as to keep the table organized):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The captured part of this regular expression is the same as that of the user
    page. We will only allow alphanumeric characters in a hashtag.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will define the `hashtag` class in the controller as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The HTML template page we will use will be almost the same as that of the profile,
    except for the form part that we used for posting the tweet.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create the `hashtag.html` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will list all the tweets with the hashtag passed from the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to design a hashtag data model and an algorithm required
    to separate hashtags from a tweet form. Then, we created pages for listing tweets
    under a certain hashtag. We saw a code snippet for how to build a tweet with hashtag
    like a tag cloud seen in many blogging sites.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to enhance the UI experience using AJAX
    with Django.
  prefs: []
  type: TYPE_NORMAL
