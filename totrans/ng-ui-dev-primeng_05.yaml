- en: Data Iteration Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据迭代组件
- en: In this chapter, we will cover the basic and advanced features to visualize
    data with data iteration components provided by PrimeNG, which include DataTable,
    DataList, PickList, OrderList, DataGrid, DataScroller, Tree, and TreeTable. We
    will start with the DataTable component that offers extensive features, such as
    filtering, sorting, pagination, selection, reordering, column resizing, toggling,
    and many more. We will then focus on various other components, such as DataList,
    that render data in a listed format and provide data selection through the listed
    sets such as PickList and OrderList.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖使用PrimeNG提供的数据迭代组件来可视化数据的基本和高级功能，其中包括DataTable、DataList、PickList、OrderList、DataGrid、DataScroller、Tree和TreeTable。我们将从提供了诸多功能的DataTable组件开始，如过滤、排序、分页、选择、重新排序、列调整大小、切换等。然后我们将专注于其他各种组件，如DataList，以列表格式呈现数据，并通过PickList和OrderList等列出的集合提供数据选择。
- en: After that, we will also see two more data variation components such as DataGrid
    that arranges large datasets in the grid-oriented layout and DataScroller that
    lazily loads data according to the page scroll done by the user. The Tree and
    TreeTable components list data in a tree format, and they are mostly based on
    the same data model. At the end of this chapter, we will discuss a sophisticated
    component called Schedule to visualize calendar data, and we will demonstrate
    its usage with its lazy loading feature.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们还将看到两个更多的数据变化组件，如DataGrid，它以网格导向布局排列大型数据集，以及DataScroller，它根据用户滚动页面来懒加载数据。Tree和TreeTable组件以树形式列出数据，并且它们大多基于相同的数据模型。在本章末尾，我们将讨论一个名为Schedule的复杂组件，用于可视化日历数据，并演示其懒加载功能的使用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Multi feature DataTable
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多功能DataTable
- en: Selecting rows in DataTable
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DataTable中选择行
- en: Sorting, filtering, and paginating data in DataTable
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DataTable中对数据进行排序、过滤和分页
- en: Customizing cell content with templating
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模板自定义单元格内容
- en: Resizing, reordering, and toggling columns in DataTable
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DataTable中调整、重新排序和切换列
- en: In-cell editing with DataTable
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataTable进行单元格编辑
- en: Making DataTable responsive
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使DataTable响应式
- en: Using column and row grouping
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用列和行分组
- en: Handling tons of data with lazy DataTable
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用懒加载DataTable处理大量数据
- en: Row expansion by providing row template
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过提供行模板进行行展开
- en: Exporting data in the CSV format
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以CSV格式导出数据
- en: DataTable events and methods
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataTable事件和方法
- en: Listing data with DataList
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataList列出数据
- en: Listing data with PickList
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PickList列出数据
- en: Listing data with OrderList
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OrderList列出数据
- en: Grid-organized data with DataGrid
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataGrid进行网格化数据
- en: On demand data loading with DataScroller
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataScroller进行按需数据加载
- en: Visualizing data with Tree
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Tree可视化数据
- en: Visualizing data with TreeTable
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TreeTable可视化数据
- en: Managing events with Schedule
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Schedule管理事件
- en: Multi feature DataTable
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多功能DataTable
- en: 'DataTable displays data in a tabular format. The table is an arrangement of
    data in rows and columns, or possibly in a more complex structure. It requires
    a value as an array of objects bound through the `value` property and columns
    defined with the `p-column` component. A basic example of the component with browser
    details to display in the list format would be written as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: DataTable以表格格式显示数据。表格是数据按行和列排列，或者可能是更复杂的结构。它需要一个作为对象数组的值，通过`value`属性绑定，并且使用`p-column`组件定义列。一个基本的组件示例，用于显示在列表格式中的浏览器详情，将被写成如下形式：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `browsers` array consists of objects with `engine`, `browser`, `platform`,
    and `grade` properties. The `field` property will map the model object property,
    whereas the `header` property is used to display a column''s heading. In real-time
    applications, we use services to fetch the data from remote data sources. In this
    case, service is created as an injectable service and it uses the HTTP module
    to fetch data. The browser service would be defined with observables as shown
    here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`browsers`数组由具有`engine`、`browser`、`platform`和`grade`属性的对象组成。`field`属性将映射模型对象属性，而`header`属性用于显示列的标题。在实时应用程序中，我们使用服务从远程数据源获取数据。在这种情况下，服务被创建为可注入的服务，并且它使用HTTP模块来获取数据。浏览器服务将被定义为可观察对象，如下所示：'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The component class has to define an array of `browser` objects (or items)
    for the `value` property. The items are retrieved from the remote service call
    as shown here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类必须为`value`属性定义一个`browser`对象（或项目）的数组。项目是从远程服务调用中检索的，如下所示：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows a snapshot result presented in a tabular format:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了以表格格式呈现的快照结果：
- en: '![](assets/cab55298-f1b0-47cc-b166-6effb9bb9ef1.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cab55298-f1b0-47cc-b166-6effb9bb9ef1.png)'
- en: In the preceding snapshot, we can observe alternative colors for the rows. This
    is a theme-specific behavior.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的快照中，我们可以观察到行的替代颜色。这是一个特定于主题的行为。
- en: PrimeNG 4.1 handles the change detection feature in a more flexible manner.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 4.1以更灵活的方式处理变更检测功能。
- en: Change detection
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变更检测
- en: DataTable uses either setter-based checking or **ngDoCheck** to realize if the
    underlying data has changed to update the **user interface** (**UI**). This is
    configured using the `immutable` property. If you enabled (default) it, then the
    setter-based detection is utilized so your data changes such as adding or removing
    a record should always create a new array reference instead of manipulating an
    existing array. This constraint is due to Angular and does not trigger setters
    if the reference does not change. In this case, use slice instead of splice when
    removing an item or use the spread operator instead of the `push` method when
    adding an item.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: DataTable使用基于setter的检查或**ngDoCheck**来判断基础数据是否发生变化以更新**用户界面**（**UI**）。这是使用`immutable`属性进行配置的。如果启用（默认），则会使用基于setter的检测，因此数据更改（例如添加或删除记录）应始终创建一个新的数组引用，而不是操作现有数组。这个约束是由于Angular，并且如果引用没有改变，就不会触发setter。在这种情况下，删除项目时使用slice而不是splice，或者在添加项目时使用扩展运算符而不是`push`方法。
- en: On the other hand, setting the `immutable` property to `false` removes this
    restriction using ngDoCheck with IterableDiffers to listen to changes without
    the need to create a new reference of data. The setter-based method is faster;
    however, both methods can be used depending on your preference.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，将`immutable`属性设置为`false`会移除使用ngDoCheck的限制，使用IterableDiffers来监听变化，而无需创建数据的新引用。基于setter的方法更快；然而，根据您的偏好，两种方法都可以使用。
- en: Dynamic columns
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态列
- en: 'In the preceding use case, the columns are defined in a static representation
    using the `p-column` tag. There is another approach to represent columns inside
    a data table via dynamic columns. The table columns need to be instantiated as
    an array. The array will be iterated using the `ngFor` directive as shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的用例中，列是使用`p-column`标签以静态表示定义的。还有另一种方法可以通过动态列在数据表中表示列。表列需要被实例化为一个数组。该数组将使用`ngFor`指令进行迭代，如下所示：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `cols` property describes the given column options within the component
    class:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`cols`属性描述了组件类中给定的列选项：'
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows a snapshot result of dynamic columns in a tabular
    format as an example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了动态列在表格格式中的快照结果作为示例：
- en: '![](assets/a3408625-374d-4dc8-9d64-fa316e6432df.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, the columns are dynamically added or removed using
    a multiselect drop-down menu. For demonstration purposes, we removed the Version
    column field from the table.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Selecting rows in DataTable
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to perform CRUD operations on the component, there is a need for table
    row selection. PrimeNG supports various kinds of selections such as single, multiple,
    radio, and checkbox with different event callbacks.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Single selection
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In single selection, the row is selected by a click event on a specific row.
    This selection is enabled by setting `selectionMode` as the `single` and `selection`
    property to hold the selected row. By default, the row is unselected with the
    help of the Meta key *(Ctrl* key for Windows or *Command* key for macOS). The
    row can be unselected without pressing the Meta key just by disabling the `metaKeySelection`
    property.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with a single selection feature to select a specific browser
    record would be written as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The component class has to define the `selectedBrower` object to store the
    selected item. The following screenshot shows a snapshot result with single selection
    as an example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb577df9-4538-4189-99c3-86c3eef404ae.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: To notify that single selection has worked or not, we displayed the selected
    record information in a footer section. The footer data should always be in sync
    with the selected record.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Multiple selection
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In multiple selection, the row is selected by a click event on a specific row
    and multiple rows can be selected using the Meta key or *Shift* key. This selection
    is enabled by setting `selectionMode` as `multiple` and the `selection` property
    to hold selected rows in the form of an array. By default, the row is unselected
    with the help of the Meta key *(Ctrl* key for Windows or *Command* key for macOS).
    The row can be unselected without the help of Meta key just by disabling the `metaKeySelection`
    property.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with the multiple selection feature to select multiple browser
    records would be written as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The component class has to define the `selectedBrowers` array object to store
    the selected records. The following screenshot shows a snapshot result with multiple
    selection as an example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1d334d7f-706a-4aa3-bdb5-bb6eabcc5913.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: To notify that multiple selection has worked or not, we displayed the selected
    records information in a footer section. The footer data should always be in sync
    with selected records.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Both single and multiple selection support four event callbacks, `onRowClick`,
    `onRowDblClick`, `onRowSelect`, and `onRowUnselect`, which carry selected data
    information within an event object. Refer to the events section for more details.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: RadioButton selection
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The single selection can be achieved through radio buttons, which exist on each
    row instead of using the click event on a specific row. The selection is enabled
    by setting `selectionMode` as `single` on a column level (remember that previously
    mentioned plain selection works on a table level) and the `selection` property
    to hold the selected row as an object.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with the radio selection feature to select specific browser records
    would be written as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows a snapshot result with a radio button selection
    as an example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/495cc0c0-524b-4bee-b61e-31c6d095a8bc.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: As of now, there is no unselected feature for radio button selection (that is,
    the row is unselected once you select another row).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Checkbox selection
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The multiple selection can be achieved through checkboxes, which exist on each
    row instead of using a click event on a specific row. The selection is enabled
    by setting `selectionMode` as `multiple` on a column level (remember that plain
    selection provides this on a table level) and the `selection` property to hold
    the selected rows as an array of objects.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with the checkbox selection feature to select multiple browser
    records would be written as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows a snapshot result with a checkbox selection
    as an example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aa4648a3-d61b-4d76-90d5-e7bead2a1093.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: In this selection, the selected records can be unselected by unselecting checkboxes.
    The checkbox selection supports the `onHeaderCheckboxToggle` event while toggling
    the header checkbox. Refer to the events section for more details.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: When selection is enabled, use the `dataKey` attribute to avoid deep checking
    when comparing objects. If you cannot provide `dataKey`, use the `compareSelectionBy`
    property as "equals," which uses a reference for comparison instead of the default
    "deepEquals" comparison. The deepEquals comparison is not a good idea (especially
    for huge data) in terms of performance because it checks all the properties.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the value of the `browserId` property could be chosen for `dataKey`
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以选择`browserId`属性的值作为`dataKey`，如下所示：
- en: '`<p-dataTable dataKey="browserId" selection="true">'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`<p-dataTable dataKey="browserId" selection="true">'
- en: '...'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: </p-dataTable>`
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: </p-dataTable>`
- en: Sorting, filtering, and paginating data in DataTable
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在DataTable中对数据进行排序、过滤和分页
- en: Sorting, filtering, and pagination features are very crucial features for any
    kind of data iteration component. These features are going to be very helpful
    while working on large datasets.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 排序、过滤和分页功能对于任何类型的数据迭代组件来说都是非常重要的功能。在处理大型数据集时，这些功能将非常有帮助。
- en: Sorting
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序
- en: 'The sorting feature is provided by enabling the `sortable` property on each
    column. By default, the component supports single sorting (`sortMode="single"`).
    We can achieve multi sorting by setting `sortMode="multiple"`. The DataTable component
    with the sorting feature to sort browser records in either ascending or descending
    order would be written as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在每一列上启用`sortable`属性来提供排序功能。默认情况下，组件支持单一排序（`sortMode="single"`）。我们可以通过设置`sortMode="multiple"`来实现多重排序。具有排序功能的DataTable组件，以按升序或降序对浏览器记录进行排序，将如下所示：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows a snapshot result with a single sorting on a
    limited number of records as an example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了对有限数量记录进行单一排序的快照结果：
- en: '![](assets/a442c658-24dd-48c5-ae38-b47eab29d6ba.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/a442c658-24dd-48c5-ae38-b47eab29d6ba.png)
- en: We need to use the Meta key *(Ctrl* for Windows and *Command* key for macOS)
    for the multi column sorting feature. The custom sorting is also supported using
    the `sortFunction` function instead of regular sorting on the `field` property.
    The sorting feature also provides the `onSort` event callback, which will be invoked
    on sorting a column. Refer to the event details section for more information.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用Meta键（Windows为Ctrl，macOS为Command键）来使用多列排序功能。还支持使用`sortFunction`函数进行自定义排序，而不是在`field`属性上进行常规排序。排序功能还提供了`onSort`事件回调，将在对列进行排序时调用。有关更多信息，请参阅事件详细信息部分。
- en: Filtering
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤
- en: The filtering feature is provided by enabling the `filter` property on each
    column. The filter can be applied on a column level and whole table level as well.
    The table level filtering is also called **global filtering**. To enable global
    filter, the local template variable of input need to be referred in the `globalFilter`
    property. The `keyup` event of global filter input will be listened to for filtering.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在每一列上启用`filter`属性来提供过滤功能。过滤可以应用于列级别和整个表级别。表级别的过滤也称为全局过滤。要启用全局过滤，需要在`globalFilter`属性中引用输入的本地模板变量。全局过滤输入的`keyup`事件将被监听以进行过滤。
- en: 'The filter feature supports optional filter properties such as `filterMatchMode`
    to provide different types of a text search. It has five filter match modes such
    as `startsWith`, `contains`, `endsWith`, `equals`, and `in` and the default match
    mode is `startsWith`, whereas the `filterPlaceholder` property is used to display
    the helper place holder text. The DataTable component with the filtering feature
    on table columns would be written as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤功能支持可选的过滤属性，例如`filterMatchMode`，以提供不同类型的文本搜索。它有五种过滤匹配模式，如`startsWith`、`contains`、`endsWith`、`equals`和`in`，默认匹配模式是`startsWith`，而`filterPlaceholder`属性用于显示辅助占位文本。具有表列过滤功能的DataTable组件将如下所示：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The filtering feature is normally applied on a plain input component, but this
    behavior can also be customized by providing a filter on various other inputs
    such as Spinner, Slider, DropDown, and MultiSelect components. The custom input
    filter calls a `filter` function with three parameters. The signature of the `filter`
    function would be written as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows a snapshot result with a filtering feature on
    a limited number of records as an example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e53d5ecf-0d93-428e-9b70-13428f513f0c.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, we can observe that the data is filtered by a rating
    slider and multi select grade field. The filtering feature also provides the `onFilter`
    event callback, which will be invoked on filtering an input. Refer to the event
    details section for more information.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Pagination
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the table is backed by huge datasets, then displaying all of the data on
    a single page looks awkward and it is going to be a nightmare for the user when
    scrolling millions of records. The DataTable component supports a pagination feature
    just by enabling the `paginator` property and the `rows` option to display the
    number of records in the page.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the mentioned required features, it also supports various optional
    features such as:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: The `pageLinks` property shows the number of page link displayed at a time.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `rowsPerPageOptions` property has a provision to change the number of rows
    to be displayed (comma separated values as an array) in a single page.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `totalRecords` property displays the logical records which are useful for
    the lazy loading feature.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `paginatorPosition` property displays the paginator with possible values
    of `top`, `bottom`, and `both`. The default position of paginator is `bottom`.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The pagination example, which is used to display a lot of browser''s information,
    would be written as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows a snapshot result with a pagination feature
    as an example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/900610bd-c5df-41bc-9c74-f433a8db745f.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: We can also use an external paginator using the Paginator component apart from
    the one built into DataTable. The pagination feature also provides the `onPage`
    event callback (whereas the external paginator provides the `onPageChange` callback),
    which will be invoked on pagination. Refer to the event details section for more
    information.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the cell content with templating
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the value of the `field` attribute of each column is used to display
    the table content. The content can also be customized in every possible way with
    the help of the `ng-template` template tag, which can be applied on header, body,
    and footer levels. The `template` variable passed to the `ng-template` template
    is used for column definition and row data is used by the `rowData` property.
    There is also an optional row index available through the `rowIndex` variable.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每列的`field`属性值用于显示表格内容。可以通过`ng-template`模板标签以各种可能的方式自定义内容，该模板标签可以应用于头部、主体和底部级别。传递给`ng-template`模板的`template`变量用于列定义，行数据由`rowData`属性使用。还可以通过`rowIndex`变量获得可选的行索引。
- en: 'The `ng-template` template will have the `pTemplate` directive, which holds
    the type of customization with the possible values of `header`, `body`, and `footer`.
    The customized browser content is displayed with various text colors and row data
    information with a button selection as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng-template`模板将具有`pTemplate`指令，其中包含了可能的值为`header`、`body`和`footer`的自定义类型。自定义的浏览器内容以各种文本颜色和行数据信息显示，并带有按钮选择，如下所示：'
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding example, we customized the table content to display different
    colors based on grades, each row with button selection using body template and
    button at the header using a header template. The following screenshot shows a
    snapshot result with customized content display as an example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们自定义了表格内容，根据成绩显示不同的颜色，使用body模板每行带有按钮选择，使用header模板在表头处有一个按钮。以下截图显示了自定义内容显示的快照结果：
- en: '![](assets/22ba4594-3a72-4773-a293-2cf44be9615f.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/22ba4594-3a72-4773-a293-2cf44be9615f.png)'
- en: As per the preceding snapshot, the `ng-template` template tag is used with different
    types to provide a full flexibility on customization.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上面的快照，`ng-template`模板标签用于不同类型，以提供完全灵活的自定义。
- en: Resizing, reordering, and toggling columns in DataTable
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在DataTable中调整大小、重新排序和切换列
- en: By default, all the columns of the component are in static representation without
    interaction. The component provides resizing, reordering, and toggling features
    for columns.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，组件的所有列都是静态表示，没有交互。该组件为列提供了调整大小、重新排序和切换功能。
- en: Resizing
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整大小
- en: Columns can be resized using drag-and-drop behavior just by setting the `resizableColumns`
    property to `true`. There are two types of resize modes available. One is the
    `fit` mode and the other one is the `expand` mode. The default one is the `fit`
    mode. In this mode, when columns are resized, the total width of the table will
    not be changed; whereas in the `expand` mode, the total width of table will be
    changed.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将`resizableColumns`属性设置为`true`来使用拖放行为调整列的大小。有两种调整大小模式可用。一种是`fit`模式，另一种是`expand`模式。默认模式是`fit`模式。在此模式下，调整列时，表格的总宽度不会改变；而在`expand`模式下，表格的总宽度将会改变。
- en: 'The resizing feature with the `expand` mode would be written as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`expand`模式的调整功能将被编写如下：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot shows a snapshot result with the `expand` resize mode
    as an example:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用`expand`调整大小模式的快照结果：
- en: '![](assets/26c5545b-f4c5-442a-8f27-967a8ea38428.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/26c5545b-f4c5-442a-8f27-967a8ea38428.png)'
- en: In the preceding snapshot, we can observe that both Engine and Grade columns
    are resized considering its content size to optimize the screen area. Because
    of the `expand` mode, the total width of the table is also changed. It can also
    provides the `onColumnResize` event callback which passes the resized column header
    information when the column gets resized. Refer to the event details section for
    more information.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Reordering
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally, the order of table columns will appear exactly as it is defined within
    the component. There is an option to reorder the columns using the drag-and-drop
    feature just by setting the `reorderableColumns` property to `true`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'The reordering feature would be written as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows a snapshot result with a reordering feature
    as an example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d950ccd2-0ffb-4bab-aa79-c8a9a96987d4.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: As per the preceding snapshot, both Platform and Browser column fields are mutually
    reordered (that is, the initial column order is `engine`, `browser`, `platform`,
    and `grade`. After reordering, the column's order will be `engine`, `platform`,
    `browser`, and `grade`). It also provides the `onColReorder` event callback whenever
    the column gets reordered. Refer to the events section for more details.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Toggling
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time there will not be enough screen space (or area) to display
    all the columns. In this case, toggling of table columns would be really helpful
    to save available screen space. Because of this feature, only mandatory or primary
    columns can be shown. This feature can be achieved by defining MultiSelect components
    on a dynamic column table in order to toggle the columns. Refer to the dynamic
    columns example which was mentioned at the beginning of this chapter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: In-cell editing with DataTable
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the component''s content will be in read-only mode (that is, we
    can''t edit the content). An UI will be more interactive with the cell editing
    feature. The cell editing feature is enabled just by setting the `editable` property
    on both table and column levels. When a cell is clicked on, the edit mode will
    be activated. Clicking on the outside of a cell or hitting the *Enter* key switches
    back to the view mode after updating the value. The cell editing feature would
    be written as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following screenshot shows a snapshot result with the cell editing feature
    on the `engine` field as an example:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/921af400-6547-4e89-9417-004e2bc3b29e.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: By default, the editable mode enables the input component on the click of a
    particular cell. We can also use other input components such as DropDown, MultiSelect,
    Calendar, and so on, for a customized input editing. In the preceding example,
    we can edit the cells using Input and Dropdown components.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Making DataTable responsive
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The responsive feature is very useful for both web and mobile apps. The component
    columns are displayed as stacked in a responsive mode if the screen size is smaller
    than a certain breakpoint value. This feature is enabled by setting the `responsive`
    property as `true`. This stacked behavior can also be achieved manually (irrespective
    of the screen size) by enabling the `stacked` property (that is, `stacked="true"`).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'The responsive mode feature of the Table component would be written as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The component class defines the `toggle` method, which is used to toggle the
    responsive behavior as shown here:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following screenshot shows a snapshot result of the DataTable component
    with stacked columns as an example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3378e8e2-6fe8-4f3a-abf8-13caf0270c33.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: In this use case, the columns are displayed in a stacked manner by manually
    toggling the button, which is placed externally to the table. The responsive mode
    or stacked behavior can also be achieved by reducing or minimizing the screen
    size.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Using column and row grouping
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DataTable component provides grouping on both column and row level.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Column grouping
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Columns can be grouped at the header and footer area using `p-headerColumnGroup`
    and `p-footerColumnGroup` tags, which define the array of columns using `colspan`
    and `rowspan` properties. The table rows are defined using the `p-row` tag, which
    holds the column components. The component with column grouping would be written
    as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following screenshot shows a snapshot result of the column grouping feature
    as an example:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b3c4eef3-4848-49f4-a753-4540361e5adc.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, we can observe that the browser-specific information
    is categorized with the help of column grouping.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Row grouping
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the table rows are individual and displayed one by one to represent
    unique records. In many cases, it is required to group multiple rows as one row.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Expandable row groups
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The rows can be grouped on a specific field in such a way that rows can be expanded
    and collapsed using row expander feature. This feature is enabled by setting `rowGroupMode="subheader"`,
    `expandableRowGroups="true"`, and `groupField="browser"`. `groupField` is set
    to a specific categorized column.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'The row grouping feature with expandable row group option would be written
    as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following screenshot shows a snapshot result of the expandable row grouping
    feature as an example:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/53bdc307-5891-4945-973e-21b59329cf01.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: In this use case, we expanded Firefox version 3 group to see all the browser
    details over time.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Sub-headers
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All related items can be grouped under one sub-group using the sub-headers feature.
    This use case is similar to expanded row groups but these sub-headers cannot be
    collapsed. This behavior is enabled by setting `rowGroupMode="subheader"` and
    `groupField="engine"`. The `groupField` property is set to a specific categorized
    column.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'The row grouping feature with the sub-header option would be written as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows a snapshot result of the table with the sub-header
    grouping feature as an example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/22b2b37a-eee9-4b12-b0f9-dd2ea123205a.png)The sub-header grouping
    feature'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding use case, all browser details are grouped based on a unique
    browser engine as a sub-header.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: RowSpan groups
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The rows can be grouped based on the `sortField` property. This feature is
    enabled by setting the `rowGroupMode` property value to `rowspan` (that is, `rowGroupMode="rowspan"`).
    An example of row grouping with row span would be written as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following screenshot shows a snapshot result of the component with the
    row span grouping feature as an example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/791fe8fc-8f0d-432e-a5ad-7f1236c98d59.png)The row span grouping feature'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: In this version of row grouping, the browser's `engine` field is used for row
    grouping which spans across all of its related items.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Handling tons of data with lazy DataTable
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lazy loading is a very crucial feature to handle huge datasets. This feature
    provides the loading of data chunks through paging, sorting, and filtering operations
    instead of loading all the data at once. The lazy loading is enabled by setting
    the `lazy` mode (`lazy="true"`) and carrying user actions using `onLazyLoad` callback
    with the the event object as a parameter. The event object holds the pagination,
    sorting, and filter data.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: It is also required to display a logical number of records to be displayed for
    pagination configuration using projection query. This is needed because we can
    retrieve only the current page data in the lazy loading. There is no information
    available related to the remaining records. Hence, it is required to show the
    paginator links based on actual records in the data source. This can be achieved
    through the `totalRecords` property on a Table component.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with lazy loading feature would be written as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The component class defines lazy loading callback to retrieve data on demand
    as shown:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As a demonstration of lazy loading, we used a pagination operation for retrieving
    the data. We can also use sorting and filtering features. The following screenshot
    shows a snapshot result to illustrate as an example:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a80bbff2-1e08-434a-9115-0dcfc73c468e.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, we can clearly observe that the information on page
    4 is retrieved dynamically from the remote data source. Refer to the events section
    for more details about the lazy loading event callback.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Always prefer lazy loading for large datasets to improve the performance.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Row expansion by providing a row template
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many cases, it is not possible to accommodate all of the data in the table.
    The secondary or additional information of table data needs to be populated in
    a different representation. The row expansion features allows displaying detailed
    content for a particular row (that is, display data in a separate block which
    will appear on request). To use this feature, enable the `expandableRows` property
    and add an expander column using the `expander` property as a separate column
    along with regular columns in order to toggle the row. To declare the expanded
    content, provide a `pTemplate` directive with `rowexpansion` as the value. The
    local template reference variable from `ng-template` is used to access the table
    data.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with the row expansion feature to display full details of a browser
    would be written as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If required, the expanded rows can be stored in an array variable inside the
    component class using the `expandedRows` property. The following screenshot shows
    a snapshot result of a component with the row expansion feature as an example:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/315ca686-6d19-4e77-b737-4038ecd4d17c.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
- en: By default, multiple rows can be expanded at once. We can make a strict single
    row expansion using the `rowExpandMode` property by setting it as `single`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'We can apply the row expansion behavior for grouped tables as well:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: The component provides an `expandableRowGroups` Boolean property which is used
    to create the icon to toggle the row groups.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, all the rows will be expanded. The `expandedRowGroups` property
    is used to hold the row data instance to expand specific row groups by default.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method named `toggleRow` is provided in order to toggle table rows with
    the row data.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Exporting data in CSV format
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The data can be viewed in table format in online mode at any time. But, there
    is a need of data in an offline mode. Also in many cases, we need to take huge
    data reports from the website. PrimeNG DataTable can be exported in CSV format
    using the `exportCSV()` API method. Button components placed inside or outside
    of the table can trigger this method for downloading the data in the CSV format.
    The component with export API method call would be written as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: By default, exported CSV uses a comma (`,`) operator as a separator. But, this
    behavior can be changed using the `csvSeparator` property on a DataTable component.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: DataTable events and methods
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The DataTable component provides many event callbacks and methods with respect
    to each feature. The following table lists out all the table event callbacks with
    name, parameter details, and description:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
- en: '| `onRowClick` |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Selected data'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is clicked. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
- en: '| `onRowSelect` |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Selected data'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.type`: Type of selection, valid values are `row`, `radiobutton`, and
    `checkbox`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is selected. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
- en: '| `onRowUnselect` |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Unselected data'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.type`: Type of unselection, valid values are `row` and `checkbox`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is unselected with the Meta key. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
- en: '| `onRowDblclick` |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Selected data'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is selected with double-click. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
- en: '| `onHeaderCheckboxToggle` |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.checked`: State of the header checkbox'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when state of header checkbox changes. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
- en: '| `onContextMenuSelect` |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Selected data'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is selected with right click. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
- en: '| `onColResize` |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
- en: '`event.element`: Resized column header'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.delta`: Change of width in number of pixels'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a column is resized. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
- en: '| `onColReorder` |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
- en: '`event.dragIndex`: Index of the dragged column'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.dropIndex`: Index of the dropped column'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.columns`: Columns array after reorder'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a column is reordered. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
- en: '| `onLazyLoad` |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
- en: '`event.first`: First row offset'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.rows`: Number of rows per page'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.sortField`: Field name to sort with'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.sortOrder`: Sort order as number, `1` for asc and `-1` for desc'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filters`: the `FilterMetadata` object having field as key and filter value,
    filter `matchMode` as value'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when paging, sorting, or filtering happens in lazy mode.
    |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
- en: '| `onEditInit` |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
- en: '`event.column`: Column object of the cell'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Row data'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a cell switches to the edit mode. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
- en: '| `onEdit` |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.column`: Column object of the cell'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Row data'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.index`: Row index'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when cell data is being edited. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
- en: '| `onEditComplete` |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
- en: '`event.column`: Column object of the cell'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Row data'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.index`: Row index'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when cell edit is completed (Supported for the *Enter*
    key only). |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
- en: '| `onEditCancel` |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
- en: '`event.column`: Column object of the cell'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Row data'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.index`: Row index'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when cell edit is cancelled with the *Esc* key. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
- en: '| `onPage` |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
- en: '`event.first`: Index of first record in page'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.rows`: Number of rows on the page'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when pagination occurs. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
- en: '| `onSort` |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
- en: '`event.field`: Field name of the sorted column'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.order`: Sort order as 1 or -1'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.multisortmeta`: Sort metadata in multi sort mode. See multiple sorting
    section for the structure of this object.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a column gets sorted. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
- en: '| `onFilter` | `event.filters`: Filters object having a `field` as the property
    key and an object with value, `matchMode` as the property value. | Callback to
    invoke when data is filtered. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
- en: '| `onRowExpand` |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: Row data to expand'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is expanded. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
- en: '| `onRowCollapse` |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: Row data to collapse'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is collapsed. |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
- en: '| `onRowGroupExpand` |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group`: Value of the group'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row group is expanded. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
- en: '| `onRowGroupCollapse` |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group`: Value of the group'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row group is collapsed. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
- en: 'The following table lists out frequently used table methods with name, parameters,
    and description:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
- en: '| `reset` | - | Resets sort, filter, and paginator state |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
- en: '| `exportCSV` | - | Exports the data in CSV format |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
- en: '| `toggleRow` | `data` | Toggles row expansion for a given row data |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
- en: PrimeNG version 4.0.1 reintroduced back the `rowTrackBy` option for iteration
    components such as DataTable, DataGrid, and DataList to improve the DOM optimizations.
    That is, the DOM insertions and updates of each row are optimized by delegating
    the decision to the `ngForTrackBy` directive. In PrimeNG, this will be achieved
    through the `rowTrackBy` property. If the property is not defined, by default,
    the algorithm checks for an object identity. For example, the browser row is identified
    by ID property as
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '`trackById(index, browser) { return browser.id; }`.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datatable](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datatable).'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Listing data with DataList
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The DataList component is used to display the data in a list layout. It requires
    a collection of items as its value and `ng-template` to display content where
    each item can be accessed using a local template variable. This template also
    provides an index of each item using a variable represented by the `let-i` expression.
    A basic example of the DataList component with all browser details to display
    in a list format would be written as follows:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The list of browser details needs to be retrieved from external services. In
    this case, the `BrowserService` service will be injected into the component class
    to retrieve the browser information. We used observables to get the data using
    the HTTP module. The list data will be retrieved on page load as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We limited the number of records to five for demonstration purposes. The following
    screenshot shows a snapshot result of the DataList component in a list format
    as an example:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/08a0bc0e-a8e6-499a-83f8-ba98966c0d4a.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
- en: The preceding snapshot just displays the data in a tabular format. In the next
    section, you can find many more features to make a data list a powerful component.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Facets and pagination
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DataList component supports facets such as header and footer for content
    using `p-header` and `p-footer` tags. In order to improve the user experience
    on large datasets, it supports the pagination feature. This feature is enabled
    by setting the `paginator` property as `true` and it sets a number of rows to
    be displayed using the `rows` property. Apart from these mandatory settings, there
    are some optional customized settings for pagination. Among all those optional
    properties, `paginatorPosition` is used to display the paginator either in `top`,
    `bottom`, or `both` positions; `rowsPerPageOptions` is used to display a drop-down
    with a possible number of rows to be displayed in a page, and `emptyMessage` is
    used to display a data list body when no records exist. Pagination also supports
    the `onPage` event callback, which will be invoked on page navigation. Refer to
    the events section for more details.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'The DataList component with facets and pagination features to display browser
    information would be as follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following screenshot shows a snapshot result with pagination as an example:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/159ed065-ba9d-4de1-90db-3f45ecf1a3d7.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
- en: All the pagination controls are customizable with the options provided in the
    DataList component.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lazy loading is a very helpful feature to handle large datasets. It will not
    load all the data at once but as small chunks based on user demand. DataList supports
    lazy loading on pagination interaction. This feature is available by enabling
    the `lazy` attribute (that is, `lazy="true"`) and also by invoking the `onLazyLoad`
    callback to retrieve the data from the remote data sources. Refer to the events
    section for the signature and more details.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: The lazy load event object provides the first record in the page and the number
    of rows in the current page to get the next set of data. Also you should provide
    the total records by projection query for pagination configuration. This is useful
    to display pagination links based on the total number of records available even
    though that many records are not available on page load (that is, only current
    page records exist in a lazy mode).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example of the lazy loading feature for a DataList component
    with a basic prototype as shown here:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The component class has to define the lazy loading event callback to retrieve
    the records based on user request (in this case, it would be pagination) as shown
    here:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding code snippet, you can observe that both the `first` and `rows`
    properties of an event are helpful for retrieving the next bunch of records. Based
    on the `rows` attribute, it tries to fetch the next `rows` number of records on
    every instance.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Events
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The component provides two event callbacks, one for pagination and the other
    one for lazy loading. Both events provide two arguments to get the first record
    and number of rows present on the page. The lazy loading event is invoked on pagination,
    filtering, and sorting functionalities by enabling a lazy mode.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
- en: '| `onLazyLoad` |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
- en: '`event.first`: First row offset'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.rows`: Number of rows per page'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when paging, sorting, or filtering happens in a lazy mode.
    |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
- en: '| `onPage` |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
- en: '`event.first`: Index of the first record in page'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.rows`: Number of rows on the page'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when pagination occurs. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
- en: It provides many other features such as facets for header and footer display
    (`p-header` and `p-footer`), pagination to navigate between multiple pages, and
    a lazy loading feature for retrieving the data on demand.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datalist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datalist).'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: Listing data with PickList
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PickList component is used to move items between two different lists. You
    can also reorder the items within each list. This provides the overall status
    of selected items. The items can be moved/reordered using either default button
    controls or drag and drop behavior. PickList requires two arrays, one is used
    for the source list and other one is for the target list. The `ng-template` template
    tag is used to display the item's content where each item in the array can be
    accessed using a local `ng-template` variable.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of the PickList component with country information would be
    written as follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the component class, let''s define a source list for available data and
    the target as an empty list to indicate that there is no selection yet. The country
    service needs to be injected to access the country information from external resources:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'By default, both source and target panels are available with default `width`
    and `height` properties. But this default behavior can be customized using `sourceStyle`
    and `targetStyle` properties. The following screenshot shows a snapshot result
    of an initial PickList as an example:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1b53673b-98fa-4b8a-a683-d87d50f81115.png)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
- en: The PickList component provides six event callbacks which are used for moving
    items between two lists and ordering the items in both source and target areas.
    Among these six callbacks, four of them are used for moving items, `onMoveToTarget`,
    `onMoveToSource`, `onMoveAllToSource`, and `onMoveAllToSource` whereas ordering
    items is performed by `onSourceReorder` and `onTargetReorder`.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: 'The component can be customized from its default behavior in different ways
    as mentioned here:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Headers can be customized using headers `sourceHeader` and `targetHeader` as
    properties.
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web page will become responsive using the `responsive` property (`responsive="true"`),
    which adjusts the button controls based on screen size.
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default multiple selection is prevented (with the help of the Meta key)
    by disabling the `metaKeySelection` attribute (`metaKeySelection="false"`).
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The visibility of button controls is controlled through `showSourceControls`
    and `showTargetControls` properties. For example, `showSourceControls="false"`
    and `showTargetControls="false"`.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PrimeNG 4.1 supports the filtering feature on item fields as a new addition
    using the `filterBy` property. Multiple fields can be filtered by placing the
    comma separated fields in the `filterBy` property:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The newer 4.1 version also supports the drag-and-drop feature (within the same
    list or across lists) by enabling the `dragdrop` property. It also provides the
    `dragdropScope` property, which holds the unique key to avoid conflicts with other
    drag-and-drop events. The drag-and-drop feature example would be as follows:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/picklist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/picklist).'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: Listing data with OrderList
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OrderList component is used to sort a collection of items in different directions
    (up and down). The component requires an array type variable to store its value
    and `ng-template` to display content of an array of items. Each item will be accessed
    inside the `ng-template` template using a local `ng-template` variable. When the
    position of an item changes, the backend array is also updated to store the latest
    item order.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of the OrderList component with country information would be
    written as follows:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In the component class, let''s define a countries list to display the collection
    of items. The country service needs to be injected to access the country information
    from the external resources or datasources as shown here:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'By default, the list panel is available with default `width` and `height` properties.
    But this can be customized using the `listStyle` property. The following screenshot
    shows a snapshot result of the initial order list as an example:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8876ef10-8734-4396-8a64-ff4338298a27.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
- en: 'The OrderList component provides three different event callbacks as mentioned
    here:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
- en: '| `onReorder` | `event`: browser event | Callback to invoke when list is reordered.
    |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
- en: '| `onSelectionChange` |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
- en: '`originalEvent`: browser event'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value`: Current selection'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when selection changes. |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
- en: '| `onFilterEvent` |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
- en: '`originalEvent`: browser event'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value`: Current filter values'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when filtering occurs. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
- en: 'The component can be customized from it''s default behavior in different ways
    as mentioned here:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: The header can be customized using the `header` property
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `responsive` property (`responsive="true"`) is used to apply responsive
    behavior, which adjusts the button controls based on the screen size
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default multiple selection is prevented (with the help of the Meta key)
    by disabling the `metaKeySelection` attribute (`metaKeySelection="false"`)
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a snapshot result of a countries list with the
    earlier mentioned customization as an example:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1d2573f1-feb9-4aa7-b23f-cb1c58261d48.png)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, you can observe that controls appears at the top
    due to its `responsive` feature (`responsive="true"`). We can also observe that
    the panel width has been adjusted based on viewport size (using the `listStyle`
    property).
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: 'PrimeNG 4.1 version supports filtering and drag and drop features as new additions.
    The filter feature can be applied for single field and multiple fields using the
    `filterBy` property similar to the DataTable component. For example, the multi
    filtering feature on countries data would be as follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The newer 4.1 version also supports a drag-and-drop feature to reorder items
    by enabling the `dragdrop` property. It also provides the `dragdropScope` property,
    which holds the unique key to avoid conflicts with other drag-and-drop events.
    The drag-and-drop feature example would be as follows:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/orderlist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/orderlist).'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: Grid-organized data with DataGrid
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DataGrid displays the data in a grid-oriented layout. The data is represented
    in the form of a layout with multiple cells aligned in a regular pattern. It requires
    a collection of items as an array for the `value` attribute and the `ng-template`
    template tag to display its content where each item can be accessed using a local
    template variable. The template content needs to be wrapped within a `div` element
    such that the data is formatted in a grid layout using any grid CSS styles.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of a DataGrid component with browser information would be written
    as follows:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The component class has to define an array of browser objects, which are retrieved
    from a remote data source using the services. The service accessed on a page load
    would be written as follows:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following screenshot shows a snapshot result of the DataGrid component
    in a grid layout as an example:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a4de2a0d-97d1-40e6-9a32-78a2667f48ec.png)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, between any one of two cells the padding will be
    consistent. This can be customized through skinning classes of this component.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: Beyond basic usage - advanced features
  id: totrans-405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding snapshot, the browser data is displayed in the grid layout.
    But, you can observe that there is no header or footer to summarize the context.
    The header and footer facets are available using `p-header` and `p-footer` tags.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: To improve the usability on large sets, DataGrid provides a pagination feature
    to display the next chunk of data through page navigation. This feature is provided
    by enabling the `paginator` property and by setting the `rows` attribute. Just
    like any other data components, the pagination features such as `pageLinks`, `rowsPerPageOptions`,
    `paginatorPosition`, and `totalRecords` are available for this customization.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: To handle huge amounts of data, DataGrid supports a lazy loading feature to
    access this huge amount of data in chunks. This feature is provided by enabling
    the `lazy` attribute. Also the lazy loading method should be called on the pagination
    operation using the `onLazyLoad` event.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: 'The component class which defines the lazy load event callback with an `event`
    object as a parameter is shown here:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following screenshot shows a snapshot result of the lazy loading feature
    as an example:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2800c1ee-48f2-4565-a497-a3233f9ae432.png)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, it displays the facets (header and footer), customized
    pagination options, and loading data lazily on user demand. The additional information
    about browsers will be displayed in a dialog popup just by clicking the search
    icon available in each cell. By default, the DataGrid component is responsive
    as a layout display across various screen sizes or devices.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datagrid](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datagrid).'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: On-demand data loading with DataScroller
  id: totrans-416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DataScroller displays the data on-demand using a scroll feature. It requires
    a collection of items as its value, number of rows to load, and `ng-template`
    template tag to display the content where each item can be accessed using an implicit
    variable. A basic example of the DataScroller component with various browser information
    would be written as follows (remember, here a fluid grid is used to format the
    content of browser records):'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Like any other data components, the component class of the data list should
    define an array of browser objects. The data is populated by making a remote call
    to the data source. The following screenshot shows a snapshot result as an example:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bdc82140-661a-40fd-a445-5c65b46addb5.png)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding snapshot, the data is displayed on-demand based on
    a window scroll as target. To make this DataScroller element more readable, it
    supports facets such as header and footer using `p-header` and `p-footer` tags.
    By default, the DataScroller component listens to the scroll event of the window.
    There is also one more option to define a container of a component as an event
    target with the help of the inline mode. For this, we should enable the `inline`
    attribute as `true` (that is, `inline="true"`).
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the scroll-based data loading, further data can be loaded using
    an explicit button action. The component should define a `loader` property which
    refers to the Button component. The DataScroller component with loader button
    would be written as follows:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following screenshot shows a snapshot result with loader display as an
    example:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4b875e41-f344-47eb-98a0-83eb5f519678.png)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, additional browser information is displayed in a
    dialog format once the user clicks the search button on the left-hand side. This
    gives the ability to show how to select a particular record in a DataScroller
    component.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deal with huge datasets, this component supports the lazy loading feature
    as well. Instead of loading whole data, it loads chunks of data on each scroll
    action. It requires both `lazy` and `onLazyLoad` properties to enable this behavior.
    The lazy loading example of DataScroller would be written as follows:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The component class defines the lazy loading event callback to retrieve the
    data in chunks as shown here:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In the preceding code snippet, you can observe that the `first` and `rows` properties
    of an `event` object are helpful for retrieving the next bunch of records. Based
    on the `rows` attribute, it tries to fetch the next `rows` number of records on
    every fetch.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: The API method `reset` is used to reset the content or data of a DataScroller
    component. That is, the component will reset to its default state.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datascroller](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datascroller).'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with Tree
  id: totrans-436
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Tree component is used to display a hierarchical representation of data
    in a graphical format. It provides an array of the `TreeNode` objects as its value.
    The `TreeNode` API provides many properties to create tree node objects. The tree
    structure has basically three major components as listed here:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: The tree elements are called **nodes**
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lines connecting elements are called branches
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nodes without children are called leaf nodes or leaves
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A basic example of a Tree component with nodes would be written as follows
    (the node will represent tourist places):'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The data for the Tree component should be provided in a nested parent-child
    hierarchy. Each tree node is created with a set of properties such as `label`,
    `data`, `expandIcon`, `collapsedIcon`, `children`, and so on. The complete list
    of the `TreeNode` properties is shown here:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Type** | **Default** | **Description** |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
- en: '| `label` | `string` | `null` | Label of the node. |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
- en: '| `data` | `any` | `null` | Data represented by the node. |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
- en: '| `icon` | `string` | `null` | Icon of the node to display next to content.
    |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
- en: '| `expandedIcon` | `string` | `null` | Icon to use in expanded state. |'
  id: totrans-448
  prefs: []
  type: TYPE_TB
- en: '| `collapsedIcon` | `string` | `null` | Icon to use in collapsed state. |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
- en: '| `children` | `TreeNode[]` | `null` | An array of tree nodes as children.
    |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
- en: '| `leaf` | `boolean` | `null` | Specifies if the node has children. Used in
    lazy loading. |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
- en: '| `style` | `string` | `null` | Inline style of the node. |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
- en: '| `styleClass` | `string` | `null` | Style class of the node. |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
- en: '| `expanded` | `boolean` | `null` | Whether the node is in an expanded or collapsed
    state. |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
- en: '| `type` | `string` | `null` | Type of the node to match the `ng-template`
    type. |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
- en: '| `parent` | `TreeNode` | `null` | Parent of the node. |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
- en: '| `styleClass` | `string` | `null` | Name of the style class for the node element.
    |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
- en: '| `draggable` | `boolean` | `null` | Whether to disable dragging for a particular
    node even if `draggableNodes` is enabled. |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
- en: '| `droppable` | `boolean` | `null` | Whether to disable dropping for a particular
    node even if `droppableNodes` is enabled. |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
- en: '| `selectable` | `boolean` | `null` | Used to disable selection of a particular
    node. |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
- en: All properties of `TreeNode` are optional.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: 'The tree node structure for the tourist places example would be as follows:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In real-time applications, the data located in a remote data source is retrieved
    through services. The following service is going to be injected in the component
    class:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The component class loads the data on page load using the service call as shown
    here:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The following screenshot shows a snapshot result of the hierarchical Tree component
    representation as an example:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a5801dc-cbf4-496a-8468-0598b47e5799.png)'
  id: totrans-469
  prefs: []
  type: TYPE_IMG
- en: In the preceding use case, we expanded India and Germany country tree nodes
    to see their child nodes represented as tourist places.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: Selection features - single, multiple, and checkbox
  id: totrans-471
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tree component supports three kinds of selections such as single, multiple,
    and checkbox. The single selection is provided by enabling both the `selectionMode`
    property and the `selection` attribute, which holds a selected tree node.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: 'The Tree component with a single selection feature to select a favorite tourist
    place would be written as follows:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The following screenshot shows a snapshot result of the Tree component with
    a single selection as an example:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6ec7842-e873-4887-bb28-06bb93e0cc42.png)'
  id: totrans-476
  prefs: []
  type: TYPE_IMG
- en: Here, multiple selection is enabled by setting `selectionMode` as `multiple`
    (`selectionMode="multiple"`). In this case, the `selection` property holds an
    array of objects as selected nodes. The multiple selection is also provided through
    the checkbox selection. This can be achieved just by setting `selectionMode="checkbox"`.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: 'The Tree component with a multi checkbox selection feature to select multiple
    tourist places would be written as follows:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following screenshot shows a snapshot result of the Tree component with
    checkbox selection as an example:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b66a06d-0743-489e-be3d-61cdd6418065.png)'
  id: totrans-481
  prefs: []
  type: TYPE_IMG
- en: The selection feature supports two event callbacks such as `onRowSelect` and
    `onRowUnselect`, which provide selected and unselected tree nodes. Refer to the
    events section for more details.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: The propagation (upward and downward directions) of selection nodes is controlled
    through `propagateSelectionUp` and `propagateSelectionDown` properties, which
    are enabled by default.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: Beyond basic usage - advanced features
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Tree component also supports many advanced features:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: The customized content can be displayed using the template tag `ng-template`.
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lazy loading feature is available using the `onNodeExpand` event callback.
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ContextMenu for each tree node is applied using a local template reference variable.
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The horizontal layout of the Tree component is displayed using `layout="horizontal"`
    expression.
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The drag-and-drop feature between source and target Tree components is achieved
    by enabling `draggableNodes` and `droppableNodes` properties. The `dragdropScope`
    attribute is used to restrict drag-and-drop support to a specific area.
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The row expansion or collapse behavior can be achieved in a programmatic way
    by externalizing the API methods. For example, a tree with external buttons, which
    are used to expand or collapse tree nodes in a programmatic way using event callbacks
    is shown here:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The component class defined with event callbacks to toggle the tree nodes in
    a recursive nature is shown here:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The component also supports four event callbacks such as `onNodeExpand`, `onNodeCollapse`,
    `onNodeDrop`, and `onNodeContextMenuSelect`. The following events table provides
    complete details of events, parameters, and their description:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-496
  prefs: []
  type: TYPE_TB
- en: '| `onNodeSelect` |'
  id: totrans-497
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is selected. |'
  id: totrans-500
  prefs: []
  type: TYPE_TB
- en: '| `onNodeUnselect` |'
  id: totrans-501
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Unselected node instance'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is unselected. |'
  id: totrans-504
  prefs: []
  type: TYPE_TB
- en: '| `onNodeExpand` |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Expanded node instance'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is expanded. |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
- en: '| `onNodeCollapse` |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Collapsed node instance'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is collapsed. |'
  id: totrans-512
  prefs: []
  type: TYPE_TB
- en: '| `onNodeContextMenuSelect` |'
  id: totrans-513
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is selected with right-click. |'
  id: totrans-516
  prefs: []
  type: TYPE_TB
- en: '| `onNodeDrop` |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.dragNode`: Dragged node instance'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.dropNode`: Dropped node instance'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is selected with right-click. |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/tree](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/tree).'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with TreeTable
  id: totrans-524
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TreeTable is used to display hierarchical data in a tabular format. It requires
    an array of `TreeNode` objects as its value and provides a `TreeNode` API with
    many optional properties. TreeTable defines column components as child elements
    with `header`, `footer`, `field`, and `style` attributes similar to DataTable
    component.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of a TreeTable component with tourist place tree nodes as information
    would be written as follows:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The component is created by arranging `TreeNode` objects in a hierarchical
    manner. The `TreeNode` object consists of many properties as listed here:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Type** | **Default** | **Description** |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
- en: '| `label` | `string` | `null` | Label of the node. |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
- en: '| `data` | `any` | `null` | Data represented by the node. |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
- en: '| `icon` | `string` | `null` | Icon of the node to display next to content.
    Not used by TreeTable. |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
- en: '| `expandedIcon` | `string` | `null` | Icon to use in expanded state. Not used
    by TreeTable. |'
  id: totrans-533
  prefs: []
  type: TYPE_TB
- en: '| `collapsedIcon` | `string` | `null` | Icon to use in collapsed state. Not
    used by TreeTable. |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
- en: '| `children` | `TreeNode[]` | `null` | An array of tree nodes as children.
    |'
  id: totrans-535
  prefs: []
  type: TYPE_TB
- en: '| `leaf` | `boolean` | `null` | Specifies if the node has children. Used in
    lazy loading. |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
- en: '| `style` | `string` | `null` | Inline style of the node. |'
  id: totrans-537
  prefs: []
  type: TYPE_TB
- en: '| `styleClass` | `string` | `null` | Style class of the node. |'
  id: totrans-538
  prefs: []
  type: TYPE_TB
- en: 'The `TreeNode` structure for the tourist places example would be as follows:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The injected service and the same service call representation in component
    class is almost similar to the Tree component explained in the previous section.
    The following screenshot shows a snapshot result with hierarchical tourist information
    as an example:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7698f874-f041-4990-ab56-8b7819a3b249.png)'
  id: totrans-542
  prefs: []
  type: TYPE_IMG
- en: The component also supports dynamic columns where each column is created by
    looping through the `ngFor` directive.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: Selection features - single, multiple, and checkbox
  id: totrans-544
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TreeTable component supports three kinds of selections such as single, multiple,
    and checkbox. The single selection is provided by enabling the `selectionMode`
    property on tree table and the `selection` attribute, which holds the selected
    tree table node.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: 'The TreeTable component with a single selection feature to select a favorite
    tourist place would be written as follows:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The following screenshot shows a snapshot result with a single selection as
    an example:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/240a8ee6-f425-4e70-b0a3-ced6e5f16c32.png)'
  id: totrans-549
  prefs: []
  type: TYPE_IMG
- en: Whereas, multiple selection is enabled by setting `selectionMode` as multiple
    (`selectionMode="multiple"`). In this case, the `selection` property holds an
    array of objects as selected nodes. The multiple selection is also provided through
    the checkbox selection. This can be achieved by setting `selectionMode="checkbox"`.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: 'The TreeTable component with a multi checkbox selection feature to select multiple
    tourist places would be written as follows:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The following screenshot shows a snapshot result with checkbox selection as
    an example:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a682056c-6579-4b50-94ce-8a0fb0816f0d.png)'
  id: totrans-554
  prefs: []
  type: TYPE_IMG
- en: The selection feature supports two event callbacks, such as `onNodeSelect` and
    `onNodeUnselect`, which provides the selected and unselected tree nodes. Refer
    to the events section for more details.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: Beyond basic usage - advanced features
  id: totrans-556
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TreeTable component also supports various advanced features such as lazy
    loading using the `onNodeExpand` callback, customized editable content using the
    `ng-template` template tag, and also context menu implementation, which is similar
    to the DataTable component. It also supports facets for header and footer using
    `p-header` and `p-footer` tags.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: The content display of TreeTable is customized using `ng-template`. By default,
    the label of a tree node is displayed inside a tree node. To customize the content,
    define `ng-template` inside the column that gets the column as implicit variable
    (`let-col`) and `rowData` as the node instance (`let-node="rowData"`). In the
    same way, we can customize header and footer of this component.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example of editable tree nodes by placing an input inside each
    template as shown here:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The following screenshot shows a snapshot result with an editable template
    as an example:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/15893d60-87e6-4251-983a-bf611a343771.png)'
  id: totrans-562
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, we can edit all the tree node fields. For example,
    we updated tour package days from 9 to 20\. TreeTable also supports event callbacks
    for expansion/collapsing nodes such as `onNodeExpand`, `onNodeCollapse`, and `onContextmenuSelect`
    event for context menu. Refer to the events section for more details.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG 4.1 introduced the `toggleColumnIndex` property, which is used to define
    the index of the column that contains the the `toggler` element. By default, the
    `toggleColumnIndex` value is `0` (TreeTable always shows `toggler` on first column
    if `togglerColumnIndex` is not defined).
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: 'The following events table provides the complete details of events, parameters,
    and their description:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-566
  prefs: []
  type: TYPE_TB
- en: '| `onNodeSelect` |'
  id: totrans-567
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is selected. |'
  id: totrans-570
  prefs: []
  type: TYPE_TB
- en: '| `onNodeUnselect` |'
  id: totrans-571
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Unselected node instance'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is unselected. |'
  id: totrans-574
  prefs: []
  type: TYPE_TB
- en: '| `onNodeExpand` |'
  id: totrans-575
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Expanded node instance'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is expanded. |'
  id: totrans-578
  prefs: []
  type: TYPE_TB
- en: '| `onNodeCollapse` |'
  id: totrans-579
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Collapsed node instance'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is collapsed. |'
  id: totrans-582
  prefs: []
  type: TYPE_TB
- en: '| `onContextMenuSelect` |'
  id: totrans-583
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is selected with right-click. |'
  id: totrans-586
  prefs: []
  type: TYPE_TB
- en: '| `onRowDblclick` |'
  id: totrans-587
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is double clicked. |'
  id: totrans-590
  prefs: []
  type: TYPE_TB
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/treetable](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/treetable).'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: Managing events with Schedule
  id: totrans-593
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Schedule is a full-sized drag-and-drop event calendar based on a `FullCalendar`
    jQuery plugin. The events of Schedule should be formed as an array and defined
    using the `events` property. The Schedule component depends on the `FullCalendar`
    library, so it requires the following resources in your page as listed:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: The Schedule component is embedded in a web page using a style sheet and JavaScript
    files. So, we need to include the `FullCalendar` library's style sheet (`.css`)
    and JavaScript (`.js`) files in the HTML page's `head` section.
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `jQuery` and `Moment.js` libraries as mandatory libraries for a full calendar.
    These two libraries must be loaded before loading the `FullCalendar` library's
    JavaScript file.
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hence, we included `FullCalendar` and other dependent resources in a root `index.html`
    file as follows:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'A basic example of the Schedule component defined for the entire month would
    be written as follows:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Basically, all kinds of events have properties such as title, duration (start
    and end date), type of day (full/partial day), and so on. So, the event class
    would be defined as follows:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The data for Schedule events should be defined exactly in the preceding format
    as a prototype. But in real time, data is fetched using a remote service call
    and updated in the Schedule UI immediately whenever there are any changes in the
    events. The event service, which is used to retrieve data from a data source (in
    this case, it retrieves data from a JSON events file) using HTTP module and observables,
    is defined as follows:'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The injected service gets the data during the initial load of a web page. The
    component class has to define the subscription for observable as shown here:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The following screenshot shows a snapshot result of the embedded Schedule component
    display as an example:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/35e1cead-b355-417d-8ea0-066647e169bf.png)'
  id: totrans-608
  prefs: []
  type: TYPE_IMG
- en: As per the preceding snapshot, the header is displayed with date (month and
    year), the today label, and month navigation controls. The main body or content
    area contains each day in the month and events on the specific days with a blue
    covered area.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: Header customization
  id: totrans-610
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous snapshot, we observed the Schedule content area along with
    default header text and controls. The default header configuration object for
    the Schedule element would be written as follows:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The mentioned default header display is modified through the `header` property,
    which holds the header configuration object as shown here:'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Let''s define the navigation controls on the left-hand side, title in the middle,
    and type of view (month, week, and day) on the right-hand side to represent it
    as a configuration object:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The following screenshot shows a snapshot result of the customized Schedule''s
    header as an example:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5ef78c40-0dff-4d5d-9910-509454446dd2.png)'
  id: totrans-618
  prefs: []
  type: TYPE_IMG
- en: Beyond basic usage - advanced features
  id: totrans-619
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apart from the mentioned regular features, the Schedule component also supports
    lazy loading through the `onViewRender` event callback, which will be invoked
    when the new date range is rendered or when the view type changes. The Schedule
    component with lazy loading event callback invocation would be written as follows:'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The component class defines a lazy loading callback to retrieve the events
    data on-demand and would be written as follows:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The component also supports localization through the `locale` property. For
    example, German labels are represented by setting `locale="de"`. The localized
    labels should be defined in a component similar to calendar.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: The UI is updated automatically when there is any change in the events data.
    This is very helpful for CRUD operations implementation on Schedule.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: Events and methods
  id: totrans-626
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Schedule component provides many event callbacks on click, mouse, resize,
    and drag and drop user actions as listed here:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Description** |'
  id: totrans-628
  prefs: []
  type: TYPE_TB
- en: '| `onDayClick` | Triggered when the user clicks on a day |'
  id: totrans-629
  prefs: []
  type: TYPE_TB
- en: '| `onEventClick` | Triggered when the user clicks an event |'
  id: totrans-630
  prefs: []
  type: TYPE_TB
- en: '| `onEventMouseover` | Triggered when the user mouses over an event |'
  id: totrans-631
  prefs: []
  type: TYPE_TB
- en: '| `onEventMouseout` | Triggered when the user mouses out of an event |'
  id: totrans-632
  prefs: []
  type: TYPE_TB
- en: '| `onEventDragStart` | Triggered when event dragging begins |'
  id: totrans-633
  prefs: []
  type: TYPE_TB
- en: '| `onEventDragStop` | Triggered when event dragging stops |'
  id: totrans-634
  prefs: []
  type: TYPE_TB
- en: '| `onEventDrop` | Triggered when dragging stops and the event has moved to
    a *different* day/time |'
  id: totrans-635
  prefs: []
  type: TYPE_TB
- en: '| `onEventResizeStart` | Triggered when event resizing begins |'
  id: totrans-636
  prefs: []
  type: TYPE_TB
- en: '| `onEventResizeStop` | Triggered when event resizing stops |'
  id: totrans-637
  prefs: []
  type: TYPE_TB
- en: '| `onEventResize` | Triggered when resizing stops and the event has changed
    in duration |'
  id: totrans-638
  prefs: []
  type: TYPE_TB
- en: '| `onViewRender` | Triggered when a new date-range is rendered, or when the
    view type switches |'
  id: totrans-639
  prefs: []
  type: TYPE_TB
- en: '| `onViewDestroy` | Triggered when a rendered date-range needs to be torn down
    |'
  id: totrans-640
  prefs: []
  type: TYPE_TB
- en: '| `onDrop` | Triggered when a draggable has been dropped onto the Schedule
    |'
  id: totrans-641
  prefs: []
  type: TYPE_TB
- en: 'Also, it provides many API methods to handle different use cases as shown here:'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-643
  prefs: []
  type: TYPE_TB
- en: '| `prev()` | - | Moves the Schedule one step back (either by a month, week,
    or day) |'
  id: totrans-644
  prefs: []
  type: TYPE_TB
- en: '| `next()` | - | Moves the Schedule one step forward (either by a month, week,
    or day) |'
  id: totrans-645
  prefs: []
  type: TYPE_TB
- en: '| `prevYear()` | - | Moves the Schedule back one year |'
  id: totrans-646
  prefs: []
  type: TYPE_TB
- en: '| `nextYear()` | - | Moves the Schedule forward one year |'
  id: totrans-647
  prefs: []
  type: TYPE_TB
- en: '| `today()` | - | Moves the Schedule to the current date |'
  id: totrans-648
  prefs: []
  type: TYPE_TB
- en: '| `gotoDate(date)` | `date`: Date to navigate | Moves the Schedule to an arbitrary
    date |'
  id: totrans-649
  prefs: []
  type: TYPE_TB
- en: '| `incrementDate(duration)` | `duration`: Duration to add to current date |
    Moves the Schedule forward/backward an arbitrary amount of time |'
  id: totrans-650
  prefs: []
  type: TYPE_TB
- en: '| `getDate()` | - | Returns a moment for the current date of the calendar |'
  id: totrans-651
  prefs: []
  type: TYPE_TB
- en: '| `changeView(viewName)` | `viewName`: A valid view string to change to | Immediately
    switches to a different view |'
  id: totrans-652
  prefs: []
  type: TYPE_TB
- en: 'The preceding API methods will give full control on Schedule. There are many
    use cases, where these method calls are really helpful. For example, the Schedule''s
    next view (month, week, or day) is accessed through the `.next()` method as shown
    here:'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The component class defines the click event callback which will invoke next
    day, week, or month as shown here:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/schedule](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/schedule).'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-659
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point of time, you will have an overview of all data iteration components
    and their most used features such as selecting rows, sorting, pagination, filtering
    data, and so on. Next, we were able to display (hierarchical) data in a tabular,
    grid, and list formats. Furthermore, you know how to achieve resizing, reordering,
    toggling, and grouping of columns, customizing of cell content in DataTable and
    visualizing the data with Tree and TreeTable components. In the next chapter,
    you will see amazing overlays such as dialog, confirm dialog, overlay panel, and
    notification components, such as growl and messages along with various features.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
