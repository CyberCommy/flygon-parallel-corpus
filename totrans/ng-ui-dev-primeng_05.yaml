- en: Data Iteration Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover the basic and advanced features to visualize
    data with data iteration components provided by PrimeNG, which include DataTable,
    DataList, PickList, OrderList, DataGrid, DataScroller, Tree, and TreeTable. We
    will start with the DataTable component that offers extensive features, such as
    filtering, sorting, pagination, selection, reordering, column resizing, toggling,
    and many more. We will then focus on various other components, such as DataList,
    that render data in a listed format and provide data selection through the listed
    sets such as PickList and OrderList.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we will also see two more data variation components such as DataGrid
    that arranges large datasets in the grid-oriented layout and DataScroller that
    lazily loads data according to the page scroll done by the user. The Tree and
    TreeTable components list data in a tree format, and they are mostly based on
    the same data model. At the end of this chapter, we will discuss a sophisticated
    component called Schedule to visualize calendar data, and we will demonstrate
    its usage with its lazy loading feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Multi feature DataTable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting rows in DataTable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorting, filtering, and paginating data in DataTable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing cell content with templating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resizing, reordering, and toggling columns in DataTable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-cell editing with DataTable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making DataTable responsive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using column and row grouping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling tons of data with lazy DataTable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Row expansion by providing row template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting data in the CSV format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataTable events and methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing data with DataList
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing data with PickList
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing data with OrderList
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grid-organized data with DataGrid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On demand data loading with DataScroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing data with Tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing data with TreeTable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing events with Schedule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi feature DataTable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DataTable displays data in a tabular format. The table is an arrangement of
    data in rows and columns, or possibly in a more complex structure. It requires
    a value as an array of objects bound through the `value` property and columns
    defined with the `p-column` component. A basic example of the component with browser
    details to display in the list format would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `browsers` array consists of objects with `engine`, `browser`, `platform`,
    and `grade` properties. The `field` property will map the model object property,
    whereas the `header` property is used to display a column''s heading. In real-time
    applications, we use services to fetch the data from remote data sources. In this
    case, service is created as an injectable service and it uses the HTTP module
    to fetch data. The browser service would be defined with observables as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class has to define an array of `browser` objects (or items)
    for the `value` property. The items are retrieved from the remote service call
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result presented in a tabular format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cab55298-f1b0-47cc-b166-6effb9bb9ef1.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, we can observe alternative colors for the rows. This
    is a theme-specific behavior.
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG 4.1 handles the change detection feature in a more flexible manner.
  prefs: []
  type: TYPE_NORMAL
- en: Change detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DataTable uses either setter-based checking or **ngDoCheck** to realize if the
    underlying data has changed to update the **user interface** (**UI**). This is
    configured using the `immutable` property. If you enabled (default) it, then the
    setter-based detection is utilized so your data changes such as adding or removing
    a record should always create a new array reference instead of manipulating an
    existing array. This constraint is due to Angular and does not trigger setters
    if the reference does not change. In this case, use slice instead of splice when
    removing an item or use the spread operator instead of the `push` method when
    adding an item.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, setting the `immutable` property to `false` removes this
    restriction using ngDoCheck with IterableDiffers to listen to changes without
    the need to create a new reference of data. The setter-based method is faster;
    however, both methods can be used depending on your preference.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding use case, the columns are defined in a static representation
    using the `p-column` tag. There is another approach to represent columns inside
    a data table via dynamic columns. The table columns need to be instantiated as
    an array. The array will be iterated using the `ngFor` directive as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `cols` property describes the given column options within the component
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of dynamic columns in a tabular
    format as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a3408625-374d-4dc8-9d64-fa316e6432df.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, the columns are dynamically added or removed using
    a multiselect drop-down menu. For demonstration purposes, we removed the Version
    column field from the table.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting rows in DataTable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to perform CRUD operations on the component, there is a need for table
    row selection. PrimeNG supports various kinds of selections such as single, multiple,
    radio, and checkbox with different event callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: Single selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In single selection, the row is selected by a click event on a specific row.
    This selection is enabled by setting `selectionMode` as the `single` and `selection`
    property to hold the selected row. By default, the row is unselected with the
    help of the Meta key *(Ctrl* key for Windows or *Command* key for macOS). The
    row can be unselected without pressing the Meta key just by disabling the `metaKeySelection`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with a single selection feature to select a specific browser
    record would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class has to define the `selectedBrower` object to store the
    selected item. The following screenshot shows a snapshot result with single selection
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb577df9-4538-4189-99c3-86c3eef404ae.png)'
  prefs: []
  type: TYPE_IMG
- en: To notify that single selection has worked or not, we displayed the selected
    record information in a footer section. The footer data should always be in sync
    with the selected record.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In multiple selection, the row is selected by a click event on a specific row
    and multiple rows can be selected using the Meta key or *Shift* key. This selection
    is enabled by setting `selectionMode` as `multiple` and the `selection` property
    to hold selected rows in the form of an array. By default, the row is unselected
    with the help of the Meta key *(Ctrl* key for Windows or *Command* key for macOS).
    The row can be unselected without the help of Meta key just by disabling the `metaKeySelection`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with the multiple selection feature to select multiple browser
    records would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class has to define the `selectedBrowers` array object to store
    the selected records. The following screenshot shows a snapshot result with multiple
    selection as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1d334d7f-706a-4aa3-bdb5-bb6eabcc5913.png)'
  prefs: []
  type: TYPE_IMG
- en: To notify that multiple selection has worked or not, we displayed the selected
    records information in a footer section. The footer data should always be in sync
    with selected records.
  prefs: []
  type: TYPE_NORMAL
- en: Both single and multiple selection support four event callbacks, `onRowClick`,
    `onRowDblClick`, `onRowSelect`, and `onRowUnselect`, which carry selected data
    information within an event object. Refer to the events section for more details.
  prefs: []
  type: TYPE_NORMAL
- en: RadioButton selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The single selection can be achieved through radio buttons, which exist on each
    row instead of using the click event on a specific row. The selection is enabled
    by setting `selectionMode` as `single` on a column level (remember that previously
    mentioned plain selection works on a table level) and the `selection` property
    to hold the selected row as an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with the radio selection feature to select specific browser records
    would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with a radio button selection
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/495cc0c0-524b-4bee-b61e-31c6d095a8bc.png)'
  prefs: []
  type: TYPE_IMG
- en: As of now, there is no unselected feature for radio button selection (that is,
    the row is unselected once you select another row).
  prefs: []
  type: TYPE_NORMAL
- en: Checkbox selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The multiple selection can be achieved through checkboxes, which exist on each
    row instead of using a click event on a specific row. The selection is enabled
    by setting `selectionMode` as `multiple` on a column level (remember that plain
    selection provides this on a table level) and the `selection` property to hold
    the selected rows as an array of objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with the checkbox selection feature to select multiple browser
    records would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with a checkbox selection
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aa4648a3-d61b-4d76-90d5-e7bead2a1093.png)'
  prefs: []
  type: TYPE_IMG
- en: In this selection, the selected records can be unselected by unselecting checkboxes.
    The checkbox selection supports the `onHeaderCheckboxToggle` event while toggling
    the header checkbox. Refer to the events section for more details.
  prefs: []
  type: TYPE_NORMAL
- en: When selection is enabled, use the `dataKey` attribute to avoid deep checking
    when comparing objects. If you cannot provide `dataKey`, use the `compareSelectionBy`
    property as "equals," which uses a reference for comparison instead of the default
    "deepEquals" comparison. The deepEquals comparison is not a good idea (especially
    for huge data) in terms of performance because it checks all the properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the value of the `browserId` property could be chosen for `dataKey`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-dataTable dataKey="browserId" selection="true">'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: </p-dataTable>`
  prefs: []
  type: TYPE_NORMAL
- en: Sorting, filtering, and paginating data in DataTable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sorting, filtering, and pagination features are very crucial features for any
    kind of data iteration component. These features are going to be very helpful
    while working on large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Sorting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The sorting feature is provided by enabling the `sortable` property on each
    column. By default, the component supports single sorting (`sortMode="single"`).
    We can achieve multi sorting by setting `sortMode="multiple"`. The DataTable component
    with the sorting feature to sort browser records in either ascending or descending
    order would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with a single sorting on a
    limited number of records as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a442c658-24dd-48c5-ae38-b47eab29d6ba.png)'
  prefs: []
  type: TYPE_IMG
- en: We need to use the Meta key *(Ctrl* for Windows and *Command* key for macOS)
    for the multi column sorting feature. The custom sorting is also supported using
    the `sortFunction` function instead of regular sorting on the `field` property.
    The sorting feature also provides the `onSort` event callback, which will be invoked
    on sorting a column. Refer to the event details section for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The filtering feature is provided by enabling the `filter` property on each
    column. The filter can be applied on a column level and whole table level as well.
    The table level filtering is also called **global filtering**. To enable global
    filter, the local template variable of input need to be referred in the `globalFilter`
    property. The `keyup` event of global filter input will be listened to for filtering.
  prefs: []
  type: TYPE_NORMAL
- en: 'The filter feature supports optional filter properties such as `filterMatchMode`
    to provide different types of a text search. It has five filter match modes such
    as `startsWith`, `contains`, `endsWith`, `equals`, and `in` and the default match
    mode is `startsWith`, whereas the `filterPlaceholder` property is used to display
    the helper place holder text. The DataTable component with the filtering feature
    on table columns would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The filtering feature is normally applied on a plain input component, but this
    behavior can also be customized by providing a filter on various other inputs
    such as Spinner, Slider, DropDown, and MultiSelect components. The custom input
    filter calls a `filter` function with three parameters. The signature of the `filter`
    function would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with a filtering feature on
    a limited number of records as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e53d5ecf-0d93-428e-9b70-13428f513f0c.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, we can observe that the data is filtered by a rating
    slider and multi select grade field. The filtering feature also provides the `onFilter`
    event callback, which will be invoked on filtering an input. Refer to the event
    details section for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Pagination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the table is backed by huge datasets, then displaying all of the data on
    a single page looks awkward and it is going to be a nightmare for the user when
    scrolling millions of records. The DataTable component supports a pagination feature
    just by enabling the `paginator` property and the `rows` option to display the
    number of records in the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the mentioned required features, it also supports various optional
    features such as:'
  prefs: []
  type: TYPE_NORMAL
- en: The `pageLinks` property shows the number of page link displayed at a time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `rowsPerPageOptions` property has a provision to change the number of rows
    to be displayed (comma separated values as an array) in a single page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `totalRecords` property displays the logical records which are useful for
    the lazy loading feature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `paginatorPosition` property displays the paginator with possible values
    of `top`, `bottom`, and `both`. The default position of paginator is `bottom`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The pagination example, which is used to display a lot of browser''s information,
    would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with a pagination feature
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/900610bd-c5df-41bc-9c74-f433a8db745f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also use an external paginator using the Paginator component apart from
    the one built into DataTable. The pagination feature also provides the `onPage`
    event callback (whereas the external paginator provides the `onPageChange` callback),
    which will be invoked on pagination. Refer to the event details section for more
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the cell content with templating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the value of the `field` attribute of each column is used to display
    the table content. The content can also be customized in every possible way with
    the help of the `ng-template` template tag, which can be applied on header, body,
    and footer levels. The `template` variable passed to the `ng-template` template
    is used for column definition and row data is used by the `rowData` property.
    There is also an optional row index available through the `rowIndex` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ng-template` template will have the `pTemplate` directive, which holds
    the type of customization with the possible values of `header`, `body`, and `footer`.
    The customized browser content is displayed with various text colors and row data
    information with a button selection as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we customized the table content to display different
    colors based on grades, each row with button selection using body template and
    button at the header using a header template. The following screenshot shows a
    snapshot result with customized content display as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/22ba4594-3a72-4773-a293-2cf44be9615f.png)'
  prefs: []
  type: TYPE_IMG
- en: As per the preceding snapshot, the `ng-template` template tag is used with different
    types to provide a full flexibility on customization.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing, reordering, and toggling columns in DataTable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, all the columns of the component are in static representation without
    interaction. The component provides resizing, reordering, and toggling features
    for columns.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Columns can be resized using drag-and-drop behavior just by setting the `resizableColumns`
    property to `true`. There are two types of resize modes available. One is the
    `fit` mode and the other one is the `expand` mode. The default one is the `fit`
    mode. In this mode, when columns are resized, the total width of the table will
    not be changed; whereas in the `expand` mode, the total width of table will be
    changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resizing feature with the `expand` mode would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with the `expand` resize mode
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/26c5545b-f4c5-442a-8f27-967a8ea38428.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, we can observe that both Engine and Grade columns
    are resized considering its content size to optimize the screen area. Because
    of the `expand` mode, the total width of the table is also changed. It can also
    provides the `onColumnResize` event callback which passes the resized column header
    information when the column gets resized. Refer to the event details section for
    more information.
  prefs: []
  type: TYPE_NORMAL
- en: Reordering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally, the order of table columns will appear exactly as it is defined within
    the component. There is an option to reorder the columns using the drag-and-drop
    feature just by setting the `reorderableColumns` property to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reordering feature would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with a reordering feature
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d950ccd2-0ffb-4bab-aa79-c8a9a96987d4.png)'
  prefs: []
  type: TYPE_IMG
- en: As per the preceding snapshot, both Platform and Browser column fields are mutually
    reordered (that is, the initial column order is `engine`, `browser`, `platform`,
    and `grade`. After reordering, the column's order will be `engine`, `platform`,
    `browser`, and `grade`). It also provides the `onColReorder` event callback whenever
    the column gets reordered. Refer to the events section for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Toggling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time there will not be enough screen space (or area) to display
    all the columns. In this case, toggling of table columns would be really helpful
    to save available screen space. Because of this feature, only mandatory or primary
    columns can be shown. This feature can be achieved by defining MultiSelect components
    on a dynamic column table in order to toggle the columns. Refer to the dynamic
    columns example which was mentioned at the beginning of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In-cell editing with DataTable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the component''s content will be in read-only mode (that is, we
    can''t edit the content). An UI will be more interactive with the cell editing
    feature. The cell editing feature is enabled just by setting the `editable` property
    on both table and column levels. When a cell is clicked on, the edit mode will
    be activated. Clicking on the outside of a cell or hitting the *Enter* key switches
    back to the view mode after updating the value. The cell editing feature would
    be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with the cell editing feature
    on the `engine` field as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/921af400-6547-4e89-9417-004e2bc3b29e.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, the editable mode enables the input component on the click of a
    particular cell. We can also use other input components such as DropDown, MultiSelect,
    Calendar, and so on, for a customized input editing. In the preceding example,
    we can edit the cells using Input and Dropdown components.
  prefs: []
  type: TYPE_NORMAL
- en: Making DataTable responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The responsive feature is very useful for both web and mobile apps. The component
    columns are displayed as stacked in a responsive mode if the screen size is smaller
    than a certain breakpoint value. This feature is enabled by setting the `responsive`
    property as `true`. This stacked behavior can also be achieved manually (irrespective
    of the screen size) by enabling the `stacked` property (that is, `stacked="true"`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The responsive mode feature of the Table component would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class defines the `toggle` method, which is used to toggle the
    responsive behavior as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the DataTable component
    with stacked columns as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3378e8e2-6fe8-4f3a-abf8-13caf0270c33.png)'
  prefs: []
  type: TYPE_IMG
- en: In this use case, the columns are displayed in a stacked manner by manually
    toggling the button, which is placed externally to the table. The responsive mode
    or stacked behavior can also be achieved by reducing or minimizing the screen
    size.
  prefs: []
  type: TYPE_NORMAL
- en: Using column and row grouping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DataTable component provides grouping on both column and row level.
  prefs: []
  type: TYPE_NORMAL
- en: Column grouping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Columns can be grouped at the header and footer area using `p-headerColumnGroup`
    and `p-footerColumnGroup` tags, which define the array of columns using `colspan`
    and `rowspan` properties. The table rows are defined using the `p-row` tag, which
    holds the column components. The component with column grouping would be written
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the column grouping feature
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b3c4eef3-4848-49f4-a753-4540361e5adc.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, we can observe that the browser-specific information
    is categorized with the help of column grouping.
  prefs: []
  type: TYPE_NORMAL
- en: Row grouping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the table rows are individual and displayed one by one to represent
    unique records. In many cases, it is required to group multiple rows as one row.
  prefs: []
  type: TYPE_NORMAL
- en: Expandable row groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The rows can be grouped on a specific field in such a way that rows can be expanded
    and collapsed using row expander feature. This feature is enabled by setting `rowGroupMode="subheader"`,
    `expandableRowGroups="true"`, and `groupField="browser"`. `groupField` is set
    to a specific categorized column.
  prefs: []
  type: TYPE_NORMAL
- en: 'The row grouping feature with expandable row group option would be written
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the expandable row grouping
    feature as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/53bdc307-5891-4945-973e-21b59329cf01.png)'
  prefs: []
  type: TYPE_IMG
- en: In this use case, we expanded Firefox version 3 group to see all the browser
    details over time.
  prefs: []
  type: TYPE_NORMAL
- en: Sub-headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All related items can be grouped under one sub-group using the sub-headers feature.
    This use case is similar to expanded row groups but these sub-headers cannot be
    collapsed. This behavior is enabled by setting `rowGroupMode="subheader"` and
    `groupField="engine"`. The `groupField` property is set to a specific categorized
    column.
  prefs: []
  type: TYPE_NORMAL
- en: 'The row grouping feature with the sub-header option would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the table with the sub-header
    grouping feature as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/22b2b37a-eee9-4b12-b0f9-dd2ea123205a.png)The sub-header grouping
    feature'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding use case, all browser details are grouped based on a unique
    browser engine as a sub-header.
  prefs: []
  type: TYPE_NORMAL
- en: RowSpan groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The rows can be grouped based on the `sortField` property. This feature is
    enabled by setting the `rowGroupMode` property value to `rowspan` (that is, `rowGroupMode="rowspan"`).
    An example of row grouping with row span would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the component with the
    row span grouping feature as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/791fe8fc-8f0d-432e-a5ad-7f1236c98d59.png)The row span grouping feature'
  prefs: []
  type: TYPE_NORMAL
- en: In this version of row grouping, the browser's `engine` field is used for row
    grouping which spans across all of its related items.
  prefs: []
  type: TYPE_NORMAL
- en: Handling tons of data with lazy DataTable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lazy loading is a very crucial feature to handle huge datasets. This feature
    provides the loading of data chunks through paging, sorting, and filtering operations
    instead of loading all the data at once. The lazy loading is enabled by setting
    the `lazy` mode (`lazy="true"`) and carrying user actions using `onLazyLoad` callback
    with the the event object as a parameter. The event object holds the pagination,
    sorting, and filter data.
  prefs: []
  type: TYPE_NORMAL
- en: It is also required to display a logical number of records to be displayed for
    pagination configuration using projection query. This is needed because we can
    retrieve only the current page data in the lazy loading. There is no information
    available related to the remaining records. Hence, it is required to show the
    paginator links based on actual records in the data source. This can be achieved
    through the `totalRecords` property on a Table component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with lazy loading feature would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class defines lazy loading callback to retrieve data on demand
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'As a demonstration of lazy loading, we used a pagination operation for retrieving
    the data. We can also use sorting and filtering features. The following screenshot
    shows a snapshot result to illustrate as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a80bbff2-1e08-434a-9115-0dcfc73c468e.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, we can clearly observe that the information on page
    4 is retrieved dynamically from the remote data source. Refer to the events section
    for more details about the lazy loading event callback.
  prefs: []
  type: TYPE_NORMAL
- en: Always prefer lazy loading for large datasets to improve the performance.
  prefs: []
  type: TYPE_NORMAL
- en: Row expansion by providing a row template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many cases, it is not possible to accommodate all of the data in the table.
    The secondary or additional information of table data needs to be populated in
    a different representation. The row expansion features allows displaying detailed
    content for a particular row (that is, display data in a separate block which
    will appear on request). To use this feature, enable the `expandableRows` property
    and add an expander column using the `expander` property as a separate column
    along with regular columns in order to toggle the row. To declare the expanded
    content, provide a `pTemplate` directive with `rowexpansion` as the value. The
    local template reference variable from `ng-template` is used to access the table
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component with the row expansion feature to display full details of a browser
    would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If required, the expanded rows can be stored in an array variable inside the
    component class using the `expandedRows` property. The following screenshot shows
    a snapshot result of a component with the row expansion feature as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/315ca686-6d19-4e77-b737-4038ecd4d17c.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, multiple rows can be expanded at once. We can make a strict single
    row expansion using the `rowExpandMode` property by setting it as `single`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can apply the row expansion behavior for grouped tables as well:'
  prefs: []
  type: TYPE_NORMAL
- en: The component provides an `expandableRowGroups` Boolean property which is used
    to create the icon to toggle the row groups.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, all the rows will be expanded. The `expandedRowGroups` property
    is used to hold the row data instance to expand specific row groups by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method named `toggleRow` is provided in order to toggle table rows with
    the row data.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting data in CSV format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The data can be viewed in table format in online mode at any time. But, there
    is a need of data in an offline mode. Also in many cases, we need to take huge
    data reports from the website. PrimeNG DataTable can be exported in CSV format
    using the `exportCSV()` API method. Button components placed inside or outside
    of the table can trigger this method for downloading the data in the CSV format.
    The component with export API method call would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: By default, exported CSV uses a comma (`,`) operator as a separator. But, this
    behavior can be changed using the `csvSeparator` property on a DataTable component.
  prefs: []
  type: TYPE_NORMAL
- en: DataTable events and methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The DataTable component provides many event callbacks and methods with respect
    to each feature. The following table lists out all the table event callbacks with
    name, parameter details, and description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `onRowClick` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Selected data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is clicked. |'
  prefs: []
  type: TYPE_TB
- en: '| `onRowSelect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Selected data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.type`: Type of selection, valid values are `row`, `radiobutton`, and
    `checkbox`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `onRowUnselect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Unselected data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.type`: Type of unselection, valid values are `row` and `checkbox`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is unselected with the Meta key. |'
  prefs: []
  type: TYPE_TB
- en: '| `onRowDblclick` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Selected data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is selected with double-click. |'
  prefs: []
  type: TYPE_TB
- en: '| `onHeaderCheckboxToggle` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.checked`: State of the header checkbox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when state of header checkbox changes. |'
  prefs: []
  type: TYPE_TB
- en: '| `onContextMenuSelect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Selected data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is selected with right click. |'
  prefs: []
  type: TYPE_TB
- en: '| `onColResize` |'
  prefs: []
  type: TYPE_TB
- en: '`event.element`: Resized column header'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.delta`: Change of width in number of pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a column is resized. |'
  prefs: []
  type: TYPE_TB
- en: '| `onColReorder` |'
  prefs: []
  type: TYPE_TB
- en: '`event.dragIndex`: Index of the dragged column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.dropIndex`: Index of the dropped column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.columns`: Columns array after reorder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a column is reordered. |'
  prefs: []
  type: TYPE_TB
- en: '| `onLazyLoad` |'
  prefs: []
  type: TYPE_TB
- en: '`event.first`: First row offset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.rows`: Number of rows per page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.sortField`: Field name to sort with'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.sortOrder`: Sort order as number, `1` for asc and `-1` for desc'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filters`: the `FilterMetadata` object having field as key and filter value,
    filter `matchMode` as value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when paging, sorting, or filtering happens in lazy mode.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `onEditInit` |'
  prefs: []
  type: TYPE_TB
- en: '`event.column`: Column object of the cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Row data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a cell switches to the edit mode. |'
  prefs: []
  type: TYPE_TB
- en: '| `onEdit` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.column`: Column object of the cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Row data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.index`: Row index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when cell data is being edited. |'
  prefs: []
  type: TYPE_TB
- en: '| `onEditComplete` |'
  prefs: []
  type: TYPE_TB
- en: '`event.column`: Column object of the cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Row data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.index`: Row index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when cell edit is completed (Supported for the *Enter*
    key only). |'
  prefs: []
  type: TYPE_TB
- en: '| `onEditCancel` |'
  prefs: []
  type: TYPE_TB
- en: '`event.column`: Column object of the cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.data`: Row data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.index`: Row index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when cell edit is cancelled with the *Esc* key. |'
  prefs: []
  type: TYPE_TB
- en: '| `onPage` |'
  prefs: []
  type: TYPE_TB
- en: '`event.first`: Index of first record in page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.rows`: Number of rows on the page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when pagination occurs. |'
  prefs: []
  type: TYPE_TB
- en: '| `onSort` |'
  prefs: []
  type: TYPE_TB
- en: '`event.field`: Field name of the sorted column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.order`: Sort order as 1 or -1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.multisortmeta`: Sort metadata in multi sort mode. See multiple sorting
    section for the structure of this object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a column gets sorted. |'
  prefs: []
  type: TYPE_TB
- en: '| `onFilter` | `event.filters`: Filters object having a `field` as the property
    key and an object with value, `matchMode` as the property value. | Callback to
    invoke when data is filtered. |'
  prefs: []
  type: TYPE_TB
- en: '| `onRowExpand` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: Row data to expand'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is expanded. |'
  prefs: []
  type: TYPE_TB
- en: '| `onRowCollapse` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: Row data to collapse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is collapsed. |'
  prefs: []
  type: TYPE_TB
- en: '| `onRowGroupExpand` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group`: Value of the group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row group is expanded. |'
  prefs: []
  type: TYPE_TB
- en: '| `onRowGroupCollapse` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group`: Value of the group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row group is collapsed. |'
  prefs: []
  type: TYPE_TB
- en: 'The following table lists out frequently used table methods with name, parameters,
    and description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `reset` | - | Resets sort, filter, and paginator state |'
  prefs: []
  type: TYPE_TB
- en: '| `exportCSV` | - | Exports the data in CSV format |'
  prefs: []
  type: TYPE_TB
- en: '| `toggleRow` | `data` | Toggles row expansion for a given row data |'
  prefs: []
  type: TYPE_TB
- en: PrimeNG version 4.0.1 reintroduced back the `rowTrackBy` option for iteration
    components such as DataTable, DataGrid, and DataList to improve the DOM optimizations.
    That is, the DOM insertions and updates of each row are optimized by delegating
    the decision to the `ngForTrackBy` directive. In PrimeNG, this will be achieved
    through the `rowTrackBy` property. If the property is not defined, by default,
    the algorithm checks for an object identity. For example, the browser row is identified
    by ID property as
  prefs: []
  type: TYPE_NORMAL
- en: '`trackById(index, browser) { return browser.id; }`.'
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datatable](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datatable).'
  prefs: []
  type: TYPE_NORMAL
- en: Listing data with DataList
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The DataList component is used to display the data in a list layout. It requires
    a collection of items as its value and `ng-template` to display content where
    each item can be accessed using a local template variable. This template also
    provides an index of each item using a variable represented by the `let-i` expression.
    A basic example of the DataList component with all browser details to display
    in a list format would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of browser details needs to be retrieved from external services. In
    this case, the `BrowserService` service will be injected into the component class
    to retrieve the browser information. We used observables to get the data using
    the HTTP module. The list data will be retrieved on page load as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We limited the number of records to five for demonstration purposes. The following
    screenshot shows a snapshot result of the DataList component in a list format
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/08a0bc0e-a8e6-499a-83f8-ba98966c0d4a.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding snapshot just displays the data in a tabular format. In the next
    section, you can find many more features to make a data list a powerful component.
  prefs: []
  type: TYPE_NORMAL
- en: Facets and pagination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DataList component supports facets such as header and footer for content
    using `p-header` and `p-footer` tags. In order to improve the user experience
    on large datasets, it supports the pagination feature. This feature is enabled
    by setting the `paginator` property as `true` and it sets a number of rows to
    be displayed using the `rows` property. Apart from these mandatory settings, there
    are some optional customized settings for pagination. Among all those optional
    properties, `paginatorPosition` is used to display the paginator either in `top`,
    `bottom`, or `both` positions; `rowsPerPageOptions` is used to display a drop-down
    with a possible number of rows to be displayed in a page, and `emptyMessage` is
    used to display a data list body when no records exist. Pagination also supports
    the `onPage` event callback, which will be invoked on page navigation. Refer to
    the events section for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The DataList component with facets and pagination features to display browser
    information would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with pagination as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/159ed065-ba9d-4de1-90db-3f45ecf1a3d7.png)'
  prefs: []
  type: TYPE_IMG
- en: All the pagination controls are customizable with the options provided in the
    DataList component.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lazy loading is a very helpful feature to handle large datasets. It will not
    load all the data at once but as small chunks based on user demand. DataList supports
    lazy loading on pagination interaction. This feature is available by enabling
    the `lazy` attribute (that is, `lazy="true"`) and also by invoking the `onLazyLoad`
    callback to retrieve the data from the remote data sources. Refer to the events
    section for the signature and more details.
  prefs: []
  type: TYPE_NORMAL
- en: The lazy load event object provides the first record in the page and the number
    of rows in the current page to get the next set of data. Also you should provide
    the total records by projection query for pagination configuration. This is useful
    to display pagination links based on the total number of records available even
    though that many records are not available on page load (that is, only current
    page records exist in a lazy mode).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example of the lazy loading feature for a DataList component
    with a basic prototype as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class has to define the lazy loading event callback to retrieve
    the records based on user request (in this case, it would be pagination) as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, you can observe that both the `first` and `rows`
    properties of an event are helpful for retrieving the next bunch of records. Based
    on the `rows` attribute, it tries to fetch the next `rows` number of records on
    every instance.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The component provides two event callbacks, one for pagination and the other
    one for lazy loading. Both events provide two arguments to get the first record
    and number of rows present on the page. The lazy loading event is invoked on pagination,
    filtering, and sorting functionalities by enabling a lazy mode.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `onLazyLoad` |'
  prefs: []
  type: TYPE_TB
- en: '`event.first`: First row offset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.rows`: Number of rows per page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when paging, sorting, or filtering happens in a lazy mode.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `onPage` |'
  prefs: []
  type: TYPE_TB
- en: '`event.first`: Index of the first record in page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.rows`: Number of rows on the page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when pagination occurs. |'
  prefs: []
  type: TYPE_TB
- en: It provides many other features such as facets for header and footer display
    (`p-header` and `p-footer`), pagination to navigate between multiple pages, and
    a lazy loading feature for retrieving the data on demand.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datalist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datalist).'
  prefs: []
  type: TYPE_NORMAL
- en: Listing data with PickList
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PickList component is used to move items between two different lists. You
    can also reorder the items within each list. This provides the overall status
    of selected items. The items can be moved/reordered using either default button
    controls or drag and drop behavior. PickList requires two arrays, one is used
    for the source list and other one is for the target list. The `ng-template` template
    tag is used to display the item's content where each item in the array can be
    accessed using a local `ng-template` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of the PickList component with country information would be
    written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the component class, let''s define a source list for available data and
    the target as an empty list to indicate that there is no selection yet. The country
    service needs to be injected to access the country information from external resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, both source and target panels are available with default `width`
    and `height` properties. But this default behavior can be customized using `sourceStyle`
    and `targetStyle` properties. The following screenshot shows a snapshot result
    of an initial PickList as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1b53673b-98fa-4b8a-a683-d87d50f81115.png)'
  prefs: []
  type: TYPE_IMG
- en: The PickList component provides six event callbacks which are used for moving
    items between two lists and ordering the items in both source and target areas.
    Among these six callbacks, four of them are used for moving items, `onMoveToTarget`,
    `onMoveToSource`, `onMoveAllToSource`, and `onMoveAllToSource` whereas ordering
    items is performed by `onSourceReorder` and `onTargetReorder`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component can be customized from its default behavior in different ways
    as mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: Headers can be customized using headers `sourceHeader` and `targetHeader` as
    properties.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web page will become responsive using the `responsive` property (`responsive="true"`),
    which adjusts the button controls based on screen size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default multiple selection is prevented (with the help of the Meta key)
    by disabling the `metaKeySelection` attribute (`metaKeySelection="false"`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The visibility of button controls is controlled through `showSourceControls`
    and `showTargetControls` properties. For example, `showSourceControls="false"`
    and `showTargetControls="false"`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PrimeNG 4.1 supports the filtering feature on item fields as a new addition
    using the `filterBy` property. Multiple fields can be filtered by placing the
    comma separated fields in the `filterBy` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The newer 4.1 version also supports the drag-and-drop feature (within the same
    list or across lists) by enabling the `dragdrop` property. It also provides the
    `dragdropScope` property, which holds the unique key to avoid conflicts with other
    drag-and-drop events. The drag-and-drop feature example would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/picklist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/picklist).'
  prefs: []
  type: TYPE_NORMAL
- en: Listing data with OrderList
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OrderList component is used to sort a collection of items in different directions
    (up and down). The component requires an array type variable to store its value
    and `ng-template` to display content of an array of items. Each item will be accessed
    inside the `ng-template` template using a local `ng-template` variable. When the
    position of an item changes, the backend array is also updated to store the latest
    item order.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of the OrderList component with country information would be
    written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In the component class, let''s define a countries list to display the collection
    of items. The country service needs to be injected to access the country information
    from the external resources or datasources as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the list panel is available with default `width` and `height` properties.
    But this can be customized using the `listStyle` property. The following screenshot
    shows a snapshot result of the initial order list as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8876ef10-8734-4396-8a64-ff4338298a27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The OrderList component provides three different event callbacks as mentioned
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `onReorder` | `event`: browser event | Callback to invoke when list is reordered.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `onSelectionChange` |'
  prefs: []
  type: TYPE_TB
- en: '`originalEvent`: browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value`: Current selection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when selection changes. |'
  prefs: []
  type: TYPE_TB
- en: '| `onFilterEvent` |'
  prefs: []
  type: TYPE_TB
- en: '`originalEvent`: browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value`: Current filter values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when filtering occurs. |'
  prefs: []
  type: TYPE_TB
- en: 'The component can be customized from it''s default behavior in different ways
    as mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: The header can be customized using the `header` property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `responsive` property (`responsive="true"`) is used to apply responsive
    behavior, which adjusts the button controls based on the screen size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default multiple selection is prevented (with the help of the Meta key)
    by disabling the `metaKeySelection` attribute (`metaKeySelection="false"`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a snapshot result of a countries list with the
    earlier mentioned customization as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1d2573f1-feb9-4aa7-b23f-cb1c58261d48.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, you can observe that controls appears at the top
    due to its `responsive` feature (`responsive="true"`). We can also observe that
    the panel width has been adjusted based on viewport size (using the `listStyle`
    property).
  prefs: []
  type: TYPE_NORMAL
- en: 'PrimeNG 4.1 version supports filtering and drag and drop features as new additions.
    The filter feature can be applied for single field and multiple fields using the
    `filterBy` property similar to the DataTable component. For example, the multi
    filtering feature on countries data would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The newer 4.1 version also supports a drag-and-drop feature to reorder items
    by enabling the `dragdrop` property. It also provides the `dragdropScope` property,
    which holds the unique key to avoid conflicts with other drag-and-drop events.
    The drag-and-drop feature example would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/orderlist](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/orderlist).'
  prefs: []
  type: TYPE_NORMAL
- en: Grid-organized data with DataGrid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DataGrid displays the data in a grid-oriented layout. The data is represented
    in the form of a layout with multiple cells aligned in a regular pattern. It requires
    a collection of items as an array for the `value` attribute and the `ng-template`
    template tag to display its content where each item can be accessed using a local
    template variable. The template content needs to be wrapped within a `div` element
    such that the data is formatted in a grid layout using any grid CSS styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of a DataGrid component with browser information would be written
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class has to define an array of browser objects, which are retrieved
    from a remote data source using the services. The service accessed on a page load
    would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the DataGrid component
    in a grid layout as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a4de2a0d-97d1-40e6-9a32-78a2667f48ec.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, between any one of two cells the padding will be
    consistent. This can be customized through skinning classes of this component.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond basic usage - advanced features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding snapshot, the browser data is displayed in the grid layout.
    But, you can observe that there is no header or footer to summarize the context.
    The header and footer facets are available using `p-header` and `p-footer` tags.
  prefs: []
  type: TYPE_NORMAL
- en: To improve the usability on large sets, DataGrid provides a pagination feature
    to display the next chunk of data through page navigation. This feature is provided
    by enabling the `paginator` property and by setting the `rows` attribute. Just
    like any other data components, the pagination features such as `pageLinks`, `rowsPerPageOptions`,
    `paginatorPosition`, and `totalRecords` are available for this customization.
  prefs: []
  type: TYPE_NORMAL
- en: To handle huge amounts of data, DataGrid supports a lazy loading feature to
    access this huge amount of data in chunks. This feature is provided by enabling
    the `lazy` attribute. Also the lazy loading method should be called on the pagination
    operation using the `onLazyLoad` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component class which defines the lazy load event callback with an `event`
    object as a parameter is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the lazy loading feature
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2800c1ee-48f2-4565-a497-a3233f9ae432.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, it displays the facets (header and footer), customized
    pagination options, and loading data lazily on user demand. The additional information
    about browsers will be displayed in a dialog popup just by clicking the search
    icon available in each cell. By default, the DataGrid component is responsive
    as a layout display across various screen sizes or devices.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datagrid](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datagrid).'
  prefs: []
  type: TYPE_NORMAL
- en: On-demand data loading with DataScroller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DataScroller displays the data on-demand using a scroll feature. It requires
    a collection of items as its value, number of rows to load, and `ng-template`
    template tag to display the content where each item can be accessed using an implicit
    variable. A basic example of the DataScroller component with various browser information
    would be written as follows (remember, here a fluid grid is used to format the
    content of browser records):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Like any other data components, the component class of the data list should
    define an array of browser objects. The data is populated by making a remote call
    to the data source. The following screenshot shows a snapshot result as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bdc82140-661a-40fd-a445-5c65b46addb5.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding snapshot, the data is displayed on-demand based on
    a window scroll as target. To make this DataScroller element more readable, it
    supports facets such as header and footer using `p-header` and `p-footer` tags.
    By default, the DataScroller component listens to the scroll event of the window.
    There is also one more option to define a container of a component as an event
    target with the help of the inline mode. For this, we should enable the `inline`
    attribute as `true` (that is, `inline="true"`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the scroll-based data loading, further data can be loaded using
    an explicit button action. The component should define a `loader` property which
    refers to the Button component. The DataScroller component with loader button
    would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with loader display as an
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4b875e41-f344-47eb-98a0-83eb5f519678.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, additional browser information is displayed in a
    dialog format once the user clicks the search button on the left-hand side. This
    gives the ability to show how to select a particular record in a DataScroller
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deal with huge datasets, this component supports the lazy loading feature
    as well. Instead of loading whole data, it loads chunks of data on each scroll
    action. It requires both `lazy` and `onLazyLoad` properties to enable this behavior.
    The lazy loading example of DataScroller would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class defines the lazy loading event callback to retrieve the
    data in chunks as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, you can observe that the `first` and `rows` properties
    of an `event` object are helpful for retrieving the next bunch of records. Based
    on the `rows` attribute, it tries to fetch the next `rows` number of records on
    every fetch.
  prefs: []
  type: TYPE_NORMAL
- en: The API method `reset` is used to reset the content or data of a DataScroller
    component. That is, the component will reset to its default state.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datascroller](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/datascroller).'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with Tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Tree component is used to display a hierarchical representation of data
    in a graphical format. It provides an array of the `TreeNode` objects as its value.
    The `TreeNode` API provides many properties to create tree node objects. The tree
    structure has basically three major components as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: The tree elements are called **nodes**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lines connecting elements are called branches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nodes without children are called leaf nodes or leaves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A basic example of a Tree component with nodes would be written as follows
    (the node will represent tourist places):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The data for the Tree component should be provided in a nested parent-child
    hierarchy. Each tree node is created with a set of properties such as `label`,
    `data`, `expandIcon`, `collapsedIcon`, `children`, and so on. The complete list
    of the `TreeNode` properties is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Type** | **Default** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `label` | `string` | `null` | Label of the node. |'
  prefs: []
  type: TYPE_TB
- en: '| `data` | `any` | `null` | Data represented by the node. |'
  prefs: []
  type: TYPE_TB
- en: '| `icon` | `string` | `null` | Icon of the node to display next to content.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `expandedIcon` | `string` | `null` | Icon to use in expanded state. |'
  prefs: []
  type: TYPE_TB
- en: '| `collapsedIcon` | `string` | `null` | Icon to use in collapsed state. |'
  prefs: []
  type: TYPE_TB
- en: '| `children` | `TreeNode[]` | `null` | An array of tree nodes as children.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `leaf` | `boolean` | `null` | Specifies if the node has children. Used in
    lazy loading. |'
  prefs: []
  type: TYPE_TB
- en: '| `style` | `string` | `null` | Inline style of the node. |'
  prefs: []
  type: TYPE_TB
- en: '| `styleClass` | `string` | `null` | Style class of the node. |'
  prefs: []
  type: TYPE_TB
- en: '| `expanded` | `boolean` | `null` | Whether the node is in an expanded or collapsed
    state. |'
  prefs: []
  type: TYPE_TB
- en: '| `type` | `string` | `null` | Type of the node to match the `ng-template`
    type. |'
  prefs: []
  type: TYPE_TB
- en: '| `parent` | `TreeNode` | `null` | Parent of the node. |'
  prefs: []
  type: TYPE_TB
- en: '| `styleClass` | `string` | `null` | Name of the style class for the node element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `draggable` | `boolean` | `null` | Whether to disable dragging for a particular
    node even if `draggableNodes` is enabled. |'
  prefs: []
  type: TYPE_TB
- en: '| `droppable` | `boolean` | `null` | Whether to disable dropping for a particular
    node even if `droppableNodes` is enabled. |'
  prefs: []
  type: TYPE_TB
- en: '| `selectable` | `boolean` | `null` | Used to disable selection of a particular
    node. |'
  prefs: []
  type: TYPE_TB
- en: All properties of `TreeNode` are optional.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tree node structure for the tourist places example would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'In real-time applications, the data located in a remote data source is retrieved
    through services. The following service is going to be injected in the component
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class loads the data on page load using the service call as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the hierarchical Tree component
    representation as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a5801dc-cbf4-496a-8468-0598b47e5799.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding use case, we expanded India and Germany country tree nodes
    to see their child nodes represented as tourist places.
  prefs: []
  type: TYPE_NORMAL
- en: Selection features - single, multiple, and checkbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tree component supports three kinds of selections such as single, multiple,
    and checkbox. The single selection is provided by enabling both the `selectionMode`
    property and the `selection` attribute, which holds a selected tree node.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Tree component with a single selection feature to select a favorite tourist
    place would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the Tree component with
    a single selection as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6ec7842-e873-4887-bb28-06bb93e0cc42.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, multiple selection is enabled by setting `selectionMode` as `multiple`
    (`selectionMode="multiple"`). In this case, the `selection` property holds an
    array of objects as selected nodes. The multiple selection is also provided through
    the checkbox selection. This can be achieved just by setting `selectionMode="checkbox"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Tree component with a multi checkbox selection feature to select multiple
    tourist places would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the Tree component with
    checkbox selection as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b66a06d-0743-489e-be3d-61cdd6418065.png)'
  prefs: []
  type: TYPE_IMG
- en: The selection feature supports two event callbacks such as `onRowSelect` and
    `onRowUnselect`, which provide selected and unselected tree nodes. Refer to the
    events section for more details.
  prefs: []
  type: TYPE_NORMAL
- en: The propagation (upward and downward directions) of selection nodes is controlled
    through `propagateSelectionUp` and `propagateSelectionDown` properties, which
    are enabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond basic usage - advanced features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Tree component also supports many advanced features:'
  prefs: []
  type: TYPE_NORMAL
- en: The customized content can be displayed using the template tag `ng-template`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lazy loading feature is available using the `onNodeExpand` event callback.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ContextMenu for each tree node is applied using a local template reference variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The horizontal layout of the Tree component is displayed using `layout="horizontal"`
    expression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The drag-and-drop feature between source and target Tree components is achieved
    by enabling `draggableNodes` and `droppableNodes` properties. The `dragdropScope`
    attribute is used to restrict drag-and-drop support to a specific area.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The row expansion or collapse behavior can be achieved in a programmatic way
    by externalizing the API methods. For example, a tree with external buttons, which
    are used to expand or collapse tree nodes in a programmatic way using event callbacks
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class defined with event callbacks to toggle the tree nodes in
    a recursive nature is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The component also supports four event callbacks such as `onNodeExpand`, `onNodeCollapse`,
    `onNodeDrop`, and `onNodeContextMenuSelect`. The following events table provides
    complete details of events, parameters, and their description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeSelect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeUnselect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Unselected node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is unselected. |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeExpand` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Expanded node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is expanded. |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeCollapse` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Collapsed node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is collapsed. |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeContextMenuSelect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is selected with right-click. |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeDrop` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.dragNode`: Dragged node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.dropNode`: Dropped node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is selected with right-click. |'
  prefs: []
  type: TYPE_TB
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/tree](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/tree).'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with TreeTable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TreeTable is used to display hierarchical data in a tabular format. It requires
    an array of `TreeNode` objects as its value and provides a `TreeNode` API with
    many optional properties. TreeTable defines column components as child elements
    with `header`, `footer`, `field`, and `style` attributes similar to DataTable
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of a TreeTable component with tourist place tree nodes as information
    would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The component is created by arranging `TreeNode` objects in a hierarchical
    manner. The `TreeNode` object consists of many properties as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Type** | **Default** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `label` | `string` | `null` | Label of the node. |'
  prefs: []
  type: TYPE_TB
- en: '| `data` | `any` | `null` | Data represented by the node. |'
  prefs: []
  type: TYPE_TB
- en: '| `icon` | `string` | `null` | Icon of the node to display next to content.
    Not used by TreeTable. |'
  prefs: []
  type: TYPE_TB
- en: '| `expandedIcon` | `string` | `null` | Icon to use in expanded state. Not used
    by TreeTable. |'
  prefs: []
  type: TYPE_TB
- en: '| `collapsedIcon` | `string` | `null` | Icon to use in collapsed state. Not
    used by TreeTable. |'
  prefs: []
  type: TYPE_TB
- en: '| `children` | `TreeNode[]` | `null` | An array of tree nodes as children.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `leaf` | `boolean` | `null` | Specifies if the node has children. Used in
    lazy loading. |'
  prefs: []
  type: TYPE_TB
- en: '| `style` | `string` | `null` | Inline style of the node. |'
  prefs: []
  type: TYPE_TB
- en: '| `styleClass` | `string` | `null` | Style class of the node. |'
  prefs: []
  type: TYPE_TB
- en: 'The `TreeNode` structure for the tourist places example would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The injected service and the same service call representation in component
    class is almost similar to the Tree component explained in the previous section.
    The following screenshot shows a snapshot result with hierarchical tourist information
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7698f874-f041-4990-ab56-8b7819a3b249.png)'
  prefs: []
  type: TYPE_IMG
- en: The component also supports dynamic columns where each column is created by
    looping through the `ngFor` directive.
  prefs: []
  type: TYPE_NORMAL
- en: Selection features - single, multiple, and checkbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TreeTable component supports three kinds of selections such as single, multiple,
    and checkbox. The single selection is provided by enabling the `selectionMode`
    property on tree table and the `selection` attribute, which holds the selected
    tree table node.
  prefs: []
  type: TYPE_NORMAL
- en: 'The TreeTable component with a single selection feature to select a favorite
    tourist place would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with a single selection as
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/240a8ee6-f425-4e70-b0a3-ced6e5f16c32.png)'
  prefs: []
  type: TYPE_IMG
- en: Whereas, multiple selection is enabled by setting `selectionMode` as multiple
    (`selectionMode="multiple"`). In this case, the `selection` property holds an
    array of objects as selected nodes. The multiple selection is also provided through
    the checkbox selection. This can be achieved by setting `selectionMode="checkbox"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The TreeTable component with a multi checkbox selection feature to select multiple
    tourist places would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with checkbox selection as
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a682056c-6579-4b50-94ce-8a0fb0816f0d.png)'
  prefs: []
  type: TYPE_IMG
- en: The selection feature supports two event callbacks, such as `onNodeSelect` and
    `onNodeUnselect`, which provides the selected and unselected tree nodes. Refer
    to the events section for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond basic usage - advanced features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TreeTable component also supports various advanced features such as lazy
    loading using the `onNodeExpand` callback, customized editable content using the
    `ng-template` template tag, and also context menu implementation, which is similar
    to the DataTable component. It also supports facets for header and footer using
    `p-header` and `p-footer` tags.
  prefs: []
  type: TYPE_NORMAL
- en: The content display of TreeTable is customized using `ng-template`. By default,
    the label of a tree node is displayed inside a tree node. To customize the content,
    define `ng-template` inside the column that gets the column as implicit variable
    (`let-col`) and `rowData` as the node instance (`let-node="rowData"`). In the
    same way, we can customize header and footer of this component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example of editable tree nodes by placing an input inside each
    template as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result with an editable template
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/15893d60-87e6-4251-983a-bf611a343771.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding snapshot, we can edit all the tree node fields. For example,
    we updated tour package days from 9 to 20\. TreeTable also supports event callbacks
    for expansion/collapsing nodes such as `onNodeExpand`, `onNodeCollapse`, and `onContextmenuSelect`
    event for context menu. Refer to the events section for more details.
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG 4.1 introduced the `toggleColumnIndex` property, which is used to define
    the index of the column that contains the the `toggler` element. By default, the
    `toggleColumnIndex` value is `0` (TreeTable always shows `toggler` on first column
    if `togglerColumnIndex` is not defined).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following events table provides the complete details of events, parameters,
    and their description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeSelect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeUnselect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Unselected node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is unselected. |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeExpand` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Expanded node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is expanded. |'
  prefs: []
  type: TYPE_TB
- en: '| `onNodeCollapse` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Collapsed node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is collapsed. |'
  prefs: []
  type: TYPE_TB
- en: '| `onContextMenuSelect` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a node is selected with right-click. |'
  prefs: []
  type: TYPE_TB
- en: '| `onRowDblclick` |'
  prefs: []
  type: TYPE_TB
- en: '`event.originalEvent`: Browser event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event.node`: Selected node instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Callback to invoke when a row is double clicked. |'
  prefs: []
  type: TYPE_TB
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/treetable](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/treetable).'
  prefs: []
  type: TYPE_NORMAL
- en: Managing events with Schedule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Schedule is a full-sized drag-and-drop event calendar based on a `FullCalendar`
    jQuery plugin. The events of Schedule should be formed as an array and defined
    using the `events` property. The Schedule component depends on the `FullCalendar`
    library, so it requires the following resources in your page as listed:'
  prefs: []
  type: TYPE_NORMAL
- en: The Schedule component is embedded in a web page using a style sheet and JavaScript
    files. So, we need to include the `FullCalendar` library's style sheet (`.css`)
    and JavaScript (`.js`) files in the HTML page's `head` section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `jQuery` and `Moment.js` libraries as mandatory libraries for a full calendar.
    These two libraries must be loaded before loading the `FullCalendar` library's
    JavaScript file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hence, we included `FullCalendar` and other dependent resources in a root `index.html`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'A basic example of the Schedule component defined for the entire month would
    be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically, all kinds of events have properties such as title, duration (start
    and end date), type of day (full/partial day), and so on. So, the event class
    would be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The data for Schedule events should be defined exactly in the preceding format
    as a prototype. But in real time, data is fetched using a remote service call
    and updated in the Schedule UI immediately whenever there are any changes in the
    events. The event service, which is used to retrieve data from a data source (in
    this case, it retrieves data from a JSON events file) using HTTP module and observables,
    is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The injected service gets the data during the initial load of a web page. The
    component class has to define the subscription for observable as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the embedded Schedule component
    display as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/35e1cead-b355-417d-8ea0-066647e169bf.png)'
  prefs: []
  type: TYPE_IMG
- en: As per the preceding snapshot, the header is displayed with date (month and
    year), the today label, and month navigation controls. The main body or content
    area contains each day in the month and events on the specific days with a blue
    covered area.
  prefs: []
  type: TYPE_NORMAL
- en: Header customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous snapshot, we observed the Schedule content area along with
    default header text and controls. The default header configuration object for
    the Schedule element would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The mentioned default header display is modified through the `header` property,
    which holds the header configuration object as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s define the navigation controls on the left-hand side, title in the middle,
    and type of view (month, week, and day) on the right-hand side to represent it
    as a configuration object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the customized Schedule''s
    header as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5ef78c40-0dff-4d5d-9910-509454446dd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Beyond basic usage - advanced features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apart from the mentioned regular features, the Schedule component also supports
    lazy loading through the `onViewRender` event callback, which will be invoked
    when the new date range is rendered or when the view type changes. The Schedule
    component with lazy loading event callback invocation would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class defines a lazy loading callback to retrieve the events
    data on-demand and would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The component also supports localization through the `locale` property. For
    example, German labels are represented by setting `locale="de"`. The localized
    labels should be defined in a component similar to calendar.
  prefs: []
  type: TYPE_NORMAL
- en: The UI is updated automatically when there is any change in the events data.
    This is very helpful for CRUD operations implementation on Schedule.
  prefs: []
  type: TYPE_NORMAL
- en: Events and methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Schedule component provides many event callbacks on click, mouse, resize,
    and drag and drop user actions as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `onDayClick` | Triggered when the user clicks on a day |'
  prefs: []
  type: TYPE_TB
- en: '| `onEventClick` | Triggered when the user clicks an event |'
  prefs: []
  type: TYPE_TB
- en: '| `onEventMouseover` | Triggered when the user mouses over an event |'
  prefs: []
  type: TYPE_TB
- en: '| `onEventMouseout` | Triggered when the user mouses out of an event |'
  prefs: []
  type: TYPE_TB
- en: '| `onEventDragStart` | Triggered when event dragging begins |'
  prefs: []
  type: TYPE_TB
- en: '| `onEventDragStop` | Triggered when event dragging stops |'
  prefs: []
  type: TYPE_TB
- en: '| `onEventDrop` | Triggered when dragging stops and the event has moved to
    a *different* day/time |'
  prefs: []
  type: TYPE_TB
- en: '| `onEventResizeStart` | Triggered when event resizing begins |'
  prefs: []
  type: TYPE_TB
- en: '| `onEventResizeStop` | Triggered when event resizing stops |'
  prefs: []
  type: TYPE_TB
- en: '| `onEventResize` | Triggered when resizing stops and the event has changed
    in duration |'
  prefs: []
  type: TYPE_TB
- en: '| `onViewRender` | Triggered when a new date-range is rendered, or when the
    view type switches |'
  prefs: []
  type: TYPE_TB
- en: '| `onViewDestroy` | Triggered when a rendered date-range needs to be torn down
    |'
  prefs: []
  type: TYPE_TB
- en: '| `onDrop` | Triggered when a draggable has been dropped onto the Schedule
    |'
  prefs: []
  type: TYPE_TB
- en: 'Also, it provides many API methods to handle different use cases as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `prev()` | - | Moves the Schedule one step back (either by a month, week,
    or day) |'
  prefs: []
  type: TYPE_TB
- en: '| `next()` | - | Moves the Schedule one step forward (either by a month, week,
    or day) |'
  prefs: []
  type: TYPE_TB
- en: '| `prevYear()` | - | Moves the Schedule back one year |'
  prefs: []
  type: TYPE_TB
- en: '| `nextYear()` | - | Moves the Schedule forward one year |'
  prefs: []
  type: TYPE_TB
- en: '| `today()` | - | Moves the Schedule to the current date |'
  prefs: []
  type: TYPE_TB
- en: '| `gotoDate(date)` | `date`: Date to navigate | Moves the Schedule to an arbitrary
    date |'
  prefs: []
  type: TYPE_TB
- en: '| `incrementDate(duration)` | `duration`: Duration to add to current date |
    Moves the Schedule forward/backward an arbitrary amount of time |'
  prefs: []
  type: TYPE_TB
- en: '| `getDate()` | - | Returns a moment for the current date of the calendar |'
  prefs: []
  type: TYPE_TB
- en: '| `changeView(viewName)` | `viewName`: A valid view string to change to | Immediately
    switches to a different view |'
  prefs: []
  type: TYPE_TB
- en: 'The preceding API methods will give full control on Schedule. There are many
    use cases, where these method calls are really helpful. For example, the Schedule''s
    next view (month, week, or day) is accessed through the `.next()` method as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class defines the click event callback which will invoke next
    day, week, or month as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/schedule](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter5/schedule).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point of time, you will have an overview of all data iteration components
    and their most used features such as selecting rows, sorting, pagination, filtering
    data, and so on. Next, we were able to display (hierarchical) data in a tabular,
    grid, and list formats. Furthermore, you know how to achieve resizing, reordering,
    toggling, and grouping of columns, customizing of cell content in DataTable and
    visualizing the data with Tree and TreeTable components. In the next chapter,
    you will see amazing overlays such as dialog, confirm dialog, overlay panel, and
    notification components, such as growl and messages along with various features.
  prefs: []
  type: TYPE_NORMAL
