- en: Chapter 9. Network Analyst Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Network analysis services allow you to perform analyses on street networks
    such as finding the best route from one address to another, finding the closest
    school, identifying a service area around a location, or responding to a set of
    orders with a fleet of service vehicles. The services can be accessed using their
    REST endpoints. There are three types of analysis that can perform the services:
    routing, closest facility, and service area. We''ll examine each of the service
    types in this chapter. All network analysis services require you to have the network
    analyst plugin for ArcGIS Server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: RouteTask
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to practice routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ClosestFacility task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ServiceArea task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RouteTask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routing in the API for JavaScript allows you to use a `RouteTask` object to
    find routes between two or more locations and optionally get driving directions.
    The `RouteTask` object uses network analysis services to calculate the routes
    and can include both simple and complex routes such as multiple stops, barriers,
    and time windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `RouteTask` object uses a least-cost path between multiple locations in
    a network. Impedance on the network can include time and distance variables. The
    following screenshot shows the output of a `RouteTask` implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![RouteTask](graphics/7965_09_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As with the other tasks we have examined in this class, routing is accomplished
    through a series of objects including `RouteParameters`, `RouteTask`, and `RouteResult`.
    The following diagram illustrates the three route objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![RouteTask](graphics/7965_09_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `RouteParameters` object provides the input parameters to `RouteTask`, which
    submits a routing request to ArcGIS Server using the input parameters. Results
    are returned from ArcGIS Server in the form of a `RouteResult` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `RouteParameters` object serves as an input to the `RouteTask` object and
    can include stop and barrier locations, impedance, whether or not to return driving
    directions and routes, and many others. You can obtain a full list of all the
    parameters at [https://developers.arcgis.com/en/javascript/jsapi/routeparameters-amd.html](https://developers.arcgis.com/en/javascript/jsapi/routeparameters-amd.html)
    for the JavaScript API. A brief code example is also provided showing how to create
    an instance of `RouteParameters`, add stops, and define the output spatial reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `RouteTask` object executes a routing operation using the input parameters
    supplied by `RouteParameters`. The constructor for `RouteTask` takes a pointer
    to a URL that identifies the network service to use for the analysis. Calling
    the `solve()` method on `RouteTask` executes a routing task against the network
    analysis service using the input parameters supplied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A `RouteResult` object is returned from the network analysis service to a callback
    function provided by `RouteTask`. The callback function then handles the data
    by displaying it to the user. The data returned is largely dependent upon the
    input supplied to the `RouteParameters` object. One of the most important properties
    on `RouteParameters` is the `stops` property. These are the points to be included
    in the analysis of the best route between points. Stops is defined as either an
    instance of `DataLayer` or `FeatureSet` and is a set of stops are to be included
    in the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'The concept of barriers is also important in routing operations. Barriers restrict
    movement when planning a route. Barriers can include a car accident, construction
    work on a street segment, or other delays such as railroad crossings. Barriers
    are defined as either `FeatureSet` or `DataLayer` and specified through the `RouteParameters.barriers`
    property. The following code shows an example of how barriers are created in your
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Directions are returned only if `RouteParameters.returnDirections` is set to
    `true`. When you elect to have directions returned, you can also use various properties
    to control the returned directions. You have control over the language for the
    directions (`RouteParameters.directionsLanguage`), length units (`RouteParameters.directionsLengthUnits`),
    output type (`RouteParameters.directionsOutputType`), style name (`RouteParameters.StyleName`),
    and time attribute (`RouteParameters.directionsTimeAttribute`). The data returned
    in addition to directions can include the route between points, the route name,
    and an array of stops.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to specify that the task should fail if one of the stops
    is unreachable. This is accomplished through `RouteParameters.ignoreInvalidLocations`
    property. This property can be set to `true` or `false`. You can also introduce
    time into the analysis through properties such as `RouteParameters.startTime`,
    which specifies the time the route begins, and `RouteParameters.useTimeWindows`,
    which defines that a time range should be used in the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Time to practice routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, you will learn how to implement routing in your applications.
    You''ll create an instance of `RouteParameters`, add stops by allowing the user
    to click points on a map, and solve the route. The returned route will be displayed
    as a line symbol on the map. Follow the following directions to create an application
    that includes routing:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the JavaScript content from the `<script>` tag that I have highlighted
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following references for the objects that we''ll use in this exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `require()` function, create the `Map` object as seen in the following
    code snippet and define variables to hold the route objects and symbols for display
    purposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Just below the code block that created the `Map` object, add an event handler
    for the `Map.click()` event. This action should trigger the `addStop()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `RouteTask` and `RouteParameters` objects. Set the `RouteParameters.stops`
    property equal to a new `FeatureSet` object. Also, set the `RouteParameters.outSpatialReference`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot of the services directory that contains this
    network analysis service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time to practice routing](graphics/7965_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add event handlers for the completion of the `RouteTask.solve-complete()` event
    and the `RouteTask.error()` event. The successful completion of a routing task
    should trigger the execution of a function called `showRoute()`. Any errors should
    trigger the execution of a function called `errorHandler()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create symbol objects for the beginning and ending points of the route as well
    as the line that defines the route between those points. The following lines of
    code should be added just below the two lines of code you added in the previous
    step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `addStop()` function that will be triggered when the user clicks
    on the map. This function will accept an `Event` object as its only parameter.
    The point clicked on the map can be extracted from this object. This function
    will add a point graphic to the map and add the graphic to the `RouteParameters.stops`
    property; on the second map click, it will call the `RouteTask.solve()` method,
    passing in an instance of `RouteParameters`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `showRoute()` function, which accepts an instance of `RouteResult`.
    The only thing you need to do in this function is add the route as a line to `GraphicsLayer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add the error callback function in case there is a problem with the
    routing. This function should display an error message to the user and remove
    any leftover graphics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You may want to review the solution file (`routing.html`) in your `ArcGISJavaScriptAPI`
    folder to verify that your code has been written correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run** button. You should see the map as in the following screenshot.
    If not, you may need to recheck your code for accuracy.![Time to practice routing](graphics/7965_09_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click somewhere on the map. You should see a point marker as shown in the following
    screenshot:![Time to practice routing](graphics/7965_09_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on another point somewhere on the map. This should display a second marker
    along with the best route between the two points, as seen in the following screenshot:![Time
    to practice routing](graphics/7965_09_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ClosestFacility task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ClosestFacility` task measures the cost of traveling between incidents
    and facilities and determines which are nearest to one other. When looking for
    the closest facilities, you can specify how many to find and whether the direction
    of travel is towards or away from them. The closest facility solver displays the
    best routes between incidents and facilities, reports their travel costs, and
    returns driving directions.
  prefs: []
  type: TYPE_NORMAL
- en: '![The ClosestFacility task](graphics/7965_09_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The classes involved in solving closest facility operations include `ClosestFacilityParameters`,
    `ClosestFacilityTask`, and `ClosestFacilitySolveResults`, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ClosestFacility task](graphics/7965_09_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `ClosestFacilityParameters` class includes input parameters such as the
    default cutoff, whether or not to return incidents, routes, and directions, and
    more. These parameters are used as inputs to the `ClosestFacilityTask` class,
    which contains a `solve()` method. Finally, results are passed from ArcGIS Server
    back to the client in the form of a `ClosestFacilitySolveResults` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ClosestFacilityParameters` object is used as an input to `ClosestFacilityTask`.
    Some of the more commonly used properties on this object will now be discussed.
    The `incidents` and `facilities` properties are used to set the locations for
    the analysis. The data returned by the task can be controlled through the `returnIncidents`,
    `returnRoutes`, and `returnDirections` properties, which are simply `true` or
    `false` values indicating whether the information should be returned in the results.
    The `travelDirection` parameter specifies whether travel should be to or from
    the facility and `defaultCutoff` is the cutoff value beyond which the analysis
    will stop traversing. The following code example shows how to create an instance
    of `ClosestFacilityParameters` and apply the various properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When you create a new instance of `ClosestFacilityTask`, you will need to point
    to a REST resource representing a network analysis service. Once created, the
    `ClosestFacilityTask` class accepts the input parameters provided by `ClosestFacilityParameters`
    and submits them to a network analysis service using the `solve()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is illustrated by the following code example. The `solve()` method also
    accepts callback and error callback functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The result returned from a `ClosestFacilityTask` operation is a `ClosestFacilitySolveResult`
    object. This object can contain various properties including a `DirectionsFeatureSet`
    object, which is an array of directions. This `DirectionsFeatureSet` object contains
    the turn-by-turn directions text and geometry of the route. The attributes for
    each feature provide the information associated with the corresponding route segment.
    The returned attributes include the direction text, the length of the route segment,
    the time to travel along the route segment, and the estimated time of arrival
    at the route segment. Other properties contained within `ClosestFacilitySolveResults`
    include an array containing the facilities and incidents, an array of polylines
    representing the routes returned, any messages returned, and arrays containing
    barriers.
  prefs: []
  type: TYPE_NORMAL
- en: The ServiceArea task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The new `ServiceArea` task, illustrated in the following screenshot, calculates
    the service area around an input location. This service area is defined in minutes
    and is a region that encompasses all the accessible streets within that time range.
  prefs: []
  type: TYPE_NORMAL
- en: '![The ServiceArea task](graphics/7965_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The classes involved in service area operations include `ServiceAreaParameters`,
    `ServiceAreaTask`, and `ServiceAreaSolveResults`. These objects are illustrated
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ServiceArea task](graphics/7965_09_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `ServiceAreaParameters` class includes input parameters such as the default
    break, facilities involved, barriers and restrictions, travel direction, and more.
    These parameters are used as inputs to the `ServiceAreaTask` class, which calls
    `solve()`. Parameters defined in `ServiceAreaParameters` are passed in to `ServiceAreaTask`.
    Finally, results are passed from ArcGIS Server back to the client in the form
    of a `ServiceAreaSolveResults` object. The `ServiceAreaParameters` object is used
    as an input to `ServiceAreaTask`. Some of the more commonly used properties on
    this object are discussed in this section of the chapter. The `defaultBreaks`
    property is an array of numbers defining the service area. For instance, in the
    following code example, a single value of `2` is provided to indicate that we''d
    like to return a 2-minute service area around the facility. The `returnFacilities`
    property, when set to `true`, indicates that the facilities should be returned
    with the results. Various point, polyline, and polygon barriers can be set as
    well through the barriers property. Travel direction for the analysis can be to
    or from the facility and is set with the `travelDirection` property. There are
    many other properties that can be set on `ServiceAreaParameters`. A code example
    is provided as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `ServiceAreaTask` class finds service areas around a location using a street
    network. The constructor for `ServiceAreaTask` should point to a REST resource
    representing a network analysis service. To submit a request to solve a service
    area task, you will need to call the `solve()` method on `ServiceAreaTask`.
  prefs: []
  type: TYPE_NORMAL
- en: The result returned from a `ServiceAreaTask` operation is a `ServiceAreaSolveResult`
    object. This object can contain various properties including a `ServiceAreaPolygons`
    property, which is an array of service area polygons returned from the analysis.
    In addition, other properties include facilities, messages, and barriers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routing enables you to add the functionality that finds routes between two or
    more locations to your application. In addition, you can generate driving directions
    between the locations. This is accomplished through a `RouteTask` object that
    performs network analysis. This functionality, along with the other network analysis
    services, requires the use of the network analysis plugin for ArcGIS Server. Other
    network analyst tasks include the closest facility task, which allows you to measure
    the cost of traveling between incidents and facilities and determines which are
    nearest to one other, and the service area task, which calculates the service
    area around an input location. In the next chapter, you will learn how to execute
    geoprocessing tasks from your applications.
  prefs: []
  type: TYPE_NORMAL
