- en: Learning CSS3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cascading Style Sheet** (**CSS**) lets you control the style of the HTML
    content, change the colors, font, layout, and more. It''s fairly easy to understand,
    and, in this chapter, we''re going to tackle the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Ways of using CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS formatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parent and child elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes and IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS box model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS layout and divider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The different ways to use CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three ways to use CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside an HTML tag with a `style` attribute (this method is not recommended,
    but you can still use it a little bit):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our `<head>` section in an HTML document with the tag `<style>`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS code can also be put into an external file, linked to the HTML document
    with the tag `<link>`. The file extension will be saved as a `.css` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For this example, we will use the second option, but we'll learn the third option
    when we start building our own website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding the `<style>` tag in our `<head>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: CSS formatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're now ready to put in our CSS, so how's the formatting in CSS?
  prefs: []
  type: TYPE_NORMAL
- en: 'CSS is pretty simple to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The selector**: This is where you choose which HTML elements you want to
    add style to. In this example, we select all the `<h1>` elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Curly bracket**: All styles inside these will apply to the HTML elements
    chosen by the selector'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Property**: A property controls one aspect of an HTML element''s style, such
    as text-align, color, width, background, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value**: The value goes to the property. In this case, the text-align value
    could be left, right, center, or justify.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Semicolon**: It is mandatory to apply it at the end of a property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can have multiple styles in the same `<style>` tag. Let's center all the
    `h1` and `p` tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parent and child elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What if you want to center all the texts and not just the `<h1>` and `<p>`?
    There is a simple way to achieve that. You have to understand the parent and child
    element. Basically, if you style a parent element, all the child elements will
    have the same styling, unless you specify a specific style for the child element.
    The following is our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `<body>` tag is the parent of every element that is inside it, which includes
    the `<h1>`, `<p>`, `<input>`, `<img>`, and `<a>` elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s remove the previous style and style the `<body>` element with `text-align:
    center;`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save the HTML document and reload the page in Chrome. Note that every
    element has the property `text-align: center;`.'
  prefs: []
  type: TYPE_NORMAL
- en: Classes and IDs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We saw how to select HTML tags with CSS, but, most of the time, you''ll have
    multiple identical HTML tags, such as `<p>` or `<a>`. How do we differentiate
    them so we can only select and style a specific one? Here come the classes and
    IDs. They''re used to select a specific HTML tag you have put an attribute `id`
    or `class`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To select this ID `header` in CSS, we''ll need to write a hash (`#`) character,
    followed by the ID of the element, in this case, `header`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To select a class, we''ll need to write a period (`.`) character, followed
    by the name of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So what is the difference between IDs and classes? The only difference is that
    IDs can be used only once in an HTML document, while Classes can be used multiple
    times. We also need to know the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**For IDs:**'
  prefs: []
  type: TYPE_NORMAL
- en: Each element can have only one ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each page can have only one element with that ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For classes:**'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the same class on multiple elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use multiple classes on the same element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can, for example, have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Which means that the `<div>` element has an ID `header` and the classes `big`,
    `red`, and `blue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add some classes and IDs into our document now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, I added some really simple IDs and classes so you can understand
    how it works. We'll go into detail about the best practices when it comes to using
    IDs and classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our IDs and classes, let''s add some style to our CSS. For
    that, let''s select our first ID, `my-name`, and make it bigger and underlined.
    For that, we will use the CSS properties `font-size` and `text-decoration`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s style some classes now. For this example, let''s add another `<p>` tag
    on our HTML document, just before our link, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have two elements with the same class, let''s see what happens
    when we want to style the class `text` by adding a `font-family` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Save your HTML document and refresh your browser. This is what you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99bbee69-1a09-4146-ae89-4e65e2da8577.png)'
  prefs: []
  type: TYPE_IMG
- en: This should change the font of the elements with the class `text`. You can see
    that both elements have changed.
  prefs: []
  type: TYPE_NORMAL
- en: CSS box model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All HTML elements can be seen as boxes. A CSS box model allows us to define
    the spaces between elements. Whether you want to add a border, set a margin, or add
    paddings between elements, you'll need to understand the box model. Understanding
    this part will help you a lot when implementing your design.
  prefs: []
  type: TYPE_NORMAL
- en: The boxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The box model consists of four properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Content**: The text, images, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Padding**: A transparent area around the content, inside the box'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Margin**: The space between the boxes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Border**: This goes around the padding and the content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Have a look at following diagram for a better understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aee4c299-0b14-4ac8-b2c8-f1e47aefeaff.png)'
  prefs: []
  type: TYPE_IMG
- en: A CSS box model can be described as shown in the preceding diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Box models can also let us set the height and the width of an element. By setting
    the width or the height of the content with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The width of the content will be `200px`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the annoying thing about the standard box-model is that you can only set
    the width and the height of the content, and not in the entire box itself, which
    means the padding, margin, and border will be added to the width and height we
    specified. Which is quite annoying:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4823925c-1284-49ce-82bb-1637090149e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Box Sizing with the property content-box
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, we can counter this by using the `box-sizing ` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'By setting `box-sizing` to `border-box`, we will now set the width and height
    of the entire box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0287cf02-8112-4755-a854-6fa32121f4ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Box Sizing with the property border-box
  prefs: []
  type: TYPE_NORMAL
- en: Block and inline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is one last thing about box models. In HTML, there is what we call block
    elements and inline elements.
  prefs: []
  type: TYPE_NORMAL
- en: '**Block elements**: It uses the full width of the browser and always starts
    on a new line. You can see them as blocks you need to pile one after another.
    Headings and paragraphs are some examples of block elements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of block-level elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<h1> - <h6>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<form>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7fe727ed-87c1-4b62-8889-194ea32e1d13.png)'
  prefs: []
  type: TYPE_IMG
- en: Block elements are represented in red boxes
  prefs: []
  type: TYPE_NORMAL
- en: '**Inline elements**: Inline elements don''t start on a new line and only take
    up as much width as necessary. Look at this example of the blue elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64816021-55cf-4e95-878c-8fc6d9aeb1d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Inline elements are represented in blue boxes
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are examples of inline elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<span>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<a>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<img>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS layout and dividers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we understand how the box model works, we can try to build a simple
    layout for our HTML page, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98e5d3ff-bc29-4e2d-8926-6e7252a5070c.png)'
  prefs: []
  type: TYPE_IMG
- en: Our layout will have a container with a sidebar on the right, and at the bottom
    a footer. A very basic layout for a lot of websites.
  prefs: []
  type: TYPE_NORMAL
- en: This layout will be inside a container that will be centered on the page. Without
    further ado, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: The basic layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create our basic layout, we will use the `<div>` element. The `<div>` element
    is the most commonly used HTML element. `<div>` stands for divide, and we simply
    use it to divide our page into sections by creating boxes where we put our contents.
  prefs: []
  type: TYPE_NORMAL
- en: Let's clear our CSS in your `<style>` section and start from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start first by adding a `<div>` element to wrap all the content we''ve
    created, and then add a class `container` to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Formatting and indenting your HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can see in my HTML document that my code is indented. Code indentation
    applies to every language and makes it easier to read and to structure. The basic
    way of indenting is using the *Tab* key to move the content one step to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4cc43ae-dd2e-4ce9-9ebb-639032fd7a72.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a basic structure and indentation that you should have.
  prefs: []
  type: TYPE_NORMAL
- en: Styling our class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by styling on the `container` class that we''ve just created.
    For this, let''s go to our `<style>` section and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This will set the `width` property to the `<div>` with the class `container`
    to `960px`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want our container to be centered on the page. To do that, we need to add
    a `margin` property, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding `margin-left: auto;` and `margin-right: auto;` means that the left and
    right margin are adjusted automatically according to the context of the element,
    which is the browser window in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21a73c75-1f74-4283-90c4-24965d6a6344.png)'
  prefs: []
  type: TYPE_IMG
- en: There are a lot of ways to center an element with CSS; this is the first one.
    We'll check out a couple of other ways in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's create our `content` element as defined in the layout we want to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside our `<div class = "container">`, let''s add our `<div class = "content">`.
    Again, let''s move our content inside this `div`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's add our `sidebar`. After our `<div class= "content">`, add a `div`
    with the class `sidebar`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside our `sidebar`, add a `<p>` element to create some content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can find some dummy text by going to the website [https://www.lipsum.com/](https://www.lipsum.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, let''s add our `footer` element after our `sidebar` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Our HTML document should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, for the purpose of this lesson, let''s add some background color to each
    element to see how the layouts work. To do this, let''s go to our style section
    and add a `background-color` property for each class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will save our HTML document and refresh our browser to see how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b25bc05-d0e6-49a4-b93d-a72a6ebc74c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Our web page is pretty ugly, but it does show how the layout is put together.
    Let's add a few more CSS properties to make it look the way we want it to look.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want the `.content` element to be `75%` of the total width (960px), and
    the sidebar to be `25%`. We could do some maths and calculate `75%` of 960, but,
    in CSS, you can also set the `width` by percentages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will save our HTML document and refresh our browser to see how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f2c0dbb-2245-470c-ac25-1d64bccd7683.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, our elements have their width properties of `75%` and `25%`.
    Now to move our `sidebar` next to the content, we''ll need to use the CSS property
    called `float`. With `float`, an element can be pushed to the left or to the right,
    allowing other elements to wrap around it. So let''s do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save our HTML document and refresh our browser to see how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ca44f34-c5ac-4bd0-91f6-14139b76d741.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our content and `sidebar` are now side by side, but the problem is that our
    `footer` is on the right side, as it has the property `float` right from the `sidebar`.
    To avoid this, we need to use the `clear` property, which counterparts the `float`
    property. We''ll set the property to both, which means right and left:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Save and refresh the document.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac60a70b-5f3c-40ca-bc0d-e55b5554e891.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have our layout fully coded with CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We finally have our layout now. Again, this lesson wasn't about doing something
    pretty, it was to help you understand how to properly lay out a page with CSS.
    In the next chapter, we're going to delve deeper into HTML and CSS by creating
    and styling our website—how exciting!
  prefs: []
  type: TYPE_NORMAL
