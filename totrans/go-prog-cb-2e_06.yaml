- en: All about Databases and Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go applications frequently need to make use of long-term storage. This is usually
    in the form of relational and non-relational databases, as well as key-value stores
    and more. When working with these storage applications, it helps to wrap your
    operations in an interface. The recipes in this chapter will examine various storage
    interfaces, consider parallel access with things such as connection pools, and
    look at general tips for integrating a new library, which is often the case when
    using a new storage technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the database/sql package with MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a database transaction interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection pooling, rate limiting, and timeouts for SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NoSQL with MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating storage interfaces for data portability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the database/sql package with MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Relational databases are some of the most well understood and common database
    options. MySQL and PostgreSQL are two of the most popular open-source relational
    databases. This recipe will demonstrate the `database/sql` package, which provides
    hooks for a number of relational databases and automatically handles connection
    pooling and connection duration, and gives access to a number of basic database
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will make use of a MySQL database to establish a connection, insert
    some simple data, and query it. It will clean up the database after use by dropping
    the table.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.12.6 or greater on your operating system at [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal or console application, create a project directory such as `~/projects/go-programming-cookbook`
    and navigate to this directory. All code will be run and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    optionally work from that directory rather than typing the examples manually,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Install and configure MySQL using [https://dev.mysql.com/doc/mysql-getting-started/en/](https://dev.mysql.com/doc/mysql-getting-started/en/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `export MYSQLUSERNAME=<your mysql username>` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `export MYSQLPASSWORD=<your mysql password>` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter6/database`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter6/database`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `create.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `query.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Create and navigate to the `example` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `_ "github.com/go-sql-driver/mysql"` line of code is how you connect various
    database connectors to the `database/sql` package. There are also alternative
    MySQL packages that can be imported in the same way for similar results. The commands
    would be similar if you were to connect to PostgreSQL, SQLite, or any others that
    implement the `database/sql` interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Once connected, the package sets up a connection pool that is covered in the
    *Connection pooling, rate limiting, and timeouts for SQL* recipe, and you can
    either execute SQL on the connection directly, or create transaction objects that
    can do everything a connection can do with the `commit` and `rollback` commands.
  prefs: []
  type: TYPE_NORMAL
- en: The `mysql` package provides some convenience support for Go time objects when
    talking to the database. This recipe also retrieves the username and password
    from the `MYSQLUSERNAME` and `MYSQLPASSWORD` environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a database transaction interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with connections to services such as database, it can be difficult
    to write tests. This is because it's difficult in Go to mock or duck-type things
    at runtime. Although I recommend using a storage interface when working with databases,
    it's still useful to mock a database transaction interface inside this interface.
    The *Creating storage interfaces for data portability* recipe will cover storage
    interfaces; this recipe will focus on an interface to wrap database connections
    and transaction objects.
  prefs: []
  type: TYPE_NORMAL
- en: To show the use of such an interface, we'll rewrite the create and query files
    from the previous recipe to use our interface. The final output will be the same,
    but the create and query operations will all be performed in a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section in the *Using the database/sql package
    with MySQL* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter6/dbinterface`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter6/dbinterface`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `transaction.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `create.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `query.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe works in a very similar way to the previous database recipe *Using
    the database/sql package with MySQL.* This recipe performs the same operation
    of creating data and querying it, but also demonstrates using transactions and
    making generic database functions that work with both `sql.DB` connections and
    `sql.Transaction` objects.
  prefs: []
  type: TYPE_NORMAL
- en: Code written in this way allows us to reuse function that perform database operations
    that can be run individually or in groups using a transaction. This allows for
    more code reuse while still isolating functionality to functions or methods operating
    on a database. For example you can have `Update(db DB)` functions for multiple
    tables and pass them all a shared transaction to perform multiple updates atomically. It's
    also simpler to mock these interfaces, as you'll see in [Chapter 9](1f759ff3-1337-4dbc-a4c4-cb513eb5041f.xhtml),
    *Testing Go Code*.
  prefs: []
  type: TYPE_NORMAL
- en: Connection pooling, rate limiting, and timeouts for SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the `database/sql` package provides support for connection pooling,
    rate limiting, and timeouts, it's often important to tweak the defaults to better
    accommodate your database configuration. This can become important when you have
    horizontal scaling on microservices and don't want to hold too many active connections
    to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section in the *Using the database/sql package
    with MySQL* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter6/pools` and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter6/pools`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `pools.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `timeout.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to control the depth of our connection pool is very useful. This
    will prevent us from overloading a database, but it's important to consider what
    it will mean in the context of timeouts. If you enforce both a set number of connections
    and strict context-based timeouts, as we did in this recipe, there will be cases
    where you'll have requests frequently timing out on an overloaded application
    trying to establish too many connections.
  prefs: []
  type: TYPE_NORMAL
- en: This is because connections will time-out waiting for a connection to become
    available. The newly added context functionality for `database/sql` makes it much
    simpler to have a shared timeout for the entire request, including the steps involved
    in performing the query.
  prefs: []
  type: TYPE_NORMAL
- en: With this and the other recipes, it makes sense to use a global `config` object
    to be passed into the `Setup()` function, although this recipe just uses environment
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you need persistent storage or additional functionality provided by
    third-party libraries and services. This recipe will explore Redis as a form of
    non-relational data storage and showcase how a language such as Go can interact
    with these third-party services.
  prefs: []
  type: TYPE_NORMAL
- en: Since Redis supports key-value storage with a simple interface, it's an excellent
    candidate for session storage or temporary data that has a duration. The ability
    to specify a timeout on data stored in Redis is extremely valuable. This recipe
    will explore basic Redis usage from configuration, to querying, to using custom
    sorting.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.11.1 or above on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Consul from [https://www.consul.io/intro/getting-started/install.html](https://www.consul.io/intro/getting-started/install.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal or console application and create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All the code will be run
    and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    (optionally) work from that directory rather than typing in the examples manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Install and configure Redis using [https://redis.io/topics/quickstart](https://redis.io/topics/quickstart).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter6/redis`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter6/redis`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `sort.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Redis in Go is very similar to working with MySQL. Although there's
    no standard library, a lot of the same conventions are followed with functions
    such as `Scan()` to read data from Redis into Go types. It can be challenging
    to pick the best library to use in cases like this and I suggest surveying what's
    available periodically, as things can rapidly change.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses a `redis` package to do basic setting and getting, a more complex
    sort function, and basic configuration. Like `database/sql`, you can set additional
    configuration in the form of write timeouts, poolsize, and more. Redis itself
    also provides a lot of additional functionality, including Redis cluster support,
    Zscore and counter objects, and distributed locks.
  prefs: []
  type: TYPE_NORMAL
- en: As in the preceding recipe, I recommend using a `config` object, which stores
    your Redis settings and configuration details for ease of setup and security.
  prefs: []
  type: TYPE_NORMAL
- en: Using NoSQL with MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may initially think that Go is better suited to relational databases due
    to Go structures and because Go is a typed language. When working with something
    like the `github.com/mongodb/mongo-go-driver` package, Go can nearly arbitrarily
    store and retrieve structure objects. If you version your objects, your schema
    can adapt and it can provide a very flexible development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Some libraries do a better job of hiding or elevating these abstractions. The
    `mongo-go-driver` package is an example of a library that does an excellent job
    of the former. The following recipe will create a connection in a similar way
    to Redis and MySQL, but will store and retrieve an object without even defining
    a concrete schema.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.11.1 or above on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Consul from [https://www.consul.io/intro/getting-started/install.html](https://www.consul.io/intro/getting-started/install.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal or console application and create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All the code will be run
    and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    (optionally) work from that directory rather than typing in the examples manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Install and configure MongoDB ([https://docs.mongodb.com/getting-started/shell/](https://docs.mongodb.com/getting-started/shell/).)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter6/mongodb`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter6/mongodb`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `mongo-go-driver` package also provides connection pooling, and many ways
    to tweak and configure your connections to the `mongodb` database. This recipe's
    examples are fairly basic, but they illustrate how easy it is to reason about
    and query a document-based database. The package implements a BSON data type,
    and marshaling to and from it is very similar to working with JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Consistency guarantees and best practices for `mongodb` are outside the scope
    of this book. However, it's a pleasure to work with these in the Go language.
  prefs: []
  type: TYPE_NORMAL
- en: Creating storage interfaces for data portability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with external storage interfaces, it can be helpful to abstract
    your operations behind an interface. This is for ease of mocking, portability
    in the event you change storage backends, and isolation of concerns. The downside
    to this approach may come if you need to perform multiple operations inside a
    transaction. In that case, it makes sense to make composite operations, or to
    allow them to be passed in via a context object or additional function arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will implement a very simple interface for working with items in
    MongoDB. These items will have a name and price and we'll use an interface to
    persist and retrieve these objects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the steps given in the *Getting ready* section in the *Using NoSQL
    with MongoDB* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter6/storage`
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter6/storage`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `storage.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `mongoconfig.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `mongointerface.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most important function for demonstrating this recipe is `PerformOperations`.
    This function takes an interface to `Storage` as a parameter. This means we can
    dynamically replace the underlying storage without even modifying this function.
    It would be simple, for example, to connect storage to a separate API in order
    to consume and modify it.
  prefs: []
  type: TYPE_NORMAL
- en: We use the context for these interfaces to add additional flexibility and allow
    the interface to handle timeouts as well. Separating your application logic from
    the underlying storage provides a variety of benefits, but it can be difficult
    to pick the right places to draw boundaries, and this will vary widely by application.
  prefs: []
  type: TYPE_NORMAL
