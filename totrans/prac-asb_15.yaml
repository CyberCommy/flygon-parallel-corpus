- en: Getting Started with Ansible Tower
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is very powerful, but it does require the user to use the CLI. In some
    situations, this is not the best option, such as in cases where you need to trigger
    an Ansible job from another job (where APIs would be better) or in cases where
    the person that should trigger a job should only be able to trigger that specific
    job. For these cases, AWX or Ansible Tower are better options to use.
  prefs: []
  type: TYPE_NORMAL
- en: The only differences between AWX and Ansible Tower are that AWX is the upstream
    and open source version, while Ansible Tower is the Red Hat and downstream product
    that is officially supported but for a price, and also the delivery method. AWX
    is available as a Docker container that can run everywhere, while Ansible Tower
    is installed on the system and requires specific versions of Linux—more specifically,
    RHEL 7.4+, RHEL 8.0+, and CentOS 7.4+, at the time of writing. In this chapter,
    we will use AWX and talk about AWX, but everything we discuss also applies to
    Ansible Tower.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first playbook from AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AWX project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a job template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling access to AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning permissions in AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although there are several ways to install AWX, we are going to use the suggested
    AWX installation, which is container-based. For this reason, the following software
    needs to be installed on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible 2.4+.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `docker` Python module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `docker-compose` Python module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your system uses **Security-Enhanced Linux** (**SELinux**), you also need
    the `libselinux` Python module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter assumes that you have set up your control host with Ansible, as
    detailed in [Chapter 1](0efc8364-b8a4-4866-9ff4-1e2d09f6724b.xhtml), *Getting
    Started with Ansible*, and that you are using the most recent version available—the
    examples in this chapter were tested with Ansible 2.9\. Although we will give
    specific examples of hostnames in this chapter, you are free to substitute them
    with your own hostname and/or IP addresses, and details of how to do this will
    be provided at the appropriate places. The installation of Docker is beyond the
    scope of this book, but you can either install the version that ships with your
    Linux operating system or Docker CE. The requisite Python modules can be installed either by
    using `pip` or through operating system packages if they are available.
  prefs: []
  type: TYPE_NORMAL
- en: Installing AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can further discuss AWX, it is best if you have it installed on your
    machine so that you can follow the explanation and immediately start to use AWX.
    The most convenient way of installing AWX is to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to clone the AWX Git repository, which can be done by
    running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Modify the `installer/inventory` file by setting sensible values for the passwords
    and secrets (such as `pg_password`, `rabbitmq_password`, `admin_password`, and `secret_key`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have downloaded the Ansible AWX code and installer, we can move
    into the installer folder and execute the installation by running the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `install.yml` playbook performs the whole installation for us. It starts
    by checking the environment for possible misconfigurations or missing dependencies.
    If everything seems to be correct, it moves on to downloading several Docker images
    (including PostgreSQL, memcached, RabbitMQ, AWX Web, and AWX workers) and then
    runs them all.
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as the playbook completes, you can check the installation by issuing
    the `docker ps` command, which should output something such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the output above, our system now has a container called
    `awx_web`, which has bound itself to port `80`.
  prefs: []
  type: TYPE_NORMAL
- en: You can now access AWX by browsing to `http://<ip address of your AWX host>/`
    and using the credentials you specified in the `inventory` file earlier on in
    this section—note that the default administrator username is `admin` unless you
    change it in the inventory.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have learned the necessary steps to install AWX. Let's take a look
    at how to create a project in AWX.
  prefs: []
  type: TYPE_NORMAL
- en: Running your first playbook from AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in Ansible, in AWX, the goal is running an Ansible playbook and each playbook
    that is run is called a **job**. Since AWX gives you more flexibility and automation
    than Ansible, it requires a little bit more configuration before you can run your
    first job, so let's dive into it, starting with creating an AWX project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AWX project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWX uses the term **project** to identify a repository of Ansible playbooks.
    AWX projects support the placement of playbooks in all major **Source Control
    Management** (**SCM**) systems, such as Git, Mercurial, and SVN, but also support
    playbooks on the filesystem or playbooks provided by Red Hat Insights. To create
    a project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, you need to go to Projects on the left-hand side menu bar, then
    click on the button with a white plus sign on a green background on the top-left
    section of the screen. This opens up a window such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/ef39d1cf-4242-4c53-b421-80eeafc52020.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By filling in the name (`Samples Repo`) and selecting Git for SCM TYPE, the
    window grows with new parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/eb17db9e-b30d-429e-ba6b-328a4191035e.png)'
  prefs: []
  type: TYPE_IMG
- en: You can now add the SCM URL ([https://github.com/ansible/ansible-tower-samples](https://github.com/ansible/ansible-tower-samples))
    and click the SAVE button, which should now be clickable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we mentioned at the beginning of this section, projects are the system to
    store and use playbooks in AWX. As you can imagine, there are many interesting
    additional configurations for AWX projects—and the most interesting one, in my
    view—is `update revision on launch`.
  prefs: []
  type: TYPE_NORMAL
- en: If flagged, this option instructs Ansible to always update the playbook's repository
    before running any playbook from that project. This ensures it always executes
    the latest version of the playbook. This is an important feature to enable as
    if you don't have it checked, there is the possibility (and sooner or later, this
    will happen in your environment) that someone notices that there is a problem
    in a playbook and fixes it, then they run the playbook feeling sure that they
    are running the latest version. They then forget to run the synchronization task
    before running the playbook, effectively running the older version of the playbook.
    This could lead to major problems if the previous version was fairly buggy.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of using this option is that every time you execute a playbook,
    two playbooks are effectively run, adding time to your task execution. I think
    this is a very small downside and one that does not offset the benefits of using
    this option.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have learned the necessary steps to create a project in Ansible Tower.
    Let's see how to create an inventory in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with Ansible Core, to make AWX aware of the machines present in your environment,
    we use inventories. Inventories, in the AWX world, are not that different from
    their equivalents in Ansible Core. Let''s see how to create your first inventory
    in AWX by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Inventory option in the left-hand side menu bar. You will be redirected
    to the Inventory window, where you can create your first inventory by clicking
    on the button with a white plus sign on a green background on the top-left section
    of the screen. This is different from when we created a new project as this button
    does not immediately open the creation form, but will first ask you if you want
    to create an inventory or a smart inventory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After choosing the Inventory option, a box such as the following will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/823edcf9-0f7e-45e9-8ae4-6e205489413c.png)'
  prefs: []
  type: TYPE_IMG
- en: In this window, you need to set a name and then save it. After you have clicked
    SAVE, the Permissions, Groups, Hosts, Sources, and Completed Jobs tabs become
    clickable, so you can continue with the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since an empty inventory is not useful in any way, we are going to add `localhost`
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, select the Hosts tab, then click on the button with a white plus
    sign on a green background on the top-left of the screen. This opens a window,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/5cfa14a5-404b-4315-b148-410fdeb18d0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then need to add the hostname (`localhost`) and instruct Ansible to use
    the local connection by adding the following code to the VARIABLES box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can now click SAVE, saving our inventory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first choice we made was between creating an inventory or a smart inventory.
    What's the difference between these options? In AWX, an inventory is something
    very similar to an Ansible Core inventory, but with additional features, such
    as built-in dynamic inventory support, which means you don't need to edit configuration
    files or install additional Python modules. To enable this, simply go to the Sources tab
    within an inventory to choose to auto-populate the inventory with information
    from a source of truth, such as a public cloud provider inventory (**Amazon Web
    Services** (**AWS**), Azure, and **Google Cloud Platform** (**GCP**) are all supported),
    a private cloud inventory (such as VMWare or OpenStack), or other systems, such
    as Red Hat Satellite or a custom script.
  prefs: []
  type: TYPE_NORMAL
- en: 'A special note about the inventory sources is that the Sourced from a Project option
    provides a form such as the following if chosen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/06cf1dc8-c1b9-4850-aa0f-5f47766bcfe5.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a very interesting feature, in my opinion, since it allows the user
    to check a dynamic inventory script of their own design into a Git repository
    (either in its own repository or one where you also put in playbooks) and AWX
    pulls that information from the repository.
  prefs: []
  type: TYPE_NORMAL
- en: As for projects, when you add a source to your inventory, you might choose to
    select the Update on launch option, which behaves in exactly the same way as the
    Update on launch option behaves for projects. For this reason, I strongly suggest
    you use this option as well.
  prefs: []
  type: TYPE_NORMAL
- en: Smart inventories are inventories that are populated by AWX, starting with the
    hosts present in other inventories by filtering them using the specific smart
    host filter that the user selected during creation. This can be incredibly useful
    for dynamically creating inventories with a specific type of host in them based
    on a filter and saves the need for manually creating lots of different groups—or
    worse, having to add the same host multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have learned the necessary steps to create an inventory in AWX. Let's
    see how to create a job template.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a job template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the playbooks in our projects and the hosts in our inventories,
    we can proceed with the creation of a **job template**.
  prefs: []
  type: TYPE_NORMAL
- en: 'A job template in AWX is a collection of the configurations that are needed
    to perform a job. This is very similar to the `ansible-playbook` command-line
    options. The reason why we need to create a job template is so that playbook runs
    can be launched with little or no user input, meaning they can be delegated to
    teams who might not know all the details of how a playbook works, or can even
    be run on a scheduled basis without anyone present:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you need to click on the Templates option on the left-hand side
    menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now create a new template by clicking on the button with a white plus
    sign on a green background on the top-left of the screen. It will ask you whether
    you want to create a job template or a workflow template—you need to choose Job
    template. The following window will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/caa79e71-a3db-431d-8e1a-0d0bb43043d8.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are quite a few fields in this view. The only information
    needed to proceed is the name (we are going to put in `Hello World`), the inventory (we
    are going to choose `Test Inventory`, which we created in the previous, *Creating
    an inventory* section in this chapter), the project (we are going to choose the
    `Samples Repo` project we created in a previous section in this chapter), and
    the playbook (we are going to choose `hello_world.yml`, which is the only playbook
    available). Then, we can click SAVE. Note that because we are running it using
    the local connection to `localhost`, we don't need to create or specify any credentials.
    However, if you were running a job template against one or more remote hosts,
    you would need to create a machine credential and associate it with your job template.
    A machine credential is, for example, an SSH username and password or an SSH username
    and a private key—these are stored securely in the backend database of AWX, meaning
    you can again delegate playbook-related tasks to other teams without actually
    giving them passwords or SSH keys.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we had to choose was whether we are creating a job template or
    a workflow template. We chose Job Template since we want to be able to create
    simple jobs out of this template. It's also possible to create more complex jobs,
    which are the composition of multiple job templates, with flow control features
    between one job and the next. This allows more complex situations and scenarios
    where you might want to have multiple jobs (such as the creation of an instance,
    company customization, the setup of Oracle Database, the setup of a MySQL database,
    and so on), but you also want to have a one-click deployment that would, for instance,
    set up the machine, apply all the company customization, and install the MySQL
    database. Obviously, you might also have another deployment that uses all the
    same components except the last one and in its place, it uses the Oracle Database
    piece to create an Oracle Database machine. This allows you to have extreme flexibility
    and to reuse a lot of components, creating multiple, nearly identical playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: It's interesting to note that many fields in the Job Template creation window
    have an option with the Prompt on launch caption. This is to be able to set this
    value optionally during the creation of the job template, but also allow the user
    running the job to enter/override it at runtime. This can be incredibly valuable
    when you have a field that changes on each run (perhaps the `limit` field, which
    operates in the same way as `--limit` when used with the `ansible-playbook` command)
    or can also be used as a sanity check, as it prompts the user with the value (and
    gives them a chance to modify it) before the playbook is actually run. However,
    it could potentially block scheduled job runs, so exercise caution when enabling
    this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have learned the necessary steps to create a job template in AWX. Let's
    see how to create a job.
  prefs: []
  type: TYPE_NORMAL
- en: Running a job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A job is an instance of a job template, as the name suggests. This means that
    to perform any action on our machine, we have to create a job template instance—or,
    more simply, a job—by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have set the job template, we can run the job itself. To do so,
    we need to go the Templates item on the left-hand side of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the job template you want to run (in our case, this is going to be the
    `Hello World` one) and then we click on the little rocket on the right-hand side
    of the page corresponding to the correct job template, as you can see in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9f27f618-60e1-40fe-8d9f-d5e853c63a1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When a job is running, AWX allows us to follow the job execution in the job''s dashboard,
    as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d47f9e61-0b2e-42a7-8859-1a0d37fc8044.png)'
  prefs: []
  type: TYPE_IMG
- en: On the right-hand side of the screen, the output of the job loads during the
    execution, while the left-hand side gives us information about the job. One of
    the great things about AWX and Ansible Tower is that they archive this job execution
    output in the backend database, meaning you can, at any point in the future, come
    back and query a job run to see what changed and what happened. This is incredibly
    powerful and useful for occasions such as auditing and policy enforcement.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have learned the necessary steps to create a job in AWX. Let's see
    how to create a user.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling access to AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my opinion, one of the biggest advantages of AWX compared to Ansible is the
    fact that AWX allows multiple users to connect and control/perform actions. This
    allows a company to have a single AWX installation for different teams, a whole
    organization, or even multiple organizations.
  prefs: []
  type: TYPE_NORMAL
- en: A **Role-Based Access Control** (**RBAC**) system is in place to manage the
    users' permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Both AWX and Ansible Tower can link to central directories, such as **Lightweight
    Directory Access Protocol** (**LDAP**) and Azure Active Directory—however, we
    can also create user accounts locally on the AWX server itself. Let's start by
    creating our first user account locally!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the big advantages of AWX is the ability to manage multiple users. This
    allows us to create a user in AWX for each person that is using the AWX system
    so that we can ensure they are only granted the permissions that they need. Also,
    by using individual accounts, we can ensure that we can see who carried out what
    action by using the audit logs. To create a user, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the left-hand side menu bar and select the Users option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now see the list of users and you can also create a new one by clicking
    on the button with a white plus sign on a green background at the top-left hand
    side of the screen. A form such as the following will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/e825aecb-56c2-4eba-be14-0ac7002844b6.png)'
  prefs: []
  type: TYPE_IMG
- en: By adding the email address, the username, and the password (with confirmation),
    you can create the new user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Users can be of three types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A normal user**: Users of this type do not have any inherited permissions
    and they need to be awarded specific permissions to be able to do anything.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A system auditor**: Users of this type have full read-only privileges on
    the whole AWX installation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A system administrator**: Users of this type have full privileges on the
    whole AWX installation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, you have learned the necessary steps to create a user in AWX. Let's have
    a brief look at teams.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although having individual user accounts is an incredibly powerful tool, especially
    for enterprise use cases, it would be incredibly inconvenient and cumbersome to
    have to set permissions for each object (such as a job template or an inventory)
    on an individual basis. Every time someone joins a team, their user account has
    to be manually configured with the correct permissions against every object and,
    similarly, be removed if they leave.
  prefs: []
  type: TYPE_NORMAL
- en: AWX and Ansible Tower have the same concept of user grouping that you would
    find in most other RBAC systems. The only slight difference is that in the user
    interface, they are referred to as **teams**, rather than groups. However, you
    can create teams simply and easily and then add and remove users as you need to.
    Doing this through the user interface is very straightforward and you will find
    the process similar to the way that most RBAC systems handle user groups, so we
    won't go into any more specific details here.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have your teams set up, I recommend that you assign your permissions
    to teams, rather than through individual users, as this will make your management
    of AWX object permissions much easier as your organization grows. Speaking of
    organizations, let's take a look at the concept of organizations in AWX in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, you have multiple independent groups of people that you need to
    manage independent machines. For those kinds of scenarios, the use of organizations can
    help you. An organization is basically a tenant of AWX, with its own unique user
    accounts, teams, projects, inventories, and job templates—it''s almost like having
    a separate instance of AWX! To create an organization, you need to perform the
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new organization, you need to go to the left-hand side of the screen
    to the Organizations option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can then see the existing organizations and proceed to create a new one
    by clicking on the button with a white plus sign on a green background at the
    top-left section of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A window such as the following will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/39582100-fe5a-41dc-9fea-229e85e74c0b.png)'
  prefs: []
  type: TYPE_IMG
- en: Since the only mandatory field is NAME, you can just fill this in and click
    SAVE.
  prefs: []
  type: TYPE_NORMAL
- en: After you create the organization, you can assign any kind of resource to an
    organization, such as projects, templates, inventories, users, and so on. Organizations
    are a simple concept to grasp, but also powerful in terms of segregating roles
    and responsibilities in AWX. Finally, before we complete this section, let's take
    a look at assigning permissions in AWX.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning permissions in AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will have noticed—on our journey through configuring our first project,
    inventory, and job template in AWX—that most of the screens we have navigated
    to have a button on them called Permissions. As we navigate the user interface
    with the administrator account, we get to see all the options—but of course, you
    would not want to give every single user administrator permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Individual users (or the teams that they belong to) can be granted permissions
    on a per-object basis. So, for example, you could have a team of database administrators
    who only have access to see and execute playbooks on an inventory of database
    servers, using job templates that are specific to their role. Linux system administrators
    could then have access to the inventories, projects, and job templates that are
    specific to their role. AWX hides objects that users don't have the privileges
    to, which means the database administrators never see the Linux system administrator
    objects and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of different privilege levels that you can award users (or
    teams) with, which include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Admin**: This is the organization-level equivalent of a **system administrator**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute**: This kind of user can only execute templates that are part of
    the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project admin**: This kind of user can alter any project that is part of
    the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inventory admin**: This kind of user can alter any inventory that is part
    of the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Credential admin**: This kind of user can alter any credential that is part
    of the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workflow admin**: This kind of user can alter any workflow that is part of
    the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notification admin**: This kind of user can alter any notification that is
    part of the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Job template admin**: This kind of user can alter any job template that is
    part of the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auditor**: This is the organization-level equivalent to a **system auditor**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Member**: This is the organization-level equivalent of a **normal user**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Read**: This kind of user is able to view non-sensible objects that are part
    of the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That concludes our brief look at RBAC in AWX and our look at this powerful tool.
    AWX is a great addition to the power of Ansible in an enterprise setting and really
    helps ensure that your users can run Ansible playbooks in a manner that is well
    managed, secure, and auditable. We have only scratched the surface in this chapter,
    but hopefully, this chapter has given you a flavor of how AWX can help your team's
    or enterprise's automation journey.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWX and Ansible Tower are powerful, complementary tools that powerfully support
    the use of Ansible in an enterprise or team-based environment. They can help secure
    credentials that you would otherwise have to distribute widely, audit the history
    of playbook runs, and enforce the version control of playbooks. The web-based
    user interface of these tools creates a low barrier for entry for end users, meaning
    playbook runs can easily be delegated to teams who otherwise have little knowledge
    of Ansible (as long as suitable escalation paths are put in place should problems
    arise). In short, when implementing Ansible in a corporate setting, its usage
    should not be considered complete without the addition of Ansible Tower or AWX.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install AWX on your Linux host, as well
    as the necessary steps to run your very first playbook from AWX. You also learned
    about RBAC in AWX and how this can support large, multi-user environments in a
    corporate setting.
  prefs: []
  type: TYPE_NORMAL
- en: We have now reached the end of this book, since this is the last chapter, and
    I would like to thank you for reading the entire book, and I hope that it has
    taught you what you initially hoped to learn about Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which objects can you create in Ansible Tower?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) Users
  prefs: []
  type: TYPE_NORMAL
- en: B) Jobs
  prefs: []
  type: TYPE_NORMAL
- en: C) Job templates
  prefs: []
  type: TYPE_NORMAL
- en: D) Modules
  prefs: []
  type: TYPE_NORMAL
- en: E) Projects
  prefs: []
  type: TYPE_NORMAL
- en: True or false – AWX is the upstream and open source version of Red Hat Ansible
    Tower.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) True
  prefs: []
  type: TYPE_NORMAL
- en: B) False
  prefs: []
  type: TYPE_NORMAL
