- en: Chapter 3. Animated Data Display
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。动画数据显示
- en: 'In this chapter we''re going to cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Making a motion chart
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作运动图表
- en: Displaying a force directed graph
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示力导向图
- en: Making a live range chart filter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作实时范围图表过滤器
- en: Making an image carousel
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作图像轮播
- en: Zooming and panning a chart
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩放和平移图表
- en: Using the web notifications API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Web通知API
- en: Creating interactive Geo charts from a dataset
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据集创建交互式地理图表
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: We are all living in an information age, where data is created in huge amounts
    every day. This excess amount of data is in dire need to be presented in a format
    that is accessible by the users.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都生活在一个信息时代，每天都会产生大量数据。这种过量的数据急需以用户可访问的格式呈现。
- en: This chapter will cover some common ways of doing animated data visualizations
    with minor interactions. Most of the examples will be data-driven documents, bounded
    to the page with D3 as well as with some other methods of animated data display.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖一些常见的动画数据可视化方法，带有轻微的交互。大多数示例将是数据驱动文档，绑定到页面上的D3，以及一些其他动画数据显示方法。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Throughout the book we use D3, so it is good to know some of the origins of
    it. Mike Bostock, the brilliant core author the library, has created it as an
    successor to a library that he created during his Ph.D. studies called Protovis,
    taking into account the web standards and making performance improvements. He
    also has an amazing visualizations list mostly done for the New York Times available
    at his site [http://bost.ocks.org/mike/](http://bost.ocks.org/mike/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们都使用D3，所以了解一些它的起源是很好的。Mike Bostock，这个杰出的核心作者，创建了这个库，作为他在博士研究期间创建的一个库Protovis的继任者，考虑到了Web标准并进行了性能改进。他还在他的网站[http://bost.ocks.org/mike/](http://bost.ocks.org/mike/)上提供了一个令人惊叹的可视化列表，大部分是为纽约时报做的。
- en: Making a motion chart
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作运动图表
- en: When working with a time-based data often you want to have a view, where the
    time changes will be visualized. One way of doing this is by using a motion chart
    that updates over time and that is what we will be creating with this recipe.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理基于时间的数据时，通常希望有一个视图，其中时间变化将被可视化。一种方法是使用随时间更新的运动图表，这就是我们将用这个食谱创建的内容。
- en: '![Making a motion chart](img/9282OT_03_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![制作运动图表](img/9282OT_03_01.jpg)'
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using a toolkit for creating an interactive graph named **Rickshaw**
    that can be retrieved from [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/),
    and is part of the example code as well. Besides that we also need `D3.js` to
    be included, because Rickshaw is built on top of it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个用于创建交互式图表的工具包**Rickshaw**，可以从[http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/)获取，并且也是示例代码的一部分。除此之外，我们还需要包括`D3.js`，因为Rickshaw是建立在其之上的。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To create the recipe, we will add JavaScript code that will randomly generate
    data and create an interactive graph using Rickshaw.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这个食谱，我们将添加JavaScript代码，随机生成数据，并使用Rickshaw创建一个交互式图表。
- en: First, we add the external JavaScript and CSS in the head section. By convention,
    we can put the vendor libraries in a separate folder `js/vendor/ and css/vendor/`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们在头部添加外部JavaScript和CSS。按照惯例，我们可以将供应商库放在一个单独的文件夹`js/vendor/和css/vendor/`中。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We add the placeholders for the chart in the body section.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在body部分添加图表的占位符。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We continue with the main part, the `js/example.js` file, where we first create
    a color palette, and then the refresh rate.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们继续主要部分，即`js/example.js`文件，我们首先创建一个调色板，然后是刷新率。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The next step is to create `Rickshaw.Graph` with SVG of size `900px` by `600px`
    and of the `line` type. We use the refresh rate we previously selected and the
    specified color palette.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是使用大小为`900px` x `600px`的SVG创建`Rickshaw.Graph`，类型为`line`。我们使用之前选择的刷新率和指定的调色板。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Following this we can add a Y axis to the created graph.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以在创建的图表中添加Y轴。
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Because we created the required objects, they can get rendered to the screen
    by calling `.render` on them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们创建了所需的对象，它们可以通过调用`.render`在屏幕上呈现。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We need data to display, so we will generate some random data, and add it to
    the graph. In order to add the data with a delay, use setInterval on a refreshRate
    period.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要数据来显示，所以我们将生成一些随机数据，并将其添加到图表中。为了延迟添加数据，可以使用setInterval在refreshRate周期上。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point, we should be seeing something similar to the figure shown in
    the beginning of the recipe.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们应该看到类似于食谱开头所示的图形。
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Rickshaw.Color.Palette` we picked is with the scheme `munin`. There are
    also other palettes from which we can choose, such as `spectrum14` or `cool`.
    The palette is used in order to simplify and automate the picking of the colors
    for the graph. For example, if we manually call the .`color()` method multiple
    times.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的`Rickshaw.Color.Palette`是`munin`方案。还有其他调色板可供选择，例如`spectrum14`或`cool`。调色板用于简化和自动选择图表的颜色。例如，如果我们手动多次调用`.color()`方法。
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It will always return the next color. Palette is a set of predefined colors
    that can be picked between given set of rules. For example, the original Nintendo
    Game Boy had four shades of green that could be used to display all the games.
    If we take a look at the implementation of the palettes in Rickshaw, we can notice
    that they are just a list of colors. The following is a snippet from Rickshaw
    source code definition of the palette `cool`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它将始终返回下一个颜色。调色板是一组预定义的颜色，可以在给定的规则集之间选择。例如，原始的任天堂Game Boy有四种绿色的阴影，可以用来显示所有的游戏。如果我们看一下Rickshaw中调色板的实现，我们会注意到它们只是一系列颜色。以下是Rickshaw源代码中调色板`cool`的定义片段：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If we take a look at the `Rickshaw.Graph` creation, besides the SVG size, we
    picked the element with the ID `chart`, where the graph will get rendered.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下`Rickshaw.Graph`的创建，除了SVG大小，我们选择了ID为`chart`的元素，图表将在其中呈现。
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Additionally, we set the `renderer` type to `line`, but it can also be set to
    `area`, `stack`, `bar`, or `scatterplot`, depending on the result.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `series` property we use the following code snippet:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first argument is the array with data names, after that comes the palette,
    and last is the options object where we set the update `timeInterval`. Additionally,
    `maxDataPoints` was set to `50`, and that one designates how many samples of data
    are currently displayed, meaning that we would display the last 50 objects.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Later on, we called the `.render()` method on the `graph` and `yAxis` objects
    for the first time, and afterwards, in the `setInterval()` method we called for
    re-rendering of them on every data change. The data for rendering we constructed
    had the following format:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding format represents a value for the three lines at the specific
    point of time.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: This data object is passed into the series using the `addData()` method defined
    for `Rickshaw.Series.FixedDuration` that sets the latest update for the `series`
    property.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If we need to get the current data for all the displayed frames, we could call
    the `graph.series.dump()` method.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'That for example will return the following result:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There's more...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are various ways to customize the `chart` ID: filter information, add
    controls, or feed the data from a remote server. If we want to attach a legend,
    we can simply create such an object before the graph is rendered, and attach it
    to our graph object.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Displaying a force directed graph
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a graph with some of the characters of the play
    *Hamlet* by *William Shakespeare*. The idea is to visualize the connections between
    the characters in a fun and interactive way. The type of graph that will be visualized
    is known as **force directed** graph.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a force directed graph](img/9282OT_03_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to visualize the connections between the characters, they need to be
    stored somehow. There is a sample `data.json` file that is a part of the code
    examples that you can use. Although we do encourage you to create your own sample
    data or at least play around with the existing one, but for the purpose of simplicity,
    we will be using the one provided in the code examples.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be creating a JSON file to contain the relation and image information,
    the HTML, and the accompanying JavaScript.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: First, we can start with the creation of the data for the recipe. We can define
    the `nodes` list, where the object would be placed with the properties `name`
    that will designate the name of the node, **icon** will be the URL of the image,
    and group will be
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: After adding the nodes in the data, we also need information about how they
    are connected. To do that we will add a list of `links` to the model.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now we can proceed with the creation of the HTML file. For this implementation
    we will be using `D3.js`, so we need to include it and also setup two CSS classes,
    one for the link and the other for the node text.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After this, we can start adding the parts in the main script. As in the previous
    examples, we will first add the SVG into the `body` element with some predefined
    size.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now we can create the layout for the graph.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The next step is to map the data from the JSON document with the force layout
    and create all of the `links` and `nodes`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We then append `image` from the model, defined as `icon` and `text` with the
    name of the node.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Also on force changes and updates, we will set up a listener that will update
    the links and nodes positions.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will take a look at the CSS, and more specifically at `pointer-events`
    that we have set to `all`. This setting makes the element to be the target of
    mouse-events, when the pointer is in the interior or over the perimeter, and can
    only be used on the SVG elements. In order to disable the selection of the text,
    we use the CSS property `user-select`, and set it to the value of `none`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`user-select` is not consistent across browsers, and in order to use it, we
    can add browser specific CSS hack, such as the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The layout used for this recipe is `d3.layout.force()` that does not create
    a fixed visual representation, but instead we define the parameters, such as `friction`,
    `distance`, and `gravity strength`. Depending on the data and mouse interactions,
    we get different views.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When constructing the layout after setting the parameters and the data information
    about the `links` and `nodes`, we need to call the `start()` method.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We want to create the `g` element for all the `nodes` from our data, and set
    the appropriate CSS class `node`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Also, add a behavior to allow interactive dragging using `.call(force.drag)`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: The `g` element represents a container that can be used to group other elements.
    Transformations that are applied to the `g` element are also performed on all
    of its child elements. This feature makes the element a good pick for organizing
    different section of view blocks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More on the `g` element can be found in the SVG specification from [http://www.w3.org/TR/SVG/struct.html#Groups](http://www.w3.org/TR/SVG/struct.html#Groups).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: The `force.drag()` method is predefined in the `d3.layout.force()` method. Drag
    event is fixed to work on `mouseover` to allow catch of moving nodes. When the
    `mousedown` event is received, the nodes are dragged to the mouse position. Interesting
    is that this behavior supports the touch events from mobile devices, such as iOS
    or Android. In order to disable the click events for the nodes while dragging,
    `mouseup` is captured and stopped from propagating.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: To create an image for the nodes, we add SVG `image` tag with `xlink:href` to
    the URL from the data stored in `d.icon`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In order to have the update from the layout, there are `tick` events that are
    dispatched on each tick of the visualization. In order to keep the elements updated,
    we added a listener for the event.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The listener sets the correct positions for the movements to the `link` and
    `node`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the more obvious options here is to add more interactions to the visualization.
    Nodes can be made collapsible and links can be added to the nodes. Relationships
    between the nodes can be set to more fine-grained levels There are ways to make
    the data refresh over time and reload certain portions of the graph. If needed,
    there can be preset expected layout, so that the node will try to confirm a certain
    positioning.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Learn more on D3 force layout and the related functionality from [https://github.com/mbostock/d3/wiki/Force-Layout](https://github.com/mbostock/d3/wiki/Force-Layout).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Making a live range chart filter
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with large amounts of data, we usually want to add some way of
    filtering or picking up what data to show. This recipe will cover a simple range
    filter for the graph and a chart that displays time-varying series of data.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a live range chart filter](img/9282OT_03_03.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the same toolkit from the *Making a motion chart* recipe for
    creating interactive graphs. The necessary library Rickshaw can be retrieved from
    [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/),
    and is part of the example code as well. Besides that we also need D3, because
    Rickshaw works on top of it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create an HTML page containing a JavaScript file while generating a
    random data for the graph, and also add additional filtering elements.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: First, we will make an HTML page and include the required CSS by the libraries.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Notice that we add an additional file `legend.css` that contains the layout
    information about the graph legend. We can then add our custom CSS file.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The HTML placeholders for the graph, legend, and slide will be the regular `div`
    elements.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We add the dependencies for the libraries. Besides Rickshaw and its dependency
    D3, we are going to add jQuery and jQuery UI, because we will be using controls
    from there. And now, we can proceed to the main JavaScript, and start with defining
    the color palette and the refresh rate.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了库的依赖项。除了Rickshaw及其依赖项D3之外，我们还将添加jQuery和jQuery UI，因为我们将使用其中的控件。现在，我们可以继续进行主要的JavaScript，并开始定义颜色调色板和刷新率。
- en: '[PRE32]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The next step is to create the graph in the chart element with `900px` by `500px`
    size.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是在大小为`900px` x `500px`的图表元素中创建图表。
- en: '[PRE33]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As for the `slider` property, Rickshaw provides us with a ready control that
    we can connect to the graph we created.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至于`slider`属性，Rickshaw为我们提供了一个现成的控件，我们可以将其连接到我们创建的图表上。
- en: '[PRE34]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: To have a Y axis drawn, we can create it, and can connect it to our graph.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要绘制Y轴，我们可以创建它，并将其连接到我们的图表上。
- en: '[PRE35]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: For creation of a legend on the colors and names of the data samples displayed,
    there is a control that we can use and connect with our graph as well, while we
    also specify the element where it will get rendered.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在显示的数据样本上创建颜色和名称的图例，我们可以使用一个控件，并将其连接到我们的图表上，同时还要指定它将被渲染的元素。
- en: '[PRE36]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Because this example has a time-series component, we will generate random data.
    After the generation of the data, we call `graph.series.addData(data)` and re-render
    the `graph` and `yAxis` property. This generation, data update, and rendering
    happens on every `refreshRate` milliseconds.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为这个示例有一个时间序列组件，我们将生成随机数据。在生成数据之后，我们调用`graph.series.addData(data)`并重新渲染`graph`和`yAxis`属性。这个生成、数据更新和渲染发生在每个`refreshRate`毫秒。
- en: '[PRE37]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: Let's take a look at the graph's series input parameters.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看图表的系列输入参数。
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Besides the graph data we also have a `name` and a `color` property. Now, the
    first thing you might ask yourself is, why have a `color` property and input a
    palette as well? Well, we do this in order to enable the other plugins to be able
    to read this information.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 除了图表数据，我们还有`name`和`color`属性。现在，你可能会问自己，为什么有一个`color`属性并输入一个调色板呢？嗯，我们这样做是为了使其他插件能够读取这些信息。
- en: One of these plugins is `Rickshaw.Graph.Legend` that constructs a legend-box
    displaying info for each of the data streams.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个插件是`Rickshaw.Graph.Legend`，它构建一个显示每个数据流信息的图例框。
- en: We also add a range-filtering on the X axis with `Rickshaw.Graph.RangeSlider`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在X轴上添加了一个范围过滤器`Rickshaw.Graph.RangeSlider`。
- en: '[PRE39]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the background, the `slider` property uses jQuery UI control that is set
    to `range:true`. The minimum and maximum values are used from the current graph
    data. The `slider` property has a `slide` event that is used to limit the sample
    size displayed on the graph.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台，`slider`属性使用了jQuery UI控件，设置为`range:true`。最小值和最大值来自当前图表数据。`slider`属性有一个`slide`事件，用于限制图表上显示的样本大小。
- en: Because there is data being added constantly to the graph, the `slider` properties
    min and max values are set accordingly by an event from the graph. These are some
    of the considerations that you need to keep in mind while you are developing a
    custom control.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 因为数据不断添加到图表中，`slider`属性的最小值和最大值根据图表的事件相应地设置。这些都是在开发自定义控件时需要牢记的一些考虑因素。
- en: '![How it works...](img/9282OT_03_04.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/9282OT_03_04.jpg)'
- en: Slider set to only show a given portion of time. Because the time changes the
    slider is moved alongside with the data.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将滑块设置为仅显示给定时间的一部分。因为时间改变了，滑块会随着数据一起移动。
- en: Making an image carousel
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作图像轮播
- en: Image carousels are among the most popular marketing and showcase tools used
    on websites. They can also be used to show image galleries or presentations.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图像轮播是网站上使用的最受欢迎的营销和展示工具之一。它们也可以用于显示图像库或演示文稿。
- en: In this recipe we're going to build an image carousel. It will support automatic
    timed transitions that stop if the user moves over the carousel area. It will
    have a navigation area consisting of control rectangles denoting the currently
    active images and the number of remaining images.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将构建一个图像轮播。它将支持自动定时转换，如果用户移动到轮播区域，转换将停止。它将有一个导航区域，包括表示当前活动图像和剩余图像数量的控制矩形。
- en: This will be a 3D carousel utilizing HTLM5 features, such as CSS3 3D transforms.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个利用HTLM5功能的3D轮播，如CSS3 3D转换。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need three images in the directory along with our code. They should
    be named `1.jpg`, `2.jpg`, and `3.jpg` respectively.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在目录中与我们的代码一起放置三张图片。它们应分别命名为`1.jpg`，`2.jpg`和`3.jpg`。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: We will be creating the image carousel by using jQuery, HTML5, and CSS transformations.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用jQuery、HTML5和CSS转换来创建图像轮播。
- en: First, we will create an HTML page with a carousel and the gray image controls.
    We're going to position the controls in the middle-bottom section of the carousel.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个带有轮播和灰色图像控件的HTML页面。我们将把控件放在轮播的中下部分。
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: To get a 3D view that has depth, the main container must have a `perspective`
    property. It denotes the distance of the viewer from the screen. It will make
    nearby things look larger, and distant things look smaller.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了获得具有深度的3D视图，主容器必须具有`perspective`属性。它表示观察者与屏幕的距离。它会使附近的东西看起来更大，而远处的东西看起来更小。
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We're going to place all our images inside the rotator, then rotate the rotator
    itself. To do this, rotations on the rotator must preserve the 3D transforms of
    the child elements.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把所有的图像放在旋转器内，然后旋转旋转器本身。为了做到这一点，旋转器上的旋转必须保持子元素的3D转换。
- en: Additionally, both the rotator and the images will have a transition animation.
    We specify this by adding the `transition` property. In our example, transitions
    will work on transforms and will be one second long.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，旋转器和图像都将具有过渡动画。我们通过添加`transition`属性来指定这一点。在我们的示例中，过渡将在变换上起作用，并且持续一秒钟。
- en: '[PRE42]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The code that animates the carousel and makes the controls clickable will be
    in `example.js`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 轮播动画和可点击控件的代码将在`example.js`中。
- en: '[PRE43]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We will place all the images in their appropriate position in the 3D space,
    each one rotated by a multiple of an angle and moved by a calculated amount. For
    more information see the *How it works...* section of this recipe.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: For each image we add a control marker, which can activate that image.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Finally, let's write the functions that change the position of the carousel.
    The `change` function changes the position by `dir` elements, and `changeTo` changes
    the position directly to the specified element. Then we can start our carousel
    timer.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![How it works...](img/9282OT_03_05.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: 'Building our carousel depends on the number of images we''re going to use.
    To get a better sense of what exactly happens when we apply our transforms, lets
    look at the top view of a carousel. The preceding figure shows a carousel with
    five sides. Each side is translated away from the center point by a distance `z`,
    then rotated by an angle `a` multiple times. The angle can be calculated as follows:
    `a = 360 / number Of sides`.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: The translation `z` however is slightly harder to calculate. To do that, we
    need to look at the triangle that consists of `z` and half of the sides width.
    By applying a trigonometric equation `tan(a/2) = (w/2) / z` we can calculate `z
    = w/2 / tan(a/2)`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: To rotate the carousel, we rotate the `rotator` parent by an angle `a` every
    5 seconds. The user is allowed to click on the controls to change the rotation.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: We also move `rotator` in the opposite direction by `z` to make the distance
    of the front element in the carousel the same, as if it hasn't been translated.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: We hope that this recipe added some fun and freshness into the slightly dull
    topic of carousel making, by using some new HTML5 features, which will surely
    wow the users.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some of the CSS3 features are not widely available as of this writing. Internet
    Explorer 9, which otherwise does support a lot of HTML5 doesn't have them, though
    they're available in Internet Explorer 10\. Before using these techniques, review
    the target browser requirements.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Zooming and panning a chart
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The charts we discussed in the preceding chapter of this book were static. As
    such, they're great for visualizing limited quantities of data. However, when
    the dataset grows too large, users might be needed to interactively choose the
    range of data shown in the chart.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: To enable this, we're going to make a chart that is capable of interactive controls,
    such as zooming and panning. The Flot chart library easily supports this with
    its navigation plugin.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we're going to show a one week temperature history at 30 minute
    increments. We're going to allow the user to zoom and pan the history.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll need to download Flot from the official website [http://www.flotcharts.org/](http://www.flotcharts.org/)
    and extract the contents to a separate folder `flot`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create this recipe, we will add Flot, jQuery, and create an HTML file.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a basic HTML page with a placeholder for our chart. We're also
    going to include jQuery (needed by Flot), Flot itself, and the Flot navigate plugin.
    Flot needs to draw the chart canvas a placeholder `div`, so we're going to provide
    one. The placeholder needs to have `width` and `height` specified via CSS; otherwise
    Flot may fail to draw the chart correctly.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We're going to add our code in `example.js`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To draw the chart, first we wrote the function `getData` to generate some convincing
    looking random data of temperature that rises during the day and falls during
    the night. Because it is callback based, we can replace this function with one
    that fetches the data from a server.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: The plot drawing function `$.plot` takes three arguments. The first is the plot
    placeholder, the second is an array of series we need to draw, and the third are
    drawing options. We're going to pass only one series.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: The new additions to our chart are to the plot options and the zoom-out button.
    We specify the zoom and pan range in the axes options. Our Y axis doesn't support
    zooming and panning, so it has been disabled.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: The `zoomRange` option specifies the minimum and maximum range of the full plot
    when zooming. For example, our options specify that the plot will zoom to show
    at least half a day and at most a week in its full range.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: The `panRange` option specifies the minimal minimum and maximal maximum on the
    X axis. In our example, we specify that the user cannot pan the chart to make
    its minimum value go below `weekAgo`, and cannot pan it to make its maximum value
    go above `now`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we specify that zooming and panning will be interactive. This means
    that the user can zoom-in using double-click, and can pan it by dragging with
    the mouse.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: To allow the user to reset the zoom, we add a `zoomOut` button, which calls
    the `zoomOut` function. We need to update this function whenever we redraw the
    plot, because the object returned from the `$.plot` call changes. This way multiple
    `getData` calls are allowed.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: With this, we've added interactivity to our charts, allowing the user to customize
    the range of data they would like to view. Flot navigation works with all kinds
    of charts; be sure to check out the preceding chapter to see an overview of some
    of the chart types that are supported.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Using the web notifications API
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web notifications are one of the newer features added into modern browsers.
    They are intended as alerts for the user outside of the web page context. The
    idea is for them to be browsers intended, for example, when using a mobile browser
    notification could go into the home screen of the device. On the desktop usually
    they show up on the right-corner of the screen, at least on most desktop environments.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the web notifications API](img/9282OT_03_06.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the purpose of this example, we will be using data derived from Project
    Gutenberg [http://www.gutenberg.org/](http://www.gutenberg.org/). The data are
    the tips from the chapter *Use of spies* from *Sun Tzu's -Art of war* and can
    be found in this recipe code example under `data.json`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create this recipe we will create an HTML file, and use jQuery for simplicity.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: First, we can start with the HTML part, where we just create a simple `button`
    and a `div` element with the ID `fallback` that we are going to use, if the browser
    does not support notifications.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Let's first create the `notification.js` file that we will use as utility to
    create `simpleNotifations.show(data)`. The first check we have to do is verify
    support for `webkitNotifications`, the only full implementation at the time of
    writing.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Next is the check for the real-standard-based web notification object, where
    in future, as browsers implement it more and more, it should be the first one.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Finally the case; if there is no support for any type of notification by the
    system we just use a callback to handle this case, where we also close the utility.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Next, we can continue with creating the `display.js` file that will get a random
    quote from the data, and call the previously defined `simpleNotification.show()`
    method. First we will do the fetching.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Because we want some default behavior for all the notifications, such as icon,
    default message, or fallback function, we do the callout with a default `data`
    object.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will take a deeper look at the `notification.js` file, where most of the
    notification logic is. The check tests we did on the notifications `if (window.webkitNotifications)`
    and `if (window.Notification)` try to see if there is such object in the browser.
    If no such object is there, this means there is no support for that type of notification.
    While on the other hand, if the `if` condition was met, this means we have support,
    and can ask for permission.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: After that, we are free to create the notification and show it with the given
    parameters for `icon`, `title`, and `body`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'If we want the notification to hide after a given timeout, we add the following
    function:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: On the other hand, if we do not have the permission to display a notification,
    we need to request it from the user, where we can do the call to our function
    once again.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Tip
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The request for the permission must come from a user-triggered event on some
    HTML element. In our case this is the `onClick` function on the button. More specifically
    the jQuery click `$("#show").click(function (){ ...}`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: We don't need to get into too much details for the fetching of the data, but
    in our default object we have the `icon` parameter with the value `images/war.png`
    that we will get used for the notification, as well as the `fallback` function
    and the `timeout` configuration.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, Chrome is the only browser with full support for the
    notifications for quite some time, but Safari 6.0 and Firefox 22 Aurora also have
    initial implementations.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: The full specifications for web notifications can be found from [http://www.w3.org/TR/notifications/](http://www.w3.org/TR/notifications/).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Creating interactive Geo charts from a dataset
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to create cool-looking interactive Geo charts,
    and how to use them for the display of data. These are becoming very common for
    the display of statistics on larger geographical area, usually from election results
    or global warming effects. In order to have a map covering multiple different
    countries, we will visualize the member and member applicant stats of the Commonwealth
    of Nations.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Commonwealth of Nations is a voluntary association of 54 independent sovereign
    states (one of whose membership is currently suspended). Most are former British
    colonies, or dependencies of these colonies. No one government in the Commonwealth
    exercises power over the others, as in a political union. Rather, the relationship
    is one of an international organization through which countries with diverse social,
    political, and economic backgrounds are regarded as equal in status, and cooperate
    within a framework of common values and goals, as outlined in the Singapore Declaration,
    which can be read from
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Member_states_of_the_Commonwealth_of_Nations](http://en.wikipedia.org/wiki/Member_states_of_the_Commonwealth_of_Nations).'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating interactive Geo charts from a dataset](img/9282OT_03_07.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are JSON object with definition of boundaries for valorous areas and scale
    levels mostly derived from the public domain dataset available at [http://www.naturalearthdata.com/downloads/](http://www.naturalearthdata.com/downloads/).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we use a `world-data.json` file that can be found as part of the
    code examples.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After getting the `world-data.json` file. we can start by creating the HTML
    and JavaScript files.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Let's first take a look at this country boundaries data in the `world-data.json`
    file for example, at the Bahamas.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In their properties we have the name of the country, and the geometry of the
    country represented as a polygon with multiple points.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many different ways to create and represent the boundaries data. In
    order to create your own boundaries or get already available data, Open Street
    Map( [http://www.openstreetmap.org/](http://www.openstreetmap.org/) ) is a great
    project that offers this options. For example, one of the tools called Osmosis
    can be used to get the vector data about certain objects at many different zoom
    levels from [http://wiki.openstreetmap.org/wiki/Osmosis](http://wiki.openstreetmap.org/wiki/Osmosis).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: We can proceed with adding the CSS and dependencies to `D3.js` in the head.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: In the body part we directly start with the `example.js` file and define helpers
    with the data about the country names part of the euro-zone and utilities for
    generation of random numbers and colors.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: There we add a utility function for getting a random color, if the country is
    part of the zone and `#bbb`, if not.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那里，我们添加了一个用于获取随机颜色的实用函数，如果国家是该区域的一部分，则为`#bbb`。
- en: '[PRE63]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Then to get the cool frame-like effect, we set the margins around it.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为了获得类似框架的效果，我们设置了周围的边距。
- en: '[PRE64]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Next we define the types of projection, zoom behavior, and path, where the zoom
    behavior add a callback on the `zoom` event to the `move()` method.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义投影、缩放行为和路径的类型，其中缩放行为在`zoom`事件上添加了对`move()`方法的回调。
- en: '[PRE65]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: We create the SVG image with the previously set values for width and height,
    and call the zoom behaviors to get into the selected zoom level.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用先前设置的宽度和高度创建SVG图像，并调用缩放行为以进入所选的缩放级别。
- en: '[PRE66]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: First, we create the `g` element for the selected features of the map.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们为地图的选定特征创建了`g`元素。
- en: '[PRE67]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: We then add the frame around the map by creating the SVG rectangle.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过创建SVG矩形为地图添加了一个框架。
- en: '[PRE68]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Now we need to get the data from the `world-data.json` file, create the paths
    for the countries, and fill them with the appropriate color depending on whether
    `d.properties.name` is part of the needed group.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要从`world-data.json`文件中获取数据，为各个国家创建路径，并根据`d.properties.name`是否属于所需组来填充它们的适当颜色。
- en: '[PRE69]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Finally, the move() function is called on zoom.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在缩放时调用`move()`函数。
- en: '[PRE70]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: How it works...
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, `d3.geo.mercator()` constructs a **Mercator projection** from a spherical
    data representation.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`d3.geo.mercator()`从球形数据表示构造了一个**墨卡托投影**。
- en: Note
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Mercator projection is a cylindrical map projection created by Gerardus
    Mercator in 1569\. It is very commonly used to represent maps, but it has the
    problem that the size and shape of the objects gets distorted as we move from
    the Equator towards the poles. More on Mercator projection can be found from [https://en.wikipedia.org/wiki/Mercator_projection](https://en.wikipedia.org/wiki/Mercator_projection)
    and [https://en.wikipedia.org/wiki/File:Cylindrical_Projection_basics2.svg](https://en.wikipedia.org/wiki/File:Cylindrical_Projection_basics2.svg).
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 墨卡托投影是由杰拉尔德斯·墨卡托在1569年创建的柱状地图投影。它被广泛用于表示地图，但它的问题是随着我们从赤道向极地移动，对象的大小和形状会发生扭曲。有关墨卡托投影的更多信息，请参见[https://en.wikipedia.org/wiki/Mercator_projection](https://en.wikipedia.org/wiki/Mercator_projection)和[https://en.wikipedia.org/wiki/File:Cylindrical_Projection_basics2.svg](https://en.wikipedia.org/wiki/File:Cylindrical_Projection_basics2.svg)。
- en: '![How it works...](img/9282OT_03_08.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/9282OT_03_08.jpg)'
- en: The `d3.geo.path()` method creates a new geographic generation with some predefined
    settings. We set this path generator to use our `projection` type.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.geo.path()`方法使用一些预定义的设置创建一个新的地理生成。我们将此路径生成器设置为使用我们的`projection`类型。'
- en: '[PRE71]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The `d3.behavior.zoom()` method enables us to add automatic zoom functionality
    to our `projection` type with the given scale and range of zoom in `scaleExtent`.
    Additionally, this creates a listener on the `zoom` event doing a call to the
    `move()` function.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.behavior.zoom()`方法使我们能够为我们的`projection`类型添加自动缩放功能，并在`scaleExtent`中给定缩放的比例和范围。此外，这会在`zoom`事件上创建一个监听器，调用`move()`函数。'
- en: '[PRE72]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Main features that creates the counties is that we get the feature data from
    `world-data` and create the SVG path that actually represent individual countries,
    and we can then style and fill it with color.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 创建县的主要特点是，我们从`world-data`获取要素数据，并创建实际表示各个国家的SVG路径，然后可以对其进行样式和填充颜色。
- en: '[PRE73]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: This type of map is also known as the choropleth map meaning a thematic map,
    where some statistical variable is displayed.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的地图也被称为分级地图，意思是显示某些统计变量的专题地图。
- en: The file `js/world-data.json` contains the borders of each country with some
    metadata. The metadata is matched against our commonwealth list of countries.
    If they are a match, the country is colored. Note that there are few more countries
    that are not available in our map data.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`js/world-data.json`包含每个国家的边界和一些元数据。元数据与我们的英联邦国家列表进行匹配。如果它们匹配，国家就会被着色。请注意，我们的地图数据中还有一些国家是不可用的。
- en: '![How it works...](img/9282OT_03_09.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/9282OT_03_09.jpg)'
- en: There's more...
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When working with JavaScript and maps there are two formats that often pop up.
    One is GeoJSON ([http://www.geojson.org/](http://www.geojson.org/)), a format
    for a variety of geographic data structures. The other is named TopoJSON ([https://github.com/mbostock/topojson](https://github.com/mbostock/topojson)),
    and it is an extension of GeoJSON that encodes topology. TopoJSON uses line segments
    called arcs to get better characteristics than GeoJSON.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理JavaScript和地图时，经常出现两种格式。一种是GeoJSON（[http://www.geojson.org/](http://www.geojson.org/)），一种用于各种地理数据结构的格式。另一种是名为TopoJSON（[https://github.com/mbostock/topojson](https://github.com/mbostock/topojson)）的格式，它是GeoJSON的扩展，用于编码拓扑。TopoJSON使用称为弧的线段来获得比GeoJSON更好的特性。
- en: There is a company named CartoDB, [http://cartodb.com/](http://cartodb.com/)
    that specializes in the creation of maps, and while extensively using D3 in the
    background. They offer a free plan with a lot of options worth checking out, even
    though it is a commercial product.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 有一家名为CartoDB的公司，[http://cartodb.com/](http://cartodb.com/)，专门从事地图制作，并在后台广泛使用D3。他们提供一个免费计划，有很多值得一试的选项，尽管它是商业产品。
