- en: Chapter 3. Animated Data Display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we''re going to cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Making a motion chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a force directed graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a live range chart filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an image carousel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zooming and panning a chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the web notifications API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating interactive Geo charts from a dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are all living in an information age, where data is created in huge amounts
    every day. This excess amount of data is in dire need to be presented in a format
    that is accessible by the users.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover some common ways of doing animated data visualizations
    with minor interactions. Most of the examples will be data-driven documents, bounded
    to the page with D3 as well as with some other methods of animated data display.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Throughout the book we use D3, so it is good to know some of the origins of
    it. Mike Bostock, the brilliant core author the library, has created it as an
    successor to a library that he created during his Ph.D. studies called Protovis,
    taking into account the web standards and making performance improvements. He
    also has an amazing visualizations list mostly done for the New York Times available
    at his site [http://bost.ocks.org/mike/](http://bost.ocks.org/mike/).
  prefs: []
  type: TYPE_NORMAL
- en: Making a motion chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with a time-based data often you want to have a view, where the
    time changes will be visualized. One way of doing this is by using a motion chart
    that updates over time and that is what we will be creating with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a motion chart](img/9282OT_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using a toolkit for creating an interactive graph named **Rickshaw**
    that can be retrieved from [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/),
    and is part of the example code as well. Besides that we also need `D3.js` to
    be included, because Rickshaw is built on top of it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create the recipe, we will add JavaScript code that will randomly generate
    data and create an interactive graph using Rickshaw.
  prefs: []
  type: TYPE_NORMAL
- en: First, we add the external JavaScript and CSS in the head section. By convention,
    we can put the vendor libraries in a separate folder `js/vendor/ and css/vendor/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We add the placeholders for the chart in the body section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We continue with the main part, the `js/example.js` file, where we first create
    a color palette, and then the refresh rate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to create `Rickshaw.Graph` with SVG of size `900px` by `600px`
    and of the `line` type. We use the refresh rate we previously selected and the
    specified color palette.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Following this we can add a Y axis to the created graph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Because we created the required objects, they can get rendered to the screen
    by calling `.render` on them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We need data to display, so we will generate some random data, and add it to
    the graph. In order to add the data with a delay, use setInterval on a refreshRate
    period.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we should be seeing something similar to the figure shown in
    the beginning of the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Rickshaw.Color.Palette` we picked is with the scheme `munin`. There are
    also other palettes from which we can choose, such as `spectrum14` or `cool`.
    The palette is used in order to simplify and automate the picking of the colors
    for the graph. For example, if we manually call the .`color()` method multiple
    times.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It will always return the next color. Palette is a set of predefined colors
    that can be picked between given set of rules. For example, the original Nintendo
    Game Boy had four shades of green that could be used to display all the games.
    If we take a look at the implementation of the palettes in Rickshaw, we can notice
    that they are just a list of colors. The following is a snippet from Rickshaw
    source code definition of the palette `cool`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If we take a look at the `Rickshaw.Graph` creation, besides the SVG size, we
    picked the element with the ID `chart`, where the graph will get rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, we set the `renderer` type to `line`, but it can also be set to
    `area`, `stack`, `bar`, or `scatterplot`, depending on the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `series` property we use the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first argument is the array with data names, after that comes the palette,
    and last is the options object where we set the update `timeInterval`. Additionally,
    `maxDataPoints` was set to `50`, and that one designates how many samples of data
    are currently displayed, meaning that we would display the last 50 objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Later on, we called the `.render()` method on the `graph` and `yAxis` objects
    for the first time, and afterwards, in the `setInterval()` method we called for
    re-rendering of them on every data change. The data for rendering we constructed
    had the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The preceding format represents a value for the three lines at the specific
    point of time.
  prefs: []
  type: TYPE_NORMAL
- en: This data object is passed into the series using the `addData()` method defined
    for `Rickshaw.Series.FixedDuration` that sets the latest update for the `series`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If we need to get the current data for all the displayed frames, we could call
    the `graph.series.dump()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'That for example will return the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are various ways to customize the `chart` ID: filter information, add
    controls, or feed the data from a remote server. If we want to attach a legend,
    we can simply create such an object before the graph is rendered, and attach it
    to our graph object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Displaying a force directed graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a graph with some of the characters of the play
    *Hamlet* by *William Shakespeare*. The idea is to visualize the connections between
    the characters in a fun and interactive way. The type of graph that will be visualized
    is known as **force directed** graph.
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a force directed graph](img/9282OT_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to visualize the connections between the characters, they need to be
    stored somehow. There is a sample `data.json` file that is a part of the code
    examples that you can use. Although we do encourage you to create your own sample
    data or at least play around with the existing one, but for the purpose of simplicity,
    we will be using the one provided in the code examples.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be creating a JSON file to contain the relation and image information,
    the HTML, and the accompanying JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: First, we can start with the creation of the data for the recipe. We can define
    the `nodes` list, where the object would be placed with the properties `name`
    that will designate the name of the node, **icon** will be the URL of the image,
    and group will be
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: After adding the nodes in the data, we also need information about how they
    are connected. To do that we will add a list of `links` to the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now we can proceed with the creation of the HTML file. For this implementation
    we will be using `D3.js`, so we need to include it and also setup two CSS classes,
    one for the link and the other for the node text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: After this, we can start adding the parts in the main script. As in the previous
    examples, we will first add the SVG into the `body` element with some predefined
    size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now we can create the layout for the graph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to map the data from the JSON document with the force layout
    and create all of the `links` and `nodes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We then append `image` from the model, defined as `icon` and `text` with the
    name of the node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Also on force changes and updates, we will set up a listener that will update
    the links and nodes positions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will take a look at the CSS, and more specifically at `pointer-events`
    that we have set to `all`. This setting makes the element to be the target of
    mouse-events, when the pointer is in the interior or over the perimeter, and can
    only be used on the SVG elements. In order to disable the selection of the text,
    we use the CSS property `user-select`, and set it to the value of `none`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`user-select` is not consistent across browsers, and in order to use it, we
    can add browser specific CSS hack, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The layout used for this recipe is `d3.layout.force()` that does not create
    a fixed visual representation, but instead we define the parameters, such as `friction`,
    `distance`, and `gravity strength`. Depending on the data and mouse interactions,
    we get different views.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When constructing the layout after setting the parameters and the data information
    about the `links` and `nodes`, we need to call the `start()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We want to create the `g` element for all the `nodes` from our data, and set
    the appropriate CSS class `node`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Also, add a behavior to allow interactive dragging using `.call(force.drag)`.
  prefs: []
  type: TYPE_NORMAL
- en: The `g` element represents a container that can be used to group other elements.
    Transformations that are applied to the `g` element are also performed on all
    of its child elements. This feature makes the element a good pick for organizing
    different section of view blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More on the `g` element can be found in the SVG specification from [http://www.w3.org/TR/SVG/struct.html#Groups](http://www.w3.org/TR/SVG/struct.html#Groups).
  prefs: []
  type: TYPE_NORMAL
- en: The `force.drag()` method is predefined in the `d3.layout.force()` method. Drag
    event is fixed to work on `mouseover` to allow catch of moving nodes. When the
    `mousedown` event is received, the nodes are dragged to the mouse position. Interesting
    is that this behavior supports the touch events from mobile devices, such as iOS
    or Android. In order to disable the click events for the nodes while dragging,
    `mouseup` is captured and stopped from propagating.
  prefs: []
  type: TYPE_NORMAL
- en: To create an image for the nodes, we add SVG `image` tag with `xlink:href` to
    the URL from the data stored in `d.icon`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In order to have the update from the layout, there are `tick` events that are
    dispatched on each tick of the visualization. In order to keep the elements updated,
    we added a listener for the event.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The listener sets the correct positions for the movements to the `link` and
    `node`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the more obvious options here is to add more interactions to the visualization.
    Nodes can be made collapsible and links can be added to the nodes. Relationships
    between the nodes can be set to more fine-grained levels There are ways to make
    the data refresh over time and reload certain portions of the graph. If needed,
    there can be preset expected layout, so that the node will try to confirm a certain
    positioning.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Learn more on D3 force layout and the related functionality from [https://github.com/mbostock/d3/wiki/Force-Layout](https://github.com/mbostock/d3/wiki/Force-Layout).
  prefs: []
  type: TYPE_NORMAL
- en: Making a live range chart filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with large amounts of data, we usually want to add some way of
    filtering or picking up what data to show. This recipe will cover a simple range
    filter for the graph and a chart that displays time-varying series of data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Making a live range chart filter](img/9282OT_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the same toolkit from the *Making a motion chart* recipe for
    creating interactive graphs. The necessary library Rickshaw can be retrieved from
    [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/),
    and is part of the example code as well. Besides that we also need D3, because
    Rickshaw works on top of it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create an HTML page containing a JavaScript file while generating a
    random data for the graph, and also add additional filtering elements.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will make an HTML page and include the required CSS by the libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we add an additional file `legend.css` that contains the layout
    information about the graph legend. We can then add our custom CSS file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The HTML placeholders for the graph, legend, and slide will be the regular `div`
    elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We add the dependencies for the libraries. Besides Rickshaw and its dependency
    D3, we are going to add jQuery and jQuery UI, because we will be using controls
    from there. And now, we can proceed to the main JavaScript, and start with defining
    the color palette and the refresh rate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to create the graph in the chart element with `900px` by `500px`
    size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As for the `slider` property, Rickshaw provides us with a ready control that
    we can connect to the graph we created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: To have a Y axis drawn, we can create it, and can connect it to our graph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: For creation of a legend on the colors and names of the data samples displayed,
    there is a control that we can use and connect with our graph as well, while we
    also specify the element where it will get rendered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Because this example has a time-series component, we will generate random data.
    After the generation of the data, we call `graph.series.addData(data)` and re-render
    the `graph` and `yAxis` property. This generation, data update, and rendering
    happens on every `refreshRate` milliseconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at the graph's series input parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Besides the graph data we also have a `name` and a `color` property. Now, the
    first thing you might ask yourself is, why have a `color` property and input a
    palette as well? Well, we do this in order to enable the other plugins to be able
    to read this information.
  prefs: []
  type: TYPE_NORMAL
- en: One of these plugins is `Rickshaw.Graph.Legend` that constructs a legend-box
    displaying info for each of the data streams.
  prefs: []
  type: TYPE_NORMAL
- en: We also add a range-filtering on the X axis with `Rickshaw.Graph.RangeSlider`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: In the background, the `slider` property uses jQuery UI control that is set
    to `range:true`. The minimum and maximum values are used from the current graph
    data. The `slider` property has a `slide` event that is used to limit the sample
    size displayed on the graph.
  prefs: []
  type: TYPE_NORMAL
- en: Because there is data being added constantly to the graph, the `slider` properties
    min and max values are set accordingly by an event from the graph. These are some
    of the considerations that you need to keep in mind while you are developing a
    custom control.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9282OT_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Slider set to only show a given portion of time. Because the time changes the
    slider is moved alongside with the data.
  prefs: []
  type: TYPE_NORMAL
- en: Making an image carousel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Image carousels are among the most popular marketing and showcase tools used
    on websites. They can also be used to show image galleries or presentations.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe we're going to build an image carousel. It will support automatic
    timed transitions that stop if the user moves over the carousel area. It will
    have a navigation area consisting of control rectangles denoting the currently
    active images and the number of remaining images.
  prefs: []
  type: TYPE_NORMAL
- en: This will be a 3D carousel utilizing HTLM5 features, such as CSS3 3D transforms.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need three images in the directory along with our code. They should
    be named `1.jpg`, `2.jpg`, and `3.jpg` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be creating the image carousel by using jQuery, HTML5, and CSS transformations.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will create an HTML page with a carousel and the gray image controls.
    We're going to position the controls in the middle-bottom section of the carousel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: To get a 3D view that has depth, the main container must have a `perspective`
    property. It denotes the distance of the viewer from the screen. It will make
    nearby things look larger, and distant things look smaller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We're going to place all our images inside the rotator, then rotate the rotator
    itself. To do this, rotations on the rotator must preserve the 3D transforms of
    the child elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additionally, both the rotator and the images will have a transition animation.
    We specify this by adding the `transition` property. In our example, transitions
    will work on transforms and will be one second long.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The code that animates the carousel and makes the controls clickable will be
    in `example.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We will place all the images in their appropriate position in the 3D space,
    each one rotated by a multiple of an angle and moved by a calculated amount. For
    more information see the *How it works...* section of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: For each image we add a control marker, which can activate that image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's write the functions that change the position of the carousel.
    The `change` function changes the position by `dir` elements, and `changeTo` changes
    the position directly to the specified element. Then we can start our carousel
    timer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![How it works...](img/9282OT_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Building our carousel depends on the number of images we''re going to use.
    To get a better sense of what exactly happens when we apply our transforms, lets
    look at the top view of a carousel. The preceding figure shows a carousel with
    five sides. Each side is translated away from the center point by a distance `z`,
    then rotated by an angle `a` multiple times. The angle can be calculated as follows:
    `a = 360 / number Of sides`.'
  prefs: []
  type: TYPE_NORMAL
- en: The translation `z` however is slightly harder to calculate. To do that, we
    need to look at the triangle that consists of `z` and half of the sides width.
    By applying a trigonometric equation `tan(a/2) = (w/2) / z` we can calculate `z
    = w/2 / tan(a/2)`.
  prefs: []
  type: TYPE_NORMAL
- en: To rotate the carousel, we rotate the `rotator` parent by an angle `a` every
    5 seconds. The user is allowed to click on the controls to change the rotation.
  prefs: []
  type: TYPE_NORMAL
- en: We also move `rotator` in the opposite direction by `z` to make the distance
    of the front element in the carousel the same, as if it hasn't been translated.
  prefs: []
  type: TYPE_NORMAL
- en: We hope that this recipe added some fun and freshness into the slightly dull
    topic of carousel making, by using some new HTML5 features, which will surely
    wow the users.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some of the CSS3 features are not widely available as of this writing. Internet
    Explorer 9, which otherwise does support a lot of HTML5 doesn't have them, though
    they're available in Internet Explorer 10\. Before using these techniques, review
    the target browser requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Zooming and panning a chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The charts we discussed in the preceding chapter of this book were static. As
    such, they're great for visualizing limited quantities of data. However, when
    the dataset grows too large, users might be needed to interactively choose the
    range of data shown in the chart.
  prefs: []
  type: TYPE_NORMAL
- en: To enable this, we're going to make a chart that is capable of interactive controls,
    such as zooming and panning. The Flot chart library easily supports this with
    its navigation plugin.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we're going to show a one week temperature history at 30 minute
    increments. We're going to allow the user to zoom and pan the history.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll need to download Flot from the official website [http://www.flotcharts.org/](http://www.flotcharts.org/)
    and extract the contents to a separate folder `flot`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create this recipe, we will add Flot, jQuery, and create an HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a basic HTML page with a placeholder for our chart. We're also
    going to include jQuery (needed by Flot), Flot itself, and the Flot navigate plugin.
    Flot needs to draw the chart canvas a placeholder `div`, so we're going to provide
    one. The placeholder needs to have `width` and `height` specified via CSS; otherwise
    Flot may fail to draw the chart correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We're going to add our code in `example.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To draw the chart, first we wrote the function `getData` to generate some convincing
    looking random data of temperature that rises during the day and falls during
    the night. Because it is callback based, we can replace this function with one
    that fetches the data from a server.
  prefs: []
  type: TYPE_NORMAL
- en: The plot drawing function `$.plot` takes three arguments. The first is the plot
    placeholder, the second is an array of series we need to draw, and the third are
    drawing options. We're going to pass only one series.
  prefs: []
  type: TYPE_NORMAL
- en: The new additions to our chart are to the plot options and the zoom-out button.
    We specify the zoom and pan range in the axes options. Our Y axis doesn't support
    zooming and panning, so it has been disabled.
  prefs: []
  type: TYPE_NORMAL
- en: The `zoomRange` option specifies the minimum and maximum range of the full plot
    when zooming. For example, our options specify that the plot will zoom to show
    at least half a day and at most a week in its full range.
  prefs: []
  type: TYPE_NORMAL
- en: The `panRange` option specifies the minimal minimum and maximal maximum on the
    X axis. In our example, we specify that the user cannot pan the chart to make
    its minimum value go below `weekAgo`, and cannot pan it to make its maximum value
    go above `now`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we specify that zooming and panning will be interactive. This means
    that the user can zoom-in using double-click, and can pan it by dragging with
    the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: To allow the user to reset the zoom, we add a `zoomOut` button, which calls
    the `zoomOut` function. We need to update this function whenever we redraw the
    plot, because the object returned from the `$.plot` call changes. This way multiple
    `getData` calls are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we've added interactivity to our charts, allowing the user to customize
    the range of data they would like to view. Flot navigation works with all kinds
    of charts; be sure to check out the preceding chapter to see an overview of some
    of the chart types that are supported.
  prefs: []
  type: TYPE_NORMAL
- en: Using the web notifications API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web notifications are one of the newer features added into modern browsers.
    They are intended as alerts for the user outside of the web page context. The
    idea is for them to be browsers intended, for example, when using a mobile browser
    notification could go into the home screen of the device. On the desktop usually
    they show up on the right-corner of the screen, at least on most desktop environments.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the web notifications API](img/9282OT_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the purpose of this example, we will be using data derived from Project
    Gutenberg [http://www.gutenberg.org/](http://www.gutenberg.org/). The data are
    the tips from the chapter *Use of spies* from *Sun Tzu's -Art of war* and can
    be found in this recipe code example under `data.json`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create this recipe we will create an HTML file, and use jQuery for simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: First, we can start with the HTML part, where we just create a simple `button`
    and a `div` element with the ID `fallback` that we are going to use, if the browser
    does not support notifications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Let's first create the `notification.js` file that we will use as utility to
    create `simpleNotifations.show(data)`. The first check we have to do is verify
    support for `webkitNotifications`, the only full implementation at the time of
    writing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Next is the check for the real-standard-based web notification object, where
    in future, as browsers implement it more and more, it should be the first one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Finally the case; if there is no support for any type of notification by the
    system we just use a callback to handle this case, where we also close the utility.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Next, we can continue with creating the `display.js` file that will get a random
    quote from the data, and call the previously defined `simpleNotification.show()`
    method. First we will do the fetching.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Because we want some default behavior for all the notifications, such as icon,
    default message, or fallback function, we do the callout with a default `data`
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will take a deeper look at the `notification.js` file, where most of the
    notification logic is. The check tests we did on the notifications `if (window.webkitNotifications)`
    and `if (window.Notification)` try to see if there is such object in the browser.
    If no such object is there, this means there is no support for that type of notification.
    While on the other hand, if the `if` condition was met, this means we have support,
    and can ask for permission.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: After that, we are free to create the notification and show it with the given
    parameters for `icon`, `title`, and `body`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want the notification to hide after a given timeout, we add the following
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: On the other hand, if we do not have the permission to display a notification,
    we need to request it from the user, where we can do the call to our function
    once again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The request for the permission must come from a user-triggered event on some
    HTML element. In our case this is the `onClick` function on the button. More specifically
    the jQuery click `$("#show").click(function (){ ...}`.
  prefs: []
  type: TYPE_NORMAL
- en: We don't need to get into too much details for the fetching of the data, but
    in our default object we have the `icon` parameter with the value `images/war.png`
    that we will get used for the notification, as well as the `fallback` function
    and the `timeout` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, Chrome is the only browser with full support for the
    notifications for quite some time, but Safari 6.0 and Firefox 22 Aurora also have
    initial implementations.
  prefs: []
  type: TYPE_NORMAL
- en: The full specifications for web notifications can be found from [http://www.w3.org/TR/notifications/](http://www.w3.org/TR/notifications/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating interactive Geo charts from a dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to create cool-looking interactive Geo charts,
    and how to use them for the display of data. These are becoming very common for
    the display of statistics on larger geographical area, usually from election results
    or global warming effects. In order to have a map covering multiple different
    countries, we will visualize the member and member applicant stats of the Commonwealth
    of Nations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Commonwealth of Nations is a voluntary association of 54 independent sovereign
    states (one of whose membership is currently suspended). Most are former British
    colonies, or dependencies of these colonies. No one government in the Commonwealth
    exercises power over the others, as in a political union. Rather, the relationship
    is one of an international organization through which countries with diverse social,
    political, and economic backgrounds are regarded as equal in status, and cooperate
    within a framework of common values and goals, as outlined in the Singapore Declaration,
    which can be read from
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Member_states_of_the_Commonwealth_of_Nations](http://en.wikipedia.org/wiki/Member_states_of_the_Commonwealth_of_Nations).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating interactive Geo charts from a dataset](img/9282OT_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are JSON object with definition of boundaries for valorous areas and scale
    levels mostly derived from the public domain dataset available at [http://www.naturalearthdata.com/downloads/](http://www.naturalearthdata.com/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we use a `world-data.json` file that can be found as part of the
    code examples.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After getting the `world-data.json` file. we can start by creating the HTML
    and JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first take a look at this country boundaries data in the `world-data.json`
    file for example, at the Bahamas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: In their properties we have the name of the country, and the geometry of the
    country represented as a polygon with multiple points.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many different ways to create and represent the boundaries data. In
    order to create your own boundaries or get already available data, Open Street
    Map( [http://www.openstreetmap.org/](http://www.openstreetmap.org/) ) is a great
    project that offers this options. For example, one of the tools called Osmosis
    can be used to get the vector data about certain objects at many different zoom
    levels from [http://wiki.openstreetmap.org/wiki/Osmosis](http://wiki.openstreetmap.org/wiki/Osmosis).
  prefs: []
  type: TYPE_NORMAL
- en: We can proceed with adding the CSS and dependencies to `D3.js` in the head.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: In the body part we directly start with the `example.js` file and define helpers
    with the data about the country names part of the euro-zone and utilities for
    generation of random numbers and colors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: There we add a utility function for getting a random color, if the country is
    part of the zone and `#bbb`, if not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Then to get the cool frame-like effect, we set the margins around it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Next we define the types of projection, zoom behavior, and path, where the zoom
    behavior add a callback on the `zoom` event to the `move()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: We create the SVG image with the previously set values for width and height,
    and call the zoom behaviors to get into the selected zoom level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: First, we create the `g` element for the selected features of the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: We then add the frame around the map by creating the SVG rectangle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to get the data from the `world-data.json` file, create the paths
    for the countries, and fill them with the appropriate color depending on whether
    `d.properties.name` is part of the needed group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the move() function is called on zoom.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, `d3.geo.mercator()` constructs a **Mercator projection** from a spherical
    data representation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Mercator projection is a cylindrical map projection created by Gerardus
    Mercator in 1569\. It is very commonly used to represent maps, but it has the
    problem that the size and shape of the objects gets distorted as we move from
    the Equator towards the poles. More on Mercator projection can be found from [https://en.wikipedia.org/wiki/Mercator_projection](https://en.wikipedia.org/wiki/Mercator_projection)
    and [https://en.wikipedia.org/wiki/File:Cylindrical_Projection_basics2.svg](https://en.wikipedia.org/wiki/File:Cylindrical_Projection_basics2.svg).
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9282OT_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `d3.geo.path()` method creates a new geographic generation with some predefined
    settings. We set this path generator to use our `projection` type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The `d3.behavior.zoom()` method enables us to add automatic zoom functionality
    to our `projection` type with the given scale and range of zoom in `scaleExtent`.
    Additionally, this creates a listener on the `zoom` event doing a call to the
    `move()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Main features that creates the counties is that we get the feature data from
    `world-data` and create the SVG path that actually represent individual countries,
    and we can then style and fill it with color.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: This type of map is also known as the choropleth map meaning a thematic map,
    where some statistical variable is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The file `js/world-data.json` contains the borders of each country with some
    metadata. The metadata is matched against our commonwealth list of countries.
    If they are a match, the country is colored. Note that there are few more countries
    that are not available in our map data.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9282OT_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with JavaScript and maps there are two formats that often pop up.
    One is GeoJSON ([http://www.geojson.org/](http://www.geojson.org/)), a format
    for a variety of geographic data structures. The other is named TopoJSON ([https://github.com/mbostock/topojson](https://github.com/mbostock/topojson)),
    and it is an extension of GeoJSON that encodes topology. TopoJSON uses line segments
    called arcs to get better characteristics than GeoJSON.
  prefs: []
  type: TYPE_NORMAL
- en: There is a company named CartoDB, [http://cartodb.com/](http://cartodb.com/)
    that specializes in the creation of maps, and while extensively using D3 in the
    background. They offer a free plan with a lot of options worth checking out, even
    though it is a commercial product.
  prefs: []
  type: TYPE_NORMAL
