- en: Chapter 5. Remote Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Remote server/host access using SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling or enabling SSH root login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting remote access with key-based login into SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying files remotely
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Kerberos server with Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote server/host access using SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SSH,** or **Secure Shell,** is a protocol which is used to log on to remote
    systems securely and is the most commonly used method for accessing remote Linux
    systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see how to use SSH, we need two Ubuntu systems. One will be used as a server
    and the other as a client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use SSH, we can use freely available software called **OpenSSH**. Once the
    software is installed, it can be used by the command `ssh` on the Linux system.
    We will see how to use this tool in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: If the software to use SSH is not already installed, we have to install it on
    both the server and the client system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The command to install the tool on the server system is:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output obtained will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to install the client version of the software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output obtained will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the latest versions, the SSH service starts running as soon as the software
    is installed. If it is not running by default, we can start the service by using
    this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output obtained will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if we want to log in from the client system to the server system, the command
    will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `remote_ip_address` refers to the IP address of the server system. The
    command also assumes that the username on the client machine is the same as that
    on the server machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to log in with a different user, the command will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output obtained will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to configure SSH so we can use it as per our requirements. The
    main configuration file for `sshd` in Ubuntu is located at `/etc/ssh/sshd_config`.
    Before making any changes to the original version of this file, create a backup
    using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The configuration file defines the default settings for SSH on the server system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we open the file in any editor, we can see that the default port declaration
    on which the SSHD server listens for the incoming connections is `22`. We can
    change this to any non-standard port to secure the server from random port scans,
    hence making it more secure. Suppose we change the port to `888`, then the next
    time the client wants to connect to the SSH server, the command will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output obtained will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, when we run the command without specifying the port number, the
    connection is refused. Next, when we mention the correct port number, the connection
    is established.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH is used to connect a client program to an SSH server. On one system, we
    install the `openssh-server` package to make it the SSH server, and on the other
    system we install the `openssh-client` package to use it as a client.
  prefs: []
  type: TYPE_NORMAL
- en: Now, keeping the SSH service running on the server system, we try to connect
    to it through the client.
  prefs: []
  type: TYPE_NORMAL
- en: We use the configuration file of SSH to change the settings, like the default
    port for connecting.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling or enabling SSH root login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Linux systems have a root account by default, which is enabled by default.
    If unauthorized users get SSH root access to the system, it is not a good idea
    because this will give an attacker complete access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: We can disable or enable the root login for SSH as per our requirements to prevent
    the chances of an attacker getting access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need two Linux systems to be used as a server and client. On the server system,
    install the package `openssh-server`, as shown in the preceding recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will see how to disable SSH root login, and then we will also see
    how to enable it again:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, open the main configuration file of SSH, `/etc/ssh/sshd_config`, in
    any editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now look for the line that reads as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the value from `yes` to `no`. Then, save and close the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output obtained will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once done, restart the SSH daemon service using the command shown here:![How
    to do it…](img/B04234_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's try to log in as root. We should get an error, `Permission Denied`,
    as the root login has been disabled:![How to do it…](img/B04234_05_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now whenever we want to log in as root, first we will have to log in as a normal
    user. After that, we can use the `su` command and switch to the root user. So,
    the user accounts which are not listed in the `/etc/sudoers` file will not be
    able to switch to the root user and the system will be more secure:![How to do
    it…](img/B04234_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, if we want to again enable SSH root login, we just need to edit the`/etc/ssh/sshd_config`
    file again and change the option from `no` to `yes` again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output obtained will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it…](img/B04234_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, restart the service again by using the following command:![How to do it…](img/B04234_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now if we try to log in as root again, it will work:![How to do it…](img/B04234_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we try to connect to a remote system using SSH, the remote system checks
    its configuration file at `/etc/ssh/sshd_config` and according to the details
    mentioned in this file, it decides whether the connection should be allowed or
    refused.
  prefs: []
  type: TYPE_NORMAL
- en: When we change the value of `PermitRootLogin` accordingly, the working also
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose we have many user accounts on the system and we need to edit the `/etc/ssh/sshd_config`
    file in such a way that remote access is allowed only for a few mentioned users.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now restart the `ssh` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we try to log in with `user1`, the login is successful. However,
    when we try to log in with `user2`, which has not been added to `/etc/ssh/sshd_config`
    file, the login fails and we get the error `Permission denied`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/B04234_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Restricting remote access with key-based login into SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though SSH login is protected by using passwords for the user account,
    we can make it more secure by using key-based authentication into SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see how key-based authentication works, we will need two Linux systems (in
    our example, both our Ubuntu systems). One should have the OpenSSH server package
    installed on it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use key-based authentication, we need to create a pair of keys­—a private
    key and a public key.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the client or local system, we will execute the following command to generate
    the SSH key-pair:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output obtained will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While creating the key, we can accept the default values or change them as per
    our wishes. It will also ask for a passphrase, which you can set as anything or
    else leave it blank.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The key-pair will be created in the location—`~./ssh/`. Change to this directory
    and then use the command—`ls –l` to see the details of the key files:![How to
    do it...](img/B04234_05_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that the `id_rsa` file can be read and written only by the owner.
    This permission ensures that the file is kept secure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we need to copy the public key file to the remote SSH server. To do so
    we run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output obtained will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An SSH session will be started and will prompt you to enter the password for
    the user account. Once the correct password has been entered, the key will get
    copied to the remote server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the public key has been successfully copied to the remote server, try to
    log in to the server again using the `ssh 192.168.1.101` command:![How to do it...](img/B04234_05_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that now we are not prompted for the user account's password. Since
    we had configured the passphrase for the SSH key, it has been asked. Otherwise,
    we would have been logged into the system without being asked for the passphrase.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we create the SSH key-pair and move the public key to the remote system,
    it works as an authentication method for connecting to the remote system. If the
    public key present in the remote system matches the public key generated by the
    local system, and if the local system has the private key to complete the key-pair,
    login happens. Otherwise, if any key file is missing, login is not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Copying files remotely
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing a system remotely is great using SSH. However, many would not know
    that SSH can also help in uploading and downloading files remotely.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To try the file transfer tools, we only need two Linux systems which can ping
    each other. On one system, the OpenSSH package should be installed and the SSH
    server should be running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linux has a collection of tools which can help to transfer data between networked
    computers. We will see how a few of them work in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have a file, `myfile.txt`, on the local system, which we want to
    copy to the remote system. The command to do so is given here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The output is shown in the following screenshot:![How to do it...](img/B04234_05_20.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, the remote location where the file will be copied to is the `Desktop`
    directory of the user account being used to connect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we check on the remote SSH system, we can see that the file `myfile.txt`
    has been copied successfully:![How to do it...](img/B04234_05_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s suppose we have a `mydata` directory in the local system, which
    we want to copy to the remote system. This can be done by using the `-r` option
    in the command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, we check on the remote server and see that the `mydata` directory has
    been copied with all its files:![How to do it...](img/B04234_05_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will see how to copy a file from the remote system back to the local
    system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, create a file on the remote server. Our file is `newfile.txt`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, on the local system, move to the directory where you wish to copy the
    file. Then, run the command as shown to copy the file from the remote system to
    the local system in the current directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_05_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also use `sftp` to interactively copy the files from the remote system,
    using FTP commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do this, we first start the connection, using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Have a look at the execution of the command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we can run any FTP command. In our example, we try to get the file from
    the remote system using the `get` command, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_05_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the local system, we can now check if the file has been copied successfully
    or not.![How to do it...](img/B04234_05_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH also works through GNOME. So, instead of using the command line, we can
    use the GNOME File Explorer to start a SSH connection with the remote system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the GNOME File Explorer, go to **File** -> **Connect to Server...**.![How
    to do it...](img/B04234_05_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next window, enter the details as required and click on **Connect**.![How
    to do it...](img/B04234_05_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we can copy the files graphically from the remote system to the local system,
    or vice-versa.![How to do it...](img/B04234_05_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To copy files remotely over SSH, we use the tool `scp`. This helps with copying
    a single file or a complete directory from the client system to a defined location
    on the server system. For copying directory with all its content we use the `-r`
    option with the command.
  prefs: []
  type: TYPE_NORMAL
- en: We use the same tool to copy files from the remote SSH server to the client
    machine. However to do this we need to know the exact location of the file on
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: Like `scp`, we have `sftp` tool, which is used to copy files over `ftp` from
    server to client. **SFTP** (**Secure File Transfer Protocol**) is better than
    FTP and ensures that data is transferred securely.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly we use the GNOME File Explorer to graphically connect and transfer files
    from server to client and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Kerberos server with Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kerberos is an authentication protocol for allowing secure authentication over
    untrusted networks by using secret-key cryptography and trusted third parties.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get Kerberos set up and running, we need three Linux systems (in our example,
    we have used Ubuntu). They should be able to communicate with each other and they
    should also have accurate system clocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have given the hostname to each system as mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kerberos system: `mykerberos.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SSH Server system: `sshserver.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Client system: `sshclient.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After doing this, edit the `/etc/hosts` file in each system and add the following
    details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04234_05_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The IP address and the hostname can be different for your systems. Just make
    sure that after doing these changes they can still ping with each other.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's see how to complete the setup of the Kerberos server and the other
    systems for our example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to install the Kerberos server. To do this, we will run the
    given command on the `mykerberos.com` system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_05_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'During the installation process, a few details will be asked for. Enter the
    details as mentioned here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the question `Default Kerberos version 5 realm`, the answer in our case
    is `MYKERBEROS.COM`:![How to do it...](img/B04234_05_34.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the next question, `Kerberos servers for your realm:` the answer is `mykerberos.com`:![How
    to do it...](img/B04234_05_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next screen, the question is `Administrative server for your realm:,`
    and its answer is `mykerberos.com`:![How to do it...](img/B04234_05_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we have answered all the questions, the installation process will be resolved.
    The next step is to create a new realm. To do so, we use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The output is as shown in the following screenshot:![How to do it...](img/B04234_05_37.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During this process, we will be asked to create a password for the Kerberos
    database. We can choose any password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to edit the `/etc/krb5.confand` file and modify the details as
    shown in the following screenshot. If any line does not already exist in the file,
    we also need to enter those. Go to the `libdefaults` section in the file and modify
    the value as shown here:![How to do it...](img/B04234_05_38.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move down to the `realms` section and modify the details as shown here:![How
    to do it...](img/B04234_05_39.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, go to `domain_realm` section and enter the lines as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_05_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to add principles or entries to the Kerberos database which will
    represent users or services on the network. Doing so, we will use the tool `kadmin.local`.
    The principle must be defined for every user that participates in Kerberos authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the tool by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start the `kadmin.local` prompt, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_05_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To see the existing principles, we can type this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now to add a principle for a user, we use the `addprinc` command. To add the
    `tajinder` account, we have used the command as shown here:![How to do it...](img/B04234_05_42.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To add the `admin` role to the account being added, the command is shown in
    the following screenshot:![How to do it...](img/B04234_05_43.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we give the admin role to any user, then uncomment the `*/admin` line in
    `/etc/krb5kdc/kadm.acl` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To check if the principle has been applied correctly, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Once done with the setup of Kerberos system, we now move to the client system.
    First, we need to install the client package for Kerberos by using the command
    shown in the following screenshot:![How to do it...](img/B04234_05_44.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the installation process, the same questions will be asked, which were
    asked during the installation of the Kerberos server. Enter the same details here
    as we entered earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After completing installation, check if we are still able to ping `mykerberos.com`
    from the `sshclient.com` system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now to get the ticket for the client machine, depending on the principle that
    we created in `mykerberos.com`, the command to be used is shown here:![How to
    do it...](img/B04234_05_45.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the command runs perfectly, it means it is working fine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once done with the previous command, we move to the third system which we are
    using as SSH server. We need to install the SSH server and `krb5-config` package
    on this system. To do so, we run the command as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_05_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, we will be asked the same questions which were asked during the installation
    of the Kerberos server. Enter the same details here as previously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now edit the `/etc/ssh/sshd_config` file to enable the following lines:![How
    to do it...](img/B04234_05_47.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the `#` and also change the value to `yes` if it is not already. After
    making the changes, restart the SSH server using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will configure Kerberos server so that it works with the SSH server.
    To do so, we run the `kadmin.local` tool and then run the following commands:![How
    to do it...](img/B04234_05_48.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The above command in the image adds the principle for the SSH server. Next,
    we run the command shown in the following screenshot to create the key file:![How
    to do it...](img/B04234_05_49.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we shall copy the key file from the Kerberos server system to the SSH server
    system using this command:![How to do it...](img/B04234_05_50.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have copied the file to `/tmp/` directory of the SSH server system. Once
    the copy completes, move the file to the `/etc/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now on the client system, edit the `/etc/ssh/ssh_config` file and modify the
    lines as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now on the client system, get the ticket by running this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Once the above command works, try to log in into the SSH server system from
    the client system using `ssh`:![How to do it...](img/B04234_05_51.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should get authenticated without being asked for the password.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we install the required packages on the first system to create a Kerberos
    server. After installation, a realm is created for server configuration. To complete
    the configuration, we perform the changes as mentioned in the `/etc/krb5.conf`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we add a principle to the Kerberos database to add the user account to
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: Once this is done, we move to the next system and install the Kerberos user
    package to create the client system. Then, we get a ticket from the Kerberos server
    system for the user account to be used on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we proceed to the third system where we install the `Openssh-server` package
    to create a SSH server. Then, we edit the configuration file of SSH to enable
    authentication.
  prefs: []
  type: TYPE_NORMAL
- en: We now come back to the Kerberos server system and add a principle for the SSH
    server. We create a key for the SSH server and then transfer this key file from
    the Kerberos server to the SSH server using the `scp` command.
  prefs: []
  type: TYPE_NORMAL
- en: Now if we try to log in to the SSH server system from the client system, we
    get logged in without being asked for the password, as the key we generated earlier
    is being used for authentication.
  prefs: []
  type: TYPE_NORMAL
