- en: Chapter 2. Setting up your Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will set up your computer so that you can develop web applications
    using PHP and CouchDB. There are a lot of technologies that come into play when
    developing web applications, so we'll need to make sure that our systems are configured
    properly before we start writing the code.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Discuss your operating system and how to install the necessary components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about the tools needed to develop PHP and CouchDB applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure our web development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about Homebrew and install CouchDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Homebrew to install Git for version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confirm that you can make a request to CouchDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you ready? Good! Let's get started by talking about operating systems and
    the role they play in setting up your development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Operating systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will focus primarily on the Mac OS X Operating System (10.5 and later).
    While it's possible to develop applications with PHP and CouchDB on any operating
    system, I will be restricting most of my discussions to Mac OS X for simplicity
    and brevity. If you're using a Mac, you can skip ahead to the next section, titled
    *Setting up your web development environment on Mac OS X*.
  prefs: []
  type: TYPE_NORMAL
- en: If you're running Windows or Linux, don't worry! I'll give you some setup tips
    to get you started, and then you can take it from there. Again, it's worth noting
    that the command line statements that I use in this book are meant for use on
    a Mac OS. With that in mind, things such as navigating to your working directory,
    the location of files, and many more may not work as described.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're running Windows, there are a few easy steps you need to follow to
    get your machine up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache and PHP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can simplify the setup of your Apache and PHP environment by using WAMP
    ([http://www.wampserver.com/en/](http://www.wampserver.com/en/)) or XAMPP ([http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html)).
    Both options make it incredibly easy for you to get Apache and PHP set up with
    just a few clicks of the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Git** is available for every operating system. To install Git for Windows,
    navigate to Git''s homepage ([http://git-scm.com/](http://git-scm.com/)), and
    click on the Windows icon.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing CouchDB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information on installing CouchDB for Windows using Apache''s
    helpful install pages here: [http://wiki.apache.org/couchdb/Installing_on_Windows](http://wiki.apache.org/couchdb/Installing_on_Windows).'
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's difficult to standardize the `install` methods for Linux because there
    are many different flavors and configurations. But if you are using a generic
    distribution, such as Ubuntu, all of the required tools can be installed with
    just a few simple command line statements.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache and PHP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`apt-get` is a powerful tool that we''ll use to install applications and utilities
    in your system. Let''s start by making sure that `apt-get` is up-to-date, by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make sure that we can host our PHP pages by installing Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have Apache, let''s install PHP and a few other components needed
    to run the code in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We have everything that is needed to host websites. So, let''s restart Apache
    in order for our changes to take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Installing Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll use Git for source control; luckily installing it is incredibly easy
    with the help of our friend, `apt-git`. Install Git by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing CouchDB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CouchDB is the database that we'll use through the course of this book. In this
    section, we'll install and start it using the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Install CouchDB with `apt-get:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Start CouchDB as a service by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That was pretty easy, right? If you are using another Linux distribution, then
    you might have to do some research on how to get all of the required applications
    and tools installed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we got that out of the way, let's discuss the setup of a web development
    environment for Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your web development environment on Mac OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will go step-by-step and ensure that our development environment
    is set up correctly. From here on out, I'm assuming you are using a machine that
    is running Mac OS X without any special modifications to Apache or PHP. If you've
    done a lot of customization to your development environment, then you probably
    already know how to configure your machine so that everything works properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that I''ve bored you to death with disclaimers, let''s get things rolling!
    The first part of our journey is to meet an application that we will spend a lot
    of our time with: `Terminal`.'
  prefs: []
  type: TYPE_NORMAL
- en: Terminal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Terminal` is a built-in command line utility for Mac OS X. Using the command
    line can be a bit of a strange experience when you are just getting started but
    is extremely powerful once it''s mastered. If the basic commands, such as `cd,
    ls`, and `mkdir` look like gibberish to you, then you might want to do some quick
    research on the UNIX command line.'
  prefs: []
  type: TYPE_NORMAL
- en: Here's how you open `Terminal:`
  prefs: []
  type: TYPE_NORMAL
- en: Open **Finder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Applications**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the folder titled **Utilities**, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Terminal** icon right into your dock; you will be using it a lot!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the icon for **Terminal** in your dock.![Terminal](graphics/3586_02_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Time for action — using Terminal to show hidden files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have `Terminal` up and running, let's get familiar with it by running
    a quick command that exposes all of the hidden files on your computer. Whether
    you know it or not, there are a variety of files that are hidden, and they will
    need to be visible in order for us to complete the setup of our development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following command to allow the Finder to show hidden files, press
    *Enter* when you are ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In order to see the files, you will need to restart the `Finder`, type the following
    command, and press *Enter:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We just used `Terminal` to run a special command that configured `Finder` to
    show the hidden files and then ran another command to restart the `Finder`. It''s
    not important for you to remember these commands or fully understand what they
    mean; you probably will never have to type this again. If you look around your
    computer you should see quite a few files that you haven''t seen before. Here''s
    a quick example of what my hard drive looks like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](graphics/3586OS_02_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If it irritates you to see so many files, you can hide hidden files again once
    the setup is complete. You can do this by simply running the following command
    in `Terminal:` defaults write `com.apple.finder AppleShowAllFiles FALSE`. Then
    by restarting the `Finder` by running: `killall Finder`.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that all of the files on our machine are shown, let's talk about text editors,
    which will be the primary way you'll view and edit your development project.
  prefs: []
  type: TYPE_NORMAL
- en: Text editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to write code, you will need a solid text editor. There are a lot of
    text editors out there, and you can use whichever one you prefer. All of the code
    in this book will work with any of them. I personally prefer `TextMate` because
    of its simplicity and ease-of-use.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download and install `TextMate` here: [http://macromates.com/](http://macromates.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Apache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Apache** is an open source web server and the engine that will run the PHP
    code that you''ll write in this book. Luckily, Apache comes pre-installed on all
    installations of Mac OS X, so all we need to do is start it using `Terminal`.'
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to start Apache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s all it takes to get Apache up and running on your computer. Apache
    won''t let you turn it on if it''s already running. Try typing that same statement
    again; your machine will alert you that it''s already running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache](graphics/3586OS_02_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s very unlikely, but on the off chance that your machine does not have
    Apache installed, you can install it by following the instructions on Apache''s
    website: [http://httpd.apache.org/docs/2.0/install.html](http://httpd.apache.org/docs/2.0/install.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Web browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You probably use a web browser every day when surfing the Internet, but it will
    also double up as a powerful debugging tool for us. I will use Chrome as my web
    browser, but the up-to-date versions of Safari, Firefox, or Internet Explorer
    will work just fine as well. Let's use our web browser to check that Apache is
    accessible.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — opening your web browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to access the Apache service on our machine by opening a web browser,
    and navigating to Apache's URL.
  prefs: []
  type: TYPE_NORMAL
- en: Open your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `http://localhost` into the address bar, and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will display the following message to you:![Time for action — opening
    your web browser](graphics/3586OS_02_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the web browser to access Apache, and in return, it showed us a quick
    verification that everything was hooked up correctly. Our computer knew that we
    were trying to access our local Apache service because of the URL `http://localhost`.
    The URL `http://localhost` actually maps to the address `http://127.0.0.1:80`,
    which is the address and port of the Apache service. You will see `127.0.0.1`
    come up again when we discuss CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`PHP` is in the title of this book, so you know it will play a big part in
    the development process. PHP is already installed on your machine, so you have
    nothing to install. Let''s just double check that you can access PHP by using
    Terminal.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — checking your PHP version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to check that PHP is working on your computer by accessing it with
    Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command for PHP to return its version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with something similar to the following:![Time for
    action — checking your PHP version](graphics/3586OS_02_015.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used **Terminal** to ensure that we had PHP running correctly on our machine.
    Not only did we check to make sure that PHP was accessible, but we also asked
    for its version. Your version may differ slightly from mine, but it only matters
    that your version is PHP 5.3 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If your version is lower than PHP 5.3 or you were unable to get PHP to respond,
    you can install or upgrade by looking at PHP''s manual: [http://php.net/manual/en/install.macosx.php](http://php.net/manual/en/install.macosx.php).'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — making sure that Apache can connect to PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create a web application, Apache needs to be able to run the PHP
    code. So, we are going to check that Apache can access PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use **Finder** to navigate to the following folder: `/etc/apache2`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file named `httpd.conf` in your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look through the file, and find the following line (it should be around line
    `116):`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the hash (#) symbol that is in front of this string to uncomment this
    line of the `config` file. It''s possible that your configuration file may already
    have this uncommented. If it does, then you don''t have to change anything. Regardless,
    the end result should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart Apache by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We opened Apache's main configuration file, `httpd.conf`, and uncommented a
    line so that Apache can load PHP. We then restarted the Apache server, so that
    the updated configuration would take effect.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a quick info page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to double-check that Apache can render PHP scripts by quickly creating
    a `phpinfo` page that will display a wide array of data about your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Open your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file that contains the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file with the name, `info.php`, and save that file in the following
    location: `/Library/WebServer/Documents/info.php`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate your browser to `http://localhost/info.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will display the following page:![Time for action — creating a
    quick info page](graphics/3586OS_02_020.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We used our text editor to create a file called `info.php` that contained a
    special PHP function called `phpinfo`. We saved the `info.php` file into the folder:
    `/Library/Webserver/Documents`. This folder is the default location (in Mac OS
    X only) for all of the files that your Apache service will display. When your
    browser hit the `info.php` page, the `phpinfo` looked at your PHP installation
    and returned an HTML file with details about your configuration. You can tell
    that there is a lot going on here. Feel free to poke around and look at some of
    the information before we move on.'
  prefs: []
  type: TYPE_NORMAL
- en: Fine tuning Apache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We finally have our basic web development environment set up. However there
    are a few things we'll need to adjust in Apache in order for us to build our application;
    the first of which is enabling a great built-in module called `mod_rewrite`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — further configuration of Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mod_rewrite` will allow us to rewrite the requested URLs on the fly, which
    will help us build an application with clean URLs. The rewriting itself is handled
    in another Apache configuration file called `.htaccess`, which we will touch on
    in [Chapter 4](ch04.html "Chapter 4. Starting your Application"), *Starting Your
    Application*. In the following section, we''ll configure Apache, so that `mod_rewrite`
    is enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use **Finder** to navigate to the following folder: `/etc/apache2`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate and open a file named `httpd.conf` in your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look through the file, and find this line (it should be line `114):`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncomment the line by removing the hash (#) symbol. It''s possible that your
    system is already configured to enable `mod_rewrite`. Regardless, make sure it
    matches the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Look through the file, and find this chunk of code (it should go from line `178-183):`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Alter the line of code that says `AllowOverride None` and change it to say
    `AllowOverride All`. The resulting section should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Keep scrolling through the file until you find this chunk of code (should go
    from line `210-215):`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Alter the line of this code that says `AllowOverride None` and change it to
    read `AllowOverride All`. The resulting section should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart Apache by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just configured Apache so that it can operate more freely and include the
    ability to rewrite URLs using the `mod_rewrite` module. We then changed the configuration
    of `AllowOverride` from `None` to `All. AllowOverride` tells the server what to
    do when it finds the `.htaccess` file. With this being set to `None`, the `.htaccess`
    file is ignored. Changing the setting to `All` allows settings to be overridden
    in an `.htaccess` file. This is exactly what we'll do as we start building out
    our application in [Chapter 4](ch04.html "Chapter 4. Starting your Application").
  prefs: []
  type: TYPE_NORMAL
- en: Our web development setup is complete!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have everything set up for us to create standard web applications. We
    have Apache handling requests. We have PHP connected and responding to calls from
    Apache, and we have our text editor ready for any code that we can throw at it.
  prefs: []
  type: TYPE_NORMAL
- en: There are still a few pieces missing for us to have a complete development environment.
    In the next section, we will install CouchDB as our database.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CouchDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will install CouchDB 1.0 onto your machine and get it prepared
    for development. There are a variety of ways to get CouchDB on your machine, so
    if you have issues with the following install process, please reference CouchDB''s
    website here: [http://wiki.apache.org/couchdb/Installation](http://wiki.apache.org/couchdb/Installation).'
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to install the rest of the components that we will use in this book,
    we will use a utility called **Homebrew**. Homebrew is the easiest way to install
    the UNIX tools that Apple left out of OSX. Before we can use Homebrew to install
    other tools, we first need to install Homebrew.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — installing Homebrew
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use **Terminal** to download Homebrew and install it onto our
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following commands into **Terminal**, pressing *Enter* after each
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with a progress bar and show you how the installation
    process went. When the installation is complete, you will receive a success message,
    and you will have control of the **Terminal** again.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added the directory `/usr/local`, which is where Homebrew will save all of
    its files. Then we made sure that the folder was owned by us (the current user).
    We then installed Homebrew using a `cURL` statement to grab the repository from
    Github (I'll cover `cURL` later in this chapter; we are going to use it quite
    a bit). After grabbing the repository, it was unzipped, using the command line
    function `tar`, and placed into the `/usr/local` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — installing CouchDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have Homebrew installed, we are finally ready to install CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Please note that before Homebrew installs CouchDB, it will install all of its
    dependencies, which include such things as: Erlang, Spidermonkey, ICU, and so
    on. This section might take up to 10-15 minutes to complete, because they are
    being compiled locally on your machine. Don''t worry if it seems like it''s taking
    too long; this is normal.'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to install CouchDB using Homebrew.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Terminal will respond with a lot of text over the next couple of minutes. You
    will see it grab each dependency and then install it. At the very end, you will
    receive a success message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just installed CouchDB from the source and downloaded all of its dependencies.
    After installation, Homebrew put everything in the right folders and configured
    everything we need to use CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: Checking that our setup is complete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just accomplished a lot in the past few pages. We've set up our web development
    environment and installed CouchDB. Now, let's double check that we can run and
    access CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: Starting CouchDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CouchDB is easy to manage. It operates as a service that we can start and stop
    by using our command line. Let's start CouchDB with a command line statement.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will reply with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Great! Now that we have started CouchDB as a background process, it will sit
    in the background and handle requests until we shut it off.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — checking that CouchDB is running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to attempt to hit the CouchDB service on our machine by using the
    command line utility `cURL` (we'll spell it `curl` from here on out for the sake
    of simplicity) that allows you to make raw HTTP requests. `curl` is our main method
    of communication with CouchDB. Let's start with a `curl` statement to talk to
    CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following statement to create a request that will hit CouchDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will reply with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just used `curl` to communicate with the CouchDB service by issuing a `GET`
    request. By default, `curl` will assume that we're trying to issue a `GET` request
    unless we tell it otherwise. We issued our `curl` statement to `http://127.0.0.1:5984`.
    Breaking this resource down into pieces, `http://127.0.0.1` is the IP of our local
    computer, and `5984` is the port that CouchDB runs on by default.
  prefs: []
  type: TYPE_NORMAL
- en: Running CouchDB as a background process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we were to stop our configuration here, you would have to run `couchdb b`
    each time you started development. This will quickly turn into a pain point for
    us. So, let's run CouchDB as a system daemon that will always run in the background,
    even after you restart your computer. In order to do this, we will use a Mac OS
    X service management framework, called `launchd`, that manages system daemons
    and allows them to be started and stopped.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Kill the background process of CouchDB, by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If CouchDB was running, it would return the following text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run CouchDB as a real background process and ensure that it starts each
    time you start your computer by running the following statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your version of CouchDB is different to mine, you will have to change the
    version in this script that says "1.0.2", to match your version.
  prefs: []
  type: TYPE_NORMAL
- en: CouchDB is now running in the background, and even if we restart our computer,
    we don't have to worry about starting the service before we try to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, for some reason, you decide that you don''t want CouchDB running in the
    background, you can unload it by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You can double-check to make sure that CouchDB is running by using the `curl`
    statement that we used earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will reply with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Installing version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Version control systems allow developers to track code changes, merge other
    developers' code, and to roll back any inadvertent errors. Version control systems
    are a must on a project with several developers but can also be a lifesaver for
    single developer projects. Think of it as a safety net — if you accidentally do
    something you didn't want to, then source control is there to protect you. There
    are several options when it comes to version control, but in this book, we will
    use Git.
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git ([http://git-scm.com/](http://git-scm.com/)) has become one of the more
    popular and widely adopted version control systems because of its distributed
    nature and ease-of-use. The only thing easier than actually using Git is installing
    it. We will use Homebrew to install Git, just as we did with CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — installing and configuring Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Get ready! We are going to install Git onto our computer using Homebrew.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to install Git using Homebrew:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will download and install Git for you in just a matter of moments.
    It will then respond with a success message telling you that Git has been installed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After Git has been installed, you need to configure it so that it knows who
    you are when you commit changes to data. Run the following commands to identify
    yourself and make sure to fill in your own information where I've put `Your Name`
    and `your_email@domain.com:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just installed Git from the source using Homebrew. We then configured Git
    to use our name and e-mail address. These settings will make sure that any changes
    that are committed to source control from this machine are identified.
  prefs: []
  type: TYPE_NORMAL
- en: Did you have any problems?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re all done with confi guring our system! In a perfect world, everything
    would be installed without any issues, but it''s enti rely possible that something
    didn''t install perfectly. If it seems like something isn''t working right, or
    you think you may have made some typos along the way, I have a script that you
    can run that will help you get back on track. This command can be executed locally
    by calling a fi le I have on github. All you have to do is run the following command
    in **Terminal**, and it will run all of the necessary code for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sh <(curl -s https://raw.github.com/timjuravich/environment-setup/master/
    configure.sh)**'
  prefs: []
  type: TYPE_NORMAL
- en: This script will do all of the work that has been menti oned in this secti on,
    and it's safe to run as many ti mes as you want. I could have given you this one
    command and fi nished up the chapter pages ago, but this chapter was integral
    in teaching you how to use the tools and uti liti es that we will use in the coming
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we are using the default Apache installati on for web developing, where
    is the default working directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to use our local development environment with CouchDB, we need to make
    sure that two services are running. What are they, and how do you make them run
    in **Terminal?**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command line statement do you use to issue a `Get` request to CouchDB?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s do a quick recap of everything we''ve covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: We became familiar with **Terminal** and used it to show hidden fi les
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We installed a text editor for us to use in development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We learned how to confi gure Apache and how to interact with it through the
    command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We learned how to create simple PHP fi les and placed them in the correct locati
    on so that Apache could display them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We learned how to install Homebrew, and then we used it to install CouchDB and
    Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We checked to make sure that CouchDB was up and running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we'll get more familiar with CouchDB and explore how to
    use it in the creati on of our web applicati on.
  prefs: []
  type: TYPE_NORMAL
