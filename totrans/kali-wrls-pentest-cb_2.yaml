- en: Attacking Access Controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with war driving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping access points and increasing accuracy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a rogue access point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evading MAC filtering with MAC spoofing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying promiscuous clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with wireless networks, one of the categories of attacks that may
    be used is that of access control attacks. Attacks put into this category aim
    to penetrate and compromise a wireless network by evading access control measures.
    These types of access control measures include items such as MAC filtering, misconfiguration,
    rogue access points, and other items we will discuss within this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go too far, let's take a more detailed look at access control in order
    to understand more clearly what it is that we are attacking in this particular
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The access control process is one that involves identification of syndication
    and authorization. Any attack against access control is going seek to steal credentials,
    or impersonate a user or system with the intention of gaining access and performing
    unauthorized or outright malicious activities. It is because access control is
    a common target of attack that organizations must implement strong and proper
    controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'On wireless networks, access control can take a number of different forms,
    each of which can be used independently on their own or can be deployed together
    to form a more robust solution. Some of the examples of access control mechanisms
    used in wireless are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MAC filtering**: This is a process where MAC addresses are entered into an
    access point, with the intention of allowing or disallowing access by devices
    holding these MAC addresses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloaking SSIDs**: This technique is used by a network administrator to stop
    the broadcast of the network identifier out in the open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location of access points**: Network owners may choose to place their access
    point in a place where broadcasts are limited to a certain geographic area within
    a building. This limits the amount of signal that a malicious party or attacking
    party gets access to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is just a short list of potential measures that can be done for access
    control to limit the accessibility of a wireless network to just authorized parties.
  prefs: []
  type: TYPE_NORMAL
- en: Once access control is compromised or subverted, an attacker can proceed to
    penetrate deeper into the targeted network. The attacker may get around access
    controls through exploiting flaws or misconfigurations that are present in either
    the wireless network or in the devices attached to the wireless network, or maybe
    even overlooked or underestimated options.
  prefs: []
  type: TYPE_NORMAL
- en: Types of access control attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Access control attacks come in many forms, not all of which we can cover within
    the pages of this book. However, we can cover many of the more common forms of
    this type of attack. Before we start exploring each one of our attacks, let''s
    first lay out the attacks that will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: War driving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rogue access points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MAC spoofing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ad hoc associations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AP misconfiguration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client misassociation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unauthorized association
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Promiscuous client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, these are just a few of the types of attacks that can be used to target
    the access controls present on a wireless network; they should never be considered
    the only types of access control attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Working with war driving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the earliest and most commonly used forms of attack used to target access
    control is a technique known as war driving. This technique, simply put, is to
    use a wireless enabled device along with specialized software used to detect or
    probe wireless networks that have come with in range of the wireless device.
  prefs: []
  type: TYPE_NORMAL
- en: What makes war driving so popular and so effective is the fact that many computer
    users, both personal and business, have been deploying `802.11` wireless access
    points for years with little regard for security. The deployment of a wireless
    network that allows the user to roam has taken precedence over taking measures
    to secure their access points and devices against potential attack.
  prefs: []
  type: TYPE_NORMAL
- en: In response to this deployment of wireless networks that are misconfigured or
    insecure, we have a category of attackers that engage in this practice known as
    war driving. Those who engage in this activity will build custom rigs built out
    of a combination of hardware and software, with the intent of cruising public
    venues to find both wireless access points and devices in some cases. These individuals
    may just be interested in locating and targeting a specific network for their
    own ends or, in some cases, they may even share this information to an online
    database or website where any visitor can search for these access points.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, the individual use this attack by enabling their wireless device
    and their software before exploring their target area. When the attacker chooses
    to explore their target area, they will do so using a bike, car, motorcycle, walking,
    or even using newer methods such as wireless-enabled drones. No matter which means
    are used, as long as the attacking party uses a reasonably methodical approach
    to exploring their area, they will find a number of wireless devices and/or networks.
    Once they have located these wireless networks, they can then go through the information
    that they have collected and determine which wireless target will be the one to
    focus on and penetrate.
  prefs: []
  type: TYPE_NORMAL
- en: In Kali Linux, we have a number of tools that can easily facilitate the practice
    of war driving. Each one of the tools that is useful for war driving in the distribution
    will come with its own set of features that may or may not be present in the other
    tools. In this book, we will focus on using one of the more popular tools for
    performing war driving known as Kismet.
  prefs: []
  type: TYPE_NORMAL
- en: 'War driving doesn''t just take one form, there are other subtypes that fall
    under this term. Specifically:'
  prefs: []
  type: TYPE_NORMAL
- en: '**War flying** : This is the same as war driving, but uses a small plane or
    ultralight aircraft'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**War ballooning**: Same as war flying, but makes use of a balloon instead'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**War walking**: This involves putting the detection equipment in a backpack
    or something similar and walking through buildings and other facilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get things started, you will need to have the following items in place:'
  prefs: []
  type: TYPE_NORMAL
- en: A wireless card capable of entering monitor mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux with Kismet installed (part of the default Kali installation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The items listed here are basic requirements and you could easily use more (or
    different) components, if so desired. If you want enhanced range, for example,
    you could use a USB-based wireless card that has connections for an external antenna
    that could get better reception. You could also use a different wireless application
    instead of Kismet to complete this task; however, since Kismet is very popular
    we will use it in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kismet is an effective tool for locating and extracting useful information from
    wireless access points and devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just a word of caution that: before you issue the command to start Kismet at
    the command line, you should ensure that if you are using an external Wi-Fi adapter,
    you have it installed and configured prior to issuing the command. By default,
    Kismet should be configured to use the wireless adapter that is present on the
    physical system; however, if you choose to use an external one, you may need to
    perform additional configuration in order to get your adapter configured and recognized
    by Kismet itself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will start Kismet by starting it from the Command Prompt,
    however it can also be started from the *Wireless attacks* section of the Applications
    menu. In either scenario, starting up Kismet will result in the same steps documented
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the command prompt, enter the command `kismet`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now be configuring Kismet from a semi-graphical environment. You will
    be using the *Tab* and *Enter* keys to navigate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the *Tab* key to highlight the `No` if you cannot see the line of grey letters.
    Otherwise, leave the `Yes` highlighted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key once to acknowledge that Kismet is running as root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key once to automatically start the Kismet server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key once to verify that you want to start the Kismet server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the *Enter* key to verify that you can `Add` a capture source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the name of your wireless interface as you discovered using `ifconfig`.
    If you don''t remember it, you can open up another console window and run the
    `ifconfig` command again to determine the correct interface (which will usually
    be named something starting with `wlan`). The following screenshot shows the interface
    entry screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54c728c8-b6f7-4881-98fb-29a28c861e2a.png)'
  prefs: []
  type: TYPE_IMG
- en: Kismet interface configuration
  prefs: []
  type: TYPE_NORMAL
- en: The Following are the steps to be followed for Kismet interface configuration
  prefs: []
  type: TYPE_NORMAL
- en: Press the *Tab* key once.
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the name of the wireless interface in the name field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Tab* key once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Tab* key again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kismet should recognize the named wireless interface if you entered the name
    correctly. It will also generate the names of unneeded virtual interfaces such
    as `wlan0mon`, `wlan0monmon`, and `wmaster0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When `Close Console Window` is displayed at the lower right-hand corner of the
    shell (Kismet window), press the *Tab* key of the keyboard once to highlight `Close
    Console Window`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A list of wireless access points will be displayed in the upper left-hand quadrant
    of the shell (Kismet window).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on View in the pull-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Monitor for activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have gotten to this point you will note that devices will start to
    populate the window. You will see the names, channels, wireless standards, and
    other information associated with each device. If you wait long enough, you will
    notice that additional devices will appear and other items listed may have more
    information populated that may not have been present before.
  prefs: []
  type: TYPE_NORMAL
- en: 'While viewing the list of networks showing up in the Kismet window, it is possible
    that you might see some entries that look a little different. For example, take
    a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90d061fe-c76f-4517-ba5f-77b626df25ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Main Kismet window displaying detected wireless clients.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the items in the windows you will notice that there is an entry
    for `Probe Networks`. You can move over this item, in the list and use the *+*
    or *-* to open or close the selection. You will note that when you expand the
    item you will see that there will be a list of items displayed. This list documents
    probe requests that are coming from nearby systems. These probes are sent by a
    wireless-enabled system that is attempting to attach to a network that it had
    attached to in the past. A careful analysis of the network names that show up
    under probe requests can reveal the names of different access points the system
    has attached to, and give you an idea of how or where the system may have been
    used. Keep in mind that many operating systems send these probes out as long as
    the device is unassociated with a wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: There are other software packages that can be used to do the same thing that
    Kismet is doing; however, Kismet has the advantage of being highly customizable
    and passive. Passive meaning that the software does not transmit anything out
    to illicit a response from wireless access points in the area; instead, the software
    listens for connections and traffic associated with an access point to reveal
    its presence and determine its name. Additionally, the software package has the
    ability to detect access points that are hidden where other similar packages may
    not be able to do the same.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping access points and increasing accuracy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step in war driving is to enhance the data you're collecting with location
    or geographic data concerning the access point or device itself. In the modern
    day, the collection of this data has been facilitated through the use of **Global
    Positioning System** (**GPS**) technology. Modern GPS devices can be attached
    to a system such as a notebook or laptop to the use of Bluetooth, USB, or even
    serial connections in some cases. If you intend to perform war driving with a
    mobile device such as a tablet or smart phone, it is highly likely that your device
    may already contain a built-in GPS that can be used to map access points.
  prefs: []
  type: TYPE_NORMAL
- en: If you are going to use an external GPS device it is important to note that
    not all of these devices are created equal. Some devices are able to acquire a
    satellite fix and location within a very short time of power on, while others
    may take as long as two minutes or even more to acquire a satellite fix after
    a cold start. Another factor impacting the quality and accuracy of GPS data is
    how often the GPS device updates its position; some may update their coordinates
    on a much more frequent basis. while others may do so less frequently potentially
    impacting how accurate coordinates may be.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, all GPS devices can be used to perform war driving. The only requirement
    is that these GPS devices are able to provide current and reasonably accurate
    GPS data to the requesting system or software.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get things started, you will need to have the following items in place:'
  prefs: []
  type: TYPE_NORMAL
- en: A wireless card capable of entering monitor mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux with Kismet installed (part of the default Kali installation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Bluetooth or USB GPS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The items listed here are basic requirements, and you could easily use more
    (or different) components if so desired. If you want enhanced range, for example,
    you could use a USB based wireless card that has connections for an external antenna
    that could get better reception. You could also use a different wireless application,
    instead of Kismet, to complete this task; however, since Kismet is very popular,
    we will use it in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to allow Kismet to access GPS data, we need to do some setup first.
    This is done by using GPSD. The GPSD utility is used to return information from
    a GPS, which we will then use in Kismet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69cc3c81-d607-40ed-ad22-032e7a5ba254.jpg)'
  prefs: []
  type: TYPE_IMG
- en: USB GPS device that will work with Kismet
  prefs: []
  type: TYPE_NORMAL
- en: 'First, to use `gpsd` you will most likely need to install it as it is not typically
    installed as part of Kali''s own install process. In order to install this service
    so we can use it, we simply use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to install a second package known as `gpsd-clients` to help with
    the process of retrieving data from the GPS. We install this package by issuing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is installed, you should now connect your GPS hardware. We can verify
    that the GPS dongle is present by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, verify that your wireless adapter is there, and get the interface name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, make sure that your GPS adapter is showing up in the `/dev/` directory.
    To do this, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding commands are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f834315-3d02-403b-971b-7d43eb55a754.png)'
  prefs: []
  type: TYPE_IMG
- en: The results of listing GPS devices
  prefs: []
  type: TYPE_NORMAL
- en: 'This should also help you identify the name. Once you have identified the path
    in `/dev/`, pass that as an argument to `gpsd`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once you have the name of the `gps` identified and have successfully passed
    that to the `gpsd` process, now is the time to move over to Kismet and see if
    it detects the GPS. To do this, you will start up Kismet as you did previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once inside of Kismet, use the backtick/accent button ( [PRE6]
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: giskismet ­-x Kismet-DATE.netxml ­-q "select *
  prefs: []
  type: TYPE_NORMAL
- en: from  wireless" ­-o wardrive.kml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Ifconfig wlan0 10.0.0.1/24 up
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: interface=wlan0
  prefs: []
  type: TYPE_NORMAL
- en: dhcp-range=10.0.0.10,10.0.0.250,12h
  prefs: []
  type: TYPE_NORMAL
- en: dhcp-option=3,10.0.0.1
  prefs: []
  type: TYPE_NORMAL
- en: dhcp-option=6,10.0.0.1
  prefs: []
  type: TYPE_NORMAL
- en: server=8.8.8.8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 10.0.0.9 usatoday.com
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.0.9 zelda.com
  prefs: []
  type: TYPE_NORMAL
- en: Save this file as fakehosts.conf
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: dnsmasq -C dnsmasq.conf -H fakehosts.conf
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: apt-get install hostapd
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: interface=wlan0
  prefs: []
  type: TYPE_NORMAL
- en: driver=nl80211
  prefs: []
  type: TYPE_NORMAL
- en: ssid=freewifi
  prefs: []
  type: TYPE_NORMAL
- en: channel=1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: hostapd ./hostapd.conf
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: sysctl -w net.ipv4.ip_forward=1
  prefs: []
  type: TYPE_NORMAL
- en: iptables -P FORWARD ACCEPT
  prefs: []
  type: TYPE_NORMAL
- en: iptables --table nat -A POSTROUTING -o
  prefs: []
  type: TYPE_NORMAL
- en: wlan0 -j MASQUERADE
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: airmon-ng start wlan0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: airodump-ng -i wlan0mon
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Airmon-ng stop wlan0mon
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: ifconfig wlan0 down
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: macchanger -m [New MAC Address] wlan0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: ifconfig wlan0 up
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have changed the MAC address of the adapter to the new MAC address,
    we can attempt to authenticate with the network and see if we're able to connect.
    If we can select the network and we connect successfully, then we did everything
    right. If not, doublecheck the MAC address you spoofed against the one you gathered
    from `airodump`. Also, if the network is running a protection such as WEP or WPA,
    you will not be able to connect. Don't worry, though; we'll take care of that
    detail later in this book if you're stumped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identifying promiscuous clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a rogue access point in place on a secure (or supposedly secure) network,
    there now arises a potential for a lot of damage and other mischief to occur.
    Promiscuous clients are a concern, as these are clients that send out probes looking
    for wireless networks to attach to that they may have attached to in the past.
    The fact that they engage in this process it makes the possibility that they may
    attach to a network accidentally and is a problem for security.
  prefs: []
  type: TYPE_NORMAL
- en: The probe packet is a special type of request that is transmitted out that is
    used to attach to previously associated network access points. This packet is
    sent out by smartphones, laptops, and other devices that are not currently connected
    to a Wi-Fi network and it is used to locate and connect to networks previously
    associated to. When this probe is sent out and a network that the client was previously
    associated with is recognized the two will attempt to re-associate as they had
    been previously.
  prefs: []
  type: TYPE_NORMAL
- en: Barring other configuration and technical information, most devices will send
    out this request every 40 to 60 seconds, which makes using these to track the
    movement of people specifically useful. I should note that there is no location
    information embedded into these packets. We just know that if we received a probe
    request from a certain device, it is within a certain distance of the monitoring
    chip.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting piece of information embedded in probe requests is an SSID.
    A device that is not connected to any network will send out a probe request frame
    to not only the general public, but also targeting specific access points: the
    remembered devices.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, when you are at home, let's say you connect to your home Wi-Fi
    network called HOME. When you are not connected to HOME, a probe request is broadcasted
    with the SSID HOME embedded in it. So, not only can we tell that a certain device
    is within a certain amount of distance from our Wi-Fi chip, we now also know their
    devices remembered networks. This is a commonly criticized vulnerability. In our
    case, though, it's particularly useful in uniquely identifying someone.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get things started, you will need to have the following items in place:'
  prefs: []
  type: TYPE_NORMAL
- en: A wireless card capable of entering monitor mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux with Kismet installed (part of the default Kali installation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The items listed here are basic requirements and you could easily use more (or
    different) components if so desired. If you want enhanced range, for example,
    you could use a USB-based wireless card that has connections for an external antenna
    that could get better reception. You could also use a different wireless application,
    instead of Kismet, to complete this task; however, since Kismet is very popular,
    we will use it in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kismet is an effective tool for locating and extracting useful information from
    wireless access points and devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just a word of caution: that before you issue the command to start kismet at
    the command line, you should ensure that if you are using an external Wi-Fi adapter
    that you have it installed and configured prior to issuing the command. By default,
    kismet should be configured to use the wireless adapter that is present on the
    physical system; however, if you choose to use an external one, you may need to
    perform additional configuration in order to get your adapter configured and recognized
    by kismet itself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will start kismet by starting it from the Command Prompt.
    However, it can also be started from the Wireless Attacks section of the Applications
    menu. In either scenario, starting up kismet will result in the same steps documented
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the command prompt, enter the command `kismet`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now be configuring Kismet from a semi-graphical environment. You will
    be using the *Tab* and *Enter* keys to navigate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the *Tab* key to highlight the `No` if you cannot see the line of grey letters.
    Otherwise, leave the `Yes` highlighted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press on the *Enter* key once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press on the *Enter* key once to acknowledge that Kismet is running as root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press on the *Enter* key once to automatically start the Kismet server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press on the *Enter* key once to verify that you want to start Kismet server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key to verify that you can to `Add` a capture source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the name of your wireless interface as you discovered using `ifconfig`.
    If you don''t remember it, you can open up another console window and run the
    `ifconfig` command again to determine the correct interface (which will usually
    be named something starting with `wlan`). The following screenshot shows the interface
    entry screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a8311ad-be9e-4be7-b4ec-f2b1ca0ba0ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Kismet interface configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the steps for Kismet interface configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Press the *Tab* key once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the name of the wireless interface in the `Name` field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Tab* key once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Tab* key again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kismet should recognize the named wireless interface if you entered the name
    correctly. It will also generate the names of unneeded virtual interfaces such
    as `wlan0mon`, `wlan0monmon`, and `wmaster0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When `Close Console Window` is displayed at the lower right-hand corner of the
    shell (Kismet window) press the *Tab* key of the keyboard once to highlight `Close
    Console Window`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A list of wireless access points will be displayed in the upper left-hand quadrant
    of the shell (Kismet window).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on View on the pull-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Monitor for Activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Much like before, if we wait long enough we will see more information populate
    the Kismet window including the entries associated with probe networks. Unlike
    before we want to see if we can use this somehow, which we can:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79a1a32d-0c20-4f1f-b995-714b39198175.png)'
  prefs: []
  type: TYPE_IMG
- en: kismet window displaying detected wireless clients.
  prefs: []
  type: TYPE_NORMAL
- en: If you have identified a network under the probe network heading that has attracted
    your attention then you can use the information from one of our other recipes
    to lure the victim in for an attack. The way we do this is by creating a rogue
    access point, like we did in our earlier recipe. The difference this time around
    is that we will bring up the rogue access point using the name of the Probe network
    we wish to target. If all goes well, the client will eventually attach to the
    access point we have created and then we can start sniffing traffic or perform
    other actions.
  prefs: []
  type: TYPE_NORMAL
