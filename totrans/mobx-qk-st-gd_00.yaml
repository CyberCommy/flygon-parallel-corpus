- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Reactive programming has captured the imagination of programmers for decades.
    Once the gang of four standardized the **observer** design pattern, the term has
    become part of the standard vocabulary of every programmer:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Observer** : Define a one-to-many dependency between objects so that when
    one object changes state, all its dependents are notified and updated automatically.–
    Design Patterns, Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, 1995'
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, there is a wide variety of technologies, libraries, and frameworks
    implementing theobserver pattern. Yet, MobX is unique in the way it applies this
    pattern to state-management. It has a very friendly syntax, a small core API that
    makes it easy to learn as a beginner, and it can be applied in any JavaScript
    project. Moreover, the library has proven scalable, not just at Mendix where the
    project was first applied, but also in famous projects, such as Microsoft Outlook,
    Battlefield 1 by DICE, Jenkins, Coinbase, and many, many more.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book will not just guide you through the basics; it will also immerse
    you in the philosophy of MobX: *Anything that can be derived from the application
    state, should be derived. Automatically.*'
  prefs: []
  type: TYPE_NORMAL
- en: MobX is not the first of its kind, but it is standing on the shoulders of giants
    and has pushed the boundaries of what is possible with the transparent reactive
    programming paradigm. For example, it is, as far as the authors know, the first
    major library that combines reactivity with synchronous transactions and the first
    to explicitly distinguish the concept of derived-values and automatic side effects
    (reactions).
  prefs: []
  type: TYPE_NORMAL
- en: Unlike many learning materials, this book guides you through the inner workings
    of MobX and its many extension points. This book will hopefully leave a lasting
    impression that an essentially simple (and very readable!) paradigm can be used
    to accomplish tasks that are very challenging, not just in terms of **domain complexity**,
    but also in terms of performance.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: State management plays a crucial role in any application where state is relevant
    across different places in the code base. This is either because there are multiple
    consumers or multiple producers of data. In practice, this means that MobX is
    useful in any application that has a non-trivial amount of data entry or data
    visualization.
  prefs: []
  type: TYPE_NORMAL
- en: MobX has official bindings for React.js, Preact, and Angular. However, many
    have used the library in combination with libraries and frameworks such as jQuery,
    konva.js, Next.js, Vue.js, and even Backbone. When working through the book, you
    will discover that the concepts required to use a tool like MobX are universally
    applicable in any environment.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0023.html#LTSU0-58c2559ca4304cecab9bc46f496bc070), *Introduction
    to State Management*, starts with a conceptual treatment of *state-management*
    and its many nuances. It introduces the side-effect model and prepares you with
    the philosophy needed to understand MobX. Finally, it gives a speed tour of MobX
    and some of its core building blocks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0035.html#11C3M0-58c2559ca4304cecab9bc46f496bc070), *Observables,
    Actions, and Reactions*, takes a deeper look at the core building blocks of MobX.
    It shows you the various ways of creating observables, using actions to cause
    mutations on the observables, and, finally, the use of reactions to react to any
    changes happening on the observables. These three form the core triad of MobX.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0055.html#1KEEU0-58c2559ca4304cecab9bc46f496bc070), *A React
    App with MobX*, combines the knowledge gained so far to power a React App with
    MobX. It tackles the use case of searching books in an online store. The app is
    built by first identifying the core observable state, using actions to mutate
    the state, and using reactions via the `observer()` utility from mobx-react. The
    React components are the observers that react to changes in the observable state
    and automatically render the new state. This chapter will give you an early taste
    of how simple MobX can be for state management in React apps.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0065.html#1TVKI0-58c2559ca4304cecab9bc46f496bc070), *Crafting
    the Observable Tree*, puts laser focus on designing the observable state with
    the various options in MobX. We will tackle how to limit the observability in
    MobX and learn how to create a tight observable state that only observes the necessary
    and nothing more. In addition to limiting observability, we will also see how
    to expand the observability with `extendObservable()`. Finally, we will look into
    computed properties and look at the use of ES2015 classes to model the observable
    state.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0083.html#2F4UM0-58c2559ca4304cecab9bc46f496bc070), *Derivations,
    Actions, and Reactions*, goes further into the core building blocks of MobX and
    explores the API in greater detail. It also touches upon the philosophies governing
    these building blocks. By the end of this chapter, you will cement your understanding
    and core intuitions around MobX.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0101.html#30A8Q0-58c2559ca4304cecab9bc46f496bc070), *Handling
    Real-World Use Cases*, is where we apply MobX to two important real-world use
    cases: form handling and page routing. Both are very visual in nature, but we
    will argue that they can be dealt with much more easily when represented as observable
    state, actions, and reactions in MobX. This representation makes the React components
    (the *observers*) a natural visual extension of the state. We will also develop
    our core intuitions around state modelling with MobX.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0124.html#3M85O0-58c2559ca4304cecab9bc46f496bc070), *Special
    API for Special Cases*, is a survey of APIs that are low level and capable but
    hide in the shadows of the top-level APIs. such as `observable()`, `action()`,
    `computed()`, and `reaction()`. We will explore these low-level APIs and then
    take a brief tour of the debug utilities available for MobX developers. It is
    comforting to know that MobX has your back from all angles, even in those rare,
    odd cases.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](part0143.html#48C0E0-58c2559ca4304cecab9bc46f496bc070), *Exploring
    mobx-utils and mobx-state-tree*, gives you a taste of some useful packages that
    can simplify the everyday use cases encountered in MobX-driven development. As
    the name suggests, mobx-utils is a utility tool belt containing an assortment
    of functions. On the other hand is the powerful mobx-state-tree, commonly referred
    to as MST, that prescribes an approach for scalable MobX applications, baking
    in patterns that you get for free, once you adopt the MST style of thinking. It
    is a worthy upgrade to MobX and a must-have for serious users.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](part0165.html#4TBCQ0-58c2559ca4304cecab9bc46f496bc070), *MobX Internals*,
    is where we culminate by peeling off the layers and peeking into the inner workings
    of MobX. The core abstractions are surprisingly simple and well defined, and they
    neatly separate the responsibilities. If the term t*ransparent functional reactive
    programming* sounds like a black art, this is the chapter that will unravel the
    magic and reveal how MobX embraces it. This chapter is also an initiation into
    the MobX code base and a worthy read for anyone aspiring to be a core contributor
    to the MobX project.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MobX is typically used in programming environments where long-living, in-memory
    state plays an important role, most notably web, mobile, and desktop applications.
    The book requires basic understanding of the JavaScript programming language,
    and will use modern `ES2015` syntax in its examples. Frontend examples are based
    on the ReactJS framework, so some familiarity with it will be useful, but it's
    not necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packtpub.com](http://www.packtpub.com/support).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/MobX-Quick-Start-Guide](https://github.com/PacktPublishing/MobX-Quick-Start-Guide). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [http://www.packtpub.com/sites/default/files/downloads/MobXQuickStartGuide_ColorImages.pdf](http://www.packtpub.com/sites/default/files/downloads/MobXQuickStartGuide_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit the following link to check out videos of the code being run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2NEww85](http://bit.ly/2NEww85)'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Mount the downloaded `WebStorm-10*.dmg` disk image file as
    another disk in your system."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
