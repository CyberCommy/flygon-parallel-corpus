- en: Chapter 9. RESTful Web-Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Spring RESTful Web-Service, using RESTful features in Spring MVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `RESTClient` tool to access a Spring RESTful Web-Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Spring RESTful Web-Service using HTTP message conversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a WS client for the Spring RESTful Web-Service using Spring template
    classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Simple Object Access Protocol (SOAP)** allows applications to communicate
    with one another using XML as the communication format (SOAP is well understood),
    but because it is XML-based, it tends to be verbose, even for very simple Web-Service
    scenarios.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Representational State Transfer (REST)**, published as a doctoral dissertation
    by Roy Fielding in 2000, aimed at simplifying the usage of Web-Service.'
  prefs: []
  type: TYPE_NORMAL
- en: While SOAP uses a lot of XML (that looks very complex) to communicate, REST
    uses very lightweight and human-readable data (for example, the request URI [http://localhost:8080/LiveRestaurant/customerAccount/234](http://localhost:8080/LiveRestaurant/customerAccount/234)
    returns `123-3456`. Compare this simple request and response with SOAP request/response
    envelop, already presented in the earlier chapters of this book. Since REST Web-Service
    implementation is very flexible and could be very easy, it requires no toolkit.
    However, SOAP-based Web-Services need tools for simplification (for example, to
    call a SOAP Web-Service, you would use tools to generate client-side proxy classes
    for a contract-last Web-Service class, or use tools to generate domain classes
    from a schema in a contract-first Web-Service). In the earlier chapters, you will
    have realized how strict a contract-first Web-Service is with the `request/response`
    format (it must match the contract). The REST Web-Service `request/response` format
    is all up to developers, and could be designed as easily as possible. While using
    SOAP Web-Services, using JavaScript is not easy (it needs a lot of code). REST
    usage is simplified using AJAX technologies and the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of REST''s demerits: REST only works over HTTP;calling a RESTful
    Web-Service is limited by HTTP verbs: GET, POST, PUT, and DELETE.'
  prefs: []
  type: TYPE_NORMAL
- en: RESTful was built on the principles of REST, in which HTTP's methods are used
    based on their concepts. For example, HTTP's `GET, POST, PUT`, and `DELETE` are
    all used in a RESTful architecture that match their meaning in the same fashion
    as with HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: RESTful Web-Services expose the state of its resources. In this chapter, for
    example, a RESTful service is exposed to get the list of available order items
    and the order object, when an order is placed in an online restaurant. To get
    a list of the available order items, the `GET` method is used, and for placing
    an order, the `POST` method is used. The method `PUT` could be used to add/update
    an entry, and `DELETE` could be used to delete an entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the sample URL to make a RESTful Web-Service call and to get the list
    of available order items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://localhost:8080/LiveRestaurant/orderItems](http://localhost:8080/LiveRestaurant/orderItems).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the return response (response format is not necessarily in
    XML format; it could be in JSON, plain-text, or any format):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There are several implementations of the RESTful Web-Service such as `Restlet,
    RestEasy`, and `Jersey. Jersey`, the most significant one in this group, is the
    implementation of JAX-RS (JSR 311).
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring, being a widely-used framework of Java EE, introduced support for RESTful
    Web-Services in release 3\. RESTful has been integrated into Spring''s MVC layer
    that allows applications to build on Spring using RESTful features. The most significant
    of these features includes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Annotations**, such as `@RequestMapping` and `@PathVariable`, used for URI
    mappings and passing parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContentNegotiatingViewResolver`, which allows the usage of different MIME
    types (such as `text/xml, text/json`, and `text/plain)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HttpMessageConverter`, which allows the production of multiple representations,
    based on the client requests (such as ATOM, XML, and JSON).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Spring RESTful Web-Service using RESTful features in Spring MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring 3.0 supports RESTful Web-Services based on Spring MVC. Spring uses annotations
    to set up a RESTful Web-Service and needs to be configured (within the Spring
    application context file) to scan for annotation. A spring MVC controller is required
    to set up a RESTful Web-Service. The `@Controller` annotation tags a class as
    the MVC controller ([http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html](http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html)).
    The `@RequestMapping` annotation maps incoming requests to an appropriate Java
    method in the controller class. Using this annotation, you can define the URI
    and the HTTP method that is mapped to a Java class method. For example, in the
    following example, the method `loadOrderItems` will be called if the request URI
    is followed by `/orderItems`, and `@PathVariable` is for injecting the value of
    the request parameters (`{cayegoryId}`) variable into a method parameter `(String
    cayegoryId):`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this recipe, implementing a RESTful Web-Service using Spring 3 MVC is presented.
    The client project of this Web-Service is implemented here, but it will be detailed
    in the last recipe of this chapter: *Creating a WS client for Spring RESTful Web-Service
    using Spring template classes*.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-9.1` (the `LiveRestaurant_R-9.1-Client`
    project is included in the code for testing purposes) with the following Maven
    dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`com.springsource.javax.servlet-2.5.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-oxm-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-web-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-webmvc-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xstream-1.3.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commons-logging-1.1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-oxm` is the Spring support for Object/XML mapping, `spring-web` and
    `spring-webmvc` are the support for Seb and MVC support, and `xstream` is for
    the Object/XML mapping framework.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configure `MessageDispatcherServlet` inside the `web.xml` file `(URL:http://<host>:<port>/<appcontext>`/*
    is to be forwarded to this servlet).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the controller file (`OrderController.java`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the domain POJOs (`Order.java,OrderItem.java`) and services `(OrderService,
    OrderServiceImpl)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the server-side application context-file (`order-servlet.xml`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-9.1:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-9.1-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is client-side output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Browse to this link: [http://localhost:8080/LiveRestaurant/orderItems](http://localhost:8080/LiveRestaurant/orderItems),
    and you will be provided with the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application is an MVC web project, in which a controller returns Spring's
    `Model` and `View` objects. Spring's `MarshallingView` marshalls the model object
    into XML, using a `marshaller` (`XStreamMarshaller`), and the XML will be sent
    back to the client.
  prefs: []
  type: TYPE_NORMAL
- en: All requests will come to `DispatcherServlet`, which will be forwarded to the
    controller - `OrderController`, and based on the request URI, an appropriate method
    will be called that will return a response back to the caller. The following configuration
    in `web.xml` forwards all the requests to the `DispatcherServlet:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The following setting in `order-context.xml` causes Spring to detect all annotations
    in the package (this includes `OrderService` and `OrderController)`. The `BeanNameViewResolver`
    is for mapping a name `(orderXmlView` in `OrderController)` to a view (the bean
    `orderXmlView)`, which is an instance of `org.springframework.web.servlet.view.xml.MarshallingView:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`@Controller` tags the class `OrderController` as the controller in an MVC
    pattern. All caller requests will be forwarded to this class, and based on the
    request URI, an appropriate method will be called. For example, the method `placeOrder`
    will be called if any URI similar to `http://<host>:<port>/<appcontext>/order/1`
    with an HTTP `POST` method comes from a caller request.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`@PathVariable` causes the `orderId` parameter from the URI to be injected
    and passed to the `placeOrder` method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The body of the method, `placeOrder`, calls a method from the `OrderService`
    interface and returns the `Order` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Then, it builds a view based on marshalling the `Order` object into the XML
    format, using the `Marshallingview` bean (MarshallingView, which is the view in
    MVC, uses `XStreamMarshaller` to marshall the model object into XML format), and
    returns it to the caller of the service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `loadOrderItems` method works in the same way, except that the URI should
    be similar to the following pattern: `http://<host>:<port>/<appcontext>/orderItems`,
    with an HTTP `GET:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, the database activities are not implemented. However, in a real
    application, the HTTP method `DELETE` could be used to delete an entity (for example,
    `orderItem)` from the database, and the `PUT` method could be used to update a
    record (for example, `order)`.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Marshalling and Object-XML Mapping (OXM)"),*Marshalling
    and Object-XML Mapping (OXM):*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Marshalling with XStream*'
  prefs: []
  type: TYPE_NORMAL
- en: Using the REST Client tool to access Spring RESTful Web-Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**REST Client** is an application to call and test RESTful Web-Services. REST
    Client is provided as a Firefox/Flock add-on. The Firefox REST Client supports
    all HTTP methods, **RFC2616 (HTTP/1.1),** and **RFC2518 (WebDAV).** Using this
    add-on, you can build your own customized URI, add a header, send it to RESTful
    Web-Services, and get the response back.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use Firefox REST Client to test how a RESTful
    Web-Service is presented. This recipe uses the first recipe of this chapter, *Setting
    up a Spring RESTful Web-Service using RESTful features in Spring MVC*, as RESTful
    Web-Services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Download and install the following add-on for Firefox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://addons.mozilla.org/en-US/firefox/addon/restclient/](http://https://addons.mozilla.org/en-US/firefox/addon/restclient/).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run `LiveRestaurant_R-9.1` from this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Firefox browser and go to **Tools | Rest Client**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the **Method** to **GET** and enter the URL: [http://localhost:8080/LiveRestaurant/orderItems](http://localhost:8080/LiveRestaurant/orderItems),
    and click on **Send:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5825OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Change **Method** to **POST**, enter the URL: [http://localhost:8080/LiveRestaurant/order/1](http://localhost:8080/LiveRestaurant/order/1),
    and click on **Send:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5825OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Setting up a Spring RESTful Web-Service using RESTful features in Spring MVC*'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Spring RESTful Web-Service using HTTP message conversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The client and server on the HTTP protocol exchange data using text format.
    Eventually, there are requirements to accept different request formats and covert
    the text format into a meaningful format, such as an Object or the JSON format.
    Spring provides features to provide multiple requests/presentations to/from the
    same text format.
  prefs: []
  type: TYPE_NORMAL
- en: Spring 3 introduced `ContentNegotiatingViewResolver`, which can select various
    views from the same URI and can provide multiple presentations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The alternate way of doing the same task is using the `HttpMessageConverter`
    interface and the `@ResponseBody` annotation. Implementation of the `HttpMessageConverter`
    interface from Spring converts HTTP messages into several formats. Its widely
    used implementations include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`StringHttpMessageConverter` implementation reads/writes text from the HTTP
    request/response. This is the default converter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MarshallingHttpMessageConverter` implementation marshalls/unmarshalls objects
    from the text HTTP request/response. It gets a constructor argument to specify
    the type of Marshaller (such as `Jaxb, XStream`, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MappingJacksonHttpMessageConverter` implementation converts text into the
    JSON data format or vice-versa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, message conversion using `MarshallingHttpMessageConverter, MappingJacksonHttpMessageConverter`,
    and `AtomFeedHttpMessageConverter` is presented. Since this project is similar
    to the first recipe of this chapter, *Setting up a Spring RESTful Web-Service
    using RESTful features in Spring MVC*, it is reused as a template for the project.
    The difference in this recipe is in the controller implementation and the application
    context configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The client project of this Web-Service is implemented here, but it will be detailed
    in the last recipe of this chapter, *Creating a WS client for Spring RESTful Web-Service
    using Spring template classes*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-9.2 (LiveRestaurant_R-9.2-Client`
    is included in the code for testing purposes in this recipe. However, it will
    be explained in the last recipe), and it has the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`com.springsource.javax.servlet-2.5.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-oxm-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-web-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-webmvc-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xstream-1.3.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commons-logging-1.1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jackson-core-asl-1.7.5.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jackson-mapper-asl-1.7.5.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rome-1.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jackson-core` and `jackson-mapper` support the JSON format and the others
    support the ATOM format.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configure the `DispatcherServlet` inside the `web.xml` file `(URL:http://<host>:<port>/<appcontext>`/*
    is to be forwarded to this servlet).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the controller file (`OrderController.java`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define domain POJOs (`Order.java,OrderItem.java`) and services `(OrderService,
    OrderServiceImpl)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the server-side application context-file (`order-servlet.xml`) and
    register the converters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the **Method** to **POST** and add a **Request Header: Name** - `accept`,
    **Value** - `application/json`. Enter the URL [http://localhost:8080/LiveRestaurant/orderJson/1](http://localhost:8080/LiveRestaurant/orderJson/1)
    and click on **Send:**![How to do it...](img/5825OS_09_03.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the **Method** to **GET**, and add **Request Header: Name** - `accept`,
    **Value** - `application/atom+xml`. Enter the URL [http://localhost:8080/LiveRestaurant/orderItemsFeed](http://localhost:8080/LiveRestaurant/orderItemsFeed)
    and click on **Send:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5825OS_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is almost the same as the first recipe of this chapter, except that
    it uses the message converter and `@ResponseBody` to provide multiple presentations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first recipe, `MarshallingView` was responsible for converting the response
    to the selected XML type of the view (using `XstreamMarshaller)`. However, here,
    the message converters are responsible for rendering data models into a selected
    format, `MarshallingHttpMessageConverter` is responsible for converting the `List<OrderItem>`
    to the `application/xml` format (using `XstreamMarshaller)`, and `MappingJacksonHttpMessageConverter`
    is used to convert an order into the `application/json` format. `AtomFeedHttpMessageConverter`
    is used to convert `Feed` (that wraps XML content generated from `List<OrderItem>`
    using `XStreamMarshaller` into the `application/atom+xml` format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the controller, the following code causes the controller's method to accept
    the request URI method's `POST` format — `json:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: And it returns the `Order` object in JSON format (using `@ResponseBody` and
    `MappingJacksonHttpMessageConverter`, configured in `order-context.xml):`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The following code causes the controller's method to accept the request URI
    method's `GET` format — `atom:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It also returns the `List<OrderItem>` object in `Atom` format (using `@ResponseBody`
    and `AtomFeedHttpMessageConverter`, configured in `order-context.xml):`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Setting up a Spring RESTful Web-Service using RESTful features in Spring MVC*'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a WS Client for the Spring RESTful Web-Service using Spring template
    classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring provides varieties of template classes that simplify many complexities
    using different technologies. For example, `WebServiceTemplate` is for calling
    a SOAP-based Web-Service, and `JmsTemplate` is for sending/receiving JMS messages.
    Spring also has the `RestTemplate` to simplify the interaction with RESTful Web-Services.
  prefs: []
  type: TYPE_NORMAL
- en: To use `RestTemplate:`
  prefs: []
  type: TYPE_NORMAL
- en: Create an instance of `RestTemplate` (can be done using the `@Autowired` feature)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure one-to-many message converters (as described in the previous recipe)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call methods of `RestTemplate` to call a RESTful Web-Service and get a response
    back
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will learn to consume a RESTful Web-Service using the `RestTemplate`.
    This recipe uses the third recipe of this chapter, *Setting up a Spring RESTful
    Web-Service using HTTP Message Conversion*, as the RESTful Web-Service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-9.2-Client` (`LiveRestaurant_R-9.2`
    is included in this recipe to set up a RESTful server, as explained earlier in
    the recipe *Setting up a Spring RESTful Web-Service using HTTP Message Conversion)*
    with the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-oxm-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-web-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xstream-1.3.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commons-logging-1.1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jackson-core-asl-1.7.5.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jackson-mapper-asl-1.7.5.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rome-1.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.6.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Define domain POJOs `(Order.java, OrderItem.java)` and services `(OrderService,
    OrderServiceImpl)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the client-side application context-file (`order-servlet.xml`) and
    register the converters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a helper class (`OrderClient`) that wraps calling the RESTful Web-Service
    using the `RestTemplate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command on `Liverestaurant_R-9.2:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Run the following command on `Liverestaurant_R-9.2-Client:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the client-side output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Application context loaded by `OrderServiceClientTest`, loads, instantiates,
    and injects `RestTemplate` into `OrderClient`. This class calls the controller's
    method using `RestTemplate` and returns a value back to the test suite class (`OrderServiceClientTest`).
  prefs: []
  type: TYPE_NORMAL
- en: In the suite class test methods, the response will be compared with the desired
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `applicationContext.xml` defines the `restTemplate` bean and sets a list
    of message converters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Converters set inside the `messageConverters` are responsible for converting
    requests/responses in different formats (XML, JSON, ATOM) back to `object` type.
    `XstreamMarshaller` gets the list of recognized POJOs `(Order, OrderItem)`, using
    the annotation tags in those classes.
  prefs: []
  type: TYPE_NORMAL
- en: '`OrderClient.java` is a helper class that wraps calling RESTful Web-Services,
    using `RestTemplate:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There's more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses only two methods of the `RestTemplate` (exchange and `postForEntity)`.
    However, `RestTemplate` supports several caller methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`exchange:` It calls specific HTTP (GET, `POST, PUT`, and `DELETE)` methods
    and converts the HTTP response'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getForObject:` It calls the HTTP `GET` method and converts the HTTP response
    into an object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postForObject:` It calls the HTTP `POST` method and converts the HTTP response
    into an object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Setting up a Spring RESTful Web-Service using RESTful features in Spring MVC*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Setting up a Spring RESTful Web-Service using HTTP message conversion*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The book, *RESTful Java Web Services*, at [http://www.packtpub.com/restful-java-web-services/book](http://www.packtpub.com/restful-java-web-services/book).
  prefs: []
  type: TYPE_NORMAL
